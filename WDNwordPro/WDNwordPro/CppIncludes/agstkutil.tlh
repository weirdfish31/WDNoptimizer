// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (8722c236).
//
// c:\r_stk_v9.2.x\source\lib\release.net\tlhbuilder\agstkutil.tlh
//
// C++ source equivalent of Win32 type library AgStkUtil.tlb
// compiler-generated file created 11/23/11 at 05:29:05 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace STKUtil {

//
// Forward references and typedefs
//

struct __declspec(uuid("143176a1-6a8f-41ab-b9b4-c581bd51b350"))
/* LIBID */ __STKUtil;
enum AgELogMsgType;
enum AgELogMsgDispID;
enum AgELineStyle;
enum AgEFillStyle;
enum AgEExecMultiCmdResultAction;
struct /* coclass */ AgExecCmdResult;
struct __declspec(uuid("b8e4a793-a47a-4472-b338-8daf1fd14ff6"))
/* dual interface */ IAgExecCmdResult;
struct /* coclass */ AgExecMultiCmdResult;
struct __declspec(uuid("b21864d9-49d4-469e-bddf-6e59130d1ee0"))
/* dual interface */ IAgExecMultiCmdResult;
struct /* coclass */ AgUnitPrefsUnit;
struct __declspec(uuid("919ba1f5-41e6-4308-9e0f-ae648ce435de"))
/* dual interface */ _IAgUnitPrefsUnit;
struct __declspec(uuid("24bf28d5-861b-4531-a961-a9704207fe3a"))
/* interface */ IAgUnitPrefsDim;
struct __declspec(uuid("4279517f-6759-414e-bfae-7d31f7fc8c60"))
/* dual interface */ IAgUnitPrefsUnitCollection;
struct __declspec(uuid("8216427e-c75a-48f0-9387-62ed4a6a55a2"))
/* interface */ IAgUnitPrefsUnit;
struct /* coclass */ AgUnitPrefsUnitCollection;
struct /* coclass */ AgUnitPrefsDim;
struct __declspec(uuid("f1568865-1bec-45ca-842b-4c7827e3fdaa"))
/* dual interface */ _IAgUnitPrefsDim;
struct /* coclass */ AgUnitPrefsDimCollection;
struct __declspec(uuid("89490ec3-aa98-49d7-b429-87783fc0b552"))
/* dual interface */ IAgUnitPrefsDimCollection;
struct /* coclass */ AgConversionUtility;
struct __declspec(uuid("dc9ec9e7-c449-412c-857c-7a7ef328df99"))
/* dual interface */ _IAgConversionUtility;
struct __declspec(uuid("c1ae66e0-3137-4c13-987c-0e891c10d1b0"))
/* interface */ IAgQuantity;
struct __declspec(uuid("d8e6d3f2-de46-4066-a85c-9ae4d46a16e6"))
/* interface */ IAgDate;
struct __declspec(uuid("59cad3e2-203c-482d-91fe-3d251e45f379"))
/* interface */ IAgPosition;
enum AgEPositionType;
struct __declspec(uuid("5f983e5c-f477-4c98-92b7-cd05cd4be6d2"))
/* interface */ IAgDirection;
enum AgEDirectionType;
enum AgEEulerDirectionSequence;
enum AgEPRSequence;
struct __declspec(uuid("df9f4eea-a0f2-4f94-bccd-b435b5a2905a"))
/* interface */ IAgOrientation;
enum AgEOrientationType;
enum AgEAzElAboutBoresight;
enum AgEEulerOrientationSequence;
enum AgEYPRAnglesSequence;
struct __declspec(uuid("b35673af-c004-49e5-88ff-7207125c5a96"))
/* interface */ IAgOrbitState;
enum AgEOrbitStateType;
enum AgECoordinateSystem;
enum AgEEquinoctialFormulation;
struct __declspec(uuid("0d0c0b79-ba3f-44d7-a73d-61b632a11e83"))
/* interface */ IAgCartesian3Vector;
struct __declspec(uuid("0707e88c-ea6d-40a2-b16d-b7b786b8e072"))
/* interface */ IAgConversionUtility;
struct /* coclass */ AgQuantity;
struct __declspec(uuid("af318512-bf19-4c3e-a20f-fcc683d16c6b"))
/* dual interface */ _IAgQuantity;
struct /* coclass */ AgDate;
struct __declspec(uuid("8f51313e-ef70-4240-b7c4-f89b4d51ff50"))
/* dual interface */ _IAgDate;
struct /* coclass */ AgComponentDirectory;
struct __declspec(uuid("690a7281-819f-456b-be59-fe4bbb18a8a2"))
/* dual interface */ _IAgComponentDirectory;
enum AgEComponent;
struct __declspec(uuid("adf428e7-40d7-491a-962d-74e75bbbdb11"))
/* dual interface */ IAgComponentInfoCollection;
struct __declspec(uuid("84ef504b-d0a6-4780-b805-85b0146f8f09"))
/* interface */ IAgComponentInfo;
struct __declspec(uuid("887e5d10-abe4-4979-9109-60e4b9b23b71"))
/* interface */ IAgComponentDirectory;
struct /* coclass */ AgComponentInfoCollection;
struct /* coclass */ AgPosition;
struct __declspec(uuid("1a201bd6-726d-4de3-8d29-2a6e0333da1c"))
/* dual interface */ _IAgPosition;
struct __declspec(uuid("0b8213c4-6a43-4479-85a5-dc9f537cdf7b"))
/* interface */ IAgLocationData;
struct /* coclass */ AgCartesian;
struct __declspec(uuid("d6070893-4a7c-4a87-a265-1eac50b029b3"))
/* dual interface */ _IAgCartesian;
struct __declspec(uuid("41fc322e-5b25-484a-b01f-26e69a9e6519"))
/* interface */ IAgCartesian;
struct /* coclass */ AgGeodetic;
struct __declspec(uuid("8e27befe-7e4f-484a-afb3-64a656c70bc7"))
/* dual interface */ _IAgGeodetic;
struct __declspec(uuid("ac4fb10a-0400-4369-8873-c50e9ef1185b"))
/* interface */ IAgGeodetic;
struct /* coclass */ AgGeocentric;
struct __declspec(uuid("aa426747-9495-44be-964d-638048e2a251"))
/* dual interface */ _IAgGeocentric;
struct __declspec(uuid("c17de028-59bd-4db6-8c51-0cea05cc751c"))
/* interface */ IAgGeocentric;
struct /* coclass */ AgPlanetodetic;
struct __declspec(uuid("bb15cc9b-9d51-43ce-8bf0-8945c8f20922"))
/* dual interface */ _IAgPlanetodetic;
struct __declspec(uuid("146fde9e-6fce-4324-ba77-6a93e02def12"))
/* interface */ IAgPlanetodetic;
struct /* coclass */ AgPlanetocentric;
struct __declspec(uuid("55ccbf3b-c6d4-4d6a-852b-bd9205bbd7e8"))
/* dual interface */ _IAgPlanetocentric;
struct __declspec(uuid("9cf2841b-0567-4146-984f-e34d738c9e9c"))
/* interface */ IAgPlanetocentric;
struct /* coclass */ AgSpherical;
struct __declspec(uuid("f374492b-e968-4f13-b45b-94fd977eda8c"))
/* dual interface */ _IAgSpherical;
struct __declspec(uuid("dd4b3afb-2273-4d70-b63d-3adc5aff76f2"))
/* interface */ IAgSpherical;
struct /* coclass */ AgCylindrical;
struct __declspec(uuid("eb592c29-d628-49d3-ae88-0a81fa427af5"))
/* dual interface */ _IAgCylindrical;
struct __declspec(uuid("d95a5723-6361-413f-a3f8-93a6b83e50f2"))
/* interface */ IAgCylindrical;
struct /* coclass */ AgDirection;
struct __declspec(uuid("4f7e1a4b-0611-482a-abda-73844f164327"))
/* dual interface */ _IAgDirection;
struct /* coclass */ AgDirectionEuler;
struct __declspec(uuid("94446894-c47b-486b-810d-c9f2e96e82de"))
/* dual interface */ _IAgDirectionEuler;
struct __declspec(uuid("e3f99e16-8099-46de-823c-e543303bd936"))
/* interface */ IAgDirectionEuler;
struct /* coclass */ AgDirectionPR;
struct __declspec(uuid("4c3ef5d3-a33c-47f5-a0c9-bc0a5f1b5732"))
/* dual interface */ _IAgDirectionPR;
struct __declspec(uuid("7a018862-4c47-4be1-acc1-36d5f3b12d7c"))
/* interface */ IAgDirectionPR;
struct /* coclass */ AgDirectionRADec;
struct __declspec(uuid("bfa98560-69c7-496a-8ab2-0b03f89631a2"))
/* dual interface */ _IAgDirectionRADec;
struct __declspec(uuid("627f2183-35d9-4151-af8c-6480fed90334"))
/* interface */ IAgDirectionRADec;
struct /* coclass */ AgDirectionXYZ;
struct __declspec(uuid("b94c93f6-3587-420f-a28f-e83f19c6683a"))
/* dual interface */ _IAgDirectionXYZ;
struct __declspec(uuid("b589422a-8585-4ffb-8d27-1dcc7f338c04"))
/* interface */ IAgDirectionXYZ;
struct /* coclass */ AgOrientation;
struct __declspec(uuid("9e766860-e85f-42e9-ac62-d0a97716252f"))
/* dual interface */ _IAgOrientation;
struct /* coclass */ AgOrientationAzEl;
struct __declspec(uuid("5295aaf2-cdce-48f7-8f41-160d435f1065"))
/* dual interface */ _IAgOrientationAzEl;
struct __declspec(uuid("2d32651c-8dab-4240-b2e4-971e71af28e3"))
/* interface */ IAgOrientationAzEl;
struct /* coclass */ AgOrientationEulerAngles;
struct __declspec(uuid("eba14db8-59cb-4802-9237-0c2b2c8f92df"))
/* dual interface */ _IAgOrientationEulerAngles;
struct __declspec(uuid("093a9016-8acc-4095-9fbe-61d46c1dd50e"))
/* interface */ IAgOrientationEulerAngles;
struct /* coclass */ AgOrientationQuaternion;
struct __declspec(uuid("159e6a8f-3456-4453-8e0b-d315e375969a"))
/* dual interface */ _IAgOrientationQuaternion;
struct __declspec(uuid("a3df07b8-0696-4e72-a147-ff772fc80084"))
/* interface */ IAgOrientationQuaternion;
struct /* coclass */ AgOrientationYPRAngles;
struct __declspec(uuid("3f02d917-cf4f-4089-987c-f829ef5addc4"))
/* dual interface */ _IAgOrientationYPRAngles;
struct __declspec(uuid("ad361ed2-eabe-47b9-b0fc-da019add1574"))
/* interface */ IAgOrientationYPRAngles;
struct /* coclass */ AgOrbitState;
struct __declspec(uuid("beb000b9-c630-4430-8d88-3f01e9fec856"))
/* dual interface */ _IAgOrbitState;
struct /* coclass */ AgOrbitStateCoordinateSystem;
struct __declspec(uuid("5b6b6c3b-6231-4078-9a66-3f73f6337bf2"))
/* dual interface */ _IAgOrbitStateCoordinateSystem;
struct __declspec(uuid("17004f4a-3f1f-42f1-baab-0213f2c145f5"))
/* interface */ IAgOrbitStateCoordinateSystem;
struct /* coclass */ AgOrbitStateCartesian;
struct __declspec(uuid("875dd687-753d-4d6f-9758-a590a2cd28a7"))
/* dual interface */ _IAgOrbitStateCartesian;
struct __declspec(uuid("67709b77-f692-4a1a-8573-cd3c4d5b1d64"))
/* interface */ IAgOrbitStateCartesian;
struct /* coclass */ AgClassicalSizeShapeAltitude;
struct __declspec(uuid("ab3205d6-ae64-40bd-91e6-ae77f28c6eea"))
/* dual interface */ _IAgClassicalSizeShapeAltitude;
struct __declspec(uuid("ca08cdfd-20f9-4d5c-b4ce-0b2fe1b26102"))
/* interface */ IAgClassicalSizeShape;
struct __declspec(uuid("ec17aeba-5fe3-4456-999b-c616cf306061"))
/* interface */ IAgClassicalSizeShapeAltitude;
struct /* coclass */ AgClassicalSizeShapeMeanMotion;
struct __declspec(uuid("5557e3c5-7c11-400f-b562-4e45d3e1cd3a"))
/* dual interface */ _IAgClassicalSizeShapeMeanMotion;
struct __declspec(uuid("53ac6bd8-57cd-4a1b-a04c-95337156b4dd"))
/* interface */ IAgClassicalSizeShapeMeanMotion;
struct /* coclass */ AgClassicalSizeShapePeriod;
struct __declspec(uuid("a5093d44-3c03-4f73-948e-e670b3a4f46f"))
/* dual interface */ _IAgClassicalSizeShapePeriod;
struct __declspec(uuid("519a715b-4145-40e4-9908-8b473b80fe24"))
/* interface */ IAgClassicalSizeShapePeriod;
struct /* coclass */ AgClassicalSizeShapeRadius;
struct __declspec(uuid("39af02fb-24a8-4176-8ee2-496477dec4c3"))
/* dual interface */ _IAgClassicalSizeShapeRadius;
struct __declspec(uuid("6d734250-8b58-42dc-935a-1d8a4d5dbe9a"))
/* interface */ IAgClassicalSizeShapeRadius;
struct /* coclass */ AgClassicalSizeShapeSemimajorAxis;
struct __declspec(uuid("c5de8cbb-e84f-4f2d-8d60-82cba7b107e5"))
/* dual interface */ _IAgClassicalSizeShapeSemimajorAxis;
struct __declspec(uuid("96085a9a-2919-4c5c-8394-4b99790181c4"))
/* interface */ IAgClassicalSizeShapeSemimajorAxis;
struct /* coclass */ AgOrientationAscNodeLAN;
struct __declspec(uuid("7f5a7c2b-6021-4ca7-9f6a-5514f1a87aea"))
/* dual interface */ _IAgOrientationAscNodeLAN;
struct __declspec(uuid("60f22e80-a9a3-4f49-bc7e-de8b5f309b43"))
/* interface */ IAgOrientationAscNode;
struct __declspec(uuid("22e905c4-8fc4-49d5-afd7-3b06daf6b7fb"))
/* interface */ IAgOrientationAscNodeLAN;
struct /* coclass */ AgOrientationAscNodeRAAN;
struct __declspec(uuid("3f863495-517f-48a0-9806-410ea936c5ad"))
/* dual interface */ _IAgOrientationAscNodeRAAN;
struct __declspec(uuid("56ecea56-405b-402b-9327-19c310a77ec6"))
/* interface */ IAgOrientationAscNodeRAAN;
struct /* coclass */ AgClassicalOrientation;
struct __declspec(uuid("73169bd2-d1c2-4441-b706-a745b1563383"))
/* dual interface */ _IAgClassicalOrientation;
enum AgEOrientationAscNode;
struct __declspec(uuid("c087ec7f-17a3-4cbc-8f04-bc1798fa3c82"))
/* interface */ IAgClassicalOrientation;
struct /* coclass */ AgClassicalLocationArgumentOfLatitude;
struct __declspec(uuid("c7717f60-20ac-4179-a1a6-8643dfc51813"))
/* dual interface */ _IAgClassicalLocationArgumentOfLatitude;
struct __declspec(uuid("84858188-f7fb-4abc-89d2-35b0a69d8417"))
/* interface */ IAgClassicalLocation;
struct __declspec(uuid("6d2a3b94-952e-42d1-abaf-a35db1237a6e"))
/* interface */ IAgClassicalLocationArgumentOfLatitude;
struct /* coclass */ AgClassicalLocationEccentricAnomaly;
struct __declspec(uuid("c2e22d7d-ff1c-4eb1-a09e-4c9a080721c5"))
/* dual interface */ _IAgClassicalLocationEccentricAnomaly;
struct __declspec(uuid("b012558c-bfa2-4745-b302-cd75d42f3c66"))
/* interface */ IAgClassicalLocationEccentricAnomaly;
struct /* coclass */ AgClassicalLocationMeanAnomaly;
struct __declspec(uuid("70de6ddc-10d7-40c7-99bb-73c146c07a88"))
/* dual interface */ _IAgClassicalLocationMeanAnomaly;
struct __declspec(uuid("caeaa318-62d8-4b5f-aaa6-150a12449a27"))
/* interface */ IAgClassicalLocationMeanAnomaly;
struct /* coclass */ AgClassicalLocationTimePastAN;
struct __declspec(uuid("621132d7-815e-4d41-98f0-6a3493d89bf7"))
/* dual interface */ _IAgClassicalLocationTimePastAN;
struct __declspec(uuid("6d9048ec-fb73-48f3-9441-993f24703b12"))
/* interface */ IAgClassicalLocationTimePastAN;
struct /* coclass */ AgClassicalLocationTimePastPerigee;
struct __declspec(uuid("54db3197-26ad-46d9-850d-ee2c7c7c7f3e"))
/* dual interface */ _IAgClassicalLocationTimePastPerigee;
struct __declspec(uuid("614e27b8-2991-46d6-9058-588ecec9cd4b"))
/* interface */ IAgClassicalLocationTimePastPerigee;
struct /* coclass */ AgClassicalLocationTrueAnomaly;
struct __declspec(uuid("e0336b5d-f25e-4f77-a6bb-65589b1e25aa"))
/* dual interface */ _IAgClassicalLocationTrueAnomaly;
struct __declspec(uuid("c65d8e78-fb32-463a-b1d6-454496b933ee"))
/* interface */ IAgClassicalLocationTrueAnomaly;
struct /* coclass */ AgOrbitStateClassical;
struct __declspec(uuid("468db809-1d71-403f-975d-f978d47a9ddf"))
/* dual interface */ _IAgOrbitStateClassical;
enum AgEClassicalSizeShape;
enum AgEClassicalLocation;
struct __declspec(uuid("c8b67462-82f9-4575-a1d4-bf0947d346fa"))
/* interface */ IAgOrbitStateClassical;
struct /* coclass */ AgGeodeticSizeAltitude;
struct __declspec(uuid("07265a1e-3e0f-4af4-8700-b3d2f500bc36"))
/* dual interface */ _IAgGeodeticSizeAltitude;
struct __declspec(uuid("6f3cbf77-d01a-4620-8f99-1f3984359bf3"))
/* interface */ IAgGeodeticSize;
struct __declspec(uuid("e47a2a08-5e16-4003-9cf5-aa1abeffdad7"))
/* interface */ IAgGeodeticSizeAltitude;
struct /* coclass */ AgGeodeticSizeRadius;
struct __declspec(uuid("391501d3-05c3-4d8e-85ff-e7b215fd763d"))
/* dual interface */ _IAgGeodeticSizeRadius;
struct __declspec(uuid("0611069a-af65-4116-99d1-9b74d94de2d4"))
/* interface */ IAgGeodeticSizeRadius;
struct /* coclass */ AgOrbitStateGeodetic;
struct __declspec(uuid("9410b7e0-72ab-4bc9-ba45-ab3790af00f0"))
/* dual interface */ _IAgOrbitStateGeodetic;
enum AgEGeodeticSize;
struct __declspec(uuid("c064fdf2-6a0c-464d-bcf1-393a3ec4fad2"))
/* interface */ IAgOrbitStateGeodetic;
struct /* coclass */ AgDelaunayL;
struct __declspec(uuid("d82ec7df-322f-4044-b0ba-5c770ff36814"))
/* dual interface */ _IAgDelaunayL;
struct __declspec(uuid("c06f9593-0175-4bdb-a2e0-57333ef9c162"))
/* interface */ IAgDelaunayActionVariable;
struct __declspec(uuid("02a59031-4d20-42a9-bc70-f6bbef5a9f63"))
/* interface */ IAgDelaunayL;
struct /* coclass */ AgDelaunayLOverSQRTmu;
struct __declspec(uuid("0cbe7af5-70cc-423f-9001-8510e29a3aab"))
/* dual interface */ _IAgDelaunayLOverSQRTmu;
struct __declspec(uuid("40ea4764-3b5a-4677-a9ac-0248486d5a13"))
/* interface */ IAgDelaunayLOverSQRTmu;
struct /* coclass */ AgDelaunayH;
struct __declspec(uuid("8782ade7-55a7-4e22-ab78-8382d10ddf6b"))
/* dual interface */ _IAgDelaunayH;
struct __declspec(uuid("8cff8d38-f377-4b11-be5c-33f2828fb570"))
/* interface */ IAgDelaunayH;
struct /* coclass */ AgDelaunayHOverSQRTmu;
struct __declspec(uuid("22664921-ff2b-4df9-b853-40210c1e1c9f"))
/* dual interface */ _IAgDelaunayHOverSQRTmu;
struct __declspec(uuid("a14a2de6-c6b2-4d09-8086-53ab67aaf5e8"))
/* interface */ IAgDelaunayHOverSQRTmu;
struct /* coclass */ AgDelaunayG;
struct __declspec(uuid("04d42237-71d1-4217-adb3-c3348c575baa"))
/* dual interface */ _IAgDelaunayG;
struct __declspec(uuid("6ce72f93-ecdb-4011-b529-f231dd9d33b3"))
/* interface */ IAgDelaunayG;
struct /* coclass */ AgDelaunayGOverSQRTmu;
struct __declspec(uuid("53f5a605-4a76-4ee0-97e3-cc3a723f3049"))
/* dual interface */ _IAgDelaunayGOverSQRTmu;
struct __declspec(uuid("02d3a94e-18d5-405e-a351-adfa80b4f894"))
/* interface */ IAgDelaunayGOverSQRTmu;
struct /* coclass */ AgOrbitStateDelaunay;
struct __declspec(uuid("e6f177a4-288c-4b87-abae-ac736ff4fcdb"))
/* dual interface */ _IAgOrbitStateDelaunay;
enum AgEDelaunayLType;
enum AgEDelaunayHType;
enum AgEDelaunayGType;
struct __declspec(uuid("e105ee10-5381-4f0a-aef3-b171459d9634"))
/* interface */ IAgOrbitStateDelaunay;
struct /* coclass */ AgEquinoctialSizeShapeMeanMotion;
struct __declspec(uuid("0a0f8836-0e8a-4431-9a7a-cd34dc2e88f1"))
/* dual interface */ _IAgEquinoctialSizeShapeMeanMotion;
struct __declspec(uuid("e6d7486a-7810-40b5-a1d4-a4194abc4259"))
/* interface */ IAgEquinoctialSizeShapeMeanMotion;
struct /* coclass */ AgEquinoctialSizeShapeSemimajorAxis;
struct __declspec(uuid("504666c0-38d0-4846-8ac8-a0f4a0d3b68d"))
/* dual interface */ _IAgEquinoctialSizeShapeSemimajorAxis;
struct __declspec(uuid("5b2acc76-55ae-4b67-9db7-a78f917178ea"))
/* interface */ IAgEquinoctialSizeShapeSemimajorAxis;
struct /* coclass */ AgOrbitStateEquinoctial;
struct __declspec(uuid("f63f8c28-81ae-4f76-8c6a-c097681a6a50"))
/* dual interface */ _IAgOrbitStateEquinoctial;
enum AgEEquinoctialSizeShape;
struct __declspec(uuid("f93eb695-b45c-4a4a-ae57-b3a1bbdcf298"))
/* interface */ IAgOrbitStateEquinoctial;
struct /* coclass */ AgMixedSphericalFPAHorizontal;
struct __declspec(uuid("d836ee05-f04b-45cd-815d-56e69eecc7f0"))
/* dual interface */ _IAgMixedSphericalFPAHorizontal;
struct __declspec(uuid("1e3c1499-aa99-4005-bb90-510ebd2f7d0f"))
/* interface */ IAgFlightPathAngle;
struct __declspec(uuid("1aae2870-5014-47fc-ba21-c646254df8fc"))
/* interface */ IAgMixedSphericalFPAHorizontal;
struct /* coclass */ AgMixedSphericalFPAVertical;
struct __declspec(uuid("26c7b098-a885-4945-882a-70c11fee75f9"))
/* dual interface */ _IAgMixedSphericalFPAVertical;
struct __declspec(uuid("5e8606f7-f47b-4d70-909b-f81397a04751"))
/* interface */ IAgMixedSphericalFPAVertical;
struct /* coclass */ AgOrbitStateMixedSpherical;
struct __declspec(uuid("b185ab33-9af8-425e-98e9-b57d48ce665d"))
/* dual interface */ _IAgOrbitStateMixedSpherical;
enum AgEMixedSphericalFPA;
struct __declspec(uuid("5ac981f1-3551-4221-8f98-29b3fd62880e"))
/* interface */ IAgOrbitStateMixedSpherical;
struct /* coclass */ AgSphericalFPAHorizontal;
struct __declspec(uuid("b78a78c7-d911-4889-94b2-0165d98a7d76"))
/* dual interface */ _IAgSphericalFPAHorizontal;
struct __declspec(uuid("26aa955e-2690-42b8-9b26-f0ed086cc977"))
/* interface */ IAgSphericalFPAHorizontal;
struct /* coclass */ AgSphericalFPAVertical;
struct __declspec(uuid("984b5486-770b-4110-a76c-8d0a511ae615"))
/* dual interface */ _IAgSphericalFPAVertical;
struct __declspec(uuid("d4a87d44-b203-4d51-a115-8e5268c9a574"))
/* interface */ IAgSphericalFPAVertical;
struct /* coclass */ AgOrbitStateSpherical;
struct __declspec(uuid("f5354a90-59b8-4ac6-90a3-10a7ec075901"))
/* dual interface */ _IAgOrbitStateSpherical;
enum AgESphericalFPA;
struct __declspec(uuid("b8fc3f3f-df83-46c8-bb75-2b9d3529a6d8"))
/* interface */ IAgOrbitStateSpherical;
struct /* coclass */ AgDoublesCollection;
struct __declspec(uuid("25343feb-f884-4e5b-9ef2-56ac2a716315"))
/* dual interface */ IAgDoublesCollection;
struct /* coclass */ AgCartesian3Vector;
struct __declspec(uuid("44a49a20-ee1d-4da9-9da3-efcff2392938"))
/* dual interface */ _IAgCartesian3Vector;
struct /* coclass */ AgCartesian2Vector;
struct __declspec(uuid("3d0a312e-c325-4d1f-81af-e58f012f36d9"))
/* dual interface */ _IAgCartesian2Vector;
struct __declspec(uuid("04f7ac52-f06a-4281-8fcb-a9ef8e3179f5"))
/* interface */ IAgCartesian2Vector;
struct /* coclass */ AgPropertyInfo;
struct __declspec(uuid("348c3352-610e-42cb-8ee8-c9f624d3aa35"))
/* interface */ IAgPropertyInfo;
enum AgEPropertyInfoValueType;
struct __declspec(uuid("c68e0579-a052-4df4-83cb-88476c629925"))
/* dual interface */ _IAgPropertyInfo;
struct /* coclass */ AgPropertyInfoCollection;
struct __declspec(uuid("a99ba60d-bb78-4986-9f67-af55a3a388c4"))
/* dual interface */ IAgPropertyInfoCollection;
struct /* coclass */ AgRuntimeTypeInfo;
struct __declspec(uuid("349c21ba-8069-40ff-81e3-6e2c60c552b4"))
/* dual interface */ _IAgRuntimeTypeInfo;
struct __declspec(uuid("fe732802-860e-4af7-8401-65d43bfaeacb"))
/* interface */ IAgRuntimeTypeInfo;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAgExecCmdResult, __uuidof(IAgExecCmdResult));
_COM_SMARTPTR_TYPEDEF(IAgExecMultiCmdResult, __uuidof(IAgExecMultiCmdResult));
_COM_SMARTPTR_TYPEDEF(IAgQuantity, __uuidof(IAgQuantity));
_COM_SMARTPTR_TYPEDEF(IAgDate, __uuidof(IAgDate));
_COM_SMARTPTR_TYPEDEF(IAgPosition, __uuidof(IAgPosition));
_COM_SMARTPTR_TYPEDEF(IAgDirection, __uuidof(IAgDirection));
_COM_SMARTPTR_TYPEDEF(IAgOrientation, __uuidof(IAgOrientation));
_COM_SMARTPTR_TYPEDEF(IAgOrbitState, __uuidof(IAgOrbitState));
_COM_SMARTPTR_TYPEDEF(IAgCartesian3Vector, __uuidof(IAgCartesian3Vector));
_COM_SMARTPTR_TYPEDEF(_IAgConversionUtility, __uuidof(_IAgConversionUtility));
_COM_SMARTPTR_TYPEDEF(IAgConversionUtility, __uuidof(IAgConversionUtility));
_COM_SMARTPTR_TYPEDEF(_IAgQuantity, __uuidof(_IAgQuantity));
_COM_SMARTPTR_TYPEDEF(_IAgDate, __uuidof(_IAgDate));
_COM_SMARTPTR_TYPEDEF(IAgComponentInfo, __uuidof(IAgComponentInfo));
_COM_SMARTPTR_TYPEDEF(IAgComponentInfoCollection, __uuidof(IAgComponentInfoCollection));
_COM_SMARTPTR_TYPEDEF(_IAgComponentDirectory, __uuidof(_IAgComponentDirectory));
_COM_SMARTPTR_TYPEDEF(IAgComponentDirectory, __uuidof(IAgComponentDirectory));
_COM_SMARTPTR_TYPEDEF(_IAgPosition, __uuidof(_IAgPosition));
_COM_SMARTPTR_TYPEDEF(IAgLocationData, __uuidof(IAgLocationData));
_COM_SMARTPTR_TYPEDEF(_IAgCartesian, __uuidof(_IAgCartesian));
_COM_SMARTPTR_TYPEDEF(IAgCartesian, __uuidof(IAgCartesian));
_COM_SMARTPTR_TYPEDEF(_IAgGeodetic, __uuidof(_IAgGeodetic));
_COM_SMARTPTR_TYPEDEF(IAgGeodetic, __uuidof(IAgGeodetic));
_COM_SMARTPTR_TYPEDEF(_IAgGeocentric, __uuidof(_IAgGeocentric));
_COM_SMARTPTR_TYPEDEF(IAgGeocentric, __uuidof(IAgGeocentric));
_COM_SMARTPTR_TYPEDEF(_IAgPlanetodetic, __uuidof(_IAgPlanetodetic));
_COM_SMARTPTR_TYPEDEF(IAgPlanetodetic, __uuidof(IAgPlanetodetic));
_COM_SMARTPTR_TYPEDEF(_IAgPlanetocentric, __uuidof(_IAgPlanetocentric));
_COM_SMARTPTR_TYPEDEF(IAgPlanetocentric, __uuidof(IAgPlanetocentric));
_COM_SMARTPTR_TYPEDEF(_IAgSpherical, __uuidof(_IAgSpherical));
_COM_SMARTPTR_TYPEDEF(IAgSpherical, __uuidof(IAgSpherical));
_COM_SMARTPTR_TYPEDEF(_IAgCylindrical, __uuidof(_IAgCylindrical));
_COM_SMARTPTR_TYPEDEF(IAgCylindrical, __uuidof(IAgCylindrical));
_COM_SMARTPTR_TYPEDEF(_IAgDirection, __uuidof(_IAgDirection));
_COM_SMARTPTR_TYPEDEF(_IAgDirectionEuler, __uuidof(_IAgDirectionEuler));
_COM_SMARTPTR_TYPEDEF(IAgDirectionEuler, __uuidof(IAgDirectionEuler));
_COM_SMARTPTR_TYPEDEF(_IAgDirectionPR, __uuidof(_IAgDirectionPR));
_COM_SMARTPTR_TYPEDEF(IAgDirectionPR, __uuidof(IAgDirectionPR));
_COM_SMARTPTR_TYPEDEF(_IAgDirectionRADec, __uuidof(_IAgDirectionRADec));
_COM_SMARTPTR_TYPEDEF(IAgDirectionRADec, __uuidof(IAgDirectionRADec));
_COM_SMARTPTR_TYPEDEF(_IAgDirectionXYZ, __uuidof(_IAgDirectionXYZ));
_COM_SMARTPTR_TYPEDEF(IAgDirectionXYZ, __uuidof(IAgDirectionXYZ));
_COM_SMARTPTR_TYPEDEF(_IAgOrientation, __uuidof(_IAgOrientation));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationAzEl, __uuidof(_IAgOrientationAzEl));
_COM_SMARTPTR_TYPEDEF(IAgOrientationAzEl, __uuidof(IAgOrientationAzEl));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationEulerAngles, __uuidof(_IAgOrientationEulerAngles));
_COM_SMARTPTR_TYPEDEF(IAgOrientationEulerAngles, __uuidof(IAgOrientationEulerAngles));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationQuaternion, __uuidof(_IAgOrientationQuaternion));
_COM_SMARTPTR_TYPEDEF(IAgOrientationQuaternion, __uuidof(IAgOrientationQuaternion));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationYPRAngles, __uuidof(_IAgOrientationYPRAngles));
_COM_SMARTPTR_TYPEDEF(IAgOrientationYPRAngles, __uuidof(IAgOrientationYPRAngles));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitState, __uuidof(_IAgOrbitState));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitStateCoordinateSystem, __uuidof(_IAgOrbitStateCoordinateSystem));
_COM_SMARTPTR_TYPEDEF(IAgOrbitStateCoordinateSystem, __uuidof(IAgOrbitStateCoordinateSystem));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitStateCartesian, __uuidof(_IAgOrbitStateCartesian));
_COM_SMARTPTR_TYPEDEF(IAgOrbitStateCartesian, __uuidof(IAgOrbitStateCartesian));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalSizeShapeAltitude, __uuidof(_IAgClassicalSizeShapeAltitude));
_COM_SMARTPTR_TYPEDEF(IAgClassicalSizeShape, __uuidof(IAgClassicalSizeShape));
_COM_SMARTPTR_TYPEDEF(IAgClassicalSizeShapeAltitude, __uuidof(IAgClassicalSizeShapeAltitude));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalSizeShapeMeanMotion, __uuidof(_IAgClassicalSizeShapeMeanMotion));
_COM_SMARTPTR_TYPEDEF(IAgClassicalSizeShapeMeanMotion, __uuidof(IAgClassicalSizeShapeMeanMotion));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalSizeShapePeriod, __uuidof(_IAgClassicalSizeShapePeriod));
_COM_SMARTPTR_TYPEDEF(IAgClassicalSizeShapePeriod, __uuidof(IAgClassicalSizeShapePeriod));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalSizeShapeRadius, __uuidof(_IAgClassicalSizeShapeRadius));
_COM_SMARTPTR_TYPEDEF(IAgClassicalSizeShapeRadius, __uuidof(IAgClassicalSizeShapeRadius));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalSizeShapeSemimajorAxis, __uuidof(_IAgClassicalSizeShapeSemimajorAxis));
_COM_SMARTPTR_TYPEDEF(IAgClassicalSizeShapeSemimajorAxis, __uuidof(IAgClassicalSizeShapeSemimajorAxis));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationAscNodeLAN, __uuidof(_IAgOrientationAscNodeLAN));
_COM_SMARTPTR_TYPEDEF(IAgOrientationAscNode, __uuidof(IAgOrientationAscNode));
_COM_SMARTPTR_TYPEDEF(IAgOrientationAscNodeLAN, __uuidof(IAgOrientationAscNodeLAN));
_COM_SMARTPTR_TYPEDEF(_IAgOrientationAscNodeRAAN, __uuidof(_IAgOrientationAscNodeRAAN));
_COM_SMARTPTR_TYPEDEF(IAgOrientationAscNodeRAAN, __uuidof(IAgOrientationAscNodeRAAN));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalOrientation, __uuidof(_IAgClassicalOrientation));
_COM_SMARTPTR_TYPEDEF(IAgClassicalOrientation, __uuidof(IAgClassicalOrientation));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalLocationArgumentOfLatitude, __uuidof(_IAgClassicalLocationArgumentOfLatitude));
_COM_SMARTPTR_TYPEDEF(IAgClassicalLocation, __uuidof(IAgClassicalLocation));
_COM_SMARTPTR_TYPEDEF(IAgClassicalLocationArgumentOfLatitude, __uuidof(IAgClassicalLocationArgumentOfLatitude));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalLocationEccentricAnomaly, __uuidof(_IAgClassicalLocationEccentricAnomaly));
_COM_SMARTPTR_TYPEDEF(IAgClassicalLocationEccentricAnomaly, __uuidof(IAgClassicalLocationEccentricAnomaly));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalLocationMeanAnomaly, __uuidof(_IAgClassicalLocationMeanAnomaly));
_COM_SMARTPTR_TYPEDEF(IAgClassicalLocationMeanAnomaly, __uuidof(IAgClassicalLocationMeanAnomaly));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalLocationTimePastAN, __uuidof(_IAgClassicalLocationTimePastAN));
_COM_SMARTPTR_TYPEDEF(IAgClassicalLocationTimePastAN, __uuidof(IAgClassicalLocationTimePastAN));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalLocationTimePastPerigee, __uuidof(_IAgClassicalLocationTimePastPerigee));
_COM_SMARTPTR_TYPEDEF(IAgClassicalLocationTimePastPerigee, __uuidof(IAgClassicalLocationTimePastPerigee));
_COM_SMARTPTR_TYPEDEF(_IAgClassicalLocationTrueAnomaly, __uuidof(_IAgClassicalLocationTrueAnomaly));
_COM_SMARTPTR_TYPEDEF(IAgClassicalLocationTrueAnomaly, __uuidof(IAgClassicalLocationTrueAnomaly));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitStateClassical, __uuidof(_IAgOrbitStateClassical));
_COM_SMARTPTR_TYPEDEF(IAgOrbitStateClassical, __uuidof(IAgOrbitStateClassical));
_COM_SMARTPTR_TYPEDEF(_IAgGeodeticSizeAltitude, __uuidof(_IAgGeodeticSizeAltitude));
_COM_SMARTPTR_TYPEDEF(IAgGeodeticSize, __uuidof(IAgGeodeticSize));
_COM_SMARTPTR_TYPEDEF(IAgGeodeticSizeAltitude, __uuidof(IAgGeodeticSizeAltitude));
_COM_SMARTPTR_TYPEDEF(_IAgGeodeticSizeRadius, __uuidof(_IAgGeodeticSizeRadius));
_COM_SMARTPTR_TYPEDEF(IAgGeodeticSizeRadius, __uuidof(IAgGeodeticSizeRadius));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitStateGeodetic, __uuidof(_IAgOrbitStateGeodetic));
_COM_SMARTPTR_TYPEDEF(IAgOrbitStateGeodetic, __uuidof(IAgOrbitStateGeodetic));
_COM_SMARTPTR_TYPEDEF(_IAgDelaunayL, __uuidof(_IAgDelaunayL));
_COM_SMARTPTR_TYPEDEF(IAgDelaunayActionVariable, __uuidof(IAgDelaunayActionVariable));
_COM_SMARTPTR_TYPEDEF(IAgDelaunayL, __uuidof(IAgDelaunayL));
_COM_SMARTPTR_TYPEDEF(_IAgDelaunayLOverSQRTmu, __uuidof(_IAgDelaunayLOverSQRTmu));
_COM_SMARTPTR_TYPEDEF(IAgDelaunayLOverSQRTmu, __uuidof(IAgDelaunayLOverSQRTmu));
_COM_SMARTPTR_TYPEDEF(_IAgDelaunayH, __uuidof(_IAgDelaunayH));
_COM_SMARTPTR_TYPEDEF(IAgDelaunayH, __uuidof(IAgDelaunayH));
_COM_SMARTPTR_TYPEDEF(_IAgDelaunayHOverSQRTmu, __uuidof(_IAgDelaunayHOverSQRTmu));
_COM_SMARTPTR_TYPEDEF(IAgDelaunayHOverSQRTmu, __uuidof(IAgDelaunayHOverSQRTmu));
_COM_SMARTPTR_TYPEDEF(_IAgDelaunayG, __uuidof(_IAgDelaunayG));
_COM_SMARTPTR_TYPEDEF(IAgDelaunayG, __uuidof(IAgDelaunayG));
_COM_SMARTPTR_TYPEDEF(_IAgDelaunayGOverSQRTmu, __uuidof(_IAgDelaunayGOverSQRTmu));
_COM_SMARTPTR_TYPEDEF(IAgDelaunayGOverSQRTmu, __uuidof(IAgDelaunayGOverSQRTmu));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitStateDelaunay, __uuidof(_IAgOrbitStateDelaunay));
_COM_SMARTPTR_TYPEDEF(IAgOrbitStateDelaunay, __uuidof(IAgOrbitStateDelaunay));
_COM_SMARTPTR_TYPEDEF(_IAgEquinoctialSizeShapeMeanMotion, __uuidof(_IAgEquinoctialSizeShapeMeanMotion));
_COM_SMARTPTR_TYPEDEF(IAgEquinoctialSizeShapeMeanMotion, __uuidof(IAgEquinoctialSizeShapeMeanMotion));
_COM_SMARTPTR_TYPEDEF(_IAgEquinoctialSizeShapeSemimajorAxis, __uuidof(_IAgEquinoctialSizeShapeSemimajorAxis));
_COM_SMARTPTR_TYPEDEF(IAgEquinoctialSizeShapeSemimajorAxis, __uuidof(IAgEquinoctialSizeShapeSemimajorAxis));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitStateEquinoctial, __uuidof(_IAgOrbitStateEquinoctial));
_COM_SMARTPTR_TYPEDEF(IAgOrbitStateEquinoctial, __uuidof(IAgOrbitStateEquinoctial));
_COM_SMARTPTR_TYPEDEF(_IAgMixedSphericalFPAHorizontal, __uuidof(_IAgMixedSphericalFPAHorizontal));
_COM_SMARTPTR_TYPEDEF(IAgFlightPathAngle, __uuidof(IAgFlightPathAngle));
_COM_SMARTPTR_TYPEDEF(IAgMixedSphericalFPAHorizontal, __uuidof(IAgMixedSphericalFPAHorizontal));
_COM_SMARTPTR_TYPEDEF(_IAgMixedSphericalFPAVertical, __uuidof(_IAgMixedSphericalFPAVertical));
_COM_SMARTPTR_TYPEDEF(IAgMixedSphericalFPAVertical, __uuidof(IAgMixedSphericalFPAVertical));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitStateMixedSpherical, __uuidof(_IAgOrbitStateMixedSpherical));
_COM_SMARTPTR_TYPEDEF(IAgOrbitStateMixedSpherical, __uuidof(IAgOrbitStateMixedSpherical));
_COM_SMARTPTR_TYPEDEF(_IAgSphericalFPAHorizontal, __uuidof(_IAgSphericalFPAHorizontal));
_COM_SMARTPTR_TYPEDEF(IAgSphericalFPAHorizontal, __uuidof(IAgSphericalFPAHorizontal));
_COM_SMARTPTR_TYPEDEF(_IAgSphericalFPAVertical, __uuidof(_IAgSphericalFPAVertical));
_COM_SMARTPTR_TYPEDEF(IAgSphericalFPAVertical, __uuidof(IAgSphericalFPAVertical));
_COM_SMARTPTR_TYPEDEF(_IAgOrbitStateSpherical, __uuidof(_IAgOrbitStateSpherical));
_COM_SMARTPTR_TYPEDEF(IAgOrbitStateSpherical, __uuidof(IAgOrbitStateSpherical));
_COM_SMARTPTR_TYPEDEF(IAgDoublesCollection, __uuidof(IAgDoublesCollection));
_COM_SMARTPTR_TYPEDEF(_IAgCartesian3Vector, __uuidof(_IAgCartesian3Vector));
_COM_SMARTPTR_TYPEDEF(_IAgCartesian2Vector, __uuidof(_IAgCartesian2Vector));
_COM_SMARTPTR_TYPEDEF(IAgCartesian2Vector, __uuidof(IAgCartesian2Vector));
_COM_SMARTPTR_TYPEDEF(IAgPropertyInfo, __uuidof(IAgPropertyInfo));
_COM_SMARTPTR_TYPEDEF(_IAgPropertyInfo, __uuidof(_IAgPropertyInfo));
_COM_SMARTPTR_TYPEDEF(IAgPropertyInfoCollection, __uuidof(IAgPropertyInfoCollection));
_COM_SMARTPTR_TYPEDEF(_IAgRuntimeTypeInfo, __uuidof(_IAgRuntimeTypeInfo));
_COM_SMARTPTR_TYPEDEF(IAgRuntimeTypeInfo, __uuidof(IAgRuntimeTypeInfo));
_COM_SMARTPTR_TYPEDEF(_IAgUnitPrefsUnit, __uuidof(_IAgUnitPrefsUnit));
_COM_SMARTPTR_TYPEDEF(IAgUnitPrefsDim, __uuidof(IAgUnitPrefsDim));
_COM_SMARTPTR_TYPEDEF(IAgUnitPrefsUnit, __uuidof(IAgUnitPrefsUnit));
_COM_SMARTPTR_TYPEDEF(IAgUnitPrefsUnitCollection, __uuidof(IAgUnitPrefsUnitCollection));
_COM_SMARTPTR_TYPEDEF(_IAgUnitPrefsDim, __uuidof(_IAgUnitPrefsDim));
_COM_SMARTPTR_TYPEDEF(IAgUnitPrefsDimCollection, __uuidof(IAgUnitPrefsDimCollection));

//
// Type library items
//

enum AgELogMsgType
{
    eLogMsgDebug = 0,
    eLogMsgInfo = 1,
    eLogMsgForceInfo = 2,
    eLogMsgWarning = 3,
    eLogMsgAlarm = 4
};

enum AgELogMsgDispID
{
    eLogMsgDispAll = -1,
    eLogMsgDispDefault = 0,
    eLogMsgDispMsgWin = 1,
    eLogMsgDispStatusBar = 2
};

enum AgELineStyle
{
    eSolid = 0,
    eDashed = 1,
    eDotted = 2,
    eDotDashed = 3,
    eLongDashed = 4,
    eDashDotDotted = 5,
    eMDash = 6,
    eLDash = 7,
    eSDashDot = 8,
    eMDashDot = 9,
    eLDashDot = 10,
    eMSDash = 11,
    eLSDash = 12,
    eLMDash = 13,
    eLMSDash = 14,
    eDot = 15,
    eLongDash = 16,
    eSDash = 17
};

enum AgEFillStyle
{
    eFillStyleSolid = 0,
    eFillStyleHorizontalStripe = 1,
    eFillStyleDiagonalStripe1 = 2,
    eFillStyleDiagonalStripe2 = 3,
    eFillStyleHatch = 4,
    eFillStyleDiagonalHatch = 5,
    eFillStyleScreen = 6,
    eFillStyleVerticalStripe = 7
};

enum AgEExecMultiCmdResultAction
{
    eContinueOnError = 0,
    eStopOnError = 1,
    eExceptionOnError = 2,
    eIgnoreExecCmdResult = 32768
};

struct __declspec(uuid("591cab1a-1bfc-4512-9be6-ff0ac91d0441"))
AgExecCmdResult;
    // [ default ] interface IDispatch
    // interface IAgExecCmdResult

struct __declspec(uuid("b8e4a793-a47a-4472-b338-8daf1fd14ff6"))
IAgExecCmdResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetIsSucceeded))
    VARIANT_BOOL IsSucceeded;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    SAFEARRAY * Range (
        long StartIndex,
        long StopIndex );
    VARIANT_BOOL GetIsSucceeded ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ long StartIndex,
        /*[in]*/ long StopIndex,
        /*[out,retval]*/ SAFEARRAY * * ppVar ) = 0;
      virtual HRESULT __stdcall get_IsSucceeded (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("d427219e-4c7c-4af4-9e8f-62f0053f7475"))
AgExecMultiCmdResult;
    // [ default ] interface IDispatch
    // interface IAgExecMultiCmdResult

struct __declspec(uuid("b21864d9-49d4-469e-bddf-6e59130d1ee0"))
IAgExecMultiCmdResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgExecCmdResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgExecCmdResultPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgExecCmdResult * * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnum ) = 0;
};

struct __declspec(uuid("ef780985-4549-4358-93aa-a48e73678a1a"))
AgUnitPrefsUnit;
    // [ default ] interface _IAgUnitPrefsUnit
    // interface IAgUnitPrefsUnit

struct __declspec(uuid("bdd35e56-acb7-48b6-86a7-446e53580790"))
AgUnitPrefsUnitCollection;
    // [ default ] interface IUnknown
    // interface IAgUnitPrefsUnitCollection

struct __declspec(uuid("1adf8a9e-245c-4643-803e-cccaa2f3b9b0"))
AgUnitPrefsDim;
    // [ default ] interface _IAgUnitPrefsDim
    // interface IAgUnitPrefsDim

struct __declspec(uuid("7a95ba4e-7bcd-4295-bd27-f2fbb85a46d1"))
AgUnitPrefsDimCollection;
    // [ default ] interface IUnknown
    // interface IAgUnitPrefsDimCollection

struct __declspec(uuid("d46b2af0-d8b2-44be-b331-0ceee836be62"))
AgConversionUtility;
    // [ default ] interface _IAgConversionUtility
    // interface IAgConversionUtility

struct __declspec(uuid("c1ae66e0-3137-4c13-987c-0e891c10d1b0"))
IAgQuantity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDimension))
    _bstr_t Dimension;
    __declspec(property(get=GetUnit))
    _bstr_t Unit;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDimension ( );
    _bstr_t GetUnit ( );
    HRESULT ConvertToUnit (
        _bstr_t UnitAbbrv );
    double GetValue ( );
    void PutValue (
        double pValue );
    IAgQuantityPtr Add (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr Subtract (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr MultiplyQty (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr DivideQty (
        struct IAgQuantity * Quantity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pDimName ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ BSTR * pUnitAbbrv ) = 0;
      virtual HRESULT __stdcall raw_ConvertToUnit (
        /*[in]*/ BSTR UnitAbbrv ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pValue ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pValue ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_MultiplyQty (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_DivideQty (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
};

struct __declspec(uuid("d8e6d3f2-de46-4066-a85c-9ae4d46a16e6"))
IAgDate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOLEDate,put=PutOLEDate))
    DATE OLEDate;
    __declspec(property(get=GetWholeDays,put=PutWholeDays))
    long WholeDays;
    __declspec(property(get=GetSecIntoDay,put=PutSecIntoDay))
    double SecIntoDay;
    __declspec(property(get=GetWholeDaysUTC,put=PutWholeDaysUTC))
    long WholeDaysUTC;
    __declspec(property(get=GetSecIntoDayUTC,put=PutSecIntoDayUTC))
    double SecIntoDayUTC;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Format (
        _bstr_t Unit );
    HRESULT SetDate (
        _bstr_t Unit,
        _bstr_t Value );
    DATE GetOLEDate ( );
    void PutOLEDate (
        DATE pDate );
    long GetWholeDays ( );
    void PutWholeDays (
        long pVal );
    double GetSecIntoDay ( );
    void PutSecIntoDay (
        double pVal );
    long GetWholeDaysUTC ( );
    void PutWholeDaysUTC (
        long pVal );
    double GetSecIntoDayUTC ( );
    void PutSecIntoDayUTC (
        double pVal );
    IAgDatePtr Add (
        _bstr_t Unit,
        double Value );
    IAgDatePtr Subtract (
        _bstr_t Unit,
        double Value );
    IAgQuantityPtr Span (
        struct IAgDate * Date );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Format (
        /*[in]*/ BSTR Unit,
        /*[out,retval]*/ BSTR * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetDate (
        /*[in]*/ BSTR Unit,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_OLEDate (
        /*[out,retval]*/ DATE * pDate ) = 0;
      virtual HRESULT __stdcall put_OLEDate (
        /*[in]*/ DATE pDate ) = 0;
      virtual HRESULT __stdcall get_WholeDays (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WholeDays (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SecIntoDay (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SecIntoDay (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WholeDaysUTC (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WholeDaysUTC (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SecIntoDayUTC (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SecIntoDayUTC (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Unit,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ BSTR Unit,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_Span (
        /*[in]*/ struct IAgDate * Date,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
};

enum AgEPositionType
{
    eCartesian = 0,
    eCylindrical = 1,
    eGeocentric = 2,
    eGeodetic = 3,
    eSpherical = 4,
    ePlanetocentric = 5,
    ePlanetodetic = 6
};

struct __declspec(uuid("59cad3e2-203c-482d-91fe-3d251e45f379"))
IAgPosition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;

    //
    // Wrapper methods for error-handling
    //

    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgEDirectionType
{
    eDirEuler = 0,
    eDirPR = 1,
    eDirRADec = 2,
    eDirXYZ = 3
};

enum AgEEulerDirectionSequence
{
    e12 = 0,
    e21 = 1,
    e31 = 2,
    e32 = 3
};

enum AgEPRSequence
{
    ePR = 0
};

struct __declspec(uuid("5f983e5c-f477-4c98-92b7-cd05cd4be6d2"))
IAgDirection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgEOrientationType
{
    eAzEl = 0,
    eEulerAngles = 1,
    eQuaternion = 2,
    eYPRAngles = 3
};

enum AgEAzElAboutBoresight
{
    eAzElAboutBoresightHold = 0,
    eAzElAboutBoresightRotate = 1
};

enum AgEEulerOrientationSequence
{
    e121 = 0,
    e123 = 1,
    e131 = 2,
    e132 = 3,
    e212 = 4,
    e213 = 5,
    e231 = 6,
    e232 = 7,
    e312 = 8,
    e313 = 9,
    e321 = 10,
    e323 = 11
};

enum AgEYPRAnglesSequence
{
    ePRY = 0,
    ePYR = 1,
    eRPY = 2,
    eRYP = 3,
    eYPR = 4,
    eYRP = 5
};

struct __declspec(uuid("df9f4eea-a0f2-4f94-bccd-b435b5a2905a"))
IAgOrientation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgEOrbitStateType
{
    eOrbitStateCartesian = 0,
    eOrbitStateClassical = 1,
    eOrbitStateEquinoctial = 2,
    eOrbitStateDelaunay = 3,
    eOrbitStateSpherical = 4,
    eOrbitStateMixedSpherical = 5,
    eOrbitStateGeodetic = 6
};

enum AgECoordinateSystem
{
    eCoordinateSystemUnknown = -1,
    eCoordinateSystemAlignmentAtEpoch = 0,
    eCoordinateSystemB1950 = 1,
    eCoordinateSystemFixed = 2,
    eCoordinateSystemJ2000 = 3,
    eCoordinateSystemMeanOfDate = 4,
    eCoordinateSystemMeanOfEpoch = 5,
    eCoordinateSystemTEMEOfDate = 6,
    eCoordinateSystemTEMEOfEpoch = 7,
    eCoordinateSystemTrueOfDate = 8,
    eCoordinateSystemTrueOfEpoch = 9,
    eCoordinateSystemTrueOfRefDate = 10,
    eCoordinateSystemICRF = 11,
    eCoordinateSystemMeanEarth = 13,
    eCoordinateSystemFixedNoLibration = 14,
    eCoordinateSystemFixedIAU2003 = 15,
    eCoordinateSystemPrincipalAxes421 = 16,
    eCoordinateSystemPrincipalAxes403 = 17,
    eCoordinateSystemInertial = 18,
    eCoordinateSystemJ2000Ecliptic = 19,
    eCoordinateSystemTrueEclipticOfDate = 21
};

enum AgEEquinoctialFormulation
{
    eFormulationPosigrade = 0,
    eFormulationRetrograde = 1
};

struct __declspec(uuid("b35673af-c004-49e5-88ff-7207125c5a96"))
IAgOrbitState : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctial (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon,
        enum AgEEquinoctialFormulation EquinoctialFormulation );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppIAgOrbitState ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctial (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon,
        /*[in]*/ enum AgEEquinoctialFormulation EquinoctialFormulation ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("0d0c0b79-ba3f-44d7-a73d-61b632a11e83"))
IAgCartesian3Vector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    double GetZ ( );
    void PutZ (
        double pRetVal );
    HRESULT Get (
        double * X,
        double * Y,
        double * Z );
    HRESULT Set (
        double X,
        double Y,
        double Z );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("dc9ec9e7-c449-412c-857c-7a7ef328df99"))
_IAgConversionUtility : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    double ConvertQuantity (
        _bstr_t DimensionName,
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        double Value );
    _bstr_t ConvertDate (
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        _bstr_t FromValue );
    SAFEARRAY * ConvertQuantityArray (
        _bstr_t DimensionName,
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        SAFEARRAY * * Values );
    SAFEARRAY * ConvertDateArray (
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        SAFEARRAY * * FromValues );
    IAgQuantityPtr NewQuantity (
        _bstr_t Dimension,
        _bstr_t UnitAbbrv,
        double Value );
    IAgDatePtr NewDate (
        _bstr_t UnitAbbrv,
        _bstr_t Value );
    IAgPositionPtr NewPositionOnEarth ( );
    SAFEARRAY * ConvertPositionArray (
        enum AgEPositionType PositionType,
        SAFEARRAY * * PositionArray,
        enum AgEPositionType ConvertTo );
    IAgDirectionPtr NewDirection ( );
    IAgOrientationPtr NewOrientation ( );
    IAgOrbitStatePtr NewOrbitStateOnEarth ( );
    IAgPositionPtr NewPositionOnCB (
        _bstr_t CentralBodyName );
    IAgOrbitStatePtr NewOrbitStateOnCB (
        _bstr_t CentralBodyName );
    HRESULT QueryDirectionCosineMatrix (
        struct IAgOrientation * InputOrientation,
        struct IAgCartesian3Vector * * pX,
        struct IAgCartesian3Vector * * pY,
        struct IAgCartesian3Vector * * pZ );
    SAFEARRAY * QueryDirectionCosineMatrixArray (
        struct IAgOrientation * InputOrientation );
    IAgCartesian3VectorPtr NewCartesian3Vector ( );
    IAgCartesian3VectorPtr NewCartesian3VectorFromDirection (
        struct IAgDirection * InputDirection );
    IAgCartesian3VectorPtr NewCartesian3VectorFromPosition (
        struct IAgPosition * InputPosition );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertQuantity (
        /*[in]*/ BSTR DimensionName,
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertDate (
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ BSTR FromValue,
        /*[out,retval]*/ BSTR * pToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertQuantityArray (
        /*[in]*/ BSTR DimensionName,
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ SAFEARRAY * * Values,
        /*[out,retval]*/ SAFEARRAY * * ppToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertDateArray (
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ SAFEARRAY * * FromValues,
        /*[out,retval]*/ SAFEARRAY * * ppToValues ) = 0;
      virtual HRESULT __stdcall raw_NewQuantity (
        /*[in]*/ BSTR Dimension,
        /*[in]*/ BSTR UnitAbbrv,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_NewDate (
        /*[in]*/ BSTR UnitAbbrv,
        /*[in]*/ BSTR Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_NewPositionOnEarth (
        /*[out,retval]*/ struct IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertPositionArray (
        /*[in]*/ enum AgEPositionType PositionType,
        /*[in]*/ SAFEARRAY * * PositionArray,
        /*[in]*/ enum AgEPositionType ConvertTo,
        /*[out,retval]*/ SAFEARRAY * * ppOutVal ) = 0;
      virtual HRESULT __stdcall raw_NewDirection (
        /*[out,retval]*/ struct IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrientation (
        /*[out,retval]*/ struct IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrbitStateOnEarth (
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewPositionOnCB (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ struct IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrbitStateOnCB (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryDirectionCosineMatrix (
        /*[in]*/ struct IAgOrientation * InputOrientation,
        /*[out]*/ struct IAgCartesian3Vector * * pX,
        /*[out]*/ struct IAgCartesian3Vector * * pY,
        /*[out]*/ struct IAgCartesian3Vector * * pZ ) = 0;
      virtual HRESULT __stdcall raw_QueryDirectionCosineMatrixArray (
        /*[in]*/ struct IAgOrientation * InputOrientation,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3Vector (
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3VectorFromDirection (
        /*[in]*/ struct IAgDirection * InputDirection,
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3VectorFromPosition (
        /*[in]*/ struct IAgPosition * InputPosition,
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("0707e88c-ea6d-40a2-b16d-b7b786b8e072"))
IAgConversionUtility : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    double ConvertQuantity (
        _bstr_t DimensionName,
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        double FromValue );
    _bstr_t ConvertDate (
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        _bstr_t FromValue );
    SAFEARRAY * ConvertQuantityArray (
        _bstr_t DimensionName,
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        SAFEARRAY * * QuantityValues );
    SAFEARRAY * ConvertDateArray (
        _bstr_t FromUnit,
        _bstr_t ToUnit,
        SAFEARRAY * * FromValues );
    IAgQuantityPtr NewQuantity (
        _bstr_t Dimension,
        _bstr_t UnitAbbrv,
        double Value );
    IAgDatePtr NewDate (
        _bstr_t UnitAbbrv,
        _bstr_t Value );
    IAgPositionPtr NewPositionOnEarth ( );
    SAFEARRAY * ConvertPositionArray (
        enum AgEPositionType PositionType,
        SAFEARRAY * * PositionArray,
        enum AgEPositionType ConvertTo );
    IAgDirectionPtr NewDirection ( );
    IAgOrientationPtr NewOrientation ( );
    IAgOrbitStatePtr NewOrbitStateOnEarth ( );
    IAgPositionPtr NewPositionOnCB (
        _bstr_t CentralBodyName );
    IAgOrbitStatePtr NewOrbitStateOnCB (
        _bstr_t CentralBodyName );
    HRESULT QueryDirectionCosineMatrix (
        struct IAgOrientation * InputOrientation,
        struct IAgCartesian3Vector * * pX,
        struct IAgCartesian3Vector * * pY,
        struct IAgCartesian3Vector * * pZ );
    SAFEARRAY * QueryDirectionCosineMatrixArray (
        struct IAgOrientation * InputOrientation );
    IAgCartesian3VectorPtr NewCartesian3Vector ( );
    IAgCartesian3VectorPtr NewCartesian3VectorFromDirection (
        struct IAgDirection * InputDirection );
    IAgCartesian3VectorPtr NewCartesian3VectorFromPosition (
        struct IAgPosition * InputPosition );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertQuantity (
        /*[in]*/ BSTR DimensionName,
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ double FromValue,
        /*[out,retval]*/ double * pToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertDate (
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ BSTR FromValue,
        /*[out,retval]*/ BSTR * pToValue ) = 0;
      virtual HRESULT __stdcall raw_ConvertQuantityArray (
        /*[in]*/ BSTR DimensionName,
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ SAFEARRAY * * QuantityValues,
        /*[out,retval]*/ SAFEARRAY * * ppConvertedQuantityValues ) = 0;
      virtual HRESULT __stdcall raw_ConvertDateArray (
        /*[in]*/ BSTR FromUnit,
        /*[in]*/ BSTR ToUnit,
        /*[in]*/ SAFEARRAY * * FromValues,
        /*[out,retval]*/ SAFEARRAY * * ppConvertedDateValues ) = 0;
      virtual HRESULT __stdcall raw_NewQuantity (
        /*[in]*/ BSTR Dimension,
        /*[in]*/ BSTR UnitAbbrv,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_NewDate (
        /*[in]*/ BSTR UnitAbbrv,
        /*[in]*/ BSTR Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_NewPositionOnEarth (
        /*[out,retval]*/ struct IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertPositionArray (
        /*[in]*/ enum AgEPositionType PositionType,
        /*[in]*/ SAFEARRAY * * PositionArray,
        /*[in]*/ enum AgEPositionType ConvertTo,
        /*[out,retval]*/ SAFEARRAY * * ppOutVal ) = 0;
      virtual HRESULT __stdcall raw_NewDirection (
        /*[out,retval]*/ struct IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrientation (
        /*[out,retval]*/ struct IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrbitStateOnEarth (
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewPositionOnCB (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ struct IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewOrbitStateOnCB (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryDirectionCosineMatrix (
        /*[in]*/ struct IAgOrientation * InputOrientation,
        /*[out]*/ struct IAgCartesian3Vector * * pX,
        /*[out]*/ struct IAgCartesian3Vector * * pY,
        /*[out]*/ struct IAgCartesian3Vector * * pZ ) = 0;
      virtual HRESULT __stdcall raw_QueryDirectionCosineMatrixArray (
        /*[in]*/ struct IAgOrientation * InputOrientation,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3Vector (
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3VectorFromDirection (
        /*[in]*/ struct IAgDirection * InputDirection,
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewCartesian3VectorFromPosition (
        /*[in]*/ struct IAgPosition * InputPosition,
        /*[out,retval]*/ struct IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("084bac7f-58ce-4f09-843d-60f85e700483"))
AgQuantity;
    // [ default ] interface _IAgQuantity
    // interface IAgQuantity

struct __declspec(uuid("af318512-bf19-4c3e-a20f-fcc683d16c6b"))
_IAgQuantity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDimension))
    _bstr_t Dimension;
    __declspec(property(get=GetUnit))
    _bstr_t Unit;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDimension ( );
    _bstr_t GetUnit ( );
    HRESULT ConvertToUnit (
        _bstr_t UnitAbbrv );
    double GetValue ( );
    void PutValue (
        double pValue );
    IAgQuantityPtr Add (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr Subtract (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr MultiplyQty (
        struct IAgQuantity * Quantity );
    IAgQuantityPtr DivideQty (
        struct IAgQuantity * Quantity );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ BSTR * pDimName ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ BSTR * pUnitAbbrv ) = 0;
      virtual HRESULT __stdcall raw_ConvertToUnit (
        /*[in]*/ BSTR UnitAbbrv ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pValue ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pValue ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_MultiplyQty (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
      virtual HRESULT __stdcall raw_DivideQty (
        /*[in]*/ struct IAgQuantity * Quantity,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
};

struct __declspec(uuid("0b81144b-6783-4113-93fa-45573fbb7796"))
AgDate;
    // [ default ] interface _IAgDate
    // interface IAgDate

struct __declspec(uuid("8f51313e-ef70-4240-b7c4-f89b4d51ff50"))
_IAgDate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOLEDate,put=PutOLEDate))
    DATE OLEDate;
    __declspec(property(get=GetWholeDays,put=PutWholeDays))
    long WholeDays;
    __declspec(property(get=GetSecIntoDay,put=PutSecIntoDay))
    double SecIntoDay;
    __declspec(property(get=GetWholeDaysUTC,put=PutWholeDaysUTC))
    long WholeDaysUTC;
    __declspec(property(get=GetSecIntoDayUTC,put=PutSecIntoDayUTC))
    double SecIntoDayUTC;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Format (
        _bstr_t Unit );
    HRESULT SetDate (
        _bstr_t Unit,
        _bstr_t Value );
    DATE GetOLEDate ( );
    void PutOLEDate (
        DATE pDate );
    long GetWholeDays ( );
    void PutWholeDays (
        long pVal );
    double GetSecIntoDay ( );
    void PutSecIntoDay (
        double pVal );
    long GetWholeDaysUTC ( );
    void PutWholeDaysUTC (
        long pVal );
    double GetSecIntoDayUTC ( );
    void PutSecIntoDayUTC (
        double pVal );
    IAgDatePtr Add (
        _bstr_t Unit,
        double Value );
    IAgDatePtr Subtract (
        _bstr_t Unit,
        double Value );
    IAgQuantityPtr Span (
        struct IAgDate * Date );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Format (
        /*[in]*/ BSTR Unit,
        /*[out,retval]*/ BSTR * pValue ) = 0;
      virtual HRESULT __stdcall raw_SetDate (
        /*[in]*/ BSTR Unit,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_OLEDate (
        /*[out,retval]*/ DATE * pDate ) = 0;
      virtual HRESULT __stdcall put_OLEDate (
        /*[in]*/ DATE pDate ) = 0;
      virtual HRESULT __stdcall get_WholeDays (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WholeDays (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SecIntoDay (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SecIntoDay (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WholeDaysUTC (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_WholeDaysUTC (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SecIntoDayUTC (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SecIntoDayUTC (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Unit,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ BSTR Unit,
        /*[in]*/ double Value,
        /*[out,retval]*/ struct IAgDate * * ppDate ) = 0;
      virtual HRESULT __stdcall raw_Span (
        /*[in]*/ struct IAgDate * Date,
        /*[out,retval]*/ struct IAgQuantity * * ppQuantity ) = 0;
};

struct __declspec(uuid("7855d8f6-7c32-4d5c-85b5-3541d518a93b"))
AgComponentDirectory;
    // [ default ] interface _IAgComponentDirectory
    // interface IAgComponentDirectory

enum AgEComponent
{
    eComponentAll = 0,
    eComponentCommRad = 1,
    eComponentAstrogator = 2
};

struct __declspec(uuid("84ef504b-d0a6-4780-b805-85b0146f8f09"))
IAgComponentInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetUserComment,put=PutUserComment))
    _bstr_t UserComment;
    __declspec(property(get=GetDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetUserComment ( );
    void PutUserComment (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    VARIANT_BOOL IsReadOnly ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UserComment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserComment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("adf428e7-40d7-491a-962d-74e75bbbdb11"))
IAgComponentInfoCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgComponentInfoPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFolderCount))
    long FolderCount;
    __declspec(property(get=GetAvailableFolders))
    SAFEARRAY * AvailableFolders;
    __declspec(property(get=GetFolderName))
    _bstr_t FolderName;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAgComponentInfoPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAgComponentInfoCollectionPtr GetFolder (
        const _variant_t & IndexOrName );
    long GetFolderCount ( );
    SAFEARRAY * GetAvailableFolders ( );
    _bstr_t GetFolderName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgComponentInfo * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFolder (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgComponentInfoCollection * * ppFolder ) = 0;
      virtual HRESULT __stdcall get_FolderCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableFolders (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FolderName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("690a7281-819f-456b-be59-fe4bbb18a8a2"))
_IAgComponentDirectory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgComponentInfoCollectionPtr GetComponents (
        enum AgEComponent EComponent );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetComponents (
        /*[in]*/ enum AgEComponent EComponent,
        /*[out,retval]*/ struct IAgComponentInfoCollection * * ppComponents ) = 0;
};

struct __declspec(uuid("887e5d10-abe4-4979-9109-60e4b9b23b71"))
IAgComponentDirectory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgComponentInfoCollectionPtr GetComponents (
        enum AgEComponent EComponent );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetComponents (
        /*[in]*/ enum AgEComponent EComponent,
        /*[out,retval]*/ struct IAgComponentInfoCollection * * ppComponentCollection ) = 0;
};

struct __declspec(uuid("fdddbeb1-dc97-4687-8392-f2a60cd35f34"))
AgComponentInfoCollection;
    // [ default ] interface IUnknown
    // interface IAgComponentInfoCollection

struct __declspec(uuid("cd94456c-8198-4c0b-878c-47133e451a4e"))
AgPosition;
    // [ default ] interface _IAgPosition
    // interface IAgLocationData
    // interface IAgPosition

struct __declspec(uuid("1a201bd6-726d-4de3-8d29-2a6e0333da1c"))
_IAgPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;

    //
    // Wrapper methods for error-handling
    //

    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("0b8213c4-6a43-4479-85a5-dc9f537cdf7b"))
IAgLocationData : IUnknown
{};

struct __declspec(uuid("2dfe5dd5-4e81-4c63-8b5a-585c272fcfb7"))
AgCartesian;
    // [ default ] interface _IAgCartesian
    // interface IAgCartesian
    // interface IAgPosition

struct __declspec(uuid("d6070893-4a7c-4a87-a265-1eac50b029b3"))
_IAgCartesian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    HRESULT SetValues (
        double X,
        double Y,
        double Z );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("41fc322e-5b25-484a-b01f-26e69a9e6519"))
IAgCartesian : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    HRESULT SetValues (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
};

struct __declspec(uuid("59e908f4-c7ef-492a-bf7e-91c8a8d73cb7"))
AgGeodetic;
    // [ default ] interface _IAgGeodetic
    // interface IAgGeodetic
    // interface IAgPosition

struct __declspec(uuid("8e27befe-7e4f-484a-afb3-64a656c70bc7"))
_IAgGeodetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );
    double GetAlt ( );
    void PutAlt (
        double pAlt );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pAlt ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pAlt ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("ac4fb10a-0400-4369-8873-c50e9ef1185b"))
IAgGeodetic : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );
    double GetAlt ( );
    void PutAlt (
        double pAlt );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pAlt ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pAlt ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
};

struct __declspec(uuid("7005aa68-9a59-414e-a769-a14a23f75123"))
AgGeocentric;
    // [ default ] interface _IAgGeocentric
    // interface IAgGeocentric
    // interface IAgPosition

struct __declspec(uuid("aa426747-9495-44be-964d-638048e2a251"))
_IAgGeocentric : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("c17de028-59bd-4db6-8c51-0cea05cc751c"))
IAgGeocentric : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
};

struct __declspec(uuid("8f6bb30c-a98f-4af3-a4a6-388a20263329"))
AgPlanetodetic;
    // [ default ] interface _IAgPlanetodetic
    // interface IAgPlanetodetic
    // interface IAgPosition

struct __declspec(uuid("bb15cc9b-9d51-43ce-8bf0-8945c8f20922"))
_IAgPlanetodetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );
    double GetAlt ( );
    void PutAlt (
        double pAlt );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pAlt ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pAlt ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("146fde9e-6fce-4324-ba77-6a93e02def12"))
IAgPlanetodetic : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );
    double GetAlt ( );
    void PutAlt (
        double pAlt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pAlt ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pAlt ) = 0;
};

struct __declspec(uuid("dc98a3f8-942b-4ab4-b3bd-6f0243035bc2"))
AgPlanetocentric;
    // [ default ] interface _IAgPlanetocentric
    // interface IAgPlanetocentric
    // interface IAgPosition

struct __declspec(uuid("55ccbf3b-c6d4-4d6a-852b-bd9205bbd7e8"))
_IAgPlanetocentric : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("9cf2841b-0567-4146-984f-e34d738c9e9c"))
IAgPlanetocentric : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ff91bcce-1ee2-47f2-b1a5-2db36cedff31"))
AgSpherical;
    // [ default ] interface _IAgSpherical
    // interface IAgSpherical
    // interface IAgPosition

struct __declspec(uuid("f374492b-e968-4f13-b45b-94fd977eda8c"))
_IAgSpherical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("dd4b3afb-2273-4d70-b63d-3adc5aff76f2"))
IAgSpherical : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    HRESULT SetValues (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
};

struct __declspec(uuid("2754845a-fa12-4574-83c7-e49ca2906c87"))
AgCylindrical;
    // [ default ] interface _IAgCylindrical
    // interface IAgCylindrical
    // interface IAgPosition

struct __declspec(uuid("eb592c29-d628-49d3-ae88-0a81fa427af5"))
_IAgCylindrical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;
    __declspec(property(get=GetPosType))
    enum AgEPositionType PosType;

    //
    // Wrapper methods for error-handling
    //

    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    HRESULT SetValues (
        double Radius,
        double Z,
        const _variant_t & Lon );
    IAgPositionPtr ConvertTo (
        enum AgEPositionType Type );
    enum AgEPositionType GetPosType ( );
    HRESULT Assign (
        struct IAgPosition * pPosition );
    HRESULT AssignGeocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignGeodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignSpherical (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Radius );
    HRESULT AssignCylindrical (
        double Radius,
        double Z,
        const _variant_t & Lon );
    HRESULT AssignCartesian (
        double X,
        double Y,
        double Z );
    HRESULT AssignPlanetocentric (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT AssignPlanetodetic (
        const _variant_t & Lat,
        const _variant_t & Lon,
        double Alt );
    HRESULT QueryPlanetocentric (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QueryPlanetodetic (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Alt );
    HRESULT QuerySpherical (
        VARIANT * Lat,
        VARIANT * Lon,
        double * Radius );
    HRESULT QueryCylindrical (
        double * Radius,
        VARIANT * Lon,
        double * Z );
    HRESULT QueryCartesian (
        double * X,
        double * Y,
        double * Z );
    _bstr_t GetCentralBodyName ( );
    SAFEARRAY * QueryPlanetocentricArray ( );
    SAFEARRAY * QueryPlanetodeticArray ( );
    SAFEARRAY * QuerySphericalArray ( );
    SAFEARRAY * QueryCylindricalArray ( );
    SAFEARRAY * QueryCartesianArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEPositionType Type,
        /*[out,retval]*/ struct IAgPosition * * ppIAgPosition ) = 0;
      virtual HRESULT __stdcall get_PosType (
        /*[out,retval]*/ enum AgEPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgPosition * pPosition ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AssignCylindrical (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetocentric (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_AssignPlanetodetic (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentric (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodetic (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Alt ) = 0;
      virtual HRESULT __stdcall raw_QuerySpherical (
        /*[out]*/ VARIANT * Lat,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindrical (
        /*[out]*/ double * Radius,
        /*[out]*/ VARIANT * Lon,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesian (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetocentricArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPlanetodeticArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QuerySphericalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCylindricalArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryCartesianArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("d95a5723-6361-413f-a3f8-93a6b83e50f2"))
IAgCylindrical : IAgPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;

    //
    // Wrapper methods for error-handling
    //

    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pVal );
    HRESULT SetValues (
        double Radius,
        double Z,
        const _variant_t & Lon );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double Radius,
        /*[in]*/ double Z,
        /*[in]*/ VARIANT Lon ) = 0;
};

struct __declspec(uuid("e679a681-f212-48b9-a8b7-feb0321d88f2"))
AgDirection;
    // [ default ] interface _IAgDirection
    // interface IAgDirection

struct __declspec(uuid("4f7e1a4b-0611-482a-abda-73844f164327"))
_IAgDirection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("ead553f5-dea0-4d39-9ae7-529dc87e7cfe"))
AgDirectionEuler;
    // [ default ] interface _IAgDirectionEuler
    // interface IAgDirectionEuler
    // interface IAgDirection

struct __declspec(uuid("94446894-c47b-486b-810d-c9f2e96e82de"))
_IAgDirectionEuler : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetB,put=PutB))
    _variant_t B;
    __declspec(property(get=GetC,put=PutC))
    _variant_t C;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEEulerDirectionSequence Sequence;
    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetB ( );
    void PutB (
        const _variant_t & pVal );
    _variant_t GetC ( );
    void PutC (
        const _variant_t & pVal );
    enum AgEEulerDirectionSequence GetSequence ( );
    void PutSequence (
        enum AgEEulerDirectionSequence pVal );
    HRESULT SetValues (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEEulerDirectionSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEEulerDirectionSequence pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("e3f99e16-8099-46de-823c-e543303bd936"))
IAgDirectionEuler : IAgDirection
{
    //
    // Property data
    //

    __declspec(property(get=GetB,put=PutB))
    _variant_t B;
    __declspec(property(get=GetC,put=PutC))
    _variant_t C;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEEulerDirectionSequence Sequence;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetB ( );
    void PutB (
        const _variant_t & pVal );
    _variant_t GetC ( );
    void PutC (
        const _variant_t & pVal );
    enum AgEEulerDirectionSequence GetSequence ( );
    void PutSequence (
        enum AgEEulerDirectionSequence pVal );
    HRESULT SetValues (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEEulerDirectionSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEEulerDirectionSequence pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
};

struct __declspec(uuid("666943a3-51bd-4198-a7b8-8467b9a1ead2"))
AgDirectionPR;
    // [ default ] interface _IAgDirectionPR
    // interface IAgDirectionPR
    // interface IAgDirection

struct __declspec(uuid("4c3ef5d3-a33c-47f5-a0c9-bc0a5f1b5732"))
_IAgDirectionPR : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPitch,put=PutPitch))
    _variant_t Pitch;
    __declspec(property(get=GetRoll,put=PutRoll))
    _variant_t Roll;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEPRSequence Sequence;
    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetPitch ( );
    void PutPitch (
        const _variant_t & pVal );
    _variant_t GetRoll ( );
    void PutRoll (
        const _variant_t & pVal );
    enum AgEPRSequence GetSequence ( );
    void PutSequence (
        enum AgEPRSequence pVal );
    HRESULT SetValues (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEPRSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEPRSequence pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("7a018862-4c47-4be1-acc1-36d5f3b12d7c"))
IAgDirectionPR : IAgDirection
{
    //
    // Property data
    //

    __declspec(property(get=GetPitch,put=PutPitch))
    _variant_t Pitch;
    __declspec(property(get=GetRoll,put=PutRoll))
    _variant_t Roll;
    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEPRSequence Sequence;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetPitch ( );
    void PutPitch (
        const _variant_t & pVal );
    _variant_t GetRoll ( );
    void PutRoll (
        const _variant_t & pVal );
    enum AgEPRSequence GetSequence ( );
    void PutSequence (
        enum AgEPRSequence pVal );
    HRESULT SetValues (
        const _variant_t & Pitch,
        const _variant_t & Roll );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEPRSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEPRSequence pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
};

struct __declspec(uuid("3254a695-639e-48bf-b09a-0c0ecaf52cba"))
AgDirectionRADec;
    // [ default ] interface _IAgDirectionRADec
    // interface IAgDirectionRADec
    // interface IAgDirection

struct __declspec(uuid("bfa98560-69c7-496a-8ab2-0b03f89631a2"))
_IAgDirectionRADec : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDec,put=PutDec))
    _variant_t Dec;
    __declspec(property(get=GetRA,put=PutRA))
    _variant_t RA;
    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetDec ( );
    void PutDec (
        const _variant_t & pVal );
    _variant_t GetRA ( );
    void PutRA (
        const _variant_t & pVal );
    HRESULT SetValues (
        const _variant_t & RA,
        const _variant_t & Dec );
    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Dec (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Dec (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_RA (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_RA (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("627f2183-35d9-4151-af8c-6480fed90334"))
IAgDirectionRADec : IAgDirection
{
    //
    // Property data
    //

    __declspec(property(get=GetDec,put=PutDec))
    _variant_t Dec;
    __declspec(property(get=GetRA,put=PutRA))
    _variant_t RA;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetDec ( );
    void PutDec (
        const _variant_t & pVal );
    _variant_t GetRA ( );
    void PutRA (
        const _variant_t & pVal );
    HRESULT SetValues (
        const _variant_t & RA,
        const _variant_t & Dec );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Dec (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Dec (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_RA (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_RA (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
};

struct __declspec(uuid("31e3a836-17bf-4a6c-9d05-16ac9e1aa09f"))
AgDirectionXYZ;
    // [ default ] interface _IAgDirectionXYZ
    // interface IAgDirectionXYZ
    // interface IAgDirection

struct __declspec(uuid("b94c93f6-3587-420f-a28f-e83f19c6683a"))
_IAgDirectionXYZ : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetDirectionType))
    enum AgEDirectionType DirectionType;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    HRESULT SetValues (
        double X,
        double Y,
        double Z );
    IAgDirectionPtr ConvertTo (
        enum AgEDirectionType Type );
    enum AgEDirectionType GetDirectionType ( );
    HRESULT Assign (
        struct IAgDirection * pDirection );
    HRESULT AssignEuler (
        const _variant_t & B,
        const _variant_t & C,
        enum AgEEulerDirectionSequence Sequence );
    HRESULT AssignPR (
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT AssignRADec (
        const _variant_t & RA,
        const _variant_t & Dec );
    HRESULT AssignXYZ (
        double X,
        double Y,
        double Z );
    HRESULT QueryEuler (
        enum AgEEulerDirectionSequence Sequence,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryPR (
        enum AgEPRSequence Sequence,
        VARIANT * Pitch,
        VARIANT * Roll );
    HRESULT QueryRADec (
        VARIANT * RA,
        VARIANT * Dec );
    HRESULT QueryXYZ (
        double * X,
        double * Y,
        double * Z );
    SAFEARRAY * QueryEulerArray (
        enum AgEEulerDirectionSequence Sequence );
    SAFEARRAY * QueryPRArray (
        enum AgEPRSequence Sequence );
    SAFEARRAY * QueryRADecArray ( );
    SAFEARRAY * QueryXYZArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEDirectionType Type,
        /*[out,retval]*/ struct IAgDirection * * ppIAgDirection ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum AgEDirectionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgDirection * pDirection ) = 0;
      virtual HRESULT __stdcall raw_AssignEuler (
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[in]*/ enum AgEEulerDirectionSequence Sequence ) = 0;
      virtual HRESULT __stdcall raw_AssignPR (
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_AssignRADec (
        /*[in]*/ VARIANT RA,
        /*[in]*/ VARIANT Dec ) = 0;
      virtual HRESULT __stdcall raw_AssignXYZ (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEuler (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryPR (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryRADec (
        /*[out]*/ VARIANT * RA,
        /*[out]*/ VARIANT * Dec ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZ (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerArray (
        /*[in]*/ enum AgEEulerDirectionSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryPRArray (
        /*[in]*/ enum AgEPRSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryRADecArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryXYZArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("b589422a-8585-4ffb-8d27-1dcc7f338c04"))
IAgDirectionXYZ : IAgDirection
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    HRESULT SetValues (
        double X,
        double Y,
        double Z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
};

struct __declspec(uuid("c4493fd8-5a35-4b2c-a558-2d2b85cf6e8e"))
AgOrientation;
    // [ default ] interface _IAgOrientation
    // interface IAgOrientation

struct __declspec(uuid("9e766860-e85f-42e9-ac62-d0a97716252f"))
_IAgOrientation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("e1df9699-9abb-41c9-85e4-6ae31a619977"))
AgOrientationAzEl;
    // [ default ] interface _IAgOrientationAzEl
    // interface IAgOrientationAzEl
    // interface IAgOrientation

struct __declspec(uuid("5295aaf2-cdce-48f7-8f41-160d435f1065"))
_IAgOrientationAzEl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    _variant_t Azimuth;
    __declspec(property(get=GetElevation,put=PutElevation))
    _variant_t Elevation;
    __declspec(property(get=GetAboutBoresight,put=PutAboutBoresight))
    enum AgEAzElAboutBoresight AboutBoresight;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAzimuth ( );
    void PutAzimuth (
        const _variant_t & pVal );
    _variant_t GetElevation ( );
    void PutElevation (
        const _variant_t & pVal );
    enum AgEAzElAboutBoresight GetAboutBoresight ( );
    void PutAboutBoresight (
        enum AgEAzElAboutBoresight pVal );
    HRESULT SetValues (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AboutBoresight (
        /*[out,retval]*/ enum AgEAzElAboutBoresight * pVal ) = 0;
      virtual HRESULT __stdcall put_AboutBoresight (
        /*[in]*/ enum AgEAzElAboutBoresight pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("2d32651c-8dab-4240-b2e4-971e71af28e3"))
IAgOrientationAzEl : IAgOrientation
{
    //
    // Property data
    //

    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    _variant_t Azimuth;
    __declspec(property(get=GetElevation,put=PutElevation))
    _variant_t Elevation;
    __declspec(property(get=GetAboutBoresight,put=PutAboutBoresight))
    enum AgEAzElAboutBoresight AboutBoresight;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAzimuth ( );
    void PutAzimuth (
        const _variant_t & pVal );
    _variant_t GetElevation ( );
    void PutElevation (
        const _variant_t & pVal );
    enum AgEAzElAboutBoresight GetAboutBoresight ( );
    void PutAboutBoresight (
        enum AgEAzElAboutBoresight pVal );
    HRESULT SetValues (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AboutBoresight (
        /*[out,retval]*/ enum AgEAzElAboutBoresight * pVal ) = 0;
      virtual HRESULT __stdcall put_AboutBoresight (
        /*[in]*/ enum AgEAzElAboutBoresight pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
};

struct __declspec(uuid("a4a0473d-b298-41d4-85f9-d2093a2b80cc"))
AgOrientationEulerAngles;
    // [ default ] interface _IAgOrientationEulerAngles
    // interface IAgOrientationEulerAngles
    // interface IAgOrientation

struct __declspec(uuid("eba14db8-59cb-4802-9237-0c2b2c8f92df"))
_IAgOrientationEulerAngles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEEulerOrientationSequence Sequence;
    __declspec(property(get=GetA,put=PutA))
    _variant_t A;
    __declspec(property(get=GetB,put=PutB))
    _variant_t B;
    __declspec(property(get=GetC,put=PutC))
    _variant_t C;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEEulerOrientationSequence GetSequence ( );
    void PutSequence (
        enum AgEEulerOrientationSequence pVal );
    _variant_t GetA ( );
    void PutA (
        const _variant_t & pVal );
    _variant_t GetB ( );
    void PutB (
        const _variant_t & pVal );
    _variant_t GetC ( );
    void PutC (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEEulerOrientationSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEEulerOrientationSequence pVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("093a9016-8acc-4095-9fbe-61d46c1dd50e"))
IAgOrientationEulerAngles : IAgOrientation
{
    //
    // Property data
    //

    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEEulerOrientationSequence Sequence;
    __declspec(property(get=GetA,put=PutA))
    _variant_t A;
    __declspec(property(get=GetB,put=PutB))
    _variant_t B;
    __declspec(property(get=GetC,put=PutC))
    _variant_t C;

    //
    // Wrapper methods for error-handling
    //

    enum AgEEulerOrientationSequence GetSequence ( );
    void PutSequence (
        enum AgEEulerOrientationSequence pVal );
    _variant_t GetA ( );
    void PutA (
        const _variant_t & pVal );
    _variant_t GetB ( );
    void PutB (
        const _variant_t & pVal );
    _variant_t GetC ( );
    void PutC (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEEulerOrientationSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEEulerOrientationSequence pVal ) = 0;
      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_A (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_B (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_C (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
};

struct __declspec(uuid("929a1d7d-16cc-4eea-a780-05d7e1645a8c"))
AgOrientationQuaternion;
    // [ default ] interface _IAgOrientationQuaternion
    // interface IAgOrientationQuaternion
    // interface IAgOrientation

struct __declspec(uuid("159e6a8f-3456-4453-8e0b-d315e375969a"))
_IAgOrientationQuaternion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetQX,put=PutQX))
    double QX;
    __declspec(property(get=GetQY,put=PutQY))
    double QY;
    __declspec(property(get=GetQZ,put=PutQZ))
    double QZ;
    __declspec(property(get=GetQS,put=PutQS))
    double QS;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    double GetQX ( );
    void PutQX (
        double pVal );
    double GetQY ( );
    void PutQY (
        double pVal );
    double GetQZ ( );
    void PutQZ (
        double pVal );
    double GetQS ( );
    void PutQS (
        double pVal );
    HRESULT SetValues (
        double QX,
        double QY,
        double QZ,
        double QS );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QS (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QS (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("a3df07b8-0696-4e72-a147-ff772fc80084"))
IAgOrientationQuaternion : IAgOrientation
{
    //
    // Property data
    //

    __declspec(property(get=GetQX,put=PutQX))
    double QX;
    __declspec(property(get=GetQY,put=PutQY))
    double QY;
    __declspec(property(get=GetQZ,put=PutQZ))
    double QZ;
    __declspec(property(get=GetQS,put=PutQS))
    double QS;

    //
    // Wrapper methods for error-handling
    //

    double GetQX ( );
    void PutQX (
        double pVal );
    double GetQY ( );
    void PutQY (
        double pVal );
    double GetQZ ( );
    void PutQZ (
        double pVal );
    double GetQS ( );
    void PutQS (
        double pVal );
    HRESULT SetValues (
        double QX,
        double QY,
        double QZ,
        double QS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_QX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_QS (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_QS (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
};

struct __declspec(uuid("d4cc1a4d-ea69-4fc6-a9c1-b491a1e98296"))
AgOrientationYPRAngles;
    // [ default ] interface _IAgOrientationYPRAngles
    // interface IAgOrientationYPRAngles
    // interface IAgOrientation

struct __declspec(uuid("3f02d917-cf4f-4089-987c-f829ef5addc4"))
_IAgOrientationYPRAngles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEYPRAnglesSequence Sequence;
    __declspec(property(get=GetYaw,put=PutYaw))
    _variant_t Yaw;
    __declspec(property(get=GetPitch,put=PutPitch))
    _variant_t Pitch;
    __declspec(property(get=GetRoll,put=PutRoll))
    _variant_t Roll;
    __declspec(property(get=GetOrientationType))
    enum AgEOrientationType OrientationType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEYPRAnglesSequence GetSequence ( );
    void PutSequence (
        enum AgEYPRAnglesSequence pVal );
    _variant_t GetYaw ( );
    void PutYaw (
        const _variant_t & pVal );
    _variant_t GetPitch ( );
    void PutPitch (
        const _variant_t & pVal );
    _variant_t GetRoll ( );
    void PutRoll (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    IAgOrientationPtr ConvertTo (
        enum AgEOrientationType Type );
    enum AgEOrientationType GetOrientationType ( );
    HRESULT Assign (
        struct IAgOrientation * pOrientation );
    HRESULT AssignAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum AgEAzElAboutBoresight AboutBoresight );
    HRESULT AssignEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    HRESULT AssignQuaternion (
        double QX,
        double QY,
        double QZ,
        double QS );
    HRESULT AssignYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    HRESULT QueryAzEl (
        VARIANT * Azimuth,
        VARIANT * Elevation,
        enum AgEAzElAboutBoresight * AboutBoresight );
    HRESULT QueryEulerAngles (
        enum AgEEulerOrientationSequence Sequence,
        VARIANT * A,
        VARIANT * B,
        VARIANT * C );
    HRESULT QueryQuaternion (
        double * QX,
        double * QY,
        double * QZ,
        double * QS );
    HRESULT QueryYPRAngles (
        enum AgEYPRAnglesSequence Sequence,
        VARIANT * Yaw,
        VARIANT * Pitch,
        VARIANT * Roll );
    SAFEARRAY * QueryAzElArray ( );
    SAFEARRAY * QueryEulerAnglesArray (
        enum AgEEulerOrientationSequence Sequence );
    SAFEARRAY * QueryQuaternionArray ( );
    SAFEARRAY * QueryYPRAnglesArray (
        enum AgEYPRAnglesSequence Sequence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEYPRAnglesSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEYPRAnglesSequence pVal ) = 0;
      virtual HRESULT __stdcall get_Yaw (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Yaw (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrientationType Type,
        /*[out,retval]*/ struct IAgOrientation * * ppIAgOrientation ) = 0;
      virtual HRESULT __stdcall get_OrientationType (
        /*[out,retval]*/ enum AgEOrientationType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrientation * pOrientation ) = 0;
      virtual HRESULT __stdcall raw_AssignAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum AgEAzElAboutBoresight AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_AssignEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C ) = 0;
      virtual HRESULT __stdcall raw_AssignQuaternion (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS ) = 0;
      virtual HRESULT __stdcall raw_AssignYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzEl (
        /*[out]*/ VARIANT * Azimuth,
        /*[out]*/ VARIANT * Elevation,
        /*[out]*/ enum AgEAzElAboutBoresight * AboutBoresight ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAngles (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out]*/ VARIANT * A,
        /*[out]*/ VARIANT * B,
        /*[out]*/ VARIANT * C ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternion (
        /*[out]*/ double * QX,
        /*[out]*/ double * QY,
        /*[out]*/ double * QZ,
        /*[out]*/ double * QS ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAngles (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out]*/ VARIANT * Yaw,
        /*[out]*/ VARIANT * Pitch,
        /*[out]*/ VARIANT * Roll ) = 0;
      virtual HRESULT __stdcall raw_QueryAzElArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryEulerAnglesArray (
        /*[in]*/ enum AgEEulerOrientationSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryQuaternionArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryYPRAnglesArray (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("ad361ed2-eabe-47b9-b0fc-da019add1574"))
IAgOrientationYPRAngles : IAgOrientation
{
    //
    // Property data
    //

    __declspec(property(get=GetSequence,put=PutSequence))
    enum AgEYPRAnglesSequence Sequence;
    __declspec(property(get=GetYaw,put=PutYaw))
    _variant_t Yaw;
    __declspec(property(get=GetPitch,put=PutPitch))
    _variant_t Pitch;
    __declspec(property(get=GetRoll,put=PutRoll))
    _variant_t Roll;

    //
    // Wrapper methods for error-handling
    //

    enum AgEYPRAnglesSequence GetSequence ( );
    void PutSequence (
        enum AgEYPRAnglesSequence pVal );
    _variant_t GetYaw ( );
    void PutYaw (
        const _variant_t & pVal );
    _variant_t GetPitch ( );
    void PutPitch (
        const _variant_t & pVal );
    _variant_t GetRoll ( );
    void PutRoll (
        const _variant_t & pVal );
    HRESULT SetValues (
        enum AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ enum AgEYPRAnglesSequence * pVal ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ enum AgEYPRAnglesSequence pVal ) = 0;
      virtual HRESULT __stdcall get_Yaw (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Yaw (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Pitch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Roll (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Roll (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ enum AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll ) = 0;
};

struct __declspec(uuid("ecb2758d-818d-45e8-a449-60152b130192"))
AgOrbitState;
    // [ default ] interface _IAgOrbitState
    // interface IAgOrbitState

struct __declspec(uuid("beb000b9-c630-4430-8d88-3f01e9fec856"))
_IAgOrbitState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctial (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon,
        enum AgEEquinoctialFormulation EquinoctialFormulation );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctial (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon,
        /*[in]*/ enum AgEEquinoctialFormulation EquinoctialFormulation ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("570d1b3c-403b-4f73-9c86-4202167a6903"))
AgOrbitStateCoordinateSystem;
    // [ default ] interface _IAgOrbitStateCoordinateSystem
    // interface IAgOrbitStateCoordinateSystem

struct __declspec(uuid("5b6b6c3b-6231-4078-9a66-3f73f6337bf2"))
_IAgOrbitStateCoordinateSystem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECoordinateSystem Type;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _bstr_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetType ( );
    _bstr_t GetEpoch ( );
    void PutEpoch (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("17004f4a-3f1f-42f1-baab-0213f2c145f5"))
IAgOrbitStateCoordinateSystem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECoordinateSystem Type;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _bstr_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetType ( );
    _bstr_t GetEpoch ( );
    void PutEpoch (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("a9dcf55d-1cba-4f6d-bf89-cf308734bc8b"))
AgOrbitStateCartesian;
    // [ default ] interface _IAgOrbitStateCartesian
    // interface IAgOrbitStateCartesian
    // interface IAgOrbitState

struct __declspec(uuid("875dd687-753d-4d6f-9758-a590a2cd28a7"))
_IAgOrbitStateCartesian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetXPosition,put=PutXPosition))
    double XPosition;
    __declspec(property(get=GetYPosition,put=PutYPosition))
    double YPosition;
    __declspec(property(get=GetZPosition,put=PutZPosition))
    double ZPosition;
    __declspec(property(get=GetXVelocity,put=PutXVelocity))
    double XVelocity;
    __declspec(property(get=GetYVelocity,put=PutYVelocity))
    double YVelocity;
    __declspec(property(get=GetZVelocity,put=PutZVelocity))
    double ZVelocity;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;
    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    double GetXPosition ( );
    void PutXPosition (
        double pVal );
    double GetYPosition ( );
    void PutYPosition (
        double pVal );
    double GetZPosition ( );
    void PutZPosition (
        double pVal );
    double GetXVelocity ( );
    void PutXVelocity (
        double pVal );
    double GetYVelocity ( );
    void PutYVelocity (
        double pVal );
    double GetZVelocity ( );
    void PutZVelocity (
        double pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );
    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctial (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon,
        enum AgEEquinoctialFormulation EquinoctialFormulation );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_XPosition (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XPosition (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_YPosition (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YPosition (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ZPosition (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ZPosition (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_XVelocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XVelocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_YVelocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YVelocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ZVelocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ZVelocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppIAgOrbitState ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctial (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon,
        /*[in]*/ enum AgEEquinoctialFormulation EquinoctialFormulation ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("67709b77-f692-4a1a-8573-cd3c4d5b1d64"))
IAgOrbitStateCartesian : IAgOrbitState
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetXPosition,put=PutXPosition))
    double XPosition;
    __declspec(property(get=GetYPosition,put=PutYPosition))
    double YPosition;
    __declspec(property(get=GetZPosition,put=PutZPosition))
    double ZPosition;
    __declspec(property(get=GetXVelocity,put=PutXVelocity))
    double XVelocity;
    __declspec(property(get=GetYVelocity,put=PutYVelocity))
    double YVelocity;
    __declspec(property(get=GetZVelocity,put=PutZVelocity))
    double ZVelocity;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    double GetXPosition ( );
    void PutXPosition (
        double pVal );
    double GetYPosition ( );
    void PutYPosition (
        double pVal );
    double GetZPosition ( );
    void PutZPosition (
        double pVal );
    double GetXVelocity ( );
    void PutXVelocity (
        double pVal );
    double GetYVelocity ( );
    void PutYVelocity (
        double pVal );
    double GetZVelocity ( );
    void PutZVelocity (
        double pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_XPosition (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XPosition (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_YPosition (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YPosition (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ZPosition (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ZPosition (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_XVelocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XVelocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_YVelocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YVelocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ZVelocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ZVelocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("28488f59-a0b9-43b8-a383-968a3ebb82cc"))
AgClassicalSizeShapeAltitude;
    // [ default ] interface _IAgClassicalSizeShapeAltitude
    // interface IAgClassicalSizeShape
    // interface IAgClassicalSizeShapeAltitude

struct __declspec(uuid("ab3205d6-ae64-40bd-91e6-ae77f28c6eea"))
_IAgClassicalSizeShapeAltitude : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApogeeAltitude,put=PutApogeeAltitude))
    double ApogeeAltitude;
    __declspec(property(get=GetPerigeeAltitude,put=PutPerigeeAltitude))
    double PerigeeAltitude;

    //
    // Wrapper methods for error-handling
    //

    double GetApogeeAltitude ( );
    void PutApogeeAltitude (
        double pVal );
    double GetPerigeeAltitude ( );
    void PutPerigeeAltitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApogeeAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ApogeeAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PerigeeAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PerigeeAltitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ca08cdfd-20f9-4d5c-b4ce-0b2fe1b26102"))
IAgClassicalSizeShape : IUnknown
{};

struct __declspec(uuid("ec17aeba-5fe3-4456-999b-c616cf306061"))
IAgClassicalSizeShapeAltitude : IAgClassicalSizeShape
{
    //
    // Property data
    //

    __declspec(property(get=GetApogeeAltitude,put=PutApogeeAltitude))
    double ApogeeAltitude;
    __declspec(property(get=GetPerigeeAltitude,put=PutPerigeeAltitude))
    double PerigeeAltitude;

    //
    // Wrapper methods for error-handling
    //

    double GetApogeeAltitude ( );
    void PutApogeeAltitude (
        double pVal );
    double GetPerigeeAltitude ( );
    void PutPerigeeAltitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApogeeAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ApogeeAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PerigeeAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PerigeeAltitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e97372af-f1e0-455b-98a7-f8d9e1e26588"))
AgClassicalSizeShapeMeanMotion;
    // [ default ] interface _IAgClassicalSizeShapeMeanMotion
    // interface IAgClassicalSizeShape
    // interface IAgClassicalSizeShapeMeanMotion

struct __declspec(uuid("5557e3c5-7c11-400f-b562-4e45d3e1cd3a"))
_IAgClassicalSizeShapeMeanMotion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMeanMotion,put=PutMeanMotion))
    double MeanMotion;
    __declspec(property(get=GetEccentricity,put=PutEccentricity))
    double Eccentricity;

    //
    // Wrapper methods for error-handling
    //

    double GetMeanMotion ( );
    void PutMeanMotion (
        double pVal );
    double GetEccentricity ( );
    void PutEccentricity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MeanMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanMotion (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Eccentricity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Eccentricity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("53ac6bd8-57cd-4a1b-a04c-95337156b4dd"))
IAgClassicalSizeShapeMeanMotion : IAgClassicalSizeShape
{
    //
    // Property data
    //

    __declspec(property(get=GetMeanMotion,put=PutMeanMotion))
    double MeanMotion;
    __declspec(property(get=GetEccentricity,put=PutEccentricity))
    double Eccentricity;

    //
    // Wrapper methods for error-handling
    //

    double GetMeanMotion ( );
    void PutMeanMotion (
        double pVal );
    double GetEccentricity ( );
    void PutEccentricity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MeanMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanMotion (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Eccentricity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Eccentricity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("285410e0-da1b-4e1d-b89c-d22283dc2a4b"))
AgClassicalSizeShapePeriod;
    // [ default ] interface _IAgClassicalSizeShapePeriod
    // interface IAgClassicalSizeShape
    // interface IAgClassicalSizeShapePeriod

struct __declspec(uuid("a5093d44-3c03-4f73-948e-e670b3a4f46f"))
_IAgClassicalSizeShapePeriod : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPeriod,put=PutPeriod))
    double Period;
    __declspec(property(get=GetEccentricity,put=PutEccentricity))
    double Eccentricity;

    //
    // Wrapper methods for error-handling
    //

    double GetPeriod ( );
    void PutPeriod (
        double pVal );
    double GetEccentricity ( );
    void PutEccentricity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Period (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Period (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Eccentricity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Eccentricity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("519a715b-4145-40e4-9908-8b473b80fe24"))
IAgClassicalSizeShapePeriod : IAgClassicalSizeShape
{
    //
    // Property data
    //

    __declspec(property(get=GetPeriod,put=PutPeriod))
    double Period;
    __declspec(property(get=GetEccentricity,put=PutEccentricity))
    double Eccentricity;

    //
    // Wrapper methods for error-handling
    //

    double GetPeriod ( );
    void PutPeriod (
        double pVal );
    double GetEccentricity ( );
    void PutEccentricity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Period (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Period (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Eccentricity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Eccentricity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("503c3fa7-f2d4-492e-a77b-1d33e67f7146"))
AgClassicalSizeShapeRadius;
    // [ default ] interface _IAgClassicalSizeShapeRadius
    // interface IAgClassicalSizeShape
    // interface IAgClassicalSizeShapeRadius

struct __declspec(uuid("39af02fb-24a8-4176-8ee2-496477dec4c3"))
_IAgClassicalSizeShapeRadius : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApogeeRadius,put=PutApogeeRadius))
    double ApogeeRadius;
    __declspec(property(get=GetPerigeeRadius,put=PutPerigeeRadius))
    double PerigeeRadius;

    //
    // Wrapper methods for error-handling
    //

    double GetApogeeRadius ( );
    void PutApogeeRadius (
        double pVal );
    double GetPerigeeRadius ( );
    void PutPerigeeRadius (
        double pVal );
    HRESULT SetSizeShapeRadius (
        double ApogeeRadius,
        double PerigeeRadius );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApogeeRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ApogeeRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PerigeeRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PerigeeRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSizeShapeRadius (
        /*[in]*/ double ApogeeRadius,
        /*[in]*/ double PerigeeRadius ) = 0;
};

struct __declspec(uuid("6d734250-8b58-42dc-935a-1d8a4d5dbe9a"))
IAgClassicalSizeShapeRadius : IAgClassicalSizeShape
{
    //
    // Property data
    //

    __declspec(property(get=GetApogeeRadius,put=PutApogeeRadius))
    double ApogeeRadius;
    __declspec(property(get=GetPerigeeRadius,put=PutPerigeeRadius))
    double PerigeeRadius;

    //
    // Wrapper methods for error-handling
    //

    double GetApogeeRadius ( );
    void PutApogeeRadius (
        double pVal );
    double GetPerigeeRadius ( );
    void PutPerigeeRadius (
        double pVal );
    HRESULT SetSizeShapeRadius (
        double ApogeeRadius,
        double PerigeeRadius );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApogeeRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ApogeeRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PerigeeRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PerigeeRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSizeShapeRadius (
        /*[in]*/ double ApogeeRadius,
        /*[in]*/ double PerigeeRadius ) = 0;
};

struct __declspec(uuid("6494090c-b540-4b54-a303-13a00842c4fb"))
AgClassicalSizeShapeSemimajorAxis;
    // [ default ] interface _IAgClassicalSizeShapeSemimajorAxis
    // interface IAgClassicalSizeShape
    // interface IAgClassicalSizeShapeSemimajorAxis

struct __declspec(uuid("c5de8cbb-e84f-4f2d-8d60-82cba7b107e5"))
_IAgClassicalSizeShapeSemimajorAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;
    __declspec(property(get=GetEccentricity,put=PutEccentricity))
    double Eccentricity;

    //
    // Wrapper methods for error-handling
    //

    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pVal );
    double GetEccentricity ( );
    void PutEccentricity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Eccentricity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Eccentricity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("96085a9a-2919-4c5c-8394-4b99790181c4"))
IAgClassicalSizeShapeSemimajorAxis : IAgClassicalSizeShape
{
    //
    // Property data
    //

    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;
    __declspec(property(get=GetEccentricity,put=PutEccentricity))
    double Eccentricity;

    //
    // Wrapper methods for error-handling
    //

    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pVal );
    double GetEccentricity ( );
    void PutEccentricity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Eccentricity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Eccentricity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("79d949f3-7ca4-4481-ac2a-7ca5a8200da6"))
AgOrientationAscNodeLAN;
    // [ default ] interface _IAgOrientationAscNodeLAN
    // interface IAgOrientationAscNode
    // interface IAgOrientationAscNodeLAN

struct __declspec(uuid("7f5a7c2b-6021-4ca7-9f6a-5514f1a87aea"))
_IAgOrientationAscNodeLAN : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("60f22e80-a9a3-4f49-bc7e-de8b5f309b43"))
IAgOrientationAscNode : IUnknown
{};

struct __declspec(uuid("22e905c4-8fc4-49d5-afd7-3b06daf6b7fb"))
IAgOrientationAscNodeLAN : IAgOrientationAscNode
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f3aff067-cd04-43e2-9d9b-4235348d5327"))
AgOrientationAscNodeRAAN;
    // [ default ] interface _IAgOrientationAscNodeRAAN
    // interface IAgOrientationAscNode
    // interface IAgOrientationAscNodeRAAN

struct __declspec(uuid("3f863495-517f-48a0-9806-410ea936c5ad"))
_IAgOrientationAscNodeRAAN : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("56ecea56-405b-402b-9327-19c310a77ec6"))
IAgOrientationAscNodeRAAN : IAgOrientationAscNode
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("610506be-282c-4313-9bf2-dbeb042713ab"))
AgClassicalOrientation;
    // [ default ] interface _IAgClassicalOrientation
    // interface IAgClassicalOrientation

enum AgEOrientationAscNode
{
    eAscNodeUnknown = -1,
    eAscNodeLAN = 0,
    eAscNodeRAAN = 1
};

struct __declspec(uuid("73169bd2-d1c2-4441-b706-a745b1563383"))
_IAgClassicalOrientation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInclination,put=PutInclination))
    double Inclination;
    __declspec(property(get=GetArgOfPerigee,put=PutArgOfPerigee))
    double ArgOfPerigee;
    __declspec(property(get=GetAscNodeType,put=PutAscNodeType))
    enum AgEOrientationAscNode AscNodeType;
    __declspec(property(get=GetAscNode))
    IAgOrientationAscNodePtr AscNode;

    //
    // Wrapper methods for error-handling
    //

    double GetInclination ( );
    void PutInclination (
        double pVal );
    double GetArgOfPerigee ( );
    void PutArgOfPerigee (
        double pVal );
    enum AgEOrientationAscNode GetAscNodeType ( );
    void PutAscNodeType (
        enum AgEOrientationAscNode pVal );
    IAgOrientationAscNodePtr GetAscNode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inclination (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Inclination (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ArgOfPerigee (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArgOfPerigee (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AscNodeType (
        /*[out,retval]*/ enum AgEOrientationAscNode * pVal ) = 0;
      virtual HRESULT __stdcall put_AscNodeType (
        /*[in]*/ enum AgEOrientationAscNode pVal ) = 0;
      virtual HRESULT __stdcall get_AscNode (
        /*[out,retval]*/ struct IAgOrientationAscNode * * ppVal ) = 0;
};

struct __declspec(uuid("c087ec7f-17a3-4cbc-8f04-bc1798fa3c82"))
IAgClassicalOrientation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInclination,put=PutInclination))
    double Inclination;
    __declspec(property(get=GetArgOfPerigee,put=PutArgOfPerigee))
    double ArgOfPerigee;
    __declspec(property(get=GetAscNodeType,put=PutAscNodeType))
    enum AgEOrientationAscNode AscNodeType;
    __declspec(property(get=GetAscNode))
    IAgOrientationAscNodePtr AscNode;

    //
    // Wrapper methods for error-handling
    //

    double GetInclination ( );
    void PutInclination (
        double pVal );
    double GetArgOfPerigee ( );
    void PutArgOfPerigee (
        double pVal );
    enum AgEOrientationAscNode GetAscNodeType ( );
    void PutAscNodeType (
        enum AgEOrientationAscNode pVal );
    IAgOrientationAscNodePtr GetAscNode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inclination (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Inclination (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ArgOfPerigee (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArgOfPerigee (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AscNodeType (
        /*[out,retval]*/ enum AgEOrientationAscNode * pVal ) = 0;
      virtual HRESULT __stdcall put_AscNodeType (
        /*[in]*/ enum AgEOrientationAscNode pVal ) = 0;
      virtual HRESULT __stdcall get_AscNode (
        /*[out,retval]*/ struct IAgOrientationAscNode * * ppVal ) = 0;
};

struct __declspec(uuid("33e24dc3-ad7b-41e5-8757-9f45eb1edd9b"))
AgClassicalLocationArgumentOfLatitude;
    // [ default ] interface _IAgClassicalLocationArgumentOfLatitude
    // interface IAgClassicalLocation
    // interface IAgClassicalLocationArgumentOfLatitude

struct __declspec(uuid("c7717f60-20ac-4179-a1a6-8643dfc51813"))
_IAgClassicalLocationArgumentOfLatitude : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("84858188-f7fb-4abc-89d2-35b0a69d8417"))
IAgClassicalLocation : IUnknown
{};

struct __declspec(uuid("6d2a3b94-952e-42d1-abaf-a35db1237a6e"))
IAgClassicalLocationArgumentOfLatitude : IAgClassicalLocation
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d7650529-7cb6-49e5-b151-516ebd5c0af5"))
AgClassicalLocationEccentricAnomaly;
    // [ default ] interface _IAgClassicalLocationEccentricAnomaly
    // interface IAgClassicalLocation
    // interface IAgClassicalLocationEccentricAnomaly

struct __declspec(uuid("c2e22d7d-ff1c-4eb1-a09e-4c9a080721c5"))
_IAgClassicalLocationEccentricAnomaly : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b012558c-bfa2-4745-b302-cd75d42f3c66"))
IAgClassicalLocationEccentricAnomaly : IAgClassicalLocation
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a77ca739-d40f-4b8a-9981-d37ec6b2dfb7"))
AgClassicalLocationMeanAnomaly;
    // [ default ] interface _IAgClassicalLocationMeanAnomaly
    // interface IAgClassicalLocation
    // interface IAgClassicalLocationMeanAnomaly

struct __declspec(uuid("70de6ddc-10d7-40c7-99bb-73c146c07a88"))
_IAgClassicalLocationMeanAnomaly : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("caeaa318-62d8-4b5f-aaa6-150a12449a27"))
IAgClassicalLocationMeanAnomaly : IAgClassicalLocation
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("35945661-adb3-4e31-8ddc-9b28c924a612"))
AgClassicalLocationTimePastAN;
    // [ default ] interface _IAgClassicalLocationTimePastAN
    // interface IAgClassicalLocation
    // interface IAgClassicalLocationTimePastAN

struct __declspec(uuid("621132d7-815e-4d41-98f0-6a3493d89bf7"))
_IAgClassicalLocationTimePastAN : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("6d9048ec-fb73-48f3-9441-993f24703b12"))
IAgClassicalLocationTimePastAN : IAgClassicalLocation
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a409bcfe-dd52-46f1-b884-c50c361379e3"))
AgClassicalLocationTimePastPerigee;
    // [ default ] interface _IAgClassicalLocationTimePastPerigee
    // interface IAgClassicalLocation
    // interface IAgClassicalLocationTimePastPerigee

struct __declspec(uuid("54db3197-26ad-46d9-850d-ee2c7c7c7f3e"))
_IAgClassicalLocationTimePastPerigee : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("614e27b8-2991-46d6-9058-588ecec9cd4b"))
IAgClassicalLocationTimePastPerigee : IAgClassicalLocation
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("957dc898-710e-45e9-81f8-eed2a407d230"))
AgClassicalLocationTrueAnomaly;
    // [ default ] interface _IAgClassicalLocationTrueAnomaly
    // interface IAgClassicalLocation
    // interface IAgClassicalLocationTrueAnomaly

struct __declspec(uuid("e0336b5d-f25e-4f77-a6bb-65589b1e25aa"))
_IAgClassicalLocationTrueAnomaly : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("c65d8e78-fb32-463a-b1d6-454496b933ee"))
IAgClassicalLocationTrueAnomaly : IAgClassicalLocation
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("9157e111-7ae5-4965-90b2-f7faac58ec8f"))
AgOrbitStateClassical;
    // [ default ] interface _IAgOrbitStateClassical
    // interface IAgOrbitStateClassical
    // interface IAgOrbitState

enum AgEClassicalSizeShape
{
    eSizeShapeUnknown = -1,
    eSizeShapeAltitude = 0,
    eSizeShapeMeanMotion = 1,
    eSizeShapePeriod = 2,
    eSizeShapeRadius = 3,
    eSizeShapeSemimajorAxis = 4
};

enum AgEClassicalLocation
{
    eLocationUnknown = -1,
    eLocationArgumentOfLatitude = 0,
    eLocationEccentricAnomaly = 1,
    eLocationMeanAnomaly = 2,
    eLocationTimePastAN = 3,
    eLocationTimePastPerigee = 4,
    eLocationTrueAnomaly = 5
};

struct __declspec(uuid("468db809-1d71-403f-975d-f978d47a9ddf"))
_IAgOrbitStateClassical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetSizeShapeType,put=PutSizeShapeType))
    enum AgEClassicalSizeShape SizeShapeType;
    __declspec(property(get=GetSizeShape))
    IAgClassicalSizeShapePtr SizeShape;
    __declspec(property(get=GetOrientation))
    IAgClassicalOrientationPtr Orientation;
    __declspec(property(get=GetLocationType,put=PutLocationType))
    enum AgEClassicalLocation LocationType;
    __declspec(property(get=GetLocation))
    IAgClassicalLocationPtr Location;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;
    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    enum AgEClassicalSizeShape GetSizeShapeType ( );
    void PutSizeShapeType (
        enum AgEClassicalSizeShape pVal );
    IAgClassicalSizeShapePtr GetSizeShape ( );
    IAgClassicalOrientationPtr GetOrientation ( );
    enum AgEClassicalLocation GetLocationType ( );
    void PutLocationType (
        enum AgEClassicalLocation pVal );
    IAgClassicalLocationPtr GetLocation ( );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );
    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctial (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon,
        enum AgEEquinoctialFormulation EquinoctialFormulation );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SizeShapeType (
        /*[out,retval]*/ enum AgEClassicalSizeShape * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeShapeType (
        /*[in]*/ enum AgEClassicalSizeShape pVal ) = 0;
      virtual HRESULT __stdcall get_SizeShape (
        /*[out,retval]*/ struct IAgClassicalSizeShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct IAgClassicalOrientation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LocationType (
        /*[out,retval]*/ enum AgEClassicalLocation * pVal ) = 0;
      virtual HRESULT __stdcall put_LocationType (
        /*[in]*/ enum AgEClassicalLocation pVal ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct IAgClassicalLocation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppIAgOrbitState ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctial (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon,
        /*[in]*/ enum AgEEquinoctialFormulation EquinoctialFormulation ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("c8b67462-82f9-4575-a1d4-bf0947d346fa"))
IAgOrbitStateClassical : IAgOrbitState
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetSizeShapeType,put=PutSizeShapeType))
    enum AgEClassicalSizeShape SizeShapeType;
    __declspec(property(get=GetSizeShape))
    IAgClassicalSizeShapePtr SizeShape;
    __declspec(property(get=GetOrientation))
    IAgClassicalOrientationPtr Orientation;
    __declspec(property(get=GetLocationType,put=PutLocationType))
    enum AgEClassicalLocation LocationType;
    __declspec(property(get=GetLocation))
    IAgClassicalLocationPtr Location;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    enum AgEClassicalSizeShape GetSizeShapeType ( );
    void PutSizeShapeType (
        enum AgEClassicalSizeShape pVal );
    IAgClassicalSizeShapePtr GetSizeShape ( );
    IAgClassicalOrientationPtr GetOrientation ( );
    enum AgEClassicalLocation GetLocationType ( );
    void PutLocationType (
        enum AgEClassicalLocation pVal );
    IAgClassicalLocationPtr GetLocation ( );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SizeShapeType (
        /*[out,retval]*/ enum AgEClassicalSizeShape * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeShapeType (
        /*[in]*/ enum AgEClassicalSizeShape pVal ) = 0;
      virtual HRESULT __stdcall get_SizeShape (
        /*[out,retval]*/ struct IAgClassicalSizeShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct IAgClassicalOrientation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LocationType (
        /*[out,retval]*/ enum AgEClassicalLocation * pVal ) = 0;
      virtual HRESULT __stdcall put_LocationType (
        /*[in]*/ enum AgEClassicalLocation pVal ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct IAgClassicalLocation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("6756c154-8d4a-4b94-8b09-b424f865fec8"))
AgGeodeticSizeAltitude;
    // [ default ] interface _IAgGeodeticSizeAltitude
    // interface IAgGeodeticSize
    // interface IAgGeodeticSizeAltitude

struct __declspec(uuid("07265a1e-3e0f-4af4-8700-b3d2f500bc36"))
_IAgGeodeticSizeAltitude : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetRate,put=PutRate))
    double Rate;

    //
    // Wrapper methods for error-handling
    //

    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    double GetRate ( );
    void PutRate (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("6f3cbf77-d01a-4620-8f99-1f3984359bf3"))
IAgGeodeticSize : IUnknown
{};

struct __declspec(uuid("e47a2a08-5e16-4003-9cf5-aa1abeffdad7"))
IAgGeodeticSizeAltitude : IAgGeodeticSize
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetRate,put=PutRate))
    double Rate;

    //
    // Wrapper methods for error-handling
    //

    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    double GetRate ( );
    void PutRate (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("41e0734a-0bd7-4b5e-87f5-71fc606ad14a"))
AgGeodeticSizeRadius;
    // [ default ] interface _IAgGeodeticSizeRadius
    // interface IAgGeodeticSize
    // interface IAgGeodeticSizeRadius

struct __declspec(uuid("391501d3-05c3-4d8e-85ff-e7b215fd763d"))
_IAgGeodeticSizeRadius : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetRate,put=PutRate))
    double Rate;

    //
    // Wrapper methods for error-handling
    //

    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetRate ( );
    void PutRate (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("0611069a-af65-4116-99d1-9b74d94de2d4"))
IAgGeodeticSizeRadius : IAgGeodeticSize
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetRate,put=PutRate))
    double Rate;

    //
    // Wrapper methods for error-handling
    //

    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetRate ( );
    void PutRate (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("cb98b4b3-b25d-4cc0-bc4f-c9b9e91f0d90"))
AgOrbitStateGeodetic;
    // [ default ] interface _IAgOrbitStateGeodetic
    // interface IAgOrbitStateGeodetic
    // interface IAgOrbitState

enum AgEGeodeticSize
{
    eGeodeticSizeUnknown = -1,
    eSizeAltitude = 0,
    eSizeRadius = 1
};

struct __declspec(uuid("9410b7e0-72ab-4bc9-ba45-ab3790af00f0"))
_IAgOrbitStateGeodetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetSizeType,put=PutSizeType))
    enum AgEGeodeticSize SizeType;
    __declspec(property(get=GetSize))
    IAgGeodeticSizePtr Size;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetLatitudeRate,put=PutLatitudeRate))
    double LatitudeRate;
    __declspec(property(get=GetLongitudeRate,put=PutLongitudeRate))
    double LongitudeRate;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;
    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    enum AgEGeodeticSize GetSizeType ( );
    void PutSizeType (
        enum AgEGeodeticSize pVal );
    IAgGeodeticSizePtr GetSize ( );
    double GetLatitude ( );
    void PutLatitude (
        double pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetLatitudeRate ( );
    void PutLatitudeRate (
        double pVal );
    double GetLongitudeRate ( );
    void PutLongitudeRate (
        double pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );
    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctial (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon,
        enum AgEEquinoctialFormulation EquinoctialFormulation );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SizeType (
        /*[out,retval]*/ enum AgEGeodeticSize * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeType (
        /*[in]*/ enum AgEGeodeticSize pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ struct IAgGeodeticSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LatitudeRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LatitudeRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LongitudeRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LongitudeRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppIAgOrbitState ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctial (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon,
        /*[in]*/ enum AgEEquinoctialFormulation EquinoctialFormulation ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("c064fdf2-6a0c-464d-bcf1-393a3ec4fad2"))
IAgOrbitStateGeodetic : IAgOrbitState
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetSizeType,put=PutSizeType))
    enum AgEGeodeticSize SizeType;
    __declspec(property(get=GetSize))
    IAgGeodeticSizePtr Size;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetLatitudeRate,put=PutLatitudeRate))
    double LatitudeRate;
    __declspec(property(get=GetLongitudeRate,put=PutLongitudeRate))
    double LongitudeRate;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    enum AgEGeodeticSize GetSizeType ( );
    void PutSizeType (
        enum AgEGeodeticSize pVal );
    IAgGeodeticSizePtr GetSize ( );
    double GetLatitude ( );
    void PutLatitude (
        double pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetLatitudeRate ( );
    void PutLatitudeRate (
        double pVal );
    double GetLongitudeRate ( );
    void PutLongitudeRate (
        double pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SizeType (
        /*[out,retval]*/ enum AgEGeodeticSize * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeType (
        /*[in]*/ enum AgEGeodeticSize pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ struct IAgGeodeticSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LatitudeRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LatitudeRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LongitudeRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LongitudeRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("e0de29ca-a51a-4a79-a20d-a1d6270cf12e"))
AgDelaunayL;
    // [ default ] interface _IAgDelaunayL
    // interface IAgDelaunayActionVariable
    // interface IAgDelaunayL

struct __declspec(uuid("d82ec7df-322f-4044-b0ba-5c770ff36814"))
_IAgDelaunayL : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetL,put=PutL))
    double L;

    //
    // Wrapper methods for error-handling
    //

    double GetL ( );
    void PutL (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_L (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("c06f9593-0175-4bdb-a2e0-57333ef9c162"))
IAgDelaunayActionVariable : IUnknown
{};

struct __declspec(uuid("02a59031-4d20-42a9-bc70-f6bbef5a9f63"))
IAgDelaunayL : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetL,put=PutL))
    double L;

    //
    // Wrapper methods for error-handling
    //

    double GetL ( );
    void PutL (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_L (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_L (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b2556d17-ed71-4d7e-ac71-9791d07a2f63"))
AgDelaunayLOverSQRTmu;
    // [ default ] interface _IAgDelaunayLOverSQRTmu
    // interface IAgDelaunayActionVariable
    // interface IAgDelaunayLOverSQRTmu

struct __declspec(uuid("0cbe7af5-70cc-423f-9001-8510e29a3aab"))
_IAgDelaunayLOverSQRTmu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLOverSQRTmu,put=PutLOverSQRTmu))
    double LOverSQRTmu;

    //
    // Wrapper methods for error-handling
    //

    double GetLOverSQRTmu ( );
    void PutLOverSQRTmu (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LOverSQRTmu (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LOverSQRTmu (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("40ea4764-3b5a-4677-a9ac-0248486d5a13"))
IAgDelaunayLOverSQRTmu : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLOverSQRTmu,put=PutLOverSQRTmu))
    double LOverSQRTmu;

    //
    // Wrapper methods for error-handling
    //

    double GetLOverSQRTmu ( );
    void PutLOverSQRTmu (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LOverSQRTmu (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LOverSQRTmu (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1a9a189f-db1c-4c81-8a70-00ea7d803c32"))
AgDelaunayH;
    // [ default ] interface _IAgDelaunayH
    // interface IAgDelaunayActionVariable
    // interface IAgDelaunayH

struct __declspec(uuid("8782ade7-55a7-4e22-ab78-8382d10ddf6b"))
_IAgDelaunayH : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetH,put=PutH))
    double H;

    //
    // Wrapper methods for error-handling
    //

    double GetH ( );
    void PutH (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_H (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_H (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("8cff8d38-f377-4b11-be5c-33f2828fb570"))
IAgDelaunayH : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetH,put=PutH))
    double H;

    //
    // Wrapper methods for error-handling
    //

    double GetH ( );
    void PutH (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_H (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_H (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("523d6bfb-7545-4da5-8547-5ce3834c62e2"))
AgDelaunayHOverSQRTmu;
    // [ default ] interface _IAgDelaunayHOverSQRTmu
    // interface IAgDelaunayActionVariable
    // interface IAgDelaunayHOverSQRTmu

struct __declspec(uuid("22664921-ff2b-4df9-b853-40210c1e1c9f"))
_IAgDelaunayHOverSQRTmu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHOverSQRTmu,put=PutHOverSQRTmu))
    double HOverSQRTmu;

    //
    // Wrapper methods for error-handling
    //

    double GetHOverSQRTmu ( );
    void PutHOverSQRTmu (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HOverSQRTmu (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HOverSQRTmu (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a14a2de6-c6b2-4d09-8086-53ab67aaf5e8"))
IAgDelaunayHOverSQRTmu : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetHOverSQRTmu,put=PutHOverSQRTmu))
    double HOverSQRTmu;

    //
    // Wrapper methods for error-handling
    //

    double GetHOverSQRTmu ( );
    void PutHOverSQRTmu (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HOverSQRTmu (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HOverSQRTmu (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("3eef2581-16a4-4238-974a-f955e7a2cde2"))
AgDelaunayG;
    // [ default ] interface _IAgDelaunayG
    // interface IAgDelaunayActionVariable
    // interface IAgDelaunayG

struct __declspec(uuid("04d42237-71d1-4217-adb3-c3348c575baa"))
_IAgDelaunayG : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetG,put=PutG))
    double G;

    //
    // Wrapper methods for error-handling
    //

    double GetG ( );
    void PutG (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_G (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_G (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("6ce72f93-ecdb-4011-b529-f231dd9d33b3"))
IAgDelaunayG : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetG,put=PutG))
    double G;

    //
    // Wrapper methods for error-handling
    //

    double GetG ( );
    void PutG (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_G (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_G (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("2c9e9db7-822a-434a-a198-cd7f4f927f8b"))
AgDelaunayGOverSQRTmu;
    // [ default ] interface _IAgDelaunayGOverSQRTmu
    // interface IAgDelaunayActionVariable
    // interface IAgDelaunayGOverSQRTmu

struct __declspec(uuid("53f5a605-4a76-4ee0-97e3-cc3a723f3049"))
_IAgDelaunayGOverSQRTmu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGOverSQRTmu,put=PutGOverSQRTmu))
    double GOverSQRTmu;

    //
    // Wrapper methods for error-handling
    //

    double GetGOverSQRTmu ( );
    void PutGOverSQRTmu (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GOverSQRTmu (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GOverSQRTmu (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("02d3a94e-18d5-405e-a351-adfa80b4f894"))
IAgDelaunayGOverSQRTmu : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGOverSQRTmu,put=PutGOverSQRTmu))
    double GOverSQRTmu;

    //
    // Wrapper methods for error-handling
    //

    double GetGOverSQRTmu ( );
    void PutGOverSQRTmu (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GOverSQRTmu (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GOverSQRTmu (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("54def666-8768-48c3-a9b3-b8de394deba1"))
AgOrbitStateDelaunay;
    // [ default ] interface _IAgOrbitStateDelaunay
    // interface IAgOrbitStateDelaunay
    // interface IAgOrbitState

enum AgEDelaunayLType
{
    eDelaunayLTypeUnknown = -1,
    eL = 0,
    eLOverSQRTmu = 1
};

enum AgEDelaunayHType
{
    eDelaunayHTypeUnknown = -1,
    eH = 0,
    eHOverSQRTmu = 1
};

enum AgEDelaunayGType
{
    eDelaunayGTypeUnknown = -1,
    eG = 0,
    eGOverSQRTmu = 1
};

struct __declspec(uuid("e6f177a4-288c-4b87-abae-ac736ff4fcdb"))
_IAgOrbitStateDelaunay : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetiMeanAnomaly,put=PutiMeanAnomaly))
    double iMeanAnomaly;
    __declspec(property(get=GetgArgOfPerigee,put=PutgArgOfPerigee))
    double gArgOfPerigee;
    __declspec(property(get=GethRAAN,put=PuthRAAN))
    double hRAAN;
    __declspec(property(get=GetLType,put=PutLType))
    enum AgEDelaunayLType LType;
    __declspec(property(get=GetL))
    IAgDelaunayActionVariablePtr L;
    __declspec(property(get=GetHType,put=PutHType))
    enum AgEDelaunayHType HType;
    __declspec(property(get=GetH))
    IAgDelaunayActionVariablePtr H;
    __declspec(property(get=GetGType,put=PutGType))
    enum AgEDelaunayGType GType;
    __declspec(property(get=GetG))
    IAgDelaunayActionVariablePtr G;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;
    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetMeanAnomaly,put=PutMeanAnomaly))
    double MeanAnomaly;
    __declspec(property(get=GetArgOfPeriapsis,put=PutArgOfPeriapsis))
    double ArgOfPeriapsis;
    __declspec(property(get=GetRAAN,put=PutRAAN))
    double RAAN;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    double GetiMeanAnomaly ( );
    void PutiMeanAnomaly (
        double pVal );
    double GetgArgOfPerigee ( );
    void PutgArgOfPerigee (
        double pVal );
    double GethRAAN ( );
    void PuthRAAN (
        double pVal );
    enum AgEDelaunayLType GetLType ( );
    void PutLType (
        enum AgEDelaunayLType pVal );
    IAgDelaunayActionVariablePtr GetL ( );
    enum AgEDelaunayHType GetHType ( );
    void PutHType (
        enum AgEDelaunayHType pVal );
    IAgDelaunayActionVariablePtr GetH ( );
    enum AgEDelaunayGType GetGType ( );
    void PutGType (
        enum AgEDelaunayGType pVal );
    IAgDelaunayActionVariablePtr GetG ( );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );
    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctial (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon,
        enum AgEEquinoctialFormulation EquinoctialFormulation );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    double GetMeanAnomaly ( );
    void PutMeanAnomaly (
        double pVal );
    double GetArgOfPeriapsis ( );
    void PutArgOfPeriapsis (
        double pVal );
    double GetRAAN ( );
    void PutRAAN (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_iMeanAnomaly (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_iMeanAnomaly (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_gArgOfPerigee (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_gArgOfPerigee (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_hRAAN (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_hRAAN (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LType (
        /*[out,retval]*/ enum AgEDelaunayLType * pVal ) = 0;
      virtual HRESULT __stdcall put_LType (
        /*[in]*/ enum AgEDelaunayLType pVal ) = 0;
      virtual HRESULT __stdcall get_L (
        /*[out,retval]*/ struct IAgDelaunayActionVariable * * ppVal ) = 0;
      virtual HRESULT __stdcall get_HType (
        /*[out,retval]*/ enum AgEDelaunayHType * pVal ) = 0;
      virtual HRESULT __stdcall put_HType (
        /*[in]*/ enum AgEDelaunayHType pVal ) = 0;
      virtual HRESULT __stdcall get_H (
        /*[out,retval]*/ struct IAgDelaunayActionVariable * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GType (
        /*[out,retval]*/ enum AgEDelaunayGType * pVal ) = 0;
      virtual HRESULT __stdcall put_GType (
        /*[in]*/ enum AgEDelaunayGType pVal ) = 0;
      virtual HRESULT __stdcall get_G (
        /*[out,retval]*/ struct IAgDelaunayActionVariable * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppIAgOrbitState ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctial (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon,
        /*[in]*/ enum AgEEquinoctialFormulation EquinoctialFormulation ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanAnomaly (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanAnomaly (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ArgOfPeriapsis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArgOfPeriapsis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RAAN (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RAAN (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e105ee10-5381-4f0a-aef3-b171459d9634"))
IAgOrbitStateDelaunay : IAgOrbitState
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetiMeanAnomaly,put=PutiMeanAnomaly))
    double iMeanAnomaly;
    __declspec(property(get=GetgArgOfPerigee,put=PutgArgOfPerigee))
    double gArgOfPerigee;
    __declspec(property(get=GethRAAN,put=PuthRAAN))
    double hRAAN;
    __declspec(property(get=GetLType,put=PutLType))
    enum AgEDelaunayLType LType;
    __declspec(property(get=GetL))
    IAgDelaunayActionVariablePtr L;
    __declspec(property(get=GetHType,put=PutHType))
    enum AgEDelaunayHType HType;
    __declspec(property(get=GetH))
    IAgDelaunayActionVariablePtr H;
    __declspec(property(get=GetGType,put=PutGType))
    enum AgEDelaunayGType GType;
    __declspec(property(get=GetG))
    IAgDelaunayActionVariablePtr G;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;
    __declspec(property(get=GetMeanAnomaly,put=PutMeanAnomaly))
    double MeanAnomaly;
    __declspec(property(get=GetArgOfPeriapsis,put=PutArgOfPeriapsis))
    double ArgOfPeriapsis;
    __declspec(property(get=GetRAAN,put=PutRAAN))
    double RAAN;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    double GetiMeanAnomaly ( );
    void PutiMeanAnomaly (
        double pVal );
    double GetgArgOfPerigee ( );
    void PutgArgOfPerigee (
        double pVal );
    double GethRAAN ( );
    void PuthRAAN (
        double pVal );
    enum AgEDelaunayLType GetLType ( );
    void PutLType (
        enum AgEDelaunayLType pVal );
    IAgDelaunayActionVariablePtr GetL ( );
    enum AgEDelaunayHType GetHType ( );
    void PutHType (
        enum AgEDelaunayHType pVal );
    IAgDelaunayActionVariablePtr GetH ( );
    enum AgEDelaunayGType GetGType ( );
    void PutGType (
        enum AgEDelaunayGType pVal );
    IAgDelaunayActionVariablePtr GetG ( );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );
    double GetMeanAnomaly ( );
    void PutMeanAnomaly (
        double pVal );
    double GetArgOfPeriapsis ( );
    void PutArgOfPeriapsis (
        double pVal );
    double GetRAAN ( );
    void PutRAAN (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_iMeanAnomaly (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_iMeanAnomaly (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_gArgOfPerigee (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_gArgOfPerigee (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_hRAAN (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_hRAAN (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LType (
        /*[out,retval]*/ enum AgEDelaunayLType * pVal ) = 0;
      virtual HRESULT __stdcall put_LType (
        /*[in]*/ enum AgEDelaunayLType pVal ) = 0;
      virtual HRESULT __stdcall get_L (
        /*[out,retval]*/ struct IAgDelaunayActionVariable * * ppVal ) = 0;
      virtual HRESULT __stdcall get_HType (
        /*[out,retval]*/ enum AgEDelaunayHType * pVal ) = 0;
      virtual HRESULT __stdcall put_HType (
        /*[in]*/ enum AgEDelaunayHType pVal ) = 0;
      virtual HRESULT __stdcall get_H (
        /*[out,retval]*/ struct IAgDelaunayActionVariable * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GType (
        /*[out,retval]*/ enum AgEDelaunayGType * pVal ) = 0;
      virtual HRESULT __stdcall put_GType (
        /*[in]*/ enum AgEDelaunayGType pVal ) = 0;
      virtual HRESULT __stdcall get_G (
        /*[out,retval]*/ struct IAgDelaunayActionVariable * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanAnomaly (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanAnomaly (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ArgOfPeriapsis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArgOfPeriapsis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RAAN (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RAAN (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ddaee0a2-b22b-4ae5-88e3-be676f7d585b"))
AgEquinoctialSizeShapeMeanMotion;
    // [ default ] interface _IAgEquinoctialSizeShapeMeanMotion
    // interface IAgClassicalSizeShape
    // interface IAgEquinoctialSizeShapeMeanMotion

struct __declspec(uuid("0a0f8836-0e8a-4431-9a7a-cd34dc2e88f1"))
_IAgEquinoctialSizeShapeMeanMotion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMeanMotion,put=PutMeanMotion))
    double MeanMotion;

    //
    // Wrapper methods for error-handling
    //

    double GetMeanMotion ( );
    void PutMeanMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MeanMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e6d7486a-7810-40b5-a1d4-a4194abc4259"))
IAgEquinoctialSizeShapeMeanMotion : IAgClassicalSizeShape
{
    //
    // Property data
    //

    __declspec(property(get=GetMeanMotion,put=PutMeanMotion))
    double MeanMotion;

    //
    // Wrapper methods for error-handling
    //

    double GetMeanMotion ( );
    void PutMeanMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MeanMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5e36d16e-26a7-4ccb-8706-3058139954aa"))
AgEquinoctialSizeShapeSemimajorAxis;
    // [ default ] interface _IAgEquinoctialSizeShapeSemimajorAxis
    // interface IAgClassicalSizeShape
    // interface IAgEquinoctialSizeShapeSemimajorAxis

struct __declspec(uuid("504666c0-38d0-4846-8ac8-a0f4a0d3b68d"))
_IAgEquinoctialSizeShapeSemimajorAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;

    //
    // Wrapper methods for error-handling
    //

    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5b2acc76-55ae-4b67-9db7-a78f917178ea"))
IAgEquinoctialSizeShapeSemimajorAxis : IAgClassicalSizeShape
{
    //
    // Property data
    //

    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;

    //
    // Wrapper methods for error-handling
    //

    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a68aee95-a1e0-4cb6-93ec-073ab2e36ef0"))
AgOrbitStateEquinoctial;
    // [ default ] interface _IAgOrbitStateEquinoctial
    // interface IAgOrbitStateEquinoctial
    // interface IAgOrbitState

enum AgEEquinoctialSizeShape
{
    eEquinoctialSizeShapeUnknown = -1,
    eEquinoctialSizeShapeMeanMotion = 0,
    eEquinoctialSizeShapeSemimajorAxis = 1
};

struct __declspec(uuid("f63f8c28-81ae-4f76-8c6a-c097681a6a50"))
_IAgOrbitStateEquinoctial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetSizeShapeType,put=PutSizeShapeType))
    enum AgEEquinoctialSizeShape SizeShapeType;
    __declspec(property(get=GetSizeShape))
    IAgClassicalSizeShapePtr SizeShape;
    __declspec(property(get=GetH,put=PutH))
    double H;
    __declspec(property(get=GetK,put=PutK))
    double K;
    __declspec(property(get=GetP,put=PutP))
    double P;
    __declspec(property(get=GetQ,put=PutQ))
    double Q;
    __declspec(property(get=GetMeanLongitude,put=PutMeanLongitude))
    double MeanLongitude;
    __declspec(property(get=GetFormulation,put=PutFormulation))
    enum AgEEquinoctialFormulation Formulation;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;
    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    enum AgEEquinoctialSizeShape GetSizeShapeType ( );
    void PutSizeShapeType (
        enum AgEEquinoctialSizeShape pVal );
    IAgClassicalSizeShapePtr GetSizeShape ( );
    double GetH ( );
    void PutH (
        double pVal );
    double GetK ( );
    void PutK (
        double pVal );
    double GetP ( );
    void PutP (
        double pVal );
    double GetQ ( );
    void PutQ (
        double pVal );
    double GetMeanLongitude ( );
    void PutMeanLongitude (
        double pVal );
    enum AgEEquinoctialFormulation GetFormulation ( );
    void PutFormulation (
        enum AgEEquinoctialFormulation pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );
    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctial (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon,
        enum AgEEquinoctialFormulation EquinoctialFormulation );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SizeShapeType (
        /*[out,retval]*/ enum AgEEquinoctialSizeShape * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeShapeType (
        /*[in]*/ enum AgEEquinoctialSizeShape pVal ) = 0;
      virtual HRESULT __stdcall get_SizeShape (
        /*[out,retval]*/ struct IAgClassicalSizeShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_H (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_H (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_K (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_K (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_P (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_P (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Q (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Q (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MeanLongitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanLongitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Formulation (
        /*[out,retval]*/ enum AgEEquinoctialFormulation * pVal ) = 0;
      virtual HRESULT __stdcall put_Formulation (
        /*[in]*/ enum AgEEquinoctialFormulation pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppIAgOrbitState ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctial (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon,
        /*[in]*/ enum AgEEquinoctialFormulation EquinoctialFormulation ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("f93eb695-b45c-4a4a-ae57-b3a1bbdcf298"))
IAgOrbitStateEquinoctial : IAgOrbitState
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetSizeShapeType,put=PutSizeShapeType))
    enum AgEEquinoctialSizeShape SizeShapeType;
    __declspec(property(get=GetSizeShape))
    IAgClassicalSizeShapePtr SizeShape;
    __declspec(property(get=GetH,put=PutH))
    double H;
    __declspec(property(get=GetK,put=PutK))
    double K;
    __declspec(property(get=GetP,put=PutP))
    double P;
    __declspec(property(get=GetQ,put=PutQ))
    double Q;
    __declspec(property(get=GetMeanLongitude,put=PutMeanLongitude))
    double MeanLongitude;
    __declspec(property(get=GetFormulation,put=PutFormulation))
    enum AgEEquinoctialFormulation Formulation;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    enum AgEEquinoctialSizeShape GetSizeShapeType ( );
    void PutSizeShapeType (
        enum AgEEquinoctialSizeShape pVal );
    IAgClassicalSizeShapePtr GetSizeShape ( );
    double GetH ( );
    void PutH (
        double pVal );
    double GetK ( );
    void PutK (
        double pVal );
    double GetP ( );
    void PutP (
        double pVal );
    double GetQ ( );
    void PutQ (
        double pVal );
    double GetMeanLongitude ( );
    void PutMeanLongitude (
        double pVal );
    enum AgEEquinoctialFormulation GetFormulation ( );
    void PutFormulation (
        enum AgEEquinoctialFormulation pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SizeShapeType (
        /*[out,retval]*/ enum AgEEquinoctialSizeShape * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeShapeType (
        /*[in]*/ enum AgEEquinoctialSizeShape pVal ) = 0;
      virtual HRESULT __stdcall get_SizeShape (
        /*[out,retval]*/ struct IAgClassicalSizeShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_H (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_H (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_K (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_K (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_P (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_P (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Q (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Q (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MeanLongitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanLongitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Formulation (
        /*[out,retval]*/ enum AgEEquinoctialFormulation * pVal ) = 0;
      virtual HRESULT __stdcall put_Formulation (
        /*[in]*/ enum AgEEquinoctialFormulation pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("b6286372-5b94-4c38-a2ed-2b6d3754b249"))
AgMixedSphericalFPAHorizontal;
    // [ default ] interface _IAgMixedSphericalFPAHorizontal
    // interface IAgFlightPathAngle
    // interface IAgMixedSphericalFPAHorizontal

struct __declspec(uuid("d836ee05-f04b-45cd-815d-56e69eecc7f0"))
_IAgMixedSphericalFPAHorizontal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFPA,put=PutFPA))
    double FPA;

    //
    // Wrapper methods for error-handling
    //

    double GetFPA ( );
    void PutFPA (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FPA (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1e3c1499-aa99-4005-bb90-510ebd2f7d0f"))
IAgFlightPathAngle : IUnknown
{};

struct __declspec(uuid("1aae2870-5014-47fc-ba21-c646254df8fc"))
IAgMixedSphericalFPAHorizontal : IAgFlightPathAngle
{
    //
    // Property data
    //

    __declspec(property(get=GetFPA,put=PutFPA))
    double FPA;

    //
    // Wrapper methods for error-handling
    //

    double GetFPA ( );
    void PutFPA (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FPA (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("99ec2f21-909f-4631-bd98-c3bcc303f291"))
AgMixedSphericalFPAVertical;
    // [ default ] interface _IAgMixedSphericalFPAVertical
    // interface IAgFlightPathAngle
    // interface IAgMixedSphericalFPAVertical

struct __declspec(uuid("26c7b098-a885-4945-882a-70c11fee75f9"))
_IAgMixedSphericalFPAVertical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFPA,put=PutFPA))
    double FPA;

    //
    // Wrapper methods for error-handling
    //

    double GetFPA ( );
    void PutFPA (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FPA (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5e8606f7-f47b-4d70-909b-f81397a04751"))
IAgMixedSphericalFPAVertical : IAgFlightPathAngle
{
    //
    // Property data
    //

    __declspec(property(get=GetFPA,put=PutFPA))
    double FPA;

    //
    // Wrapper methods for error-handling
    //

    double GetFPA ( );
    void PutFPA (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FPA (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5d2f6e09-56a0-444a-b96b-94f5a7f0350d"))
AgOrbitStateMixedSpherical;
    // [ default ] interface _IAgOrbitStateMixedSpherical
    // interface IAgOrbitStateMixedSpherical
    // interface IAgOrbitState

enum AgEMixedSphericalFPA
{
    eFPAUnknown = -1,
    eFPAHorizontal = 0,
    eFPAVertical = 1
};

struct __declspec(uuid("b185ab33-9af8-425e-98e9-b57d48ce665d"))
_IAgOrbitStateMixedSpherical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetFPAType,put=PutFPAType))
    enum AgEMixedSphericalFPA FPAType;
    __declspec(property(get=GetFPA))
    IAgFlightPathAnglePtr FPA;
    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    double Azimuth;
    __declspec(property(get=GetVelocity,put=PutVelocity))
    double Velocity;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;
    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    double GetLatitude ( );
    void PutLatitude (
        double pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    enum AgEMixedSphericalFPA GetFPAType ( );
    void PutFPAType (
        enum AgEMixedSphericalFPA pVal );
    IAgFlightPathAnglePtr GetFPA ( );
    double GetAzimuth ( );
    void PutAzimuth (
        double pVal );
    double GetVelocity ( );
    void PutVelocity (
        double pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );
    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctial (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon,
        enum AgEEquinoctialFormulation EquinoctialFormulation );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FPAType (
        /*[out,retval]*/ enum AgEMixedSphericalFPA * pVal ) = 0;
      virtual HRESULT __stdcall put_FPAType (
        /*[in]*/ enum AgEMixedSphericalFPA pVal ) = 0;
      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ struct IAgFlightPathAngle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Velocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppIAgOrbitState ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctial (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon,
        /*[in]*/ enum AgEEquinoctialFormulation EquinoctialFormulation ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("5ac981f1-3551-4221-8f98-29b3fd62880e"))
IAgOrbitStateMixedSpherical : IAgOrbitState
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetFPAType,put=PutFPAType))
    enum AgEMixedSphericalFPA FPAType;
    __declspec(property(get=GetFPA))
    IAgFlightPathAnglePtr FPA;
    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    double Azimuth;
    __declspec(property(get=GetVelocity,put=PutVelocity))
    double Velocity;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    double GetLatitude ( );
    void PutLatitude (
        double pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    enum AgEMixedSphericalFPA GetFPAType ( );
    void PutFPAType (
        enum AgEMixedSphericalFPA pVal );
    IAgFlightPathAnglePtr GetFPA ( );
    double GetAzimuth ( );
    void PutAzimuth (
        double pVal );
    double GetVelocity ( );
    void PutVelocity (
        double pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FPAType (
        /*[out,retval]*/ enum AgEMixedSphericalFPA * pVal ) = 0;
      virtual HRESULT __stdcall put_FPAType (
        /*[in]*/ enum AgEMixedSphericalFPA pVal ) = 0;
      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ struct IAgFlightPathAngle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Velocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("9bf3d727-480f-47b5-8805-73c3fff43497"))
AgSphericalFPAHorizontal;
    // [ default ] interface _IAgSphericalFPAHorizontal
    // interface IAgFlightPathAngle
    // interface IAgSphericalFPAHorizontal

struct __declspec(uuid("b78a78c7-d911-4889-94b2-0165d98a7d76"))
_IAgSphericalFPAHorizontal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFPA,put=PutFPA))
    double FPA;

    //
    // Wrapper methods for error-handling
    //

    double GetFPA ( );
    void PutFPA (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FPA (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("26aa955e-2690-42b8-9b26-f0ed086cc977"))
IAgSphericalFPAHorizontal : IAgFlightPathAngle
{
    //
    // Property data
    //

    __declspec(property(get=GetFPA,put=PutFPA))
    double FPA;

    //
    // Wrapper methods for error-handling
    //

    double GetFPA ( );
    void PutFPA (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FPA (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("37f0d3bb-f78f-49af-8b87-937332f4e925"))
AgSphericalFPAVertical;
    // [ default ] interface _IAgSphericalFPAVertical
    // interface IAgFlightPathAngle
    // interface IAgSphericalFPAVertical

struct __declspec(uuid("984b5486-770b-4110-a76c-8d0a511ae615"))
_IAgSphericalFPAVertical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFPA,put=PutFPA))
    double FPA;

    //
    // Wrapper methods for error-handling
    //

    double GetFPA ( );
    void PutFPA (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FPA (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d4a87d44-b203-4d51-a115-8e5268c9a574"))
IAgSphericalFPAVertical : IAgFlightPathAngle
{
    //
    // Property data
    //

    __declspec(property(get=GetFPA,put=PutFPA))
    double FPA;

    //
    // Wrapper methods for error-handling
    //

    double GetFPA ( );
    void PutFPA (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FPA (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("61ce2c48-08f0-4b70-ad83-38af2909775d"))
AgOrbitStateSpherical;
    // [ default ] interface _IAgOrbitStateSpherical
    // interface IAgOrbitStateSpherical
    // interface IAgOrbitState

enum AgESphericalFPA
{
    eSphericalFPAUnknown = -1,
    eSphericalFPAHorizontal = 0,
    eSphericalFPAVertical = 1
};

struct __declspec(uuid("f5354a90-59b8-4ac6-90a3-10a7ec075901"))
_IAgOrbitStateSpherical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetRightAscension,put=PutRightAscension))
    double RightAscension;
    __declspec(property(get=GetDeclination,put=PutDeclination))
    double Declination;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetFPAType,put=PutFPAType))
    enum AgESphericalFPA FPAType;
    __declspec(property(get=GetFPA))
    IAgFlightPathAnglePtr FPA;
    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    double Azimuth;
    __declspec(property(get=GetVelocity,put=PutVelocity))
    double Velocity;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;
    __declspec(property(get=GetOrbitStateType))
    enum AgEOrbitStateType OrbitStateType;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    double GetRightAscension ( );
    void PutRightAscension (
        double pVal );
    double GetDeclination ( );
    void PutDeclination (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    enum AgESphericalFPA GetFPAType ( );
    void PutFPAType (
        enum AgESphericalFPA pVal );
    IAgFlightPathAnglePtr GetFPA ( );
    double GetAzimuth ( );
    void PutAzimuth (
        double pVal );
    double GetVelocity ( );
    void PutVelocity (
        double pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );
    IAgOrbitStatePtr ConvertTo (
        enum AgEOrbitStateType Type );
    enum AgEOrbitStateType GetOrbitStateType ( );
    HRESULT Assign (
        struct IAgOrbitState * pOrbitState );
    HRESULT AssignClassical (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double Eccentricity,
        double Inclination,
        double ArgOfPerigee,
        double RAAN,
        double MeanAnomaly );
    HRESULT AssignCartesian (
        enum AgECoordinateSystem ECoordinateSystem,
        double XPosition,
        double YPosition,
        double ZPosition,
        double XVelocity,
        double YVelocity,
        double ZVelocity );
    HRESULT AssignGeodetic (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double LatitudeRate,
        double LongitudeRate,
        double AltitudeRate );
    HRESULT AssignEquinoctial (
        enum AgECoordinateSystem ECoordinateSystem,
        double SemiMajorAxis,
        double H,
        double K,
        double P,
        double Q,
        double MeanLon,
        enum AgEEquinoctialFormulation EquinoctialFormulation );
    HRESULT AssignMixedSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Altitude,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    HRESULT AssignSpherical (
        enum AgECoordinateSystem ECoordinateSystem,
        double Latitude,
        double Longitude,
        double Radius,
        double HorFlightPathAngle,
        double FlightPathAzimuth,
        double Velocity );
    _bstr_t GetCentralBodyName ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RightAscension (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightAscension (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Declination (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Declination (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FPAType (
        /*[out,retval]*/ enum AgESphericalFPA * pVal ) = 0;
      virtual HRESULT __stdcall put_FPAType (
        /*[in]*/ enum AgESphericalFPA pVal ) = 0;
      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ struct IAgFlightPathAngle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Velocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgEOrbitStateType Type,
        /*[out,retval]*/ struct IAgOrbitState * * ppIAgOrbitState ) = 0;
      virtual HRESULT __stdcall get_OrbitStateType (
        /*[out,retval]*/ enum AgEOrbitStateType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgOrbitState * pOrbitState ) = 0;
      virtual HRESULT __stdcall raw_AssignClassical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double Eccentricity,
        /*[in]*/ double Inclination,
        /*[in]*/ double ArgOfPerigee,
        /*[in]*/ double RAAN,
        /*[in]*/ double MeanAnomaly ) = 0;
      virtual HRESULT __stdcall raw_AssignCartesian (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double XPosition,
        /*[in]*/ double YPosition,
        /*[in]*/ double ZPosition,
        /*[in]*/ double XVelocity,
        /*[in]*/ double YVelocity,
        /*[in]*/ double ZVelocity ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double LatitudeRate,
        /*[in]*/ double LongitudeRate,
        /*[in]*/ double AltitudeRate ) = 0;
      virtual HRESULT __stdcall raw_AssignEquinoctial (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double H,
        /*[in]*/ double K,
        /*[in]*/ double P,
        /*[in]*/ double Q,
        /*[in]*/ double MeanLon,
        /*[in]*/ enum AgEEquinoctialFormulation EquinoctialFormulation ) = 0;
      virtual HRESULT __stdcall raw_AssignMixedSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall raw_AssignSpherical (
        /*[in]*/ enum AgECoordinateSystem ECoordinateSystem,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Radius,
        /*[in]*/ double HorFlightPathAngle,
        /*[in]*/ double FlightPathAzimuth,
        /*[in]*/ double Velocity ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pCBName ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("b8fc3f3f-df83-46c8-bb75-2b9d3529a6d8"))
IAgOrbitStateSpherical : IAgOrbitState
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystemType,put=PutCoordinateSystemType))
    enum AgECoordinateSystem CoordinateSystemType;
    __declspec(property(get=GetCoordinateSystem))
    IAgOrbitStateCoordinateSystemPtr CoordinateSystem;
    __declspec(property(get=GetRightAscension,put=PutRightAscension))
    double RightAscension;
    __declspec(property(get=GetDeclination,put=PutDeclination))
    double Declination;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetFPAType,put=PutFPAType))
    enum AgESphericalFPA FPAType;
    __declspec(property(get=GetFPA))
    IAgFlightPathAnglePtr FPA;
    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    double Azimuth;
    __declspec(property(get=GetVelocity,put=PutVelocity))
    double Velocity;
    __declspec(property(get=GetSupportedCoordinateSystemTypes))
    SAFEARRAY * SupportedCoordinateSystemTypes;

    //
    // Wrapper methods for error-handling
    //

    enum AgECoordinateSystem GetCoordinateSystemType ( );
    void PutCoordinateSystemType (
        enum AgECoordinateSystem pVal );
    IAgOrbitStateCoordinateSystemPtr GetCoordinateSystem ( );
    double GetRightAscension ( );
    void PutRightAscension (
        double pVal );
    double GetDeclination ( );
    void PutDeclination (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    enum AgESphericalFPA GetFPAType ( );
    void PutFPAType (
        enum AgESphericalFPA pVal );
    IAgFlightPathAnglePtr GetFPA ( );
    double GetAzimuth ( );
    void PutAzimuth (
        double pVal );
    double GetVelocity ( );
    void PutVelocity (
        double pVal );
    SAFEARRAY * GetSupportedCoordinateSystemTypes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystemType (
        /*[out,retval]*/ enum AgECoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystemType (
        /*[in]*/ enum AgECoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ struct IAgOrbitStateCoordinateSystem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RightAscension (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightAscension (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Declination (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Declination (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FPAType (
        /*[out,retval]*/ enum AgESphericalFPA * pVal ) = 0;
      virtual HRESULT __stdcall put_FPAType (
        /*[in]*/ enum AgESphericalFPA pVal ) = 0;
      virtual HRESULT __stdcall get_FPA (
        /*[out,retval]*/ struct IAgFlightPathAngle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Velocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystemTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("f2aeaffc-2dc5-4345-af13-009087bc53de"))
AgDoublesCollection;
    // [ default ] interface IUnknown
    // interface IAgDoublesCollection

struct __declspec(uuid("25343feb-f884-4e5b-9ef2-56ac2a716315"))
IAgDoublesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    double Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    double GetItem (
        long Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Add (
        double Value );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    SAFEARRAY * ToArray ( );
    HRESULT SetAt (
        long Index,
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAt (
        /*[in]*/ long Index,
        /*[in]*/ double Value ) = 0;
};

struct __declspec(uuid("739ac942-efdd-43f1-99e6-756addf2ca1f"))
AgCartesian3Vector;
    // [ default ] interface _IAgCartesian3Vector
    // interface IAgCartesian3Vector

struct __declspec(uuid("44a49a20-ee1d-4da9-9da3-efcff2392938"))
_IAgCartesian3Vector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    double GetZ ( );
    void PutZ (
        double pRetVal );
    HRESULT Get (
        double * X,
        double * Y,
        double * Z );
    HRESULT Set (
        double X,
        double Y,
        double Z );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("67395f8f-f55a-4f12-a33f-ac271f71a550"))
AgCartesian2Vector;
    // [ default ] interface _IAgCartesian2Vector
    // interface IAgCartesian2Vector

struct __declspec(uuid("3d0a312e-c325-4d1f-81af-e58f012f36d9"))
_IAgCartesian2Vector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    HRESULT Get (
        double * X,
        double * Y );
    HRESULT Set (
        double X,
        double Y );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        /*[out]*/ double * X,
        /*[out]*/ double * Y ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ double X,
        /*[in]*/ double Y ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("04f7ac52-f06a-4281-8fcb-a9ef8e3179f5"))
IAgCartesian2Vector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pRetVal );
    double GetY ( );
    void PutY (
        double pRetVal );
    HRESULT Get (
        double * X,
        double * Y );
    HRESULT Set (
        double X,
        double Y );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Get (
        /*[out]*/ double * X,
        /*[out]*/ double * Y ) = 0;
      virtual HRESULT __stdcall raw_Set (
        /*[in]*/ double X,
        /*[in]*/ double Y ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("78cf6f03-dc9d-4935-a7f9-fec2f756204b"))
AgPropertyInfo;
    // [ default ] interface IUnknown
    // interface IAgPropertyInfo
    // interface _IAgPropertyInfo

enum AgEPropertyInfoValueType
{
    ePropertyInfoValueTypeInt = 0,
    ePropertyInfoValueTypeReal = 1,
    ePropertyInfoValueTypeQuantity = 2,
    ePropertyInfoValueTypeDate = 3,
    ePropertyInfoValueTypeString = 4,
    ePropertyInfoValueTypeBool = 5,
    ePropertyInfoValueTypeInterface = 6
};

struct __declspec(uuid("348c3352-610e-42cb-8ee8-c9f624d3aa35"))
IAgPropertyInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPropertyType))
    enum AgEPropertyInfoValueType PropertyType;
    __declspec(property(get=GetHasMin))
    VARIANT_BOOL HasMin;
    __declspec(property(get=GetHasMax))
    VARIANT_BOOL HasMax;
    __declspec(property(get=GetMin))
    _variant_t Min;
    __declspec(property(get=GetMax))
    _variant_t Max;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum AgEPropertyInfoValueType GetPropertyType ( );
    _variant_t GetValue ( );
    HRESULT SetValue (
        const _variant_t & PropertyInfo );
    VARIANT_BOOL GetHasMin ( );
    VARIANT_BOOL GetHasMax ( );
    _variant_t GetMin ( );
    _variant_t GetMax ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PropertyType (
        /*[out,retval]*/ enum AgEPropertyInfoValueType * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ VARIANT PropertyInfo ) = 0;
      virtual HRESULT __stdcall get_HasMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

struct __declspec(uuid("c68e0579-a052-4df4-83cb-88476c629925"))
_IAgPropertyInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPropertyType))
    enum AgEPropertyInfoValueType PropertyType;
    __declspec(property(get=GetHasMin))
    VARIANT_BOOL HasMin;
    __declspec(property(get=GetHasMax))
    VARIANT_BOOL HasMax;
    __declspec(property(get=GetMin))
    _variant_t Min;
    __declspec(property(get=GetMax))
    _variant_t Max;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum AgEPropertyInfoValueType GetPropertyType ( );
    _variant_t GetValue ( );
    HRESULT SetValue (
        const _variant_t & PropertyInfo );
    VARIANT_BOOL GetHasMin ( );
    VARIANT_BOOL GetHasMax ( );
    _variant_t GetMin ( );
    _variant_t GetMax ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PropertyType (
        /*[out,retval]*/ enum AgEPropertyInfoValueType * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        /*[out,retval]*/ VARIANT * pVVal ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ VARIANT PropertyInfo ) = 0;
      virtual HRESULT __stdcall get_HasMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

struct __declspec(uuid("f6f6c0b6-92a1-4c9c-ab71-4b8bfb259eef"))
AgPropertyInfoCollection;
    // [ default ] interface IUnknown
    // interface IAgPropertyInfoCollection

struct __declspec(uuid("a99ba60d-bb78-4986-9f67-af55a3a388c4"))
IAgPropertyInfoCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgPropertyInfoPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAgPropertyInfoPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgPropertyInfo * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("3b9bb9c9-c0ac-4cde-8175-a731ff61b2ae"))
AgRuntimeTypeInfo;
    // [ default ] interface IUnknown
    // interface _IAgRuntimeTypeInfo
    // interface IAgRuntimeTypeInfo

struct __declspec(uuid("349c21ba-8069-40ff-81e3-6e2c60c552b4"))
_IAgRuntimeTypeInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IAgPropertyInfoCollectionPtr Properties;
    __declspec(property(get=GetIsCollection))
    VARIANT_BOOL IsCollection;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IAgPropertyInfoCollectionPtr GetProperties ( );
    VARIANT_BOOL GetIsCollection ( );
    long GetCount ( );
    IAgPropertyInfoPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgPropertyInfoCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCollection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetItem (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgPropertyInfo * * ppVal ) = 0;
};

struct __declspec(uuid("fe732802-860e-4af7-8401-65d43bfaeacb"))
IAgRuntimeTypeInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IAgPropertyInfoCollectionPtr Properties;
    __declspec(property(get=GetIsCollection))
    VARIANT_BOOL IsCollection;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IAgPropertyInfoCollectionPtr GetProperties ( );
    VARIANT_BOOL GetIsCollection ( );
    long GetCount ( );
    IAgPropertyInfoPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgPropertyInfoCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCollection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetItem (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgPropertyInfo * * ppVal ) = 0;
};

struct __declspec(uuid("919ba1f5-41e6-4308-9e0f-ae648ce435de"))
_IAgUnitPrefsUnit : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetAbbrv))
    _bstr_t Abbrv;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetDimension))
    IAgUnitPrefsDimPtr Dimension;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFullName ( );
    _bstr_t GetAbbrv ( );
    long GetId ( );
    IAgUnitPrefsDimPtr GetDimension ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Abbrv (
        /*[out,retval]*/ BSTR * pAbbrv ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pId ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ struct IAgUnitPrefsDim * * ppUnitPrefsDim ) = 0;
};

struct __declspec(uuid("24bf28d5-861b-4531-a961-a9704207fe3a"))
IAgUnitPrefsDim : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAvailableUnits))
    IAgUnitPrefsUnitCollectionPtr AvailableUnits;
    __declspec(property(get=GetCurrentUnit))
    IAgUnitPrefsUnitPtr CurrentUnit;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    _bstr_t GetName ( );
    IAgUnitPrefsUnitCollectionPtr GetAvailableUnits ( );
    IAgUnitPrefsUnitPtr GetCurrentUnit ( );
    HRESULT SetCurrentUnit (
        _bstr_t UnitAbbrv );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pId ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_AvailableUnits (
        /*[out,retval]*/ struct IAgUnitPrefsUnitCollection * * ppUnitPrefsUnitCollection ) = 0;
      virtual HRESULT __stdcall get_CurrentUnit (
        /*[out,retval]*/ struct IAgUnitPrefsUnit * * ppUnitPrefsUnit ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentUnit (
        /*[in]*/ BSTR UnitAbbrv ) = 0;
};

struct __declspec(uuid("8216427e-c75a-48f0-9387-62ed4a6a55a2"))
IAgUnitPrefsUnit : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetAbbrv))
    _bstr_t Abbrv;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetDimension))
    IAgUnitPrefsDimPtr Dimension;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFullName ( );
    _bstr_t GetAbbrv ( );
    long GetId ( );
    IAgUnitPrefsDimPtr GetDimension ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Abbrv (
        /*[out,retval]*/ BSTR * pAbbrv ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pId ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ struct IAgUnitPrefsDim * * ppUnitPrefsDim ) = 0;
};

struct __declspec(uuid("4279517f-6759-414e-bfae-7d31f7fc8c60"))
IAgUnitPrefsUnitCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgUnitPrefsUnitPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAgUnitPrefsUnitPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgUnitPrefsUnit * * ppUnitPrefsUnit ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("f1568865-1bec-45ca-842b-4c7827e3fdaa"))
_IAgUnitPrefsDim : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAvailableUnits))
    IAgUnitPrefsUnitCollectionPtr AvailableUnits;
    __declspec(property(get=GetCurrentUnit))
    IAgUnitPrefsUnitPtr CurrentUnit;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    _bstr_t GetName ( );
    IAgUnitPrefsUnitCollectionPtr GetAvailableUnits ( );
    IAgUnitPrefsUnitPtr GetCurrentUnit ( );
    HRESULT SetCurrentUnit (
        _bstr_t UnitAbbrv );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pId ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_AvailableUnits (
        /*[out,retval]*/ struct IAgUnitPrefsUnitCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentUnit (
        /*[out,retval]*/ struct IAgUnitPrefsUnit * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentUnit (
        /*[in]*/ BSTR UnitAbbrv ) = 0;
};

struct __declspec(uuid("89490ec3-aa98-49d7-b429-87783fc0b552"))
IAgUnitPrefsDimCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgUnitPrefsDimPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMissionElapsedTime,put=PutMissionElapsedTime))
    _variant_t MissionElapsedTime;
    __declspec(property(get=GetJulianDateOffset,put=PutJulianDateOffset))
    double JulianDateOffset;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAgUnitPrefsDimPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    HRESULT SetCurrentUnit (
        _bstr_t Dimension,
        _bstr_t UnitAbbrv );
    _bstr_t GetCurrentUnitAbbrv (
        const _variant_t & IndexOrDimName );
    _variant_t GetMissionElapsedTime ( );
    void PutMissionElapsedTime (
        const _variant_t & pMisElapTime );
    double GetJulianDateOffset ( );
    void PutJulianDateOffset (
        double pJDateOffset );
    IUnknownPtr Get_NewEnum ( );
    HRESULT ResetUnits ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgUnitPrefsDim * * ppAgUnitPrefsDim ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentUnit (
        /*[in]*/ BSTR Dimension,
        /*[in]*/ BSTR UnitAbbrv ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentUnitAbbrv (
        /*[in]*/ VARIANT IndexOrDimName,
        /*[out,retval]*/ BSTR * pUnitAbbrv ) = 0;
      virtual HRESULT __stdcall get_MissionElapsedTime (
        /*[out,retval]*/ VARIANT * pMisElapTime ) = 0;
      virtual HRESULT __stdcall put_MissionElapsedTime (
        /*[in]*/ VARIANT pMisElapTime ) = 0;
      virtual HRESULT __stdcall get_JulianDateOffset (
        /*[out,retval]*/ double * pJDateOffset ) = 0;
      virtual HRESULT __stdcall put_JulianDateOffset (
        /*[in]*/ double pJDateOffset ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ResetUnits ( ) = 0;
};

} // namespace STKUtil

#pragma pack(pop)
