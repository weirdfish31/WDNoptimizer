// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (69b8cbe9).
//
// c:\r_stk_v9.2.x\source\lib\release.net\tlhbuilder\agstkobjects.tli
//
// Wrapper implementations for Win32 type library AgStkObjects.tlb
// compiler-generated file created 11/23/11 at 05:29:08 - DO NOT EDIT!

#pragma once

namespace STKObjects {

//
// dispinterface IAgStkObjectRootEvents wrapper method implementations
//

HRESULT IAgStkObjectRootEvents::OnScenarioNew ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

HRESULT IAgStkObjectRootEvents::OnScenarioLoad ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

HRESULT IAgStkObjectRootEvents::OnScenarioClose ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgStkObjectRootEvents::OnScenarioSave ( _bstr_t Path ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Path);
}

HRESULT IAgStkObjectRootEvents::OnLogMessage ( _bstr_t Message, enum STKUtil::AgELogMsgType MsgType, long ErrorCode, _bstr_t Filename, long LineNo, enum STKUtil::AgELogMsgDispID DispID ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0003\x0003\x0008\x0003\x0003", (BSTR)Message, MsgType, ErrorCode, (BSTR)Filename, LineNo, DispID);
}

HRESULT IAgStkObjectRootEvents::OnAnimUpdate ( double TimeEpSec ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005", TimeEpSec);
}

HRESULT IAgStkObjectRootEvents::OnStkObjectAdded ( const _variant_t & Sender ) {
    return _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c", &Sender);
}

HRESULT IAgStkObjectRootEvents::OnStkObjectDeleted ( const _variant_t & Sender ) {
    return _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c", &Sender);
}

HRESULT IAgStkObjectRootEvents::OnStkObjectRenamed ( const _variant_t & Sender, _bstr_t OldPath, _bstr_t NewPath ) {
    return _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c\x0008\x0008", &Sender, (BSTR)OldPath, (BSTR)NewPath);
}

HRESULT IAgStkObjectRootEvents::OnAnimationPlayback ( double CurrentTime, enum AgEAnimationActions eAction, enum AgEAnimationDirections eDirection ) {
    return _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0003\x0003", CurrentTime, eAction, eDirection);
}

HRESULT IAgStkObjectRootEvents::OnAnimationRewind ( ) {
    return _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgStkObjectRootEvents::OnAnimationPause ( double CurrentTime ) {
    return _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005", CurrentTime);
}

HRESULT IAgStkObjectRootEvents::OnScenarioBeforeSave ( struct IAgScenarioBeforeSaveEventArgs * pArgs ) {
    return _com_dispatch_method(this, 0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pArgs);
}

HRESULT IAgStkObjectRootEvents::OnAnimationStep ( double CurrentTime ) {
    return _com_dispatch_method(this, 0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005", CurrentTime);
}

HRESULT IAgStkObjectRootEvents::OnAnimationStepBack ( double CurrentTime ) {
    return _com_dispatch_method(this, 0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005", CurrentTime);
}

HRESULT IAgStkObjectRootEvents::OnAnimationSlower ( ) {
    return _com_dispatch_method(this, 0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgStkObjectRootEvents::OnAnimationFaster ( ) {
    return _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgStkObjectRootEvents::OnPercentCompleteUpdate ( struct IAgPctCmpltEventArgs * pArgs ) {
    return _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pArgs);
}

HRESULT IAgStkObjectRootEvents::OnPercentCompleteEnd ( ) {
    return _com_dispatch_method(this, 0x20, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgStkObjectRootEvents::OnPercentCompleteBegin ( ) {
    return _com_dispatch_method(this, 0x21, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IAgStkObjectRootEvents::OnStkObjectChanged ( struct IAgStkObjectChangedEventArgs * pArgs ) {
    return _com_dispatch_method(this, 0x22, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pArgs);
}

HRESULT IAgStkObjectRootEvents::OnScenarioBeforeClose ( ) {
    return _com_dispatch_method(this, 0x23, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface IAgScenarioBeforeSaveEventArgs wrapper method implementations
//

_bstr_t IAgScenarioBeforeSaveEventArgs::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgScenarioBeforeSaveEventArgs::GetContinueSave ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContinueSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScenarioBeforeSaveEventArgs::PutContinueSave ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ContinueSave(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgPctCmpltEventArgs wrapper method implementations
//

HRESULT IAgPctCmpltEventArgs::Cancel ( ) {
    HRESULT _hr = raw_Cancel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgPctCmpltEventArgs::GetCanceled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Canceled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgPctCmpltEventArgs::GetCanCancel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanCancel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgPctCmpltEventArgs::GetPercentCompleted ( ) {
    int _result = 0;
    HRESULT _hr = get_PercentCompleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgPctCmpltEventArgs::GetMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgStkObjectChangedEventArgs wrapper method implementations
//

_bstr_t IAgStkObjectChangedEventArgs::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgStdMil2525bSymbols wrapper method implementations
//

VARIANT_BOOL IAgStdMil2525bSymbols::GetFillEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStdMil2525bSymbols::PutFillEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FillEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

unsigned int IAgStdMil2525bSymbols::GetSymbolImageSize ( ) {
    unsigned int _result = 0;
    HRESULT _hr = get_SymbolImageSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStdMil2525bSymbols::PutSymbolImageSize ( unsigned int pRetVal ) {
    HRESULT _hr = put_SymbolImageSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStdMil2525bSymbols::CreateSymbol ( _bstr_t SymbolID, _bstr_t SaveImageFilePath ) {
    HRESULT _hr = raw_CreateSymbol(SymbolID, SaveImageFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgAvailableFeatures wrapper method implementations
//

VARIANT_BOOL IAgAvailableFeatures::IsPropagatorTypeAvailable ( enum AgEVePropagatorType PropagatorType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPropagatorTypeAvailable(PropagatorType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgAvailableFeatures::IsObjectTypeAvailable ( enum AgESTKObjectType ObjectType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectTypeAvailable(ObjectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkCentralBodyEllipsoid wrapper method implementations
//

double IAgStkCentralBodyEllipsoid::GetA ( ) {
    double _result = 0;
    HRESULT _hr = get_A(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkCentralBodyEllipsoid::GetB ( ) {
    double _result = 0;
    HRESULT _hr = get_B(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkCentralBodyEllipsoid::GetC ( ) {
    double _result = 0;
    HRESULT _hr = get_C(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkCentralBodyEllipsoid::GetMeanRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkCentralBodyEllipsoid::GetVolumetricRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_VolumetricRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkCentralBody wrapper method implementations
//

_bstr_t IAgStkCentralBody::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkCentralBodyEllipsoidPtr IAgStkCentralBody::GetEllipsoid ( ) {
    struct IAgStkCentralBodyEllipsoid * _result = 0;
    HRESULT _hr = get_Ellipsoid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkCentralBodyEllipsoidPtr(_result, false);
}

AgSTKVgtLib::IAgCrdnProviderPtr IAgStkCentralBody::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface IAgStkCentralBodyCollection wrapper method implementations
//

VARIANT_BOOL IAgStkCentralBodyCollection::Contains ( _bstr_t CentralName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(CentralName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkCentralBodyPtr IAgStkCentralBodyCollection::GetEarth ( ) {
    struct IAgStkCentralBody * _result = 0;
    HRESULT _hr = get_Earth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkCentralBodyPtr(_result, false);
}

IAgStkCentralBodyPtr IAgStkCentralBodyCollection::GetSun ( ) {
    struct IAgStkCentralBody * _result = 0;
    HRESULT _hr = get_Sun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkCentralBodyPtr(_result, false);
}

IAgStkCentralBodyPtr IAgStkCentralBodyCollection::GetMoon ( ) {
    struct IAgStkCentralBody * _result = 0;
    HRESULT _hr = get_Moon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkCentralBodyPtr(_result, false);
}

long IAgStkCentralBodyCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkCentralBodyPtr IAgStkCentralBodyCollection::GetItem ( const _variant_t & IndexOrName ) {
    struct IAgStkCentralBody * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkCentralBodyPtr(_result, false);
}

IUnknownPtr IAgStkCentralBodyCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgDataProviderInfo wrapper method implementations
//

_bstr_t IAgDataProviderInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEDataProviderType IAgDataProviderInfo::GetType ( ) {
    enum AgEDataProviderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgDataProviderInfo::IsGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDrDataSet wrapper method implementations
//

_bstr_t IAgDrDataSet::GetElementName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ElementName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IAgDrDataSet::GetElementType ( ) {
    long _result = 0;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IAgDrDataSet::GetUnitType ( ) {
    long _result = 0;
    HRESULT _hr = get_UnitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IAgDrDataSet::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgDrDataSet::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgDrDataSet::GetInternalUnitValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetInternalUnitValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDrDataSetCollection wrapper method implementations
//

long IAgDrDataSetCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDrDataSetPtr IAgDrDataSetCollection::GetItem ( long Index ) {
    struct IAgDrDataSet * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrDataSetPtr(_result, false);
}

IUnknownPtr IAgDrDataSetCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgDrDataSetPtr IAgDrDataSetCollection::GetDataSetByName ( _bstr_t DataSetName ) {
    struct IAgDrDataSet * _result = 0;
    HRESULT _hr = raw_GetDataSetByName(DataSetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrDataSetPtr(_result, false);
}

long IAgDrDataSetCollection::GetRowCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgDrDataSetCollection::GetRow ( long Index ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetRow(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgDrDataSetCollection::ToArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ToArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgDrDataSetCollection::GetElementNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ElementNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDrInterval wrapper method implementations
//

_variant_t IAgDrInterval::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgDrInterval::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IAgDrDataSetCollectionPtr IAgDrInterval::GetDataSets ( ) {
    struct IAgDrDataSetCollection * _result = 0;
    HRESULT _hr = get_DataSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrDataSetCollectionPtr(_result, false);
}

SAFEARRAY * IAgDrInterval::ThresholdCrossings ( _bstr_t ElemName, const _variant_t & Threshold ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ThresholdCrossings(ElemName, Threshold, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgDrInterval::MultipleThresholdCrossings ( _bstr_t ElemName, SAFEARRAY * * Thresholds ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_MultipleThresholdCrossings(ElemName, Thresholds, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDrIntervalCollection wrapper method implementations
//

long IAgDrIntervalCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDrIntervalPtr IAgDrIntervalCollection::GetItem ( long Index ) {
    struct IAgDrInterval * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrIntervalPtr(_result, false);
}

IUnknownPtr IAgDrIntervalCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgDrSubSection wrapper method implementations
//

_bstr_t IAgDrSubSection::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgDrIntervalCollectionPtr IAgDrSubSection::GetIntervals ( ) {
    struct IAgDrIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrIntervalCollectionPtr(_result, false);
}

//
// interface IAgDrSubSectionCollection wrapper method implementations
//

long IAgDrSubSectionCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDrSubSectionPtr IAgDrSubSectionCollection::GetItem ( long Index ) {
    struct IAgDrSubSection * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrSubSectionPtr(_result, false);
}

IUnknownPtr IAgDrSubSectionCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgDrTextMessage wrapper method implementations
//

long IAgDrTextMessage::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgDrTextMessage::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr IAgDrTextMessage::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SAFEARRAY * IAgDrTextMessage::GetMessages ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Messages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgDrTextMessage::GetIsFailure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFailure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDrResult wrapper method implementations
//

enum AgEDrCategories IAgDrResult::GetCategory ( ) {
    enum AgEDrCategories _result;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IAgDrResult::GetValue ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IAgDrSubSectionCollectionPtr IAgDrResult::GetSections ( ) {
    struct IAgDrSubSectionCollection * _result = 0;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrSubSectionCollectionPtr(_result, false);
}

IAgDrIntervalCollectionPtr IAgDrResult::GetIntervals ( ) {
    struct IAgDrIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrIntervalCollectionPtr(_result, false);
}

IAgDrDataSetCollectionPtr IAgDrResult::GetDataSets ( ) {
    struct IAgDrDataSetCollection * _result = 0;
    HRESULT _hr = get_DataSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrDataSetCollectionPtr(_result, false);
}

IAgDrTextMessagePtr IAgDrResult::GetMessage ( ) {
    struct IAgDrTextMessage * _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrTextMessagePtr(_result, false);
}

//
// interface IAgDrTimeArrayElements wrapper method implementations
//

SAFEARRAY * IAgDrTimeArrayElements::GetArray ( const _variant_t & IndexOrName ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetArray(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgDrTimeArrayElements::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgDrTimeArrayElements::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDataPrvTimeVar wrapper method implementations
//

IAgDrResultPtr IAgDataPrvTimeVar::Exec ( const _variant_t & StartTime, const _variant_t & StopTime, double StepTime ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_Exec(StartTime, StopTime, StepTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr IAgDataPrvTimeVar::ExecElements ( const _variant_t & StartTime, const _variant_t & StopTime, double StepTime, SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecElements(StartTime, StopTime, StepTime, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr IAgDataPrvTimeVar::ExecSingle ( const _variant_t & SingleTime ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecSingle(SingleTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr IAgDataPrvTimeVar::ExecSingleElements ( const _variant_t & SingleTime, SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecSingleElements(SingleTime, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrTimeArrayElementsPtr IAgDataPrvTimeVar::ExecSingleElementsArray ( SAFEARRAY * * TimeArray, SAFEARRAY * * ElementNames ) {
    struct IAgDrTimeArrayElements * _result = 0;
    HRESULT _hr = raw_ExecSingleElementsArray(TimeArray, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrTimeArrayElementsPtr(_result, false);
}

IAgDrResultPtr IAgDataPrvTimeVar::ExecNativeTimes ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecNativeTimes(StartTime, StopTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr IAgDataPrvTimeVar::ExecElementsNativeTimes ( const _variant_t & StartTime, const _variant_t & StopTime, SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecElementsNativeTimes(StartTime, StopTime, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

//
// interface IAgDataPrvInterval wrapper method implementations
//

IAgDrResultPtr IAgDataPrvInterval::Exec ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_Exec(StartTime, StopTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr IAgDataPrvInterval::ExecElements ( const _variant_t & StartTime, const _variant_t & StopTime, SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecElements(StartTime, StopTime, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

//
// interface IAgDataPrvFixed wrapper method implementations
//

IAgDrResultPtr IAgDataPrvFixed::Exec ( ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_Exec(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr IAgDataPrvFixed::ExecElements ( SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecElements(ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

//
// interface IAgDataProviderCollection wrapper method implementations
//

_bstr_t IAgDataProviderCollection::GetSchema ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSchema(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgDataProviderInfoPtr IAgDataProviderCollection::GetItem ( const _variant_t & Index ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

long IAgDataProviderCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgDataProviderCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgDataProviderInfoPtr IAgDataProviderCollection::GetDataPrvInfoFromPath ( _bstr_t DataProviderPath ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = raw_GetDataPrvInfoFromPath(DataProviderPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataPrvTimeVarPtr IAgDataProviderCollection::GetDataPrvTimeVarFromPath ( _bstr_t DataProviderPath ) {
    struct IAgDataPrvTimeVar * _result = 0;
    HRESULT _hr = raw_GetDataPrvTimeVarFromPath(DataProviderPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataPrvTimeVarPtr(_result, false);
}

IAgDataPrvIntervalPtr IAgDataProviderCollection::GetDataPrvIntervalFromPath ( _bstr_t DataProviderPath ) {
    struct IAgDataPrvInterval * _result = 0;
    HRESULT _hr = raw_GetDataPrvIntervalFromPath(DataProviderPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataPrvIntervalPtr(_result, false);
}

IAgDataPrvFixedPtr IAgDataProviderCollection::GetDataPrvFixedFromPath ( _bstr_t DataProviderPath ) {
    struct IAgDataPrvFixed * _result = 0;
    HRESULT _hr = raw_GetDataPrvFixedFromPath(DataProviderPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataPrvFixedPtr(_result, false);
}

//
// interface IAgFmSatisfaction wrapper method implementations
//

VARIANT_BOOL IAgFmSatisfaction::GetEnableSatisfaction ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSatisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmSatisfaction::PutEnableSatisfaction ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSatisfaction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmSatisfactionType IAgFmSatisfaction::GetSatisfactionType ( ) {
    enum AgEFmSatisfactionType _result;
    HRESULT _hr = get_SatisfactionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmSatisfaction::PutSatisfactionType ( enum AgEFmSatisfactionType pVal ) {
    HRESULT _hr = put_SatisfactionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgFmSatisfaction::GetSatisfactionThreshold ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SatisfactionThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgFmSatisfaction::PutSatisfactionThreshold ( const _variant_t & pVal ) {
    HRESULT _hr = put_SatisfactionThreshold(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgFmSatisfaction::GetInvalidDataIndicator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InvalidDataIndicator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgFmSatisfaction::PutInvalidDataIndicator ( const _variant_t & pVal ) {
    HRESULT _hr = put_InvalidDataIndicator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgFmSatisfaction::GetUseValueRangeCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseValueRangeCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmSatisfaction::PutUseValueRangeCheck ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseValueRangeCheck(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgFmSatisfaction::GetMinValueRange ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinValueRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgFmSatisfaction::PutMinValueRange ( const _variant_t & pInVal ) {
    HRESULT _hr = put_MinValueRange(pInVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgFmSatisfaction::GetMaxValueRange ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxValueRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgFmSatisfaction::PutMaxValueRange ( const _variant_t & pInVal ) {
    HRESULT _hr = put_MaxValueRange(pInVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgFmSatisfaction::GetExcludeValueRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExcludeValueRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmSatisfaction::PutExcludeValueRange ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExcludeValueRange(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmDefinition wrapper method implementations
//

IAgFmSatisfactionPtr IAgFmDefinition::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

//
// interface IAgFmDefCompute wrapper method implementations
//

enum AgEFmCompute IAgFmDefCompute::GetComputeType ( ) {
    enum AgEFmCompute _result;
    HRESULT _hr = get_ComputeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgFmDefCompute::SetComputeType ( enum AgEFmCompute ComputeType ) {
    HRESULT _hr = raw_SetComputeType(ComputeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgFmDefCompute::IsComputeTypeSupported ( enum AgEFmCompute ComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsComputeTypeSupported(ComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgFmDefCompute::GetComputeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ComputeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionDataPtr IAgFmDefCompute::GetCompute ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_Compute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

//
// interface IAgFmDefAccessConstraint wrapper method implementations
//

enum AgEFmAcrossAssets IAgFmDefAccessConstraint::GetAcrossAssets ( ) {
    enum AgEFmAcrossAssets _result;
    HRESULT _hr = get_AcrossAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefAccessConstraint::PutAcrossAssets ( enum AgEFmAcrossAssets pVal ) {
    HRESULT _hr = put_AcrossAssets(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgFmDefAccessConstraint::GetTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefAccessConstraint::PutTimeStep ( double pVal ) {
    HRESULT _hr = put_TimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmConstraintName IAgFmDefAccessConstraint::GetConstraintName ( ) {
    enum AgEFmConstraintName _result;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefAccessConstraint::PutConstraintName ( enum AgEFmConstraintName pVal ) {
    HRESULT _hr = put_ConstraintName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgFmDefAccessConstraint::GetConstraint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Constraint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgFmDefAccessConstraint::PutConstraint ( _bstr_t pConstraintName ) {
    HRESULT _hr = put_Constraint(pConstraintName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGfxRampColor wrapper method implementations
//

OLE_COLOR IAgFmGfxRampColor::GetStartColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxRampColor::PutStartColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_StartColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgFmGfxRampColor::GetEndColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_EndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxRampColor::PutEndColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_EndColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGfxLevelAttributesElement wrapper method implementations
//

_variant_t IAgFmGfxLevelAttributesElement::GetLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Level(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgFmGfxLevelAttributesElement::PutLevel ( const _variant_t & pVal ) {
    HRESULT _hr = put_Level(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgFmGfxLevelAttributesElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxLevelAttributesElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGfxLevelAttributesCollection wrapper method implementations
//

long IAgFmGfxLevelAttributesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmGfxLevelAttributesElementPtr IAgFmGfxLevelAttributesCollection::GetItem ( long Index ) {
    struct IAgFmGfxLevelAttributesElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLevelAttributesElementPtr(_result, false);
}

IUnknownPtr IAgFmGfxLevelAttributesCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgFmGfxLevelAttributesCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgFmGfxLevelAttributesCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgFmGfxLevelAttributesCollection::AddLevelRange ( const _variant_t & Start, const _variant_t & Stop, const _variant_t & Step ) {
    HRESULT _hr = raw_AddLevelRange(Start, Stop, Step);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgFmGfxLevelAttributesElementPtr IAgFmGfxLevelAttributesCollection::AddLevel ( const _variant_t & Level ) {
    struct IAgFmGfxLevelAttributesElement * _result = 0;
    HRESULT _hr = raw_AddLevel(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLevelAttributesElementPtr(_result, false);
}

//
// interface IAgFmGfxColorOptions wrapper method implementations
//

OLE_COLOR IAgFmGfxColorOptions::GetBackground ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxColorOptions::PutBackground ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Background(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgFmGfxColorOptions::GetText ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxColorOptions::PutText ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGfxTextOptions wrapper method implementations
//

_bstr_t IAgFmGfxTextOptions::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgFmGfxTextOptions::PutTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgFmGfxTextOptions::GetNumDecimalDigits ( ) {
    long _result = 0;
    HRESULT _hr = get_NumDecimalDigits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxTextOptions::PutNumDecimalDigits ( long pVal ) {
    HRESULT _hr = put_NumDecimalDigits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmGfxFloatingPointFormat IAgFmGfxTextOptions::GetFloatingPointFormat ( ) {
    enum AgEFmGfxFloatingPointFormat _result;
    HRESULT _hr = get_FloatingPointFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxTextOptions::PutFloatingPointFormat ( enum AgEFmGfxFloatingPointFormat pVal ) {
    HRESULT _hr = put_FloatingPointFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGfxRangeColorOptions wrapper method implementations
//

enum AgEFmGfxDirection IAgFmGfxRangeColorOptions::GetDirection ( ) {
    enum AgEFmGfxDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxRangeColorOptions::PutDirection ( enum AgEFmGfxDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgFmGfxRangeColorOptions::GetMaxSquaresPerRow ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSquaresPerRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxRangeColorOptions::PutMaxSquaresPerRow ( long pVal ) {
    HRESULT _hr = put_MaxSquaresPerRow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgFmGfxRangeColorOptions::GetMaxSquaresPerColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSquaresPerColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxRangeColorOptions::PutMaxSquaresPerColumn ( long pVal ) {
    HRESULT _hr = put_MaxSquaresPerColumn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgFmGfxRangeColorOptions::GetColorSquareWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ColorSquareWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxRangeColorOptions::PutColorSquareWidth ( long pVal ) {
    HRESULT _hr = put_ColorSquareWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgFmGfxRangeColorOptions::GetColorSquareHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_ColorSquareHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxRangeColorOptions::PutColorSquareHeight ( long pVal ) {
    HRESULT _hr = put_ColorSquareHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGfxPositionOnMap wrapper method implementations
//

long IAgFmGfxPositionOnMap::GetX ( ) {
    long _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxPositionOnMap::PutX ( long pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgFmGfxPositionOnMap::GetY ( ) {
    long _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxPositionOnMap::PutY ( long pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGfxLegendWindow wrapper method implementations
//

VARIANT_BOOL IAgFmGfxLegendWindow::GetIsVisibleOnMap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisibleOnMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxLegendWindow::PutIsVisibleOnMap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisibleOnMap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxPositionOnMapPtr IAgFmGfxLegendWindow::GetPositionOnMap ( ) {
    struct IAgFmGfxPositionOnMap * _result = 0;
    HRESULT _hr = get_PositionOnMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxPositionOnMapPtr(_result, false);
}

//
// interface IAgFmVOLegendWindow wrapper method implementations
//

VARIANT_BOOL IAgFmVOLegendWindow::GetIsVisibleOnMap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisibleOnMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmVOLegendWindow::PutIsVisibleOnMap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisibleOnMap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxPositionOnMapPtr IAgFmVOLegendWindow::GetPositionOnMap ( ) {
    struct IAgFmGfxPositionOnMap * _result = 0;
    HRESULT _hr = get_PositionOnMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxPositionOnMapPtr(_result, false);
}

double IAgFmVOLegendWindow::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmVOLegendWindow::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGfxLegend wrapper method implementations
//

IAgFmGfxColorOptionsPtr IAgFmGfxLegend::GetColorOptions ( ) {
    struct IAgFmGfxColorOptions * _result = 0;
    HRESULT _hr = get_ColorOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxColorOptionsPtr(_result, false);
}

IAgFmGfxTextOptionsPtr IAgFmGfxLegend::GetTextOptions ( ) {
    struct IAgFmGfxTextOptions * _result = 0;
    HRESULT _hr = get_TextOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxTextOptionsPtr(_result, false);
}

IAgFmGfxRangeColorOptionsPtr IAgFmGfxLegend::GetRangeColorOptions ( ) {
    struct IAgFmGfxRangeColorOptions * _result = 0;
    HRESULT _hr = get_RangeColorOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxRangeColorOptionsPtr(_result, false);
}

IAgFmGfxLegendWindowPtr IAgFmGfxLegend::GetGfxWindow ( ) {
    struct IAgFmGfxLegendWindow * _result = 0;
    HRESULT _hr = get_GfxWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLegendWindowPtr(_result, false);
}

IAgFmVOLegendWindowPtr IAgFmGfxLegend::GetVOWindow ( ) {
    struct IAgFmVOLegendWindow * _result = 0;
    HRESULT _hr = get_VOWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmVOLegendWindowPtr(_result, false);
}

//
// interface IAgFmGfxContours wrapper method implementations
//

VARIANT_BOOL IAgFmGfxContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxContours::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmGfxContourType IAgFmGfxContours::GetContourType ( ) {
    enum AgEFmGfxContourType _result;
    HRESULT _hr = get_ContourType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxContours::PutContourType ( enum AgEFmGfxContourType pVal ) {
    HRESULT _hr = put_ContourType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmGfxColorMethod IAgFmGfxContours::GetColorMethod ( ) {
    enum AgEFmGfxColorMethod _result;
    HRESULT _hr = get_ColorMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxContours::PutColorMethod ( enum AgEFmGfxColorMethod pVal ) {
    HRESULT _hr = put_ColorMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxRampColorPtr IAgFmGfxContours::GetRampColor ( ) {
    struct IAgFmGfxRampColor * _result = 0;
    HRESULT _hr = get_RampColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxRampColorPtr(_result, false);
}

IAgFmGfxLevelAttributesCollectionPtr IAgFmGfxContours::GetLevelAttributes ( ) {
    struct IAgFmGfxLevelAttributesCollection * _result = 0;
    HRESULT _hr = get_LevelAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLevelAttributesCollectionPtr(_result, false);
}

IAgFmGfxLegendPtr IAgFmGfxContours::GetLegend ( ) {
    struct IAgFmGfxLegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLegendPtr(_result, false);
}

//
// interface IAgFmGfxAttributes wrapper method implementations
//

VARIANT_BOOL IAgFmGfxAttributes::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxAttributes::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgFmGfxAttributes::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxAttributes::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgFmGfxAttributes::GetFillPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxAttributes::PutFillPoints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillPoints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgFmGfxAttributes::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgFmGfxAttributes::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxContoursPtr IAgFmGfxAttributes::GetContours ( ) {
    struct IAgFmGfxContours * _result = 0;
    HRESULT _hr = get_Contours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxContoursPtr(_result, false);
}

//
// interface IAgFmGfxAttributesAnimation wrapper method implementations
//

enum AgEFmGfxAccumulation IAgFmGfxAttributesAnimation::GetAccumulation ( ) {
    enum AgEFmGfxAccumulation _result;
    HRESULT _hr = get_Accumulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxAttributesAnimation::PutAccumulation ( enum AgEFmGfxAccumulation pVal ) {
    HRESULT _hr = put_Accumulation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGraphics wrapper method implementations
//

IAgFmGfxAttributesPtr IAgFmGraphics::GetStatic ( ) {
    struct IAgFmGfxAttributes * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxAttributesPtr(_result, false);
}

IAgFmGfxAttributesAnimationPtr IAgFmGraphics::GetAnimation ( ) {
    struct IAgFmGfxAttributesAnimation * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxAttributesAnimationPtr(_result, false);
}

//
// interface IAgObjectCoverageFOM wrapper method implementations
//

enum AgEFmDefinitionType IAgObjectCoverageFOM::GetDefinitionType ( ) {
    enum AgEFmDefinitionType _result;
    HRESULT _hr = get_DefinitionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgObjectCoverageFOM::SetDefinitionType ( enum AgEFmDefinitionType Def ) {
    HRESULT _hr = raw_SetDefinitionType(Def);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgObjectCoverageFOM::IsDefinitionTypeSupported ( enum AgEFmDefinitionType Def ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDefinitionTypeSupported(Def, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgObjectCoverageFOM::GetDefinitionSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DefinitionSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionPtr IAgObjectCoverageFOM::GetDefinition ( ) {
    struct IAgFmDefinition * _result = 0;
    HRESULT _hr = get_Definition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionPtr(_result, false);
}

IAgFmDefAccessConstraintPtr IAgObjectCoverageFOM::SetAccessConstraintDefinition ( enum AgEFmConstraintName ConstraintName ) {
    struct IAgFmDefAccessConstraint * _result = 0;
    HRESULT _hr = raw_SetAccessConstraintDefinition(ConstraintName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefAccessConstraintPtr(_result, false);
}

IAgFmGraphicsPtr IAgObjectCoverageFOM::GetGraphics ( ) {
    struct IAgFmGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGraphicsPtr(_result, false);
}

IAgFmDefAccessConstraintPtr IAgObjectCoverageFOM::SetAccessConstraintDefinitionName ( _bstr_t ConstraintName ) {
    struct IAgFmDefAccessConstraint * _result = 0;
    HRESULT _hr = raw_SetAccessConstraintDefinitionName(ConstraintName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefAccessConstraintPtr(_result, false);
}

//
// interface IAgStkAccessGraphics wrapper method implementations
//

VARIANT_BOOL IAgStkAccessGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessGraphics::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkAccessGraphics::GetLineVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LineVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessGraphics::PutLineVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LineVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkAccessGraphics::GetAnimateGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnimateGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessGraphics::PutAnimateGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AnimateGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkAccessGraphics::GetStaticGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StaticGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessGraphics::PutStaticGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_StaticGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkAccessAdvanced wrapper method implementations
//

VARIANT_BOOL IAgStkAccessAdvanced::GetEnableLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutEnableLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkAccessAdvanced::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkAccessAdvanced::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkAccessAdvanced::GetTimeLightDelayConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeLightDelayConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutTimeLightDelayConvergence ( double pVal ) {
    HRESULT _hr = put_TimeLightDelayConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAberrationType IAgStkAccessAdvanced::GetAberrationType ( ) {
    enum AgEAberrationType _result;
    HRESULT _hr = get_AberrationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutAberrationType ( enum AgEAberrationType pVal ) {
    HRESULT _hr = put_AberrationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEIvClockHost IAgStkAccessAdvanced::GetClockHost ( ) {
    enum AgEIvClockHost _result;
    HRESULT _hr = get_ClockHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutClockHost ( enum AgEIvClockHost pVal ) {
    HRESULT _hr = put_ClockHost(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEIvTimeSense IAgStkAccessAdvanced::GetSignalSenseOfClockHost ( ) {
    enum AgEIvTimeSense _result;
    HRESULT _hr = get_SignalSenseOfClockHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutSignalSenseOfClockHost ( enum AgEIvTimeSense pVal ) {
    HRESULT _hr = put_SignalSenseOfClockHost(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkAccessAdvanced::GetUseDefaultClockHostAndSignalSense ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDefaultClockHostAndSignalSense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutUseDefaultClockHostAndSignalSense ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseDefaultClockHostAndSignalSense(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkAccessAdvanced::GetUsePreciseEventTimes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePreciseEventTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutUsePreciseEventTimes ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePreciseEventTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkAccessAdvanced::GetAbsoluteTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_AbsoluteTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutAbsoluteTolerance ( double pVal ) {
    HRESULT _hr = put_AbsoluteTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkAccessAdvanced::GetRelativeTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_RelativeTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutRelativeTolerance ( double pVal ) {
    HRESULT _hr = put_RelativeTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkAccessAdvanced::GetUseFixedTimeStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutUseFixedTimeStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkAccessAdvanced::GetMinTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutMinTimeStep ( double pVal ) {
    HRESULT _hr = put_MinTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkAccessAdvanced::GetFixedStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_FixedStepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutFixedStepSize ( double pVal ) {
    HRESULT _hr = put_FixedStepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkAccessAdvanced::GetFixedTimeBound ( ) {
    double _result = 0;
    HRESULT _hr = get_FixedTimeBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccessAdvanced::PutFixedTimeBound ( double pVal ) {
    HRESULT _hr = put_FixedTimeBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVODataDisplayElement wrapper method implementations
//

_bstr_t IAgVODataDisplayElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVODataDisplayElement::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVODataDisplayElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVODataDisplayElement::IsDisplayedInWindow ( _bstr_t Title ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayedInWindow(Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEVOLocation IAgVODataDisplayElement::GetLocation ( ) {
    enum AgEVOLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutLocation ( enum AgEVOLocation pVal ) {
    HRESULT _hr = put_Location(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOXOrigin IAgVODataDisplayElement::GetXOrigin ( ) {
    enum AgEVOXOrigin _result;
    HRESULT _hr = get_XOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutXOrigin ( enum AgEVOXOrigin pVal ) {
    HRESULT _hr = put_XOrigin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVODataDisplayElement::GetX ( ) {
    long _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutX ( long pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOYOrigin IAgVODataDisplayElement::GetYOrigin ( ) {
    enum AgEVOYOrigin _result;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutYOrigin ( enum AgEVOYOrigin pVal ) {
    HRESULT _hr = put_YOrigin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVODataDisplayElement::GetY ( ) {
    long _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutY ( long pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVODataDisplayElement::GetTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutTitle ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOFontSize IAgVODataDisplayElement::GetFontSize ( ) {
    enum AgEVOFontSize _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutFontSize ( enum AgEVOFontSize pVal ) {
    HRESULT _hr = put_FontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVODataDisplayElement::GetFontColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FontColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutFontColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_FontColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOFormat IAgVODataDisplayElement::GetFormat ( ) {
    enum AgEVOFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutFormat ( enum AgEVOFormat pVal ) {
    HRESULT _hr = put_Format(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVODataDisplayElement::GetUseBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutUseBackground ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseBackground(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVODataDisplayElement::GetTransparentBg ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransparentBg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutTransparentBg ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TransparentBg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVODataDisplayElement::GetBgWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BgWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutBgWidth ( long pVal ) {
    HRESULT _hr = put_BgWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVODataDisplayElement::GetBgHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_BgHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutBgHeight ( long pVal ) {
    HRESULT _hr = put_BgHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVODataDisplayElement::GetBgColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BgColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODataDisplayElement::PutBgColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BgColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVODataDisplayElement::GetAvailableWindows ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVODataDisplayElement::AddToWindow ( _bstr_t Title ) {
    HRESULT _hr = raw_AddToWindow(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVODataDisplayElement::RemoveFromWindow ( _bstr_t Title ) {
    HRESULT _hr = raw_RemoveFromWindow(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVODataDisplayElement::AddToAllWindows ( ) {
    HRESULT _hr = raw_AddToAllWindows();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVODataDisplayCollection wrapper method implementations
//

long IAgVODataDisplayCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVODataDisplayElementPtr IAgVODataDisplayCollection::GetItem ( long Index ) {
    struct IAgVODataDisplayElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayElementPtr(_result, false);
}

IUnknownPtr IAgVODataDisplayCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVODataDisplayCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVODataDisplayCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVODataDisplayElementPtr IAgVODataDisplayCollection::Add ( _bstr_t Name ) {
    struct IAgVODataDisplayElement * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayElementPtr(_result, false);
}

SAFEARRAY * IAgVODataDisplayCollection::GetAvailableData ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVODataDisplayCollection::IsPreDataRequired ( _bstr_t DataDisplayName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPreDataRequired(DataDisplayName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVODataDisplayElementPtr IAgVODataDisplayCollection::AddDataDisplayRequiringPreData ( _bstr_t Name, _bstr_t PreData ) {
    struct IAgVODataDisplayElement * _result = 0;
    HRESULT _hr = raw_AddDataDisplayRequiringPreData(Name, PreData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayElementPtr(_result, false);
}

//
// interface IAgIntervalCollection wrapper method implementations
//

long IAgIntervalCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IAgIntervalCollection::Add ( const _variant_t & Start, const _variant_t & Stop ) {
    long _result = 0;
    HRESULT _hr = raw_Add(Start, Stop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgIntervalCollection::RemoveIndex ( long Index ) {
    HRESULT _hr = raw_RemoveIndex(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgIntervalCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgIntervalCollection::RemoveInterval ( const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_RemoveInterval(Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgIntervalCollection::Deconflict ( ) {
    HRESULT _hr = raw_Deconflict();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgIntervalCollection::LoadIntervals ( _bstr_t Filename ) {
    HRESULT _hr = raw_LoadIntervals(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgIntervalCollection::ChangeInterval ( long Index, const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_ChangeInterval(Index, Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgIntervalCollection::GetInterval ( long Index, VARIANT * pStart, VARIANT * pStop ) {
    HRESULT _hr = raw_GetInterval(Index, pStart, pStop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgIntervalCollection::ToArray ( long Index, long Length ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ToArray(Index, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkAccess wrapper method implementations
//

IAgDataProviderCollectionPtr IAgStkAccess::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

HRESULT IAgStkAccess::RemoveAccess ( ) {
    HRESULT _hr = raw_RemoveAccess();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkAccess::ComputeAccess ( ) {
    HRESULT _hr = raw_ComputeAccess();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAccessTimeType IAgStkAccess::GetAccessTimePeriod ( ) {
    enum AgEAccessTimeType _result;
    HRESULT _hr = get_AccessTimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkAccess::PutAccessTimePeriod ( enum AgEAccessTimeType pVal ) {
    HRESULT _hr = put_AccessTimePeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkAccess::SpecifyAccessTimePeriod ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    HRESULT _hr = raw_SpecifyAccessTimePeriod(StartTime, StopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkAccessGraphicsPtr IAgStkAccess::GetGraphics ( ) {
    struct IAgStkAccessGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessGraphicsPtr(_result, false);
}

IAgStkAccessAdvancedPtr IAgStkAccess::GetAdvanced ( ) {
    struct IAgStkAccessAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessAdvancedPtr(_result, false);
}

IAgVODataDisplayCollectionPtr IAgStkAccess::GetDataDisplays ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

HRESULT IAgStkAccess::SpecifyAccessIntervals ( SAFEARRAY * * AccessIntervals ) {
    HRESULT _hr = raw_SpecifyAccessIntervals(AccessIntervals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgIntervalCollectionPtr IAgStkAccess::GetComputedAccessIntervalTimes ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_ComputedAccessIntervalTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

IAgAccessIntervalPtr IAgStkAccess::GetAccessTimePeriodData ( ) {
    struct IAgAccessInterval * _result = 0;
    HRESULT _hr = get_AccessTimePeriodData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessIntervalPtr(_result, false);
}

//
// interface IAgAccessConstraint wrapper method implementations
//

_bstr_t IAgAccessConstraint::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgAccessConstraint::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessConstraint::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgAccessConstraint::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessConstraint::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints IAgAccessConstraint::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgAccessConstraintCollection wrapper method implementations
//

long IAgAccessConstraintCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAccessConstraintPtr IAgAccessConstraintCollection::GetItem ( long Index ) {
    struct IAgAccessConstraint * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintPtr(_result, false);
}

IUnknownPtr IAgAccessConstraintCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgAccessConstraintPtr IAgAccessConstraintCollection::AddConstraint ( enum AgEAccessConstraints EConstraint ) {
    struct IAgAccessConstraint * _result = 0;
    HRESULT _hr = raw_AddConstraint(EConstraint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintPtr(_result, false);
}

HRESULT IAgAccessConstraintCollection::RemoveConstraint ( enum AgEAccessConstraints EConstraint ) {
    HRESULT _hr = raw_RemoveConstraint(EConstraint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgAccessConstraintPtr IAgAccessConstraintCollection::GetActiveConstraint ( enum AgEAccessConstraints EConstraint ) {
    struct IAgAccessConstraint * _result = 0;
    HRESULT _hr = raw_GetActiveConstraint(EConstraint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintPtr(_result, false);
}

VARIANT_BOOL IAgAccessConstraintCollection::IsConstraintActive ( enum AgEAccessConstraints EConstraint ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsConstraintActive(EConstraint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgAccessConstraintCollection::AvailableConstraints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_AvailableConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgAccessConstraintCollection::IsConstraintSupported ( enum AgEAccessConstraints EConstraint ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsConstraintSupported(EConstraint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgAccessConstraintCollection::IsNamedConstraintSupported ( _bstr_t CnstrName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNamedConstraintSupported(CnstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAccessConstraintPtr IAgAccessConstraintCollection::AddNamedConstraint ( _bstr_t CnstrName ) {
    struct IAgAccessConstraint * _result = 0;
    HRESULT _hr = raw_AddNamedConstraint(CnstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintPtr(_result, false);
}

HRESULT IAgAccessConstraintCollection::RemoveNamedConstraint ( _bstr_t CnstrName ) {
    HRESULT _hr = raw_RemoveNamedConstraint(CnstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgAccessConstraintCollection::IsNamedConstraintActive ( _bstr_t CnstrName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNamedConstraintActive(CnstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAccessConstraintPtr IAgAccessConstraintCollection::GetActiveNamedConstraint ( _bstr_t CnstrName ) {
    struct IAgAccessConstraint * _result = 0;
    HRESULT _hr = raw_GetActiveNamedConstraint(CnstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintPtr(_result, false);
}

//
// interface IAgOnePtAccessConstraint wrapper method implementations
//

enum AgEOnePtAccessStatus IAgOnePtAccessConstraint::GetStatus ( ) {
    enum AgEOnePtAccessStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEAccessConstraints IAgOnePtAccessConstraint::GetConstraint ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_Constraint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgOnePtAccessConstraint::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgOnePtAccessConstraint::GetObjectPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgOnePtAccessConstraintCollection wrapper method implementations
//

long IAgOnePtAccessConstraintCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgOnePtAccessConstraintPtr IAgOnePtAccessConstraintCollection::GetItem ( long Index ) {
    struct IAgOnePtAccessConstraint * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessConstraintPtr(_result, false);
}

IUnknownPtr IAgOnePtAccessConstraintCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgOnePtAccessResult wrapper method implementations
//

VARIANT_BOOL IAgOnePtAccessResult::GetAccessSatisfied ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AccessSatisfied(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IAgOnePtAccessResult::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IAgOnePtAccessConstraintCollectionPtr IAgOnePtAccessResult::GetConstraints ( ) {
    struct IAgOnePtAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessConstraintCollectionPtr(_result, false);
}

//
// interface IAgOnePtAccessResultCollection wrapper method implementations
//

long IAgOnePtAccessResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgOnePtAccessResultPtr IAgOnePtAccessResultCollection::GetItem ( long Index ) {
    struct IAgOnePtAccessResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessResultPtr(_result, false);
}

IUnknownPtr IAgOnePtAccessResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgOnePtAccess wrapper method implementations
//

IAgOnePtAccessResultCollectionPtr IAgOnePtAccess::Compute ( ) {
    struct IAgOnePtAccessResultCollection * _result = 0;
    HRESULT _hr = raw_Compute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessResultCollectionPtr(_result, false);
}

HRESULT IAgOnePtAccess::Remove ( ) {
    HRESULT _hr = raw_Remove();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEOnePtAccessSummary IAgOnePtAccess::GetSummaryOption ( ) {
    enum AgEOnePtAccessSummary _result;
    HRESULT _hr = get_SummaryOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgOnePtAccess::PutSummaryOption ( enum AgEOnePtAccessSummary pVal ) {
    HRESULT _hr = put_SummaryOption(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgOnePtAccess::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgOnePtAccess::PutStartTime ( const _variant_t & pStartTime ) {
    HRESULT _hr = put_StartTime(pStartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgOnePtAccess::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgOnePtAccess::PutStopTime ( const _variant_t & pStopTime ) {
    HRESULT _hr = put_StopTime(pStopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgOnePtAccess::GetStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgOnePtAccess::PutStepSize ( double pStepSize ) {
    HRESULT _hr = put_StepSize(pStepSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgOnePtAccess::GetOutputToFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OutputToFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgOnePtAccess::PutOutputToFile ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_OutputToFile(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgOnePtAccess::GetOutputFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutputFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgOnePtAccess::PutOutputFile ( _bstr_t pRetVal ) {
    HRESULT _hr = put_OutputFile(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgLifetimeInformation wrapper method implementations
//

VARIANT_BOOL IAgLifetimeInformation::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgAnimation wrapper method implementations
//

HRESULT IAgAnimation::PlayForward ( ) {
    HRESULT _hr = raw_PlayForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAnimation::PlayBackward ( ) {
    HRESULT _hr = raw_PlayBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAnimation::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAnimation::Rewind ( ) {
    HRESULT _hr = raw_Rewind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAnimation::StepForward ( ) {
    HRESULT _hr = raw_StepForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAnimation::StepBackward ( ) {
    HRESULT _hr = raw_StepBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAnimation::Faster ( ) {
    HRESULT _hr = raw_Faster();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAnimation::Slower ( ) {
    HRESULT _hr = raw_Slower();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAnimationModes IAgAnimation::GetMode ( ) {
    enum AgEAnimationModes _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAnimation::PutMode ( enum AgEAnimationModes pRetVal ) {
    HRESULT _hr = put_Mode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgAnimation::GetCurrentTime ( ) {
    double _result = 0;
    HRESULT _hr = get_CurrentTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAnimation::PutCurrentTime ( double pVal ) {
    HRESULT _hr = put_CurrentTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgAnimation::GetStep ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEAnimationOptions IAgAnimation::GetAnimationOptions ( ) {
    enum AgEAnimationOptions _result;
    HRESULT _hr = get_AnimationOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAnimation::PutAnimationOptions ( enum AgEAnimationOptions pRetVal ) {
    HRESULT _hr = put_AnimationOptions(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgAnimation::GetHighSpeed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HighSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAnimation::PutHighSpeed ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_HighSpeed(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgLevelAttribute wrapper method implementations
//

_variant_t _IAgLevelAttribute::GetLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Level(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgLevelAttribute::PutLevel ( const _variant_t & pLevel ) {
    HRESULT _hr = put_Level(pLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgLevelAttribute::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLevelAttribute::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgLevelAttribute::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLevelAttribute::PutLineStyle ( enum STKUtil::AgELineStyle pLineStyle ) {
    HRESULT _hr = put_LineStyle(pLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgLevelAttribute::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLevelAttribute::PutLineWidth ( enum AgELineWidth pLineWidth ) {
    HRESULT _hr = put_LineWidth(pLineWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLevelAttribute::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLevelAttribute::PutLabelVisible ( VARIANT_BOOL pShowLable ) {
    HRESULT _hr = put_LabelVisible(pShowLable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLevelAttribute::GetUserTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserTextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLevelAttribute::PutUserTextVisible ( VARIANT_BOOL pShowUserText ) {
    HRESULT _hr = put_UserTextVisible(pShowUserText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgLevelAttribute::GetLabelAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLevelAttribute::PutLabelAngle ( double pLevel ) {
    HRESULT _hr = put_LabelAngle(pLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgLevelAttribute::GetUserText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLevelAttribute::PutUserText ( _bstr_t pLevel ) {
    HRESULT _hr = put_UserText(pLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgLevelAttribute wrapper method implementations
//

_variant_t IAgLevelAttribute::GetLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Level(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgLevelAttribute::PutLevel ( const _variant_t & pLevel ) {
    HRESULT _hr = put_Level(pLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgLevelAttribute::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLevelAttribute::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgLevelAttribute::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLevelAttribute::PutLineStyle ( enum STKUtil::AgELineStyle pLineStyle ) {
    HRESULT _hr = put_LineStyle(pLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgLevelAttribute::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLevelAttribute::PutLineWidth ( enum AgELineWidth pLineWidth ) {
    HRESULT _hr = put_LineWidth(pLineWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgLevelAttribute::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLevelAttribute::PutLabelVisible ( VARIANT_BOOL pShowLabel ) {
    HRESULT _hr = put_LabelVisible(pShowLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgLevelAttribute::GetUserTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserTextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLevelAttribute::PutUserTextVisible ( VARIANT_BOOL pShowUserText ) {
    HRESULT _hr = put_UserTextVisible(pShowUserText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgLevelAttribute::GetLabelAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLevelAttribute::PutLabelAngle ( double pLevel ) {
    HRESULT _hr = put_LabelAngle(pLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgLevelAttribute::GetUserText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgLevelAttribute::PutUserText ( _bstr_t pLevel ) {
    HRESULT _hr = put_UserText(pLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgLevelAttributeCollection wrapper method implementations
//

long IAgLevelAttributeCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgLevelAttributePtr IAgLevelAttributeCollection::GetItem ( long Index ) {
    struct IAgLevelAttribute * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLevelAttributePtr(_result, false);
}

IUnknownPtr IAgLevelAttributeCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgLevelAttributeCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgLevelAttributeCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgLevelAttributePtr IAgLevelAttributeCollection::AddLevel ( const _variant_t & Level ) {
    struct IAgLevelAttribute * _result = 0;
    HRESULT _hr = raw_AddLevel(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLevelAttributePtr(_result, false);
}

HRESULT IAgLevelAttributeCollection::AddLevelRange ( const _variant_t & Start, const _variant_t & Stop, const _variant_t & Step ) {
    HRESULT _hr = raw_AddLevelRange(Start, Stop, Step);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgBasicAzElMask wrapper method implementations
//

VARIANT_BOOL _IAgBasicAzElMask::GetAltVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutAltVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AltVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgBasicAzElMask::GetNumberOfAltSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfAltSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutNumberOfAltSteps ( long pNum ) {
    HRESULT _hr = put_NumberOfAltSteps(pNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgBasicAzElMask::GetRangeVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RangeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutRangeVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RangeVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgBasicAzElMask::GetNumberOfRangeSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfRangeSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutNumberOfRangeSteps ( long pNum ) {
    HRESULT _hr = put_NumberOfRangeSteps(pNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgBasicAzElMask::GetDisplayRangeMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayRangeMinimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutDisplayRangeMinimum ( double pMin ) {
    HRESULT _hr = put_DisplayRangeMinimum(pMin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgBasicAzElMask::GetDisplayRangeMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayRangeMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutDisplayRangeMaximum ( double pMax ) {
    HRESULT _hr = put_DisplayRangeMaximum(pMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgBasicAzElMask::GetDisplayAltMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayAltMinimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutDisplayAltMinimum ( double pMin ) {
    HRESULT _hr = put_DisplayAltMinimum(pMin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgBasicAzElMask::GetDisplayAltMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayAltMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutDisplayAltMaximum ( double pMax ) {
    HRESULT _hr = put_DisplayAltMaximum(pMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgBasicAzElMask::GetAltColorVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltColorVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutAltColorVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AltColorVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgBasicAzElMask::GetAltColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_AltColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutAltColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_AltColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgBasicAzElMask::GetRangeColorVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RangeColorVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutRangeColorVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RangeColorVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgBasicAzElMask::GetRangeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_RangeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgBasicAzElMask::PutRangeColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_RangeColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgBasicAzElMask wrapper method implementations
//

VARIANT_BOOL IAgBasicAzElMask::GetAltVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutAltVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AltVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgBasicAzElMask::GetNumberOfAltSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfAltSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutNumberOfAltSteps ( long pNum ) {
    HRESULT _hr = put_NumberOfAltSteps(pNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgBasicAzElMask::GetRangeVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RangeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutRangeVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RangeVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgBasicAzElMask::GetNumberOfRangeSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfRangeSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutNumberOfRangeSteps ( long pNum ) {
    HRESULT _hr = put_NumberOfRangeSteps(pNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgBasicAzElMask::GetDisplayRangeMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayRangeMinimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutDisplayRangeMinimum ( double pMin ) {
    HRESULT _hr = put_DisplayRangeMinimum(pMin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgBasicAzElMask::GetDisplayRangeMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayRangeMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutDisplayRangeMaximum ( double pMax ) {
    HRESULT _hr = put_DisplayRangeMaximum(pMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgBasicAzElMask::GetDisplayAltMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayAltMinimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutDisplayAltMinimum ( double pMin ) {
    HRESULT _hr = put_DisplayAltMinimum(pMin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgBasicAzElMask::GetDisplayAltMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayAltMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutDisplayAltMaximum ( double pMax ) {
    HRESULT _hr = put_DisplayAltMaximum(pMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgBasicAzElMask::GetAltColorVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltColorVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutAltColorVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AltColorVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgBasicAzElMask::GetAltColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_AltColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutAltColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_AltColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgBasicAzElMask::GetRangeColorVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RangeColorVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutRangeColorVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RangeColorVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgBasicAzElMask::GetRangeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_RangeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgBasicAzElMask::PutRangeColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_RangeColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgGfxRangeContours wrapper method implementations
//

VARIANT_BOOL IAgGfxRangeContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgGfxRangeContours::PutIsVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_IsVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgGfxRangeContours::GetIsFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgGfxRangeContours::PutIsFillVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_IsFillVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgEFillStyle IAgGfxRangeContours::GetFillStyle ( ) {
    enum STKUtil::AgEFillStyle _result;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgGfxRangeContours::PutFillStyle ( enum STKUtil::AgEFillStyle pType ) {
    HRESULT _hr = put_FillStyle(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLevelAttributeCollectionPtr IAgGfxRangeContours::GetLevelAttributes ( ) {
    struct IAgLevelAttributeCollection * _result = 0;
    HRESULT _hr = get_LevelAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLevelAttributeCollectionPtr(_result, false);
}

long IAgGfxRangeContours::GetNumOfDecimalDigits ( ) {
    long _result = 0;
    HRESULT _hr = get_NumOfDecimalDigits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgGfxRangeContours::PutNumOfDecimalDigits ( long pVal ) {
    HRESULT _hr = put_NumOfDecimalDigits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgGfxRangeContours::GetLabelUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgGfxRangeContours::PutLabelUnit ( _bstr_t pLabelUnit ) {
    HRESULT _hr = put_LabelUnit(pLabelUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgGfxRangeContours::GetAvailableLabelUnits ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableLabelUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgLabelNote wrapper method implementations
//

_bstr_t IAgLabelNote::GetNote ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Note(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgLabelNote::PutNote ( _bstr_t pVal ) {
    HRESULT _hr = put_Note(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgENoteShowType IAgLabelNote::GetNoteVisible ( ) {
    enum AgENoteShowType _result;
    HRESULT _hr = get_NoteVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLabelNote::PutNoteVisible ( enum AgENoteShowType pVal ) {
    HRESULT _hr = put_NoteVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgLabelNote::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLabelNote::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgIntervalCollectionPtr IAgLabelNote::GetIntervals ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

//
// interface IAgLabelNoteCollection wrapper method implementations
//

long IAgLabelNoteCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgLabelNotePtr IAgLabelNoteCollection::Add ( _bstr_t Msg ) {
    struct IAgLabelNote * _result = 0;
    HRESULT _hr = raw_Add(Msg, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNotePtr(_result, false);
}

HRESULT IAgLabelNoteCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgLabelNotePtr IAgLabelNoteCollection::GetItem ( long Index ) {
    struct IAgLabelNote * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNotePtr(_result, false);
}

IUnknownPtr IAgLabelNoteCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgFaGraphics wrapper method implementations
//

VARIANT_BOOL _IAgFaGraphics::GetInheritFromScenario ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFromScenario(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFaGraphics::PutInheritFromScenario ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_InheritFromScenario(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgFaGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFaGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgFaGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFaGraphics::PutMarkerStyle ( _bstr_t pMarkerStyle ) {
    HRESULT _hr = put_MarkerStyle(pMarkerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgFaGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFaGraphics::PutLabelVisible ( VARIANT_BOOL pShowLabel ) {
    HRESULT _hr = put_LabelVisible(pShowLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgBasicAzElMaskPtr _IAgFaGraphics::GetAzElMask ( ) {
    struct IAgBasicAzElMask * _result = 0;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgBasicAzElMaskPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgFaGraphics::GetContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_Contours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

VARIANT_BOOL _IAgFaGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFaGraphics::PutUseInstNameLabel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseInstNameLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgFaGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFaGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgFaGraphics::GetMarkerColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_MarkerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFaGraphics::PutMarkerColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_MarkerColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgFaGraphics::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFaGraphics::PutLabelColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_LabelColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr _IAgFaGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

//
// interface IAgFaGraphics wrapper method implementations
//

VARIANT_BOOL IAgFaGraphics::GetInheritFromScenario ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFromScenario(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFaGraphics::PutInheritFromScenario ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_InheritFromScenario(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgFaGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFaGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgFaGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgFaGraphics::PutMarkerStyle ( _bstr_t pMarkerStyle ) {
    HRESULT _hr = put_MarkerStyle(pMarkerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgFaGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFaGraphics::PutLabelVisible ( VARIANT_BOOL pShowLabel ) {
    HRESULT _hr = put_LabelVisible(pShowLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgBasicAzElMaskPtr IAgFaGraphics::GetAzElMask ( ) {
    struct IAgBasicAzElMask * _result = 0;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgBasicAzElMaskPtr(_result, false);
}

IAgGfxRangeContoursPtr IAgFaGraphics::GetContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_Contours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

VARIANT_BOOL IAgFaGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFaGraphics::PutUseInstNameLabel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseInstNameLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgFaGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgFaGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr IAgFaGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

OLE_COLOR IAgFaGraphics::GetMarkerColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_MarkerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFaGraphics::PutMarkerColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_MarkerColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgFaGraphics::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFaGraphics::PutLabelColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_LabelColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgGfxRangeContours wrapper method implementations
//

VARIANT_BOOL _IAgGfxRangeContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgGfxRangeContours::PutIsVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_IsVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgGfxRangeContours::GetIsFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgGfxRangeContours::PutIsFillVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_IsFillVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgEFillStyle _IAgGfxRangeContours::GetFillStyle ( ) {
    enum STKUtil::AgEFillStyle _result;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgGfxRangeContours::PutFillStyle ( enum STKUtil::AgEFillStyle pType ) {
    HRESULT _hr = put_FillStyle(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLevelAttributeCollectionPtr _IAgGfxRangeContours::GetLevelAttributes ( ) {
    struct IAgLevelAttributeCollection * _result = 0;
    HRESULT _hr = get_LevelAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLevelAttributeCollectionPtr(_result, false);
}

long _IAgGfxRangeContours::GetNumOfDecimalDigits ( ) {
    long _result = 0;
    HRESULT _hr = get_NumOfDecimalDigits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgGfxRangeContours::PutNumOfDecimalDigits ( long pVal ) {
    HRESULT _hr = put_NumOfDecimalDigits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgGfxRangeContours::GetLabelUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgGfxRangeContours::PutLabelUnit ( _bstr_t pLabelUnit ) {
    HRESULT _hr = put_LabelUnit(pLabelUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgGfxRangeContours::GetAvailableLabelUnits ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableLabelUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgAccessConstraint wrapper method implementations
//

_bstr_t _IAgAccessConstraint::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessConstraint::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessConstraint::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessConstraint::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessConstraint::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessConstraint::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessConstraint::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessConstraint::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessConstraint::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessConstraint::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessConstraint2 wrapper method implementations
//

double IAgAccessConstraint2::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessConstraint2::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgAccessConstraint2::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessConstraint2::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOBorderWall wrapper method implementations
//

VARIANT_BOOL IAgVOBorderWall::GetUseBorderWall ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseBorderWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOBorderWall::PutUseBorderWall ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseBorderWall(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEBorderWallUpperLowerEdgeAltRef IAgVOBorderWall::GetUpperEdgeAltRef ( ) {
    enum AgEBorderWallUpperLowerEdgeAltRef _result;
    HRESULT _hr = get_UpperEdgeAltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOBorderWall::PutUpperEdgeAltRef ( enum AgEBorderWallUpperLowerEdgeAltRef pVal ) {
    HRESULT _hr = put_UpperEdgeAltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOBorderWall::GetUpperEdgeHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_UpperEdgeHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOBorderWall::PutUpperEdgeHeight ( double pVal ) {
    HRESULT _hr = put_UpperEdgeHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEBorderWallUpperLowerEdgeAltRef IAgVOBorderWall::GetLowerEdgeAltRef ( ) {
    enum AgEBorderWallUpperLowerEdgeAltRef _result;
    HRESULT _hr = get_LowerEdgeAltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOBorderWall::PutLowerEdgeAltRef ( enum AgEBorderWallUpperLowerEdgeAltRef pVal ) {
    HRESULT _hr = put_LowerEdgeAltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOBorderWall::GetLowerEdgeHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_LowerEdgeHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOBorderWall::PutLowerEdgeHeight ( double pVal ) {
    HRESULT _hr = put_LowerEdgeHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOBorderWall::GetUseWallTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseWallTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOBorderWall::PutUseWallTranslucency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseWallTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOBorderWall::GetWallTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_WallTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOBorderWall::PutWallTranslucency ( double pVal ) {
    HRESULT _hr = put_WallTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOBorderWall::GetUseLineTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOBorderWall::PutUseLineTranslucency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLineTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOBorderWall::GetLineTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_LineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOBorderWall::PutLineTranslucency ( double pVal ) {
    HRESULT _hr = put_LineTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOBorderWall::IsAltRefTypeSupported ( enum AgEBorderWallUpperLowerEdgeAltRef RefType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAltRefTypeSupported(RefType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVOLabelSwapDistance wrapper method implementations
//

double IAgVOLabelSwapDistance::GetDistanceValue ( ) {
    double _result = 0;
    HRESULT _hr = get_DistanceValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOLabelSwapDistance::PutDistanceValue ( double pVal ) {
    HRESULT _hr = put_DistanceValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgVOLabelSwapDistance::SetDistanceLevel ( enum AgEVOLabelSwapDistance Val ) {
    HRESULT _hr = raw_SetDistanceLevel(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEVOLabelSwapDistance IAgVOLabelSwapDistance::GetDistanceLevel ( ) {
    enum AgEVOLabelSwapDistance _result;
    HRESULT _hr = get_DistanceLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVORangeContours wrapper method implementations
//

VARIANT_BOOL _IAgVORangeContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORangeContours::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORangeContours::GetTranslucentLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TranslucentLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORangeContours::PutTranslucentLines ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TranslucentLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVORangeContours::GetPercentTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORangeContours::PutPercentTranslucency ( double pVal ) {
    HRESULT _hr = put_PercentTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOBorderWallPtr _IAgVORangeContours::GetBorderWall ( ) {
    struct IAgVOBorderWall * _result = 0;
    HRESULT _hr = get_BorderWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOBorderWallPtr(_result, false);
}

IAgVOLabelSwapDistancePtr _IAgVORangeContours::GetLabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_LabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface IAgVORangeContours wrapper method implementations
//

VARIANT_BOOL IAgVORangeContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORangeContours::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORangeContours::GetTranslucentLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TranslucentLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORangeContours::PutTranslucentLines ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TranslucentLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVORangeContours::GetPercentTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORangeContours::PutPercentTranslucency ( double pVal ) {
    HRESULT _hr = put_PercentTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOBorderWallPtr IAgVORangeContours::GetBorderWall ( ) {
    struct IAgVOBorderWall * _result = 0;
    HRESULT _hr = get_BorderWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOBorderWallPtr(_result, false);
}

IAgVOLabelSwapDistancePtr IAgVORangeContours::GetLabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_LabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface _IAgVOOffsetRotate wrapper method implementations
//

VARIANT_BOOL _IAgVOOffsetRotate::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetRotate::PutEnable ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_Enable(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVOOffsetRotate::GetX ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVOOffsetRotate::PutX ( const _variant_t & pX ) {
    HRESULT _hr = put_X(pX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVOOffsetRotate::GetY ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVOOffsetRotate::PutY ( const _variant_t & pY ) {
    HRESULT _hr = put_Y(pY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVOOffsetRotate::GetZ ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVOOffsetRotate::PutZ ( const _variant_t & pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOOffsetRotate wrapper method implementations
//

VARIANT_BOOL IAgVOOffsetRotate::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetRotate::PutEnable ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_Enable(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVOOffsetRotate::GetX ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVOOffsetRotate::PutX ( const _variant_t & pX ) {
    HRESULT _hr = put_X(pX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVOOffsetRotate::GetY ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVOOffsetRotate::PutY ( const _variant_t & pY ) {
    HRESULT _hr = put_Y(pY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVOOffsetRotate::GetZ ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVOOffsetRotate::PutZ ( const _variant_t & pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVOOffsetTrans wrapper method implementations
//

VARIANT_BOOL _IAgVOOffsetTrans::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetTrans::PutEnable ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_Enable(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOOffsetTrans::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetTrans::PutX ( double pX ) {
    HRESULT _hr = put_X(pX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOOffsetTrans::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetTrans::PutY ( double pY ) {
    HRESULT _hr = put_Y(pY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOOffsetTrans::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetTrans::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOOffsetTrans wrapper method implementations
//

VARIANT_BOOL IAgVOOffsetTrans::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetTrans::PutEnable ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_Enable(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOOffsetTrans::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetTrans::PutX ( double pX ) {
    HRESULT _hr = put_X(pX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOOffsetTrans::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetTrans::PutY ( double pY ) {
    HRESULT _hr = put_Y(pY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOOffsetTrans::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetTrans::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVOOffsetAttach wrapper method implementations
//

VARIANT_BOOL _IAgVOOffsetAttach::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetAttach::PutEnable ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_Enable(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVOOffsetAttach::GetAttachPtName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachPtName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVOOffsetAttach::PutAttachPtName ( _bstr_t pVal ) {
    HRESULT _hr = put_AttachPtName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVOOffsetAttach::GetAvailableAttachPoints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAttachPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVOOffsetAttach wrapper method implementations
//

VARIANT_BOOL IAgVOOffsetAttach::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetAttach::PutEnable ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_Enable(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVOOffsetAttach::GetAttachPtName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachPtName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVOOffsetAttach::PutAttachPtName ( _bstr_t pVal ) {
    HRESULT _hr = put_AttachPtName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVOOffsetAttach::GetAvailableAttachPoints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAttachPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVOOffsetLabel wrapper method implementations
//

VARIANT_BOOL _IAgVOOffsetLabel::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetLabel::PutEnable ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_Enable(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOOffsetLabel::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetLabel::PutX ( double pX ) {
    HRESULT _hr = put_X(pX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOOffsetLabel::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetLabel::PutY ( double pY ) {
    HRESULT _hr = put_Y(pY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOOffsetLabel::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetLabel::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEOffsetFrameType _IAgVOOffsetLabel::GetOffsetFrame ( ) {
    enum AgEOffsetFrameType _result;
    HRESULT _hr = get_OffsetFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOOffsetLabel::PutOffsetFrame ( enum AgEOffsetFrameType pType ) {
    HRESULT _hr = put_OffsetFrame(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOOffsetLabel wrapper method implementations
//

VARIANT_BOOL IAgVOOffsetLabel::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetLabel::PutEnable ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_Enable(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOOffsetLabel::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetLabel::PutX ( double pX ) {
    HRESULT _hr = put_X(pX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOOffsetLabel::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetLabel::PutY ( double pY ) {
    HRESULT _hr = put_Y(pY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOOffsetLabel::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetLabel::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEOffsetFrameType IAgVOOffsetLabel::GetOffsetFrame ( ) {
    enum AgEOffsetFrameType _result;
    HRESULT _hr = get_OffsetFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOOffsetLabel::PutOffsetFrame ( enum AgEOffsetFrameType pType ) {
    HRESULT _hr = put_OffsetFrame(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVOOffset wrapper method implementations
//

IAgVOOffsetRotatePtr _IAgVOOffset::GetRotational ( ) {
    struct IAgVOOffsetRotate * _result = 0;
    HRESULT _hr = get_Rotational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetRotatePtr(_result, false);
}

IAgVOOffsetTransPtr _IAgVOOffset::GetTranslational ( ) {
    struct IAgVOOffsetTrans * _result = 0;
    HRESULT _hr = get_Translational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetTransPtr(_result, false);
}

IAgVOOffsetLabelPtr _IAgVOOffset::GetLabel ( ) {
    struct IAgVOOffsetLabel * _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetLabelPtr(_result, false);
}

IAgVOOffsetAttachPtr _IAgVOOffset::GetAttachPoint ( ) {
    struct IAgVOOffsetAttach * _result = 0;
    HRESULT _hr = get_AttachPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetAttachPtr(_result, false);
}

//
// interface IAgVOOffset wrapper method implementations
//

IAgVOOffsetRotatePtr IAgVOOffset::GetRotational ( ) {
    struct IAgVOOffsetRotate * _result = 0;
    HRESULT _hr = get_Rotational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetRotatePtr(_result, false);
}

IAgVOOffsetTransPtr IAgVOOffset::GetTranslational ( ) {
    struct IAgVOOffsetTrans * _result = 0;
    HRESULT _hr = get_Translational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetTransPtr(_result, false);
}

IAgVOOffsetLabelPtr IAgVOOffset::GetLabel ( ) {
    struct IAgVOOffsetLabel * _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetLabelPtr(_result, false);
}

IAgVOOffsetAttachPtr IAgVOOffset::GetAttachPoint ( ) {
    struct IAgVOOffsetAttach * _result = 0;
    HRESULT _hr = get_AttachPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetAttachPtr(_result, false);
}

//
// interface _IAgVOMarkerShape wrapper method implementations
//

enum AgE3dMarkerShape _IAgVOMarkerShape::GetStyle ( ) {
    enum AgE3dMarkerShape _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarkerShape::PutStyle ( enum AgE3dMarkerShape pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOMarkerShape wrapper method implementations
//

enum AgE3dMarkerShape IAgVOMarkerShape::GetStyle ( ) {
    enum AgE3dMarkerShape _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarkerShape::PutStyle ( enum AgE3dMarkerShape pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVOMarkerFile wrapper method implementations
//

_bstr_t _IAgVOMarkerFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVOMarkerFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOMarkerFile::GetIsTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTransparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarkerFile::PutIsTransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTransparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOMarkerFile::GetUseSoftTransparency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSoftTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarkerFile::PutUseSoftTransparency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSoftTransparency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOMarkerFile wrapper method implementations
//

_bstr_t IAgVOMarkerFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVOMarkerFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOMarkerFile::GetIsTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTransparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarkerFile::PutIsTransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTransparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOMarkerFile::GetUseSoftTransparency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSoftTransparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarkerFile::PutUseSoftTransparency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSoftTransparency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVOMarker wrapper method implementations
//

long _IAgVOMarker::GetPixelSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarker::PutPixelSize ( long pSize ) {
    HRESULT _hr = put_PixelSize(pSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOMarker::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarker::PutVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_Visible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMarkerType _IAgVOMarker::GetMarkerType ( ) {
    enum AgEMarkerType _result;
    HRESULT _hr = get_MarkerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarker::PutMarkerType ( enum AgEMarkerType pMarkerType ) {
    HRESULT _hr = put_MarkerType(pMarkerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOMarker::GetEnableRotate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarker::PutEnableRotate ( VARIANT_BOOL pRotate ) {
    HRESULT _hr = put_EnableRotate(pRotate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVOMarker::GetAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVOMarker::PutAngle ( const _variant_t & pAngle ) {
    HRESULT _hr = put_Angle(pAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOriginType _IAgVOMarker::GetXOrigin ( ) {
    enum AgEVOMarkerOriginType _result;
    HRESULT _hr = get_XOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarker::PutXOrigin ( enum AgEVOMarkerOriginType pXOrigin ) {
    HRESULT _hr = put_XOrigin(pXOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOriginType _IAgVOMarker::GetYOrigin ( ) {
    enum AgEVOMarkerOriginType _result;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarker::PutYOrigin ( enum AgEVOMarkerOriginType pYOrigin ) {
    HRESULT _hr = put_YOrigin(pYOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOMarkerDataPtr _IAgVOMarker::GetMarkerData ( ) {
    struct IAgVOMarkerData * _result = 0;
    HRESULT _hr = get_MarkerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerDataPtr(_result, false);
}

HRESULT _IAgVOMarker::SetMarkerImageFile ( _bstr_t ImageFile ) {
    HRESULT _hr = raw_SetMarkerImageFile(ImageFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEVOMarkerOrientation _IAgVOMarker::GetOrientationMode ( ) {
    enum AgEVOMarkerOrientation _result;
    HRESULT _hr = get_OrientationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOMarker::PutOrientationMode ( enum AgEVOMarkerOrientation pRetVal ) {
    HRESULT _hr = put_OrientationMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOMarker wrapper method implementations
//

long IAgVOMarker::GetPixelSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarker::PutPixelSize ( long pSize ) {
    HRESULT _hr = put_PixelSize(pSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOMarker::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarker::PutVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_Visible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMarkerType IAgVOMarker::GetMarkerType ( ) {
    enum AgEMarkerType _result;
    HRESULT _hr = get_MarkerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarker::PutMarkerType ( enum AgEMarkerType pMarkerType ) {
    HRESULT _hr = put_MarkerType(pMarkerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOMarker::GetEnableRotate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarker::PutEnableRotate ( VARIANT_BOOL pRotate ) {
    HRESULT _hr = put_EnableRotate(pRotate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVOMarker::GetAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVOMarker::PutAngle ( const _variant_t & pAngle ) {
    HRESULT _hr = put_Angle(pAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOriginType IAgVOMarker::GetXOrigin ( ) {
    enum AgEVOMarkerOriginType _result;
    HRESULT _hr = get_XOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarker::PutXOrigin ( enum AgEVOMarkerOriginType pXOrigin ) {
    HRESULT _hr = put_XOrigin(pXOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOriginType IAgVOMarker::GetYOrigin ( ) {
    enum AgEVOMarkerOriginType _result;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarker::PutYOrigin ( enum AgEVOMarkerOriginType pYOrigin ) {
    HRESULT _hr = put_YOrigin(pYOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOMarkerDataPtr IAgVOMarker::GetMarkerData ( ) {
    struct IAgVOMarkerData * _result = 0;
    HRESULT _hr = get_MarkerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerDataPtr(_result, false);
}

HRESULT IAgVOMarker::SetMarkerImageFile ( _bstr_t ImageFile ) {
    HRESULT _hr = raw_SetMarkerImageFile(ImageFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEVOMarkerOrientation IAgVOMarker::GetOrientationMode ( ) {
    enum AgEVOMarkerOrientation _result;
    HRESULT _hr = get_OrientationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOMarker::PutOrientationMode ( enum AgEVOMarkerOrientation pRetVal ) {
    HRESULT _hr = put_OrientationMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVODetailThreshold wrapper method implementations
//

VARIANT_BOOL _IAgVODetailThreshold::GetEnableDetailThreshold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDetailThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODetailThreshold::PutEnableDetailThreshold ( VARIANT_BOOL pUseDetail ) {
    HRESULT _hr = put_EnableDetailThreshold(pUseDetail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVODetailThreshold::GetAll ( ) {
    double _result = 0;
    HRESULT _hr = get_All(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODetailThreshold::PutAll ( double pAll ) {
    HRESULT _hr = put_All(pAll);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVODetailThreshold::GetModelLabel ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODetailThreshold::PutModelLabel ( double pModelLabel ) {
    HRESULT _hr = put_ModelLabel(pModelLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVODetailThreshold::GetMarkerLabel ( ) {
    double _result = 0;
    HRESULT _hr = get_MarkerLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODetailThreshold::PutMarkerLabel ( double pMarkerLabel ) {
    HRESULT _hr = put_MarkerLabel(pMarkerLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVODetailThreshold::GetMarker ( ) {
    double _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODetailThreshold::PutMarker ( double pMarker ) {
    HRESULT _hr = put_Marker(pMarker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVODetailThreshold::GetPoint ( ) {
    double _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODetailThreshold::PutPoint ( double pPoint ) {
    HRESULT _hr = put_Point(pPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVODetailThreshold wrapper method implementations
//

VARIANT_BOOL IAgVODetailThreshold::GetEnableDetailThreshold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDetailThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODetailThreshold::PutEnableDetailThreshold ( VARIANT_BOOL pUseDetail ) {
    HRESULT _hr = put_EnableDetailThreshold(pUseDetail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVODetailThreshold::GetAll ( ) {
    double _result = 0;
    HRESULT _hr = get_All(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODetailThreshold::PutAll ( double pAll ) {
    HRESULT _hr = put_All(pAll);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVODetailThreshold::GetModelLabel ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODetailThreshold::PutModelLabel ( double pModelLabel ) {
    HRESULT _hr = put_ModelLabel(pModelLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVODetailThreshold::GetMarkerLabel ( ) {
    double _result = 0;
    HRESULT _hr = get_MarkerLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODetailThreshold::PutMarkerLabel ( double pMarkerLabel ) {
    HRESULT _hr = put_MarkerLabel(pMarkerLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVODetailThreshold::GetMarker ( ) {
    double _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODetailThreshold::PutMarker ( double pMarker ) {
    HRESULT _hr = put_Marker(pMarker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVODetailThreshold::GetPoint ( ) {
    double _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVODetailThreshold::PutPoint ( double pPoint ) {
    HRESULT _hr = put_Point(pPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVOModelItem wrapper method implementations
//

_variant_t _IAgVOModelItem::GetSwitchTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SwitchTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVOModelItem::PutSwitchTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_SwitchTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVOModelItem::GetModelFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModelFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVOModelItem::PutModelFile ( _bstr_t pVal ) {
    HRESULT _hr = put_ModelFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOModelItem wrapper method implementations
//

_variant_t IAgVOModelItem::GetSwitchTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SwitchTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVOModelItem::PutSwitchTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_SwitchTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVOModelItem::GetModelFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModelFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVOModelItem::PutModelFile ( _bstr_t pVal ) {
    HRESULT _hr = put_ModelFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOModelCollection wrapper method implementations
//

long IAgVOModelCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVOModelItemPtr IAgVOModelCollection::Add ( const _variant_t & Time, _bstr_t Filename ) {
    struct IAgVOModelItem * _result = 0;
    HRESULT _hr = raw_Add(Time, Filename, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelItemPtr(_result, false);
}

HRESULT IAgVOModelCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVOModelItemPtr IAgVOModelCollection::GetItem ( long Index ) {
    struct IAgVOModelItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelItemPtr(_result, false);
}

IUnknownPtr IAgVOModelCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgLabelNote wrapper method implementations
//

_bstr_t _IAgLabelNote::GetNote ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Note(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLabelNote::PutNote ( _bstr_t pVal ) {
    HRESULT _hr = put_Note(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgENoteShowType _IAgLabelNote::GetNoteVisible ( ) {
    enum AgENoteShowType _result;
    HRESULT _hr = get_NoteVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLabelNote::PutNoteVisible ( enum AgENoteShowType pVal ) {
    HRESULT _hr = put_NoteVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLabelNote::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLabelNote::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgIntervalCollectionPtr _IAgLabelNote::GetIntervals ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

//
// interface IAgVORefCrdn wrapper method implementations
//

enum AgEGeometricElemType IAgVORefCrdn::GetTypeID ( ) {
    enum AgEGeometricElemType _result;
    HRESULT _hr = get_TypeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgVORefCrdn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgVORefCrdn::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdn::PutVisible ( VARIANT_BOOL pVisible ) {
    HRESULT _hr = put_Visible(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVORefCrdn::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdn::PutColor ( OLE_COLOR pVisible ) {
    HRESULT _hr = put_Color(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdn::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdn::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVORefCrdnCollection wrapper method implementations
//

long IAgVORefCrdnCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVORefCrdnPtr IAgVORefCrdnCollection::GetItem ( long Index ) {
    struct IAgVORefCrdn * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORefCrdnPtr(_result, false);
}

IUnknownPtr IAgVORefCrdnCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgVORefCrdnPtr IAgVORefCrdnCollection::Add ( enum AgEGeometricElemType Type, _bstr_t Name ) {
    struct IAgVORefCrdn * _result = 0;
    HRESULT _hr = raw_Add(Type, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORefCrdnPtr(_result, false);
}

HRESULT IAgVORefCrdnCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVORefCrdnCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVORefCrdnCollection::RemoveByName ( enum AgEGeometricElemType Type, _bstr_t Name ) {
    HRESULT _hr = raw_RemoveByName(Type, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgVORefCrdnCollection::GetAvailableCrdns ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableCrdns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVORefCrdnPtr IAgVORefCrdnCollection::GetCrdnByName ( enum AgEGeometricElemType Type, _bstr_t Name ) {
    struct IAgVORefCrdn * _result = 0;
    HRESULT _hr = raw_GetCrdnByName(Type, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORefCrdnPtr(_result, false);
}

//
// interface _IAgVOVector wrapper method implementations
//

IAgVORefCrdnCollectionPtr _IAgVOVector::GetRefCrdns ( ) {
    struct IAgVORefCrdnCollection * _result = 0;
    HRESULT _hr = get_RefCrdns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORefCrdnCollectionPtr(_result, false);
}

double _IAgVOVector::GetVectorSizeScale ( ) {
    double _result = 0;
    HRESULT _hr = get_VectorSizeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVector::PutVectorSizeScale ( double pVal ) {
    HRESULT _hr = put_VectorSizeScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOVector::GetScaleRelativeToModel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScaleRelativeToModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVector::PutScaleRelativeToModel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ScaleRelativeToModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOVector::GetAngleSizeScale ( ) {
    double _result = 0;
    HRESULT _hr = get_AngleSizeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVector::PutAngleSizeScale ( double pVal ) {
    HRESULT _hr = put_AngleSizeScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOVector::GetArrowPtSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowPtSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVector::PutArrowPtSize ( double pVal ) {
    HRESULT _hr = put_ArrowPtSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOVector wrapper method implementations
//

IAgVORefCrdnCollectionPtr IAgVOVector::GetRefCrdns ( ) {
    struct IAgVORefCrdnCollection * _result = 0;
    HRESULT _hr = get_RefCrdns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORefCrdnCollectionPtr(_result, false);
}

double IAgVOVector::GetVectorSizeScale ( ) {
    double _result = 0;
    HRESULT _hr = get_VectorSizeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVector::PutVectorSizeScale ( double pVal ) {
    HRESULT _hr = put_VectorSizeScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOVector::GetScaleRelativeToModel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScaleRelativeToModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVector::PutScaleRelativeToModel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ScaleRelativeToModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOVector::GetAngleSizeScale ( ) {
    double _result = 0;
    HRESULT _hr = get_AngleSizeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVector::PutAngleSizeScale ( double pVal ) {
    HRESULT _hr = put_AngleSizeScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOVector::GetArrowPtSize ( ) {
    double _result = 0;
    HRESULT _hr = get_ArrowPtSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVector::PutArrowPtSize ( double pVal ) {
    HRESULT _hr = put_ArrowPtSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOModelTrans wrapper method implementations
//

_bstr_t IAgVOModelTrans::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double IAgVOModelTrans::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOModelTrans::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOModelTrans::GetMin ( ) {
    double _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVOModelTrans::GetMax ( ) {
    double _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVOModelTransCollection wrapper method implementations
//

long IAgVOModelTransCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVOModelTransPtr IAgVOModelTransCollection::GetItem ( long Index ) {
    struct IAgVOModelTrans * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelTransPtr(_result, false);
}

IUnknownPtr IAgVOModelTransCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

_bstr_t IAgVOModelTransCollection::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgVOModelArtic wrapper method implementations
//

VARIANT_BOOL IAgVOModelArtic::GetEnableDefaultSave ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDefaultSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOModelArtic::PutEnableDefaultSave ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableDefaultSave(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOModelArtic::GetEnableSaveArticFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSaveArticFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOModelArtic::PutEnableSaveArticFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSaveArticFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOModelArtic::GetTransValue ( long LOD, _bstr_t Artic, _bstr_t Trans ) {
    double _result = 0;
    HRESULT _hr = raw_GetTransValue(LOD, Artic, Trans, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVOModelArtic::SetTransValue ( long LOD, _bstr_t Artic, _bstr_t Trans, double TransVal ) {
    HRESULT _hr = raw_SetTransValue(LOD, Artic, Trans, TransVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgVOModelArtic::GetAvailableArticulations ( long LOD ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetAvailableArticulations(LOD, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVOModelTransCollectionPtr IAgVOModelArtic::GetAvailableTransformations ( long LOD, _bstr_t ArticName ) {
    struct IAgVOModelTransCollection * _result = 0;
    HRESULT _hr = raw_GetAvailableTransformations(LOD, ArticName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelTransCollectionPtr(_result, false);
}

long IAgVOModelArtic::GetLODCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LODCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVOModel wrapper method implementations
//

VARIANT_BOOL IAgVOModel::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOModel::PutVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_Visible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOModel::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOModel::PutScaleValue ( double pScale ) {
    HRESULT _hr = put_ScaleValue(pScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVODetailThresholdPtr IAgVOModel::GetDetailThreshold ( ) {
    struct IAgVODetailThreshold * _result = 0;
    HRESULT _hr = get_DetailThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODetailThresholdPtr(_result, false);
}

IAgVOModelDataPtr IAgVOModel::GetModelData ( ) {
    struct IAgVOModelData * _result = 0;
    HRESULT _hr = get_ModelData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelDataPtr(_result, false);
}

enum AgEModelType IAgVOModel::GetModelType ( ) {
    enum AgEModelType _result;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOModel::PutModelType ( enum AgEModelType pType ) {
    HRESULT _hr = put_ModelType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOModelArticPtr IAgVOModel::GetArticulation ( ) {
    struct IAgVOModelArtic * _result = 0;
    HRESULT _hr = get_Articulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelArticPtr(_result, false);
}

//
// interface IAgPtTargetVOModel wrapper method implementations
//

IAgVOMarkerPtr IAgPtTargetVOModel::GetMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

VARIANT_BOOL IAgPtTargetVOModel::GetIsPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPtTargetVOModel::PutIsPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgPtTargetVOModel::GetPointSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgPtTargetVOModel::PutPointSize ( const _variant_t & pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOAzElMask wrapper method implementations
//

VARIANT_BOOL IAgVOAzElMask::GetCompassDirectionsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CompassDirectionsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOAzElMask::PutCompassDirectionsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CompassDirectionsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOAzElMask::GetAltLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOAzElMask::PutAltLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AltLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVOAzElMask::GetNumbAltLabels ( ) {
    long _result = 0;
    HRESULT _hr = get_NumbAltLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOAzElMask::PutNumbAltLabels ( long pVal ) {
    HRESULT _hr = put_NumbAltLabels(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOAzElMask::GetInteriorTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_InteriorTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOAzElMask::PutInteriorTranslucency ( double pVal ) {
    HRESULT _hr = put_InteriorTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOAzElMask::GetLineTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_LineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOAzElMask::PutLineTranslucency ( double pVal ) {
    HRESULT _hr = put_LineTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOLabelSwapDistancePtr IAgVOAzElMask::GetLabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_LabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface IAgVOVaporTrail wrapper method implementations
//

VARIANT_BOOL IAgVOVaporTrail::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVaporTrail::PutVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_Visible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVOVaporTrail::GetMaxNumOfPuffs ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxNumOfPuffs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVaporTrail::PutMaxNumOfPuffs ( long pMaxNum ) {
    HRESULT _hr = put_MaxNumOfPuffs(pMaxNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOVaporTrail::GetDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_Density(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVaporTrail::PutDensity ( double pDensity ) {
    HRESULT _hr = put_Density(pDensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVOVaporTrail::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVaporTrail::PutRadius ( double pRadius ) {
    HRESULT _hr = put_Radius(pRadius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVOVaporTrail::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVOVaporTrail::PutStartTime ( const _variant_t & pStartTime ) {
    HRESULT _hr = put_StartTime(pStartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVOVaporTrail::GetEndTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVOVaporTrail::PutEndTime ( const _variant_t & pEndTime ) {
    HRESULT _hr = put_EndTime(pEndTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVOVaporTrail::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVaporTrail::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVOVaporTrail::GetUseAttachPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAttachPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVOVaporTrail::PutUseAttachPoint ( VARIANT_BOOL pUseAttach ) {
    HRESULT _hr = put_UseAttachPoint(pUseAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVOVaporTrail::GetAttachPointName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachPointName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVOVaporTrail::PutAttachPointName ( _bstr_t pAttachName ) {
    HRESULT _hr = put_AttachPointName(pAttachName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVOVaporTrail::GetImageFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ImageFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVOVaporTrail::PutImageFile ( _bstr_t pImageFile ) {
    HRESULT _hr = put_ImageFile(pImageFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVOVaporTrail::GetAvailableAttachPoints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAttachPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgTerrainNormSlopeAzimuth wrapper method implementations
//

_variant_t _IAgTerrainNormSlopeAzimuth::GetSlope ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Slope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgTerrainNormSlopeAzimuth::PutSlope ( const _variant_t & pVal ) {
    HRESULT _hr = put_Slope(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgTerrainNormSlopeAzimuth::GetAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Azimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgTerrainNormSlopeAzimuth::PutAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_Azimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgTerrainNormSlopeAzimuth wrapper method implementations
//

_variant_t IAgTerrainNormSlopeAzimuth::GetSlope ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Slope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgTerrainNormSlopeAzimuth::PutSlope ( const _variant_t & pVal ) {
    HRESULT _hr = put_Slope(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgTerrainNormSlopeAzimuth::GetAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Azimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgTerrainNormSlopeAzimuth::PutAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_Azimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStVO wrapper method implementations
//

VARIANT_BOOL _IAgStVO::GetInertialPositionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPositionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStVO::PutInertialPositionVisible ( VARIANT_BOOL pInertialPositionVisible ) {
    HRESULT _hr = put_InertialPositionVisible(pInertialPositionVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStVO::GetSubStarPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubStarPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStVO::PutSubStarPointVisible ( VARIANT_BOOL pShowSubStarPoint ) {
    HRESULT _hr = put_SubStarPointVisible(pShowSubStarPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStVO::GetInheritFrom2dGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFrom2dGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStVO::PutInheritFrom2dGfx ( VARIANT_BOOL pInheritFrom2dfx ) {
    HRESULT _hr = put_InheritFrom2dGfx(pInheritFrom2dfx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStVO::GetPositionLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PositionLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStVO::PutPositionLabelVisible ( VARIANT_BOOL pShowStarLabel ) {
    HRESULT _hr = put_PositionLabelVisible(pShowStarLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStVO::GetSubStarLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubStarLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStVO::PutSubStarLabelVisible ( VARIANT_BOOL pShowSubStarLabel ) {
    HRESULT _hr = put_SubStarLabelVisible(pShowSubStarLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStVO wrapper method implementations
//

VARIANT_BOOL IAgStVO::GetInertialPositionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPositionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStVO::PutInertialPositionVisible ( VARIANT_BOOL pInertialPositionVisible ) {
    HRESULT _hr = put_InertialPositionVisible(pInertialPositionVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStVO::GetSubStarPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubStarPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStVO::PutSubStarPointVisible ( VARIANT_BOOL pShowSubStarPoint ) {
    HRESULT _hr = put_SubStarPointVisible(pShowSubStarPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStVO::GetInheritFrom2dGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFrom2dGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStVO::PutInheritFrom2dGfx ( VARIANT_BOOL pInheritFrom2dfx ) {
    HRESULT _hr = put_InheritFrom2dGfx(pInheritFrom2dfx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStVO::GetPositionLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PositionLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStVO::PutPositionLabelVisible ( VARIANT_BOOL pPositionLabelVisible ) {
    HRESULT _hr = put_PositionLabelVisible(pPositionLabelVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStVO::GetSubStarLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubStarLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStVO::PutSubStarLabelVisible ( VARIANT_BOOL pShowSubStarLabel ) {
    HRESULT _hr = put_SubStarLabelVisible(pShowSubStarLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStGraphics wrapper method implementations
//

OLE_COLOR _IAgStGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStGraphics::PutInherit ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_Inherit(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStGraphics::GetMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStGraphics::PutMarkerVisible ( VARIANT_BOOL pShowMarker ) {
    HRESULT _hr = put_MarkerVisible(pShowMarker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStGraphics::PutMarkerStyle ( _bstr_t pMarkerStyle ) {
    HRESULT _hr = put_MarkerStyle(pMarkerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStGraphics::PutLabelVisible ( VARIANT_BOOL pShowLabel ) {
    HRESULT _hr = put_LabelVisible(pShowLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStGraphics wrapper method implementations
//

OLE_COLOR IAgStGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStGraphics::PutInherit ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_Inherit(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStGraphics::GetMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStGraphics::PutMarkerVisible ( VARIANT_BOOL pShowMarker ) {
    HRESULT _hr = put_MarkerVisible(pShowMarker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgStGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgStGraphics::PutMarkerStyle ( _bstr_t pMarkerStyle ) {
    HRESULT _hr = put_MarkerStyle(pMarkerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStGraphics::PutLabelVisible ( VARIANT_BOOL pShowLabel ) {
    HRESULT _hr = put_LabelVisible(pShowLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgPlVO wrapper method implementations
//

VARIANT_BOOL _IAgPlVO::GetInheritFrom2dGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFrom2dGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlVO::PutInheritFrom2dGfx ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_InheritFrom2dGfx(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlVO::GetInertialPositionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPositionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlVO::PutInertialPositionVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_InertialPositionVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlVO::GetSubPlanetPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlVO::PutSubPlanetPointVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_SubPlanetPointVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlVO::GetPositionLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PositionLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlVO::PutPositionLabelVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_PositionLabelVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlVO::GetSubPlanetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlVO::PutSubPlanetLabelVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_SubPlanetLabelVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlVO::GetOrbitVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrbitVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlVO::PutOrbitVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_OrbitVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlVO::GetEnableDepthCueing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDepthCueing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlVO::PutEnableDepthCueing ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_EnableDepthCueing(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgPlVO wrapper method implementations
//

VARIANT_BOOL IAgPlVO::GetInheritFrom2dGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFrom2dGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlVO::PutInheritFrom2dGfx ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_InheritFrom2dGfx(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlVO::GetInertialPositionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPositionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlVO::PutInertialPositionVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_InertialPositionVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlVO::GetSubPlanetPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlVO::PutSubPlanetPointVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_SubPlanetPointVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlVO::GetPositionLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PositionLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlVO::PutPositionLabelVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_PositionLabelVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlVO::GetSubPlanetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlVO::PutSubPlanetLabelVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_SubPlanetLabelVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlVO::GetOrbitVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrbitVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlVO::PutOrbitVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_OrbitVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlVO::GetEnableDepthCueing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDepthCueing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlVO::PutEnableDepthCueing ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_EnableDepthCueing(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgPlGraphics wrapper method implementations
//

VARIANT_BOOL _IAgPlGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutInherit ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_Inherit(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgPlGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlGraphics::GetSubPlanetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutSubPlanetLabelVisible ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_SubPlanetLabelVisible(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlGraphics::GetPositionLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PositionLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutPositionLabelVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_PositionLabelVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgPlGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgPlGraphics::PutMarkerStyle ( _bstr_t pStyle ) {
    HRESULT _hr = put_MarkerStyle(pStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlGraphics::GetInertialPositionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPositionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutInertialPositionVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_InertialPositionVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlGraphics::GetSubPlanetPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutSubPlanetPointVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_SubPlanetPointVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlGraphics::GetOrbitVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrbitVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutOrbitVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_OrbitVisible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEPlOrbitDisplayType _IAgPlGraphics::GetOrbitDisplay ( ) {
    enum AgEPlOrbitDisplayType _result;
    HRESULT _hr = get_OrbitDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutOrbitDisplay ( enum AgEPlOrbitDisplayType pVal ) {
    HRESULT _hr = put_OrbitDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgOrbitDisplayDataPtr _IAgPlGraphics::GetOrbitDisplayData ( ) {
    struct IAgOrbitDisplayData * _result = 0;
    HRESULT _hr = get_OrbitDisplayData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOrbitDisplayDataPtr(_result, false);
}

enum STKUtil::AgELineStyle _IAgPlGraphics::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutLineStyle ( enum STKUtil::AgELineStyle pLineStyle ) {
    HRESULT _hr = put_LineStyle(pLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgPlGraphics::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlGraphics::PutLineWidth ( enum AgELineWidth pLineWidth ) {
    HRESULT _hr = put_LineWidth(pLineWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgPlGraphics wrapper method implementations
//

VARIANT_BOOL IAgPlGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutInherit ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_Inherit(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgPlGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlGraphics::GetSubPlanetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutSubPlanetLabelVisible ( VARIANT_BOOL pSubPlanetLabelVisible ) {
    HRESULT _hr = put_SubPlanetLabelVisible(pSubPlanetLabelVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlGraphics::GetPositionLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PositionLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutPositionLabelVisible ( VARIANT_BOOL pPositionLabelVisible ) {
    HRESULT _hr = put_PositionLabelVisible(pPositionLabelVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgPlGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgPlGraphics::PutMarkerStyle ( _bstr_t pStyle ) {
    HRESULT _hr = put_MarkerStyle(pStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlGraphics::GetInertialPositionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPositionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutInertialPositionVisible ( VARIANT_BOOL pInertialPositionVisible ) {
    HRESULT _hr = put_InertialPositionVisible(pInertialPositionVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlGraphics::GetSubPlanetPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutSubPlanetPointVisible ( VARIANT_BOOL pSubPlanetPointVisible ) {
    HRESULT _hr = put_SubPlanetPointVisible(pSubPlanetPointVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlGraphics::GetOrbitVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrbitVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutOrbitVisible ( VARIANT_BOOL pOrbitVisible ) {
    HRESULT _hr = put_OrbitVisible(pOrbitVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEPlOrbitDisplayType IAgPlGraphics::GetOrbitDisplay ( ) {
    enum AgEPlOrbitDisplayType _result;
    HRESULT _hr = get_OrbitDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutOrbitDisplay ( enum AgEPlOrbitDisplayType pVal ) {
    HRESULT _hr = put_OrbitDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgOrbitDisplayDataPtr IAgPlGraphics::GetOrbitDisplayData ( ) {
    struct IAgOrbitDisplayData * _result = 0;
    HRESULT _hr = get_OrbitDisplayData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOrbitDisplayDataPtr(_result, false);
}

enum STKUtil::AgELineStyle IAgPlGraphics::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutLineStyle ( enum STKUtil::AgELineStyle pLineStyle ) {
    HRESULT _hr = put_LineStyle(pLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgPlGraphics::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlGraphics::PutLineWidth ( enum AgELineWidth pLineWidth ) {
    HRESULT _hr = put_LineWidth(pLineWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgAreaTypePattern wrapper method implementations
//

_variant_t _IAgAreaTypePattern::GetLat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAreaTypePattern::PutLat ( const _variant_t & pLat ) {
    HRESULT _hr = put_Lat(pLat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAreaTypePattern::GetLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAreaTypePattern::PutLon ( const _variant_t & pLon ) {
    HRESULT _hr = put_Lon(pLon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAreaTypePattern wrapper method implementations
//

_variant_t IAgAreaTypePattern::GetLat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAreaTypePattern::PutLat ( const _variant_t & pLat ) {
    HRESULT _hr = put_Lat(pLat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgAreaTypePattern::GetLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAreaTypePattern::PutLon ( const _variant_t & pLon ) {
    HRESULT _hr = put_Lon(pLon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAreaTypePatternCollection wrapper method implementations
//

IUnknownPtr IAgAreaTypePatternCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

long IAgAreaTypePatternCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAreaTypePatternPtr IAgAreaTypePatternCollection::GetItem ( long Index ) {
    struct IAgAreaTypePattern * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAreaTypePatternPtr(_result, false);
}

IAgAreaTypePatternPtr IAgAreaTypePatternCollection::Add ( const _variant_t & Lat, const _variant_t & Lon ) {
    struct IAgAreaTypePattern * _result = 0;
    HRESULT _hr = raw_Add(Lat, Lon, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAreaTypePatternPtr(_result, false);
}

HRESULT IAgAreaTypePatternCollection::Remove ( long ItemIndex ) {
    HRESULT _hr = raw_Remove(ItemIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAreaTypePatternCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgAreaTypePatternPtr IAgAreaTypePatternCollection::Insert ( const _variant_t & Lat, const _variant_t & Lon, long Index ) {
    struct IAgAreaTypePattern * _result = 0;
    HRESULT _hr = raw_Insert(Lat, Lon, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAreaTypePatternPtr(_result, false);
}

SAFEARRAY * IAgAreaTypePatternCollection::ToArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ToArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgAreaTypeEllipse wrapper method implementations
//

double _IAgAreaTypeEllipse::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAreaTypeEllipse::PutSemiMajorAxis ( double pMajor ) {
    HRESULT _hr = put_SemiMajorAxis(pMajor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAreaTypeEllipse::GetSemiMinorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMinorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAreaTypeEllipse::PutSemiMinorAxis ( double pMinor ) {
    HRESULT _hr = put_SemiMinorAxis(pMinor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAreaTypeEllipse::GetBearing ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAreaTypeEllipse::PutBearing ( const _variant_t & pBearing ) {
    HRESULT _hr = put_Bearing(pBearing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAreaTypeEllipse wrapper method implementations
//

double IAgAreaTypeEllipse::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAreaTypeEllipse::PutSemiMajorAxis ( double pMajor ) {
    HRESULT _hr = put_SemiMajorAxis(pMajor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgAreaTypeEllipse::GetSemiMinorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMinorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAreaTypeEllipse::PutSemiMinorAxis ( double pMinor ) {
    HRESULT _hr = put_SemiMinorAxis(pMinor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgAreaTypeEllipse::GetBearing ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAreaTypeEllipse::PutBearing ( const _variant_t & pBearing ) {
    HRESULT _hr = put_Bearing(pBearing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgATVO wrapper method implementations
//

VARIANT_BOOL _IAgATVO::GetEnableLabelMaxViewingDist ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLabelMaxViewingDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATVO::PutEnableLabelMaxViewingDist ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_EnableLabelMaxViewingDist(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgATVO::GetLabelMaxViewingDist ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelMaxViewingDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATVO::PutLabelMaxViewingDist ( double pLabelMaxViewingDist ) {
    HRESULT _hr = put_LabelMaxViewingDist(pLabelMaxViewingDist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgATVO::GetFillInterior ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillInterior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATVO::PutFillInterior ( VARIANT_BOOL pFillInterior ) {
    HRESULT _hr = put_FillInterior(pFillInterior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgATVO::GetPercentTranslucencyInterior ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentTranslucencyInterior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATVO::PutPercentTranslucencyInterior ( double pPercTrans ) {
    HRESULT _hr = put_PercentTranslucencyInterior(pPercTrans);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOBorderWallPtr _IAgATVO::GetBorderWall ( ) {
    struct IAgVOBorderWall * _result = 0;
    HRESULT _hr = get_BorderWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOBorderWallPtr(_result, false);
}

IAgVOVectorPtr _IAgATVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

double _IAgATVO::GetFillGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_FillGranularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATVO::PutFillGranularity ( double pVal ) {
    HRESULT _hr = put_FillGranularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgATVO wrapper method implementations
//

VARIANT_BOOL IAgATVO::GetEnableLabelMaxViewingDist ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLabelMaxViewingDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATVO::PutEnableLabelMaxViewingDist ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_EnableLabelMaxViewingDist(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgATVO::GetLabelMaxViewingDist ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelMaxViewingDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATVO::PutLabelMaxViewingDist ( double pLabelMaxViewingDist ) {
    HRESULT _hr = put_LabelMaxViewingDist(pLabelMaxViewingDist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgATVO::GetFillInterior ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillInterior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATVO::PutFillInterior ( VARIANT_BOOL pFillInterior ) {
    HRESULT _hr = put_FillInterior(pFillInterior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgATVO::GetPercentTranslucencyInterior ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentTranslucencyInterior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATVO::PutPercentTranslucencyInterior ( double pPercTrans ) {
    HRESULT _hr = put_PercentTranslucencyInterior(pPercTrans);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOBorderWallPtr IAgATVO::GetBorderWall ( ) {
    struct IAgVOBorderWall * _result = 0;
    HRESULT _hr = get_BorderWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOBorderWallPtr(_result, false);
}

IAgVOVectorPtr IAgATVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

double IAgATVO::GetFillGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_FillGranularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATVO::PutFillGranularity ( double pVal ) {
    HRESULT _hr = put_FillGranularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgATGraphics wrapper method implementations
//

VARIANT_BOOL _IAgATGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutInherit ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_Inherit(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgATGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgATGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgATGraphics::PutMarkerStyle ( _bstr_t pMarkerStyle ) {
    HRESULT _hr = put_MarkerStyle(pMarkerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgATGraphics::GetCentroidVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentroidVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutCentroidVisible ( VARIANT_BOOL pShowCentroid ) {
    HRESULT _hr = put_CentroidVisible(pShowCentroid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgATGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutLabelVisible ( VARIANT_BOOL pShowLabel ) {
    HRESULT _hr = put_LabelVisible(pShowLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgATGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgATGraphics::GetBoundaryPtsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryPtsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutBoundaryPtsVisible ( VARIANT_BOOL pShowBoundaryPts ) {
    HRESULT _hr = put_BoundaryPtsVisible(pShowBoundaryPts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgATGraphics::GetBoundaryStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_BoundaryStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutBoundaryStyle ( enum STKUtil::AgELineStyle pBoundaryStyle ) {
    HRESULT _hr = put_BoundaryStyle(pBoundaryStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgATGraphics::GetBoundaryWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BoundaryWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutBoundaryWidth ( long pBoundaryWidth ) {
    HRESULT _hr = put_BoundaryWidth(pBoundaryWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgATGraphics::GetBoundaryFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutBoundaryFill ( VARIANT_BOOL pBoundaryFill ) {
    HRESULT _hr = put_BoundaryFill(pBoundaryFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgATGraphics::GetBoundaryVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutBoundaryVisible ( VARIANT_BOOL pShowBoundary ) {
    HRESULT _hr = put_BoundaryVisible(pShowBoundary);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgATGraphics::GetBoundingRectVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundingRectVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutBoundingRectVisible ( VARIANT_BOOL pShowBoundingRect ) {
    HRESULT _hr = put_BoundingRectVisible(pShowBoundingRect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgATGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgATGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgATGraphics::GetBoundaryColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BoundaryColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutBoundaryColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_BoundaryColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgATGraphics::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutLabelColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_LabelColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgATGraphics::GetCentroidColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_CentroidColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgATGraphics::PutCentroidColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_CentroidColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr _IAgATGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

//
// interface IAgATGraphics wrapper method implementations
//

VARIANT_BOOL IAgATGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutInherit ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_Inherit(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgATGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgATGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgATGraphics::PutMarkerStyle ( _bstr_t pMarkerStyle ) {
    HRESULT _hr = put_MarkerStyle(pMarkerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgATGraphics::GetCentroidVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentroidVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutCentroidVisible ( VARIANT_BOOL pShowCentroid ) {
    HRESULT _hr = put_CentroidVisible(pShowCentroid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgATGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutLabelVisible ( VARIANT_BOOL pShowLabel ) {
    HRESULT _hr = put_LabelVisible(pShowLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgATGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgATGraphics::GetBoundaryPtsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryPtsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutBoundaryPtsVisible ( VARIANT_BOOL pShowBoundaryPts ) {
    HRESULT _hr = put_BoundaryPtsVisible(pShowBoundaryPts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgATGraphics::GetBoundaryStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_BoundaryStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutBoundaryStyle ( enum STKUtil::AgELineStyle pBoundaryStyle ) {
    HRESULT _hr = put_BoundaryStyle(pBoundaryStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgATGraphics::GetBoundaryWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BoundaryWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutBoundaryWidth ( long pBoundaryWidth ) {
    HRESULT _hr = put_BoundaryWidth(pBoundaryWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgATGraphics::GetBoundaryFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutBoundaryFill ( VARIANT_BOOL pBoundaryFill ) {
    HRESULT _hr = put_BoundaryFill(pBoundaryFill);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgATGraphics::GetBoundaryVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundaryVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutBoundaryVisible ( VARIANT_BOOL pShowBoundary ) {
    HRESULT _hr = put_BoundaryVisible(pShowBoundary);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgATGraphics::GetBoundingRectVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundingRectVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutBoundingRectVisible ( VARIANT_BOOL pShowBoundingRect ) {
    HRESULT _hr = put_BoundingRectVisible(pShowBoundingRect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgATGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgATGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr IAgATGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

OLE_COLOR IAgATGraphics::GetBoundaryColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BoundaryColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutBoundaryColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_BoundaryColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgATGraphics::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutLabelColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_LabelColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgATGraphics::GetCentroidColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_CentroidColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgATGraphics::PutCentroidColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_CentroidColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVOAzElMask wrapper method implementations
//

VARIANT_BOOL _IAgVOAzElMask::GetCompassDirectionsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CompassDirectionsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOAzElMask::PutCompassDirectionsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CompassDirectionsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOAzElMask::GetAltLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AltLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOAzElMask::PutAltLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AltLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVOAzElMask::GetNumbAltLabels ( ) {
    long _result = 0;
    HRESULT _hr = get_NumbAltLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOAzElMask::PutNumbAltLabels ( long pVal ) {
    HRESULT _hr = put_NumbAltLabels(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOAzElMask::GetInteriorTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_InteriorTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOAzElMask::PutInteriorTranslucency ( double pVal ) {
    HRESULT _hr = put_InteriorTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOAzElMask::GetLineTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_LineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOAzElMask::PutLineTranslucency ( double pVal ) {
    HRESULT _hr = put_LineTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOLabelSwapDistancePtr _IAgVOAzElMask::GetLabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_LabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface _IAgVOModelArtic wrapper method implementations
//

VARIANT_BOOL _IAgVOModelArtic::GetEnableDefaultSave ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDefaultSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOModelArtic::PutEnableDefaultSave ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableDefaultSave(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOModelArtic::GetEnableSaveArticFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSaveArticFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOModelArtic::PutEnableSaveArticFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSaveArticFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOModelArtic::GetTransValue ( long LOD, _bstr_t Artic, _bstr_t Trans ) {
    double _result = 0;
    HRESULT _hr = raw_GetTransValue(LOD, Artic, Trans, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVOModelArtic::SetTransValue ( long LOD, _bstr_t Artic, _bstr_t Trans, double TransValue ) {
    HRESULT _hr = raw_SetTransValue(LOD, Artic, Trans, TransValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgVOModelArtic::GetAvailableArticulations ( long LOD ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetAvailableArticulations(LOD, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVOModelTransCollectionPtr _IAgVOModelArtic::GetAvailableTransformations ( long LOD, _bstr_t ArticName ) {
    struct IAgVOModelTransCollection * _result = 0;
    HRESULT _hr = raw_GetAvailableTransformations(LOD, ArticName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelTransCollectionPtr(_result, false);
}

long _IAgVOModelArtic::GetLODCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LODCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVOModelTrans wrapper method implementations
//

_bstr_t _IAgVOModelTrans::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double _IAgVOModelTrans::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOModelTrans::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOModelTrans::GetMin ( ) {
    double _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVOModelTrans::GetMax ( ) {
    double _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVOModelFile wrapper method implementations
//

_bstr_t _IAgVOModelFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVOModelFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVOModelFile wrapper method implementations
//

_bstr_t IAgVOModelFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVOModelFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgPlPosFile wrapper method implementations
//

_bstr_t _IAgPlPosFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgPlPosFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgPlPosFile wrapper method implementations
//

_bstr_t IAgPlPosFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgPlPosFile::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgPlPosCentralBody wrapper method implementations
//

_bstr_t _IAgPlPosCentralBody::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgPlPosCentralBody::PutCentralBody ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBody(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlPosCentralBody::GetAutoRename ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlPosCentralBody::PutAutoRename ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoRename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgPlPosCentralBody::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEEphemSourceType _IAgPlPosCentralBody::GetEphemSource ( ) {
    enum AgEEphemSourceType _result;
    HRESULT _hr = get_EphemSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlPosCentralBody::PutEphemSource ( enum AgEEphemSourceType pVal ) {
    HRESULT _hr = put_EphemSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgPlPosCentralBody::GetAvailableCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgPlPosCentralBody::GetAvailableEphemSourceTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableEphemSourceTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgPlPosCentralBody::GetJPLDEVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JPLDEVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgPlPosCentralBody wrapper method implementations
//

_bstr_t IAgPlPosCentralBody::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgPlPosCentralBody::PutCentralBody ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBody(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgPlPosCentralBody::GetAutoRename ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlPosCentralBody::PutAutoRename ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoRename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgPlPosCentralBody::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEEphemSourceType IAgPlPosCentralBody::GetEphemSource ( ) {
    enum AgEEphemSourceType _result;
    HRESULT _hr = get_EphemSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlPosCentralBody::PutEphemSource ( enum AgEEphemSourceType pVal ) {
    HRESULT _hr = put_EphemSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgPlPosCentralBody::GetAvailableCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgPlPosCentralBody::GetAvailableEphemSourceTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableEphemSourceTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgPlPosCentralBody::GetJPLDEVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JPLDEVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgPlOrbitDisplayTime wrapper method implementations
//

double _IAgPlOrbitDisplayTime::GetTime ( ) {
    double _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlOrbitDisplayTime::PutTime ( double pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgPlOrbitDisplayTime wrapper method implementations
//

double IAgPlOrbitDisplayTime::GetTime ( ) {
    double _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlOrbitDisplayTime::PutTime ( double pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgTimePeriodValue wrapper method implementations
//

_variant_t IAgTimePeriodValue::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgTimePeriodValue::PutValue ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Value(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETimePeriodValueType IAgTimePeriodValue::GetType ( ) {
    enum AgETimePeriodValueType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTimePeriodValue::PutType ( enum AgETimePeriodValueType pRetVal ) {
    HRESULT _hr = put_Type(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgScAnimationTimePeriod wrapper method implementations
//

IAgTimePeriodValuePtr IAgScAnimationTimePeriod::GetStartTime ( ) {
    struct IAgTimePeriodValue * _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodValuePtr(_result, false);
}

IAgTimePeriodValuePtr IAgScAnimationTimePeriod::GetStopTime ( ) {
    struct IAgTimePeriodValue * _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodValuePtr(_result, false);
}

_variant_t IAgScAnimationTimePeriod::GetDuration ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgScAnimationTimePeriod::PutDuration ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Duration(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScAnimationTimePeriod::GetUseAnalysisStartTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAnalysisStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScAnimationTimePeriod::PutUseAnalysisStartTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAnalysisStartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScAnimationTimePeriod::GetUseAnalysisStopTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAnalysisStopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScAnimationTimePeriod::PutUseAnalysisStopTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAnalysisStopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgScAnimation wrapper method implementations
//

_variant_t IAgScAnimation::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgScAnimation::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScAnimation::GetEnableAnimCycleTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAnimCycleTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScAnimation::PutEnableAnimCycleTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAnimCycleTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgScAnimation::GetAnimCycleTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AnimCycleTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgScAnimation::PutAnimCycleTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_AnimCycleTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgScAnimation::GetAnimStepValue ( ) {
    double _result = 0;
    HRESULT _hr = get_AnimStepValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScAnimation::PutAnimStepValue ( double pVal ) {
    HRESULT _hr = put_AnimStepValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgScAnimation::GetRefreshDelta ( ) {
    double _result = 0;
    HRESULT _hr = get_RefreshDelta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScAnimation::PutRefreshDelta ( double pVal ) {
    HRESULT _hr = put_RefreshDelta(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEScEndLoopType IAgScAnimation::GetAnimCycleType ( ) {
    enum AgEScEndLoopType _result;
    HRESULT _hr = get_AnimCycleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScAnimation::PutAnimCycleType ( enum AgEScEndLoopType pVal ) {
    HRESULT _hr = put_AnimCycleType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEScRefreshDeltaType IAgScAnimation::GetRefreshDeltaType ( ) {
    enum AgEScRefreshDeltaType _result;
    HRESULT _hr = get_RefreshDeltaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScAnimation::PutRefreshDeltaType ( enum AgEScRefreshDeltaType pVal ) {
    HRESULT _hr = put_RefreshDeltaType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEScTimeStepType IAgScAnimation::GetAnimStepType ( ) {
    enum AgEScTimeStepType _result;
    HRESULT _hr = get_AnimStepType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScAnimation::PutAnimStepType ( enum AgEScTimeStepType pVal ) {
    HRESULT _hr = put_AnimStepType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScAnimation::GetContinueXRealtimeFromPause ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContinueXRealtimeFromPause(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScAnimation::PutContinueXRealtimeFromPause ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ContinueXRealtimeFromPause(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgScAnimationTimePeriodPtr IAgScAnimation::GetTimePeriod ( ) {
    struct IAgScAnimationTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScAnimationTimePeriodPtr(_result, false);
}

//
// interface IAgScEarthData wrapper method implementations
//

_bstr_t IAgScEarthData::GetEOPFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EOPFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgScEarthData::PutEOPFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_EOPFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgScEarthData::GetEOPStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EOPStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgScEarthData::GetEOPStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EOPStopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT IAgScEarthData::ReloadEOP ( ) {
    HRESULT _hr = raw_ReloadEOP();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgScGraphics wrapper method implementations
//

VARIANT_BOOL IAgScGraphics::GetLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetSensorsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SensorsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutSensorsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SensorsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetAccessLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AccessLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutAccessLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AccessLinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetAccessAnimHigh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AccessAnimHigh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutAccessAnimHigh ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AccessAnimHigh(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetAccessStatHigh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AccessStatHigh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutAccessStatHigh ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AccessStatHigh(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetGndTracksVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GndTracksVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutGndTracksVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GndTracksVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetGndMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GndMarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutGndMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GndMarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetOrbitsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrbitsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutOrbitsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OrbitsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetOrbitMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrbitMarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutOrbitMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OrbitMarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetElsetNumVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ElsetNumVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutElsetNumVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ElsetNumVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetCentroidsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentroidsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutCentroidsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CentroidsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetPlanetOrbitsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlanetOrbitsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutPlanetOrbitsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PlanetOrbitsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetInertialPosVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPosVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutInertialPosVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InertialPosVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetInertialPosLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPosLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutInertialPosLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InertialPosLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetSubPlanetPointsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetPointsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutSubPlanetPointsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SubPlanetPointsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetSubPlanetLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutSubPlanetLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SubPlanetLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGraphics::GetAllowAnimUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowAnimUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutAllowAnimUpdate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowAnimUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETextOutlineStyle IAgScGraphics::GetTextOutlineStyle ( ) {
    enum AgETextOutlineStyle _result;
    HRESULT _hr = get_TextOutlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutTextOutlineStyle ( enum AgETextOutlineStyle pVal ) {
    HRESULT _hr = put_TextOutlineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgScGraphics::GetTextOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TextOutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGraphics::PutTextOutlineColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_TextOutlineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgScGraphics::ShowObject ( _bstr_t TruncPath, _bstr_t WindowID ) {
    HRESULT _hr = raw_ShowObject(TruncPath, WindowID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgScGraphics::ShowObjects ( SAFEARRAY * * TruncObjectPaths, _bstr_t WindowIdOrTitle ) {
    HRESULT _hr = raw_ShowObjects(TruncObjectPaths, WindowIdOrTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgScGraphics::HideObject ( _bstr_t TruncPath, _bstr_t WindowID ) {
    HRESULT _hr = raw_HideObject(TruncPath, WindowID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgScGraphics::HideObjects ( SAFEARRAY * * TruncObjectPaths, _bstr_t WindowIdOrTitle ) {
    HRESULT _hr = raw_HideObjects(TruncObjectPaths, WindowIdOrTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgTerrain wrapper method implementations
//

_bstr_t IAgTerrain::GetLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgTerrain::PutLocation ( _bstr_t pVal ) {
    HRESULT _hr = put_Location(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETerrainFileType IAgTerrain::GetFileType ( ) {
    enum AgETerrainFileType _result;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IAgTerrain::GetSWLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SWLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgTerrain::GetSWLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SWLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgTerrain::GetNELatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NELatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgTerrain::GetNELongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NELongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgTerrain::GetResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IAgTerrain::GetUseTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTerrain::PutUseTerrain ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTerrain(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgTerrainCollection wrapper method implementations
//

long IAgTerrainCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgTerrainCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgTerrainPtr IAgTerrainCollection::GetItem ( long Index ) {
    struct IAgTerrain * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainPtr(_result, false);
}

IAgTerrainPtr IAgTerrainCollection::Add ( _bstr_t Location, enum AgETerrainFileType TerrainFileType ) {
    struct IAgTerrain * _result = 0;
    HRESULT _hr = raw_Add(Location, TerrainFileType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainPtr(_result, false);
}

HRESULT IAgTerrainCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgTerrainCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgScGenDb wrapper method implementations
//

_bstr_t IAgScGenDb::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgScGenDb::GetDefaultDb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultDb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgScGenDb::PutDefaultDb ( _bstr_t pVal ) {
    HRESULT _hr = put_DefaultDb(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgScGenDb::GetDefaultDir ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgScGenDb::PutDefaultDir ( _bstr_t pVal ) {
    HRESULT _hr = put_DefaultDir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScGenDb::GetEnableAuxDb ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAuxDb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGenDb::PutEnableAuxDb ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAuxDb(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgScGenDb::GetAuxDb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuxDb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgScGenDb::PutAuxDb ( _bstr_t pVal ) {
    HRESULT _hr = put_AuxDb(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgScGenDbCollection wrapper method implementations
//

long IAgScGenDbCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgScGenDbCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgScGenDbPtr IAgScGenDbCollection::GetItem ( long Index ) {
    struct IAgScGenDb * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScGenDbPtr(_result, false);
}

//
// interface IAgScGlobeServerConfigData wrapper method implementations
//

_bstr_t IAgScGlobeServerConfigData::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgScGlobeServerConfigData::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgScGlobeServerConfigData::GetPort ( ) {
    long _result = 0;
    HRESULT _hr = get_Port(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScGlobeServerConfigData::PutPort ( long pVal ) {
    HRESULT _hr = put_Port(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgScGlobeServerConfigData::GetUsername ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Username(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgScGlobeServerConfigData::PutUsername ( _bstr_t pVal ) {
    HRESULT _hr = put_Username(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgScGlobeServerConfigData::SetPassword ( _bstr_t Password ) {
    HRESULT _hr = raw_SetPassword(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgScGlobeServersCollection wrapper method implementations
//

long IAgScGlobeServersCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgScGlobeServerConfigDataPtr IAgScGlobeServersCollection::GetItem ( long Index ) {
    struct IAgScGlobeServerConfigData * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScGlobeServerConfigDataPtr(_result, false);
}

IUnknownPtr IAgScGlobeServersCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgScGlobeServerConfigDataPtr IAgScGlobeServersCollection::Add ( _bstr_t ServerName, long Port ) {
    struct IAgScGlobeServerConfigData * _result = 0;
    HRESULT _hr = raw_Add(ServerName, Port, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScGlobeServerConfigDataPtr(_result, false);
}

HRESULT IAgScGlobeServersCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgScGlobeServersCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgSc3dFont wrapper method implementations
//

_bstr_t IAgSc3dFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSc3dFont::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESc3dPtSize IAgSc3dFont::GetPtSize ( ) {
    enum AgESc3dPtSize _result;
    HRESULT _hr = get_PtSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSc3dFont::PutPtSize ( enum AgESc3dPtSize pVal ) {
    HRESULT _hr = put_PtSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSc3dFont::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSc3dFont::PutBold ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Bold(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSc3dFont::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSc3dFont::PutItalic ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Italic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgSc3dFont::GetAvailableFonts ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgSc3dFont::IsFontAvailable ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFontAvailable(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgScVO wrapper method implementations
//

VARIANT_BOOL IAgScVO::GetRenderNewVOWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RenderNewVOWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutRenderNewVOWindow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RenderNewVOWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgScVO::GetROAMImageCacheSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ROAMImageCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutROAMImageCacheSize ( long pVal ) {
    HRESULT _hr = put_ROAMImageCacheSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgScVO::GetChunkImageCacheSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ChunkImageCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutChunkImageCacheSize ( long pVal ) {
    HRESULT _hr = put_ChunkImageCacheSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScVO::GetUseTerrainWithDragDrop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrainWithDragDrop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutUseTerrainWithDragDrop ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTerrainWithDragDrop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScVO::GetIsNegativeAltitudeAllowed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsNegativeAltitudeAllowed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutIsNegativeAltitudeAllowed ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsNegativeAltitudeAllowed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScVO::GetEnableGlobeServerAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableGlobeServerAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutEnableGlobeServerAccess ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableGlobeServerAccess(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgScGlobeServersCollectionPtr IAgScVO::GetGlobeServers ( ) {
    struct IAgScGlobeServersCollection * _result = 0;
    HRESULT _hr = get_GlobeServers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScGlobeServersCollectionPtr(_result, false);
}

HRESULT IAgScVO::ReloadGlobeServerConfigData ( ) {
    HRESULT _hr = raw_ReloadGlobeServerConfigData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSc3dFontPtr IAgScVO::GetSmallFont ( ) {
    struct IAgSc3dFont * _result = 0;
    HRESULT _hr = get_SmallFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSc3dFontPtr(_result, false);
}

IAgSc3dFontPtr IAgScVO::GetMediumFont ( ) {
    struct IAgSc3dFont * _result = 0;
    HRESULT _hr = get_MediumFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSc3dFontPtr(_result, false);
}

IAgSc3dFontPtr IAgScVO::GetLargeFont ( ) {
    struct IAgSc3dFont * _result = 0;
    HRESULT _hr = get_LargeFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSc3dFontPtr(_result, false);
}

enum AgESurfaceReference IAgScVO::GetSurfaceReference ( ) {
    enum AgESurfaceReference _result;
    HRESULT _hr = get_SurfaceReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutSurfaceReference ( enum AgESurfaceReference pVal ) {
    HRESULT _hr = put_SurfaceReference(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScVO::GetDrawOnTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawOnTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutDrawOnTerrain ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawOnTerrain(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgScVO::GetChunkTerrainCacheSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ChunkTerrainCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutChunkTerrainCacheSize ( long pVal ) {
    HRESULT _hr = put_ChunkTerrainCacheSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETextOutlineStyle IAgScVO::GetTextOutlineStyle ( ) {
    enum AgETextOutlineStyle _result;
    HRESULT _hr = get_TextOutlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutTextOutlineStyle ( enum AgETextOutlineStyle pVal ) {
    HRESULT _hr = put_TextOutlineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgScVO::GetTextOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TextOutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutTextOutlineColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_TextOutlineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScVO::GetTextAntialiasingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextAntialiasingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScVO::PutTextAntialiasingEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TextAntialiasingEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCentralBodyTerrainCollectionElement wrapper method implementations
//

_bstr_t IAgCentralBodyTerrainCollectionElement::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgTerrainCollectionPtr IAgCentralBodyTerrainCollectionElement::GetTerrainCollection ( ) {
    struct IAgTerrainCollection * _result = 0;
    HRESULT _hr = get_TerrainCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainCollectionPtr(_result, false);
}

//
// interface IAgCentralBodyTerrainCollection wrapper method implementations
//

long IAgCentralBodyTerrainCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgCentralBodyTerrainCollectionElementPtr IAgCentralBodyTerrainCollection::GetItem ( const _variant_t & vtIndex ) {
    struct IAgCentralBodyTerrainCollectionElement * _result = 0;
    HRESULT _hr = get_Item(vtIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCentralBodyTerrainCollectionElementPtr(_result, false);
}

IUnknownPtr IAgCentralBodyTerrainCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

long IAgCentralBodyTerrainCollection::GetTotalCacheSize ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCentralBodyTerrainCollection::PutTotalCacheSize ( long pVal ) {
    HRESULT _hr = put_TotalCacheSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgTimePeriod wrapper method implementations
//

IAgTimePeriodValuePtr IAgTimePeriod::GetStartTime ( ) {
    struct IAgTimePeriodValue * _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodValuePtr(_result, false);
}

IAgTimePeriodValuePtr IAgTimePeriod::GetStopTime ( ) {
    struct IAgTimePeriodValue * _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodValuePtr(_result, false);
}

_variant_t IAgTimePeriod::GetDuration ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgTimePeriod::PutDuration ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Duration(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSpEnvRadEnergyMethodSpecify wrapper method implementations
//

STKUtil::IAgDoublesCollectionPtr IAgSpEnvRadEnergyMethodSpecify::GetElectronEnergies ( ) {
    struct STKUtil::IAgDoublesCollection * _result = 0;
    HRESULT _hr = get_ElectronEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDoublesCollectionPtr(_result, false);
}

STKUtil::IAgDoublesCollectionPtr IAgSpEnvRadEnergyMethodSpecify::GetProtonEnergies ( ) {
    struct STKUtil::IAgDoublesCollection * _result = 0;
    HRESULT _hr = get_ProtonEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDoublesCollectionPtr(_result, false);
}

//
// interface IAgSpEnvRadEnergyValues wrapper method implementations
//

VARIANT_BOOL IAgSpEnvRadEnergyValues::GetUseDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvRadEnergyValues::PutUseDefault ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseDefault(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSpEnvRadEnergyMethodSpecifyPtr IAgSpEnvRadEnergyValues::GetCustom ( ) {
    struct IAgSpEnvRadEnergyMethodSpecify * _result = 0;
    HRESULT _hr = get_Custom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvRadEnergyMethodSpecifyPtr(_result, false);
}

//
// interface IAgSpEnvRadiationEnvironment wrapper method implementations
//

enum AgESpEnvCrresProtonActivity IAgSpEnvRadiationEnvironment::GetCrresProtonActivity ( ) {
    enum AgESpEnvCrresProtonActivity _result;
    HRESULT _hr = get_CrresProtonActivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvRadiationEnvironment::PutCrresProtonActivity ( enum AgESpEnvCrresProtonActivity pVal ) {
    HRESULT _hr = put_CrresProtonActivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvCrresRadiationActivity IAgSpEnvRadiationEnvironment::GetCrresRadiationActivity ( ) {
    enum AgESpEnvCrresRadiationActivity _result;
    HRESULT _hr = get_CrresRadiationActivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvRadiationEnvironment::PutCrresRadiationActivity ( enum AgESpEnvCrresRadiationActivity pVal ) {
    HRESULT _hr = put_CrresRadiationActivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSpEnvRadEnergyValuesPtr IAgSpEnvRadiationEnvironment::GetNasaEnergyValues ( ) {
    struct IAgSpEnvRadEnergyValues * _result = 0;
    HRESULT _hr = get_NasaEnergyValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvRadEnergyValuesPtr(_result, false);
}

SAFEARRAY * IAgSpEnvRadiationEnvironment::GetCrresElectronEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetCrresElectronEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgSpEnvRadiationEnvironment::GetCrresProtonEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetCrresProtonEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgSpEnvRadiationEnvironment::GetNasaElectronEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetNasaElectronEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgSpEnvRadiationEnvironment::GetNasaProtonEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetNasaProtonEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgESpEnvNasaModelsActivity IAgSpEnvRadiationEnvironment::GetNasaModelsActivity ( ) {
    enum AgESpEnvNasaModelsActivity _result;
    HRESULT _hr = get_NasaModelsActivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvRadiationEnvironment::PutNasaModelsActivity ( enum AgESpEnvNasaModelsActivity pVal ) {
    HRESULT _hr = put_NasaModelsActivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSpEnvMagFieldGfx wrapper method implementations
//

VARIANT_BOOL IAgSpEnvMagFieldGfx::GetIsMagFieldVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMagFieldVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutIsMagFieldVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsMagFieldVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagFieldColorMode IAgSpEnvMagFieldGfx::GetColorMode ( ) {
    enum AgESpEnvMagFieldColorMode _result;
    HRESULT _hr = get_ColorMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutColorMode ( enum AgESpEnvMagFieldColorMode pVal ) {
    HRESULT _hr = put_ColorMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagFieldColorScale IAgSpEnvMagFieldGfx::GetColorScale ( ) {
    enum AgESpEnvMagFieldColorScale _result;
    HRESULT _hr = get_ColorScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutColorScale ( enum AgESpEnvMagFieldColorScale pVal ) {
    HRESULT _hr = put_ColorScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSpEnvMagFieldGfx::GetFieldLineRefresh ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldLineRefresh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutFieldLineRefresh ( double pVal ) {
    HRESULT _hr = put_FieldLineRefresh(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgSpEnvMagFieldGfx::GetColorRampStart ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ColorRampStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutColorRampStart ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ColorRampStart(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgSpEnvMagFieldGfx::GetColorRampStop ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ColorRampStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutColorRampStop ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ColorRampStop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgSpEnvMagFieldGfx::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgSpEnvMagFieldGfx::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSpEnvMagFieldGfx::GetRefLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_RefLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutRefLongitude ( double pVal ) {
    HRESULT _hr = put_RefLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagFieldLineMode IAgSpEnvMagFieldGfx::GetFieldLineMode ( ) {
    enum AgESpEnvMagFieldLineMode _result;
    HRESULT _hr = get_FieldLineMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutFieldLineMode ( enum AgESpEnvMagFieldLineMode pVal ) {
    HRESULT _hr = put_FieldLineMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSpEnvMagFieldGfx::GetStartLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_StartLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutStartLatitude ( double pVal ) {
    HRESULT _hr = put_StartLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSpEnvMagFieldGfx::GetStopLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_StopLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutStopLatitude ( double pVal ) {
    HRESULT _hr = put_StopLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgSpEnvMagFieldGfx::GetNumFieldLines ( ) {
    long _result = 0;
    HRESULT _hr = get_NumFieldLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutNumFieldLines ( long pVal ) {
    HRESULT _hr = put_NumFieldLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgSpEnvMagFieldGfx::GetNumLongitudes ( ) {
    long _result = 0;
    HRESULT _hr = get_NumLongitudes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutNumLongitudes ( long pVal ) {
    HRESULT _hr = put_NumLongitudes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagneticMainField IAgSpEnvMagFieldGfx::GetMainField ( ) {
    enum AgESpEnvMagneticMainField _result;
    HRESULT _hr = get_MainField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutMainField ( enum AgESpEnvMagneticMainField pVal ) {
    HRESULT _hr = put_MainField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagneticExternalField IAgSpEnvMagFieldGfx::GetExternalField ( ) {
    enum AgESpEnvMagneticExternalField _result;
    HRESULT _hr = get_ExternalField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutExternalField ( enum AgESpEnvMagneticExternalField pVal ) {
    HRESULT _hr = put_ExternalField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSpEnvMagFieldGfx::GetIGRF_UpdateRate ( ) {
    double _result = 0;
    HRESULT _hr = get_IGRF_UpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutIGRF_UpdateRate ( double pVal ) {
    HRESULT _hr = put_IGRF_UpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgSpEnvMagFieldGfx::ComputeBField ( const _variant_t & Time, double Lat, double Lon, double Alt, double * pBx, double * pBy, double * pBz ) {
    HRESULT _hr = raw_ComputeBField(Time, Lat, Lon, Alt, pBx, pBy, pBz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgSpEnvMagFieldGfx::ComputeBFieldAsArray ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeBFieldAsArray(Time, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgSpEnvMagFieldGfx::ComputeDipoleL ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeDipoleL(Time, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgSpEnvMagFieldGfx::ComputeMcIlwainL ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeMcIlwainL(Time, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgSpEnvMagFieldGfx::ComputeBBeq ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeBBeq(Time, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgSpEnvMagFieldGfx::GetMaxTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvMagFieldGfx::PutMaxTranslucency ( double pRetVal ) {
    HRESULT _hr = put_MaxTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSpEnvScenExtVO wrapper method implementations
//

IAgSpEnvMagFieldGfxPtr IAgSpEnvScenExtVO::GetMagneticField ( ) {
    struct IAgSpEnvMagFieldGfx * _result = 0;
    HRESULT _hr = get_MagneticField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvMagFieldGfxPtr(_result, false);
}

//
// interface IAgSpEnvScenSpaceEnvironment wrapper method implementations
//

IAgSpEnvRadiationEnvironmentPtr IAgSpEnvScenSpaceEnvironment::GetRadiationEnvironment ( ) {
    struct IAgSpEnvRadiationEnvironment * _result = 0;
    HRESULT _hr = get_RadiationEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvRadiationEnvironmentPtr(_result, false);
}

IAgSpEnvScenExtVOPtr IAgSpEnvScenSpaceEnvironment::GetVO ( ) {
    struct IAgSpEnvScenExtVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvScenExtVOPtr(_result, false);
}

double IAgSpEnvScenSpaceEnvironment::ComputeSAAFluxIntensity ( enum AgESpEnvSAAChannel Channel, double Lat, double Lon, double Alt ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeSAAFluxIntensity(Channel, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgScenario wrapper method implementations
//

_variant_t IAgScenario::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgScenario::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgScenario::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgScenario::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgScenario::SetTimePeriod ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    HRESULT _hr = raw_SetTimePeriod(StartTime, StopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgScenario::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgScenario::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgScAnimationPtr IAgScenario::GetAnimation ( ) {
    struct IAgScAnimation * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScAnimationPtr(_result, false);
}

IAgScEarthDataPtr IAgScenario::GetEarthData ( ) {
    struct IAgScEarthData * _result = 0;
    HRESULT _hr = get_EarthData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScEarthDataPtr(_result, false);
}

IAgScGraphicsPtr IAgScenario::GetGraphics ( ) {
    struct IAgScGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScGraphicsPtr(_result, false);
}

IAgTerrainCollectionPtr IAgScenario::GetTerrainCollection ( ) {
    struct IAgTerrainCollection * _result = 0;
    HRESULT _hr = get_TerrainCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainCollectionPtr(_result, false);
}

IAgScGenDbCollectionPtr IAgScenario::GetGenDbs ( ) {
    struct IAgScGenDbCollection * _result = 0;
    HRESULT _hr = get_GenDbs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScGenDbCollectionPtr(_result, false);
}

VARIANT_BOOL IAgScenario::GetSatNoOrbitWarning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SatNoOrbitWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScenario::PutSatNoOrbitWarning ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SatNoOrbitWarning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScenario::GetMslNoOrbitWarning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MslNoOrbitWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScenario::PutMslNoOrbitWarning ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MslNoOrbitWarning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgScVOPtr IAgScenario::GetVO ( ) {
    struct IAgScVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScVOPtr(_result, false);
}

enum AgEAcWGS84WarningType IAgScenario::GetAcWGS84Warning ( ) {
    enum AgEAcWGS84WarningType _result;
    HRESULT _hr = get_AcWGS84Warning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScenario::PutAcWGS84Warning ( enum AgEAcWGS84WarningType pVal ) {
    HRESULT _hr = put_AcWGS84Warning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgScenario::GetMslStopTimeWarning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MslStopTimeWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScenario::PutMslStopTimeWarning ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MslStopTimeWarning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCentralBodyTerrainCollectionPtr IAgScenario::GetTerrain ( ) {
    struct IAgCentralBodyTerrainCollection * _result = 0;
    HRESULT _hr = get_Terrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCentralBodyTerrainCollectionPtr(_result, false);
}

STKUtil::IAgComponentDirectoryPtr IAgScenario::GetComponentDirectory ( ) {
    struct STKUtil::IAgComponentDirectory * _result = 0;
    HRESULT _hr = get_ComponentDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgComponentDirectoryPtr(_result, false);
}

SAFEARRAY * IAgScenario::GetScenarioFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ScenarioFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgScenario::GetIsDirty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgTimePeriodPtr IAgScenario::GetTimePeriod ( ) {
    struct IAgTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodPtr(_result, false);
}

VARIANT_BOOL IAgScenario::GetUseAnalysisStartTimeForEpoch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAnalysisStartTimeForEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgScenario::PutUseAnalysisStartTimeForEpoch ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAnalysisStartTimeForEpoch(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgScenario::SetDirty ( ) {
    HRESULT _hr = raw_SetDirty();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSpEnvScenSpaceEnvironmentPtr IAgScenario::GetSpaceEnvironment ( ) {
    struct IAgSpEnvScenSpaceEnvironment * _result = 0;
    HRESULT _hr = get_SpaceEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvScenSpaceEnvironmentPtr(_result, false);
}

//
// interface _IAgScAnimation wrapper method implementations
//

_variant_t _IAgScAnimation::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgScAnimation::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScAnimation::GetEnableAnimCycleTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAnimCycleTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScAnimation::PutEnableAnimCycleTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAnimCycleTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgScAnimation::GetAnimCycleTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AnimCycleTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgScAnimation::PutAnimCycleTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_AnimCycleTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgScAnimation::GetAnimStepValue ( ) {
    double _result = 0;
    HRESULT _hr = get_AnimStepValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScAnimation::PutAnimStepValue ( double pVal ) {
    HRESULT _hr = put_AnimStepValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgScAnimation::GetRefreshDelta ( ) {
    double _result = 0;
    HRESULT _hr = get_RefreshDelta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScAnimation::PutRefreshDelta ( double pVal ) {
    HRESULT _hr = put_RefreshDelta(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEScEndLoopType _IAgScAnimation::GetAnimCycleType ( ) {
    enum AgEScEndLoopType _result;
    HRESULT _hr = get_AnimCycleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScAnimation::PutAnimCycleType ( enum AgEScEndLoopType pVal ) {
    HRESULT _hr = put_AnimCycleType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEScRefreshDeltaType _IAgScAnimation::GetRefreshDeltaType ( ) {
    enum AgEScRefreshDeltaType _result;
    HRESULT _hr = get_RefreshDeltaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScAnimation::PutRefreshDeltaType ( enum AgEScRefreshDeltaType pVal ) {
    HRESULT _hr = put_RefreshDeltaType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEScTimeStepType _IAgScAnimation::GetAnimStepType ( ) {
    enum AgEScTimeStepType _result;
    HRESULT _hr = get_AnimStepType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScAnimation::PutAnimStepType ( enum AgEScTimeStepType pVal ) {
    HRESULT _hr = put_AnimStepType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScAnimation::GetContinueXRealtimeFromPause ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContinueXRealtimeFromPause(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScAnimation::PutContinueXRealtimeFromPause ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ContinueXRealtimeFromPause(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgScAnimationTimePeriodPtr _IAgScAnimation::GetTimePeriod ( ) {
    struct IAgScAnimationTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScAnimationTimePeriodPtr(_result, false);
}

//
// interface _IAgScEarthData wrapper method implementations
//

_bstr_t _IAgScEarthData::GetEOPFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EOPFilename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScEarthData::PutEOPFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_EOPFilename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgScEarthData::GetEOPStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EOPStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgScEarthData::GetEOPStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EOPStopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT _IAgScEarthData::ReloadEOP ( ) {
    HRESULT _hr = raw_ReloadEOP();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgScGraphics wrapper method implementations
//

VARIANT_BOOL _IAgScGraphics::GetLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetSensorsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SensorsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutSensorsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SensorsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetAccessLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AccessLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutAccessLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AccessLinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetAccessAnimHigh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AccessAnimHigh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutAccessAnimHigh ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AccessAnimHigh(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetAccessStatHigh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AccessStatHigh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutAccessStatHigh ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AccessStatHigh(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetGndTracksVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GndTracksVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutGndTracksVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GndTracksVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetGndMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GndMarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutGndMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_GndMarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetOrbitsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrbitsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutOrbitsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OrbitsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetOrbitMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OrbitMarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutOrbitMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OrbitMarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetElsetNumVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ElsetNumVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutElsetNumVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ElsetNumVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetCentroidsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentroidsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutCentroidsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CentroidsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetPlanetOrbitsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlanetOrbitsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutPlanetOrbitsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PlanetOrbitsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetInertialPosVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPosVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutInertialPosVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InertialPosVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetInertialPosLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InertialPosLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutInertialPosLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InertialPosLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetSubPlanetPointsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetPointsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutSubPlanetPointsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SubPlanetPointsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetSubPlanetLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubPlanetLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutSubPlanetLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SubPlanetLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGraphics::GetAllowAnimUpdate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowAnimUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutAllowAnimUpdate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowAnimUpdate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETextOutlineStyle _IAgScGraphics::GetTextOutlineStyle ( ) {
    enum AgETextOutlineStyle _result;
    HRESULT _hr = get_TextOutlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutTextOutlineStyle ( enum AgETextOutlineStyle ppVal ) {
    HRESULT _hr = put_TextOutlineStyle(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgScGraphics::GetTextOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TextOutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGraphics::PutTextOutlineColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_TextOutlineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgScGraphics::ShowObject ( _bstr_t TruncPath, _bstr_t WindowID ) {
    HRESULT _hr = raw_ShowObject(TruncPath, WindowID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgScGraphics::ShowObjects ( SAFEARRAY * * TruncObjectPaths, _bstr_t WindowIdOrTitle ) {
    HRESULT _hr = raw_ShowObjects(TruncObjectPaths, WindowIdOrTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgScGraphics::HideObject ( _bstr_t TruncPath, _bstr_t WindowID ) {
    HRESULT _hr = raw_HideObject(TruncPath, WindowID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgScGraphics::HideObjects ( SAFEARRAY * * TruncObjectPaths, _bstr_t WindowIdOrTitle ) {
    HRESULT _hr = raw_HideObjects(TruncObjectPaths, WindowIdOrTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgTerrain wrapper method implementations
//

_bstr_t _IAgTerrain::GetLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgTerrain::PutLocation ( _bstr_t pVal ) {
    HRESULT _hr = put_Location(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETerrainFileType _IAgTerrain::GetFileType ( ) {
    enum AgETerrainFileType _result;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgTerrain::GetSWLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SWLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgTerrain::GetSWLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SWLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgTerrain::GetNELatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NELatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgTerrain::GetNELongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NELongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgTerrain::GetResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL _IAgTerrain::GetUseTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTerrain::PutUseTerrain ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTerrain(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgScGenDb wrapper method implementations
//

_bstr_t _IAgScGenDb::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgScGenDb::GetDefaultDb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultDb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScGenDb::PutDefaultDb ( _bstr_t pVal ) {
    HRESULT _hr = put_DefaultDb(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgScGenDb::GetDefaultDir ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScGenDb::PutDefaultDir ( _bstr_t pVal ) {
    HRESULT _hr = put_DefaultDir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScGenDb::GetEnableAuxDb ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAuxDb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGenDb::PutEnableAuxDb ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAuxDb(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgScGenDb::GetAuxDb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuxDb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScGenDb::PutAuxDb ( _bstr_t pVal ) {
    HRESULT _hr = put_AuxDb(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgScVO wrapper method implementations
//

VARIANT_BOOL _IAgScVO::GetRenderNewVOWindow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RenderNewVOWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutRenderNewVOWindow ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RenderNewVOWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgScVO::GetROAMImageCacheSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ROAMImageCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutROAMImageCacheSize ( long pVal ) {
    HRESULT _hr = put_ROAMImageCacheSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgScVO::GetChunkImageCacheSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ChunkImageCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutChunkImageCacheSize ( long pVal ) {
    HRESULT _hr = put_ChunkImageCacheSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScVO::GetUseTerrainWithDragDrop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrainWithDragDrop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutUseTerrainWithDragDrop ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTerrainWithDragDrop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScVO::GetIsNegativeAltitudeAllowed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsNegativeAltitudeAllowed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutIsNegativeAltitudeAllowed ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsNegativeAltitudeAllowed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScVO::GetEnableGlobeServerAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableGlobeServerAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutEnableGlobeServerAccess ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableGlobeServerAccess(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgScGlobeServersCollectionPtr _IAgScVO::GetGlobeServers ( ) {
    struct IAgScGlobeServersCollection * _result = 0;
    HRESULT _hr = get_GlobeServers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScGlobeServersCollectionPtr(_result, false);
}

HRESULT _IAgScVO::ReloadGlobeServerConfigData ( ) {
    HRESULT _hr = raw_ReloadGlobeServerConfigData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSc3dFontPtr _IAgScVO::GetSmallFont ( ) {
    struct IAgSc3dFont * _result = 0;
    HRESULT _hr = get_SmallFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSc3dFontPtr(_result, false);
}

IAgSc3dFontPtr _IAgScVO::GetMediumFont ( ) {
    struct IAgSc3dFont * _result = 0;
    HRESULT _hr = get_MediumFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSc3dFontPtr(_result, false);
}

IAgSc3dFontPtr _IAgScVO::GetLargeFont ( ) {
    struct IAgSc3dFont * _result = 0;
    HRESULT _hr = get_LargeFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSc3dFontPtr(_result, false);
}

enum AgESurfaceReference _IAgScVO::GetSurfaceReference ( ) {
    enum AgESurfaceReference _result;
    HRESULT _hr = get_SurfaceReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutSurfaceReference ( enum AgESurfaceReference pVal ) {
    HRESULT _hr = put_SurfaceReference(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScVO::GetDrawOnTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawOnTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutDrawOnTerrain ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawOnTerrain(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgScVO::GetChunkTerrainCacheSize ( ) {
    long _result = 0;
    HRESULT _hr = get_ChunkTerrainCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutChunkTerrainCacheSize ( long pVal ) {
    HRESULT _hr = put_ChunkTerrainCacheSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETextOutlineStyle _IAgScVO::GetTextOutlineStyle ( ) {
    enum AgETextOutlineStyle _result;
    HRESULT _hr = get_TextOutlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutTextOutlineStyle ( enum AgETextOutlineStyle pVal ) {
    HRESULT _hr = put_TextOutlineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgScVO::GetTextOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TextOutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutTextOutlineColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_TextOutlineColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScVO::GetTextAntialiasingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TextAntialiasingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScVO::PutTextAntialiasingEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TextAntialiasingEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnComplexConicPattern wrapper method implementations
//

_variant_t _IAgSnComplexConicPattern::GetInnerConeHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InnerConeHalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnComplexConicPattern::PutInnerConeHalfAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_InnerConeHalfAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnComplexConicPattern::GetOuterConeHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OuterConeHalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnComplexConicPattern::PutOuterConeHalfAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_OuterConeHalfAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnComplexConicPattern::GetMinimumClockAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinimumClockAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnComplexConicPattern::PutMinimumClockAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinimumClockAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnComplexConicPattern::GetMaximumClockAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaximumClockAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnComplexConicPattern::PutMaximumClockAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaximumClockAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgSnComplexConicPattern::SetClockAngles ( const _variant_t & Min, const _variant_t & Max ) {
    HRESULT _hr = raw_SetClockAngles(Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgSnComplexConicPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnComplexConicPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnComplexConicPattern wrapper method implementations
//

_variant_t IAgSnComplexConicPattern::GetInnerConeHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InnerConeHalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnComplexConicPattern::PutInnerConeHalfAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_InnerConeHalfAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnComplexConicPattern::GetOuterConeHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OuterConeHalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnComplexConicPattern::PutOuterConeHalfAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_OuterConeHalfAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnComplexConicPattern::GetMinimumClockAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinimumClockAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnComplexConicPattern::PutMinimumClockAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinimumClockAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnComplexConicPattern::GetMaximumClockAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaximumClockAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnComplexConicPattern::PutMaximumClockAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaximumClockAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgSnComplexConicPattern::SetClockAngles ( const _variant_t & Min, const _variant_t & Max ) {
    HRESULT _hr = raw_SetClockAngles(Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgSnComplexConicPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnComplexConicPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnCustomPattern wrapper method implementations
//

_bstr_t _IAgSnCustomPattern::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSnCustomPattern::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnCustomPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnCustomPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnCustomPattern::GetUseNativeResolution ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseNativeResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnCustomPattern::PutUseNativeResolution ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseNativeResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnCustomPattern wrapper method implementations
//

_bstr_t IAgSnCustomPattern::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSnCustomPattern::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnCustomPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnCustomPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnCustomPattern::GetUseNativeResolution ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseNativeResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnCustomPattern::PutUseNativeResolution ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseNativeResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnHalfPowerPattern wrapper method implementations
//

double _IAgSnHalfPowerPattern::GetFrequency ( ) {
    double _result = 0;
    HRESULT _hr = get_Frequency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnHalfPowerPattern::PutFrequency ( double pVal ) {
    HRESULT _hr = put_Frequency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnHalfPowerPattern::GetAntennaDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_AntennaDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnHalfPowerPattern::PutAntennaDiameter ( double pVal ) {
    HRESULT _hr = put_AntennaDiameter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnHalfPowerPattern::GetHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgSnHalfPowerPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnHalfPowerPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnHalfPowerPattern wrapper method implementations
//

double IAgSnHalfPowerPattern::GetFrequency ( ) {
    double _result = 0;
    HRESULT _hr = get_Frequency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnHalfPowerPattern::PutFrequency ( double pVal ) {
    HRESULT _hr = put_Frequency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnHalfPowerPattern::GetAntennaDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_AntennaDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnHalfPowerPattern::PutAntennaDiameter ( double pVal ) {
    HRESULT _hr = put_AntennaDiameter(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnHalfPowerPattern::GetHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgSnHalfPowerPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnHalfPowerPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnRectangularPattern wrapper method implementations
//

_variant_t _IAgSnRectangularPattern::GetVerticalHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalHalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnRectangularPattern::PutVerticalHalfAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_VerticalHalfAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnRectangularPattern::GetHorizontalHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalHalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnRectangularPattern::PutHorizontalHalfAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_HorizontalHalfAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnRectangularPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnRectangularPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnRectangularPattern wrapper method implementations
//

_variant_t IAgSnRectangularPattern::GetVerticalHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalHalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnRectangularPattern::PutVerticalHalfAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_VerticalHalfAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnRectangularPattern::GetHorizontalHalfAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalHalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnRectangularPattern::PutHorizontalHalfAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_HorizontalHalfAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnRectangularPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnRectangularPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnSARPattern wrapper method implementations
//

double _IAgSnSARPattern::GetParentAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_ParentAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnSARPattern::PutParentAltitude ( double pVal ) {
    HRESULT _hr = put_ParentAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnSARPattern::GetMinElevationAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinElevationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnSARPattern::PutMinElevationAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinElevationAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnSARPattern::GetMaxElevationAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxElevationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnSARPattern::PutMaxElevationAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxElevationAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnSARPattern::GetForeExclusionAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ForeExclusionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnSARPattern::PutForeExclusionAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_ForeExclusionAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnSARPattern::GetAftExclusionAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AftExclusionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnSARPattern::PutAftExclusionAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_AftExclusionAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgSnSARPattern::SetElevationAngles ( const _variant_t & Min, const _variant_t & Max ) {
    HRESULT _hr = raw_SetElevationAngles(Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgSnSARPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnSARPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnSARPattern wrapper method implementations
//

double IAgSnSARPattern::GetParentAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_ParentAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnSARPattern::PutParentAltitude ( double pVal ) {
    HRESULT _hr = put_ParentAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnSARPattern::GetMinElevationAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinElevationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnSARPattern::PutMinElevationAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinElevationAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnSARPattern::GetMaxElevationAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxElevationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnSARPattern::PutMaxElevationAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxElevationAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnSARPattern::GetForeExclusionAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ForeExclusionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnSARPattern::PutForeExclusionAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_ForeExclusionAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnSARPattern::GetAftExclusionAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AftExclusionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnSARPattern::PutAftExclusionAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_AftExclusionAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgSnSARPattern::SetElevationAngles ( const _variant_t & Min, const _variant_t & Max ) {
    HRESULT _hr = raw_SetElevationAngles(Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgSnSARPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnSARPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnSimpleConicPattern wrapper method implementations
//

_variant_t _IAgSnSimpleConicPattern::GetConeAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ConeAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnSimpleConicPattern::PutConeAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_ConeAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnSimpleConicPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnSimpleConicPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnSimpleConicPattern wrapper method implementations
//

_variant_t IAgSnSimpleConicPattern::GetConeAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ConeAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnSimpleConicPattern::PutConeAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_ConeAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnSimpleConicPattern::GetAngularResolution ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AngularResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnSimpleConicPattern::PutAngularResolution ( const _variant_t & pVal ) {
    HRESULT _hr = put_AngularResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnPtFixed wrapper method implementations
//

STKUtil::IAgOrientationPtr _IAgSnPtFixed::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

//
// interface IAgSnPtFixed wrapper method implementations
//

STKUtil::IAgOrientationPtr IAgSnPtFixed::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

//
// interface _IAgSnPtFixedAxes wrapper method implementations
//

_bstr_t _IAgSnPtFixedAxes::GetReferenceAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSnPtFixedAxes::PutReferenceAxes ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceAxes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr _IAgSnPtFixedAxes::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

SAFEARRAY * _IAgSnPtFixedAxes::GetAvailableAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgSnPtFixedAxes wrapper method implementations
//

_bstr_t IAgSnPtFixedAxes::GetReferenceAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSnPtFixedAxes::PutReferenceAxes ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceAxes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr IAgSnPtFixedAxes::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

SAFEARRAY * IAgSnPtFixedAxes::GetAvailableAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgSnPt3DModel wrapper method implementations
//

_bstr_t _IAgSnPt3DModel::GetAttachName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSnPt3DModel::PutAttachName ( _bstr_t pVal ) {
    HRESULT _hr = put_AttachName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgSnPt3DModel::GetAvailableElements ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgSnPt3DModel wrapper method implementations
//

_bstr_t IAgSnPt3DModel::GetAttachName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSnPt3DModel::PutAttachName ( _bstr_t pVal ) {
    HRESULT _hr = put_AttachName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgSnPt3DModel::GetAvailableElements ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgSnPtSpinning wrapper method implementations
//

_variant_t _IAgSnPtSpinning::GetSpinAxisAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SpinAxisAzimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnPtSpinning::PutSpinAxisAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_SpinAxisAzimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnPtSpinning::GetSpinAxisElevation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SpinAxisElevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnPtSpinning::PutSpinAxisElevation ( const _variant_t & pVal ) {
    HRESULT _hr = put_SpinAxisElevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnPtSpinning::GetSpinAxisConeAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SpinAxisConeAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnPtSpinning::PutSpinAxisConeAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_SpinAxisConeAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnScanMode _IAgSnPtSpinning::GetScanMode ( ) {
    enum AgESnScanMode _result;
    HRESULT _hr = get_ScanMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnPtSpinning::PutScanMode ( enum AgESnScanMode pVal ) {
    HRESULT _hr = put_ScanMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnPtSpinning::GetClockAngleStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ClockAngleStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnPtSpinning::PutClockAngleStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_ClockAngleStart(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnPtSpinning::GetClockAngleStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ClockAngleStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnPtSpinning::PutClockAngleStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_ClockAngleStop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnPtSpinning::GetSpinRate ( ) {
    double _result = 0;
    HRESULT _hr = get_SpinRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnPtSpinning::PutSpinRate ( double pVal ) {
    HRESULT _hr = put_SpinRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSnPtSpinning::GetOffsetAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OffsetAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnPtSpinning::PutOffsetAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_OffsetAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgSnPtSpinning::SetClockAngles ( const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_SetClockAngles(Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgSnPtSpinning wrapper method implementations
//

_variant_t IAgSnPtSpinning::GetSpinAxisAzimuth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SpinAxisAzimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnPtSpinning::PutSpinAxisAzimuth ( const _variant_t & pVal ) {
    HRESULT _hr = put_SpinAxisAzimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnPtSpinning::GetSpinAxisElevation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SpinAxisElevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnPtSpinning::PutSpinAxisElevation ( const _variant_t & pVal ) {
    HRESULT _hr = put_SpinAxisElevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnPtSpinning::GetSpinAxisConeAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SpinAxisConeAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnPtSpinning::PutSpinAxisConeAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_SpinAxisConeAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnScanMode IAgSnPtSpinning::GetScanMode ( ) {
    enum AgESnScanMode _result;
    HRESULT _hr = get_ScanMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnPtSpinning::PutScanMode ( enum AgESnScanMode pVal ) {
    HRESULT _hr = put_ScanMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnPtSpinning::GetClockAngleStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ClockAngleStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnPtSpinning::PutClockAngleStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_ClockAngleStart(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnPtSpinning::GetClockAngleStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ClockAngleStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnPtSpinning::PutClockAngleStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_ClockAngleStop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnPtSpinning::GetSpinRate ( ) {
    double _result = 0;
    HRESULT _hr = get_SpinRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnPtSpinning::PutSpinRate ( double pVal ) {
    HRESULT _hr = put_SpinRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSnPtSpinning::GetOffsetAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OffsetAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnPtSpinning::PutOffsetAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_OffsetAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgSnPtSpinning::SetClockAngles ( const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_SetClockAngles(Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgAccessTime wrapper method implementations
//

_variant_t IAgAccessTime::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgAccessTime::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t IAgAccessTime::GetTarget ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgAccessTimeCollection wrapper method implementations
//

long IAgAccessTimeCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAccessTimePtr IAgAccessTimeCollection::GetItem ( long Index ) {
    struct IAgAccessTime * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessTimePtr(_result, false);
}

IUnknownPtr IAgAccessTimeCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgScheduleTime wrapper method implementations
//

_variant_t IAgScheduleTime::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgScheduleTime::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgScheduleTime::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgScheduleTime::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgScheduleTime::GetTarget ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgScheduleTime::PutTarget ( _bstr_t pVal ) {
    HRESULT _hr = put_Target(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgScheduleTimeCollection wrapper method implementations
//

long IAgScheduleTimeCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgScheduleTimePtr IAgScheduleTimeCollection::Add ( const _variant_t & Start, const _variant_t & Stop, _bstr_t Name ) {
    struct IAgScheduleTime * _result = 0;
    HRESULT _hr = raw_Add(Start, Stop, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScheduleTimePtr(_result, false);
}

HRESULT IAgScheduleTimeCollection::RemoveIndex ( long Index ) {
    HRESULT _hr = raw_RemoveIndex(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgScheduleTimeCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgScheduleTimeCollection::RemoveSchedule ( const _variant_t & Start, const _variant_t & Stop, _bstr_t Name ) {
    HRESULT _hr = raw_RemoveSchedule(Start, Stop, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgScheduleTimePtr IAgScheduleTimeCollection::GetItem ( long Index ) {
    struct IAgScheduleTime * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScheduleTimePtr(_result, false);
}

IUnknownPtr IAgScheduleTimeCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgScheduleTimeCollection::Deconflict ( ) {
    HRESULT _hr = raw_Deconflict();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgSnTarget wrapper method implementations
//

_bstr_t IAgSnTarget::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgAccessEventDetection wrapper method implementations
//

enum AgEEventDetection IAgAccessEventDetection::GetType ( ) {
    enum AgEEventDetection _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgAccessEventDetection::SetType ( enum AgEEventDetection EventDetection ) {
    HRESULT _hr = raw_SetType(EventDetection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgAccessEventDetection::IsTypeSupported ( enum AgEEventDetection EventDetection ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTypeSupported(EventDetection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgAccessEventDetection::GetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgEventDetectionStrategyPtr IAgAccessEventDetection::GetStrategy ( ) {
    struct IAgEventDetectionStrategy * _result = 0;
    HRESULT _hr = get_Strategy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgEventDetectionStrategyPtr(_result, false);
}

//
// interface IAgAccessSampling wrapper method implementations
//

enum AgESamplingMethod IAgAccessSampling::GetType ( ) {
    enum AgESamplingMethod _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgAccessSampling::SetType ( enum AgESamplingMethod SamplingMethod ) {
    HRESULT _hr = raw_SetType(SamplingMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgAccessSampling::IsTypeSupported ( enum AgESamplingMethod SamplingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTypeSupported(SamplingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgAccessSampling::GetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSamplingMethodStrategyPtr IAgAccessSampling::GetStrategy ( ) {
    struct IAgSamplingMethodStrategy * _result = 0;
    HRESULT _hr = get_Strategy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSamplingMethodStrategyPtr(_result, false);
}

//
// interface IAgAccessAdvanced wrapper method implementations
//

enum AgEAberrationType IAgAccessAdvanced::GetAberrationType ( ) {
    enum AgEAberrationType _result;
    HRESULT _hr = get_AberrationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessAdvanced::PutAberrationType ( enum AgEAberrationType pVal ) {
    HRESULT _hr = put_AberrationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgAccessAdvanced::GetTimeDelayConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeDelayConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessAdvanced::PutTimeDelayConvergence ( double pVal ) {
    HRESULT _hr = put_TimeDelayConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessEventDetectionPtr IAgAccessAdvanced::GetEventDetection ( ) {
    struct IAgAccessEventDetection * _result = 0;
    HRESULT _hr = get_EventDetection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessEventDetectionPtr(_result, false);
}

IAgAccessSamplingPtr IAgAccessAdvanced::GetSampling ( ) {
    struct IAgAccessSampling * _result = 0;
    HRESULT _hr = get_Sampling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessSamplingPtr(_result, false);
}

//
// interface _IAgSnPtExternal wrapper method implementations
//

_bstr_t _IAgSnPtExternal::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSnPtExternal::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnPtExternal wrapper method implementations
//

_bstr_t IAgSnPtExternal::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSnPtExternal::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnPtTrgtBsightTrack wrapper method implementations
//

enum AgEBoresightType _IAgSnPtTrgtBsightTrack::GetAboutBoresight ( ) {
    enum AgEBoresightType _result;
    HRESULT _hr = get_AboutBoresight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnPtTrgtBsightTrack::PutAboutBoresight ( enum AgEBoresightType pVal ) {
    HRESULT _hr = put_AboutBoresight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETrackModeType _IAgSnPtTrgtBsightTrack::GetTrackMode ( ) {
    enum AgETrackModeType _result;
    HRESULT _hr = get_TrackMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnPtTrgtBsightTrack::PutTrackMode ( enum AgETrackModeType pVal ) {
    HRESULT _hr = put_TrackMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnPtTrgtBsightTrack wrapper method implementations
//

enum AgEBoresightType IAgSnPtTrgtBsightTrack::GetAboutBoresight ( ) {
    enum AgEBoresightType _result;
    HRESULT _hr = get_AboutBoresight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnPtTrgtBsightTrack::PutAboutBoresight ( enum AgEBoresightType pVal ) {
    HRESULT _hr = put_AboutBoresight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETrackModeType IAgSnPtTrgtBsightTrack::GetTrackMode ( ) {
    enum AgETrackModeType _result;
    HRESULT _hr = get_TrackMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnPtTrgtBsightTrack::PutTrackMode ( enum AgETrackModeType pVal ) {
    HRESULT _hr = put_TrackMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnPtTrgtBsightFixed wrapper method implementations
//

STKUtil::IAgOrientationPtr _IAgSnPtTrgtBsightFixed::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

//
// interface IAgSnPtTrgtBsightFixed wrapper method implementations
//

STKUtil::IAgOrientationPtr IAgSnPtTrgtBsightFixed::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

//
// interface _IAgSnTarget wrapper method implementations
//

_bstr_t _IAgSnTarget::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgAccessTime wrapper method implementations
//

_variant_t _IAgAccessTime::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgAccessTime::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t _IAgAccessTime::GetTarget ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgScheduleTime wrapper method implementations
//

_variant_t _IAgScheduleTime::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgScheduleTime::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgScheduleTime::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgScheduleTime::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgScheduleTime::GetTarget ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScheduleTime::PutTarget ( _bstr_t pVal ) {
    HRESULT _hr = put_Target(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnAzElMaskFile wrapper method implementations
//

_bstr_t _IAgSnAzElMaskFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgESnAzElBsightAxisType _IAgSnAzElMaskFile::GetBoresightAxis ( ) {
    enum AgESnAzElBsightAxisType _result;
    HRESULT _hr = get_BoresightAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnAzElMaskFile::PutBoresightAxis ( enum AgESnAzElBsightAxisType pVal ) {
    HRESULT _hr = put_BoresightAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnAzElMaskFile wrapper method implementations
//

_bstr_t IAgSnAzElMaskFile::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgESnAzElBsightAxisType IAgSnAzElMaskFile::GetBoresightAxis ( ) {
    enum AgESnAzElBsightAxisType _result;
    HRESULT _hr = get_BoresightAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnAzElMaskFile::PutBoresightAxis ( enum AgESnAzElBsightAxisType pVal ) {
    HRESULT _hr = put_BoresightAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnProjection wrapper method implementations
//

double IAgSnProjection::GetPersistence ( ) {
    double _result = 0;
    HRESULT _hr = get_Persistence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjection::PutPersistence ( double pVal ) {
    HRESULT _hr = put_Persistence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnProjection::GetForwardPersistence ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForwardPersistence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjection::PutForwardPersistence ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ForwardPersistence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgSnProjection::GetProjectAtAltObject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProjectAtAltObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSnProjection::PutProjectAtAltObject ( _bstr_t pVal ) {
    HRESULT _hr = put_ProjectAtAltObject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEIntersectionType IAgSnProjection::GetIntersectionType ( ) {
    enum AgEIntersectionType _result;
    HRESULT _hr = get_IntersectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjection::PutIntersectionType ( enum AgEIntersectionType pVal ) {
    HRESULT _hr = put_IntersectionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnProjectionDistanceType IAgSnProjection::GetDistanceType ( ) {
    enum AgESnProjectionDistanceType _result;
    HRESULT _hr = get_DistanceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjection::PutDistanceType ( enum AgESnProjectionDistanceType pVal ) {
    HRESULT _hr = put_DistanceType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgDisplayDistancePtr IAgSnProjection::GetDistanceData ( ) {
    struct IAgDisplayDistance * _result = 0;
    HRESULT _hr = get_DistanceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayDistancePtr(_result, false);
}

VARIANT_BOOL IAgSnProjection::GetFillPersistence ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillPersistence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjection::PutFillPersistence ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillPersistence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnProjection::GetUseConstraints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjection::PutUseConstraints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseConstraints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgSnProjection::AvailableConstraints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_AvailableConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgSnProjection::EnabledConstraints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_EnabledConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSnProjection::EnableConstraint ( _bstr_t ConstraintName ) {
    HRESULT _hr = raw_EnableConstraint(ConstraintName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSnProjection::DisableConstraint ( _bstr_t ConstraintName ) {
    HRESULT _hr = raw_DisableConstraint(ConstraintName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgSnProjection::AvailableAltitudeObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_AvailableAltitudeObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgSnProjection::GetShowOn2DMap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowOn2DMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjection::PutShowOn2DMap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowOn2DMap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnProjection::GetUseDistance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjection::PutUseDistance ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseDistance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnGraphics wrapper method implementations
//

VARIANT_BOOL _IAgSnGraphics::GetInheritFromScenario ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFromScenario(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnGraphics::PutInheritFromScenario ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritFromScenario(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnGraphics::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnGraphics::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgSnGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnGraphics::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgSnGraphics::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnGraphics::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgSnGraphics::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnGraphics::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnGraphics::GetEnableBoresightGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableBoresightGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnGraphics::PutEnableBoresightGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableBoresightGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgSnGraphics::GetBoresightColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BoresightColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnGraphics::PutBoresightColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BoresightColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgSnGraphics::GetBoresightMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BoresightMarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSnGraphics::PutBoresightMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_BoresightMarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnProjectionPtr _IAgSnGraphics::GetProjection ( ) {
    struct IAgSnProjection * _result = 0;
    HRESULT _hr = get_Projection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnProjectionPtr(_result, false);
}

VARIANT_BOOL _IAgSnGraphics::GetFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnGraphics::PutFillVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEGraphicsFillStyle _IAgSnGraphics::GetFillStyle ( ) {
    enum AgEGraphicsFillStyle _result;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnGraphics::PutFillStyle ( enum AgEGraphicsFillStyle pVal ) {
    HRESULT _hr = put_FillStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnGraphics wrapper method implementations
//

VARIANT_BOOL IAgSnGraphics::GetInheritFromScenario ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFromScenario(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnGraphics::PutInheritFromScenario ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritFromScenario(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnGraphics::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnGraphics::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgSnGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnGraphics::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgSnGraphics::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnGraphics::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgSnGraphics::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnGraphics::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnGraphics::GetEnableBoresightGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableBoresightGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnGraphics::PutEnableBoresightGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableBoresightGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgSnGraphics::GetBoresightColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BoresightColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnGraphics::PutBoresightColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BoresightColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgSnGraphics::GetBoresightMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BoresightMarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSnGraphics::PutBoresightMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_BoresightMarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnProjectionPtr IAgSnGraphics::GetProjection ( ) {
    struct IAgSnProjection * _result = 0;
    HRESULT _hr = get_Projection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnProjectionPtr(_result, false);
}

VARIANT_BOOL IAgSnGraphics::GetFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnGraphics::PutFillVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEGraphicsFillStyle IAgSnGraphics::GetFillStyle ( ) {
    enum AgEGraphicsFillStyle _result;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnGraphics::PutFillStyle ( enum AgEGraphicsFillStyle pVal ) {
    HRESULT _hr = put_FillStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnProjection wrapper method implementations
//

double _IAgSnProjection::GetPersistence ( ) {
    double _result = 0;
    HRESULT _hr = get_Persistence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjection::PutPersistence ( double pVal ) {
    HRESULT _hr = put_Persistence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnProjection::GetForwardPersistence ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForwardPersistence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjection::PutForwardPersistence ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ForwardPersistence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgSnProjection::GetProjectAtAltObject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProjectAtAltObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSnProjection::PutProjectAtAltObject ( _bstr_t pVal ) {
    HRESULT _hr = put_ProjectAtAltObject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEIntersectionType _IAgSnProjection::GetIntersectionType ( ) {
    enum AgEIntersectionType _result;
    HRESULT _hr = get_IntersectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjection::PutIntersectionType ( enum AgEIntersectionType pVal ) {
    HRESULT _hr = put_IntersectionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnProjection::GetUseConstraints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjection::PutUseConstraints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseConstraints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnProjectionDistanceType _IAgSnProjection::GetDistanceType ( ) {
    enum AgESnProjectionDistanceType _result;
    HRESULT _hr = get_DistanceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjection::PutDistanceType ( enum AgESnProjectionDistanceType pVal ) {
    HRESULT _hr = put_DistanceType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgDisplayDistancePtr _IAgSnProjection::GetDistanceData ( ) {
    struct IAgDisplayDistance * _result = 0;
    HRESULT _hr = get_DistanceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayDistancePtr(_result, false);
}

VARIANT_BOOL _IAgSnProjection::GetFillPersistence ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillPersistence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjection::PutFillPersistence ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillPersistence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgSnProjection::AvailableAltitudeObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_AvailableAltitudeObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSnProjection::AvailableConstraints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_AvailableConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSnProjection::EnableConstraint ( _bstr_t ConstraintName ) {
    HRESULT _hr = raw_EnableConstraint(ConstraintName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgSnProjection::EnabledConstraints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_EnabledConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSnProjection::DisableConstraint ( _bstr_t ConstraintName ) {
    HRESULT _hr = raw_DisableConstraint(ConstraintName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgSnProjection::GetShowOn2DMap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowOn2DMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjection::PutShowOn2DMap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowOn2DMap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnProjection::GetUseDistance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjection::PutUseDistance ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseDistance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnProjDisplayDistance wrapper method implementations
//

double _IAgSnProjDisplayDistance::GetMin ( ) {
    double _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjDisplayDistance::PutMin ( double pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnProjDisplayDistance::GetMax ( ) {
    double _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjDisplayDistance::PutMax ( double pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgSnProjDisplayDistance::GetNumberOfSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjDisplayDistance::PutNumberOfSteps ( long pVal ) {
    HRESULT _hr = put_NumberOfSteps(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnProjDisplayDistance::GetProjectsThruCrossing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectsThruCrossing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjDisplayDistance::PutProjectsThruCrossing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProjectsThruCrossing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnAltCrossingSides _IAgSnProjDisplayDistance::GetAltCrossingSides ( ) {
    enum AgESnAltCrossingSides _result;
    HRESULT _hr = get_AltCrossingSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjDisplayDistance::PutAltCrossingSides ( enum AgESnAltCrossingSides pVal ) {
    HRESULT _hr = put_AltCrossingSides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnAltCrossingDirection _IAgSnProjDisplayDistance::GetDirection ( ) {
    enum AgESnAltCrossingDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjDisplayDistance::PutDirection ( enum AgESnAltCrossingDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnProjDisplayDistance wrapper method implementations
//

double IAgSnProjDisplayDistance::GetMin ( ) {
    double _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjDisplayDistance::PutMin ( double pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnProjDisplayDistance::GetMax ( ) {
    double _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjDisplayDistance::PutMax ( double pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgSnProjDisplayDistance::GetNumberOfSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjDisplayDistance::PutNumberOfSteps ( long pVal ) {
    HRESULT _hr = put_NumberOfSteps(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnProjDisplayDistance::GetProjectsThruCrossing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectsThruCrossing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjDisplayDistance::PutProjectsThruCrossing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProjectsThruCrossing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnAltCrossingSides IAgSnProjDisplayDistance::GetAltCrossingSides ( ) {
    enum AgESnAltCrossingSides _result;
    HRESULT _hr = get_AltCrossingSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjDisplayDistance::PutAltCrossingSides ( enum AgESnAltCrossingSides pVal ) {
    HRESULT _hr = put_AltCrossingSides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnAltCrossingDirection IAgSnProjDisplayDistance::GetDirection ( ) {
    enum AgESnAltCrossingDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjDisplayDistance::PutDirection ( enum AgESnAltCrossingDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnVOPulse wrapper method implementations
//

VARIANT_BOOL IAgSnVOPulse::GetPulseVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PulseVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOPulse::PutPulseVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PulseVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVOPulse::GetAmplitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Amplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOPulse::PutAmplitude ( double pVal ) {
    HRESULT _hr = put_Amplitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVOPulse::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOPulse::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOPulseStyle IAgSnVOPulse::GetStyle ( ) {
    enum AgESnVOPulseStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOPulse::PutStyle ( enum AgESnVOPulseStyle pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVOPulse::GetEnableSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSmooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOPulse::PutEnableSmooth ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSmooth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOPulseFrequencyPreset IAgSnVOPulse::GetPreselFreq ( ) {
    enum AgESnVOPulseFrequencyPreset _result;
    HRESULT _hr = get_PreselFreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOPulse::PutPreselFreq ( enum AgESnVOPulseFrequencyPreset pVal ) {
    HRESULT _hr = put_PreselFreq(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVOPulse::GetFreqValue ( ) {
    double _result = 0;
    HRESULT _hr = get_FreqValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOPulse::PutFreqValue ( double pVal ) {
    HRESULT _hr = put_FreqValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVOPulse::GetFreqReverseDir ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FreqReverseDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOPulse::PutFreqReverseDir ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FreqReverseDir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgSnVOPulse::ResetToDefaults ( ) {
    HRESULT _hr = raw_ResetToDefaults();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgSnVOOffset wrapper method implementations
//

VARIANT_BOOL IAgSnVOOffset::GetInheritFromParentObj ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFromParentObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOOffset::PutInheritFromParentObj ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritFromParentObj(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVOOffset::GetEnableTranslational ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableTranslational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOOffset::PutEnableTranslational ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableTranslational(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVOOffset::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOOffset::PutX ( double pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVOOffset::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOOffset::PutY ( double pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVOOffset::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOOffset::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVOOffset::GetAxisOffsetValue ( enum AgEAxisOffset OffsetType ) {
    double _result = 0;
    HRESULT _hr = raw_GetAxisOffsetValue(OffsetType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSnVOOffset::SetAxisOffsetValue ( enum AgEAxisOffset OffsetType, double AxisOffsetValue ) {
    HRESULT _hr = raw_SetAxisOffsetValue(OffsetType, AxisOffsetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgSnVOOffset::GetEnableAttachPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAttachPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOOffset::PutEnableAttachPoint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAttachPoint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgSnVOOffset::GetAttachPtName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachPtName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSnVOOffset::PutAttachPtName ( _bstr_t pVal ) {
    HRESULT _hr = put_AttachPtName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgSnVOOffset::GetAvailableAttachPoints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAttachPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgSnVOProjectionElement wrapper method implementations
//

_variant_t IAgSnVOProjectionElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnVOProjectionElement::PutTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVOProjectionElement::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVOProjectionElement::PutDistance ( double pVal ) {
    HRESULT _hr = put_Distance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnVOSpaceProjectionCollection wrapper method implementations
//

long IAgSnVOSpaceProjectionCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSnVOProjectionElementPtr IAgSnVOSpaceProjectionCollection::GetItem ( long Index ) {
    struct IAgSnVOProjectionElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOProjectionElementPtr(_result, false);
}

IUnknownPtr IAgSnVOSpaceProjectionCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgSnVOSpaceProjectionCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSnVOSpaceProjectionCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSnVOProjectionElementPtr IAgSnVOSpaceProjectionCollection::Add ( ) {
    struct IAgSnVOProjectionElement * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOProjectionElementPtr(_result, false);
}

//
// interface IAgSnVOTargetProjectionCollection wrapper method implementations
//

long IAgSnVOTargetProjectionCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSnVOProjectionElementPtr IAgSnVOTargetProjectionCollection::GetItem ( long Index ) {
    struct IAgSnVOProjectionElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOProjectionElementPtr(_result, false);
}

IUnknownPtr IAgSnVOTargetProjectionCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgSnVOTargetProjectionCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSnVOTargetProjectionCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSnVOProjectionElementPtr IAgSnVOTargetProjectionCollection::Add ( ) {
    struct IAgSnVOProjectionElement * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOProjectionElementPtr(_result, false);
}

//
// interface _IAgSnVO wrapper method implementations
//

VARIANT_BOOL _IAgSnVO::GetBoresightMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoresightMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutBoresightMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BoresightMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVO::GetRadialLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RadialLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutRadialLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RadialLinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVO::GetTranslucentLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TranslucentLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutTranslucentLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TranslucentLinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVO::GetPercentTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutPercentTranslucency ( double pVal ) {
    HRESULT _hr = put_PercentTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOProjectionType _IAgSnVO::GetProjectionType ( ) {
    enum AgESnVOProjectionType _result;
    HRESULT _hr = get_ProjectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutProjectionType ( enum AgESnVOProjectionType pVal ) {
    HRESULT _hr = put_ProjectionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVO::GetSpaceProjection ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceProjection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutSpaceProjection ( double pVal ) {
    HRESULT _hr = put_SpaceProjection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVO::GetTargeting ( ) {
    double _result = 0;
    HRESULT _hr = get_Targeting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutTargeting ( double pVal ) {
    HRESULT _hr = put_Targeting(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVO::GetEnableConstExtLength ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableConstExtLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutEnableConstExtLength ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableConstExtLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVO::GetEnableRangeConstraint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableRangeConstraint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutEnableRangeConstraint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableRangeConstraint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnVOPulsePtr _IAgSnVO::GetPulse ( ) {
    struct IAgSnVOPulse * _result = 0;
    HRESULT _hr = get_Pulse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOPulsePtr(_result, false);
}

IAgSnVOOffsetPtr _IAgSnVO::GetVertexOffset ( ) {
    struct IAgSnVOOffset * _result = 0;
    HRESULT _hr = get_VertexOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOOffsetPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgSnVO::GetDataDisplays ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOVectorPtr _IAgSnVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

VARIANT_BOOL _IAgSnVO::GetFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutFillVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVO::GetFillTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_FillTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutFillTranslucency ( double pVal ) {
    HRESULT _hr = put_FillTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOInheritFrom2D _IAgSnVO::GetInheritFrom2D ( ) {
    enum AgESnVOInheritFrom2D _result;
    HRESULT _hr = get_InheritFrom2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutInheritFrom2D ( enum AgESnVOInheritFrom2D pVal ) {
    HRESULT _hr = put_InheritFrom2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOVisualAppearance _IAgSnVO::GetOptimizeVisualAppearance ( ) {
    enum AgESnVOVisualAppearance _result;
    HRESULT _hr = get_OptimizeVisualAppearance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutOptimizeVisualAppearance ( enum AgESnVOVisualAppearance pVal ) {
    HRESULT _hr = put_OptimizeVisualAppearance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOTimeDependency _IAgSnVO::GetTimeDependency ( ) {
    enum AgESnVOTimeDependency _result;
    HRESULT _hr = get_TimeDependency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutTimeDependency ( enum AgESnVOTimeDependency pVal ) {
    HRESULT _hr = put_TimeDependency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVO::GetIsTargeted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTargeted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSnVOSpaceProjectionCollectionPtr _IAgSnVO::GetSpaceProjectionIntervals ( ) {
    struct IAgSnVOSpaceProjectionCollection * _result = 0;
    HRESULT _hr = get_SpaceProjectionIntervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOSpaceProjectionCollectionPtr(_result, false);
}

IAgSnVOTargetProjectionCollectionPtr _IAgSnVO::GetTargetProjectionIntervals ( ) {
    struct IAgSnVOTargetProjectionCollection * _result = 0;
    HRESULT _hr = get_TargetProjectionIntervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOTargetProjectionCollectionPtr(_result, false);
}

double _IAgSnVO::GetFillResolution ( ) {
    double _result = 0;
    HRESULT _hr = get_FillResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutFillResolution ( double pVal ) {
    HRESULT _hr = put_FillResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVO::GetPersistProjectedLinesInSpace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistProjectedLinesInSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutPersistProjectedLinesInSpace ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PersistProjectedLinesInSpace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVO::GetPersistPartialCentralBodyIntersectionLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistPartialCentralBodyIntersectionLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVO::PutPersistPartialCentralBodyIntersectionLines ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PersistPartialCentralBodyIntersectionLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnVO wrapper method implementations
//

VARIANT_BOOL IAgSnVO::GetBoresightMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoresightMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutBoresightMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BoresightMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVO::GetRadialLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RadialLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutRadialLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RadialLinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVO::GetTranslucentLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TranslucentLinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutTranslucentLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TranslucentLinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVO::GetPercentTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutPercentTranslucency ( double pVal ) {
    HRESULT _hr = put_PercentTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOProjectionType IAgSnVO::GetProjectionType ( ) {
    enum AgESnVOProjectionType _result;
    HRESULT _hr = get_ProjectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutProjectionType ( enum AgESnVOProjectionType pVal ) {
    HRESULT _hr = put_ProjectionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVO::GetSpaceProjection ( ) {
    double _result = 0;
    HRESULT _hr = get_SpaceProjection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutSpaceProjection ( double pVal ) {
    HRESULT _hr = put_SpaceProjection(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVO::GetTargeting ( ) {
    double _result = 0;
    HRESULT _hr = get_Targeting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutTargeting ( double pVal ) {
    HRESULT _hr = put_Targeting(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVO::GetEnableConstExtLength ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableConstExtLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutEnableConstExtLength ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableConstExtLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVO::GetEnableRangeConstraint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableRangeConstraint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutEnableRangeConstraint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableRangeConstraint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnVOPulsePtr IAgSnVO::GetPulse ( ) {
    struct IAgSnVOPulse * _result = 0;
    HRESULT _hr = get_Pulse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOPulsePtr(_result, false);
}

IAgSnVOOffsetPtr IAgSnVO::GetVertexOffset ( ) {
    struct IAgSnVOOffset * _result = 0;
    HRESULT _hr = get_VertexOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOOffsetPtr(_result, false);
}

IAgVODataDisplayCollectionPtr IAgSnVO::GetDataDisplays ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOVectorPtr IAgSnVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

VARIANT_BOOL IAgSnVO::GetFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutFillVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnVO::GetFillTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_FillTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutFillTranslucency ( double pVal ) {
    HRESULT _hr = put_FillTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOInheritFrom2D IAgSnVO::GetInheritFrom2D ( ) {
    enum AgESnVOInheritFrom2D _result;
    HRESULT _hr = get_InheritFrom2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutInheritFrom2D ( enum AgESnVOInheritFrom2D pVal ) {
    HRESULT _hr = put_InheritFrom2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOVisualAppearance IAgSnVO::GetOptimizeVisualAppearance ( ) {
    enum AgESnVOVisualAppearance _result;
    HRESULT _hr = get_OptimizeVisualAppearance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutOptimizeVisualAppearance ( enum AgESnVOVisualAppearance pVal ) {
    HRESULT _hr = put_OptimizeVisualAppearance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOTimeDependency IAgSnVO::GetTimeDependency ( ) {
    enum AgESnVOTimeDependency _result;
    HRESULT _hr = get_TimeDependency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutTimeDependency ( enum AgESnVOTimeDependency pVal ) {
    HRESULT _hr = put_TimeDependency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVO::GetIsTargeted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTargeted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSnVOSpaceProjectionCollectionPtr IAgSnVO::GetSpaceProjectionIntervals ( ) {
    struct IAgSnVOSpaceProjectionCollection * _result = 0;
    HRESULT _hr = get_SpaceProjectionIntervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOSpaceProjectionCollectionPtr(_result, false);
}

IAgSnVOTargetProjectionCollectionPtr IAgSnVO::GetTargetProjectionIntervals ( ) {
    struct IAgSnVOTargetProjectionCollection * _result = 0;
    HRESULT _hr = get_TargetProjectionIntervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOTargetProjectionCollectionPtr(_result, false);
}

double IAgSnVO::GetFillResolution ( ) {
    double _result = 0;
    HRESULT _hr = get_FillResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutFillResolution ( double pVal ) {
    HRESULT _hr = put_FillResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVO::GetPersistProjectedLinesInSpace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistProjectedLinesInSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutPersistProjectedLinesInSpace ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PersistProjectedLinesInSpace(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnVO::GetPersistPartialCentralBodyIntersectionLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistPartialCentralBodyIntersectionLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnVO::PutPersistPartialCentralBodyIntersectionLines ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PersistPartialCentralBodyIntersectionLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnVOPulse wrapper method implementations
//

VARIANT_BOOL _IAgSnVOPulse::GetPulseVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PulseVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOPulse::PutPulseVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PulseVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVOPulse::GetAmplitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Amplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOPulse::PutAmplitude ( double pVal ) {
    HRESULT _hr = put_Amplitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVOPulse::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOPulse::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOPulseStyle _IAgSnVOPulse::GetStyle ( ) {
    enum AgESnVOPulseStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOPulse::PutStyle ( enum AgESnVOPulseStyle pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVOPulse::GetEnableSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSmooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOPulse::PutEnableSmooth ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSmooth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnVOPulseFrequencyPreset _IAgSnVOPulse::GetPreselFreq ( ) {
    enum AgESnVOPulseFrequencyPreset _result;
    HRESULT _hr = get_PreselFreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOPulse::PutPreselFreq ( enum AgESnVOPulseFrequencyPreset pVal ) {
    HRESULT _hr = put_PreselFreq(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVOPulse::GetFreqValue ( ) {
    double _result = 0;
    HRESULT _hr = get_FreqValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOPulse::PutFreqValue ( double pVal ) {
    HRESULT _hr = put_FreqValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVOPulse::GetFreqReverseDir ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FreqReverseDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOPulse::PutFreqReverseDir ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FreqReverseDir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgSnVOPulse::ResetToDefaults ( ) {
    HRESULT _hr = raw_ResetToDefaults();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgSnVOOffset wrapper method implementations
//

VARIANT_BOOL _IAgSnVOOffset::GetInheritFromParentObj ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFromParentObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOOffset::PutInheritFromParentObj ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritFromParentObj(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnVOOffset::GetEnableTranslational ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableTranslational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOOffset::PutEnableTranslational ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableTranslational(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVOOffset::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOOffset::PutX ( double pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVOOffset::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOOffset::PutY ( double pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVOOffset::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOOffset::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVOOffset::GetAxisOffsetValue ( enum AgEAxisOffset OffsetType ) {
    double _result = 0;
    HRESULT _hr = raw_GetAxisOffsetValue(OffsetType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSnVOOffset::SetAxisOffsetValue ( enum AgEAxisOffset OffsetType, double AxisOffsetValue ) {
    HRESULT _hr = raw_SetAxisOffsetValue(OffsetType, AxisOffsetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgSnVOOffset::GetEnableAttachPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAttachPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOOffset::PutEnableAttachPoint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAttachPoint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgSnVOOffset::GetAttachPtName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachPtName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSnVOOffset::PutAttachPtName ( _bstr_t pVal ) {
    HRESULT _hr = put_AttachPtName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgSnVOOffset::GetAvailableAttachPoints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAttachPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgAccessCnstrTimeSlipRange wrapper method implementations
//

_variant_t _IAgAccessCnstrTimeSlipRange::GetLaunchWindowStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LaunchWindowStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgAccessCnstrTimeSlipRange::GetLaunchWindowEnd ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LaunchWindowEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double _IAgAccessCnstrTimeSlipRange::GetRange ( ) {
    double _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgAccessCnstrTimeSlipRange::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrTimeSlipRange::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrTimeSlipRange::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrTimeSlipRange::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrTimeSlipRange::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrTimeSlipRange::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrTimeSlipRange::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrTimeSlipRange::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrTimeSlipRange::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrTimeSlipRange::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrTimeSlipRange wrapper method implementations
//

_variant_t IAgAccessCnstrTimeSlipRange::GetLaunchWindowStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LaunchWindowStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgAccessCnstrTimeSlipRange::GetLaunchWindowEnd ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LaunchWindowEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double IAgAccessCnstrTimeSlipRange::GetRange ( ) {
    double _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgAccessCnstrBackground wrapper method implementations
//

enum AgECnstrBackground _IAgAccessCnstrBackground::GetBackground ( ) {
    enum AgECnstrBackground _result;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrBackground::PutBackground ( enum AgECnstrBackground pVal ) {
    HRESULT _hr = put_Background(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAccessCnstrBackground::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrBackground::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrBackground::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrBackground::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrBackground::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrBackground::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrBackground::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrBackground::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrBackground::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrBackground::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrBackground wrapper method implementations
//

enum AgECnstrBackground IAgAccessCnstrBackground::GetBackground ( ) {
    enum AgECnstrBackground _result;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrBackground::PutBackground ( enum AgECnstrBackground pVal ) {
    HRESULT _hr = put_Background(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgAccessCnstrGroundTrack wrapper method implementations
//

enum AgECnstrGroundTrack _IAgAccessCnstrGroundTrack::GetDirection ( ) {
    enum AgECnstrGroundTrack _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrGroundTrack::PutDirection ( enum AgECnstrGroundTrack pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAccessCnstrGroundTrack::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrGroundTrack::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrGroundTrack::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrGroundTrack::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrGroundTrack::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrGroundTrack::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrGroundTrack::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrGroundTrack::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrGroundTrack::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrGroundTrack::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrGroundTrack wrapper method implementations
//

enum AgECnstrGroundTrack IAgAccessCnstrGroundTrack::GetDirection ( ) {
    enum AgECnstrGroundTrack _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrGroundTrack::PutDirection ( enum AgECnstrGroundTrack pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgAccessCnstrMinMax wrapper method implementations
//

VARIANT_BOOL _IAgAccessCnstrMinMax::GetEnableMin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrMinMax::PutEnableMin ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrMinMax::GetEnableMax ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrMinMax::PutEnableMax ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAccessCnstrMinMax::GetMin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrMinMax::PutMin ( const _variant_t & pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAccessCnstrMinMax::GetMax ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrMinMax::PutMax ( const _variant_t & pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAccessCnstrMinMax::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrMinMax::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrMinMax::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrMinMax::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrMinMax::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrMinMax::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrMinMax::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrMinMax::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrMinMax::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrMinMax::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrMinMax wrapper method implementations
//

VARIANT_BOOL IAgAccessCnstrMinMax::GetEnableMin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrMinMax::PutEnableMin ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgAccessCnstrMinMax::GetEnableMax ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrMinMax::PutEnableMax ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgAccessCnstrMinMax::GetMin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrMinMax::PutMin ( const _variant_t & pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgAccessCnstrMinMax::GetMax ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrMinMax::PutMax ( const _variant_t & pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgAccessCnstrCrdnCn wrapper method implementations
//

VARIANT_BOOL _IAgAccessCnstrCrdnCn::GetEnableMin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCrdnCn::PutEnableMin ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrCrdnCn::GetEnableMax ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCrdnCn::PutEnableMax ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAccessCnstrCrdnCn::GetMin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrCrdnCn::PutMin ( const _variant_t & pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAccessCnstrCrdnCn::GetMax ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrCrdnCn::PutMax ( const _variant_t & pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAccessCnstrCrdnCn::GetReference ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgAccessCnstrCrdnCn::PutReference ( _bstr_t pVal ) {
    HRESULT _hr = put_Reference(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAccessCnstrCrdnCn::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrCrdnCn::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCrdnCn::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrCrdnCn::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCrdnCn::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrCrdnCn::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgAccessCnstrCrdnCn::GetAvailableReferences ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableReferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrCrdnCn::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCrdnCn::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrCrdnCn::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCrdnCn::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrCrdnCn wrapper method implementations
//

VARIANT_BOOL IAgAccessCnstrCrdnCn::GetEnableMin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrCrdnCn::PutEnableMin ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgAccessCnstrCrdnCn::GetEnableMax ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrCrdnCn::PutEnableMax ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgAccessCnstrCrdnCn::GetMin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrCrdnCn::PutMin ( const _variant_t & pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgAccessCnstrCrdnCn::GetMax ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrCrdnCn::PutMax ( const _variant_t & pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgAccessCnstrCrdnCn::GetReference ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgAccessCnstrCrdnCn::PutReference ( _bstr_t pVal ) {
    HRESULT _hr = put_Reference(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgAccessCnstrCrdnCn::GetAvailableReferences ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableReferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgAccessCnstrCbObstruction wrapper method implementations
//

SAFEARRAY * _IAgAccessCnstrCbObstruction::GetAssignedObstructions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedObstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgAccessCnstrCbObstruction::IsObstructionAssigned ( _bstr_t Obstruction ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObstructionAssigned(Obstruction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAccessCnstrCbObstruction::AddObstruction ( _bstr_t Obstruction ) {
    HRESULT _hr = raw_AddObstruction(Obstruction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgAccessCnstrCbObstruction::RemoveObstruction ( _bstr_t Obstruction ) {
    HRESULT _hr = raw_RemoveObstruction(Obstruction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgAccessCnstrCbObstruction::GetAvailableObstructions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgAccessCnstrCbObstruction::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrCbObstruction::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCbObstruction::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrCbObstruction::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCbObstruction::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrCbObstruction::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrCbObstruction::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCbObstruction::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrCbObstruction::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCbObstruction::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrCbObstruction wrapper method implementations
//

SAFEARRAY * IAgAccessCnstrCbObstruction::GetAssignedObstructions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedObstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgAccessCnstrCbObstruction::IsObstructionAssigned ( _bstr_t Obstruction ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObstructionAssigned(Obstruction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgAccessCnstrCbObstruction::AddObstruction ( _bstr_t Obstruction ) {
    HRESULT _hr = raw_AddObstruction(Obstruction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAccessCnstrCbObstruction::RemoveObstruction ( _bstr_t Obstruction ) {
    HRESULT _hr = raw_RemoveObstruction(Obstruction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgAccessCnstrCbObstruction::GetAvailableObstructions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgAccessCnstrAngle wrapper method implementations
//

_variant_t _IAgAccessCnstrAngle::GetAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrAngle::PutAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_Angle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAccessCnstrAngle::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrAngle::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrAngle::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrAngle::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrAngle::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrAngle::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrAngle::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrAngle::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrAngle::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrAngle::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrAngle wrapper method implementations
//

_variant_t IAgAccessCnstrAngle::GetAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrAngle::PutAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_Angle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgAccessCnstrCondition wrapper method implementations
//

enum AgECnstrLighting _IAgAccessCnstrCondition::GetCondition ( ) {
    enum AgECnstrLighting _result;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCondition::PutCondition ( enum AgECnstrLighting pVal ) {
    HRESULT _hr = put_Condition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAccessCnstrCondition::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrCondition::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCondition::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrCondition::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrCondition::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrCondition::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgAccessCnstrCondition wrapper method implementations
//

enum AgECnstrLighting IAgAccessCnstrCondition::GetCondition ( ) {
    enum AgECnstrLighting _result;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrCondition::PutCondition ( enum AgECnstrLighting pVal ) {
    HRESULT _hr = put_Condition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgAccessCnstrIntervals wrapper method implementations
//

_bstr_t _IAgAccessCnstrIntervals::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgAccessCnstrIntervals::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEActionType _IAgAccessCnstrIntervals::GetActionType ( ) {
    enum AgEActionType _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrIntervals::PutActionType ( enum AgEActionType pVal ) {
    HRESULT _hr = put_ActionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgIntervalCollectionPtr _IAgAccessCnstrIntervals::GetIntervals ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

_bstr_t _IAgAccessCnstrIntervals::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrIntervals::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrIntervals::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrIntervals::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrIntervals::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrIntervals::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgAccessCnstrIntervals wrapper method implementations
//

_bstr_t IAgAccessCnstrIntervals::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgAccessCnstrIntervals::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEActionType IAgAccessCnstrIntervals::GetActionType ( ) {
    enum AgEActionType _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrIntervals::PutActionType ( enum AgEActionType pVal ) {
    HRESULT _hr = put_ActionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgIntervalCollectionPtr IAgAccessCnstrIntervals::GetIntervals ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

//
// interface _IAgAccessCnstrObjExAngle wrapper method implementations
//

_variant_t _IAgAccessCnstrObjExAngle::GetExclusionAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExclusionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrObjExAngle::PutExclusionAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_ExclusionAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgAccessCnstrObjExAngle::GetAssignedObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgAccessCnstrObjExAngle::GetAvailableObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAccessCnstrObjExAngle::AddExclusionObject ( _bstr_t ObjectName ) {
    HRESULT _hr = raw_AddExclusionObject(ObjectName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgAccessCnstrObjExAngle::IsObjectAssigned ( _bstr_t ObjectName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectAssigned(ObjectName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAccessCnstrObjExAngle::RemoveExclusionObject ( _bstr_t ObjectName ) {
    HRESULT _hr = raw_RemoveExclusionObject(ObjectName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t _IAgAccessCnstrObjExAngle::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrObjExAngle::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrObjExAngle::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrObjExAngle::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrObjExAngle::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrObjExAngle::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrObjExAngle::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrObjExAngle::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrObjExAngle::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrObjExAngle::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrObjExAngle wrapper method implementations
//

_variant_t IAgAccessCnstrObjExAngle::GetExclusionAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExclusionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrObjExAngle::PutExclusionAngle ( const _variant_t & pVal ) {
    HRESULT _hr = put_ExclusionAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgAccessCnstrObjExAngle::GetAssignedObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgAccessCnstrObjExAngle::GetAvailableObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgAccessCnstrObjExAngle::AddExclusionObject ( _bstr_t ObjectName ) {
    HRESULT _hr = raw_AddExclusionObject(ObjectName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgAccessCnstrObjExAngle::IsObjectAssigned ( _bstr_t ObjectName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectAssigned(ObjectName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgAccessCnstrObjExAngle::RemoveExclusionObject ( _bstr_t ObjectName ) {
    HRESULT _hr = raw_RemoveExclusionObject(ObjectName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgAccessCnstrZone wrapper method implementations
//

_variant_t _IAgAccessCnstrZone::GetMinLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinLon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrZone::PutMinLon ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinLon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAccessCnstrZone::GetMinLat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinLat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrZone::PutMinLat ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinLat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAccessCnstrZone::GetMaxLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxLon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrZone::PutMaxLon ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxLon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAccessCnstrZone::GetMaxLat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxLat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrZone::PutMaxLat ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxLat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAccessCnstrZone::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrZone::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrZone::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrZone::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrZone::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrZone::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrZone::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrZone::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrZone::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrZone::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrZone wrapper method implementations
//

_variant_t IAgAccessCnstrZone::GetMinLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinLon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrZone::PutMinLon ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinLon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgAccessCnstrZone::GetMinLat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinLat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrZone::PutMinLat ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinLat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgAccessCnstrZone::GetMaxLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxLon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrZone::PutMaxLon ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxLon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgAccessCnstrZone::GetMaxLat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxLat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgAccessCnstrZone::PutMaxLat ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxLat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgAccessCnstrThirdBody wrapper method implementations
//

SAFEARRAY * _IAgAccessCnstrThirdBody::GetAssignedObstructions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedObstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAccessCnstrThirdBody::AddObstruction ( _bstr_t Obstruction ) {
    HRESULT _hr = raw_AddObstruction(Obstruction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgAccessCnstrThirdBody::RemoveObstruction ( _bstr_t Obstruction ) {
    HRESULT _hr = raw_RemoveObstruction(Obstruction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgAccessCnstrThirdBody::GetAvailableObstructions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgAccessCnstrThirdBody::IsObstructionAssigned ( _bstr_t Obstruction ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObstructionAssigned(Obstruction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgAccessCnstrThirdBody::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrThirdBody::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrThirdBody::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrThirdBody::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrThirdBody::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrThirdBody::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrThirdBody::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrThirdBody::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrThirdBody::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrThirdBody::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrThirdBody wrapper method implementations
//

SAFEARRAY * IAgAccessCnstrThirdBody::GetAssignedObstructions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedObstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgAccessCnstrThirdBody::IsObstructionAssigned ( _bstr_t Obstruction ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObstructionAssigned(Obstruction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgAccessCnstrThirdBody::AddObstruction ( _bstr_t Obstruction ) {
    HRESULT _hr = raw_AddObstruction(Obstruction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAccessCnstrThirdBody::RemoveObstruction ( _bstr_t Obstruction ) {
    HRESULT _hr = raw_RemoveObstruction(Obstruction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgAccessCnstrThirdBody::GetAvailableObstructions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgAccessCnstrExclZonesCollection wrapper method implementations
//

long IAgAccessCnstrExclZonesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgAccessCnstrExclZonesCollection::RemoveIndex ( long Index ) {
    HRESULT _hr = raw_RemoveIndex(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAccessCnstrExclZonesCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAccessCnstrExclZonesCollection::RemoveExclZone ( const _variant_t & MinLat, const _variant_t & MinLon, const _variant_t & MaxLat, const _variant_t & MaxLon ) {
    HRESULT _hr = raw_RemoveExclZone(MinLat, MinLon, MaxLat, MaxLon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAccessCnstrExclZonesCollection::ChangeExclZone ( long Index, const _variant_t & MinLat, const _variant_t & MinLon, const _variant_t & MaxLat, const _variant_t & MaxLon ) {
    HRESULT _hr = raw_ChangeExclZone(Index, MinLat, MinLon, MaxLat, MaxLon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgAccessCnstrExclZonesCollection::GetExclZone ( long Index, VARIANT * pMinLat, VARIANT * pMinLon, VARIANT * pMaxLat, VARIANT * pMaxLon ) {
    HRESULT _hr = raw_GetExclZone(Index, pMinLat, pMinLon, pMaxLat, pMaxLon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgAccessCnstrExclZonesCollection::ToArray ( long Index, long Length ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ToArray(Index, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgAccessCnstrExclZonesCollection::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgAccessCnstrExclZonesCollection::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrExclZonesCollection::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgAccessCnstrExclZonesCollection::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrExclZonesCollection::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints IAgAccessCnstrExclZonesCollection::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAccessCnstrZonePtr IAgAccessCnstrExclZonesCollection::GetItem ( long Index ) {
    struct IAgAccessCnstrZone * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessCnstrZonePtr(_result, false);
}

IUnknownPtr IAgAccessCnstrExclZonesCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

double IAgAccessCnstrExclZonesCollection::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrExclZonesCollection::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgAccessCnstrExclZonesCollection::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAccessCnstrExclZonesCollection::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnPtGrazingAlt wrapper method implementations
//

_variant_t _IAgSnPtGrazingAlt::GetAzimuthOffset ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AzimuthOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnPtGrazingAlt::PutAzimuthOffset ( const _variant_t & pVal ) {
    HRESULT _hr = put_AzimuthOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnPtGrazingAlt::GetGrazingAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_GrazingAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnPtGrazingAlt::PutGrazingAlt ( double pVal ) {
    HRESULT _hr = put_GrazingAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnPtGrazingAlt wrapper method implementations
//

_variant_t IAgSnPtGrazingAlt::GetAzimuthOffset ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AzimuthOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSnPtGrazingAlt::PutAzimuthOffset ( const _variant_t & pVal ) {
    HRESULT _hr = put_AzimuthOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnPtGrazingAlt::GetGrazingAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_GrazingAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnPtGrazingAlt::PutGrazingAlt ( double pVal ) {
    HRESULT _hr = put_GrazingAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgATCommonTasks wrapper method implementations
//

IAgAreaTypeEllipsePtr IAgATCommonTasks::SetAreaTypeEllipse ( double SemiMajorAxis, double SemiMinorAxis, const _variant_t & Bearing ) {
    struct IAgAreaTypeEllipse * _result = 0;
    HRESULT _hr = raw_SetAreaTypeEllipse(SemiMajorAxis, SemiMinorAxis, Bearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAreaTypeEllipsePtr(_result, false);
}

IAgAreaTypePatternCollectionPtr IAgATCommonTasks::SetAreaTypePattern ( SAFEARRAY * * LatLons ) {
    struct IAgAreaTypePatternCollection * _result = 0;
    HRESULT _hr = raw_SetAreaTypePattern(LatLons, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAreaTypePatternCollectionPtr(_result, false);
}

//
// interface IAgAreaTarget wrapper method implementations
//

VARIANT_BOOL IAgAreaTarget::GetUseLocalTimeOffset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAreaTarget::PutUseLocalTimeOffset ( VARIANT_BOOL pUseLocalTimeOffset ) {
    HRESULT _hr = put_UseLocalTimeOffset(pUseLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgAreaTarget::GetLocalTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_LocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAreaTarget::PutLocalTimeOffset ( double pLocalTimeOffset ) {
    HRESULT _hr = put_LocalTimeOffset(pLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgAreaTarget::GetAutoCentroid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCentroid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAreaTarget::PutAutoCentroid ( VARIANT_BOOL pAutoCentroid ) {
    HRESULT _hr = put_AutoCentroid(pAutoCentroid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgPositionPtr IAgAreaTarget::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgAreaTarget::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgATGraphicsPtr IAgAreaTarget::GetGraphics ( ) {
    struct IAgATGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgATGraphicsPtr(_result, false);
}

IAgATVOPtr IAgAreaTarget::GetVO ( ) {
    struct IAgATVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgATVOPtr(_result, false);
}

enum AgEAreaType IAgAreaTarget::GetAreaType ( ) {
    enum AgEAreaType _result;
    HRESULT _hr = get_AreaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAreaTarget::PutAreaType ( enum AgEAreaType pType ) {
    HRESULT _hr = put_AreaType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAreaTypeDataPtr IAgAreaTarget::GetAreaTypeData ( ) {
    struct IAgAreaTypeData * _result = 0;
    HRESULT _hr = get_AreaTypeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAreaTypeDataPtr(_result, false);
}

VARIANT_BOOL IAgAreaTarget::GetUseTerrainData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrainData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAreaTarget::PutUseTerrainData ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTerrainData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgAreaTarget::GetAllowObjectAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowObjectAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgAreaTarget::PutAllowObjectAccess ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowObjectAccess(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgATCommonTasksPtr IAgAreaTarget::GetCommonTasks ( ) {
    struct IAgATCommonTasks * _result = 0;
    HRESULT _hr = get_CommonTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgATCommonTasksPtr(_result, false);
}

//
// interface IAgDisplayTm wrapper method implementations
//

enum AgEDisplayTimesType IAgDisplayTm::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgDisplayTm::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgDisplayTm::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgDisplayTm::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr IAgDisplayTm::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

//
// interface IAgTargetGraphics wrapper method implementations
//

VARIANT_BOOL IAgTargetGraphics::GetInheritFromScenario ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFromScenario(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTargetGraphics::PutInheritFromScenario ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_InheritFromScenario(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgTargetGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTargetGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgTargetGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgTargetGraphics::PutMarkerStyle ( _bstr_t pMarkerStyle ) {
    HRESULT _hr = put_MarkerStyle(pMarkerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgTargetGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTargetGraphics::PutLabelVisible ( VARIANT_BOOL pShowLabel ) {
    HRESULT _hr = put_LabelVisible(pShowLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgBasicAzElMaskPtr IAgTargetGraphics::GetAzElMask ( ) {
    struct IAgBasicAzElMask * _result = 0;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgBasicAzElMaskPtr(_result, false);
}

IAgGfxRangeContoursPtr IAgTargetGraphics::GetContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_Contours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

VARIANT_BOOL IAgTargetGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTargetGraphics::PutUseInstNameLabel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseInstNameLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgTargetGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgTargetGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr IAgTargetGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

OLE_COLOR IAgTargetGraphics::GetMarkerColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_MarkerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTargetGraphics::PutMarkerColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_MarkerColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgTargetGraphics::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTargetGraphics::PutLabelColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_LabelColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgPlCommonTasks wrapper method implementations
//

IAgPlPosFilePtr IAgPlCommonTasks::SetPositionSourceFile ( _bstr_t File ) {
    struct IAgPlPosFile * _result = 0;
    HRESULT _hr = raw_SetPositionSourceFile(File, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlPosFilePtr(_result, false);
}

IAgPlPosCentralBodyPtr IAgPlCommonTasks::SetPositionSourceCentralBody ( _bstr_t CentralBody, enum AgEEphemSourceType EphemSource ) {
    struct IAgPlPosCentralBody * _result = 0;
    HRESULT _hr = raw_SetPositionSourceCentralBody(CentralBody, EphemSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlPosCentralBodyPtr(_result, false);
}

//
// interface IAgPlanet wrapper method implementations
//

IAgPlGraphicsPtr IAgPlanet::GetGraphics ( ) {
    struct IAgPlGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlGraphicsPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgPlanet::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgPlVOPtr IAgPlanet::GetVO ( ) {
    struct IAgPlVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlVOPtr(_result, false);
}

enum AgEPlPositionSourceType IAgPlanet::GetPositionSource ( ) {
    enum AgEPlPositionSourceType _result;
    HRESULT _hr = get_PositionSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgPlanet::PutPositionSource ( enum AgEPlPositionSourceType pVal ) {
    HRESULT _hr = put_PositionSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgPositionSourceDataPtr IAgPlanet::GetPositionSourceData ( ) {
    struct IAgPositionSourceData * _result = 0;
    HRESULT _hr = get_PositionSourceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPositionSourceDataPtr(_result, false);
}

IAgPlCommonTasksPtr IAgPlanet::GetCommonTasks ( ) {
    struct IAgPlCommonTasks * _result = 0;
    HRESULT _hr = get_CommonTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlCommonTasksPtr(_result, false);
}

//
// interface IAgSwath wrapper method implementations
//

VARIANT_BOOL IAgSwath::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSwath::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgSwath::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSwath::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgSwath::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSwath::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgSwath::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSwath::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSwath::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSwath::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSwath::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSwath::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgSwath::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSwath::SetTimePeriod ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    HRESULT _hr = raw_SetTimePeriod(StartTime, StopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSwath::AddTimeInterval ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    HRESULT _hr = raw_AddTimeInterval(StartTime, StopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSwath::ModifyTimeInterval ( long Index, const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_ModifyTimeInterval(Index, Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IAgSwath::GetTimeIntervalIndex ( const _variant_t & Start, const _variant_t & Stop ) {
    long _result = 0;
    HRESULT _hr = raw_GetTimeIntervalIndex(Start, Stop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSwath::RemoveTimeInterval ( const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_RemoveTimeInterval(Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSwath::RemoveTimeIntervalIndex ( long Index ) {
    HRESULT _hr = raw_RemoveTimeIntervalIndex(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSwath::RemoveAllIntervals ( ) {
    HRESULT _hr = raw_RemoveAllIntervals();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IAgSwath::GetTimeIntervalCount ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeIntervalCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgSwath::ToArray ( long Index, long Length ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ToArray(Index, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgSwath::GetMinimumStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSwath::PutMinimumStep ( double pVal ) {
    HRESULT _hr = put_MinimumStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSwath::GetMaximumStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSwath::PutMaximumStep ( double pVal ) {
    HRESULT _hr = put_MaximumStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSwath::GetUseMaximumCone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaximumCone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSwath::PutUseMaximumCone ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaximumCone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSwath::GetScatteringTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_ScatteringTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSwath::PutScatteringTolerance ( double pVal ) {
    HRESULT _hr = put_ScatteringTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSwath::GetCurvatureTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_CurvatureTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSwath::PutCurvatureTolerance ( double pVal ) {
    HRESULT _hr = put_CurvatureTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCelestialBodyInfo wrapper method implementations
//

_bstr_t IAgCelestialBodyInfo::GetIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Identifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgCelestialBodyInfo::GetCatalogName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CatalogName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double IAgCelestialBodyInfo::GetRA ( ) {
    double _result = 0;
    HRESULT _hr = get_RA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgCelestialBodyInfo::GetDec ( ) {
    double _result = 0;
    HRESULT _hr = get_Dec(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgCelestialBodyInfo::GetParallax ( ) {
    double _result = 0;
    HRESULT _hr = get_Parallax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgCelestialBodyInfo::GetVelocity ( ) {
    double _result = 0;
    HRESULT _hr = get_Velocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgCelestialBodyInfo::GetVisualMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_VisualMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgCelestialBodyInfo::GetBminusV ( ) {
    double _result = 0;
    HRESULT _hr = get_BminusV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgCelestialBodyInfo::GetEffectiveTemperature ( ) {
    double _result = 0;
    HRESULT _hr = get_EffectiveTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgCelestialBodyInfo::GetMagnitudeToIrradianceConversionFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_MagnitudeToIrradianceConversionFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

STKUtil::IAgCartesian3VectorPtr IAgCelestialBodyInfo::GetLastComputedDirectionInICRF ( ) {
    struct STKUtil::IAgCartesian3Vector * _result = 0;
    HRESULT _hr = raw_GetLastComputedDirectionInICRF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgCartesian3VectorPtr(_result, false);
}

//
// interface IAgCelestialBodyCollection wrapper method implementations
//

long IAgCelestialBodyCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgCelestialBodyInfoPtr IAgCelestialBodyCollection::GetItem ( long Index ) {
    struct IAgCelestialBodyInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCelestialBodyInfoPtr(_result, false);
}

IUnknownPtr IAgCelestialBodyCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL IAgCelestialBodyCollection::GetRecycle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Recycle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCelestialBodyCollection::PutRecycle ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Recycle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSpatialState wrapper method implementations
//

STKUtil::IAgPositionPtr IAgSpatialState::GetFixedPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_FixedPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

STKUtil::IAgPositionPtr IAgSpatialState::GetInertialPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_InertialPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

STKUtil::IAgOrientationPtr IAgSpatialState::GetInertialOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_InertialOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

STKUtil::IAgOrientationPtr IAgSpatialState::GetFixedOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_FixedOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

_variant_t IAgSpatialState::GetCurrentTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t IAgSpatialState::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IAgSpatialState::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgSpatialState::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IAgSpatialState::GetIsAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSpatialState::QueryVelocityFixed ( double * pVx, double * pVy, double * pVz ) {
    HRESULT _hr = raw_QueryVelocityFixed(pVx, pVy, pVz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSpatialState::QueryVelocityInertial ( double * pVx, double * pVy, double * pVz ) {
    HRESULT _hr = raw_QueryVelocityInertial(pVx, pVy, pVz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeSpatialInfo wrapper method implementations
//

IAgSpatialStatePtr IAgVeSpatialInfo::GetState ( const _variant_t & Time ) {
    struct IAgSpatialState * _result = 0;
    HRESULT _hr = raw_GetState(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpatialStatePtr(_result, false);
}

VARIANT_BOOL IAgVeSpatialInfo::GetRecycle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Recycle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgProvideSpatialInfo wrapper method implementations
//

IAgVeSpatialInfoPtr IAgProvideSpatialInfo::GetSpatialInfo ( VARIANT_BOOL Recycle ) {
    struct IAgVeSpatialInfo * _result = 0;
    HRESULT _hr = raw_GetSpatialInfo(Recycle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpatialInfoPtr(_result, false);
}

//
// interface _IAgATCommonTasks wrapper method implementations
//

IAgAreaTypeEllipsePtr _IAgATCommonTasks::SetAreaTypeEllipse ( double SemiMajorAxis, double SemiMinorAxis, const _variant_t & Bearing ) {
    struct IAgAreaTypeEllipse * _result = 0;
    HRESULT _hr = raw_SetAreaTypeEllipse(SemiMajorAxis, SemiMinorAxis, Bearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAreaTypeEllipsePtr(_result, false);
}

IAgAreaTypePatternCollectionPtr _IAgATCommonTasks::SetAreaTypePattern ( SAFEARRAY * * LatLons ) {
    struct IAgAreaTypePatternCollection * _result = 0;
    HRESULT _hr = raw_SetAreaTypePattern(LatLons, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAreaTypePatternCollectionPtr(_result, false);
}

//
// interface _IAgPlCommonTasks wrapper method implementations
//

IAgPlPosFilePtr _IAgPlCommonTasks::SetPositionSourceFile ( _bstr_t File ) {
    struct IAgPlPosFile * _result = 0;
    HRESULT _hr = raw_SetPositionSourceFile(File, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlPosFilePtr(_result, false);
}

IAgPlPosCentralBodyPtr _IAgPlCommonTasks::SetPositionSourceCentralBody ( _bstr_t CentralBody, enum AgEEphemSourceType EphemSource ) {
    struct IAgPlPosCentralBody * _result = 0;
    HRESULT _hr = raw_SetPositionSourceCentralBody(CentralBody, EphemSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlPosCentralBodyPtr(_result, false);
}

//
// interface _IAgSwath wrapper method implementations
//

VARIANT_BOOL _IAgSwath::GetEnable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSwath::PutEnable ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Enable(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgSwath::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSwath::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgSwath::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSwath::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgSwath::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSwath::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSwath::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSwath::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSwath::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSwath::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgSwath::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgSwath::SetTimePeriod ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    HRESULT _hr = raw_SetTimePeriod(StartTime, StopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgSwath::AddTimeInterval ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    HRESULT _hr = raw_AddTimeInterval(StartTime, StopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgSwath::ModifyTimeInterval ( long Index, const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_ModifyTimeInterval(Index, Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long _IAgSwath::GetTimeIntervalIndex ( const _variant_t & Start, const _variant_t & Stop ) {
    long _result = 0;
    HRESULT _hr = raw_GetTimeIntervalIndex(Start, Stop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSwath::RemoveTimeInterval ( const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_RemoveTimeInterval(Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgSwath::RemoveTimeIntervalIndex ( long Index ) {
    HRESULT _hr = raw_RemoveTimeIntervalIndex(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgSwath::RemoveAllIntervals ( ) {
    HRESULT _hr = raw_RemoveAllIntervals();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long _IAgSwath::GetTimeIntervalCount ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeIntervalCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSwath::ToArray ( long Index, long Length ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ToArray(Index, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgSwath::GetMinimumStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSwath::PutMinimumStep ( double pVal ) {
    HRESULT _hr = put_MinimumStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSwath::GetMaximumStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSwath::PutMaximumStep ( double pVal ) {
    HRESULT _hr = put_MaximumStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSwath::GetUseMaximumCone ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaximumCone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSwath::PutUseMaximumCone ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaximumCone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSwath::GetScatteringTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_ScatteringTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSwath::PutScatteringTolerance ( double pVal ) {
    HRESULT _hr = put_ScatteringTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSwath::GetCurvatureTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_CurvatureTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSwath::PutCurvatureTolerance ( double pVal ) {
    HRESULT _hr = put_CurvatureTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStar wrapper method implementations
//

_variant_t IAgStar::GetLocationRightAscension ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LocationRightAscension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgStar::PutLocationRightAscension ( const _variant_t & pRightAscension ) {
    HRESULT _hr = put_LocationRightAscension(pRightAscension);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgStar::GetLocationDeclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LocationDeclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgStar::PutLocationDeclination ( const _variant_t & pDeclination ) {
    HRESULT _hr = put_LocationDeclination(pDeclination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStar::GetProperMotionRightAscension ( ) {
    double _result = 0;
    HRESULT _hr = get_ProperMotionRightAscension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStar::PutProperMotionRightAscension ( double pProperMotionRightAscension ) {
    HRESULT _hr = put_ProperMotionRightAscension(pProperMotionRightAscension);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStar::GetProperMotionDeclination ( ) {
    double _result = 0;
    HRESULT _hr = get_ProperMotionDeclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStar::PutProperMotionDeclination ( double pProperMotionDeclination ) {
    HRESULT _hr = put_ProperMotionDeclination(pProperMotionDeclination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgStar::GetParallax ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parallax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgStar::PutParallax ( const _variant_t & pProperMotionParallax ) {
    HRESULT _hr = put_Parallax(pProperMotionParallax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgStar::GetEpoch ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgStar::PutEpoch ( _bstr_t pEpoch ) {
    HRESULT _hr = put_Epoch(pEpoch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStar::GetMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Magnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStar::PutMagnitude ( double pMagnitude ) {
    HRESULT _hr = put_Magnitude(pMagnitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStGraphicsPtr IAgStar::GetGraphics ( ) {
    struct IAgStGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStGraphicsPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgStar::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgStVOPtr IAgStar::GetVO ( ) {
    struct IAgStVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStVOPtr(_result, false);
}

enum AgEStarReferenceFrame IAgStar::GetReferenceFrame ( ) {
    enum AgEStarReferenceFrame _result;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStar::GetProperMotionRadialVelocity ( ) {
    double _result = 0;
    HRESULT _hr = get_ProperMotionRadialVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStar::PutProperMotionRadialVelocity ( double pVal ) {
    HRESULT _hr = put_ProperMotionRadialVelocity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgDrTimeArrayElements wrapper method implementations
//

SAFEARRAY * _IAgDrTimeArrayElements::GetArray ( const _variant_t & IndexOrName ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetArray(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgDrTimeArrayElements::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgDrTimeArrayElements::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgDrResult wrapper method implementations
//

enum AgEDrCategories _IAgDrResult::GetCategory ( ) {
    enum AgEDrCategories _result;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr _IAgDrResult::GetValue ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IAgDrSubSectionCollectionPtr _IAgDrResult::GetSections ( ) {
    struct IAgDrSubSectionCollection * _result = 0;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrSubSectionCollectionPtr(_result, false);
}

IAgDrIntervalCollectionPtr _IAgDrResult::GetIntervals ( ) {
    struct IAgDrIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrIntervalCollectionPtr(_result, false);
}

IAgDrDataSetCollectionPtr _IAgDrResult::GetDataSets ( ) {
    struct IAgDrDataSetCollection * _result = 0;
    HRESULT _hr = get_DataSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrDataSetCollectionPtr(_result, false);
}

IAgDrTextMessagePtr _IAgDrResult::GetMessage ( ) {
    struct IAgDrTextMessage * _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrTextMessagePtr(_result, false);
}

//
// interface _IAgDrSubSection wrapper method implementations
//

_bstr_t _IAgDrSubSection::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgDrIntervalCollectionPtr _IAgDrSubSection::GetIntervals ( ) {
    struct IAgDrIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrIntervalCollectionPtr(_result, false);
}

//
// interface _IAgDrInterval wrapper method implementations
//

_variant_t _IAgDrInterval::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgDrInterval::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IAgDrDataSetCollectionPtr _IAgDrInterval::GetDataSets ( ) {
    struct IAgDrDataSetCollection * _result = 0;
    HRESULT _hr = get_DataSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrDataSetCollectionPtr(_result, false);
}

SAFEARRAY * _IAgDrInterval::ThresholdCrossings ( _bstr_t ElemName, const _variant_t & Threshold ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ThresholdCrossings(ElemName, Threshold, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgDrInterval::MultipleThresholdCrossings ( _bstr_t ElemName, SAFEARRAY * * Thresholds ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_MultipleThresholdCrossings(ElemName, Thresholds, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgDrDataSet wrapper method implementations
//

_bstr_t _IAgDrDataSet::GetElementName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ElementName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long _IAgDrDataSet::GetElementType ( ) {
    long _result = 0;
    HRESULT _hr = get_ElementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long _IAgDrDataSet::GetUnitType ( ) {
    long _result = 0;
    HRESULT _hr = get_UnitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long _IAgDrDataSet::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgDrDataSet::GetValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgDrDataSet::GetInternalUnitValues ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetInternalUnitValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDataPrvElement wrapper method implementations
//

_bstr_t IAgDataPrvElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEDataPrvElementType IAgDataPrvElement::GetType ( ) {
    enum AgEDataPrvElementType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short IAgDataPrvElement::GetUnitType ( ) {
    short _result = 0;
    HRESULT _hr = get_UnitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDataPrvElements wrapper method implementations
//

IAgDataPrvElementPtr IAgDataPrvElements::GetItem ( const _variant_t & Index ) {
    struct IAgDataPrvElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataPrvElementPtr(_result, false);
}

long IAgDataPrvElements::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgDataPrvElements::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgDataPrvFixed wrapper method implementations
//

IAgDrResultPtr _IAgDataPrvFixed::Exec ( ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_Exec(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr _IAgDataPrvFixed::ExecElements ( SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecElements(ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDataPrvElementsPtr _IAgDataPrvFixed::GetElements ( ) {
    struct IAgDataPrvElements * _result = 0;
    HRESULT _hr = get_Elements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataPrvElementsPtr(_result, false);
}

_bstr_t _IAgDataPrvFixed::GetPreData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgDataPrvFixed::PutPreData ( _bstr_t pVal ) {
    HRESULT _hr = put_PreData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgDataPrvFixed::GetAllowUI ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgDataPrvFixed::PutAllowUI ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowUI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgDataPrvFixed::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEDataProviderType _IAgDataPrvFixed::GetType ( ) {
    enum AgEDataProviderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgDataPrvFixed::IsGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgDataPrvFixed::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDataProvider wrapper method implementations
//

IAgDataPrvElementsPtr IAgDataProvider::GetElements ( ) {
    struct IAgDataPrvElements * _result = 0;
    HRESULT _hr = get_Elements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataPrvElementsPtr(_result, false);
}

_bstr_t IAgDataProvider::GetPreData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgDataProvider::PutPreData ( _bstr_t pVal ) {
    HRESULT _hr = put_PreData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgDataProvider::GetAllowUI ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgDataProvider::PutAllowUI ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowUI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgDataProvider::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgDataPrvTimeVar wrapper method implementations
//

IAgDrResultPtr _IAgDataPrvTimeVar::Exec ( const _variant_t & StartTime, const _variant_t & StopTime, double StepTime ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_Exec(StartTime, StopTime, StepTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr _IAgDataPrvTimeVar::ExecElements ( const _variant_t & StartTime, const _variant_t & StopTime, double StepTime, SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecElements(StartTime, StopTime, StepTime, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr _IAgDataPrvTimeVar::ExecSingle ( const _variant_t & SingleTime ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecSingle(SingleTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr _IAgDataPrvTimeVar::ExecSingleElements ( const _variant_t & SingleTime, SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecSingleElements(SingleTime, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDataPrvElementsPtr _IAgDataPrvTimeVar::GetElements ( ) {
    struct IAgDataPrvElements * _result = 0;
    HRESULT _hr = get_Elements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataPrvElementsPtr(_result, false);
}

_bstr_t _IAgDataPrvTimeVar::GetPreData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgDataPrvTimeVar::PutPreData ( _bstr_t pVal ) {
    HRESULT _hr = put_PreData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgDataPrvTimeVar::GetAllowUI ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgDataPrvTimeVar::PutAllowUI ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowUI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgDataPrvTimeVar::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEDataProviderType _IAgDataPrvTimeVar::GetType ( ) {
    enum AgEDataProviderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgDataPrvTimeVar::IsGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgDataPrvTimeVar::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDrTimeArrayElementsPtr _IAgDataPrvTimeVar::ExecSingleElementsArray ( SAFEARRAY * * TimeArray, SAFEARRAY * * ElementNames ) {
    struct IAgDrTimeArrayElements * _result = 0;
    HRESULT _hr = raw_ExecSingleElementsArray(TimeArray, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrTimeArrayElementsPtr(_result, false);
}

IAgDrResultPtr _IAgDataPrvTimeVar::ExecNativeTimes ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecNativeTimes(StartTime, StopTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr _IAgDataPrvTimeVar::ExecElementsNativeTimes ( const _variant_t & StartTime, const _variant_t & StopTime, SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecElementsNativeTimes(StartTime, StopTime, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

//
// interface _IAgDataPrvInterval wrapper method implementations
//

IAgDrResultPtr _IAgDataPrvInterval::Exec ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_Exec(StartTime, StopTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDrResultPtr _IAgDataPrvInterval::ExecElements ( const _variant_t & StartTime, const _variant_t & StopTime, SAFEARRAY * * ElementNames ) {
    struct IAgDrResult * _result = 0;
    HRESULT _hr = raw_ExecElements(StartTime, StopTime, ElementNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDrResultPtr(_result, false);
}

IAgDataPrvElementsPtr _IAgDataPrvInterval::GetElements ( ) {
    struct IAgDataPrvElements * _result = 0;
    HRESULT _hr = get_Elements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataPrvElementsPtr(_result, false);
}

_bstr_t _IAgDataPrvInterval::GetPreData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgDataPrvInterval::PutPreData ( _bstr_t pVal ) {
    HRESULT _hr = put_PreData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgDataPrvInterval::GetAllowUI ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgDataPrvInterval::PutAllowUI ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowUI(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgDataPrvInterval::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEDataProviderType _IAgDataPrvInterval::GetType ( ) {
    enum AgEDataProviderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgDataPrvInterval::IsGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgDataPrvInterval::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgDataProviders wrapper method implementations
//

long IAgDataProviders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDataProviderInfoPtr IAgDataProviders::GetItem ( const _variant_t & Index ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IUnknownPtr IAgDataProviders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgDataProviderGroup wrapper method implementations
//

_bstr_t _IAgDataProviderGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEDataProviderType _IAgDataProviderGroup::GetType ( ) {
    enum AgEDataProviderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgDataProviderGroup::IsGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDataProvidersPtr _IAgDataProviderGroup::GetGroup ( ) {
    struct IAgDataProviders * _result = 0;
    HRESULT _hr = get_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProvidersPtr(_result, false);
}

//
// interface IAgDataProviderGroup wrapper method implementations
//

IAgDataProvidersPtr IAgDataProviderGroup::GetGroup ( ) {
    struct IAgDataProviders * _result = 0;
    HRESULT _hr = get_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProvidersPtr(_result, false);
}

//
// interface _IAgDataPrvElement wrapper method implementations
//

_bstr_t _IAgDataPrvElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEDataPrvElementType _IAgDataPrvElement::GetType ( ) {
    enum AgEDataPrvElementType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

short _IAgDataPrvElement::GetUnitType ( ) {
    short _result = 0;
    HRESULT _hr = get_UnitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkAccess wrapper method implementations
//

VARIANT_BOOL _IAgStkAccess::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDataProviderCollectionPtr _IAgStkAccess::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

HRESULT _IAgStkAccess::RemoveAccess ( ) {
    HRESULT _hr = raw_RemoveAccess();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkAccess::ComputeAccess ( ) {
    HRESULT _hr = raw_ComputeAccess();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAccessTimeType _IAgStkAccess::GetAccessTimePeriod ( ) {
    enum AgEAccessTimeType _result;
    HRESULT _hr = get_AccessTimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccess::PutAccessTimePeriod ( enum AgEAccessTimeType pVal ) {
    HRESULT _hr = put_AccessTimePeriod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkAccess::SpecifyAccessTimePeriod ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    HRESULT _hr = raw_SpecifyAccessTimePeriod(StartTime, StopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkAccessGraphicsPtr _IAgStkAccess::GetGraphics ( ) {
    struct IAgStkAccessGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessGraphicsPtr(_result, false);
}

IAgStkAccessAdvancedPtr _IAgStkAccess::GetAdvanced ( ) {
    struct IAgStkAccessAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessAdvancedPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgStkAccess::GetDataDisplays ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

HRESULT _IAgStkAccess::SpecifyAccessIntervals ( SAFEARRAY * * AccessIntervals ) {
    HRESULT _hr = raw_SpecifyAccessIntervals(AccessIntervals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgIntervalCollectionPtr _IAgStkAccess::GetComputedAccessIntervalTimes ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_ComputedAccessIntervalTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

IAgAccessIntervalPtr _IAgStkAccess::GetAccessTimePeriodData ( ) {
    struct IAgAccessInterval * _result = 0;
    HRESULT _hr = get_AccessTimePeriodData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessIntervalPtr(_result, false);
}

//
// interface _IAgStkAccessGraphics wrapper method implementations
//

VARIANT_BOOL _IAgStkAccessGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessGraphics::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkAccessGraphics::GetLineVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LineVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessGraphics::PutLineVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LineVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkAccessGraphics::GetAnimateGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AnimateGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessGraphics::PutAnimateGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AnimateGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkAccessGraphics::GetStaticGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StaticGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessGraphics::PutStaticGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_StaticGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkAccessAdvanced wrapper method implementations
//

VARIANT_BOOL _IAgStkAccessAdvanced::GetEnableLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutEnableLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkAccessAdvanced::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkAccessAdvanced::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkAccessAdvanced::GetTimeLightDelayConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeLightDelayConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutTimeLightDelayConvergence ( double pVal ) {
    HRESULT _hr = put_TimeLightDelayConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAberrationType _IAgStkAccessAdvanced::GetAberrationType ( ) {
    enum AgEAberrationType _result;
    HRESULT _hr = get_AberrationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutAberrationType ( enum AgEAberrationType pVal ) {
    HRESULT _hr = put_AberrationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEIvClockHost _IAgStkAccessAdvanced::GetClockHost ( ) {
    enum AgEIvClockHost _result;
    HRESULT _hr = get_ClockHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutClockHost ( enum AgEIvClockHost pVal ) {
    HRESULT _hr = put_ClockHost(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEIvTimeSense _IAgStkAccessAdvanced::GetSignalSenseOfClockHost ( ) {
    enum AgEIvTimeSense _result;
    HRESULT _hr = get_SignalSenseOfClockHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutSignalSenseOfClockHost ( enum AgEIvTimeSense pVal ) {
    HRESULT _hr = put_SignalSenseOfClockHost(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkAccessAdvanced::GetUseDefaultClockHostAndSignalSense ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDefaultClockHostAndSignalSense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutUseDefaultClockHostAndSignalSense ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseDefaultClockHostAndSignalSense(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkAccessAdvanced::GetUsePreciseEventTimes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePreciseEventTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutUsePreciseEventTimes ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePreciseEventTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkAccessAdvanced::GetAbsoluteTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_AbsoluteTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutAbsoluteTolerance ( double pVal ) {
    HRESULT _hr = put_AbsoluteTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkAccessAdvanced::GetRelativeTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_RelativeTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutRelativeTolerance ( double pVal ) {
    HRESULT _hr = put_RelativeTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkAccessAdvanced::GetUseFixedTimeStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseFixedTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutUseFixedTimeStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseFixedTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkAccessAdvanced::GetMinTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutMinTimeStep ( double pVal ) {
    HRESULT _hr = put_MinTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkAccessAdvanced::GetFixedStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_FixedStepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutFixedStepSize ( double pVal ) {
    HRESULT _hr = put_FixedStepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkAccessAdvanced::GetFixedTimeBound ( ) {
    double _result = 0;
    HRESULT _hr = get_FixedTimeBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkAccessAdvanced::PutFixedTimeBound ( double pVal ) {
    HRESULT _hr = put_FixedTimeBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgObjectCoverageFOM wrapper method implementations
//

enum AgEFmDefinitionType _IAgObjectCoverageFOM::GetDefinitionType ( ) {
    enum AgEFmDefinitionType _result;
    HRESULT _hr = get_DefinitionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgObjectCoverageFOM::SetDefinitionType ( enum AgEFmDefinitionType Def ) {
    HRESULT _hr = raw_SetDefinitionType(Def);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgObjectCoverageFOM::IsDefinitionTypeSupported ( enum AgEFmDefinitionType Def ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDefinitionTypeSupported(Def, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgObjectCoverageFOM::GetDefinitionSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DefinitionSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionPtr _IAgObjectCoverageFOM::GetDefinition ( ) {
    struct IAgFmDefinition * _result = 0;
    HRESULT _hr = get_Definition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionPtr(_result, false);
}

IAgFmDefAccessConstraintPtr _IAgObjectCoverageFOM::SetAccessConstraintDefinition ( enum AgEFmConstraintName ConstraintName ) {
    struct IAgFmDefAccessConstraint * _result = 0;
    HRESULT _hr = raw_SetAccessConstraintDefinition(ConstraintName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefAccessConstraintPtr(_result, false);
}

IAgFmGraphicsPtr _IAgObjectCoverageFOM::GetGraphics ( ) {
    struct IAgFmGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGraphicsPtr(_result, false);
}

IAgFmDefAccessConstraintPtr _IAgObjectCoverageFOM::SetAccessConstraintDefinitionName ( _bstr_t ConstraintName ) {
    struct IAgFmDefAccessConstraint * _result = 0;
    HRESULT _hr = raw_SetAccessConstraintDefinitionName(ConstraintName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefAccessConstraintPtr(_result, false);
}

//
// interface _IAgScGlobeServerConfigData wrapper method implementations
//

_bstr_t _IAgScGlobeServerConfigData::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScGlobeServerConfigData::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgScGlobeServerConfigData::GetPort ( ) {
    long _result = 0;
    HRESULT _hr = get_Port(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScGlobeServerConfigData::PutPort ( long pVal ) {
    HRESULT _hr = put_Port(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgScGlobeServerConfigData::GetUsername ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Username(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScGlobeServerConfigData::PutUsername ( _bstr_t pVal ) {
    HRESULT _hr = put_Username(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgScGlobeServerConfigData::SetPassword ( _bstr_t Password ) {
    HRESULT _hr = raw_SetPassword(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgSc3dFont wrapper method implementations
//

_bstr_t _IAgSc3dFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSc3dFont::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESc3dPtSize _IAgSc3dFont::GetPtSize ( ) {
    enum AgESc3dPtSize _result;
    HRESULT _hr = get_PtSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSc3dFont::PutPtSize ( enum AgESc3dPtSize pVal ) {
    HRESULT _hr = put_PtSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSc3dFont::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSc3dFont::PutBold ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Bold(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSc3dFont::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSc3dFont::PutItalic ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Italic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgSc3dFont::GetAvailableFonts ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgSc3dFont::IsFontAvailable ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFontAvailable(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVOBorderWall wrapper method implementations
//

VARIANT_BOOL _IAgVOBorderWall::GetUseBorderWall ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseBorderWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOBorderWall::PutUseBorderWall ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseBorderWall(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEBorderWallUpperLowerEdgeAltRef _IAgVOBorderWall::GetUpperEdgeAltRef ( ) {
    enum AgEBorderWallUpperLowerEdgeAltRef _result;
    HRESULT _hr = get_UpperEdgeAltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOBorderWall::PutUpperEdgeAltRef ( enum AgEBorderWallUpperLowerEdgeAltRef pVal ) {
    HRESULT _hr = put_UpperEdgeAltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOBorderWall::GetUpperEdgeHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_UpperEdgeHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOBorderWall::PutUpperEdgeHeight ( double pVal ) {
    HRESULT _hr = put_UpperEdgeHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEBorderWallUpperLowerEdgeAltRef _IAgVOBorderWall::GetLowerEdgeAltRef ( ) {
    enum AgEBorderWallUpperLowerEdgeAltRef _result;
    HRESULT _hr = get_LowerEdgeAltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOBorderWall::PutLowerEdgeAltRef ( enum AgEBorderWallUpperLowerEdgeAltRef pVal ) {
    HRESULT _hr = put_LowerEdgeAltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOBorderWall::GetLowerEdgeHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_LowerEdgeHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOBorderWall::PutLowerEdgeHeight ( double pVal ) {
    HRESULT _hr = put_LowerEdgeHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOBorderWall::GetUseWallTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseWallTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOBorderWall::PutUseWallTranslucency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseWallTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOBorderWall::GetWallTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_WallTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOBorderWall::PutWallTranslucency ( double pVal ) {
    HRESULT _hr = put_WallTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOBorderWall::GetUseLineTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOBorderWall::PutUseLineTranslucency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLineTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOBorderWall::GetLineTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_LineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOBorderWall::PutLineTranslucency ( double pVal ) {
    HRESULT _hr = put_LineTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOBorderWall::IsAltRefTypeSupported ( enum AgEBorderWallUpperLowerEdgeAltRef RefType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAltRefTypeSupported(RefType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVORefCrdnVector wrapper method implementations
//

enum AgEGeometricElemType _IAgVORefCrdnVector::GetTypeID ( ) {
    enum AgEGeometricElemType _result;
    HRESULT _hr = get_TypeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVORefCrdnVector::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgVORefCrdnVector::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutVisible ( VARIANT_BOOL pVisible ) {
    HRESULT _hr = put_Visible(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVORefCrdnVector::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutColor ( OLE_COLOR pVisible ) {
    HRESULT _hr = put_Color(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnVector::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEArrowType _IAgVORefCrdnVector::GetArrowType ( ) {
    enum AgEArrowType _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutArrowType ( enum AgEArrowType pVal ) {
    HRESULT _hr = put_ArrowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnVector::GetDrawAtCB ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAtCB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutDrawAtCB ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawAtCB(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnVector::GetRADecVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RADecVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutRADecVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RADecVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnVector::GetRADecUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RADecUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnVector::PutRADecUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_RADecUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnVector::GetMagnitudeVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MagnitudeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutMagnitudeVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MagnitudeVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnVector::GetMagnitudeUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MagnitudeUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnVector::PutMagnitudeUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_MagnitudeUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnVector::GetPersistenceVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistenceVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutPersistenceVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PersistenceVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVORefCrdnVector::GetDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutDuration ( double pVal ) {
    HRESULT _hr = put_Duration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVectorAxesConnectType _IAgVORefCrdnVector::GetConnect ( ) {
    enum AgEVectorAxesConnectType _result;
    HRESULT _hr = get_Connect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutConnect ( enum AgEVectorAxesConnectType pVal ) {
    HRESULT _hr = put_Connect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnVector::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutTransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Transparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnVector::GetAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Axes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnVector::PutAxes ( _bstr_t pVal ) {
    HRESULT _hr = put_Axes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnVector::GetDrawAtPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAtPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutDrawAtPoint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawAtPoint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnVector::GetPoint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnVector::PutPoint ( _bstr_t pVal ) {
    HRESULT _hr = put_Point(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnVector::GetTrueScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TrueScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnVector::PutTrueScale ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TrueScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVORefCrdnVector::GetAvailableAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVORefCrdnVector::GetAvailablePoints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVORefCrdnVector::GetMagnitudeDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MagnitudeDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEDisplayTimesType _IAgVORefCrdnVector::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVORefCrdnVector::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVORefCrdnVector::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVORefCrdnVector::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgVORefCrdnVector::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

//
// interface IAgVORefCrdnVector wrapper method implementations
//

enum AgEArrowType IAgVORefCrdnVector::GetArrowType ( ) {
    enum AgEArrowType _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutArrowType ( enum AgEArrowType pVal ) {
    HRESULT _hr = put_ArrowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnVector::GetDrawAtCB ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAtCB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutDrawAtCB ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawAtCB(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnVector::GetRADecVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RADecVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutRADecVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RADecVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnVector::GetRADecUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RADecUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnVector::PutRADecUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_RADecUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnVector::GetMagnitudeVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MagnitudeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutMagnitudeVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MagnitudeVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnVector::GetMagnitudeDimension ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MagnitudeDimension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgVORefCrdnVector::GetMagnitudeUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MagnitudeUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnVector::PutMagnitudeUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_MagnitudeUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnVector::GetPersistenceVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistenceVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutPersistenceVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PersistenceVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVORefCrdnVector::GetDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutDuration ( double pVal ) {
    HRESULT _hr = put_Duration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVectorAxesConnectType IAgVORefCrdnVector::GetConnect ( ) {
    enum AgEVectorAxesConnectType _result;
    HRESULT _hr = get_Connect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutConnect ( enum AgEVectorAxesConnectType pVal ) {
    HRESULT _hr = put_Connect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnVector::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutTransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Transparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnVector::GetAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Axes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnVector::PutAxes ( _bstr_t pVal ) {
    HRESULT _hr = put_Axes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnVector::GetDrawAtPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAtPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutDrawAtPoint ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawAtPoint(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnVector::GetPoint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnVector::PutPoint ( _bstr_t pVal ) {
    HRESULT _hr = put_Point(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnVector::GetTrueScale ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TrueScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnVector::PutTrueScale ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TrueScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVORefCrdnVector::GetAvailableAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVORefCrdnVector::GetAvailablePoints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVORefCrdnAxes wrapper method implementations
//

enum AgEGeometricElemType _IAgVORefCrdnAxes::GetTypeID ( ) {
    enum AgEGeometricElemType _result;
    HRESULT _hr = get_TypeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVORefCrdnAxes::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgVORefCrdnAxes::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAxes::PutVisible ( VARIANT_BOOL pVisible ) {
    HRESULT _hr = put_Visible(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVORefCrdnAxes::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAxes::PutColor ( OLE_COLOR pVisible ) {
    HRESULT _hr = put_Color(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnAxes::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAxes::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEArrowType _IAgVORefCrdnAxes::GetArrowType ( ) {
    enum AgEArrowType _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAxes::PutArrowType ( enum AgEArrowType pVal ) {
    HRESULT _hr = put_ArrowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnAxes::GetDrawAtCB ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAtCB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAxes::PutDrawAtCB ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawAtCB(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnAxes::GetAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Axes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnAxes::PutAxes ( _bstr_t pVal ) {
    HRESULT _hr = put_Axes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnAxes::GetPersistenceVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistenceVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAxes::PutPersistenceVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PersistenceVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVORefCrdnAxes::GetDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAxes::PutDuration ( double pVal ) {
    HRESULT _hr = put_Duration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVectorAxesConnectType _IAgVORefCrdnAxes::GetConnect ( ) {
    enum AgEVectorAxesConnectType _result;
    HRESULT _hr = get_Connect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAxes::PutConnect ( enum AgEVectorAxesConnectType pVal ) {
    HRESULT _hr = put_Connect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnAxes::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAxes::PutTransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Transparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEDisplayTimesType _IAgVORefCrdnAxes::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVORefCrdnAxes::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVORefCrdnAxes::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVORefCrdnAxes::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgVORefCrdnAxes::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

SAFEARRAY * _IAgVORefCrdnAxes::GetAvailableAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVORefCrdnAxes wrapper method implementations
//

enum AgEArrowType IAgVORefCrdnAxes::GetArrowType ( ) {
    enum AgEArrowType _result;
    HRESULT _hr = get_ArrowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnAxes::PutArrowType ( enum AgEArrowType pVal ) {
    HRESULT _hr = put_ArrowType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnAxes::GetDrawAtCB ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAtCB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnAxes::PutDrawAtCB ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawAtCB(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnAxes::GetAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Axes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnAxes::PutAxes ( _bstr_t pVal ) {
    HRESULT _hr = put_Axes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnAxes::GetPersistenceVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PersistenceVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnAxes::PutPersistenceVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PersistenceVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVORefCrdnAxes::GetDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnAxes::PutDuration ( double pVal ) {
    HRESULT _hr = put_Duration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVectorAxesConnectType IAgVORefCrdnAxes::GetConnect ( ) {
    enum AgEVectorAxesConnectType _result;
    HRESULT _hr = get_Connect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnAxes::PutConnect ( enum AgEVectorAxesConnectType pVal ) {
    HRESULT _hr = put_Connect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnAxes::GetTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Transparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnAxes::PutTransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Transparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVORefCrdnAxes::GetAvailableAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVORefCrdnAngle wrapper method implementations
//

VARIANT_BOOL _IAgVORefCrdnAngle::GetAngleValueVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AngleValueVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAngle::PutAngleValueVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AngleValueVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnAngle::GetAngleUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AngleUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnAngle::PutAngleUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_AngleUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEGeometricElemType _IAgVORefCrdnAngle::GetTypeID ( ) {
    enum AgEGeometricElemType _result;
    HRESULT _hr = get_TypeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVORefCrdnAngle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgVORefCrdnAngle::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAngle::PutVisible ( VARIANT_BOOL pVisible ) {
    HRESULT _hr = put_Visible(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVORefCrdnAngle::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAngle::PutColor ( OLE_COLOR pVisible ) {
    HRESULT _hr = put_Color(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnAngle::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnAngle::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEDisplayTimesType _IAgVORefCrdnAngle::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVORefCrdnAngle::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVORefCrdnAngle::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVORefCrdnAngle::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgVORefCrdnAngle::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

//
// interface IAgVORefCrdnAngle wrapper method implementations
//

VARIANT_BOOL IAgVORefCrdnAngle::GetAngleValueVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AngleValueVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnAngle::PutAngleValueVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AngleValueVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnAngle::GetAngleUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AngleUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnAngle::PutAngleUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_AngleUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVORefCrdnPlane wrapper method implementations
//

enum AgEGeometricElemType _IAgVORefCrdnPlane::GetTypeID ( ) {
    enum AgEGeometricElemType _result;
    HRESULT _hr = get_TypeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVORefCrdnPlane::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgVORefCrdnPlane::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutVisible ( VARIANT_BOOL pVisible ) {
    HRESULT _hr = put_Visible(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVORefCrdnPlane::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutColor ( OLE_COLOR pVisible ) {
    HRESULT _hr = put_Color(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPlane::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPlane::GetAxisLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AxisLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutAxisLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AxisLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPlane::GetTransparentPlaneVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransparentPlaneVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutTransparentPlaneVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TransparentPlaneVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVORefCrdnPlane::GetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutSize ( double pVal ) {
    HRESULT _hr = put_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVORefCrdnPlane::GetTransparency ( ) {
    double _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutTransparency ( double pVal ) {
    HRESULT _hr = put_Transparency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPlane::GetDrawAtObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAtObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutDrawAtObject ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawAtObject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPlane::GetRectGridVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RectGridVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutRectGridVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RectGridVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPlane::GetCircGridVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CircGridVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutCircGridVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CircGridVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVORefCrdnPlane::GetPlaneGridSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_PlaneGridSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPlane::PutPlaneGridSpacing ( double pVal ) {
    HRESULT _hr = put_PlaneGridSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEDisplayTimesType _IAgVORefCrdnPlane::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVORefCrdnPlane::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVORefCrdnPlane::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVORefCrdnPlane::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgVORefCrdnPlane::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

//
// interface IAgVORefCrdnPlane wrapper method implementations
//

VARIANT_BOOL IAgVORefCrdnPlane::GetAxisLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AxisLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPlane::PutAxisLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AxisLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnPlane::GetTransparentPlaneVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransparentPlaneVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPlane::PutTransparentPlaneVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TransparentPlaneVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVORefCrdnPlane::GetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPlane::PutSize ( double pVal ) {
    HRESULT _hr = put_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVORefCrdnPlane::GetTransparency ( ) {
    double _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPlane::PutTransparency ( double pVal ) {
    HRESULT _hr = put_Transparency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnPlane::GetDrawAtObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawAtObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPlane::PutDrawAtObject ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DrawAtObject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnPlane::GetRectGridVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RectGridVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPlane::PutRectGridVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RectGridVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnPlane::GetCircGridVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CircGridVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPlane::PutCircGridVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CircGridVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVORefCrdnPlane::GetPlaneGridSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_PlaneGridSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPlane::PutPlaneGridSpacing ( double pVal ) {
    HRESULT _hr = put_PlaneGridSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVORefCrdnPoint wrapper method implementations
//

enum AgEGeometricElemType _IAgVORefCrdnPoint::GetTypeID ( ) {
    enum AgEGeometricElemType _result;
    HRESULT _hr = get_TypeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVORefCrdnPoint::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgVORefCrdnPoint::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPoint::PutVisible ( VARIANT_BOOL pVisible ) {
    HRESULT _hr = put_Visible(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVORefCrdnPoint::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPoint::PutColor ( OLE_COLOR pVisible ) {
    HRESULT _hr = put_Color(pVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPoint::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPoint::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETrajectoryType _IAgVORefCrdnPoint::GetTrajectoryType ( ) {
    enum AgETrajectoryType _result;
    HRESULT _hr = get_TrajectoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPoint::PutTrajectoryType ( enum AgETrajectoryType pVal ) {
    HRESULT _hr = put_TrajectoryType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPoint::GetRADecVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RADecVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPoint::PutRADecVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RADecVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnPoint::GetRADecUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RADecUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnPoint::PutRADecUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_RADecUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPoint::GetMagnitudeVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MagnitudeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPoint::PutMagnitudeVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MagnitudeVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnPoint::GetMagnitudeUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MagnitudeUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnPoint::PutMagnitudeUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_MagnitudeUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVORefCrdnPoint::GetCartesianVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CartesianVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPoint::PutCartesianVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CartesianVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnPoint::GetCartesianUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CartesianUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnPoint::PutCartesianUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_CartesianUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVORefCrdnPoint::GetSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_System(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVORefCrdnPoint::PutSystem ( _bstr_t pVal ) {
    HRESULT _hr = put_System(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVORefCrdnPoint::GetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVORefCrdnPoint::PutSize ( double pVal ) {
    HRESULT _hr = put_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEDisplayTimesType _IAgVORefCrdnPoint::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVORefCrdnPoint::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVORefCrdnPoint::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVORefCrdnPoint::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgVORefCrdnPoint::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

SAFEARRAY * _IAgVORefCrdnPoint::GetAvailableSystems ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableSystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVORefCrdnPoint wrapper method implementations
//

enum AgETrajectoryType IAgVORefCrdnPoint::GetTrajectoryType ( ) {
    enum AgETrajectoryType _result;
    HRESULT _hr = get_TrajectoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPoint::PutTrajectoryType ( enum AgETrajectoryType pVal ) {
    HRESULT _hr = put_TrajectoryType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnPoint::GetRADecVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RADecVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPoint::PutRADecVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RADecVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnPoint::GetRADecUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RADecUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnPoint::PutRADecUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_RADecUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnPoint::GetMagnitudeVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MagnitudeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPoint::PutMagnitudeVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MagnitudeVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnPoint::GetMagnitudeUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MagnitudeUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnPoint::PutMagnitudeUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_MagnitudeUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVORefCrdnPoint::GetCartesianVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CartesianVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPoint::PutCartesianVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CartesianVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnPoint::GetCartesianUnitAbrv ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CartesianUnitAbrv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnPoint::PutCartesianUnitAbrv ( _bstr_t pVal ) {
    HRESULT _hr = put_CartesianUnitAbrv(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVORefCrdnPoint::GetSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_System(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVORefCrdnPoint::PutSystem ( _bstr_t pVal ) {
    HRESULT _hr = put_System(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVORefCrdnPoint::GetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVORefCrdnPoint::PutSize ( double pVal ) {
    HRESULT _hr = put_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVORefCrdnPoint::GetAvailableSystems ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableSystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgTargetGraphics wrapper method implementations
//

VARIANT_BOOL _IAgTargetGraphics::GetInheritFromScenario ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFromScenario(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTargetGraphics::PutInheritFromScenario ( VARIANT_BOOL pInherit ) {
    HRESULT _hr = put_InheritFromScenario(pInherit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgTargetGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTargetGraphics::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgTargetGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgTargetGraphics::PutMarkerStyle ( _bstr_t pMarkerStyle ) {
    HRESULT _hr = put_MarkerStyle(pMarkerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgTargetGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTargetGraphics::PutLabelVisible ( VARIANT_BOOL pShowLabel ) {
    HRESULT _hr = put_LabelVisible(pShowLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgBasicAzElMaskPtr _IAgTargetGraphics::GetAzElMask ( ) {
    struct IAgBasicAzElMask * _result = 0;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgBasicAzElMaskPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgTargetGraphics::GetContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_Contours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

VARIANT_BOOL _IAgTargetGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTargetGraphics::PutUseInstNameLabel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseInstNameLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgTargetGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgTargetGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgTargetGraphics::GetMarkerColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_MarkerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTargetGraphics::PutMarkerColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_MarkerColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgTargetGraphics::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTargetGraphics::PutLabelColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_LabelColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr _IAgTargetGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

//
// interface _IAgPtTargetVOModel wrapper method implementations
//

VARIANT_BOOL _IAgPtTargetVOModel::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPtTargetVOModel::PutVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_Visible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgPtTargetVOModel::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPtTargetVOModel::PutScaleValue ( double pScale ) {
    HRESULT _hr = put_ScaleValue(pScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVODetailThresholdPtr _IAgPtTargetVOModel::GetDetailThreshold ( ) {
    struct IAgVODetailThreshold * _result = 0;
    HRESULT _hr = get_DetailThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODetailThresholdPtr(_result, false);
}

IAgVOModelDataPtr _IAgPtTargetVOModel::GetModelData ( ) {
    struct IAgVOModelData * _result = 0;
    HRESULT _hr = get_ModelData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelDataPtr(_result, false);
}

enum AgEModelType _IAgPtTargetVOModel::GetModelType ( ) {
    enum AgEModelType _result;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPtTargetVOModel::PutModelType ( enum AgEModelType pType ) {
    HRESULT _hr = put_ModelType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOModelArticPtr _IAgPtTargetVOModel::GetArticulation ( ) {
    struct IAgVOModelArtic * _result = 0;
    HRESULT _hr = get_Articulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelArticPtr(_result, false);
}

IAgVOMarkerPtr _IAgPtTargetVOModel::GetMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

VARIANT_BOOL _IAgPtTargetVOModel::GetIsPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPtTargetVOModel::PutIsPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgPtTargetVOModel::GetPointSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgPtTargetVOModel::PutPointSize ( const _variant_t & pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgLLAPosition wrapper method implementations
//

IAgLLAPositionPtr IAgLLAPosition::ConvertTo ( enum AgELLAPositionType Type ) {
    struct IAgLLAPosition * _result = 0;
    HRESULT _hr = raw_ConvertTo(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLLAPositionPtr(_result, false);
}

enum AgELLAPositionType IAgLLAPosition::GetType ( ) {
    enum AgELLAPositionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgLLAPosition::Assign ( struct IAgLLAPosition * pPos ) {
    HRESULT _hr = raw_Assign(pPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgLLAPosition::AssignGeocentric ( double Lat, double Lon, double Rad ) {
    HRESULT _hr = raw_AssignGeocentric(Lat, Lon, Rad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgLLAPosition::AssignGeodetic ( double Lat, double Lon, double Alt ) {
    HRESULT _hr = raw_AssignGeodetic(Lat, Lon, Alt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgLLAPosition wrapper method implementations
//

IAgLLAPositionPtr _IAgLLAPosition::ConvertTo ( enum AgELLAPositionType Type ) {
    struct IAgLLAPosition * _result = 0;
    HRESULT _hr = raw_ConvertTo(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLLAPositionPtr(_result, false);
}

enum AgELLAPositionType _IAgLLAPosition::GetType ( ) {
    enum AgELLAPositionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgLLAPosition::Assign ( struct IAgLLAPosition * pPos ) {
    HRESULT _hr = raw_Assign(pPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgLLAPosition::AssignGeocentric ( double Lat, double Lon, double Rad ) {
    HRESULT _hr = raw_AssignGeocentric(Lat, Lon, Rad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgLLAPosition::AssignGeodetic ( double Lat, double Lon, double Alt ) {
    HRESULT _hr = raw_AssignGeodetic(Lat, Lon, Alt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVODataDisplayElement wrapper method implementations
//

_bstr_t _IAgVODataDisplayElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVODataDisplayElement::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVODataDisplayElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVODataDisplayElement::IsDisplayedInWindow ( _bstr_t Title ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayedInWindow(Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEVOLocation _IAgVODataDisplayElement::GetLocation ( ) {
    enum AgEVOLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutLocation ( enum AgEVOLocation pVal ) {
    HRESULT _hr = put_Location(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOXOrigin _IAgVODataDisplayElement::GetXOrigin ( ) {
    enum AgEVOXOrigin _result;
    HRESULT _hr = get_XOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutXOrigin ( enum AgEVOXOrigin pVal ) {
    HRESULT _hr = put_XOrigin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVODataDisplayElement::GetX ( ) {
    long _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutX ( long pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOYOrigin _IAgVODataDisplayElement::GetYOrigin ( ) {
    enum AgEVOYOrigin _result;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutYOrigin ( enum AgEVOYOrigin pVal ) {
    HRESULT _hr = put_YOrigin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVODataDisplayElement::GetY ( ) {
    long _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutY ( long pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVODataDisplayElement::GetTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutTitle ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOFontSize _IAgVODataDisplayElement::GetFontSize ( ) {
    enum AgEVOFontSize _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutFontSize ( enum AgEVOFontSize pVal ) {
    HRESULT _hr = put_FontSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVODataDisplayElement::GetFontColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FontColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutFontColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_FontColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOFormat _IAgVODataDisplayElement::GetFormat ( ) {
    enum AgEVOFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutFormat ( enum AgEVOFormat pVal ) {
    HRESULT _hr = put_Format(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVODataDisplayElement::GetUseBackground ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutUseBackground ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseBackground(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVODataDisplayElement::GetTransparentBg ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransparentBg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutTransparentBg ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TransparentBg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVODataDisplayElement::GetBgWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_BgWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutBgWidth ( long pVal ) {
    HRESULT _hr = put_BgWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVODataDisplayElement::GetBgHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_BgHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutBgHeight ( long pVal ) {
    HRESULT _hr = put_BgHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVODataDisplayElement::GetBgColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BgColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVODataDisplayElement::PutBgColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_BgColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVODataDisplayElement::GetAvailableWindows ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVODataDisplayElement::AddToWindow ( _bstr_t Title ) {
    HRESULT _hr = raw_AddToWindow(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVODataDisplayElement::RemoveFromWindow ( _bstr_t Title ) {
    HRESULT _hr = raw_RemoveFromWindow(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVODataDisplayElement::AddToAllWindows ( ) {
    HRESULT _hr = raw_AddToAllWindows();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeInitialState wrapper method implementations
//

_variant_t _IAgVeInitialState::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeInitialState::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrbitStatePtr _IAgVeInitialState::GetRepresentation ( ) {
    struct STKUtil::IAgOrbitState * _result = 0;
    HRESULT _hr = get_Representation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrbitStatePtr(_result, false);
}

enum AgEVePropagationFrame _IAgVeInitialState::GetPropagationFrame ( ) {
    enum AgEVePropagationFrame _result;
    HRESULT _hr = get_PropagationFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInitialState::PutPropagationFrame ( enum AgEVePropagationFrame pVal ) {
    HRESULT _hr = put_PropagationFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeInitialState::GetSupportedPropagationFrames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedPropagationFrames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeInitialState wrapper method implementations
//

_variant_t IAgVeInitialState::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeInitialState::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrbitStatePtr IAgVeInitialState::GetRepresentation ( ) {
    struct STKUtil::IAgOrbitState * _result = 0;
    HRESULT _hr = get_Representation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrbitStatePtr(_result, false);
}

enum AgEVePropagationFrame IAgVeInitialState::GetPropagationFrame ( ) {
    enum AgEVePropagationFrame _result;
    HRESULT _hr = get_PropagationFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInitialState::PutPropagationFrame ( enum AgEVePropagationFrame pVal ) {
    HRESULT _hr = put_PropagationFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeInitialState::GetSupportedPropagationFrames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedPropagationFrames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeHPOPCentralBodyGravity wrapper method implementations
//

_bstr_t _IAgVeHPOPCentralBodyGravity::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeHPOPCentralBodyGravity::PutFile ( _bstr_t pVal ) {
    HRESULT _hr = put_File(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeHPOPCentralBodyGravity::GetMaxDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPCentralBodyGravity::PutMaxDegree ( long pVal ) {
    HRESULT _hr = put_MaxDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeHPOPCentralBodyGravity::GetMaxOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPCentralBodyGravity::PutMaxOrder ( long pVal ) {
    HRESULT _hr = put_MaxOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeHPOPCentralBodyGravity::GetUseSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPCentralBodyGravity::PutUseSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeHPOPCentralBodyGravity::GetUseOceanTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOceanTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPCentralBodyGravity::PutUseOceanTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseOceanTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESolidTide _IAgVeHPOPCentralBodyGravity::GetSolidTideType ( ) {
    enum AgESolidTide _result;
    HRESULT _hr = get_SolidTideType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPCentralBodyGravity::PutSolidTideType ( enum AgESolidTide pSolidTide ) {
    HRESULT _hr = put_SolidTideType(pSolidTide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeHPOPCentralBodyGravity wrapper method implementations
//

_bstr_t IAgVeHPOPCentralBodyGravity::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeHPOPCentralBodyGravity::PutFile ( _bstr_t pVal ) {
    HRESULT _hr = put_File(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeHPOPCentralBodyGravity::GetMaxDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPCentralBodyGravity::PutMaxDegree ( long pVal ) {
    HRESULT _hr = put_MaxDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeHPOPCentralBodyGravity::GetMaxOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPCentralBodyGravity::PutMaxOrder ( long pVal ) {
    HRESULT _hr = put_MaxOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeHPOPCentralBodyGravity::GetUseSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPCentralBodyGravity::PutUseSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeHPOPCentralBodyGravity::GetUseOceanTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOceanTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPCentralBodyGravity::PutUseOceanTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseOceanTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESolidTide IAgVeHPOPCentralBodyGravity::GetSolidTideType ( ) {
    enum AgESolidTide _result;
    HRESULT _hr = get_SolidTideType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPCentralBodyGravity::PutSolidTideType ( enum AgESolidTide pSolidTide ) {
    HRESULT _hr = put_SolidTideType(pSolidTide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeRadiationPressure wrapper method implementations
//

_bstr_t _IAgVeRadiationPressure::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeRadiationPressure::PutFile ( _bstr_t pVal ) {
    HRESULT _hr = put_File(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeRadiationPressure::GetCk ( ) {
    double _result = 0;
    HRESULT _hr = get_Ck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRadiationPressure::PutCk ( double pVal ) {
    HRESULT _hr = put_Ck(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeRadiationPressure::GetAreaMassRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaMassRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRadiationPressure::PutAreaMassRatio ( double pVal ) {
    HRESULT _hr = put_AreaMassRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeRadiationPressure::GetIncludeAlbedo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeAlbedo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRadiationPressure::PutIncludeAlbedo ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeAlbedo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeRadiationPressure::GetIncludeThermal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeThermal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRadiationPressure::PutIncludeThermal ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeThermal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeRadiationPressure wrapper method implementations
//

_bstr_t IAgVeRadiationPressure::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeRadiationPressure::PutFile ( _bstr_t pVal ) {
    HRESULT _hr = put_File(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeRadiationPressure::GetCk ( ) {
    double _result = 0;
    HRESULT _hr = get_Ck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeRadiationPressure::PutCk ( double pVal ) {
    HRESULT _hr = put_Ck(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeRadiationPressure::GetAreaMassRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaMassRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeRadiationPressure::PutAreaMassRatio ( double pVal ) {
    HRESULT _hr = put_AreaMassRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeRadiationPressure::GetIncludeAlbedo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeAlbedo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeRadiationPressure::PutIncludeAlbedo ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeAlbedo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeRadiationPressure::GetIncludeThermal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeThermal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeRadiationPressure::PutIncludeThermal ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeThermal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSRPModelBase wrapper method implementations
//

enum AgESRPModel IAgSRPModelBase::GetType ( ) {
    enum AgESRPModel _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeHPOPSRPModel wrapper method implementations
//

enum AgESRPModel IAgVeHPOPSRPModel::GetModelType ( ) {
    enum AgESRPModel _result;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeHPOPSRPModel::SetModelType ( enum AgESRPModel SRPModel ) {
    HRESULT _hr = raw_SetModelType(SRPModel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeHPOPSRPModel::IsModelTypeSupported ( enum AgESRPModel SRPModel ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsModelTypeSupported(SRPModel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeHPOPSRPModel::GetModelSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ModelSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSRPModelBasePtr IAgVeHPOPSRPModel::GetModel ( ) {
    struct IAgSRPModelBase * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSRPModelBasePtr(_result, false);
}

//
// interface _IAgVeHPOPSolarRadiationPressure wrapper method implementations
//

VARIANT_BOOL _IAgVeHPOPSolarRadiationPressure::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPSolarRadiationPressure::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeHPOPSolarRadiationPressure::GetCr ( ) {
    double _result = 0;
    HRESULT _hr = get_Cr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPSolarRadiationPressure::PutCr ( double pVal ) {
    HRESULT _hr = put_Cr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeHPOPSolarRadiationPressure::GetAreaMassRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaMassRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPSolarRadiationPressure::PutAreaMassRatio ( double pVal ) {
    HRESULT _hr = put_AreaMassRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEShadowModel _IAgVeHPOPSolarRadiationPressure::GetShadowModel ( ) {
    enum AgEShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPSolarRadiationPressure::PutShadowModel ( enum AgEShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeHPOPSolarRadiationPressure::GetUseBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPSolarRadiationPressure::PutUseBoundaryMitigation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseBoundaryMitigation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeHPOPSRPModelPtr _IAgVeHPOPSolarRadiationPressure::GetSRPModel ( ) {
    struct IAgVeHPOPSRPModel * _result = 0;
    HRESULT _hr = get_SRPModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPSRPModelPtr(_result, false);
}

//
// interface IAgVeHPOPSolarRadiationPressure wrapper method implementations
//

VARIANT_BOOL IAgVeHPOPSolarRadiationPressure::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPSolarRadiationPressure::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeHPOPSolarRadiationPressure::GetCr ( ) {
    double _result = 0;
    HRESULT _hr = get_Cr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPSolarRadiationPressure::PutCr ( double pVal ) {
    HRESULT _hr = put_Cr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeHPOPSolarRadiationPressure::GetAreaMassRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaMassRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPSolarRadiationPressure::PutAreaMassRatio ( double pVal ) {
    HRESULT _hr = put_AreaMassRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEShadowModel IAgVeHPOPSolarRadiationPressure::GetShadowModel ( ) {
    enum AgEShadowModel _result;
    HRESULT _hr = get_ShadowModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPSolarRadiationPressure::PutShadowModel ( enum AgEShadowModel pVal ) {
    HRESULT _hr = put_ShadowModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeHPOPSolarRadiationPressure::GetUseBoundaryMitigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseBoundaryMitigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPSolarRadiationPressure::PutUseBoundaryMitigation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseBoundaryMitigation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeHPOPSRPModelPtr IAgVeHPOPSolarRadiationPressure::GetSRPModel ( ) {
    struct IAgVeHPOPSRPModel * _result = 0;
    HRESULT _hr = get_SRPModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPSRPModelPtr(_result, false);
}

//
// interface _IAgVeSolarFluxGeoMagEnterManually wrapper method implementations
//

double _IAgVeSolarFluxGeoMagEnterManually::GetDailyF107 ( ) {
    double _result = 0;
    HRESULT _hr = get_DailyF107(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSolarFluxGeoMagEnterManually::PutDailyF107 ( double pVal ) {
    HRESULT _hr = put_DailyF107(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSolarFluxGeoMagEnterManually::GetAverageF107 ( ) {
    double _result = 0;
    HRESULT _hr = get_AverageF107(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSolarFluxGeoMagEnterManually::PutAverageF107 ( double pVal ) {
    HRESULT _hr = put_AverageF107(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSolarFluxGeoMagEnterManually::GetGeomagneticIndex ( ) {
    double _result = 0;
    HRESULT _hr = get_GeomagneticIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSolarFluxGeoMagEnterManually::PutGeomagneticIndex ( double pVal ) {
    HRESULT _hr = put_GeomagneticIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeSolarFluxGeoMagEnterManually wrapper method implementations
//

double IAgVeSolarFluxGeoMagEnterManually::GetDailyF107 ( ) {
    double _result = 0;
    HRESULT _hr = get_DailyF107(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSolarFluxGeoMagEnterManually::PutDailyF107 ( double pVal ) {
    HRESULT _hr = put_DailyF107(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSolarFluxGeoMagEnterManually::GetAverageF107 ( ) {
    double _result = 0;
    HRESULT _hr = get_AverageF107(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSolarFluxGeoMagEnterManually::PutAverageF107 ( double pVal ) {
    HRESULT _hr = put_AverageF107(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSolarFluxGeoMagEnterManually::GetGeomagneticIndex ( ) {
    double _result = 0;
    HRESULT _hr = get_GeomagneticIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSolarFluxGeoMagEnterManually::PutGeomagneticIndex ( double pVal ) {
    HRESULT _hr = put_GeomagneticIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeSolarFluxGeoMagUseFile wrapper method implementations
//

_bstr_t _IAgVeSolarFluxGeoMagUseFile::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeSolarFluxGeoMagUseFile::PutFile ( _bstr_t pVal ) {
    HRESULT _hr = put_File(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGeomagFluxUpdateRate _IAgVeSolarFluxGeoMagUseFile::GetGeomagFluxUpdateRate ( ) {
    enum AgEVeGeomagFluxUpdateRate _result;
    HRESULT _hr = get_GeomagFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSolarFluxGeoMagUseFile::PutGeomagFluxUpdateRate ( enum AgEVeGeomagFluxUpdateRate pVal ) {
    HRESULT _hr = put_GeomagFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGeomagFluxSrc _IAgVeSolarFluxGeoMagUseFile::GetGeomagFluxSrc ( ) {
    enum AgEVeGeomagFluxSrc _result;
    HRESULT _hr = get_GeomagFluxSrc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSolarFluxGeoMagUseFile::PutGeomagFluxSrc ( enum AgEVeGeomagFluxSrc pVal ) {
    HRESULT _hr = put_GeomagFluxSrc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeSolarFluxGeoMagUseFile wrapper method implementations
//

_bstr_t IAgVeSolarFluxGeoMagUseFile::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSolarFluxGeoMagUseFile::PutFile ( _bstr_t pVal ) {
    HRESULT _hr = put_File(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGeomagFluxUpdateRate IAgVeSolarFluxGeoMagUseFile::GetGeomagFluxUpdateRate ( ) {
    enum AgEVeGeomagFluxUpdateRate _result;
    HRESULT _hr = get_GeomagFluxUpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSolarFluxGeoMagUseFile::PutGeomagFluxUpdateRate ( enum AgEVeGeomagFluxUpdateRate pVal ) {
    HRESULT _hr = put_GeomagFluxUpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGeomagFluxSrc IAgVeSolarFluxGeoMagUseFile::GetGeomagFluxSrc ( ) {
    enum AgEVeGeomagFluxSrc _result;
    HRESULT _hr = get_GeomagFluxSrc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSolarFluxGeoMagUseFile::PutGeomagFluxSrc ( enum AgEVeGeomagFluxSrc pVal ) {
    HRESULT _hr = put_GeomagFluxSrc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeHPOPForceModelDrag wrapper method implementations
//

VARIANT_BOOL _IAgVeHPOPForceModelDrag::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPForceModelDrag::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeHPOPForceModelDrag::GetCd ( ) {
    double _result = 0;
    HRESULT _hr = get_Cd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPForceModelDrag::PutCd ( double pVal ) {
    HRESULT _hr = put_Cd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeHPOPForceModelDrag::GetAreaMassRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaMassRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPForceModelDrag::PutAreaMassRatio ( double pVal ) {
    HRESULT _hr = put_AreaMassRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAtmosphericDensityModel _IAgVeHPOPForceModelDrag::GetAtmosphericDensityModel ( ) {
    enum AgEAtmosphericDensityModel _result;
    HRESULT _hr = get_AtmosphericDensityModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPForceModelDrag::PutAtmosphericDensityModel ( enum AgEAtmosphericDensityModel pVal ) {
    HRESULT _hr = put_AtmosphericDensityModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSolarFluxGeoMag _IAgVeHPOPForceModelDrag::GetSolarFluxGeoMagType ( ) {
    enum AgEVeSolarFluxGeoMag _result;
    HRESULT _hr = get_SolarFluxGeoMagType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeHPOPForceModelDrag::SetSolarFluxGeoMagType ( enum AgEVeSolarFluxGeoMag SolarFluxGeoMag ) {
    HRESULT _hr = raw_SetSolarFluxGeoMagType(SolarFluxGeoMag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeSolarFluxGeoMagPtr _IAgVeHPOPForceModelDrag::GetSolarFluxGeoMag ( ) {
    struct IAgVeSolarFluxGeoMag * _result = 0;
    HRESULT _hr = get_SolarFluxGeoMag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSolarFluxGeoMagPtr(_result, false);
}

//
// interface IAgVeHPOPForceModelDrag wrapper method implementations
//

VARIANT_BOOL IAgVeHPOPForceModelDrag::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPForceModelDrag::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeHPOPForceModelDrag::GetCd ( ) {
    double _result = 0;
    HRESULT _hr = get_Cd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPForceModelDrag::PutCd ( double pVal ) {
    HRESULT _hr = put_Cd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeHPOPForceModelDrag::GetAreaMassRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaMassRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPForceModelDrag::PutAreaMassRatio ( double pVal ) {
    HRESULT _hr = put_AreaMassRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAtmosphericDensityModel IAgVeHPOPForceModelDrag::GetAtmosphericDensityModel ( ) {
    enum AgEAtmosphericDensityModel _result;
    HRESULT _hr = get_AtmosphericDensityModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPForceModelDrag::PutAtmosphericDensityModel ( enum AgEAtmosphericDensityModel pVal ) {
    HRESULT _hr = put_AtmosphericDensityModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSolarFluxGeoMag IAgVeHPOPForceModelDrag::GetSolarFluxGeoMagType ( ) {
    enum AgEVeSolarFluxGeoMag _result;
    HRESULT _hr = get_SolarFluxGeoMagType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeHPOPForceModelDrag::SetSolarFluxGeoMagType ( enum AgEVeSolarFluxGeoMag SolarFluxGeoMag ) {
    HRESULT _hr = raw_SetSolarFluxGeoMagType(SolarFluxGeoMag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeSolarFluxGeoMagPtr IAgVeHPOPForceModelDrag::GetSolarFluxGeoMag ( ) {
    struct IAgVeSolarFluxGeoMag * _result = 0;
    HRESULT _hr = get_SolarFluxGeoMag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSolarFluxGeoMagPtr(_result, false);
}

//
// interface _IAgVeHPOPForceModelDragOptions wrapper method implementations
//

VARIANT_BOOL _IAgVeHPOPForceModelDragOptions::GetUseApproxAlt ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproxAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPForceModelDragOptions::PutUseApproxAlt ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproxAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeHPOPForceModelDragOptions::GetUseApparentSunPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApparentSunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPForceModelDragOptions::PutUseApparentSunPosition ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApparentSunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeHPOPForceModelDragOptions wrapper method implementations
//

VARIANT_BOOL IAgVeHPOPForceModelDragOptions::GetUseApproxAlt ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApproxAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPForceModelDragOptions::PutUseApproxAlt ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApproxAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeHPOPForceModelDragOptions::GetUseApparentSunPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApparentSunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPForceModelDragOptions::PutUseApparentSunPosition ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseApparentSunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeHPOPSolarRadiationPressureOptions wrapper method implementations
//

enum AgEMethodToComputeSunPosition _IAgVeHPOPSolarRadiationPressureOptions::GetMethodToComputeSunPosition ( ) {
    enum AgEMethodToComputeSunPosition _result;
    HRESULT _hr = get_MethodToComputeSunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPSolarRadiationPressureOptions::PutMethodToComputeSunPosition ( enum AgEMethodToComputeSunPosition pVal ) {
    HRESULT _hr = put_MethodToComputeSunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeHPOPSolarRadiationPressureOptions::GetAtmosAltOfEarthShapeForEclipse ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAltOfEarthShapeForEclipse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeHPOPSolarRadiationPressureOptions::PutAtmosAltOfEarthShapeForEclipse ( double pVal ) {
    HRESULT _hr = put_AtmosAltOfEarthShapeForEclipse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeHPOPSolarRadiationPressureOptions wrapper method implementations
//

enum AgEMethodToComputeSunPosition IAgVeHPOPSolarRadiationPressureOptions::GetMethodToComputeSunPosition ( ) {
    enum AgEMethodToComputeSunPosition _result;
    HRESULT _hr = get_MethodToComputeSunPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPSolarRadiationPressureOptions::PutMethodToComputeSunPosition ( enum AgEMethodToComputeSunPosition pVal ) {
    HRESULT _hr = put_MethodToComputeSunPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeHPOPSolarRadiationPressureOptions::GetAtmosAltOfEarthShapeForEclipse ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAltOfEarthShapeForEclipse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeHPOPSolarRadiationPressureOptions::PutAtmosAltOfEarthShapeForEclipse ( double pVal ) {
    HRESULT _hr = put_AtmosAltOfEarthShapeForEclipse(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeStatic wrapper method implementations
//

double _IAgVeStatic::GetSatelliteMass ( ) {
    double _result = 0;
    HRESULT _hr = get_SatelliteMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeStatic::PutSatelliteMass ( double pVal ) {
    HRESULT _hr = put_SatelliteMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeStatic::GetIncRelativisticAcc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncRelativisticAcc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeStatic::PutIncRelativisticAcc ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncRelativisticAcc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeStatic wrapper method implementations
//

double IAgVeStatic::GetSatelliteMass ( ) {
    double _result = 0;
    HRESULT _hr = get_SatelliteMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeStatic::PutSatelliteMass ( double pVal ) {
    HRESULT _hr = put_SatelliteMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeStatic::GetIncRelativisticAcc ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncRelativisticAcc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeStatic::PutIncRelativisticAcc ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncRelativisticAcc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeSolidTides wrapper method implementations
//

VARIANT_BOOL _IAgVeSolidTides::GetIncTimeDepSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncTimeDepSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSolidTides::PutIncTimeDepSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncTimeDepSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSolidTides::GetMinAmplitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MinAmplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSolidTides::PutMinAmplitude ( double pVal ) {
    HRESULT _hr = put_MinAmplitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSolidTides::GetTruncateSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TruncateSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSolidTides::PutTruncateSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TruncateSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeSolidTides wrapper method implementations
//

VARIANT_BOOL IAgVeSolidTides::GetIncTimeDepSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncTimeDepSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSolidTides::PutIncTimeDepSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncTimeDepSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSolidTides::GetMinAmplitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MinAmplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSolidTides::PutMinAmplitude ( double pVal ) {
    HRESULT _hr = put_MinAmplitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSolidTides::GetTruncateSolidTides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TruncateSolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSolidTides::PutTruncateSolidTides ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TruncateSolidTides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeOceanTides wrapper method implementations
//

long _IAgVeOceanTides::GetMaxDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeOceanTides::PutMaxDegree ( long pVal ) {
    HRESULT _hr = put_MaxDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeOceanTides::GetMaxOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeOceanTides::PutMaxOrder ( long pVal ) {
    HRESULT _hr = put_MaxOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeOceanTides::GetMinAmplitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MinAmplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeOceanTides::PutMinAmplitude ( double pVal ) {
    HRESULT _hr = put_MinAmplitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeOceanTides wrapper method implementations
//

long IAgVeOceanTides::GetMaxDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeOceanTides::PutMaxDegree ( long pVal ) {
    HRESULT _hr = put_MaxDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeOceanTides::GetMaxOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeOceanTides::PutMaxOrder ( long pVal ) {
    HRESULT _hr = put_MaxOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeOceanTides::GetMinAmplitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MinAmplitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeOceanTides::PutMinAmplitude ( double pVal ) {
    HRESULT _hr = put_MinAmplitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePluginSettings wrapper method implementations
//

_variant_t _IAgVePluginSettings::GetProperty ( _bstr_t Path ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT _IAgVePluginSettings::SetProperty ( _bstr_t Path, const _variant_t & Val ) {
    HRESULT _hr = raw_SetProperty(Path, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgVePluginSettings::GetAvailableProperties ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVePluginSettings wrapper method implementations
//

_variant_t IAgVePluginSettings::GetProperty ( _bstr_t Path ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT IAgVePluginSettings::SetProperty ( _bstr_t Path, const _variant_t & Val ) {
    HRESULT _hr = raw_SetProperty(Path, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgVePluginSettings::GetAvailableProperties ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVePluginPropagator wrapper method implementations
//

VARIANT_BOOL _IAgVePluginPropagator::GetUsePlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePluginPropagator::PutUsePlugin ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePlugin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVePluginPropagator::GetPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVePluginPropagator::PutPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVePluginSettingsPtr _IAgVePluginPropagator::GetPluginSettings ( ) {
    struct IAgVePluginSettings * _result = 0;
    HRESULT _hr = get_PluginSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePluginSettingsPtr(_result, false);
}

IUnknownPtr _IAgVePluginPropagator::GetRawPluginObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetRawPluginObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT _IAgVePluginPropagator::ApplyPluginChanges ( ) {
    HRESULT _hr = raw_ApplyPluginChanges();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgVePluginPropagator::GetAvailablePlugins ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePlugins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVePluginPropagator wrapper method implementations
//

VARIANT_BOOL IAgVePluginPropagator::GetUsePlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePluginPropagator::PutUsePlugin ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePlugin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVePluginPropagator::GetPluginName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PluginName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVePluginPropagator::PutPluginName ( _bstr_t pVal ) {
    HRESULT _hr = put_PluginName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVePluginSettingsPtr IAgVePluginPropagator::GetPluginSettings ( ) {
    struct IAgVePluginSettings * _result = 0;
    HRESULT _hr = get_PluginSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePluginSettingsPtr(_result, false);
}

IUnknownPtr IAgVePluginPropagator::GetRawPluginObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetRawPluginObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVePluginPropagator::ApplyPluginChanges ( ) {
    HRESULT _hr = raw_ApplyPluginChanges();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgVePluginPropagator::GetAvailablePlugins ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePlugins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeHPOPForceModelMoreOptions wrapper method implementations
//

IAgVeHPOPForceModelDragOptionsPtr _IAgVeHPOPForceModelMoreOptions::GetDrag ( ) {
    struct IAgVeHPOPForceModelDragOptions * _result = 0;
    HRESULT _hr = get_Drag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPForceModelDragOptionsPtr(_result, false);
}

IAgVeHPOPSolarRadiationPressureOptionsPtr _IAgVeHPOPForceModelMoreOptions::GetSolarRadiationPressure ( ) {
    struct IAgVeHPOPSolarRadiationPressureOptions * _result = 0;
    HRESULT _hr = get_SolarRadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPSolarRadiationPressureOptionsPtr(_result, false);
}

IAgVeStaticPtr _IAgVeHPOPForceModelMoreOptions::GetStatic ( ) {
    struct IAgVeStatic * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStaticPtr(_result, false);
}

IAgVeSolidTidesPtr _IAgVeHPOPForceModelMoreOptions::GetSolidTides ( ) {
    struct IAgVeSolidTides * _result = 0;
    HRESULT _hr = get_SolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSolidTidesPtr(_result, false);
}

IAgVeOceanTidesPtr _IAgVeHPOPForceModelMoreOptions::GetOceanTides ( ) {
    struct IAgVeOceanTides * _result = 0;
    HRESULT _hr = get_OceanTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeOceanTidesPtr(_result, false);
}

IAgVeRadiationPressurePtr _IAgVeHPOPForceModelMoreOptions::GetRadiationPressure ( ) {
    struct IAgVeRadiationPressure * _result = 0;
    HRESULT _hr = get_RadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRadiationPressurePtr(_result, false);
}

IAgVePluginPropagatorPtr _IAgVeHPOPForceModelMoreOptions::GetPluginPropagator ( ) {
    struct IAgVePluginPropagator * _result = 0;
    HRESULT _hr = get_PluginPropagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePluginPropagatorPtr(_result, false);
}

//
// interface IAgVeHPOPForceModelMoreOptions wrapper method implementations
//

IAgVeHPOPForceModelDragOptionsPtr IAgVeHPOPForceModelMoreOptions::GetDrag ( ) {
    struct IAgVeHPOPForceModelDragOptions * _result = 0;
    HRESULT _hr = get_Drag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPForceModelDragOptionsPtr(_result, false);
}

IAgVeHPOPSolarRadiationPressureOptionsPtr IAgVeHPOPForceModelMoreOptions::GetSolarRadiationPressure ( ) {
    struct IAgVeHPOPSolarRadiationPressureOptions * _result = 0;
    HRESULT _hr = get_SolarRadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPSolarRadiationPressureOptionsPtr(_result, false);
}

IAgVeStaticPtr IAgVeHPOPForceModelMoreOptions::GetStatic ( ) {
    struct IAgVeStatic * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStaticPtr(_result, false);
}

IAgVeSolidTidesPtr IAgVeHPOPForceModelMoreOptions::GetSolidTides ( ) {
    struct IAgVeSolidTides * _result = 0;
    HRESULT _hr = get_SolidTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSolidTidesPtr(_result, false);
}

IAgVeOceanTidesPtr IAgVeHPOPForceModelMoreOptions::GetOceanTides ( ) {
    struct IAgVeOceanTides * _result = 0;
    HRESULT _hr = get_OceanTides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeOceanTidesPtr(_result, false);
}

IAgVeRadiationPressurePtr IAgVeHPOPForceModelMoreOptions::GetRadiationPressure ( ) {
    struct IAgVeRadiationPressure * _result = 0;
    HRESULT _hr = get_RadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRadiationPressurePtr(_result, false);
}

IAgVePluginPropagatorPtr IAgVeHPOPForceModelMoreOptions::GetPluginPropagator ( ) {
    struct IAgVePluginPropagator * _result = 0;
    HRESULT _hr = get_PluginPropagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePluginPropagatorPtr(_result, false);
}

//
// interface IAgVeThirdBodyGravityElement wrapper method implementations
//

enum AgEThirdBodyGravity IAgVeThirdBodyGravityElement::GetName ( ) {
    enum AgEThirdBodyGravity _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEThirdBodyGravSourceType IAgVeThirdBodyGravityElement::GetSource ( ) {
    enum AgEThirdBodyGravSourceType _result;
    HRESULT _hr = get_Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeThirdBodyGravityElement::PutSource ( enum AgEThirdBodyGravSourceType pVal ) {
    HRESULT _hr = put_Source(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeThirdBodyGravityElement::GetGravityValue ( ) {
    double _result = 0;
    HRESULT _hr = get_GravityValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeThirdBodyGravityElement::PutGravityValue ( double pVal ) {
    HRESULT _hr = put_GravityValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeThirdBodyGravityElement::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgVeThirdBodyGravityCollection wrapper method implementations
//

long IAgVeThirdBodyGravityCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeThirdBodyGravityElementPtr IAgVeThirdBodyGravityCollection::GetItem ( long Index ) {
    struct IAgVeThirdBodyGravityElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeThirdBodyGravityElementPtr(_result, false);
}

IUnknownPtr IAgVeThirdBodyGravityCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeThirdBodyGravityCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeThirdBodyGravityCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeThirdBodyGravityElementPtr IAgVeThirdBodyGravityCollection::Add ( enum AgEThirdBodyGravity Data ) {
    struct IAgVeThirdBodyGravityElement * _result = 0;
    HRESULT _hr = raw_Add(Data, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeThirdBodyGravityElementPtr(_result, false);
}

SAFEARRAY * IAgVeThirdBodyGravityCollection::GetAvailableThirdBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableThirdBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeThirdBodyGravityCollection::RemoveByType ( enum AgEThirdBodyGravity ThirdBdyType ) {
    HRESULT _hr = raw_RemoveByType(ThirdBdyType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgVeThirdBodyGravityCollection::GetAvailableThirdBodyNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableThirdBodyNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeThirdBodyGravityElementPtr IAgVeThirdBodyGravityCollection::AddThirdBody ( _bstr_t ThirdBody ) {
    struct IAgVeThirdBodyGravityElement * _result = 0;
    HRESULT _hr = raw_AddThirdBody(ThirdBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeThirdBodyGravityElementPtr(_result, false);
}

HRESULT IAgVeThirdBodyGravityCollection::RemoveThirdBody ( _bstr_t ThirdBody ) {
    HRESULT _hr = raw_RemoveThirdBody(ThirdBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeEclipsingBodies wrapper method implementations
//

SAFEARRAY * IAgVeEclipsingBodies::GetAvailableEclipsingBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableEclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeEclipsingBodies::GetAssignedEclipsingBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedEclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeEclipsingBodies::IsEclipsingBodyAssigned ( _bstr_t EclipsingBody ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEclipsingBodyAssigned(EclipsingBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeEclipsingBodies::AssignEclipsingBody ( _bstr_t EclipsingBody ) {
    HRESULT _hr = raw_AssignEclipsingBody(EclipsingBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeEclipsingBodies::RemoveEclipsingBody ( _bstr_t EclipsingBody ) {
    HRESULT _hr = raw_RemoveEclipsingBody(EclipsingBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeEclipsingBodies::RemoveAllEclipsingBodies ( ) {
    HRESULT _hr = raw_RemoveAllEclipsingBodies();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeHPOPForceModel wrapper method implementations
//

IAgVeHPOPCentralBodyGravityPtr _IAgVeHPOPForceModel::GetCentralBodyGravity ( ) {
    struct IAgVeHPOPCentralBodyGravity * _result = 0;
    HRESULT _hr = get_CentralBodyGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPCentralBodyGravityPtr(_result, false);
}

IAgVeHPOPSolarRadiationPressurePtr _IAgVeHPOPForceModel::GetSolarRadiationPressure ( ) {
    struct IAgVeHPOPSolarRadiationPressure * _result = 0;
    HRESULT _hr = get_SolarRadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPSolarRadiationPressurePtr(_result, false);
}

IAgVeHPOPForceModelDragPtr _IAgVeHPOPForceModel::GetDrag ( ) {
    struct IAgVeHPOPForceModelDrag * _result = 0;
    HRESULT _hr = get_Drag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPForceModelDragPtr(_result, false);
}

IAgVeThirdBodyGravityCollectionPtr _IAgVeHPOPForceModel::GetThirdBodyGravity ( ) {
    struct IAgVeThirdBodyGravityCollection * _result = 0;
    HRESULT _hr = get_ThirdBodyGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeThirdBodyGravityCollectionPtr(_result, false);
}

IAgVeHPOPForceModelMoreOptionsPtr _IAgVeHPOPForceModel::GetMoreOptions ( ) {
    struct IAgVeHPOPForceModelMoreOptions * _result = 0;
    HRESULT _hr = get_MoreOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPForceModelMoreOptionsPtr(_result, false);
}

IAgVeEclipsingBodiesPtr _IAgVeHPOPForceModel::GetEclipsingBodies ( ) {
    struct IAgVeEclipsingBodies * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEclipsingBodiesPtr(_result, false);
}

//
// interface IAgVeHPOPForceModel wrapper method implementations
//

IAgVeHPOPCentralBodyGravityPtr IAgVeHPOPForceModel::GetCentralBodyGravity ( ) {
    struct IAgVeHPOPCentralBodyGravity * _result = 0;
    HRESULT _hr = get_CentralBodyGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPCentralBodyGravityPtr(_result, false);
}

IAgVeHPOPSolarRadiationPressurePtr IAgVeHPOPForceModel::GetSolarRadiationPressure ( ) {
    struct IAgVeHPOPSolarRadiationPressure * _result = 0;
    HRESULT _hr = get_SolarRadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPSolarRadiationPressurePtr(_result, false);
}

IAgVeHPOPForceModelDragPtr IAgVeHPOPForceModel::GetDrag ( ) {
    struct IAgVeHPOPForceModelDrag * _result = 0;
    HRESULT _hr = get_Drag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPForceModelDragPtr(_result, false);
}

IAgVeThirdBodyGravityCollectionPtr IAgVeHPOPForceModel::GetThirdBodyGravity ( ) {
    struct IAgVeThirdBodyGravityCollection * _result = 0;
    HRESULT _hr = get_ThirdBodyGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeThirdBodyGravityCollectionPtr(_result, false);
}

IAgVeHPOPForceModelMoreOptionsPtr IAgVeHPOPForceModel::GetMoreOptions ( ) {
    struct IAgVeHPOPForceModelMoreOptions * _result = 0;
    HRESULT _hr = get_MoreOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPForceModelMoreOptionsPtr(_result, false);
}

IAgVeEclipsingBodiesPtr IAgVeHPOPForceModel::GetEclipsingBodies ( ) {
    struct IAgVeEclipsingBodies * _result = 0;
    HRESULT _hr = get_EclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEclipsingBodiesPtr(_result, false);
}

//
// interface _IAgVeStepSizeControl wrapper method implementations
//

enum AgEVeMethod _IAgVeStepSizeControl::GetMethod ( ) {
    enum AgEVeMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeStepSizeControl::PutMethod ( enum AgEVeMethod ppVal ) {
    HRESULT _hr = put_Method(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeStepSizeControl::GetErrorTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_ErrorTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeStepSizeControl::PutErrorTolerance ( double pVal ) {
    HRESULT _hr = put_ErrorTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeStepSizeControl::GetMinStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeStepSizeControl::PutMinStepSize ( double pVal ) {
    HRESULT _hr = put_MinStepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeStepSizeControl::GetMaxStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeStepSizeControl::PutMaxStepSize ( double pVal ) {
    HRESULT _hr = put_MaxStepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeStepSizeControl wrapper method implementations
//

enum AgEVeMethod IAgVeStepSizeControl::GetMethod ( ) {
    enum AgEVeMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeStepSizeControl::PutMethod ( enum AgEVeMethod pVal ) {
    HRESULT _hr = put_Method(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeStepSizeControl::GetErrorTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_ErrorTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeStepSizeControl::PutErrorTolerance ( double pVal ) {
    HRESULT _hr = put_ErrorTolerance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeStepSizeControl::GetMinStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_MinStepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeStepSizeControl::PutMinStepSize ( double pVal ) {
    HRESULT _hr = put_MinStepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeStepSizeControl::GetMaxStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxStepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeStepSizeControl::PutMaxStepSize ( double pVal ) {
    HRESULT _hr = put_MaxStepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeTimeRegularization wrapper method implementations
//

VARIANT_BOOL _IAgVeTimeRegularization::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeTimeRegularization::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeTimeRegularization::GetExponent ( ) {
    double _result = 0;
    HRESULT _hr = get_Exponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeTimeRegularization::PutExponent ( double pVal ) {
    HRESULT _hr = put_Exponent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeTimeRegularization::GetStepsPerOrbit ( ) {
    long _result = 0;
    HRESULT _hr = get_StepsPerOrbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeTimeRegularization::PutStepsPerOrbit ( long pVal ) {
    HRESULT _hr = put_StepsPerOrbit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeTimeRegularization wrapper method implementations
//

VARIANT_BOOL IAgVeTimeRegularization::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeTimeRegularization::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeTimeRegularization::GetExponent ( ) {
    double _result = 0;
    HRESULT _hr = get_Exponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeTimeRegularization::PutExponent ( double pVal ) {
    HRESULT _hr = put_Exponent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeTimeRegularization::GetStepsPerOrbit ( ) {
    long _result = 0;
    HRESULT _hr = get_StepsPerOrbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeTimeRegularization::PutStepsPerOrbit ( long pVal ) {
    HRESULT _hr = put_StepsPerOrbit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeInterpolation wrapper method implementations
//

enum AgEVeInterpolationMethod _IAgVeInterpolation::GetMethod ( ) {
    enum AgEVeInterpolationMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInterpolation::PutMethod ( enum AgEVeInterpolationMethod pVal ) {
    HRESULT _hr = put_Method(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeInterpolation::GetVOPmu ( ) {
    double _result = 0;
    HRESULT _hr = get_VOPmu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInterpolation::PutVOPmu ( double pVal ) {
    HRESULT _hr = put_VOPmu(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeInterpolation::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInterpolation::PutOrder ( long pVal ) {
    HRESULT _hr = put_Order(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeInterpolation wrapper method implementations
//

enum AgEVeInterpolationMethod IAgVeInterpolation::GetMethod ( ) {
    enum AgEVeInterpolationMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInterpolation::PutMethod ( enum AgEVeInterpolationMethod pVal ) {
    HRESULT _hr = put_Method(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeInterpolation::GetVOPmu ( ) {
    double _result = 0;
    HRESULT _hr = get_VOPmu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInterpolation::PutVOPmu ( double pVal ) {
    HRESULT _hr = put_VOPmu(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeInterpolation::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInterpolation::PutOrder ( long pVal ) {
    HRESULT _hr = put_Order(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeIntegrator wrapper method implementations
//

enum AgEVeIntegrationModel _IAgVeIntegrator::GetIntegrationModel ( ) {
    enum AgEVeIntegrationModel _result;
    HRESULT _hr = get_IntegrationModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeIntegrator::PutIntegrationModel ( enum AgEVeIntegrationModel pVal ) {
    HRESULT _hr = put_IntegrationModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeIntegrator::GetUseVOP ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseVOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeIntegrator::PutUseVOP ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseVOP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVePredictorCorrectorScheme _IAgVeIntegrator::GetPredictorCorrectorScheme ( ) {
    enum AgEVePredictorCorrectorScheme _result;
    HRESULT _hr = get_PredictorCorrectorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeIntegrator::PutPredictorCorrectorScheme ( enum AgEVePredictorCorrectorScheme pVal ) {
    HRESULT _hr = put_PredictorCorrectorScheme(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeStepSizeControlPtr _IAgVeIntegrator::GetStepSizeControl ( ) {
    struct IAgVeStepSizeControl * _result = 0;
    HRESULT _hr = get_StepSizeControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStepSizeControlPtr(_result, false);
}

IAgVeTimeRegularizationPtr _IAgVeIntegrator::GetTimeRegularization ( ) {
    struct IAgVeTimeRegularization * _result = 0;
    HRESULT _hr = get_TimeRegularization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTimeRegularizationPtr(_result, false);
}

IAgVeInterpolationPtr _IAgVeIntegrator::GetInterpolation ( ) {
    struct IAgVeInterpolation * _result = 0;
    HRESULT _hr = get_Interpolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInterpolationPtr(_result, false);
}

VARIANT_BOOL _IAgVeIntegrator::GetReportEphemOnFixedTimeStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReportEphemOnFixedTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeIntegrator::PutReportEphemOnFixedTimeStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ReportEphemOnFixedTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeIntegrator::GetDoNotPropagateBelowAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_DoNotPropagateBelowAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeIntegrator::PutDoNotPropagateBelowAlt ( double pVal ) {
    HRESULT _hr = put_DoNotPropagateBelowAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeIntegrator wrapper method implementations
//

enum AgEVeIntegrationModel IAgVeIntegrator::GetIntegrationModel ( ) {
    enum AgEVeIntegrationModel _result;
    HRESULT _hr = get_IntegrationModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeIntegrator::PutIntegrationModel ( enum AgEVeIntegrationModel pVal ) {
    HRESULT _hr = put_IntegrationModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeIntegrator::GetUseVOP ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseVOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeIntegrator::PutUseVOP ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseVOP(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVePredictorCorrectorScheme IAgVeIntegrator::GetPredictorCorrectorScheme ( ) {
    enum AgEVePredictorCorrectorScheme _result;
    HRESULT _hr = get_PredictorCorrectorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeIntegrator::PutPredictorCorrectorScheme ( enum AgEVePredictorCorrectorScheme pVal ) {
    HRESULT _hr = put_PredictorCorrectorScheme(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeStepSizeControlPtr IAgVeIntegrator::GetStepSizeControl ( ) {
    struct IAgVeStepSizeControl * _result = 0;
    HRESULT _hr = get_StepSizeControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStepSizeControlPtr(_result, false);
}

IAgVeTimeRegularizationPtr IAgVeIntegrator::GetTimeRegularization ( ) {
    struct IAgVeTimeRegularization * _result = 0;
    HRESULT _hr = get_TimeRegularization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTimeRegularizationPtr(_result, false);
}

IAgVeInterpolationPtr IAgVeIntegrator::GetInterpolation ( ) {
    struct IAgVeInterpolation * _result = 0;
    HRESULT _hr = get_Interpolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInterpolationPtr(_result, false);
}

VARIANT_BOOL IAgVeIntegrator::GetReportEphemOnFixedTimeStep ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReportEphemOnFixedTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeIntegrator::PutReportEphemOnFixedTimeStep ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ReportEphemOnFixedTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeIntegrator::GetDoNotPropagateBelowAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_DoNotPropagateBelowAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeIntegrator::PutDoNotPropagateBelowAlt ( double pVal ) {
    HRESULT _hr = put_DoNotPropagateBelowAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGravity wrapper method implementations
//

long _IAgVeGravity::GetMaximumDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_MaximumDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGravity::PutMaximumDegree ( long pVal ) {
    HRESULT _hr = put_MaximumDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeGravity::GetMaximumOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_MaximumOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGravity::PutMaximumOrder ( long pVal ) {
    HRESULT _hr = put_MaximumOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGravity wrapper method implementations
//

long IAgVeGravity::GetMaximumDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_MaximumDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGravity::PutMaximumDegree ( long pVal ) {
    HRESULT _hr = put_MaximumDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeGravity::GetMaximumOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_MaximumOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGravity::PutMaximumOrder ( long pVal ) {
    HRESULT _hr = put_MaximumOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePositionVelocityElement wrapper method implementations
//

double _IAgVePositionVelocityElement::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePositionVelocityElement::PutX ( double pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePositionVelocityElement::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePositionVelocityElement::PutY ( double pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePositionVelocityElement::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePositionVelocityElement::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePositionVelocityElement::GetVx ( ) {
    double _result = 0;
    HRESULT _hr = get_Vx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePositionVelocityElement::PutVx ( double pVal ) {
    HRESULT _hr = put_Vx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePositionVelocityElement::GetVy ( ) {
    double _result = 0;
    HRESULT _hr = get_Vy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePositionVelocityElement::PutVy ( double pVal ) {
    HRESULT _hr = put_Vy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePositionVelocityElement::GetVz ( ) {
    double _result = 0;
    HRESULT _hr = get_Vz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePositionVelocityElement::PutVz ( double pVal ) {
    HRESULT _hr = put_Vz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePositionVelocityElement wrapper method implementations
//

double IAgVePositionVelocityElement::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePositionVelocityElement::PutX ( double pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePositionVelocityElement::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePositionVelocityElement::PutY ( double pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePositionVelocityElement::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePositionVelocityElement::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePositionVelocityElement::GetVx ( ) {
    double _result = 0;
    HRESULT _hr = get_Vx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePositionVelocityElement::PutVx ( double pVal ) {
    HRESULT _hr = put_Vx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePositionVelocityElement::GetVy ( ) {
    double _result = 0;
    HRESULT _hr = get_Vy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePositionVelocityElement::PutVy ( double pVal ) {
    HRESULT _hr = put_Vy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePositionVelocityElement::GetVz ( ) {
    double _result = 0;
    HRESULT _hr = get_Vz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePositionVelocityElement::PutVz ( double pVal ) {
    HRESULT _hr = put_Vz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePositionVelocityCollection wrapper method implementations
//

long IAgVePositionVelocityCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVePositionVelocityElementPtr IAgVePositionVelocityCollection::GetItem ( long Index ) {
    struct IAgVePositionVelocityElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePositionVelocityElementPtr(_result, false);
}

IUnknownPtr IAgVePositionVelocityCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVeCorrelationListElement wrapper method implementations
//

enum AgEVeCorrelationListType IAgVeCorrelationListElement::GetRow ( ) {
    enum AgEVeCorrelationListType _result;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeCorrelationListElement::PutRow ( enum AgEVeCorrelationListType pVal ) {
    HRESULT _hr = put_Row(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeCorrelationListType IAgVeCorrelationListElement::GetColumn ( ) {
    enum AgEVeCorrelationListType _result;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeCorrelationListElement::PutColumn ( enum AgEVeCorrelationListType pVal ) {
    HRESULT _hr = put_Column(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeCorrelationListElement::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeCorrelationListElement::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeCorrelationListCollection wrapper method implementations
//

long IAgVeCorrelationListCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeCorrelationListElementPtr IAgVeCorrelationListCollection::GetItem ( long Index ) {
    struct IAgVeCorrelationListElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCorrelationListElementPtr(_result, false);
}

IUnknownPtr IAgVeCorrelationListCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeCorrelationListCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeCorrelationListCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeCorrelationListElementPtr IAgVeCorrelationListCollection::Add ( ) {
    struct IAgVeCorrelationListElement * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCorrelationListElementPtr(_result, false);
}

//
// interface _IAgVeCorrelationListElement wrapper method implementations
//

enum AgEVeCorrelationListType _IAgVeCorrelationListElement::GetRow ( ) {
    enum AgEVeCorrelationListType _result;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeCorrelationListElement::PutRow ( enum AgEVeCorrelationListType pVal ) {
    HRESULT _hr = put_Row(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeCorrelationListType _IAgVeCorrelationListElement::GetColumn ( ) {
    enum AgEVeCorrelationListType _result;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeCorrelationListElement::PutColumn ( enum AgEVeCorrelationListType pVal ) {
    HRESULT _hr = put_Column(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeCorrelationListElement::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeCorrelationListElement::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeConsiderAnalysisCollectionElement wrapper method implementations
//

enum AgEVeConsiderAnalysisType IAgVeConsiderAnalysisCollectionElement::GetType ( ) {
    enum AgEVeConsiderAnalysisType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgVeConsiderAnalysisCollectionElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double IAgVeConsiderAnalysisCollectionElement::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeConsiderAnalysisCollectionElement::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeConsiderAnalysisCollectionElement::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeConsiderAnalysisCollectionElement::PutX ( double pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeConsiderAnalysisCollectionElement::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeConsiderAnalysisCollectionElement::PutY ( double pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeConsiderAnalysisCollectionElement::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeConsiderAnalysisCollectionElement::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeConsiderAnalysisCollectionElement::GetVx ( ) {
    double _result = 0;
    HRESULT _hr = get_Vx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeConsiderAnalysisCollectionElement::PutVx ( double pVal ) {
    HRESULT _hr = put_Vx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeConsiderAnalysisCollectionElement::GetVy ( ) {
    double _result = 0;
    HRESULT _hr = get_Vy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeConsiderAnalysisCollectionElement::PutVy ( double pVal ) {
    HRESULT _hr = put_Vy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeConsiderAnalysisCollectionElement::GetVz ( ) {
    double _result = 0;
    HRESULT _hr = get_Vz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeConsiderAnalysisCollectionElement::PutVz ( double pVal ) {
    HRESULT _hr = put_Vz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeConsiderAnalysisCollection wrapper method implementations
//

long IAgVeConsiderAnalysisCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeConsiderAnalysisCollectionElementPtr IAgVeConsiderAnalysisCollection::GetItem ( long Index ) {
    struct IAgVeConsiderAnalysisCollectionElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeConsiderAnalysisCollectionElementPtr(_result, false);
}

IUnknownPtr IAgVeConsiderAnalysisCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeConsiderAnalysisCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeConsiderAnalysisCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeConsiderAnalysisCollectionElementPtr IAgVeConsiderAnalysisCollection::Add ( enum AgEVeConsiderAnalysisType ParamType ) {
    struct IAgVeConsiderAnalysisCollectionElement * _result = 0;
    HRESULT _hr = raw_Add(ParamType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeConsiderAnalysisCollectionElementPtr(_result, false);
}

HRESULT IAgVeConsiderAnalysisCollection::RemoveByType ( enum AgEVeConsiderAnalysisType EParamType ) {
    HRESULT _hr = raw_RemoveByType(EParamType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeCovariance wrapper method implementations
//

VARIANT_BOOL _IAgVeCovariance::GetComputeCovariance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputeCovariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeCovariance::PutComputeCovariance ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ComputeCovariance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeFrame _IAgVeCovariance::GetFrame ( ) {
    enum AgEVeFrame _result;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeCovariance::PutFrame ( enum AgEVeFrame pVal ) {
    HRESULT _hr = put_Frame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeCovariance::GetRepresentation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Representation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgVeGravityPtr _IAgVeCovariance::GetGravity ( ) {
    struct IAgVeGravity * _result = 0;
    HRESULT _hr = get_Gravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGravityPtr(_result, false);
}

IAgVePositionVelocityCollectionPtr _IAgVeCovariance::GetPositionVelocity ( ) {
    struct IAgVePositionVelocityCollection * _result = 0;
    HRESULT _hr = get_PositionVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePositionVelocityCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgVeCovariance::GetIncludeConsiderAnalysis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeConsiderAnalysis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeCovariance::PutIncludeConsiderAnalysis ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeConsiderAnalysis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeConsiderAnalysisCollectionPtr _IAgVeCovariance::GetConsiderAnalysisList ( ) {
    struct IAgVeConsiderAnalysisCollection * _result = 0;
    HRESULT _hr = get_ConsiderAnalysisList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeConsiderAnalysisCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgVeCovariance::GetIncludeConsiderCrossCorrelation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeConsiderCrossCorrelation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeCovariance::PutIncludeConsiderCrossCorrelation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeConsiderCrossCorrelation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeCorrelationListCollectionPtr _IAgVeCovariance::GetCorrelationList ( ) {
    struct IAgVeCorrelationListCollection * _result = 0;
    HRESULT _hr = get_CorrelationList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCorrelationListCollectionPtr(_result, false);
}

HRESULT _IAgVeCovariance::Validate ( ) {
    HRESULT _hr = raw_Validate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeCovariance wrapper method implementations
//

VARIANT_BOOL IAgVeCovariance::GetComputeCovariance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ComputeCovariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeCovariance::PutComputeCovariance ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ComputeCovariance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeFrame IAgVeCovariance::GetFrame ( ) {
    enum AgEVeFrame _result;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeCovariance::PutFrame ( enum AgEVeFrame pVal ) {
    HRESULT _hr = put_Frame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeCovariance::GetRepresentation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Representation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgVeGravityPtr IAgVeCovariance::GetGravity ( ) {
    struct IAgVeGravity * _result = 0;
    HRESULT _hr = get_Gravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGravityPtr(_result, false);
}

IAgVePositionVelocityCollectionPtr IAgVeCovariance::GetPositionVelocity ( ) {
    struct IAgVePositionVelocityCollection * _result = 0;
    HRESULT _hr = get_PositionVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePositionVelocityCollectionPtr(_result, false);
}

VARIANT_BOOL IAgVeCovariance::GetIncludeConsiderAnalysis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeConsiderAnalysis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeCovariance::PutIncludeConsiderAnalysis ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeConsiderAnalysis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeConsiderAnalysisCollectionPtr IAgVeCovariance::GetConsiderAnalysisList ( ) {
    struct IAgVeConsiderAnalysisCollection * _result = 0;
    HRESULT _hr = get_ConsiderAnalysisList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeConsiderAnalysisCollectionPtr(_result, false);
}

VARIANT_BOOL IAgVeCovariance::GetIncludeConsiderCrossCorrelation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeConsiderCrossCorrelation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeCovariance::PutIncludeConsiderCrossCorrelation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeConsiderCrossCorrelation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeCorrelationListCollectionPtr IAgVeCovariance::GetCorrelationList ( ) {
    struct IAgVeCorrelationListCollection * _result = 0;
    HRESULT _hr = get_CorrelationList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCorrelationListCollectionPtr(_result, false);
}

HRESULT IAgVeCovariance::Validate ( ) {
    HRESULT _hr = raw_Validate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeJxInitialState wrapper method implementations
//

_variant_t _IAgVeJxInitialState::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeJxInitialState::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeEllipseOptions _IAgVeJxInitialState::GetEllipseOptions ( ) {
    enum AgEVeEllipseOptions _result;
    HRESULT _hr = get_EllipseOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeJxInitialState::PutEllipseOptions ( enum AgEVeEllipseOptions pVal ) {
    HRESULT _hr = put_EllipseOptions(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrbitStatePtr _IAgVeJxInitialState::GetRepresentation ( ) {
    struct STKUtil::IAgOrbitState * _result = 0;
    HRESULT _hr = get_Representation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrbitStatePtr(_result, false);
}

enum AgEVePropagationFrame _IAgVeJxInitialState::GetPropagationFrame ( ) {
    enum AgEVePropagationFrame _result;
    HRESULT _hr = get_PropagationFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeJxInitialState::PutPropagationFrame ( enum AgEVePropagationFrame pVal ) {
    HRESULT _hr = put_PropagationFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeJxInitialState::GetSupportedPropagationFrames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedPropagationFrames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeJxInitialState wrapper method implementations
//

_variant_t IAgVeJxInitialState::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeJxInitialState::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeEllipseOptions IAgVeJxInitialState::GetEllipseOptions ( ) {
    enum AgEVeEllipseOptions _result;
    HRESULT _hr = get_EllipseOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeJxInitialState::PutEllipseOptions ( enum AgEVeEllipseOptions pVal ) {
    HRESULT _hr = put_EllipseOptions(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrbitStatePtr IAgVeJxInitialState::GetRepresentation ( ) {
    struct STKUtil::IAgOrbitState * _result = 0;
    HRESULT _hr = get_Representation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrbitStatePtr(_result, false);
}

enum AgEVePropagationFrame IAgVeJxInitialState::GetPropagationFrame ( ) {
    enum AgEVePropagationFrame _result;
    HRESULT _hr = get_PropagationFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeJxInitialState::PutPropagationFrame ( enum AgEVePropagationFrame pVal ) {
    HRESULT _hr = put_PropagationFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeJxInitialState::GetSupportedPropagationFrames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedPropagationFrames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeLOPCentralBodyGravity wrapper method implementations
//

long _IAgVeLOPCentralBodyGravity::GetMaxDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLOPCentralBodyGravity::PutMaxDegree ( long pVal ) {
    HRESULT _hr = put_MaxDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeLOPCentralBodyGravity::GetMaxOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLOPCentralBodyGravity::PutMaxOrder ( long pVal ) {
    HRESULT _hr = put_MaxOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeLOPCentralBodyGravity wrapper method implementations
//

long IAgVeLOPCentralBodyGravity::GetMaxDegree ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLOPCentralBodyGravity::PutMaxDegree ( long pVal ) {
    HRESULT _hr = put_MaxDegree(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeLOPCentralBodyGravity::GetMaxOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLOPCentralBodyGravity::PutMaxOrder ( long pVal ) {
    HRESULT _hr = put_MaxOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeThirdBodyGravityElement wrapper method implementations
//

enum AgEThirdBodyGravity _IAgVeThirdBodyGravityElement::GetName ( ) {
    enum AgEThirdBodyGravity _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEThirdBodyGravSourceType _IAgVeThirdBodyGravityElement::GetSource ( ) {
    enum AgEThirdBodyGravSourceType _result;
    HRESULT _hr = get_Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeThirdBodyGravityElement::PutSource ( enum AgEThirdBodyGravSourceType pVal ) {
    HRESULT _hr = put_Source(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeThirdBodyGravityElement::GetGravityValue ( ) {
    double _result = 0;
    HRESULT _hr = get_GravityValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeThirdBodyGravityElement::PutGravityValue ( double pVal ) {
    HRESULT _hr = put_GravityValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeThirdBodyGravityElement::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgVeExpDensModelParams wrapper method implementations
//

double _IAgVeExpDensModelParams::GetReferenceDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeExpDensModelParams::PutReferenceDensity ( double pVal ) {
    HRESULT _hr = put_ReferenceDensity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeExpDensModelParams::GetReferenceHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeExpDensModelParams::PutReferenceHeight ( double pVal ) {
    HRESULT _hr = put_ReferenceHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeExpDensModelParams::GetScaleHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeExpDensModelParams::PutScaleHeight ( double pVal ) {
    HRESULT _hr = put_ScaleHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeExpDensModelParams wrapper method implementations
//

double IAgVeExpDensModelParams::GetReferenceDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeExpDensModelParams::PutReferenceDensity ( double pVal ) {
    HRESULT _hr = put_ReferenceDensity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeExpDensModelParams::GetReferenceHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_ReferenceHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeExpDensModelParams::PutReferenceHeight ( double pVal ) {
    HRESULT _hr = put_ReferenceHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeExpDensModelParams::GetScaleHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeExpDensModelParams::PutScaleHeight ( double pVal ) {
    HRESULT _hr = put_ScaleHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeAdvanced wrapper method implementations
//

enum AgEAtmosphericDensityModel _IAgVeAdvanced::GetAtmosphericDensityModel ( ) {
    enum AgEAtmosphericDensityModel _result;
    HRESULT _hr = get_AtmosphericDensityModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAdvanced::PutAtmosphericDensityModel ( enum AgEAtmosphericDensityModel pVal ) {
    HRESULT _hr = put_AtmosphericDensityModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeAdvanced::GetUseOsculatingAlt ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOsculatingAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAdvanced::PutUseOsculatingAlt ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseOsculatingAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeAdvanced::GetMaxDragAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxDragAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAdvanced::PutMaxDragAlt ( double pVal ) {
    HRESULT _hr = put_MaxDragAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeAdvanced::GetDensityWeighingFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_DensityWeighingFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAdvanced::PutDensityWeighingFactor ( double pVal ) {
    HRESULT _hr = put_DensityWeighingFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeExpDensModelParamsPtr _IAgVeAdvanced::GetExpDensModelParams ( ) {
    struct IAgVeExpDensModelParams * _result = 0;
    HRESULT _hr = get_ExpDensModelParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeExpDensModelParamsPtr(_result, false);
}

//
// interface IAgVeAdvanced wrapper method implementations
//

enum AgEAtmosphericDensityModel IAgVeAdvanced::GetAtmosphericDensityModel ( ) {
    enum AgEAtmosphericDensityModel _result;
    HRESULT _hr = get_AtmosphericDensityModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAdvanced::PutAtmosphericDensityModel ( enum AgEAtmosphericDensityModel pVal ) {
    HRESULT _hr = put_AtmosphericDensityModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeAdvanced::GetUseOsculatingAlt ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseOsculatingAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAdvanced::PutUseOsculatingAlt ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseOsculatingAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeAdvanced::GetMaxDragAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxDragAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAdvanced::PutMaxDragAlt ( double pVal ) {
    HRESULT _hr = put_MaxDragAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeAdvanced::GetDensityWeighingFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_DensityWeighingFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAdvanced::PutDensityWeighingFactor ( double pVal ) {
    HRESULT _hr = put_DensityWeighingFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeExpDensModelParamsPtr IAgVeAdvanced::GetExpDensModelParams ( ) {
    struct IAgVeExpDensModelParams * _result = 0;
    HRESULT _hr = get_ExpDensModelParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeExpDensModelParamsPtr(_result, false);
}

//
// interface _IAgVeLOPForceModelDrag wrapper method implementations
//

VARIANT_BOOL _IAgVeLOPForceModelDrag::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLOPForceModelDrag::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeLOPForceModelDrag::GetCd ( ) {
    double _result = 0;
    HRESULT _hr = get_Cd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLOPForceModelDrag::PutCd ( double pVal ) {
    HRESULT _hr = put_Cd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeAdvancedPtr _IAgVeLOPForceModelDrag::GetAdvanced ( ) {
    struct IAgVeAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAdvancedPtr(_result, false);
}

//
// interface IAgVeLOPForceModelDrag wrapper method implementations
//

VARIANT_BOOL IAgVeLOPForceModelDrag::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLOPForceModelDrag::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeLOPForceModelDrag::GetCd ( ) {
    double _result = 0;
    HRESULT _hr = get_Cd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLOPForceModelDrag::PutCd ( double pVal ) {
    HRESULT _hr = put_Cd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeAdvancedPtr IAgVeLOPForceModelDrag::GetAdvanced ( ) {
    struct IAgVeAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAdvancedPtr(_result, false);
}

//
// interface _IAgVeLOPSolarRadiationPressure wrapper method implementations
//

VARIANT_BOOL _IAgVeLOPSolarRadiationPressure::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLOPSolarRadiationPressure::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeLOPSolarRadiationPressure::GetCp ( ) {
    double _result = 0;
    HRESULT _hr = get_Cp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLOPSolarRadiationPressure::PutCp ( double pVal ) {
    HRESULT _hr = put_Cp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeLOPSolarRadiationPressure::GetAtmosHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLOPSolarRadiationPressure::PutAtmosHeight ( double pVal ) {
    HRESULT _hr = put_AtmosHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeLOPSolarRadiationPressure wrapper method implementations
//

VARIANT_BOOL IAgVeLOPSolarRadiationPressure::GetUse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLOPSolarRadiationPressure::PutUse ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeLOPSolarRadiationPressure::GetCp ( ) {
    double _result = 0;
    HRESULT _hr = get_Cp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLOPSolarRadiationPressure::PutCp ( double pVal ) {
    HRESULT _hr = put_Cp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeLOPSolarRadiationPressure::GetAtmosHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLOPSolarRadiationPressure::PutAtmosHeight ( double pVal ) {
    HRESULT _hr = put_AtmosHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePhysicalData wrapper method implementations
//

double _IAgVePhysicalData::GetDragCrossSectionalArea ( ) {
    double _result = 0;
    HRESULT _hr = get_DragCrossSectionalArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePhysicalData::PutDragCrossSectionalArea ( double pVal ) {
    HRESULT _hr = put_DragCrossSectionalArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePhysicalData::GetSRPCrossSectionalArea ( ) {
    double _result = 0;
    HRESULT _hr = get_SRPCrossSectionalArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePhysicalData::PutSRPCrossSectionalArea ( double pVal ) {
    HRESULT _hr = put_SRPCrossSectionalArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePhysicalData::GetSatelliteMass ( ) {
    double _result = 0;
    HRESULT _hr = get_SatelliteMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePhysicalData::PutSatelliteMass ( double pVal ) {
    HRESULT _hr = put_SatelliteMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePhysicalData wrapper method implementations
//

double IAgVePhysicalData::GetDragCrossSectionalArea ( ) {
    double _result = 0;
    HRESULT _hr = get_DragCrossSectionalArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePhysicalData::PutDragCrossSectionalArea ( double pVal ) {
    HRESULT _hr = put_DragCrossSectionalArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePhysicalData::GetSRPCrossSectionalArea ( ) {
    double _result = 0;
    HRESULT _hr = get_SRPCrossSectionalArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePhysicalData::PutSRPCrossSectionalArea ( double pVal ) {
    HRESULT _hr = put_SRPCrossSectionalArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePhysicalData::GetSatelliteMass ( ) {
    double _result = 0;
    HRESULT _hr = get_SatelliteMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePhysicalData::PutSatelliteMass ( double pVal ) {
    HRESULT _hr = put_SatelliteMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeThirdBodyGravity wrapper method implementations
//

VARIANT_BOOL IAgVeThirdBodyGravity::GetUseSolarGravity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSolarGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeThirdBodyGravity::PutUseSolarGravity ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSolarGravity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeThirdBodyGravity::GetUseLunarGravity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLunarGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeThirdBodyGravity::PutUseLunarGravity ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLunarGravity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeLOPForceModel wrapper method implementations
//

IAgVeLOPCentralBodyGravityPtr _IAgVeLOPForceModel::GetCentralBodyGravity ( ) {
    struct IAgVeLOPCentralBodyGravity * _result = 0;
    HRESULT _hr = get_CentralBodyGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLOPCentralBodyGravityPtr(_result, false);
}

IAgVeThirdBodyGravityPtr _IAgVeLOPForceModel::GetThirdBodyGravity ( ) {
    struct IAgVeThirdBodyGravity * _result = 0;
    HRESULT _hr = get_ThirdBodyGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeThirdBodyGravityPtr(_result, false);
}

IAgVeLOPForceModelDragPtr _IAgVeLOPForceModel::GetDrag ( ) {
    struct IAgVeLOPForceModelDrag * _result = 0;
    HRESULT _hr = get_Drag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLOPForceModelDragPtr(_result, false);
}

IAgVeLOPSolarRadiationPressurePtr _IAgVeLOPForceModel::GetSolarRadiationPressure ( ) {
    struct IAgVeLOPSolarRadiationPressure * _result = 0;
    HRESULT _hr = get_SolarRadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLOPSolarRadiationPressurePtr(_result, false);
}

IAgVePhysicalDataPtr _IAgVeLOPForceModel::GetPhysicalData ( ) {
    struct IAgVePhysicalData * _result = 0;
    HRESULT _hr = get_PhysicalData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePhysicalDataPtr(_result, false);
}

//
// interface IAgVeLOPForceModel wrapper method implementations
//

IAgVeLOPCentralBodyGravityPtr IAgVeLOPForceModel::GetCentralBodyGravity ( ) {
    struct IAgVeLOPCentralBodyGravity * _result = 0;
    HRESULT _hr = get_CentralBodyGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLOPCentralBodyGravityPtr(_result, false);
}

IAgVeThirdBodyGravityPtr IAgVeLOPForceModel::GetThirdBodyGravity ( ) {
    struct IAgVeThirdBodyGravity * _result = 0;
    HRESULT _hr = get_ThirdBodyGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeThirdBodyGravityPtr(_result, false);
}

IAgVeLOPForceModelDragPtr IAgVeLOPForceModel::GetDrag ( ) {
    struct IAgVeLOPForceModelDrag * _result = 0;
    HRESULT _hr = get_Drag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLOPForceModelDragPtr(_result, false);
}

IAgVeLOPSolarRadiationPressurePtr IAgVeLOPForceModel::GetSolarRadiationPressure ( ) {
    struct IAgVeLOPSolarRadiationPressure * _result = 0;
    HRESULT _hr = get_SolarRadiationPressure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLOPSolarRadiationPressurePtr(_result, false);
}

IAgVePhysicalDataPtr IAgVeLOPForceModel::GetPhysicalData ( ) {
    struct IAgVePhysicalData * _result = 0;
    HRESULT _hr = get_PhysicalData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePhysicalDataPtr(_result, false);
}

//
// interface IAgVeSPICESegment wrapper method implementations
//

_bstr_t IAgVeSPICESegment::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgVeSPICESegment::GetSegmentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgVeSPICESegment::GetCoordAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgVeSPICESegment::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IAgVeSPICESegment::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgVeSPICESegment::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAgVeSegmentsCollection wrapper method implementations
//

long IAgVeSegmentsCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeSPICESegmentPtr IAgVeSegmentsCollection::GetItem ( long Index ) {
    struct IAgVeSPICESegment * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSPICESegmentPtr(_result, false);
}

IUnknownPtr IAgVeSegmentsCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVePropagatorHPOP wrapper method implementations
//

HRESULT _IAgVePropagatorHPOP::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorHPOP::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorHPOP::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorHPOP::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorHPOP::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorHPOP::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorHPOP::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeInitialStatePtr _IAgVePropagatorHPOP::GetInitialState ( ) {
    struct IAgVeInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInitialStatePtr(_result, false);
}

IAgVeHPOPForceModelPtr _IAgVePropagatorHPOP::GetForceModel ( ) {
    struct IAgVeHPOPForceModel * _result = 0;
    HRESULT _hr = get_ForceModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPForceModelPtr(_result, false);
}

IAgVeIntegratorPtr _IAgVePropagatorHPOP::GetIntegrator ( ) {
    struct IAgVeIntegrator * _result = 0;
    HRESULT _hr = get_Integrator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeIntegratorPtr(_result, false);
}

IAgVeCovariancePtr _IAgVePropagatorHPOP::GetCovariance ( ) {
    struct IAgVeCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCovariancePtr(_result, false);
}

//
// interface IAgVePropagatorHPOP wrapper method implementations
//

HRESULT IAgVePropagatorHPOP::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorHPOP::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorHPOP::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorHPOP::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorHPOP::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorHPOP::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorHPOP::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeInitialStatePtr IAgVePropagatorHPOP::GetInitialState ( ) {
    struct IAgVeInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInitialStatePtr(_result, false);
}

IAgVeHPOPForceModelPtr IAgVePropagatorHPOP::GetForceModel ( ) {
    struct IAgVeHPOPForceModel * _result = 0;
    HRESULT _hr = get_ForceModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeHPOPForceModelPtr(_result, false);
}

IAgVeIntegratorPtr IAgVePropagatorHPOP::GetIntegrator ( ) {
    struct IAgVeIntegrator * _result = 0;
    HRESULT _hr = get_Integrator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeIntegratorPtr(_result, false);
}

IAgVeCovariancePtr IAgVePropagatorHPOP::GetCovariance ( ) {
    struct IAgVeCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCovariancePtr(_result, false);
}

//
// interface _IAgVePropagatorJ2Perturbation wrapper method implementations
//

HRESULT _IAgVePropagatorJ2Perturbation::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorJ2Perturbation::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorJ2Perturbation::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorJ2Perturbation::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorJ2Perturbation::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorJ2Perturbation::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorJ2Perturbation::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeJxInitialStatePtr _IAgVePropagatorJ2Perturbation::GetInitialState ( ) {
    struct IAgVeJxInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeJxInitialStatePtr(_result, false);
}

VARIANT_BOOL _IAgVePropagatorJ2Perturbation::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorJ2Perturbation::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePropagatorJ2Perturbation wrapper method implementations
//

HRESULT IAgVePropagatorJ2Perturbation::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorJ2Perturbation::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorJ2Perturbation::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorJ2Perturbation::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorJ2Perturbation::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorJ2Perturbation::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorJ2Perturbation::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeJxInitialStatePtr IAgVePropagatorJ2Perturbation::GetInitialState ( ) {
    struct IAgVeJxInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeJxInitialStatePtr(_result, false);
}

VARIANT_BOOL IAgVePropagatorJ2Perturbation::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorJ2Perturbation::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePropagatorJ4Perturbation wrapper method implementations
//

HRESULT _IAgVePropagatorJ4Perturbation::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorJ4Perturbation::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorJ4Perturbation::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorJ4Perturbation::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorJ4Perturbation::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorJ4Perturbation::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorJ4Perturbation::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeJxInitialStatePtr _IAgVePropagatorJ4Perturbation::GetInitialState ( ) {
    struct IAgVeJxInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeJxInitialStatePtr(_result, false);
}

VARIANT_BOOL _IAgVePropagatorJ4Perturbation::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorJ4Perturbation::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePropagatorJ4Perturbation wrapper method implementations
//

HRESULT IAgVePropagatorJ4Perturbation::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorJ4Perturbation::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorJ4Perturbation::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorJ4Perturbation::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorJ4Perturbation::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorJ4Perturbation::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorJ4Perturbation::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeJxInitialStatePtr IAgVePropagatorJ4Perturbation::GetInitialState ( ) {
    struct IAgVeJxInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeJxInitialStatePtr(_result, false);
}

VARIANT_BOOL IAgVePropagatorJ4Perturbation::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorJ4Perturbation::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePropagatorLOP wrapper method implementations
//

HRESULT _IAgVePropagatorLOP::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorLOP::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorLOP::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorLOP::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorLOP::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorLOP::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorLOP::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeInitialStatePtr _IAgVePropagatorLOP::GetInitialState ( ) {
    struct IAgVeInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInitialStatePtr(_result, false);
}

IAgVeLOPForceModelPtr _IAgVePropagatorLOP::GetForceModel ( ) {
    struct IAgVeLOPForceModel * _result = 0;
    HRESULT _hr = get_ForceModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLOPForceModelPtr(_result, false);
}

//
// interface IAgVePropagatorLOP wrapper method implementations
//

HRESULT IAgVePropagatorLOP::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorLOP::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorLOP::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorLOP::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorLOP::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorLOP::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorLOP::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeInitialStatePtr IAgVePropagatorLOP::GetInitialState ( ) {
    struct IAgVeInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInitialStatePtr(_result, false);
}

IAgVeLOPForceModelPtr IAgVePropagatorLOP::GetForceModel ( ) {
    struct IAgVeLOPForceModel * _result = 0;
    HRESULT _hr = get_ForceModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLOPForceModelPtr(_result, false);
}

//
// interface IAgVeSGP4Segment wrapper method implementations
//

_bstr_t IAgVeSGP4Segment::GetSSCNum ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SSCNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSGP4Segment::PutSSCNum ( _bstr_t pVal ) {
    HRESULT _hr = put_SSCNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeSGP4Segment::GetRevNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_RevNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4Segment::PutRevNumber ( long pVal ) {
    HRESULT _hr = put_RevNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSGP4Segment::GetEpoch ( ) {
    double _result = 0;
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4Segment::PutEpoch ( double pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeSGP4Segment::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeSGP4Segment::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeSGP4Segment::GetArgOfPerigee ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPerigee(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeSGP4Segment::PutArgOfPerigee ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPerigee(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeSGP4Segment::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeSGP4Segment::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSGP4Segment::GetEccentricity ( ) {
    double _result = 0;
    HRESULT _hr = get_Eccentricity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4Segment::PutEccentricity ( double pVal ) {
    HRESULT _hr = put_Eccentricity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeSGP4Segment::GetMeanMotion ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeSGP4Segment::PutMeanMotion ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeSGP4Segment::GetMeanAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeSGP4Segment::PutMeanAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSGP4Segment::GetMeanMotionDot ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanMotionDot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4Segment::PutMeanMotionDot ( double pVal ) {
    HRESULT _hr = put_MeanMotionDot(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSGP4Segment::GetMotionDotDot ( ) {
    double _result = 0;
    HRESULT _hr = get_MotionDotDot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4Segment::PutMotionDotDot ( double pVal ) {
    HRESULT _hr = put_MotionDotDot(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSGP4Segment::GetBStar ( ) {
    double _result = 0;
    HRESULT _hr = get_BStar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4Segment::PutBStar ( double pVal ) {
    HRESULT _hr = put_BStar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeSGP4Segment::GetClassification ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Classification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSGP4Segment::PutClassification ( _bstr_t pVal ) {
    HRESULT _hr = put_Classification(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeSGP4Segment::GetIntlDesignator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntlDesignator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSGP4Segment::PutIntlDesignator ( _bstr_t pVal ) {
    HRESULT _hr = put_IntlDesignator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSGP4SwitchMethod IAgVeSGP4Segment::GetSwitchingMethod ( ) {
    enum AgEVeSGP4SwitchMethod _result;
    HRESULT _hr = get_SwitchingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4Segment::PutSwitchingMethod ( enum AgEVeSGP4SwitchMethod pVal ) {
    HRESULT _hr = put_SwitchingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSGP4Segment::GetRange ( ) {
    double _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IAgVeSGP4Segment::GetSwitchTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SwitchTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeSGP4Segment::PutSwitchTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_SwitchTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSGP4Segment::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4Segment::PutEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Enabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeSGP4SegmentCollection wrapper method implementations
//

long IAgVeSGP4SegmentCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeSGP4SegmentPtr IAgVeSGP4SegmentCollection::GetItem ( long Index ) {
    struct IAgVeSGP4Segment * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4SegmentPtr(_result, false);
}

IUnknownPtr IAgVeSGP4SegmentCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgVeSGP4SegmentPtr IAgVeSGP4SegmentCollection::AddSeg ( ) {
    struct IAgVeSGP4Segment * _result = 0;
    HRESULT _hr = raw_AddSeg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4SegmentPtr(_result, false);
}

enum AgELoadMethodType IAgVeSGP4SegmentCollection::GetLoadMethodType ( ) {
    enum AgELoadMethodType _result;
    HRESULT _hr = get_LoadMethodType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4SegmentCollection::PutLoadMethodType ( enum AgELoadMethodType pRetVal ) {
    HRESULT _hr = put_LoadMethodType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeSGP4LoadDataPtr IAgVeSGP4SegmentCollection::GetLoadMethod ( ) {
    struct IAgVeSGP4LoadData * _result = 0;
    HRESULT _hr = get_LoadMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4LoadDataPtr(_result, false);
}

_bstr_t IAgVeSGP4SegmentCollection::GetRoutineType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RoutineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSGP4SegmentCollection::PutRoutineType ( _bstr_t pRetVal ) {
    HRESULT _hr = put_RoutineType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgVeSGP4SegmentCollection::RemoveSeg ( long Index ) {
    HRESULT _hr = raw_RemoveSeg(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeSGP4SegmentCollection::RemoveAllSegs ( ) {
    HRESULT _hr = raw_RemoveAllSegs();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgVeSGP4SegmentCollection::GetAvailableRoutines ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableRoutines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IAgVeSGP4SegmentCollection::GetMaxTLELimit ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxTLELimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4SegmentCollection::PutMaxTLELimit ( long pVal ) {
    HRESULT _hr = put_MaxTLELimit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeSGP4SegmentCollection::GetSSCNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SSCNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSGP4SegmentCollection::PutSSCNumber ( _bstr_t pVal ) {
    HRESULT _hr = put_SSCNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeSGP4AutoUpdateProperties wrapper method implementations
//

enum AgEVeSGP4TLESelection IAgVeSGP4AutoUpdateProperties::GetSelection ( ) {
    enum AgEVeSGP4TLESelection _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4AutoUpdateProperties::PutSelection ( enum AgEVeSGP4TLESelection pRetVal ) {
    HRESULT _hr = put_Selection(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSGP4SwitchMethod IAgVeSGP4AutoUpdateProperties::GetSwitchMethod ( ) {
    enum AgEVeSGP4SwitchMethod _result;
    HRESULT _hr = get_SwitchMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4AutoUpdateProperties::PutSwitchMethod ( enum AgEVeSGP4SwitchMethod pRetVal ) {
    HRESULT _hr = put_SwitchMethod(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeSGP4AutoUpdateFileSource wrapper method implementations
//

_bstr_t IAgVeSGP4AutoUpdateFileSource::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSGP4AutoUpdateFileSource::PutFilename ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Filename(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeSGP4AutoUpdateFileSource::Preview ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Preview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeSGP4AutoUpdateOnlineSource wrapper method implementations
//

SAFEARRAY * IAgVeSGP4AutoUpdateOnlineSource::Preview ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Preview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeSGP4AutoUpdate wrapper method implementations
//

enum AgEVeSGP4AutoUpdateSource IAgVeSGP4AutoUpdate::GetSelectedSource ( ) {
    enum AgEVeSGP4AutoUpdateSource _result;
    HRESULT _hr = get_SelectedSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4AutoUpdate::PutSelectedSource ( enum AgEVeSGP4AutoUpdateSource pRetVal ) {
    HRESULT _hr = put_SelectedSource(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeSGP4AutoUpdatePropertiesPtr IAgVeSGP4AutoUpdate::GetProperties ( ) {
    struct IAgVeSGP4AutoUpdateProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4AutoUpdatePropertiesPtr(_result, false);
}

IAgVeSGP4AutoUpdateFileSourcePtr IAgVeSGP4AutoUpdate::GetFileSource ( ) {
    struct IAgVeSGP4AutoUpdateFileSource * _result = 0;
    HRESULT _hr = get_FileSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4AutoUpdateFileSourcePtr(_result, false);
}

IAgVeSGP4AutoUpdateOnlineSourcePtr IAgVeSGP4AutoUpdate::GetOnlineSource ( ) {
    struct IAgVeSGP4AutoUpdateOnlineSource * _result = 0;
    HRESULT _hr = get_OnlineSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4AutoUpdateOnlineSourcePtr(_result, false);
}

//
// interface IAgVePropagatorSGP4CommonTasks wrapper method implementations
//

HRESULT IAgVePropagatorSGP4CommonTasks::AddSegsFromFile ( _bstr_t SSCNumber, _bstr_t Filename ) {
    HRESULT _hr = raw_AddSegsFromFile(SSCNumber, Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVePropagatorSGP4CommonTasks::AddSegsFromOnlineSource ( _bstr_t SSCNum ) {
    HRESULT _hr = raw_AddSegsFromOnlineSource(SSCNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVePropagatorSGP4CommonTasks::AddSegsFromSpaceTrack ( _bstr_t SSCNum, _bstr_t Username, _bstr_t Password ) {
    HRESULT _hr = raw_AddSegsFromSpaceTrack(SSCNum, Username, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeSGP4PropagatorSettings wrapper method implementations
//

VARIANT_BOOL IAgVeSGP4PropagatorSettings::GetUseSGP4OnePtInterpolation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSGP4OnePtInterpolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4PropagatorSettings::PutUseSGP4OnePtInterpolation ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseSGP4OnePtInterpolation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSGP4PropagatorSettings::GetUseSGP4OnePtValidation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSGP4OnePtValidation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4PropagatorSettings::PutUseSGP4OnePtValidation ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseSGP4OnePtValidation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSGP4PropagatorSettings::GetUseSGP4OnePtWarning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSGP4OnePtWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4PropagatorSettings::PutUseSGP4OnePtWarning ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseSGP4OnePtWarning(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePropagatorSGP4 wrapper method implementations
//

HRESULT _IAgVePropagatorSGP4::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorSGP4::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorSGP4::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorSGP4::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorSGP4::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorSGP4::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorSGP4::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeSGP4SegmentCollectionPtr _IAgVePropagatorSGP4::GetSegments ( ) {
    struct IAgVeSGP4SegmentCollection * _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4SegmentCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgVePropagatorSGP4::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorSGP4::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVePropagatorSGP4::GetAutoUpdateEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdateEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorSGP4::PutAutoUpdateEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutoUpdateEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeSGP4AutoUpdatePtr _IAgVePropagatorSGP4::GetAutoUpdate ( ) {
    struct IAgVeSGP4AutoUpdate * _result = 0;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4AutoUpdatePtr(_result, false);
}

IAgVePropagatorSGP4CommonTasksPtr _IAgVePropagatorSGP4::GetCommonTasks ( ) {
    struct IAgVePropagatorSGP4CommonTasks * _result = 0;
    HRESULT _hr = get_CommonTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorSGP4CommonTasksPtr(_result, false);
}

IAgVeSGP4PropagatorSettingsPtr _IAgVePropagatorSGP4::GetSettings ( ) {
    struct IAgVeSGP4PropagatorSettings * _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4PropagatorSettingsPtr(_result, false);
}

//
// interface IAgVePropagatorSGP4 wrapper method implementations
//

HRESULT IAgVePropagatorSGP4::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorSGP4::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorSGP4::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorSGP4::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorSGP4::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorSGP4::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorSGP4::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeSGP4SegmentCollectionPtr IAgVePropagatorSGP4::GetSegments ( ) {
    struct IAgVeSGP4SegmentCollection * _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4SegmentCollectionPtr(_result, false);
}

VARIANT_BOOL IAgVePropagatorSGP4::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorSGP4::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVePropagatorSGP4::GetAutoUpdateEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdateEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorSGP4::PutAutoUpdateEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutoUpdateEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeSGP4AutoUpdatePtr IAgVePropagatorSGP4::GetAutoUpdate ( ) {
    struct IAgVeSGP4AutoUpdate * _result = 0;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4AutoUpdatePtr(_result, false);
}

IAgVePropagatorSGP4CommonTasksPtr IAgVePropagatorSGP4::GetCommonTasks ( ) {
    struct IAgVePropagatorSGP4CommonTasks * _result = 0;
    HRESULT _hr = get_CommonTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorSGP4CommonTasksPtr(_result, false);
}

IAgVeSGP4PropagatorSettingsPtr IAgVePropagatorSGP4::GetSettings ( ) {
    struct IAgVeSGP4PropagatorSettings * _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4PropagatorSettingsPtr(_result, false);
}

//
// interface _IAgVePropagatorSPICE wrapper method implementations
//

HRESULT _IAgVePropagatorSPICE::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorSPICE::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorSPICE::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorSPICE::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorSPICE::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorSPICE::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorSPICE::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVePropagatorSPICE::GetSpice ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Spice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVePropagatorSPICE::PutSpice ( _bstr_t pVal ) {
    HRESULT _hr = put_Spice(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVePropagatorSPICE::GetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVePropagatorSPICE::PutBodyName ( _bstr_t ppVal ) {
    HRESULT _hr = put_BodyName(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeSegmentsCollectionPtr _IAgVePropagatorSPICE::GetSegments ( ) {
    struct IAgVeSegmentsCollection * _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSegmentsCollectionPtr(_result, false);
}

SAFEARRAY * _IAgVePropagatorSPICE::GetAvailableBodyNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableBodyNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVePropagatorSPICE wrapper method implementations
//

HRESULT IAgVePropagatorSPICE::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorSPICE::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorSPICE::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorSPICE::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorSPICE::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorSPICE::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorSPICE::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVePropagatorSPICE::GetSpice ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Spice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVePropagatorSPICE::PutSpice ( _bstr_t pVal ) {
    HRESULT _hr = put_Spice(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVePropagatorSPICE::GetBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVePropagatorSPICE::PutBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_BodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeSegmentsCollectionPtr IAgVePropagatorSPICE::GetSegments ( ) {
    struct IAgVeSegmentsCollection * _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSegmentsCollectionPtr(_result, false);
}

SAFEARRAY * IAgVePropagatorSPICE::GetAvailableBodyNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableBodyNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVePropagatorStkExternal wrapper method implementations
//

HRESULT _IAgVePropagatorStkExternal::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorStkExternal::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgVePropagatorStkExternal::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double _IAgVePropagatorStkExternal::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVePropagatorStkExternal::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVePropagatorStkExternal::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVePropagatorStkExternal::GetOverride ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Override(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorStkExternal::PutOverride ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Override(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorStkExternal::GetEphemStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EphemStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorStkExternal::PutEphemStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_EphemStart(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkExternalEphemerisFormat _IAgVePropagatorStkExternal::GetFileFormat ( ) {
    enum AgEStkExternalEphemerisFormat _result;
    HRESULT _hr = get_FileFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorStkExternal::PutFileFormat ( enum AgEStkExternalEphemerisFormat pVal ) {
    HRESULT _hr = put_FileFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePropagatorStkExternal wrapper method implementations
//

HRESULT IAgVePropagatorStkExternal::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorStkExternal::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgVePropagatorStkExternal::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double IAgVePropagatorStkExternal::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgVePropagatorStkExternal::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVePropagatorStkExternal::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVePropagatorStkExternal::GetOverride ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Override(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorStkExternal::PutOverride ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Override(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorStkExternal::GetEphemStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EphemStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorStkExternal::PutEphemStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_EphemStart(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkExternalEphemerisFormat IAgVePropagatorStkExternal::GetFileFormat ( ) {
    enum AgEStkExternalEphemerisFormat _result;
    HRESULT _hr = get_FileFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorStkExternal::PutFileFormat ( enum AgEStkExternalEphemerisFormat pVal ) {
    HRESULT _hr = put_FileFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePropagatorTwoBody wrapper method implementations
//

HRESULT _IAgVePropagatorTwoBody::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorTwoBody::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorTwoBody::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorTwoBody::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorTwoBody::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorTwoBody::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorTwoBody::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeInitialStatePtr _IAgVePropagatorTwoBody::GetInitialState ( ) {
    struct IAgVeInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInitialStatePtr(_result, false);
}

VARIANT_BOOL _IAgVePropagatorTwoBody::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorTwoBody::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePropagatorTwoBody wrapper method implementations
//

HRESULT IAgVePropagatorTwoBody::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorTwoBody::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorTwoBody::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorTwoBody::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorTwoBody::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorTwoBody::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorTwoBody::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeInitialStatePtr IAgVePropagatorTwoBody::GetInitialState ( ) {
    struct IAgVeInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInitialStatePtr(_result, false);
}

VARIANT_BOOL IAgVePropagatorTwoBody::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorTwoBody::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePropagatorUserExternal wrapper method implementations
//

HRESULT _IAgVePropagatorUserExternal::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorUserExternal::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorUserExternal::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorUserExternal::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorUserExternal::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorUserExternal::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorUserExternal::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVePropagatorUserExternal::GetPropagator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Propagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVePropagatorUserExternal::PutPropagator ( _bstr_t pVal ) {
    HRESULT _hr = put_Propagator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVePropagatorUserExternal::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVePropagatorUserExternal::PutFile ( _bstr_t pVal ) {
    HRESULT _hr = put_File(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVePropagatorUserExternal::GetVehicleID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VehicleID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVePropagatorUserExternal::PutVehicleID ( _bstr_t pVal ) {
    HRESULT _hr = put_VehicleID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVePropagatorUserExternal::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgVePropagatorUserExternal::GetAvailableVehicleIDs ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableVehicleIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVePropagatorUserExternal::GetAvailablePropagators ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePropagators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVePropagatorUserExternal wrapper method implementations
//

HRESULT IAgVePropagatorUserExternal::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorUserExternal::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorUserExternal::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorUserExternal::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorUserExternal::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorUserExternal::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorUserExternal::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVePropagatorUserExternal::GetPropagator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Propagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVePropagatorUserExternal::PutPropagator ( _bstr_t pVal ) {
    HRESULT _hr = put_Propagator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVePropagatorUserExternal::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVePropagatorUserExternal::PutFile ( _bstr_t pVal ) {
    HRESULT _hr = put_File(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVePropagatorUserExternal::GetVehicleID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VehicleID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVePropagatorUserExternal::PutVehicleID ( _bstr_t pVal ) {
    HRESULT _hr = put_VehicleID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVePropagatorUserExternal::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * IAgVePropagatorUserExternal::GetAvailableVehicleIDs ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableVehicleIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVePropagatorUserExternal::GetAvailablePropagators ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePropagators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeLvInitialState wrapper method implementations
//

_variant_t _IAgVeLvInitialState::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IAgLLAPositionPtr _IAgVeLvInitialState::GetLaunch ( ) {
    struct IAgLLAPosition * _result = 0;
    HRESULT _hr = get_Launch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLLAPositionPtr(_result, false);
}

double _IAgVeLvInitialState::GetBurnoutVel ( ) {
    double _result = 0;
    HRESULT _hr = get_BurnoutVel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLvInitialState::PutBurnoutVel ( double pVal ) {
    HRESULT _hr = put_BurnoutVel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLLAPositionPtr _IAgVeLvInitialState::GetBurnout ( ) {
    struct IAgLLAPosition * _result = 0;
    HRESULT _hr = get_Burnout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLLAPositionPtr(_result, false);
}

//
// interface IAgVeLvInitialState wrapper method implementations
//

_variant_t IAgVeLvInitialState::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IAgLLAPositionPtr IAgVeLvInitialState::GetLaunch ( ) {
    struct IAgLLAPosition * _result = 0;
    HRESULT _hr = get_Launch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLLAPositionPtr(_result, false);
}

double IAgVeLvInitialState::GetBurnoutVel ( ) {
    double _result = 0;
    HRESULT _hr = get_BurnoutVel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLvInitialState::PutBurnoutVel ( double pVal ) {
    HRESULT _hr = put_BurnoutVel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLLAPositionPtr IAgVeLvInitialState::GetBurnout ( ) {
    struct IAgLLAPosition * _result = 0;
    HRESULT _hr = get_Burnout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLLAPositionPtr(_result, false);
}

//
// interface _IAgVePropagatorSimpleAscent wrapper method implementations
//

HRESULT _IAgVePropagatorSimpleAscent::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorSimpleAscent::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorSimpleAscent::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorSimpleAscent::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorSimpleAscent::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorSimpleAscent::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorSimpleAscent::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeLvInitialStatePtr _IAgVePropagatorSimpleAscent::GetInitialState ( ) {
    struct IAgVeLvInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLvInitialStatePtr(_result, false);
}

VARIANT_BOOL _IAgVePropagatorSimpleAscent::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorSimpleAscent::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePropagatorSimpleAscent wrapper method implementations
//

HRESULT IAgVePropagatorSimpleAscent::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorSimpleAscent::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorSimpleAscent::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorSimpleAscent::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorSimpleAscent::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorSimpleAscent::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorSimpleAscent::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeLvInitialStatePtr IAgVePropagatorSimpleAscent::GetInitialState ( ) {
    struct IAgVeLvInitialState * _result = 0;
    HRESULT _hr = get_InitialState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLvInitialStatePtr(_result, false);
}

VARIANT_BOOL IAgVePropagatorSimpleAscent::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorSimpleAscent::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeWaypointsElement wrapper method implementations
//

_variant_t _IAgVeWaypointsElement::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeWaypointsElement::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeWaypointsElement::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeWaypointsElement::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeWaypointsElement::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeWaypointsElement::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeWaypointsElement::GetSpeed ( ) {
    double _result = 0;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeWaypointsElement::PutSpeed ( double pVal ) {
    HRESULT _hr = put_Speed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeWaypointsElement::GetAcceleration ( ) {
    double _result = 0;
    HRESULT _hr = get_Acceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeWaypointsElement::PutAcceleration ( double pVal ) {
    HRESULT _hr = put_Acceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeWaypointsElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeWaypointsElement::PutTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeWaypointsElement::GetTurnRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_TurnRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeWaypointsElement::PutTurnRadius ( double pVal ) {
    HRESULT _hr = put_TurnRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeWaypointsElement wrapper method implementations
//

_variant_t IAgVeWaypointsElement::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeWaypointsElement::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeWaypointsElement::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeWaypointsElement::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeWaypointsElement::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeWaypointsElement::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeWaypointsElement::GetSpeed ( ) {
    double _result = 0;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeWaypointsElement::PutSpeed ( double pVal ) {
    HRESULT _hr = put_Speed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeWaypointsElement::GetAcceleration ( ) {
    double _result = 0;
    HRESULT _hr = get_Acceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeWaypointsElement::PutAcceleration ( double pVal ) {
    HRESULT _hr = put_Acceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeWaypointsElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeWaypointsElement::PutTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeWaypointsElement::GetTurnRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_TurnRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeWaypointsElement::PutTurnRadius ( double pVal ) {
    HRESULT _hr = put_TurnRadius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeWaypointsCollection wrapper method implementations
//

long IAgVeWaypointsCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeWaypointsElementPtr IAgVeWaypointsCollection::GetItem ( long Index ) {
    struct IAgVeWaypointsElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeWaypointsElementPtr(_result, false);
}

IUnknownPtr IAgVeWaypointsCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeWaypointsCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeWaypointsCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeWaypointsElementPtr IAgVeWaypointsCollection::Add ( ) {
    struct IAgVeWaypointsElement * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeWaypointsElementPtr(_result, false);
}

//
// interface _IAgVeLaunchLLA wrapper method implementations
//

double _IAgVeLaunchLLA::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchLLA::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeLaunchLLA::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchLLA::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeLaunchLLA::GetAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_Alt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchLLA::PutAlt ( double pVal ) {
    HRESULT _hr = put_Alt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeLaunchLLA wrapper method implementations
//

double IAgVeLaunchLLA::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchLLA::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeLaunchLLA::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchLLA::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeLaunchLLA::GetAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_Alt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchLLA::PutAlt ( double pVal ) {
    HRESULT _hr = put_Alt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeLaunchLLR wrapper method implementations
//

double _IAgVeLaunchLLR::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchLLR::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeLaunchLLR::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchLLR::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeLaunchLLR::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchLLR::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeLaunchLLR wrapper method implementations
//

double IAgVeLaunchLLR::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchLLR::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeLaunchLLR::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchLLR::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeLaunchLLR::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchLLR::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeImpactLLA wrapper method implementations
//

double _IAgVeImpactLLA::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeImpactLLA::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeImpactLLA::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeImpactLLA::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeImpactLLA::GetAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_Alt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeImpactLLA::PutAlt ( double pVal ) {
    HRESULT _hr = put_Alt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeImpactLLA wrapper method implementations
//

double IAgVeImpactLLA::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeImpactLLA::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeImpactLLA::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeImpactLLA::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeImpactLLA::GetAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_Alt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeImpactLLA::PutAlt ( double pVal ) {
    HRESULT _hr = put_Alt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeImpactLLR wrapper method implementations
//

double _IAgVeImpactLLR::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeImpactLLR::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeImpactLLR::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeImpactLLR::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeImpactLLR::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeImpactLLR::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeImpactLLR wrapper method implementations
//

double IAgVeImpactLLR::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeImpactLLR::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeImpactLLR::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeImpactLLR::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeImpactLLR::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeImpactLLR::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeLaunchControlFixedApogeeAlt wrapper method implementations
//

double _IAgVeLaunchControlFixedApogeeAlt::GetApogeeAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_ApogeeAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchControlFixedApogeeAlt::PutApogeeAlt ( double pVal ) {
    HRESULT _hr = put_ApogeeAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeLaunchControlFixedApogeeAlt wrapper method implementations
//

double IAgVeLaunchControlFixedApogeeAlt::GetApogeeAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_ApogeeAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchControlFixedApogeeAlt::PutApogeeAlt ( double pVal ) {
    HRESULT _hr = put_ApogeeAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeLaunchControlFixedDeltaV wrapper method implementations
//

double _IAgVeLaunchControlFixedDeltaV::GetDeltaV ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchControlFixedDeltaV::PutDeltaV ( double pVal ) {
    HRESULT _hr = put_DeltaV(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeLaunchControlFixedDeltaV wrapper method implementations
//

double IAgVeLaunchControlFixedDeltaV::GetDeltaV ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchControlFixedDeltaV::PutDeltaV ( double pVal ) {
    HRESULT _hr = put_DeltaV(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeLaunchControlFixedDeltaVMinEcc wrapper method implementations
//

double _IAgVeLaunchControlFixedDeltaVMinEcc::GetDeltaVMin ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchControlFixedDeltaVMinEcc::PutDeltaVMin ( double pVal ) {
    HRESULT _hr = put_DeltaVMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeLaunchControlFixedDeltaVMinEcc wrapper method implementations
//

double IAgVeLaunchControlFixedDeltaVMinEcc::GetDeltaVMin ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaVMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchControlFixedDeltaVMinEcc::PutDeltaVMin ( double pVal ) {
    HRESULT _hr = put_DeltaVMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeLaunchControlFixedTimeOfFlight wrapper method implementations
//

double _IAgVeLaunchControlFixedTimeOfFlight::GetTimeOfFlight ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfFlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeLaunchControlFixedTimeOfFlight::PutTimeOfFlight ( double pVal ) {
    HRESULT _hr = put_TimeOfFlight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeLaunchControlFixedTimeOfFlight wrapper method implementations
//

double IAgVeLaunchControlFixedTimeOfFlight::GetTimeOfFlight ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfFlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeLaunchControlFixedTimeOfFlight::PutTimeOfFlight ( double pVal ) {
    HRESULT _hr = put_TimeOfFlight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeImpactLocationLaunchAzEl wrapper method implementations
//

double _IAgVeImpactLocationLaunchAzEl::GetDeltaV ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeImpactLocationLaunchAzEl::PutDeltaV ( double pVal ) {
    HRESULT _hr = put_DeltaV(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeImpactLocationLaunchAzEl::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeImpactLocationLaunchAzEl::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeImpactLocationLaunchAzEl::GetAzimuth ( ) {
    double _result = 0;
    HRESULT _hr = get_Azimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeImpactLocationLaunchAzEl::PutAzimuth ( double pVal ) {
    HRESULT _hr = put_Azimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeImpactLocationLaunchAzEl wrapper method implementations
//

double IAgVeImpactLocationLaunchAzEl::GetDeltaV ( ) {
    double _result = 0;
    HRESULT _hr = get_DeltaV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeImpactLocationLaunchAzEl::PutDeltaV ( double pVal ) {
    HRESULT _hr = put_DeltaV(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeImpactLocationLaunchAzEl::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeImpactLocationLaunchAzEl::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeImpactLocationLaunchAzEl::GetAzimuth ( ) {
    double _result = 0;
    HRESULT _hr = get_Azimuth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeImpactLocationLaunchAzEl::PutAzimuth ( double pVal ) {
    HRESULT _hr = put_Azimuth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeImpactLocationPoint wrapper method implementations
//

enum AgEVeImpact _IAgVeImpactLocationPoint::GetImpactType ( ) {
    enum AgEVeImpact _result;
    HRESULT _hr = get_ImpactType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeImpactLocationPoint::SetImpactType ( enum AgEVeImpact Impact ) {
    HRESULT _hr = raw_SetImpactType(Impact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeImpactLocationPoint::IsImpactTypeSupported ( enum AgEVeImpact Impact ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsImpactTypeSupported(Impact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeImpactLocationPoint::GetImpactSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ImpactSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeImpactPtr _IAgVeImpactLocationPoint::GetImpact ( ) {
    struct IAgVeImpact * _result = 0;
    HRESULT _hr = get_Impact(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeImpactPtr(_result, false);
}

enum AgEVeLaunchControl _IAgVeImpactLocationPoint::GetLaunchControlType ( ) {
    enum AgEVeLaunchControl _result;
    HRESULT _hr = get_LaunchControlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeImpactLocationPoint::SetLaunchControlType ( enum AgEVeLaunchControl LaunchControl ) {
    HRESULT _hr = raw_SetLaunchControlType(LaunchControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeImpactLocationPoint::IsLaunchControlTypeSupported ( enum AgEVeLaunchControl LaunchControl ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLaunchControlTypeSupported(LaunchControl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeImpactLocationPoint::GetLaunchControlSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_LaunchControlSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeLaunchControlPtr _IAgVeImpactLocationPoint::GetLaunchControl ( ) {
    struct IAgVeLaunchControl * _result = 0;
    HRESULT _hr = get_LaunchControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLaunchControlPtr(_result, false);
}

//
// interface IAgVeImpactLocationPoint wrapper method implementations
//

enum AgEVeImpact IAgVeImpactLocationPoint::GetImpactType ( ) {
    enum AgEVeImpact _result;
    HRESULT _hr = get_ImpactType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeImpactLocationPoint::SetImpactType ( enum AgEVeImpact Impact ) {
    HRESULT _hr = raw_SetImpactType(Impact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeImpactLocationPoint::IsImpactTypeSupported ( enum AgEVeImpact Impact ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsImpactTypeSupported(Impact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeImpactLocationPoint::GetImpactSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ImpactSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeImpactPtr IAgVeImpactLocationPoint::GetImpact ( ) {
    struct IAgVeImpact * _result = 0;
    HRESULT _hr = get_Impact(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeImpactPtr(_result, false);
}

enum AgEVeLaunchControl IAgVeImpactLocationPoint::GetLaunchControlType ( ) {
    enum AgEVeLaunchControl _result;
    HRESULT _hr = get_LaunchControlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeImpactLocationPoint::SetLaunchControlType ( enum AgEVeLaunchControl LaunchControl ) {
    HRESULT _hr = raw_SetLaunchControlType(LaunchControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeImpactLocationPoint::IsLaunchControlTypeSupported ( enum AgEVeLaunchControl LaunchControl ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLaunchControlTypeSupported(LaunchControl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeImpactLocationPoint::GetLaunchControlSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_LaunchControlSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeLaunchControlPtr IAgVeImpactLocationPoint::GetLaunchControl ( ) {
    struct IAgVeLaunchControl * _result = 0;
    HRESULT _hr = get_LaunchControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLaunchControlPtr(_result, false);
}

//
// interface _IAgVePropagatorBallistic wrapper method implementations
//

HRESULT _IAgVePropagatorBallistic::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorBallistic::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorBallistic::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorBallistic::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorBallistic::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorBallistic::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorBallistic::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeLaunch _IAgVePropagatorBallistic::GetLaunchType ( ) {
    enum AgEVeLaunch _result;
    HRESULT _hr = get_LaunchType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVePropagatorBallistic::SetLaunchType ( enum AgEVeLaunch Launch ) {
    HRESULT _hr = raw_SetLaunchType(Launch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVePropagatorBallistic::IsLaunchTypeSupported ( enum AgEVeLaunch Launch ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLaunchTypeSupported(Launch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVePropagatorBallistic::GetLaunchSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_LaunchSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeLaunchPtr _IAgVePropagatorBallistic::GetLaunch ( ) {
    struct IAgVeLaunch * _result = 0;
    HRESULT _hr = get_Launch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLaunchPtr(_result, false);
}

enum AgEVeImpactLocation _IAgVePropagatorBallistic::GetImpactLocationType ( ) {
    enum AgEVeImpactLocation _result;
    HRESULT _hr = get_ImpactLocationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVePropagatorBallistic::SetImpactLocationType ( enum AgEVeImpactLocation ImpactLocation ) {
    HRESULT _hr = raw_SetImpactLocationType(ImpactLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVePropagatorBallistic::IsImpactLocationTypeSupported ( enum AgEVeImpactLocation ImpactLocation ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsImpactLocationTypeSupported(ImpactLocation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVePropagatorBallistic::GetImpactLocationSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ImpactLocationSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeImpactLocationPtr _IAgVePropagatorBallistic::GetImpactLocation ( ) {
    struct IAgVeImpactLocation * _result = 0;
    HRESULT _hr = get_ImpactLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeImpactLocationPtr(_result, false);
}

VARIANT_BOOL _IAgVePropagatorBallistic::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorBallistic::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePropagatorBallistic wrapper method implementations
//

HRESULT IAgVePropagatorBallistic::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorBallistic::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorBallistic::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorBallistic::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorBallistic::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorBallistic::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorBallistic::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeLaunch IAgVePropagatorBallistic::GetLaunchType ( ) {
    enum AgEVeLaunch _result;
    HRESULT _hr = get_LaunchType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVePropagatorBallistic::SetLaunchType ( enum AgEVeLaunch Launch ) {
    HRESULT _hr = raw_SetLaunchType(Launch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVePropagatorBallistic::IsLaunchTypeSupported ( enum AgEVeLaunch Launch ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLaunchTypeSupported(Launch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVePropagatorBallistic::GetLaunchSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_LaunchSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeLaunchPtr IAgVePropagatorBallistic::GetLaunch ( ) {
    struct IAgVeLaunch * _result = 0;
    HRESULT _hr = get_Launch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLaunchPtr(_result, false);
}

enum AgEVeImpactLocation IAgVePropagatorBallistic::GetImpactLocationType ( ) {
    enum AgEVeImpactLocation _result;
    HRESULT _hr = get_ImpactLocationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVePropagatorBallistic::SetImpactLocationType ( enum AgEVeImpactLocation ImpactLocation ) {
    HRESULT _hr = raw_SetImpactLocationType(ImpactLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVePropagatorBallistic::IsImpactLocationTypeSupported ( enum AgEVeImpactLocation ImpactLocation ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsImpactLocationTypeSupported(ImpactLocation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVePropagatorBallistic::GetImpactLocationSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ImpactLocationSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeImpactLocationPtr IAgVePropagatorBallistic::GetImpactLocation ( ) {
    struct IAgVeImpactLocation * _result = 0;
    HRESULT _hr = get_ImpactLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeImpactLocationPtr(_result, false);
}

VARIANT_BOOL IAgVePropagatorBallistic::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorBallistic::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeWayPtAltitudeRef wrapper method implementations
//

enum AgEVeAltitudeRef IAgVeWayPtAltitudeRef::GetType ( ) {
    enum AgEVeAltitudeRef _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVePropagatorGreatArc wrapper method implementations
//

HRESULT _IAgVePropagatorGreatArc::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorGreatArc::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorGreatArc::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorGreatArc::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorGreatArc::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeWayPtCompMethod _IAgVePropagatorGreatArc::GetMethod ( ) {
    enum AgEVeWayPtCompMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorGreatArc::PutMethod ( enum AgEVeWayPtCompMethod pVal ) {
    HRESULT _hr = put_Method(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeAltitudeRef _IAgVePropagatorGreatArc::GetAltitudeRefType ( ) {
    enum AgEVeAltitudeRef _result;
    HRESULT _hr = get_AltitudeRefType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVePropagatorGreatArc::SetAltitudeRefType ( enum AgEVeAltitudeRef AltitudeRef ) {
    HRESULT _hr = raw_SetAltitudeRefType(AltitudeRef);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVePropagatorGreatArc::IsAltitudeRefTypeSupported ( enum AgEVeAltitudeRef AltitudeRef ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAltitudeRefTypeSupported(AltitudeRef, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVePropagatorGreatArc::GetAltitudeRefSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AltitudeRefSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeWayPtAltitudeRefPtr _IAgVePropagatorGreatArc::GetAltitudeRef ( ) {
    struct IAgVeWayPtAltitudeRef * _result = 0;
    HRESULT _hr = get_AltitudeRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeWayPtAltitudeRefPtr(_result, false);
}

double _IAgVePropagatorGreatArc::GetArcGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_ArcGranularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorGreatArc::PutArcGranularity ( double pVal ) {
    HRESULT _hr = put_ArcGranularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeWaypointsCollectionPtr _IAgVePropagatorGreatArc::GetWaypoints ( ) {
    struct IAgVeWaypointsCollection * _result = 0;
    HRESULT _hr = get_Waypoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeWaypointsCollectionPtr(_result, false);
}

HRESULT _IAgVePropagatorGreatArc::ImportWaypointsFromFile ( _bstr_t Filename ) {
    HRESULT _hr = raw_ImportWaypointsFromFile(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVePropagatorGreatArc::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorGreatArc::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePropagatorGreatArc wrapper method implementations
//

HRESULT IAgVePropagatorGreatArc::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorGreatArc::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorGreatArc::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorGreatArc::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorGreatArc::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeWayPtCompMethod IAgVePropagatorGreatArc::GetMethod ( ) {
    enum AgEVeWayPtCompMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorGreatArc::PutMethod ( enum AgEVeWayPtCompMethod pVal ) {
    HRESULT _hr = put_Method(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeAltitudeRef IAgVePropagatorGreatArc::GetAltitudeRefType ( ) {
    enum AgEVeAltitudeRef _result;
    HRESULT _hr = get_AltitudeRefType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVePropagatorGreatArc::SetAltitudeRefType ( enum AgEVeAltitudeRef AltitudeRef ) {
    HRESULT _hr = raw_SetAltitudeRefType(AltitudeRef);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVePropagatorGreatArc::IsAltitudeRefTypeSupported ( enum AgEVeAltitudeRef AltitudeRef ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAltitudeRefTypeSupported(AltitudeRef, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVePropagatorGreatArc::GetAltitudeRefSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AltitudeRefSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeWayPtAltitudeRefPtr IAgVePropagatorGreatArc::GetAltitudeRef ( ) {
    struct IAgVeWayPtAltitudeRef * _result = 0;
    HRESULT _hr = get_AltitudeRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeWayPtAltitudeRefPtr(_result, false);
}

double IAgVePropagatorGreatArc::GetArcGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_ArcGranularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorGreatArc::PutArcGranularity ( double pVal ) {
    HRESULT _hr = put_ArcGranularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeWaypointsCollectionPtr IAgVePropagatorGreatArc::GetWaypoints ( ) {
    struct IAgVeWaypointsCollection * _result = 0;
    HRESULT _hr = get_Waypoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeWaypointsCollectionPtr(_result, false);
}

HRESULT IAgVePropagatorGreatArc::ImportWaypointsFromFile ( _bstr_t Filename ) {
    HRESULT _hr = raw_ImportWaypointsFromFile(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVePropagatorGreatArc::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorGreatArc::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeSGP4Segment wrapper method implementations
//

_bstr_t _IAgVeSGP4Segment::GetSSCNum ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SSCNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeSGP4Segment::PutSSCNum ( _bstr_t pVal ) {
    HRESULT _hr = put_SSCNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeSGP4Segment::GetRevNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_RevNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4Segment::PutRevNumber ( long pVal ) {
    HRESULT _hr = put_RevNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSGP4Segment::GetEpoch ( ) {
    double _result = 0;
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4Segment::PutEpoch ( double pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeSGP4Segment::GetInclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeSGP4Segment::PutInclination ( const _variant_t & pVal ) {
    HRESULT _hr = put_Inclination(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeSGP4Segment::GetArgOfPerigee ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArgOfPerigee(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeSGP4Segment::PutArgOfPerigee ( const _variant_t & pVal ) {
    HRESULT _hr = put_ArgOfPerigee(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeSGP4Segment::GetRAAN ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RAAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeSGP4Segment::PutRAAN ( const _variant_t & pVal ) {
    HRESULT _hr = put_RAAN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSGP4Segment::GetEccentricity ( ) {
    double _result = 0;
    HRESULT _hr = get_Eccentricity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4Segment::PutEccentricity ( double pVal ) {
    HRESULT _hr = put_Eccentricity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeSGP4Segment::GetMeanMotion ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeSGP4Segment::PutMeanMotion ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeSGP4Segment::GetMeanAnomaly ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeanAnomaly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeSGP4Segment::PutMeanAnomaly ( const _variant_t & pVal ) {
    HRESULT _hr = put_MeanAnomaly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSGP4Segment::GetMeanMotionDot ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanMotionDot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4Segment::PutMeanMotionDot ( double pVal ) {
    HRESULT _hr = put_MeanMotionDot(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSGP4Segment::GetMotionDotDot ( ) {
    double _result = 0;
    HRESULT _hr = get_MotionDotDot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4Segment::PutMotionDotDot ( double pVal ) {
    HRESULT _hr = put_MotionDotDot(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSGP4Segment::GetBStar ( ) {
    double _result = 0;
    HRESULT _hr = get_BStar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4Segment::PutBStar ( double pVal ) {
    HRESULT _hr = put_BStar(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeSGP4Segment::GetClassification ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Classification(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeSGP4Segment::PutClassification ( _bstr_t pVal ) {
    HRESULT _hr = put_Classification(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeSGP4Segment::GetIntlDesignator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IntlDesignator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeSGP4Segment::PutIntlDesignator ( _bstr_t pVal ) {
    HRESULT _hr = put_IntlDesignator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSGP4SwitchMethod _IAgVeSGP4Segment::GetSwitchingMethod ( ) {
    enum AgEVeSGP4SwitchMethod _result;
    HRESULT _hr = get_SwitchingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4Segment::PutSwitchingMethod ( enum AgEVeSGP4SwitchMethod pVal ) {
    HRESULT _hr = put_SwitchingMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSGP4Segment::GetRange ( ) {
    double _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgVeSGP4Segment::GetSwitchTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SwitchTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeSGP4Segment::PutSwitchTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_SwitchTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSGP4Segment::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4Segment::PutEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Enabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeThirdBodyGravity wrapper method implementations
//

VARIANT_BOOL _IAgVeThirdBodyGravity::GetUseSolarGravity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSolarGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeThirdBodyGravity::PutUseSolarGravity ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSolarGravity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeThirdBodyGravity::GetUseLunarGravity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLunarGravity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeThirdBodyGravity::PutUseLunarGravity ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLunarGravity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeConsiderAnalysisCollectionElement wrapper method implementations
//

enum AgEVeConsiderAnalysisType _IAgVeConsiderAnalysisCollectionElement::GetType ( ) {
    enum AgEVeConsiderAnalysisType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVeConsiderAnalysisCollectionElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double _IAgVeConsiderAnalysisCollectionElement::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeConsiderAnalysisCollectionElement::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeConsiderAnalysisCollectionElement::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeConsiderAnalysisCollectionElement::PutX ( double pVal ) {
    HRESULT _hr = put_X(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeConsiderAnalysisCollectionElement::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeConsiderAnalysisCollectionElement::PutY ( double pVal ) {
    HRESULT _hr = put_Y(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeConsiderAnalysisCollectionElement::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeConsiderAnalysisCollectionElement::PutZ ( double pVal ) {
    HRESULT _hr = put_Z(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeConsiderAnalysisCollectionElement::GetVx ( ) {
    double _result = 0;
    HRESULT _hr = get_Vx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeConsiderAnalysisCollectionElement::PutVx ( double pVal ) {
    HRESULT _hr = put_Vx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeConsiderAnalysisCollectionElement::GetVy ( ) {
    double _result = 0;
    HRESULT _hr = get_Vy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeConsiderAnalysisCollectionElement::PutVy ( double pVal ) {
    HRESULT _hr = put_Vy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeConsiderAnalysisCollectionElement::GetVz ( ) {
    double _result = 0;
    HRESULT _hr = get_Vz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeConsiderAnalysisCollectionElement::PutVz ( double pVal ) {
    HRESULT _hr = put_Vz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeSPICESegment wrapper method implementations
//

_bstr_t _IAgVeSPICESegment::GetSegmentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgVeSPICESegment::GetSegmentType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgVeSPICESegment::GetCoordAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CoordAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgVeSPICESegment::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t _IAgVeSPICESegment::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgVeSPICESegment::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface _IAgVeWayPtAltitudeRefTerrain wrapper method implementations
//

enum AgEVeAltitudeRef _IAgVeWayPtAltitudeRefTerrain::GetType ( ) {
    enum AgEVeAltitudeRef _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeWayPtAltitudeRefTerrain::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeWayPtAltitudeRefTerrain::PutGranularity ( double pVal ) {
    HRESULT _hr = put_Granularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeWayPtInterpMethod _IAgVeWayPtAltitudeRefTerrain::GetInterpMethod ( ) {
    enum AgEVeWayPtInterpMethod _result;
    HRESULT _hr = get_InterpMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeWayPtAltitudeRefTerrain::PutInterpMethod ( enum AgEVeWayPtInterpMethod pVal ) {
    HRESULT _hr = put_InterpMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeWayPtAltitudeRefTerrain wrapper method implementations
//

double IAgVeWayPtAltitudeRefTerrain::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeWayPtAltitudeRefTerrain::PutGranularity ( double pVal ) {
    HRESULT _hr = put_Granularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeWayPtInterpMethod IAgVeWayPtAltitudeRefTerrain::GetInterpMethod ( ) {
    enum AgEVeWayPtInterpMethod _result;
    HRESULT _hr = get_InterpMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeWayPtAltitudeRefTerrain::PutInterpMethod ( enum AgEVeWayPtInterpMethod pVal ) {
    HRESULT _hr = put_InterpMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeWayPtAltitudeRef wrapper method implementations
//

enum AgEVeAltitudeRef _IAgVeWayPtAltitudeRef::GetType ( ) {
    enum AgEVeAltitudeRef _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeSGP4LoadFile wrapper method implementations
//

_bstr_t _IAgVeSGP4LoadFile::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeSGP4LoadFile::PutFile ( _bstr_t pRetVal ) {
    HRESULT _hr = put_File(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeSGP4LoadFile::GetSSCNumsFromFile ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSSCNumsFromFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSGP4LoadFile::GetSegsFromFile ( _bstr_t SSCNum ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSegsFromFile(SSCNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeSGP4LoadFile::AddSegsFromFile ( SAFEARRAY * * Segments ) {
    HRESULT _hr = raw_AddSegsFromFile(Segments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeSGP4LoadFile wrapper method implementations
//

_bstr_t IAgVeSGP4LoadFile::GetFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_File(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSGP4LoadFile::PutFile ( _bstr_t pRetVal ) {
    HRESULT _hr = put_File(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeSGP4LoadFile::GetSSCNumsFromFile ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSSCNumsFromFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSGP4LoadFile::GetSegsFromFile ( _bstr_t SSCNum ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSegsFromFile(SSCNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeSGP4LoadFile::AddSegsFromFile ( SAFEARRAY * * Segments ) {
    HRESULT _hr = raw_AddSegsFromFile(Segments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeSGP4OnlineLoad wrapper method implementations
//

VARIANT_BOOL _IAgVeSGP4OnlineLoad::GetLoadNewest ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LoadNewest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4OnlineLoad::PutLoadNewest ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LoadNewest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeSGP4OnlineLoad::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeSGP4OnlineLoad::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeSGP4OnlineLoad::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeSGP4OnlineLoad::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeSGP4OnlineLoad::GetSegsFromOnline ( _bstr_t SSCNum ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSegsFromOnline(SSCNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeSGP4OnlineLoad::AddSegsFromOnline ( SAFEARRAY * * Segments ) {
    HRESULT _hr = raw_AddSegsFromOnline(Segments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeSGP4OnlineLoad wrapper method implementations
//

VARIANT_BOOL IAgVeSGP4OnlineLoad::GetLoadNewest ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LoadNewest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSGP4OnlineLoad::PutLoadNewest ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LoadNewest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeSGP4OnlineLoad::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeSGP4OnlineLoad::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeSGP4OnlineLoad::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeSGP4OnlineLoad::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeSGP4OnlineLoad::GetSegsFromOnline ( _bstr_t SSCNum ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSegsFromOnline(SSCNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeSGP4OnlineLoad::AddSegsFromOnline ( SAFEARRAY * * Segments ) {
    HRESULT _hr = raw_AddSegsFromOnline(Segments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeSGP4OnlineAutoLoad wrapper method implementations
//

HRESULT _IAgVeSGP4OnlineAutoLoad::AddLatestSegFromOnline ( _bstr_t SSCNumber ) {
    HRESULT _hr = raw_AddLatestSegFromOnline(SSCNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeSGP4OnlineAutoLoad wrapper method implementations
//

HRESULT IAgVeSGP4OnlineAutoLoad::AddLatestSegFromOnline ( _bstr_t SSCNumber ) {
    HRESULT _hr = raw_AddLatestSegFromOnline(SSCNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeSGP4SpaceTrackLoad wrapper method implementations
//

HRESULT _IAgVeSGP4SpaceTrackLoad::SetUsername ( _bstr_t Username ) {
    HRESULT _hr = raw_SetUsername(Username);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeSGP4SpaceTrackLoad::SetPassword ( _bstr_t Password ) {
    HRESULT _hr = raw_SetPassword(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgVeSGP4SpaceTrackLoad::GetSSCNumsFromSpaceTrack ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSSCNumsFromSpaceTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSGP4SpaceTrackLoad::GetSegsFromSpaceTrack ( _bstr_t SSCNum ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSegsFromSpaceTrack(SSCNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeSGP4SpaceTrackLoad::AddSegsFromSpaceTrack ( SAFEARRAY * * Segments ) {
    HRESULT _hr = raw_AddSegsFromSpaceTrack(Segments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeSGP4SpaceTrackLoad wrapper method implementations
//

HRESULT IAgVeSGP4SpaceTrackLoad::SetUsername ( _bstr_t Username ) {
    HRESULT _hr = raw_SetUsername(Username);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeSGP4SpaceTrackLoad::SetPassword ( _bstr_t Password ) {
    HRESULT _hr = raw_SetPassword(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgVeSGP4SpaceTrackLoad::GetSSCNumsFromSpaceTrack ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSSCNumsFromSpaceTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSGP4SpaceTrackLoad::GetSegsFromSpaceTrack ( _bstr_t SSCNum ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSegsFromSpaceTrack(SSCNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeSGP4SpaceTrackLoad::AddSegsFromSpaceTrack ( SAFEARRAY * * Segments ) {
    HRESULT _hr = raw_AddSegsFromSpaceTrack(Segments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeEllipseDataElement wrapper method implementations
//

_variant_t IAgVeEllipseDataElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeEllipseDataElement::PutTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeEllipseDataElement::GetCustomPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CustomPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEllipseDataElement::PutCustomPosition ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CustomPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeEllipseDataElement::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeEllipseDataElement::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeEllipseDataElement::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeEllipseDataElement::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeEllipseDataElement::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEllipseDataElement::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeEllipseDataElement::GetSemiMinorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMinorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEllipseDataElement::PutSemiMinorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMinorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeEllipseDataElement::GetBearing ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeEllipseDataElement::PutBearing ( const _variant_t & pVal ) {
    HRESULT _hr = put_Bearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeEllipseDataCollection wrapper method implementations
//

long IAgVeEllipseDataCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeEllipseDataElementPtr IAgVeEllipseDataCollection::GetItem ( long Index ) {
    struct IAgVeEllipseDataElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEllipseDataElementPtr(_result, false);
}

IUnknownPtr IAgVeEllipseDataCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeEllipseDataCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeEllipseDataCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeEllipseDataElementPtr IAgVeEllipseDataCollection::Add ( ) {
    struct IAgVeEllipseDataElement * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEllipseDataElementPtr(_result, false);
}

//
// interface IAgVeGroundEllipseElement wrapper method implementations
//

_bstr_t IAgVeGroundEllipseElement::GetEllipseName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EllipseName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGroundEllipseElement::PutEllipseName ( _bstr_t pVal ) {
    HRESULT _hr = put_EllipseName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeEllipseDataCollectionPtr IAgVeGroundEllipseElement::GetEllipseData ( ) {
    struct IAgVeEllipseDataCollection * _result = 0;
    HRESULT _hr = get_EllipseData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEllipseDataCollectionPtr(_result, false);
}

//
// interface IAgVeGroundEllipsesCollection wrapper method implementations
//

long IAgVeGroundEllipsesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGroundEllipseElementPtr IAgVeGroundEllipsesCollection::GetItem ( long Index ) {
    struct IAgVeGroundEllipseElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipseElementPtr(_result, false);
}

IUnknownPtr IAgVeGroundEllipsesCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeGroundEllipsesCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeGroundEllipsesCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeGroundEllipseElementPtr IAgVeGroundEllipsesCollection::Add ( _bstr_t Name ) {
    struct IAgVeGroundEllipseElement * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipseElementPtr(_result, false);
}

HRESULT IAgVeGroundEllipsesCollection::RemoveEllipseSet ( _bstr_t EllipseSetName ) {
    HRESULT _hr = raw_RemoveEllipseSet(EllipseSetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeGroundEllipseElementPtr IAgVeGroundEllipsesCollection::GetEllipseSet ( _bstr_t EllipseSetName ) {
    struct IAgVeGroundEllipseElement * _result = 0;
    HRESULT _hr = raw_GetEllipseSet(EllipseSetName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipseElementPtr(_result, false);
}

//
// interface IAgVeInertia wrapper method implementations
//

double IAgVeInertia::GetIxx ( ) {
    double _result = 0;
    HRESULT _hr = get_Ixx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInertia::PutIxx ( double pVal ) {
    HRESULT _hr = put_Ixx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeInertia::GetIyy ( ) {
    double _result = 0;
    HRESULT _hr = get_Iyy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInertia::PutIyy ( double pVal ) {
    HRESULT _hr = put_Iyy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeInertia::GetIzz ( ) {
    double _result = 0;
    HRESULT _hr = get_Izz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInertia::PutIzz ( double pVal ) {
    HRESULT _hr = put_Izz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeInertia::GetIxy ( ) {
    double _result = 0;
    HRESULT _hr = get_Ixy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInertia::PutIxy ( double pVal ) {
    HRESULT _hr = put_Ixy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeInertia::GetIxz ( ) {
    double _result = 0;
    HRESULT _hr = get_Ixz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInertia::PutIxz ( double pVal ) {
    HRESULT _hr = put_Ixz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeInertia::GetIyz ( ) {
    double _result = 0;
    HRESULT _hr = get_Iyz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeInertia::PutIyz ( double pVal ) {
    HRESULT _hr = put_Iyz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeMassProperties wrapper method implementations
//

double IAgVeMassProperties::GetMass ( ) {
    double _result = 0;
    HRESULT _hr = get_Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeMassProperties::PutMass ( double pVal ) {
    HRESULT _hr = put_Mass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeInertiaPtr IAgVeMassProperties::GetInertia ( ) {
    struct IAgVeInertia * _result = 0;
    HRESULT _hr = get_Inertia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInertiaPtr(_result, false);
}

//
// interface IAgVeDefinition wrapper method implementations
//

enum AgEVeBreakAngleType IAgVeDefinition::GetBreakAngleType ( ) {
    enum AgEVeBreakAngleType _result;
    HRESULT _hr = get_BreakAngleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeDefinition::SetBreakAngleType ( enum AgEVeBreakAngleType BreakAngleType ) {
    HRESULT _hr = raw_SetBreakAngleType(BreakAngleType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeBreakAnglePtr IAgVeDefinition::GetBreakAngle ( ) {
    struct IAgVeBreakAngle * _result = 0;
    HRESULT _hr = get_BreakAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeBreakAnglePtr(_result, false);
}

enum AgEVeDirection IAgVeDefinition::GetDirection ( ) {
    enum AgEVeDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeDefinition::PutDirection ( enum AgEVeDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeRepeatGroundTrackNumbering wrapper method implementations
//

long IAgVeRepeatGroundTrackNumbering::GetFirstPathNum ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPathNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeRepeatGroundTrackNumbering::PutFirstPathNum ( long pVal ) {
    HRESULT _hr = put_FirstPathNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeRepeatGroundTrackNumbering::GetRevsToRepeat ( ) {
    long _result = 0;
    HRESULT _hr = get_RevsToRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeRepeatGroundTrackNumbering::PutRevsToRepeat ( long pVal ) {
    HRESULT _hr = put_RevsToRepeat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePassBreak wrapper method implementations
//

IAgVeDefinitionPtr IAgVePassBreak::GetDefinition ( ) {
    struct IAgVeDefinition * _result = 0;
    HRESULT _hr = get_Definition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeDefinitionPtr(_result, false);
}

enum AgEVePartialPassMeasurement IAgVePassBreak::GetPartialPassMeasurement ( ) {
    enum AgEVePartialPassMeasurement _result;
    HRESULT _hr = get_PartialPassMeasurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePassBreak::PutPartialPassMeasurement ( enum AgEVePartialPassMeasurement pVal ) {
    HRESULT _hr = put_PartialPassMeasurement(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeCoordinateSystem IAgVePassBreak::GetCoordinateSystem ( ) {
    enum AgEVeCoordinateSystem _result;
    HRESULT _hr = get_CoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePassBreak::PutCoordinateSystem ( enum AgEVeCoordinateSystem pVal ) {
    HRESULT _hr = put_CoordinateSystem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeRepeatGroundTrackNumberingPtr IAgVePassBreak::GetRepeatGroundTrackNumbering ( ) {
    struct IAgVeRepeatGroundTrackNumbering * _result = 0;
    HRESULT _hr = get_RepeatGroundTrackNumbering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRepeatGroundTrackNumberingPtr(_result, false);
}

enum AgEVePassNumbering IAgVePassBreak::GetPassNumberingType ( ) {
    enum AgEVePassNumbering _result;
    HRESULT _hr = get_PassNumberingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVePassBreak::SetPassNumberingType ( enum AgEVePassNumbering PassNumbering ) {
    HRESULT _hr = raw_SetPassNumberingType(PassNumbering);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVePassNumberingPtr IAgVePassBreak::GetPassNumbering ( ) {
    struct IAgVePassNumbering * _result = 0;
    HRESULT _hr = get_PassNumbering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePassNumberingPtr(_result, false);
}

SAFEARRAY * IAgVePassBreak::GetSupportedCoordinateSystems ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedCoordinateSystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeGfxTimeEventsElement wrapper method implementations
//

VARIANT_BOOL IAgVeGfxTimeEventsElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTimeEventsElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGfxTimeEventType IAgVeGfxTimeEventsElement::GetTimeEventType ( ) {
    enum AgEVeGfxTimeEventType _result;
    HRESULT _hr = get_TimeEventType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeGfxTimeEventsElement::SetTimeEventType ( enum AgEVeGfxTimeEventType TimeEventType ) {
    HRESULT _hr = raw_SetTimeEventType(TimeEventType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeGfxTimeEventsElement::IsTimeEventTypeSupported ( enum AgEVeGfxTimeEventType TimeEventType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTimeEventTypeSupported(TimeEventType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeGfxTimeEventsElement::GetTimeEventTypeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TimeEventTypeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxTimeEventTypePtr IAgVeGfxTimeEventsElement::GetTimeEventTypeData ( ) {
    struct IAgVeGfxTimeEventType * _result = 0;
    HRESULT _hr = get_TimeEventTypeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTimeEventTypePtr(_result, false);
}

//
// interface IAgVeGfxTimeEventsCollection wrapper method implementations
//

long IAgVeGfxTimeEventsCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxTimeEventsElementPtr IAgVeGfxTimeEventsCollection::GetItem ( long Index ) {
    struct IAgVeGfxTimeEventsElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTimeEventsElementPtr(_result, false);
}

IUnknownPtr IAgVeGfxTimeEventsCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeGfxTimeEventsCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeGfxTimeEventsCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeGfxTimeEventsElementPtr IAgVeGfxTimeEventsCollection::Add ( ) {
    struct IAgVeGfxTimeEventsElement * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTimeEventsElementPtr(_result, false);
}

//
// interface IAgVeGfxPasses wrapper method implementations
//

enum AgEVeGfxPass IAgVeGfxPasses::GetPassType ( ) {
    enum AgEVeGfxPass _result;
    HRESULT _hr = get_PassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeGfxPasses::SetPassType ( enum AgEVeGfxPass Pass ) {
    HRESULT _hr = raw_SetPassType(Pass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeGfxPasses::IsPassTypeSupported ( enum AgEVeGfxPass Pass ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPassTypeSupported(Pass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeGfxPasses::GetPassSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PassSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxPassPtr IAgVeGfxPasses::GetPass ( ) {
    struct IAgVeGfxPass * _result = 0;
    HRESULT _hr = get_Pass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxPassPtr(_result, false);
}

enum AgEVeGfxVisibleSides IAgVeGfxPasses::GetVisibleSides ( ) {
    enum AgEVeGfxVisibleSides _result;
    HRESULT _hr = get_VisibleSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxPasses::PutVisibleSides ( enum AgEVeGfxVisibleSides pVal ) {
    HRESULT _hr = put_VisibleSides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxPasses::GetIsPassLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPassLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxPasses::PutIsPassLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPassLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxPasses::GetIsPathLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPathLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxPasses::PutIsPathLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPathLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxLeadTrailData wrapper method implementations
//

enum AgELeadTrailData IAgVeGfxLeadTrailData::GetLeadDataType ( ) {
    enum AgELeadTrailData _result;
    HRESULT _hr = get_LeadDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeGfxLeadTrailData::SetLeadDataType ( enum AgELeadTrailData LeadData ) {
    HRESULT _hr = raw_SetLeadDataType(LeadData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeGfxLeadTrailData::IsLeadDataTypeSupported ( enum AgELeadTrailData LeadData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLeadDataTypeSupported(LeadData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeGfxLeadTrailData::GetLeadDataSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_LeadDataSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeLeadTrailDataPtr IAgVeGfxLeadTrailData::GetLeadData ( ) {
    struct IAgVeLeadTrailData * _result = 0;
    HRESULT _hr = get_LeadData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLeadTrailDataPtr(_result, false);
}

enum AgELeadTrailData IAgVeGfxLeadTrailData::GetTrailDataType ( ) {
    enum AgELeadTrailData _result;
    HRESULT _hr = get_TrailDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeGfxLeadTrailData::SetTrailDataType ( enum AgELeadTrailData TrailData ) {
    HRESULT _hr = raw_SetTrailDataType(TrailData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeGfxLeadTrailData::IsTrailDataTypeSupported ( enum AgELeadTrailData TrailData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrailDataTypeSupported(TrailData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeGfxLeadTrailData::GetTrailDataSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TrailDataSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeLeadTrailDataPtr IAgVeGfxLeadTrailData::GetTrailData ( ) {
    struct IAgVeLeadTrailData * _result = 0;
    HRESULT _hr = get_TrailData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLeadTrailDataPtr(_result, false);
}

VARIANT_BOOL IAgVeGfxLeadTrailData::GetHasLeadData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeadData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeGfxLeadTrailData::GetHasTrailData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTrailData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeGfxLeadTrailData::SetTrailSameAsLead ( ) {
    HRESULT _hr = raw_SetTrailSameAsLead();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeGfxOrbitPassData wrapper method implementations
//

IAgVeGfxLeadTrailDataPtr IAgVeGfxOrbitPassData::GetGroundTrack ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

IAgVeGfxLeadTrailDataPtr IAgVeGfxOrbitPassData::GetOrbit ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

//
// interface IAgVeGfxPassResolution wrapper method implementations
//

double IAgVeGfxPassResolution::GetGroundTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxPassResolution::PutGroundTrack ( double pVal ) {
    HRESULT _hr = put_GroundTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGfxPassResolution::GetOrbit ( ) {
    double _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxPassResolution::PutOrbit ( double pVal ) {
    HRESULT _hr = put_Orbit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGfxPassResolution::GetMinGroundTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_MinGroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxPassResolution::PutMinGroundTrack ( double pVal ) {
    HRESULT _hr = put_MinGroundTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGfxPassResolution::GetMinOrbit ( ) {
    double _result = 0;
    HRESULT _hr = get_MinOrbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxPassResolution::PutMinOrbit ( double pVal ) {
    HRESULT _hr = put_MinOrbit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxElevationsElement wrapper method implementations
//

double IAgVeGfxElevationsElement::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationsElement::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeGfxElevationsElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationsElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgVeGfxElevationsElement::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationsElement::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeGfxElevationsElement::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationsElement::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxElevationsElement::GetDistanceVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DistanceVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationsElement::PutDistanceVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DistanceVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxElevationsElement::GetUserTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserTextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationsElement::PutUserTextVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UserTextVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxElevationsElement::GetUserText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxElevationsElement::PutUserText ( _bstr_t pVal ) {
    HRESULT _hr = put_UserText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeGfxElevationsElement::GetLabelAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_LabelAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationsElement::PutLabelAngle ( long pVal ) {
    HRESULT _hr = put_LabelAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxElevationsCollection wrapper method implementations
//

long IAgVeGfxElevationsCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxElevationsElementPtr IAgVeGfxElevationsCollection::GetItem ( long Index ) {
    struct IAgVeGfxElevationsElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevationsElementPtr(_result, false);
}

IUnknownPtr IAgVeGfxElevationsCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeGfxElevationsCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeGfxElevationsCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeGfxElevationsElementPtr IAgVeGfxElevationsCollection::AddLevel ( double Elevation ) {
    struct IAgVeGfxElevationsElement * _result = 0;
    HRESULT _hr = raw_AddLevel(Elevation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevationsElementPtr(_result, false);
}

HRESULT IAgVeGfxElevationsCollection::AddLevelRange ( const _variant_t & Start, const _variant_t & Stop, const _variant_t & Step ) {
    HRESULT _hr = raw_AddLevelRange(Start, Stop, Step);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeGfxElevContours wrapper method implementations
//

VARIANT_BOOL IAgVeGfxElevContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevContours::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxElevContours::GetIsFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevContours::PutIsFillVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsFillVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgEFillStyle IAgVeGfxElevContours::GetFillStyle ( ) {
    enum STKUtil::AgEFillStyle _result;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevContours::PutFillStyle ( enum STKUtil::AgEFillStyle pVal ) {
    HRESULT _hr = put_FillStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeGfxElevContours::GetNumOfDecimalDigits ( ) {
    long _result = 0;
    HRESULT _hr = get_NumOfDecimalDigits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevContours::PutNumOfDecimalDigits ( long pVal ) {
    HRESULT _hr = put_NumOfDecimalDigits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxElevationsCollectionPtr IAgVeGfxElevContours::GetElevations ( ) {
    struct IAgVeGfxElevationsCollection * _result = 0;
    HRESULT _hr = get_Elevations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevationsCollectionPtr(_result, false);
}

//
// interface IAgVeGfxSAA wrapper method implementations
//

VARIANT_BOOL IAgVeGfxSAA::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxSAA::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxSAA::GetUseVehicleAlt ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseVehicleAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxSAA::PutUseVehicleAlt ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseVehicleAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGfxSAA::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxSAA::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxSAA::GetIsFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxSAA::PutIsFillVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsFillVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgEFillStyle IAgVeGfxSAA::GetFillStyle ( ) {
    enum STKUtil::AgEFillStyle _result;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxSAA::PutFillStyle ( enum STKUtil::AgEFillStyle pVal ) {
    HRESULT _hr = put_FillStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxLightingElement wrapper method implementations
//

VARIANT_BOOL IAgVeGfxLightingElement::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLightingElement::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeGfxLightingElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLightingElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxLightingElement::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxLightingElement::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgVeGfxLightingElement::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLightingElement::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeGfxLightingElement::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLightingElement::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxLighting wrapper method implementations
//

IAgVeGfxLightingElementPtr IAgVeGfxLighting::GetSunlight ( ) {
    struct IAgVeGfxLightingElement * _result = 0;
    HRESULT _hr = get_Sunlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingElementPtr(_result, false);
}

IAgVeGfxLightingElementPtr IAgVeGfxLighting::GetPenumbra ( ) {
    struct IAgVeGfxLightingElement * _result = 0;
    HRESULT _hr = get_Penumbra(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingElementPtr(_result, false);
}

IAgVeGfxLightingElementPtr IAgVeGfxLighting::GetUmbra ( ) {
    struct IAgVeGfxLightingElement * _result = 0;
    HRESULT _hr = get_Umbra(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingElementPtr(_result, false);
}

VARIANT_BOOL IAgVeGfxLighting::GetIsSunLightPenumbraVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSunLightPenumbraVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLighting::PutIsSunLightPenumbraVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsSunLightPenumbraVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxLighting::GetIsPenumbraUmbraVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPenumbraUmbraVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLighting::PutIsPenumbraUmbraVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPenumbraUmbraVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxLighting::GetIsSolarSpecularReflectionPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSolarSpecularReflectionPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLighting::PutIsSolarSpecularReflectionPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsSolarSpecularReflectionPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxSwath wrapper method implementations
//

enum AgEVeGfxElevation IAgVeGfxSwath::GetElevationType ( ) {
    enum AgEVeGfxElevation _result;
    HRESULT _hr = get_ElevationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeGfxSwath::SetElevationType ( enum AgEVeGfxElevation Elevation ) {
    HRESULT _hr = raw_SetElevationType(Elevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeGfxSwath::IsElevationTypeSupported ( enum AgEVeGfxElevation Elevation ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsElevationTypeSupported(Elevation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeGfxSwath::GetElevationSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ElevationSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxElevationPtr IAgVeGfxSwath::GetElevation ( ) {
    struct IAgVeGfxElevation * _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevationPtr(_result, false);
}

enum AgEVeGfxOptions IAgVeGfxSwath::GetOptions ( ) {
    enum AgEVeGfxOptions _result;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxSwath::PutOptions ( enum AgEVeGfxOptions pVal ) {
    HRESULT _hr = put_Options(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxGroundEllipsesElement wrapper method implementations
//

_bstr_t IAgVeGfxGroundEllipsesElement::GetEllipseSetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EllipseSetName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgVeGfxGroundEllipsesElement::GetStaticGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StaticGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxGroundEllipsesElement::PutStaticGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_StaticGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxGroundEllipsesElement::GetDynamicGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DynamicGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxGroundEllipsesElement::PutDynamicGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DynamicGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxGroundEllipsesElement::GetInterpolate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Interpolate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxGroundEllipsesElement::PutInterpolate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Interpolate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxGroundEllipsesElement::GetIsNameVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsNameVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxGroundEllipsesElement::PutIsNameVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsNameVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxGroundEllipsesElement::GetIsCenterVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCenterVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxGroundEllipsesElement::PutIsCenterVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsCenterVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeGfxGroundEllipsesElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxGroundEllipsesElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeGfxGroundEllipsesElement::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxGroundEllipsesElement::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxGroundEllipsesCollection wrapper method implementations
//

long IAgVeGfxGroundEllipsesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxGroundEllipsesElementPtr IAgVeGfxGroundEllipsesCollection::GetItem ( long Index ) {
    struct IAgVeGfxGroundEllipsesElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesElementPtr(_result, false);
}

IUnknownPtr IAgVeGfxGroundEllipsesCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVeCentralBodies wrapper method implementations
//

SAFEARRAY * IAgVeCentralBodies::GetAvailableCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeCentralBodies::IsCentralBodyAssigned ( _bstr_t CentralBody ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsCentralBodyAssigned(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeCentralBodies::GetAssignedCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeCentralBodies::AssignCentralBody ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_AssignCentralBody(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeCentralBodies::RemoveCentralBody ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_RemoveCentralBody(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeCentralBodies::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgSaGraphics wrapper method implementations
//

enum AgEVeGfxAttributes IAgSaGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSaGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgSaGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgSaGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr IAgSaGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxTimeEventsCollectionPtr IAgSaGraphics::GetTimeEvents ( ) {
    struct IAgVeGfxTimeEventsCollection * _result = 0;
    HRESULT _hr = get_TimeEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTimeEventsCollectionPtr(_result, false);
}

IAgVeGfxPassesPtr IAgSaGraphics::GetPasses ( ) {
    struct IAgVeGfxPasses * _result = 0;
    HRESULT _hr = get_Passes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxPassesPtr(_result, false);
}

IAgVeGfxOrbitPassDataPtr IAgSaGraphics::GetPassData ( ) {
    struct IAgVeGfxOrbitPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxOrbitPassDataPtr(_result, false);
}

IAgVeGfxPassResolutionPtr IAgSaGraphics::GetResolution ( ) {
    struct IAgVeGfxPassResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxPassResolutionPtr(_result, false);
}

IAgVeGfxElevContoursPtr IAgSaGraphics::GetElevContours ( ) {
    struct IAgVeGfxElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevContoursPtr(_result, false);
}

IAgVeGfxSAAPtr IAgSaGraphics::GetSAA ( ) {
    struct IAgVeGfxSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSAAPtr(_result, false);
}

IAgGfxRangeContoursPtr IAgSaGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr IAgSaGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxSwathPtr IAgSaGraphics::GetSwath ( ) {
    struct IAgVeGfxSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSwathPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr IAgSaGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

IAgLabelNoteCollectionPtr IAgSaGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

IAgVeCentralBodiesPtr IAgSaGraphics::GetGroundTrackCentralBodyDisplay ( ) {
    struct IAgVeCentralBodies * _result = 0;
    HRESULT _hr = get_GroundTrackCentralBodyDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCentralBodiesPtr(_result, false);
}

VARIANT_BOOL IAgSaGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSaGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgSaGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgSaGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSaVOModel wrapper method implementations
//

IAgVOMarkerPtr IAgSaVOModel::GetOrbitMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_OrbitMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

IAgVOMarkerPtr IAgSaVOModel::GetGroundMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_GroundMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

VARIANT_BOOL IAgSaVOModel::GetSolarPanelsPointAtSun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SolarPanelsPointAtSun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSaVOModel::PutSolarPanelsPointAtSun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SolarPanelsPointAtSun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSaVOModel::GetIsPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSaVOModel::PutIsPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgSaVOModel::GetPointSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgSaVOModel::PutPointSize ( const _variant_t & pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOSystemsElementBase wrapper method implementations
//

VARIANT_BOOL IAgVeVOSystemsElementBase::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSystemsElementBase::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVOSystemsElementBase::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSystemsElementBase::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOSystemsElementBase::GetVOWindow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VOWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOSystemsElementBase::PutVOWindow ( _bstr_t pVal ) {
    HRESULT _hr = put_VOWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeVOSystemsElementBase::GetAvailableVOWindows ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableVOWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeVOSystemsElement wrapper method implementations
//

_bstr_t IAgVeVOSystemsElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgVeVOSystemsElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSystemsElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeVOSystemsElement::GetVOWindowIds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetVOWindowIds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOSystemsElement::SetVOWindowIds ( SAFEARRAY * * WindowIds ) {
    HRESULT _hr = raw_SetVOWindowIds(WindowIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeVOSystemsSpecialElement wrapper method implementations
//

VARIANT_BOOL IAgVeVOSystemsSpecialElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSystemsSpecialElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeVOSystemsSpecialElement::GetVOWindowIds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetVOWindowIds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOSystemsSpecialElement::SetVOWindowIds ( SAFEARRAY * * WindowIds ) {
    HRESULT _hr = raw_SetVOWindowIds(WindowIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeVOSystemsCollection wrapper method implementations
//

long IAgVeVOSystemsCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOSystemsElementPtr IAgVeVOSystemsCollection::GetItem ( long Index ) {
    struct IAgVeVOSystemsElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsElementPtr(_result, false);
}

IUnknownPtr IAgVeVOSystemsCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeVOSystemsCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeVOSystemsCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeVOSystemsElementPtr IAgVeVOSystemsCollection::Add ( _bstr_t SystemName ) {
    struct IAgVeVOSystemsElement * _result = 0;
    HRESULT _hr = raw_Add(SystemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsElementPtr(_result, false);
}

SAFEARRAY * IAgVeVOSystemsCollection::GetSupportedSystems ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedSystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeVOSystemsCollection::Contains ( _bstr_t SystemName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(SystemName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOSystemsSpecialElementPtr IAgVeVOSystemsCollection::GetInertialByWindow ( ) {
    struct IAgVeVOSystemsSpecialElement * _result = 0;
    HRESULT _hr = get_InertialByWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsSpecialElementPtr(_result, false);
}

IAgVeVOSystemsSpecialElementPtr IAgVeVOSystemsCollection::GetFixedByWindow ( ) {
    struct IAgVeVOSystemsSpecialElement * _result = 0;
    HRESULT _hr = get_FixedByWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsSpecialElementPtr(_result, false);
}

HRESULT IAgVeVOSystemsCollection::Remove ( _bstr_t SystemName ) {
    HRESULT _hr = raw_Remove(SystemName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeVOGeoBox wrapper method implementations
//

VARIANT_BOOL IAgVeVOGeoBox::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOGeoBox::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOGeoBox::GetLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOGeoBox::PutLongitude ( double pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOGeoBox::GetNorthSouth ( ) {
    double _result = 0;
    HRESULT _hr = get_NorthSouth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOGeoBox::PutNorthSouth ( double pVal ) {
    HRESULT _hr = put_NorthSouth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOGeoBox::GetEastWest ( ) {
    double _result = 0;
    HRESULT _hr = get_EastWest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOGeoBox::PutEastWest ( double pVal ) {
    HRESULT _hr = put_EastWest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOGeoBox::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOGeoBox::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVOGeoBox::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOGeoBox::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgVeVOGeoBox::Reposition ( ) {
    HRESULT _hr = raw_Reposition();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeVOProximityAreaObject wrapper method implementations
//

VARIANT_BOOL IAgVeVOProximityAreaObject::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOProximityAreaObject::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVOProximityAreaObject::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOProximityAreaObject::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeVOProximityAreaObject::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOProximityAreaObject::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOProximityAreaObject::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOProximityAreaObject::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOProximityAreaObject::GetIsTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOProximityAreaObject::PutIsTextVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTextVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOProximityAreaObject::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOProximityAreaObject::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgVeVOProximityAreaObject::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOProximityAreaObject::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOControlBox wrapper method implementations
//

double IAgVeVOControlBox::GetCrossTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOControlBox::PutCrossTrack ( double pVal ) {
    HRESULT _hr = put_CrossTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOControlBox::GetTangential ( ) {
    double _result = 0;
    HRESULT _hr = get_Tangential(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOControlBox::PutTangential ( double pVal ) {
    HRESULT _hr = put_Tangential(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOControlBox::GetNormal ( ) {
    double _result = 0;
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOControlBox::PutNormal ( double pVal ) {
    HRESULT _hr = put_Normal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOControlBox::GetCrossTrackOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossTrackOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOControlBox::PutCrossTrackOffset ( double pVal ) {
    HRESULT _hr = put_CrossTrackOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOControlBox::GetTangentialOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_TangentialOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOControlBox::PutTangentialOffset ( double pVal ) {
    HRESULT _hr = put_TangentialOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOControlBox::GetNormalOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_NormalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOControlBox::PutNormalOffset ( double pVal ) {
    HRESULT _hr = put_NormalOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOControlBox::GetUseTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOControlBox::PutUseTranslucency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOControlBox::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOControlBox::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOBearingBox wrapper method implementations
//

double IAgVeVOBearingBox::GetBearing ( ) {
    double _result = 0;
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingBox::PutBearing ( double pVal ) {
    HRESULT _hr = put_Bearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingBox::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingBox::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingBox::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingBox::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingBox::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingBox::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingBox::GetLengthOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_LengthOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingBox::PutLengthOffset ( double pVal ) {
    HRESULT _hr = put_LengthOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingBox::GetWidthOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_WidthOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingBox::PutWidthOffset ( double pVal ) {
    HRESULT _hr = put_WidthOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingBox::GetHeightOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_HeightOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingBox::PutHeightOffset ( double pVal ) {
    HRESULT _hr = put_HeightOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOBearingBox::GetUseTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingBox::PutUseTranslucency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingBox::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingBox::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOBearingEllipse wrapper method implementations
//

double IAgVeVOBearingEllipse::GetBearing ( ) {
    double _result = 0;
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingEllipse::PutBearing ( double pVal ) {
    HRESULT _hr = put_Bearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingEllipse::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingEllipse::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingEllipse::GetSemiMinorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMinorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingEllipse::PutSemiMinorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMinorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingEllipse::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingEllipse::PutGranularity ( double pVal ) {
    HRESULT _hr = put_Granularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingEllipse::GetMajorAxisOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorAxisOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingEllipse::PutMajorAxisOffset ( double pVal ) {
    HRESULT _hr = put_MajorAxisOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBearingEllipse::GetMinorAxisOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorAxisOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBearingEllipse::PutMinorAxisOffset ( double pVal ) {
    HRESULT _hr = put_MinorAxisOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOLineOfBearing wrapper method implementations
//

double IAgVeVOLineOfBearing::GetBearing ( ) {
    double _result = 0;
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOLineOfBearing::PutBearing ( double pVal ) {
    HRESULT _hr = put_Bearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOLineOfBearing::GetOriginLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_OriginLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOLineOfBearing::PutOriginLatitude ( double pVal ) {
    HRESULT _hr = put_OriginLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOLineOfBearing::GetOriginLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_OriginLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOLineOfBearing::PutOriginLongitude ( double pVal ) {
    HRESULT _hr = put_OriginLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOLineOfBearing::GetOriginAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_OriginAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOLineOfBearing::PutOriginAltitude ( double pVal ) {
    HRESULT _hr = put_OriginAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOLineOfBearing::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOLineOfBearing::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOLineOfBearing::GetBearingError ( ) {
    double _result = 0;
    HRESULT _hr = get_BearingError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOLineOfBearing::PutBearingError ( double pVal ) {
    HRESULT _hr = put_BearingError(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVOLineOfBearing::GetErrorColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ErrorColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOLineOfBearing::PutErrorColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ErrorColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeVOLineOfBearing::GetErrorLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_ErrorLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOLineOfBearing::PutErrorLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_ErrorLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOOrbitProximity wrapper method implementations
//

IAgVeVOGeoBoxPtr IAgVeVOOrbitProximity::GetGeoBox ( ) {
    struct IAgVeVOGeoBox * _result = 0;
    HRESULT _hr = get_GeoBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOGeoBoxPtr(_result, false);
}

IAgVeVOControlBoxPtr IAgVeVOOrbitProximity::GetControlBox ( ) {
    struct IAgVeVOControlBox * _result = 0;
    HRESULT _hr = get_ControlBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOControlBoxPtr(_result, false);
}

IAgVeVOBearingBoxPtr IAgVeVOOrbitProximity::GetBearingBox ( ) {
    struct IAgVeVOBearingBox * _result = 0;
    HRESULT _hr = get_BearingBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingBoxPtr(_result, false);
}

IAgVeVOBearingEllipsePtr IAgVeVOOrbitProximity::GetBearingEllipse ( ) {
    struct IAgVeVOBearingEllipse * _result = 0;
    HRESULT _hr = get_BearingEllipse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingEllipsePtr(_result, false);
}

IAgVeVOLineOfBearingPtr IAgVeVOOrbitProximity::GetLineOfBearing ( ) {
    struct IAgVeVOLineOfBearing * _result = 0;
    HRESULT _hr = get_LineOfBearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLineOfBearingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr IAgVeVOOrbitProximity::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface IAgVeVOElevContours wrapper method implementations
//

VARIANT_BOOL IAgVeVOElevContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOElevContours::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOElevContours::GetIsConesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOElevContours::PutIsConesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsConesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOElevContours::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOElevContours::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOElevContours::GetFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOElevContours::PutFill ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Fill(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOElevContours::GetFillTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_FillTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOElevContours::PutFillTranslucency ( double pVal ) {
    HRESULT _hr = put_FillTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOSAA wrapper method implementations
//

VARIANT_BOOL IAgVeVOSAA::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSAA::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOSAA::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSAA::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOSize wrapper method implementations
//

VARIANT_BOOL IAgVeVOSize::GetScaleToAttitudeSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScaleToAttitudeSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSize::PutScaleToAttitudeSphere ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ScaleToAttitudeSphere(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOSize::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSize::PutScaleValue ( double pVal ) {
    HRESULT _hr = put_ScaleValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOLeadTrailData wrapper method implementations
//

enum AgELeadTrailData IAgVeVOLeadTrailData::GetLeadDataType ( ) {
    enum AgELeadTrailData _result;
    HRESULT _hr = get_LeadDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgELeadTrailData IAgVeVOLeadTrailData::GetTrailDataType ( ) {
    enum AgELeadTrailData _result;
    HRESULT _hr = get_TrailDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOLeadTrailData::SetLeadDataType ( enum AgELeadTrailData ELeadData ) {
    HRESULT _hr = raw_SetLeadDataType(ELeadData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeVOLeadTrailData::SetTrailDataType ( enum AgELeadTrailData ETrailData ) {
    HRESULT _hr = raw_SetTrailDataType(ETrailData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeLeadTrailDataPtr IAgVeVOLeadTrailData::GetLeadData ( ) {
    struct IAgVeLeadTrailData * _result = 0;
    HRESULT _hr = get_LeadData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLeadTrailDataPtr(_result, false);
}

IAgVeLeadTrailDataPtr IAgVeVOLeadTrailData::GetTrailData ( ) {
    struct IAgVeLeadTrailData * _result = 0;
    HRESULT _hr = get_TrailData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLeadTrailDataPtr(_result, false);
}

VARIANT_BOOL IAgVeVOLeadTrailData::GetHasLeadData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeadData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeVOLeadTrailData::GetHasTrailData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTrailData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeVOLeadTrailData::IsDataTypeSupported ( enum AgELeadTrailData EData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDataTypeSupported(EData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeVOLeadTrailData::GetSupportedDataTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedDataTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOLeadTrailData::SetTrailSameAsLead ( ) {
    HRESULT _hr = raw_SetTrailSameAsLead();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeVOOrbitPassData wrapper method implementations
//

IAgVeVOLeadTrailDataPtr IAgVeVOOrbitPassData::GetGroundTrack ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

IAgVeVOLeadTrailDataPtr IAgVeVOOrbitPassData::GetOrbit ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

//
// interface IAgVeVOOrbitTrackData wrapper method implementations
//

VARIANT_BOOL IAgVeVOOrbitTrackData::GetInheritFrom2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFrom2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOOrbitTrackData::PutInheritFrom2D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritFrom2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOOrbitPassDataPtr IAgVeVOOrbitTrackData::GetPassData ( ) {
    struct IAgVeVOOrbitPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitPassDataPtr(_result, false);
}

//
// interface IAgVeVOPathTickMarks wrapper method implementations
//

VARIANT_BOOL IAgVeVOPathTickMarks::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOPathTickMarks::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETickData IAgVeVOPathTickMarks::GetTickDataType ( ) {
    enum AgETickData _result;
    HRESULT _hr = get_TickDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOPathTickMarks::SetTickDataType ( enum AgETickData TickData ) {
    HRESULT _hr = raw_SetTickDataType(TickData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeVOPathTickMarks::IsTickDataTypeSupported ( enum AgETickData TickData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTickDataTypeSupported(TickData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeVOPathTickMarks::GetTickDataSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TickDataSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOTickDataPtr IAgVeVOPathTickMarks::GetTickData ( ) {
    struct IAgVeVOTickData * _result = 0;
    HRESULT _hr = get_TickData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTickDataPtr(_result, false);
}

//
// interface IAgVeVOOrbitTickMarks wrapper method implementations
//

double IAgVeVOOrbitTickMarks::GetTimeBetweenTicks ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeBetweenTicks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOOrbitTickMarks::PutTimeBetweenTicks ( double pVal ) {
    HRESULT _hr = put_TimeBetweenTicks(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOPathTickMarksPtr IAgVeVOOrbitTickMarks::GetGroundTrack ( ) {
    struct IAgVeVOPathTickMarks * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPathTickMarksPtr(_result, false);
}

IAgVeVOPathTickMarksPtr IAgVeVOOrbitTickMarks::GetOrbit ( ) {
    struct IAgVeVOPathTickMarks * _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPathTickMarksPtr(_result, false);
}

//
// interface IAgVeVOPass wrapper method implementations
//

IAgVeVOOrbitTrackDataPtr IAgVeVOPass::GetTrackData ( ) {
    struct IAgVeVOOrbitTrackData * _result = 0;
    HRESULT _hr = get_TrackData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitTrackDataPtr(_result, false);
}

IAgVeVOOrbitTickMarksPtr IAgVeVOPass::GetTickMarks ( ) {
    struct IAgVeVOOrbitTickMarks * _result = 0;
    HRESULT _hr = get_TickMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitTickMarksPtr(_result, false);
}

VARIANT_BOOL IAgVeVOPass::GetEnableDepthCueing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDepthCueing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOPass::PutEnableDepthCueing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableDepthCueing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOCovariance wrapper method implementations
//

enum AgEVeVOSigmaScale IAgVeVOCovariance::GetSigmaScaleType ( ) {
    enum AgEVeVOSigmaScale _result;
    HRESULT _hr = get_SigmaScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOCovariance::SetSigmaScaleType ( enum AgEVeVOSigmaScale SigmaScale ) {
    HRESULT _hr = raw_SetSigmaScaleType(SigmaScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeVOCovariance::IsSigmaScaleTypeSupported ( enum AgEVeVOSigmaScale SigmaScale ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSigmaScaleTypeSupported(SigmaScale, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeVOCovariance::GetSigmaScaleSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SigmaScaleSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOSigmaScalePtr IAgVeVOCovariance::GetSigmaScale ( ) {
    struct IAgVeVOSigmaScale * _result = 0;
    HRESULT _hr = get_SigmaScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSigmaScalePtr(_result, false);
}

enum AgEVeVOAttributes IAgVeVOCovariance::GetAttributesType ( ) {
    enum AgEVeVOAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOCovariance::SetAttributesType ( enum AgEVeVOAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeVOCovariance::IsAttributesTypeSupported ( enum AgEVeVOAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeVOCovariance::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOAttributesPtr IAgVeVOCovariance::GetAttributes ( ) {
    struct IAgVeVOAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOAttributesPtr(_result, false);
}

//
// interface IAgVeVODropLinePosItem wrapper method implementations
//

enum AgEVeVODropLineType IAgVeVODropLinePosItem::GetType ( ) {
    enum AgEVeVODropLineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeVODropLinePosItem::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePosItem::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVODropLinePosItem::GetUse2DColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use2DColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePosItem::PutUse2DColor ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use2DColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVODropLinePosItem::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePosItem::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeVODropLinePosItem::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePosItem::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgVeVODropLinePosItem::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePosItem::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVODropLinePosItemCollection wrapper method implementations
//

long IAgVeVODropLinePosItemCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVODropLinePosItemPtr IAgVeVODropLinePosItemCollection::GetItem ( long Index ) {
    struct IAgVeVODropLinePosItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePosItemPtr(_result, false);
}

IUnknownPtr IAgVeVODropLinePosItemCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVeVODropLinePathItem wrapper method implementations
//

enum AgEVeVODropLineType IAgVeVODropLinePathItem::GetType ( ) {
    enum AgEVeVODropLineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeVODropLinePathItem::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePathItem::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVODropLinePathItem::GetUse2DColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use2DColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePathItem::PutUse2DColor ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use2DColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVODropLinePathItem::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePathItem::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeVODropLinePathItem::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePathItem::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVODropLinePathItem::GetInterval ( ) {
    double _result = 0;
    HRESULT _hr = get_Interval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePathItem::PutInterval ( double pVal ) {
    HRESULT _hr = put_Interval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgVeVODropLinePathItem::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODropLinePathItem::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVODropLinePathItemCollection wrapper method implementations
//

long IAgVeVODropLinePathItemCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVODropLinePathItemPtr IAgVeVODropLinePathItemCollection::GetItem ( long Index ) {
    struct IAgVeVODropLinePathItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePathItemPtr(_result, false);
}

IUnknownPtr IAgVeVODropLinePathItemCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVeVOOrbitDropLines wrapper method implementations
//

IAgVeVODropLinePosItemCollectionPtr IAgVeVOOrbitDropLines::GetPosition ( ) {
    struct IAgVeVODropLinePosItemCollection * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePosItemCollectionPtr(_result, false);
}

IAgVeVODropLinePathItemCollectionPtr IAgVeVOOrbitDropLines::GetOrbit ( ) {
    struct IAgVeVODropLinePathItemCollection * _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePathItemCollectionPtr(_result, false);
}

//
// interface IAgVeVOBPlaneTemplateDisplayElement wrapper method implementations
//

VARIANT_BOOL IAgVeVOBPlaneTemplateDisplayElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTemplateDisplayElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOBPlaneTemplateDisplayElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

OLE_COLOR IAgVeVOBPlaneTemplateDisplayElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTemplateDisplayElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlaneTemplateDisplayElement::GetScaleFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTemplateDisplayElement::PutScaleFactor ( double pVal ) {
    HRESULT _hr = put_ScaleFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOBPlaneTemplateDisplayElement::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTemplateDisplayElement::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOBPlaneTemplateDisplayCollection wrapper method implementations
//

long IAgVeVOBPlaneTemplateDisplayCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOBPlaneTemplateDisplayElementPtr IAgVeVOBPlaneTemplateDisplayCollection::GetItem ( long Index ) {
    struct IAgVeVOBPlaneTemplateDisplayElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTemplateDisplayElementPtr(_result, false);
}

IUnknownPtr IAgVeVOBPlaneTemplateDisplayCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVeVOBPlaneTemplate wrapper method implementations
//

_bstr_t IAgVeVOBPlaneTemplate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOBPlaneTemplate::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOBPlaneTemplate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOBPlaneTemplate::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOBPlaneTemplate::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOBPlaneTemplate::PutCentralBody ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBody(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeVOBPlaneTemplate::GetAvailableCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgVeVOBPlaneTemplate::GetReferenceVector ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOBPlaneTemplate::PutReferenceVector ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceVector(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeVOBPlaneTemplate::GetAvailableVectors ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableVectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeVOBPlaneTemplate::GetIsCartesianGridVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCartesianGridVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTemplate::PutIsCartesianGridVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsCartesianGridVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOBPlaneTemplate::GetIsPolarGridVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPolarGridVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTemplate::PutIsPolarGridVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPolarGridVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlaneTemplate::GetGridSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_GridSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTemplate::PutGridSpacing ( double pVal ) {
    HRESULT _hr = put_GridSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOBPlaneTemplateDisplayCollectionPtr IAgVeVOBPlaneTemplate::GetDisplayElements ( ) {
    struct IAgVeVOBPlaneTemplateDisplayCollection * _result = 0;
    HRESULT _hr = get_DisplayElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTemplateDisplayCollectionPtr(_result, false);
}

//
// interface IAgVeVOBPlaneTemplatesCollection wrapper method implementations
//

long IAgVeVOBPlaneTemplatesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOBPlaneTemplatePtr IAgVeVOBPlaneTemplatesCollection::GetItem ( long Index ) {
    struct IAgVeVOBPlaneTemplate * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTemplatePtr(_result, false);
}

IUnknownPtr IAgVeVOBPlaneTemplatesCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeVOBPlaneTemplatesCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeVOBPlaneTemplatesCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeVOBPlaneTemplatePtr IAgVeVOBPlaneTemplatesCollection::Add ( ) {
    struct IAgVeVOBPlaneTemplate * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTemplatePtr(_result, false);
}

//
// interface IAgVeVOBPlaneEvent wrapper method implementations
//

_variant_t IAgVeVOBPlaneEvent::GetEventEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EventEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeVOBPlaneEvent::PutEventEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_EventEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlaneEvent::GetBeforeEvent ( ) {
    double _result = 0;
    HRESULT _hr = get_BeforeEvent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneEvent::PutBeforeEvent ( double pVal ) {
    HRESULT _hr = put_BeforeEvent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlaneEvent::GetAfterEvent ( ) {
    double _result = 0;
    HRESULT _hr = get_AfterEvent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneEvent::PutAfterEvent ( double pVal ) {
    HRESULT _hr = put_AfterEvent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOBPlaneEvent::GetAlwaysDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlwaysDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneEvent::PutAlwaysDisplay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AlwaysDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOBPlaneTargetPoint wrapper method implementations
//

VARIANT_BOOL IAgVeVOBPlaneTargetPoint::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTargetPoint::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVOBPlaneTargetPoint::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTargetPoint::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeVOBPlaneTargetPointPosition IAgVeVOBPlaneTargetPoint::GetPositionType ( ) {
    enum AgEVeVOBPlaneTargetPointPosition _result;
    HRESULT _hr = get_PositionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOBPlaneTargetPoint::SetPositionType ( enum AgEVeVOBPlaneTargetPointPosition Position ) {
    HRESULT _hr = raw_SetPositionType(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeVOBPlaneTargetPoint::IsPositionTypeSupported ( enum AgEVeVOBPlaneTargetPointPosition Position ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPositionTypeSupported(Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeVOBPlaneTargetPoint::GetPositionSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PositionSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOBPlaneTargetPointPositionPtr IAgVeVOBPlaneTargetPoint::GetPosition ( ) {
    struct IAgVeVOBPlaneTargetPointPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTargetPointPositionPtr(_result, false);
}

//
// interface IAgVeVOBPlanePoint wrapper method implementations
//

_bstr_t IAgVeVOBPlanePoint::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOBPlanePoint::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlanePoint::GetBMulT ( ) {
    double _result = 0;
    HRESULT _hr = get_BMulT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlanePoint::PutBMulT ( double pVal ) {
    HRESULT _hr = put_BMulT(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlanePoint::GetBMulR ( ) {
    double _result = 0;
    HRESULT _hr = get_BMulR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlanePoint::PutBMulR ( double pVal ) {
    HRESULT _hr = put_BMulR(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlanePoint::GetBMag ( ) {
    double _result = 0;
    HRESULT _hr = get_BMag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlanePoint::PutBMag ( double pVal ) {
    HRESULT _hr = put_BMag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlanePoint::GetTheta ( ) {
    double _result = 0;
    HRESULT _hr = get_Theta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlanePoint::PutTheta ( double pVal ) {
    HRESULT _hr = put_Theta(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOBPlanePointCollection wrapper method implementations
//

long IAgVeVOBPlanePointCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOBPlanePointPtr IAgVeVOBPlanePointCollection::GetItem ( long Index ) {
    struct IAgVeVOBPlanePoint * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlanePointPtr(_result, false);
}

IUnknownPtr IAgVeVOBPlanePointCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeVOBPlanePointCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeVOBPlanePointCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeVOBPlanePointPtr IAgVeVOBPlanePointCollection::Add ( ) {
    struct IAgVeVOBPlanePoint * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlanePointPtr(_result, false);
}

OLE_COLOR IAgVeVOBPlanePointCollection::GetPointColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PointColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlanePointCollection::PutPointColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_PointColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVOBPlanePointCollection::GetFirstPointColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FirstPointColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlanePointCollection::PutFirstPointColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_FirstPointColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOBPlaneInstance wrapper method implementations
//

VARIANT_BOOL IAgVeVOBPlaneInstance::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneInstance::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOBPlaneInstance::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOBPlaneInstance::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOBPlaneInstance::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOBPlaneInstance::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOBPlaneInstance::GetDefinition ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Definition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgVeVOBPlaneInstance::GetEventName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EventName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOBPlaneInstance::PutEventName ( _bstr_t pVal ) {
    HRESULT _hr = put_EventName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOBPlaneEventPtr IAgVeVOBPlaneInstance::GetEvent ( ) {
    struct IAgVeVOBPlaneEvent * _result = 0;
    HRESULT _hr = get_Event(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneEventPtr(_result, false);
}

IAgVeVOBPlaneTargetPointPtr IAgVeVOBPlaneInstance::GetTargetPoint ( ) {
    struct IAgVeVOBPlaneTargetPoint * _result = 0;
    HRESULT _hr = get_TargetPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTargetPointPtr(_result, false);
}

VARIANT_BOOL IAgVeVOBPlaneInstance::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneInstance::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlaneInstance::GetPointSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneInstance::PutPointSize ( double pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOBPlaneInstance::GetIsConnectPointsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConnectPointsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneInstance::PutIsConnectPointsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsConnectPointsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVOBPlaneInstance::GetConnectPointsColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ConnectPointsColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneInstance::PutConnectPointsColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ConnectPointsColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeVOBPlaneInstance::GetConnectPointLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_ConnectPointLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneInstance::PutConnectPointLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_ConnectPointLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOBPlaneInstance::GetVOWindow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VOWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOBPlaneInstance::PutVOWindow ( _bstr_t pVal ) {
    HRESULT _hr = put_VOWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeVOBPlaneInstance::GetAvailableVOWindows ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableVOWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOBPlanePointCollectionPtr IAgVeVOBPlaneInstance::GetAdditionalPoints ( ) {
    struct IAgVeVOBPlanePointCollection * _result = 0;
    HRESULT _hr = get_AdditionalPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlanePointCollectionPtr(_result, false);
}

//
// interface IAgVeVOBPlaneInstancesCollection wrapper method implementations
//

long IAgVeVOBPlaneInstancesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOBPlaneInstancePtr IAgVeVOBPlaneInstancesCollection::GetItem ( long Index ) {
    struct IAgVeVOBPlaneInstance * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneInstancePtr(_result, false);
}

IUnknownPtr IAgVeVOBPlaneInstancesCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeVOBPlaneInstancesCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeVOBPlaneInstancesCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeVOBPlaneInstancePtr IAgVeVOBPlaneInstancesCollection::Add ( _bstr_t TemplateName ) {
    struct IAgVeVOBPlaneInstance * _result = 0;
    HRESULT _hr = raw_Add(TemplateName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneInstancePtr(_result, false);
}

//
// interface IAgVeVOBPlanes wrapper method implementations
//

IAgVeVOBPlaneTemplatesCollectionPtr IAgVeVOBPlanes::GetTemplates ( ) {
    struct IAgVeVOBPlaneTemplatesCollection * _result = 0;
    HRESULT _hr = get_Templates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTemplatesCollectionPtr(_result, false);
}

IAgVeVOBPlaneInstancesCollectionPtr IAgVeVOBPlanes::GetInstances ( ) {
    struct IAgVeVOBPlaneInstancesCollection * _result = 0;
    HRESULT _hr = get_Instances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneInstancesCollectionPtr(_result, false);
}

//
// interface IAgVeEclipseBodies wrapper method implementations
//

VARIANT_BOOL IAgVeEclipseBodies::GetUseCustomizedList ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomizedList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEclipseBodies::PutUseCustomizedList ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomizedList(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeEclipseBodies::GetAvailableCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeEclipseBodies::IsCentralBodyAssigned ( _bstr_t CentralBody ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsCentralBodyAssigned(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeEclipseBodies::GetAssignedCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeEclipseBodies::AssignCentralBody ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_AssignCentralBody(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeEclipseBodies::RemoveCentralBody ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_RemoveCentralBody(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeEclipseBodies::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgExportToolStepSize wrapper method implementations
//

double IAgExportToolStepSize::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgExportToolStepSize::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEExportToolStepSize IAgExportToolStepSize::GetStepSizeType ( ) {
    enum AgEExportToolStepSize _result;
    HRESULT _hr = get_StepSizeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgExportToolStepSize::PutStepSizeType ( enum AgEExportToolStepSize pVal ) {
    HRESULT _hr = put_StepSizeType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgExportToolTimePeriod wrapper method implementations
//

_variant_t IAgExportToolTimePeriod::GetStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgExportToolTimePeriod::PutStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_Start(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgExportToolTimePeriod::GetStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgExportToolTimePeriod::PutStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_Stop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEExportToolTimePeriod IAgExportToolTimePeriod::GetTimePeriodType ( ) {
    enum AgEExportToolTimePeriod _result;
    HRESULT _hr = get_TimePeriodType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgExportToolTimePeriod::PutTimePeriodType ( enum AgEExportToolTimePeriod pVal ) {
    HRESULT _hr = put_TimePeriodType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeEphemerisCCSDSExportTool wrapper method implementations
//

_bstr_t IAgVeEphemerisCCSDSExportTool::GetOriginator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Originator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeEphemerisCCSDSExportTool::PutOriginator ( _bstr_t pVal ) {
    HRESULT _hr = put_Originator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeEphemerisCCSDSExportTool::GetObjectID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeEphemerisCCSDSExportTool::PutObjectID ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeEphemerisCCSDSExportTool::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeEphemerisCCSDSExportTool::PutObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeEphemerisCCSDSExportTool::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeEphemerisCCSDSExportTool::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECCSDSReferenceFrame IAgVeEphemerisCCSDSExportTool::GetReferenceFrame ( ) {
    enum AgECCSDSReferenceFrame _result;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisCCSDSExportTool::PutReferenceFrame ( enum AgECCSDSReferenceFrame pVal ) {
    HRESULT _hr = put_ReferenceFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECCSDSDateFormat IAgVeEphemerisCCSDSExportTool::GetDateFormat ( ) {
    enum AgECCSDSDateFormat _result;
    HRESULT _hr = get_DateFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisCCSDSExportTool::PutDateFormat ( enum AgECCSDSDateFormat pVal ) {
    HRESULT _hr = put_DateFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECCSDSEphemFormat IAgVeEphemerisCCSDSExportTool::GetEphemerisFormat ( ) {
    enum AgECCSDSEphemFormat _result;
    HRESULT _hr = get_EphemerisFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisCCSDSExportTool::PutEphemerisFormat ( enum AgECCSDSEphemFormat pVal ) {
    HRESULT _hr = put_EphemerisFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeEphemerisCCSDSExportTool::GetTimePrecision ( ) {
    long _result = 0;
    HRESULT _hr = get_TimePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisCCSDSExportTool::PutTimePrecision ( long pVal ) {
    HRESULT _hr = put_TimePrecision(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolStepSizePtr IAgVeEphemerisCCSDSExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

IAgExportToolTimePeriodPtr IAgVeEphemerisCCSDSExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

SAFEARRAY * IAgVeEphemerisCCSDSExportTool::GetReferenceFramesSupported ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ReferenceFramesSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeEphemerisCCSDSExportTool::GetUseSatelliteCenterAndFrame ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSatelliteCenterAndFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisCCSDSExportTool::PutUseSatelliteCenterAndFrame ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseSatelliteCenterAndFrame(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgVeEphemerisCCSDSExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeEphemerisStkExportTool wrapper method implementations
//

enum AgEStkEphemCoordinateSystem IAgVeEphemerisStkExportTool::GetCoordinateSystem ( ) {
    enum AgEStkEphemCoordinateSystem _result;
    HRESULT _hr = get_CoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisStkExportTool::PutCoordinateSystem ( enum AgEStkEphemCoordinateSystem pVal ) {
    HRESULT _hr = put_CoordinateSystem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeEphemerisStkExportTool::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeEphemerisStkExportTool::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEExportToolVersionFormat IAgVeEphemerisStkExportTool::GetVersionFormat ( ) {
    enum AgEExportToolVersionFormat _result;
    HRESULT _hr = get_VersionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisStkExportTool::PutVersionFormat ( enum AgEExportToolVersionFormat pVal ) {
    HRESULT _hr = put_VersionFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeEphemerisStkExportTool::GetIncludeInterp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInterp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisStkExportTool::PutIncludeInterp ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeInterp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolTimePeriodPtr IAgVeEphemerisStkExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

IAgExportToolStepSizePtr IAgVeEphemerisStkExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

enum AgEStkEphemCovarianceType IAgVeEphemerisStkExportTool::GetCovarianceType ( ) {
    enum AgEStkEphemCovarianceType _result;
    HRESULT _hr = get_CovarianceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisStkExportTool::PutCovarianceType ( enum AgEStkEphemCovarianceType pVal ) {
    HRESULT _hr = put_CovarianceType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgVeEphemerisStkExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeEphemerisSpiceExportTool wrapper method implementations
//

_bstr_t IAgVeEphemerisSpiceExportTool::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeEphemerisSpiceExportTool::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeEphemerisSpiceExportTool::GetSatID ( ) {
    long _result = 0;
    HRESULT _hr = get_SatID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisSpiceExportTool::PutSatID ( long pVal ) {
    HRESULT _hr = put_SatID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpiceInterpolation IAgVeEphemerisSpiceExportTool::GetInterpolationType ( ) {
    enum AgESpiceInterpolation _result;
    HRESULT _hr = get_InterpolationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisSpiceExportTool::PutInterpolationType ( enum AgESpiceInterpolation pVal ) {
    HRESULT _hr = put_InterpolationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeEphemerisSpiceExportTool::GetInterpolation ( ) {
    long _result = 0;
    HRESULT _hr = get_Interpolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisSpiceExportTool::PutInterpolation ( long pVal ) {
    HRESULT _hr = put_Interpolation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolStepSizePtr IAgVeEphemerisSpiceExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

IAgExportToolTimePeriodPtr IAgVeEphemerisSpiceExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

HRESULT IAgVeEphemerisSpiceExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeEphemerisCode500ExportTool wrapper method implementations
//

long IAgVeEphemerisCode500ExportTool::GetSatID ( ) {
    long _result = 0;
    HRESULT _hr = get_SatID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeEphemerisCode500ExportTool::PutSatID ( long pVal ) {
    HRESULT _hr = put_SatID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolStepSizePtr IAgVeEphemerisCode500ExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

IAgExportToolTimePeriodPtr IAgVeEphemerisCode500ExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

HRESULT IAgVeEphemerisCode500ExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVePropDefExportTool wrapper method implementations
//

HRESULT IAgVePropDefExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeAttitudeExportTool wrapper method implementations
//

enum AgEAttCoordinateAxes IAgVeAttitudeExportTool::GetCoordinateAxesType ( ) {
    enum AgEAttCoordinateAxes _result;
    HRESULT _hr = get_CoordinateAxesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeAttitudeExportTool::SetCoordinateAxesType ( enum AgEAttCoordinateAxes CoordinateAxes ) {
    HRESULT _hr = raw_SetCoordinateAxesType(CoordinateAxes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeCoordinateAxesPtr IAgVeAttitudeExportTool::GetCoordinateAxes ( ) {
    struct IAgVeCoordinateAxes * _result = 0;
    HRESULT _hr = get_CoordinateAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCoordinateAxesPtr(_result, false);
}

IAgExportToolTimePeriodPtr IAgVeAttitudeExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

enum AgEAttInclude IAgVeAttitudeExportTool::GetInclude ( ) {
    enum AgEAttInclude _result;
    HRESULT _hr = get_Include(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAttitudeExportTool::PutInclude ( enum AgEAttInclude pVal ) {
    HRESULT _hr = put_Include(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEExportToolVersionFormat IAgVeAttitudeExportTool::GetVersionFormat ( ) {
    enum AgEExportToolVersionFormat _result;
    HRESULT _hr = get_VersionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAttitudeExportTool::PutVersionFormat ( enum AgEExportToolVersionFormat pVal ) {
    HRESULT _hr = put_VersionFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolStepSizePtr IAgVeAttitudeExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

SAFEARRAY * IAgVeAttitudeExportTool::GetSupportedCoordinateAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedCoordinateAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgVeAttitudeExportTool::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IAgVeAttitudeExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgSaExportTools wrapper method implementations
//

IAgVeEphemerisCCSDSExportToolPtr IAgSaExportTools::GetEphemerisCCSDSExportTool ( ) {
    struct IAgVeEphemerisCCSDSExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisCCSDSExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisCCSDSExportToolPtr(_result, false);
}

IAgVeEphemerisStkExportToolPtr IAgSaExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVeEphemerisSpiceExportToolPtr IAgSaExportTools::GetEphemerisSpiceExportTool ( ) {
    struct IAgVeEphemerisSpiceExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisSpiceExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisSpiceExportToolPtr(_result, false);
}

IAgVeEphemerisCode500ExportToolPtr IAgSaExportTools::GetEphemerisCode500ExportTool ( ) {
    struct IAgVeEphemerisCode500ExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisCode500ExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisCode500ExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr IAgSaExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr IAgSaExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface IAgSpEnvSAAContour wrapper method implementations
//

enum AgESpEnvSAAChannel IAgSpEnvSAAContour::GetChannel ( ) {
    enum AgESpEnvSAAChannel _result;
    HRESULT _hr = get_Channel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvSAAContour::PutChannel ( enum AgESpEnvSAAChannel pVal ) {
    HRESULT _hr = put_Channel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvSAAFluxLevel IAgSpEnvSAAContour::GetFluxLevel ( ) {
    enum AgESpEnvSAAFluxLevel _result;
    HRESULT _hr = get_FluxLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSpEnvSAAContour::PutFluxLevel ( enum AgESpEnvSAAFluxLevel pVal ) {
    HRESULT _hr = put_FluxLevel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSpEnvSAAContour::ComputeSAAFluxIntensity ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeSAAFluxIntensity(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeSpEnvMagneticField wrapper method implementations
//

enum AgESpEnvMagneticMainField IAgVeSpEnvMagneticField::GetMainField ( ) {
    enum AgESpEnvMagneticMainField _result;
    HRESULT _hr = get_MainField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvMagneticField::PutMainField ( enum AgESpEnvMagneticMainField pVal ) {
    HRESULT _hr = put_MainField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagneticExternalField IAgVeSpEnvMagneticField::GetExternalField ( ) {
    enum AgESpEnvMagneticExternalField _result;
    HRESULT _hr = get_ExternalField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvMagneticField::PutExternalField ( enum AgESpEnvMagneticExternalField pVal ) {
    HRESULT _hr = put_ExternalField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvMagneticField::GetIGRF_UpdateRate ( ) {
    double _result = 0;
    HRESULT _hr = get_IGRF_UpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvMagneticField::PutIGRF_UpdateRate ( double pVal ) {
    HRESULT _hr = put_IGRF_UpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgVeSpEnvMagneticField::ComputeBField ( const _variant_t & Time, double * pBx, double * pBy, double * pBz ) {
    HRESULT _hr = raw_ComputeBField(Time, pBx, pBy, pBz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgVeSpEnvMagneticField::ComputeBFieldAsArray ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeBFieldAsArray(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvMagneticField::ComputeDipoleL ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeDipoleL(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvMagneticField::ComputeMcIlwainL ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeMcIlwainL(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvMagneticField::ComputeBBeq ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeBBeq(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeSpEnvVehTemperature wrapper method implementations
//

double IAgVeSpEnvVehTemperature::GetEarthAlbedo ( ) {
    double _result = 0;
    HRESULT _hr = get_EarthAlbedo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvVehTemperature::PutEarthAlbedo ( double pVal ) {
    HRESULT _hr = put_EarthAlbedo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvVehTemperature::GetMaterialEmissivity ( ) {
    double _result = 0;
    HRESULT _hr = get_MaterialEmissivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvVehTemperature::PutMaterialEmissivity ( double pVal ) {
    HRESULT _hr = put_MaterialEmissivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvVehTemperature::GetMaterialAbsorptivity ( ) {
    double _result = 0;
    HRESULT _hr = get_MaterialAbsorptivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvVehTemperature::PutMaterialAbsorptivity ( double pVal ) {
    HRESULT _hr = put_MaterialAbsorptivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvVehTemperature::GetDissipation ( ) {
    double _result = 0;
    HRESULT _hr = get_Dissipation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvVehTemperature::PutDissipation ( double pVal ) {
    HRESULT _hr = put_Dissipation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvVehTemperature::GetCrossSectionalArea ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossSectionalArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvVehTemperature::PutCrossSectionalArea ( double pVal ) {
    HRESULT _hr = put_CrossSectionalArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSpEnvShapeModel IAgVeSpEnvVehTemperature::GetShapeModel ( ) {
    enum AgEVeSpEnvShapeModel _result;
    HRESULT _hr = get_ShapeModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvVehTemperature::PutShapeModel ( enum AgEVeSpEnvShapeModel pVal ) {
    HRESULT _hr = put_ShapeModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeSpEnvVehTemperature::GetNormalVector ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NormalVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSpEnvVehTemperature::PutNormalVector ( _bstr_t pVal ) {
    HRESULT _hr = put_NormalVector(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvVehTemperature::ComputeTemperature ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeTemperature(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeSpEnvParticleFlux wrapper method implementations
//

enum AgEVeSpEnvF10p7Source IAgVeSpEnvParticleFlux::GetF10p7Source ( ) {
    enum AgEVeSpEnvF10p7Source _result;
    HRESULT _hr = get_F10p7Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvParticleFlux::PutF10p7Source ( enum AgEVeSpEnvF10p7Source pVal ) {
    HRESULT _hr = put_F10p7Source(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvParticleFlux::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvParticleFlux::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSpEnvMaterial IAgVeSpEnvParticleFlux::GetMaterial ( ) {
    enum AgEVeSpEnvMaterial _result;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvParticleFlux::PutMaterial ( enum AgEVeSpEnvMaterial pVal ) {
    HRESULT _hr = put_Material(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvParticleFlux::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvParticleFlux::PutArea ( double pVal ) {
    HRESULT _hr = put_Area(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvParticleFlux::GetPitDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_PitDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvParticleFlux::PutPitDepth ( double pVal ) {
    HRESULT _hr = put_PitDepth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSpEnvParticleFlux::GetUseSporadicMeteors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSporadicMeteors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvParticleFlux::PutUseSporadicMeteors ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSporadicMeteors(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvParticleFlux::GetMaterialDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_MaterialDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvParticleFlux::PutMaterialDensity ( double pVal ) {
    HRESULT _hr = put_MaterialDensity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvParticleFlux::GetTensileStrength ( ) {
    double _result = 0;
    HRESULT _hr = get_TensileStrength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvParticleFlux::PutTensileStrength ( double pVal ) {
    HRESULT _hr = put_TensileStrength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeSpEnvParticleFlux::GetFluxFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FluxFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSpEnvParticleFlux::PutFluxFile ( _bstr_t pVal ) {
    HRESULT _hr = put_FluxFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeSpEnvParticleFlux::GetParticleMassArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetParticleMassArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvParticleFlux::ComputeMeteorImpactFlux ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeMeteorImpactFlux(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvParticleFlux::ComputeMeteorDamageImpactFlux ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeMeteorDamageImpactFlux(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSpEnvParticleFlux::ComputeMeteorImpactFluxDistribution ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeMeteorImpactFluxDistribution(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSpEnvParticleFlux::ComputeMeteorDamageImpactFluxDistribution ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeMeteorDamageImpactFluxDistribution(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvParticleFlux::ComputeDebrisImpactFlux ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeDebrisImpactFlux(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvParticleFlux::ComputeDebrisDamageImpactFlux ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeDebrisDamageImpactFlux(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSpEnvParticleFlux::ComputeDebrisImpactFluxDistribution ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeDebrisImpactFluxDistribution(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSpEnvParticleFlux::ComputeDebrisDamageImpactFluxDistribution ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeDebrisDamageImpactFluxDistribution(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeSpEnvRadDoseRateElement wrapper method implementations
//

double IAgVeSpEnvRadDoseRateElement::GetShieldingThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_ShieldingThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeSpEnvRadDoseRateElement::GetIsElectronDoseRateValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsElectronDoseRateValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvRadDoseRateElement::ElectronDoseRate ( ) {
    double _result = 0;
    HRESULT _hr = raw_ElectronDoseRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeSpEnvRadDoseRateElement::GetIsElectronBremsstrahlungDoseRateValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsElectronBremsstrahlungDoseRateValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvRadDoseRateElement::ElectronBremsstrahlungDoseRate ( ) {
    double _result = 0;
    HRESULT _hr = raw_ElectronBremsstrahlungDoseRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeSpEnvRadDoseRateElement::GetIsProtonDoseRateValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsProtonDoseRateValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvRadDoseRateElement::ProtonDoseRate ( ) {
    double _result = 0;
    HRESULT _hr = raw_ProtonDoseRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeSpEnvRadDoseRateElement::GetIsTotalDoseRateValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTotalDoseRateValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeSpEnvRadDoseRateElement::TotalDoseRate ( ) {
    double _result = 0;
    HRESULT _hr = raw_TotalDoseRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeSpEnvRadDoseRateCollection wrapper method implementations
//

long IAgVeSpEnvRadDoseRateCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeSpEnvRadDoseRateElementPtr IAgVeSpEnvRadDoseRateCollection::GetItem ( long Index ) {
    struct IAgVeSpEnvRadDoseRateElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvRadDoseRateElementPtr(_result, false);
}

IUnknownPtr IAgVeSpEnvRadDoseRateCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVeSpEnvRadiation wrapper method implementations
//

enum AgEVeSpEnvComputationMode IAgVeSpEnvRadiation::GetComputationMode ( ) {
    enum AgEVeSpEnvComputationMode _result;
    HRESULT _hr = get_ComputationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutComputationMode ( enum AgEVeSpEnvComputationMode pVal ) {
    HRESULT _hr = put_ComputationMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeSpEnvRadiation::GetFluxStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FluxStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEVeSpEnvDoseChannel IAgVeSpEnvRadiation::GetDoseChannel ( ) {
    enum AgEVeSpEnvDoseChannel _result;
    HRESULT _hr = get_DoseChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutDoseChannel ( enum AgEVeSpEnvDoseChannel pVal ) {
    HRESULT _hr = put_DoseChannel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSpEnvRadiation::GetUseNuclearAttenuation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseNuclearAttenuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutUseNuclearAttenuation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseNuclearAttenuation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSpEnvDetectorType IAgVeSpEnvRadiation::GetDetectorType ( ) {
    enum AgEVeSpEnvDetectorType _result;
    HRESULT _hr = get_DetectorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutDetectorType ( enum AgEVeSpEnvDetectorType pVal ) {
    HRESULT _hr = put_DetectorType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDoublesCollectionPtr IAgVeSpEnvRadiation::GetShieldingThicknesses ( ) {
    struct STKUtil::IAgDoublesCollection * _result = 0;
    HRESULT _hr = get_ShieldingThicknesses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDoublesCollectionPtr(_result, false);
}

enum AgEVeSpEnvApSource IAgVeSpEnvRadiation::GetApSource ( ) {
    enum AgEVeSpEnvApSource _result;
    HRESULT _hr = get_ApSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutApSource ( enum AgEVeSpEnvApSource pVal ) {
    HRESULT _hr = put_ApSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvRadiation::GetAp ( ) {
    double _result = 0;
    HRESULT _hr = get_Ap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutAp ( double pVal ) {
    HRESULT _hr = put_Ap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeSpEnvRadiation::GetFluxFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FluxFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeSpEnvRadiation::PutFluxFile ( _bstr_t pVal ) {
    HRESULT _hr = put_FluxFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSpEnvRadiation::GetIncludeNuclearAttenNeutrons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeNuclearAttenNeutrons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutIncludeNuclearAttenNeutrons ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeNuclearAttenNeutrons(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeSpEnvRadiation::GetElectronEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetElectronEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSpEnvRadiation::GetProtonEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetProtonEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSpEnvRadiation::ComputeElectronFluxes ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeElectronFluxes(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSpEnvRadiation::ComputeProtonFluxes ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeProtonFluxes(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeSpEnvRadDoseRateCollectionPtr IAgVeSpEnvRadiation::ComputeDoseRates ( const _variant_t & Time ) {
    struct IAgVeSpEnvRadDoseRateCollection * _result = 0;
    HRESULT _hr = raw_ComputeDoseRates(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvRadDoseRateCollectionPtr(_result, false);
}

enum AgEVeSpEnvDetectorGeometry IAgVeSpEnvRadiation::GetDetectorGeometry ( ) {
    enum AgEVeSpEnvDetectorGeometry _result;
    HRESULT _hr = get_DetectorGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutDetectorGeometry ( enum AgEVeSpEnvDetectorGeometry pVal ) {
    HRESULT _hr = put_DetectorGeometry(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeSpEnvRadiation::ComputeElectronIntegralFluxes ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeElectronIntegralFluxes(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeSpEnvRadiation::ComputeProtonIntegralFluxes ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeProtonIntegralFluxes(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeSpEnvRadiation::GetUseModelEpoch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseModelEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutUseModelEpoch ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseModelEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSpEnvRadiation::GetShiftSAA ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShiftSAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutShiftSAA ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShiftSAA(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvRadiation::GetDoseIntegrationStep ( ) {
    double _result = 0;
    HRESULT _hr = get_DoseIntegrationStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutDoseIntegrationStep ( double pVal ) {
    HRESULT _hr = put_DoseIntegrationStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeSpEnvRadiation::GetDoseReportStep ( ) {
    double _result = 0;
    HRESULT _hr = get_DoseReportStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvRadiation::PutDoseReportStep ( double pVal ) {
    HRESULT _hr = put_DoseReportStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeSpEnvMagFieldLine wrapper method implementations
//

VARIANT_BOOL IAgVeSpEnvMagFieldLine::GetIs2DVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Is2DVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvMagFieldLine::PutIs2DVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Is2DVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSpEnvMagFieldLine::GetIs3DVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Is3DVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvMagFieldLine::PutIs3DVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Is3DVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeSpEnvMagFieldLine::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvMagFieldLine::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgVeSpEnvMagFieldLine::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvMagFieldLine::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeSpEnvMagFieldLine::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvMagFieldLine::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeSpEnvMagFieldLine::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeSpEnvMagFieldLine::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeSpEnvGraphics wrapper method implementations
//

IAgVeSpEnvMagFieldLinePtr IAgVeSpEnvGraphics::GetMagFieldLine ( ) {
    struct IAgVeSpEnvMagFieldLine * _result = 0;
    HRESULT _hr = get_MagFieldLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvMagFieldLinePtr(_result, false);
}

//
// interface IAgVeSpEnvSpaceEnvironment wrapper method implementations
//

IAgSpEnvSAAContourPtr IAgVeSpEnvSpaceEnvironment::GetSAAContour ( ) {
    struct IAgSpEnvSAAContour * _result = 0;
    HRESULT _hr = get_SAAContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvSAAContourPtr(_result, false);
}

IAgVeSpEnvMagneticFieldPtr IAgVeSpEnvSpaceEnvironment::GetMagneticField ( ) {
    struct IAgVeSpEnvMagneticField * _result = 0;
    HRESULT _hr = get_MagneticField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvMagneticFieldPtr(_result, false);
}

IAgVeSpEnvVehTemperaturePtr IAgVeSpEnvSpaceEnvironment::GetVehTemperature ( ) {
    struct IAgVeSpEnvVehTemperature * _result = 0;
    HRESULT _hr = get_VehTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvVehTemperaturePtr(_result, false);
}

IAgVeSpEnvParticleFluxPtr IAgVeSpEnvSpaceEnvironment::GetParticleFlux ( ) {
    struct IAgVeSpEnvParticleFlux * _result = 0;
    HRESULT _hr = get_ParticleFlux(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvParticleFluxPtr(_result, false);
}

IAgVeSpEnvRadiationPtr IAgVeSpEnvSpaceEnvironment::GetRadiation ( ) {
    struct IAgVeSpEnvRadiation * _result = 0;
    HRESULT _hr = get_Radiation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvRadiationPtr(_result, false);
}

IAgVeSpEnvGraphicsPtr IAgVeSpEnvSpaceEnvironment::GetGraphics ( ) {
    struct IAgVeSpEnvGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvGraphicsPtr(_result, false);
}

//
// interface _IAgVeInertia wrapper method implementations
//

double _IAgVeInertia::GetIxx ( ) {
    double _result = 0;
    HRESULT _hr = get_Ixx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInertia::PutIxx ( double pVal ) {
    HRESULT _hr = put_Ixx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeInertia::GetIyy ( ) {
    double _result = 0;
    HRESULT _hr = get_Iyy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInertia::PutIyy ( double pVal ) {
    HRESULT _hr = put_Iyy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeInertia::GetIzz ( ) {
    double _result = 0;
    HRESULT _hr = get_Izz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInertia::PutIzz ( double pVal ) {
    HRESULT _hr = put_Izz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeInertia::GetIxy ( ) {
    double _result = 0;
    HRESULT _hr = get_Ixy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInertia::PutIxy ( double pVal ) {
    HRESULT _hr = put_Ixy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeInertia::GetIxz ( ) {
    double _result = 0;
    HRESULT _hr = get_Ixz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInertia::PutIxz ( double pVal ) {
    HRESULT _hr = put_Ixz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeInertia::GetIyz ( ) {
    double _result = 0;
    HRESULT _hr = get_Iyz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeInertia::PutIyz ( double pVal ) {
    HRESULT _hr = put_Iyz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeMassProperties wrapper method implementations
//

double _IAgVeMassProperties::GetMass ( ) {
    double _result = 0;
    HRESULT _hr = get_Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeMassProperties::PutMass ( double pVal ) {
    HRESULT _hr = put_Mass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeInertiaPtr _IAgVeMassProperties::GetInertia ( ) {
    struct IAgVeInertia * _result = 0;
    HRESULT _hr = get_Inertia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeInertiaPtr(_result, false);
}

//
// interface _IAgVeBreakAngleBreakByLatitude wrapper method implementations
//

double _IAgVeBreakAngleBreakByLatitude::GetLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeBreakAngleBreakByLatitude::PutLatitude ( double pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeBreakAngleBreakByLatitude wrapper method implementations
//

double IAgVeBreakAngleBreakByLatitude::GetLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeBreakAngleBreakByLatitude::PutLatitude ( double pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeBreakAngleBreakByLongitude wrapper method implementations
//

double _IAgVeBreakAngleBreakByLongitude::GetLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeBreakAngleBreakByLongitude::PutLongitude ( double pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeBreakAngleBreakByLongitude wrapper method implementations
//

double IAgVeBreakAngleBreakByLongitude::GetLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeBreakAngleBreakByLongitude::PutLongitude ( double pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeDefinition wrapper method implementations
//

enum AgEVeBreakAngleType _IAgVeDefinition::GetBreakAngleType ( ) {
    enum AgEVeBreakAngleType _result;
    HRESULT _hr = get_BreakAngleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeDefinition::SetBreakAngleType ( enum AgEVeBreakAngleType BreakAngleType ) {
    HRESULT _hr = raw_SetBreakAngleType(BreakAngleType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeBreakAnglePtr _IAgVeDefinition::GetBreakAngle ( ) {
    struct IAgVeBreakAngle * _result = 0;
    HRESULT _hr = get_BreakAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeBreakAnglePtr(_result, false);
}

enum AgEVeDirection _IAgVeDefinition::GetDirection ( ) {
    enum AgEVeDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeDefinition::PutDirection ( enum AgEVeDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeRepeatGroundTrackNumbering wrapper method implementations
//

long _IAgVeRepeatGroundTrackNumbering::GetFirstPathNum ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPathNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRepeatGroundTrackNumbering::PutFirstPathNum ( long pVal ) {
    HRESULT _hr = put_FirstPathNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeRepeatGroundTrackNumbering::GetRevsToRepeat ( ) {
    long _result = 0;
    HRESULT _hr = get_RevsToRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRepeatGroundTrackNumbering::PutRevsToRepeat ( long pVal ) {
    HRESULT _hr = put_RevsToRepeat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePassNumberingDateOfFirstPass wrapper method implementations
//

long _IAgVePassNumberingDateOfFirstPass::GetFirstPassNum ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPassNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePassNumberingDateOfFirstPass::PutFirstPassNum ( long pVal ) {
    HRESULT _hr = put_FirstPassNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePassNumberingDateOfFirstPass::GetDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePassNumberingDateOfFirstPass::PutDate ( const _variant_t & pVal ) {
    HRESULT _hr = put_Date(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePassNumberingDateOfFirstPass wrapper method implementations
//

long IAgVePassNumberingDateOfFirstPass::GetFirstPassNum ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPassNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePassNumberingDateOfFirstPass::PutFirstPassNum ( long pVal ) {
    HRESULT _hr = put_FirstPassNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePassNumberingDateOfFirstPass::GetDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePassNumberingDateOfFirstPass::PutDate ( const _variant_t & pVal ) {
    HRESULT _hr = put_Date(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePassNumberingFirstPassNum wrapper method implementations
//

long _IAgVePassNumberingFirstPassNum::GetFirstPassNum ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPassNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePassNumberingFirstPassNum::PutFirstPassNum ( long pVal ) {
    HRESULT _hr = put_FirstPassNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVePassNumberingFirstPassNum wrapper method implementations
//

long IAgVePassNumberingFirstPassNum::GetFirstPassNum ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPassNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePassNumberingFirstPassNum::PutFirstPassNum ( long pVal ) {
    HRESULT _hr = put_FirstPassNum(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVePassBreak wrapper method implementations
//

IAgVeDefinitionPtr _IAgVePassBreak::GetDefinition ( ) {
    struct IAgVeDefinition * _result = 0;
    HRESULT _hr = get_Definition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeDefinitionPtr(_result, false);
}

enum AgEVePartialPassMeasurement _IAgVePassBreak::GetPartialPassMeasurement ( ) {
    enum AgEVePartialPassMeasurement _result;
    HRESULT _hr = get_PartialPassMeasurement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePassBreak::PutPartialPassMeasurement ( enum AgEVePartialPassMeasurement pVal ) {
    HRESULT _hr = put_PartialPassMeasurement(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeCoordinateSystem _IAgVePassBreak::GetCoordinateSystem ( ) {
    enum AgEVeCoordinateSystem _result;
    HRESULT _hr = get_CoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePassBreak::PutCoordinateSystem ( enum AgEVeCoordinateSystem pVal ) {
    HRESULT _hr = put_CoordinateSystem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeRepeatGroundTrackNumberingPtr _IAgVePassBreak::GetRepeatGroundTrackNumbering ( ) {
    struct IAgVeRepeatGroundTrackNumbering * _result = 0;
    HRESULT _hr = get_RepeatGroundTrackNumbering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRepeatGroundTrackNumberingPtr(_result, false);
}

enum AgEVePassNumbering _IAgVePassBreak::GetPassNumberingType ( ) {
    enum AgEVePassNumbering _result;
    HRESULT _hr = get_PassNumberingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVePassBreak::SetPassNumberingType ( enum AgEVePassNumbering PassNumbering ) {
    HRESULT _hr = raw_SetPassNumberingType(PassNumbering);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVePassNumberingPtr _IAgVePassBreak::GetPassNumbering ( ) {
    struct IAgVePassNumbering * _result = 0;
    HRESULT _hr = get_PassNumbering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePassNumberingPtr(_result, false);
}

SAFEARRAY * _IAgVePassBreak::GetSupportedCoordinateSystems ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedCoordinateSystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeCentralBodies wrapper method implementations
//

SAFEARRAY * _IAgVeCentralBodies::GetAvailableCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeCentralBodies::IsCentralBodyAssigned ( _bstr_t CentralBody ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsCentralBodyAssigned(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeCentralBodies::GetAssignedCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeCentralBodies::AssignCentralBody ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_AssignCentralBody(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeCentralBodies::RemoveCentralBody ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_RemoveCentralBody(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeCentralBodies::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgSaGraphics wrapper method implementations
//

enum AgEVeGfxAttributes _IAgSaGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSaGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgSaGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSaGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr _IAgSaGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxTimeEventsCollectionPtr _IAgSaGraphics::GetTimeEvents ( ) {
    struct IAgVeGfxTimeEventsCollection * _result = 0;
    HRESULT _hr = get_TimeEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTimeEventsCollectionPtr(_result, false);
}

IAgVeGfxPassesPtr _IAgSaGraphics::GetPasses ( ) {
    struct IAgVeGfxPasses * _result = 0;
    HRESULT _hr = get_Passes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxPassesPtr(_result, false);
}

IAgVeGfxOrbitPassDataPtr _IAgSaGraphics::GetPassData ( ) {
    struct IAgVeGfxOrbitPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxOrbitPassDataPtr(_result, false);
}

IAgVeGfxPassResolutionPtr _IAgSaGraphics::GetResolution ( ) {
    struct IAgVeGfxPassResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxPassResolutionPtr(_result, false);
}

IAgVeGfxElevContoursPtr _IAgSaGraphics::GetElevContours ( ) {
    struct IAgVeGfxElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevContoursPtr(_result, false);
}

IAgVeGfxSAAPtr _IAgSaGraphics::GetSAA ( ) {
    struct IAgVeGfxSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSAAPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgSaGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr _IAgSaGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxSwathPtr _IAgSaGraphics::GetSwath ( ) {
    struct IAgVeGfxSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSwathPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr _IAgSaGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

IAgLabelNoteCollectionPtr _IAgSaGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

IAgVeCentralBodiesPtr _IAgSaGraphics::GetGroundTrackCentralBodyDisplay ( ) {
    struct IAgVeCentralBodies * _result = 0;
    HRESULT _hr = get_GroundTrackCentralBodyDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCentralBodiesPtr(_result, false);
}

VARIANT_BOOL _IAgSaGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSaGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgSaGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSaGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeEllipseDataElement wrapper method implementations
//

_variant_t _IAgVeEllipseDataElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeEllipseDataElement::PutTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeEllipseDataElement::GetCustomPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CustomPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEllipseDataElement::PutCustomPosition ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CustomPosition(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeEllipseDataElement::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeEllipseDataElement::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeEllipseDataElement::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeEllipseDataElement::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeEllipseDataElement::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEllipseDataElement::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeEllipseDataElement::GetSemiMinorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMinorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEllipseDataElement::PutSemiMinorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMinorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeEllipseDataElement::GetBearing ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeEllipseDataElement::PutBearing ( const _variant_t & pVal ) {
    HRESULT _hr = put_Bearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGroundEllipseElement wrapper method implementations
//

_bstr_t _IAgVeGroundEllipseElement::GetEllipseName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EllipseName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGroundEllipseElement::PutEllipseName ( _bstr_t pVal ) {
    HRESULT _hr = put_EllipseName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeEllipseDataCollectionPtr _IAgVeGroundEllipseElement::GetEllipseData ( ) {
    struct IAgVeEllipseDataCollection * _result = 0;
    HRESULT _hr = get_EllipseData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEllipseDataCollectionPtr(_result, false);
}

//
// interface _IAgSaVOModel wrapper method implementations
//

VARIANT_BOOL _IAgSaVOModel::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSaVOModel::PutVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_Visible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSaVOModel::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSaVOModel::PutScaleValue ( double pScale ) {
    HRESULT _hr = put_ScaleValue(pScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVODetailThresholdPtr _IAgSaVOModel::GetDetailThreshold ( ) {
    struct IAgVODetailThreshold * _result = 0;
    HRESULT _hr = get_DetailThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODetailThresholdPtr(_result, false);
}

IAgVOModelDataPtr _IAgSaVOModel::GetModelData ( ) {
    struct IAgVOModelData * _result = 0;
    HRESULT _hr = get_ModelData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelDataPtr(_result, false);
}

enum AgEModelType _IAgSaVOModel::GetModelType ( ) {
    enum AgEModelType _result;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSaVOModel::PutModelType ( enum AgEModelType pType ) {
    HRESULT _hr = put_ModelType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOModelArticPtr _IAgSaVOModel::GetArticulation ( ) {
    struct IAgVOModelArtic * _result = 0;
    HRESULT _hr = get_Articulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelArticPtr(_result, false);
}

IAgVOMarkerPtr _IAgSaVOModel::GetOrbitMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_OrbitMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

IAgVOMarkerPtr _IAgSaVOModel::GetGroundMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_GroundMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

VARIANT_BOOL _IAgSaVOModel::GetSolarPanelsPointAtSun ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SolarPanelsPointAtSun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSaVOModel::PutSolarPanelsPointAtSun ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SolarPanelsPointAtSun(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSaVOModel::GetIsPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSaVOModel::PutIsPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgSaVOModel::GetPointSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSaVOModel::PutPointSize ( const _variant_t & pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeEclipseBodies wrapper method implementations
//

VARIANT_BOOL _IAgVeEclipseBodies::GetUseCustomizedList ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseCustomizedList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEclipseBodies::PutUseCustomizedList ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseCustomizedList(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeEclipseBodies::GetAvailableCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeEclipseBodies::IsCentralBodyAssigned ( _bstr_t CentralBody ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsCentralBodyAssigned(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeEclipseBodies::GetAssignedCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeEclipseBodies::AssignCentralBody ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_AssignCentralBody(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeEclipseBodies::RemoveCentralBody ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_RemoveCentralBody(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeEclipseBodies::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeVector wrapper method implementations
//

STKUtil::IAgDirectionPtr _IAgVeVector::GetBody ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

_bstr_t _IAgVeVector::GetReferenceVector ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVector::PutReferenceVector ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceVector(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeVector::GetAvailableReferenceVectors ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableReferenceVectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeVector wrapper method implementations
//

STKUtil::IAgDirectionPtr IAgVeVector::GetBody ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

_bstr_t IAgVeVector::GetReferenceVector ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVector::PutReferenceVector ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceVector(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeVector::GetAvailableReferenceVectors ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableReferenceVectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeRateOffset wrapper method implementations
//

double _IAgVeRateOffset::GetRate ( ) {
    double _result = 0;
    HRESULT _hr = get_Rate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRateOffset::PutRate ( double pVal ) {
    HRESULT _hr = put_Rate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeRateOffset::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRateOffset::PutOffset ( double pVal ) {
    HRESULT _hr = put_Offset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeRateOffset wrapper method implementations
//

double IAgVeRateOffset::GetRate ( ) {
    double _result = 0;
    HRESULT _hr = get_Rate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeRateOffset::PutRate ( double pVal ) {
    HRESULT _hr = put_Rate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeRateOffset::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeRateOffset::PutOffset ( double pVal ) {
    HRESULT _hr = put_Offset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeProfileAlignedAndConstrained wrapper method implementations
//

_bstr_t _IAgVeProfileAlignedAndConstrained::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgVeVectorPtr _IAgVeProfileAlignedAndConstrained::GetAlignedVector ( ) {
    struct IAgVeVector * _result = 0;
    HRESULT _hr = get_AlignedVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVectorPtr(_result, false);
}

IAgVeVectorPtr _IAgVeProfileAlignedAndConstrained::GetConstrainedVector ( ) {
    struct IAgVeVector * _result = 0;
    HRESULT _hr = get_ConstrainedVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVectorPtr(_result, false);
}

//
// interface IAgVeAttProfile wrapper method implementations
//

_bstr_t IAgVeAttProfile::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgVeProfileAlignedAndConstrained wrapper method implementations
//

IAgVeVectorPtr IAgVeProfileAlignedAndConstrained::GetAlignedVector ( ) {
    struct IAgVeVector * _result = 0;
    HRESULT _hr = get_AlignedVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVectorPtr(_result, false);
}

IAgVeVectorPtr IAgVeProfileAlignedAndConstrained::GetConstrainedVector ( ) {
    struct IAgVeVector * _result = 0;
    HRESULT _hr = get_ConstrainedVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVectorPtr(_result, false);
}

//
// interface _IAgVeProfileInertial wrapper method implementations
//

_bstr_t _IAgVeProfileInertial::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

STKUtil::IAgOrientationPtr _IAgVeProfileInertial::GetInertial ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Inertial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

//
// interface IAgVeProfileInertial wrapper method implementations
//

STKUtil::IAgOrientationPtr IAgVeProfileInertial::GetInertial ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Inertial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

//
// interface _IAgVeProfileConstraintOffset wrapper method implementations
//

_bstr_t _IAgVeProfileConstraintOffset::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double _IAgVeProfileConstraintOffset::GetConstraintOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ConstraintOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfileConstraintOffset::PutConstraintOffset ( double pVal ) {
    HRESULT _hr = put_ConstraintOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeProfileConstraintOffset wrapper method implementations
//

double IAgVeProfileConstraintOffset::GetConstraintOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ConstraintOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfileConstraintOffset::PutConstraintOffset ( double pVal ) {
    HRESULT _hr = put_ConstraintOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeProfileFixedInAxes wrapper method implementations
//

_bstr_t _IAgVeProfileFixedInAxes::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

STKUtil::IAgOrientationPtr _IAgVeProfileFixedInAxes::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

_bstr_t _IAgVeProfileFixedInAxes::GetReferenceAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeProfileFixedInAxes::PutReferenceAxes ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceAxes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeProfileFixedInAxes::GetAvailableReferenceAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableReferenceAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeProfileFixedInAxes wrapper method implementations
//

STKUtil::IAgOrientationPtr IAgVeProfileFixedInAxes::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

_bstr_t IAgVeProfileFixedInAxes::GetReferenceAxes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeProfileFixedInAxes::PutReferenceAxes ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceAxes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeProfileFixedInAxes::GetAvailableReferenceAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableReferenceAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeProfilePrecessingSpin wrapper method implementations
//

_bstr_t _IAgVeProfilePrecessingSpin::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

STKUtil::IAgDirectionPtr _IAgVeProfilePrecessingSpin::GetBody ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

STKUtil::IAgDirectionPtr _IAgVeProfilePrecessingSpin::GetInertialPrecession ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_InertialPrecession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

IAgVeRateOffsetPtr _IAgVeProfilePrecessingSpin::GetPrecession ( ) {
    struct IAgVeRateOffset * _result = 0;
    HRESULT _hr = get_Precession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRateOffsetPtr(_result, false);
}

IAgVeRateOffsetPtr _IAgVeProfilePrecessingSpin::GetSpin ( ) {
    struct IAgVeRateOffset * _result = 0;
    HRESULT _hr = get_Spin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRateOffsetPtr(_result, false);
}

_variant_t _IAgVeProfilePrecessingSpin::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeProfilePrecessingSpin::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeProfilePrecessingSpin::GetNutationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_NutationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfilePrecessingSpin::PutNutationAngle ( double pVal ) {
    HRESULT _hr = put_NutationAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeProfilePrecessingSpin wrapper method implementations
//

STKUtil::IAgDirectionPtr IAgVeProfilePrecessingSpin::GetBody ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

STKUtil::IAgDirectionPtr IAgVeProfilePrecessingSpin::GetInertialPrecession ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_InertialPrecession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

IAgVeRateOffsetPtr IAgVeProfilePrecessingSpin::GetPrecession ( ) {
    struct IAgVeRateOffset * _result = 0;
    HRESULT _hr = get_Precession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRateOffsetPtr(_result, false);
}

IAgVeRateOffsetPtr IAgVeProfilePrecessingSpin::GetSpin ( ) {
    struct IAgVeRateOffset * _result = 0;
    HRESULT _hr = get_Spin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRateOffsetPtr(_result, false);
}

_variant_t IAgVeProfilePrecessingSpin::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeProfilePrecessingSpin::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeProfilePrecessingSpin::GetNutationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_NutationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfilePrecessingSpin::PutNutationAngle ( double pVal ) {
    HRESULT _hr = put_NutationAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeProfileSpinAligned wrapper method implementations
//

_bstr_t _IAgVeProfileSpinAligned::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

STKUtil::IAgDirectionPtr _IAgVeProfileSpinAligned::GetBody ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

IAgVeRateOffsetPtr _IAgVeProfileSpinAligned::GetPrecession ( ) {
    struct IAgVeRateOffset * _result = 0;
    HRESULT _hr = get_Precession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRateOffsetPtr(_result, false);
}

IAgVeRateOffsetPtr _IAgVeProfileSpinAligned::GetSpin ( ) {
    struct IAgVeRateOffset * _result = 0;
    HRESULT _hr = get_Spin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRateOffsetPtr(_result, false);
}

_variant_t _IAgVeProfileSpinAligned::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeProfileSpinAligned::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeProfileSpinAligned::GetNutationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_NutationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfileSpinAligned::PutNutationAngle ( double pVal ) {
    HRESULT _hr = put_NutationAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeProfileSpinAligned::GetReferenceVector ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeProfileSpinAligned::PutReferenceVector ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceVector(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeProfileSpinAligned::GetAvailableReferenceVectors ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableReferenceVectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeProfileSpinAligned wrapper method implementations
//

STKUtil::IAgDirectionPtr IAgVeProfileSpinAligned::GetBody ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

IAgVeRateOffsetPtr IAgVeProfileSpinAligned::GetPrecession ( ) {
    struct IAgVeRateOffset * _result = 0;
    HRESULT _hr = get_Precession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRateOffsetPtr(_result, false);
}

IAgVeRateOffsetPtr IAgVeProfileSpinAligned::GetSpin ( ) {
    struct IAgVeRateOffset * _result = 0;
    HRESULT _hr = get_Spin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRateOffsetPtr(_result, false);
}

_variant_t IAgVeProfileSpinAligned::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeProfileSpinAligned::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeProfileSpinAligned::GetNutationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_NutationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfileSpinAligned::PutNutationAngle ( double pVal ) {
    HRESULT _hr = put_NutationAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeProfileSpinAligned::GetReferenceVector ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeProfileSpinAligned::PutReferenceVector ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceVector(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVeProfileSpinAligned::GetAvailableReferenceVectors ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableReferenceVectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeProfileSpinAboutXXX wrapper method implementations
//

_bstr_t _IAgVeProfileSpinAboutXXX::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double _IAgVeProfileSpinAboutXXX::GetRate ( ) {
    double _result = 0;
    HRESULT _hr = get_Rate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfileSpinAboutXXX::PutRate ( double pVal ) {
    HRESULT _hr = put_Rate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeProfileSpinAboutXXX::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfileSpinAboutXXX::PutOffset ( double pVal ) {
    HRESULT _hr = put_Offset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeProfileSpinAboutXXX::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeProfileSpinAboutXXX::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeProfileSpinAboutXXX wrapper method implementations
//

double IAgVeProfileSpinAboutXXX::GetRate ( ) {
    double _result = 0;
    HRESULT _hr = get_Rate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfileSpinAboutXXX::PutRate ( double pVal ) {
    HRESULT _hr = put_Rate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeProfileSpinAboutXXX::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfileSpinAboutXXX::PutOffset ( double pVal ) {
    HRESULT _hr = put_Offset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeProfileSpinAboutXXX::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeProfileSpinAboutXXX::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeProfileSpinning wrapper method implementations
//

_bstr_t _IAgVeProfileSpinning::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

STKUtil::IAgDirectionPtr _IAgVeProfileSpinning::GetBody ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

STKUtil::IAgDirectionPtr _IAgVeProfileSpinning::GetInertial ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Inertial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

double _IAgVeProfileSpinning::GetRate ( ) {
    double _result = 0;
    HRESULT _hr = get_Rate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfileSpinning::PutRate ( double pVal ) {
    HRESULT _hr = put_Rate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeProfileSpinning::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfileSpinning::PutOffset ( double pVal ) {
    HRESULT _hr = put_Offset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeProfileSpinning::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeProfileSpinning::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeProfileSpinning wrapper method implementations
//

STKUtil::IAgDirectionPtr IAgVeProfileSpinning::GetBody ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

STKUtil::IAgDirectionPtr IAgVeProfileSpinning::GetInertial ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Inertial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

double IAgVeProfileSpinning::GetRate ( ) {
    double _result = 0;
    HRESULT _hr = get_Rate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfileSpinning::PutRate ( double pVal ) {
    HRESULT _hr = put_Rate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeProfileSpinning::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfileSpinning::PutOffset ( double pVal ) {
    HRESULT _hr = put_Offset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeProfileSpinning::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeProfileSpinning::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeProfileAlignmentOffset wrapper method implementations
//

_bstr_t _IAgVeProfileAlignmentOffset::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double _IAgVeProfileAlignmentOffset::GetAlignmentOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_AlignmentOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfileAlignmentOffset::PutAlignmentOffset ( double pVal ) {
    HRESULT _hr = put_AlignmentOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeProfileAlignmentOffset wrapper method implementations
//

double IAgVeProfileAlignmentOffset::GetAlignmentOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_AlignmentOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfileAlignmentOffset::PutAlignmentOffset ( double pVal ) {
    HRESULT _hr = put_AlignmentOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeAccessAdvanced wrapper method implementations
//

VARIANT_BOOL IAgVeAccessAdvanced::GetUseLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAccessAdvanced::PutUseLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEIvTimeSense IAgVeAccessAdvanced::GetTimeSense ( ) {
    enum AgEIvTimeSense _result;
    HRESULT _hr = get_TimeSense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAccessAdvanced::PutTimeSense ( enum AgEIvTimeSense pVal ) {
    HRESULT _hr = put_TimeSense(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeDuration wrapper method implementations
//

double _IAgVeDuration::GetLookAhead ( ) {
    double _result = 0;
    HRESULT _hr = get_LookAhead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeDuration::PutLookAhead ( double pVal ) {
    HRESULT _hr = put_LookAhead(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeDuration::GetLookBehind ( ) {
    double _result = 0;
    HRESULT _hr = get_LookBehind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeDuration::PutLookBehind ( double pVal ) {
    HRESULT _hr = put_LookBehind(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeDuration wrapper method implementations
//

double IAgVeDuration::GetLookAhead ( ) {
    double _result = 0;
    HRESULT _hr = get_LookAhead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeDuration::PutLookAhead ( double pVal ) {
    HRESULT _hr = put_LookAhead(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeDuration::GetLookBehind ( ) {
    double _result = 0;
    HRESULT _hr = get_LookBehind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeDuration::PutLookBehind ( double pVal ) {
    HRESULT _hr = put_LookBehind(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeStandardBasic wrapper method implementations
//

enum AgEVeProfile _IAgVeStandardBasic::GetProfileType ( ) {
    enum AgEVeProfile _result;
    HRESULT _hr = get_ProfileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeStandardBasic::SetProfileType ( enum AgEVeProfile Profile ) {
    HRESULT _hr = raw_SetProfileType(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeStandardBasic::IsProfileTypeSupported ( enum AgEVeProfile Profile ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsProfileTypeSupported(Profile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeStandardBasic::GetProfileSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ProfileSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttProfilePtr _IAgVeStandardBasic::GetProfile ( ) {
    struct IAgVeAttProfile * _result = 0;
    HRESULT _hr = get_Profile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttProfilePtr(_result, false);
}

//
// interface IAgVeStandardBasic wrapper method implementations
//

enum AgEVeProfile IAgVeStandardBasic::GetProfileType ( ) {
    enum AgEVeProfile _result;
    HRESULT _hr = get_ProfileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeStandardBasic::SetProfileType ( enum AgEVeProfile Profile ) {
    HRESULT _hr = raw_SetProfileType(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeStandardBasic::IsProfileTypeSupported ( enum AgEVeProfile Profile ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsProfileTypeSupported(Profile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeStandardBasic::GetProfileSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ProfileSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttProfilePtr IAgVeStandardBasic::GetProfile ( ) {
    struct IAgVeAttProfile * _result = 0;
    HRESULT _hr = get_Profile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttProfilePtr(_result, false);
}

//
// interface _IAgVeAttExternal wrapper method implementations
//

VARIANT_BOOL _IAgVeAttExternal::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgVeAttExternal::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgVeAttExternal::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t _IAgVeAttExternal::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT _IAgVeAttExternal::Reload ( ) {
    HRESULT _hr = raw_Reload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeAttExternal::Load ( _bstr_t Filename ) {
    HRESULT _hr = raw_Load(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeAttExternal::Disable ( ) {
    HRESULT _hr = raw_Disable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeAttExternal wrapper method implementations
//

VARIANT_BOOL IAgVeAttExternal::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IAgVeAttExternal::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgVeAttExternal::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t IAgVeAttExternal::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IAgVeAttExternal::Reload ( ) {
    HRESULT _hr = raw_Reload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeAttExternal::Load ( _bstr_t Filename ) {
    HRESULT _hr = raw_Load(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeAttExternal::Disable ( ) {
    HRESULT _hr = raw_Disable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeAttitudeRealTimeDataReference wrapper method implementations
//

enum AgEVeProfile IAgVeAttitudeRealTimeDataReference::GetProfileType ( ) {
    enum AgEVeProfile _result;
    HRESULT _hr = get_ProfileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeAttitudeRealTimeDataReference::SetProfileType ( enum AgEVeProfile Profile ) {
    HRESULT _hr = raw_SetProfileType(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeAttitudeRealTimeDataReference::IsProfileTypeSupported ( enum AgEVeProfile Profile ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsProfileTypeSupported(Profile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeAttitudeRealTimeDataReference::GetProfileSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ProfileSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttProfilePtr IAgVeAttitudeRealTimeDataReference::GetProfile ( ) {
    struct IAgVeAttProfile * _result = 0;
    HRESULT _hr = get_Profile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttProfilePtr(_result, false);
}

//
// interface _IAgVeAttitudeRealTime wrapper method implementations
//

HRESULT _IAgVeAttitudeRealTime::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEVeLookAheadMethod _IAgVeAttitudeRealTime::GetLookAheadMethod ( ) {
    enum AgEVeLookAheadMethod _result;
    HRESULT _hr = get_LookAheadMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAttitudeRealTime::PutLookAheadMethod ( enum AgEVeLookAheadMethod pVal ) {
    HRESULT _hr = put_LookAheadMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeDurationPtr _IAgVeAttitudeRealTime::GetDuration ( ) {
    struct IAgVeDuration * _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeDurationPtr(_result, false);
}

HRESULT _IAgVeAttitudeRealTime::AddCBFQuaternion ( const _variant_t & Time, double Q1, double Q2, double Q3, double Q4 ) {
    HRESULT _hr = raw_AddCBFQuaternion(Time, Q1, Q2, Q3, Q4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeAttitudeRealTime::AddQuaternion ( const _variant_t & Time, double Q1, double Q2, double Q3, double Q4 ) {
    HRESULT _hr = raw_AddQuaternion(Time, Q1, Q2, Q3, Q4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeAttitudeRealTime::AddYPR ( const _variant_t & Time, _bstr_t Sequence, double Yaw, double Pitch, double Roll ) {
    HRESULT _hr = raw_AddYPR(Time, Sequence, Yaw, Pitch, Roll);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeAttitudeRealTime::AddECIYPR ( const _variant_t & Time, _bstr_t Sequence, double Yaw, double Pitch, double Roll ) {
    HRESULT _hr = raw_AddECIYPR(Time, Sequence, Yaw, Pitch, Roll);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeAttitudeRealTime::AddEuler ( const _variant_t & Time, _bstr_t Sequence, double Angle1, double Angle2, double Angle3 ) {
    HRESULT _hr = raw_AddEuler(Time, Sequence, Angle1, Angle2, Angle3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeAttitudeRealTime::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeAttitudeRealTimeDataReferencePtr _IAgVeAttitudeRealTime::GetDataReference ( ) {
    struct IAgVeAttitudeRealTimeDataReference * _result = 0;
    HRESULT _hr = get_DataReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeRealTimeDataReferencePtr(_result, false);
}

int _IAgVeAttitudeRealTime::GetBlockFactor ( ) {
    int _result = 0;
    HRESULT _hr = get_BlockFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAttitudeRealTime::PutBlockFactor ( int pVal ) {
    HRESULT _hr = put_BlockFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeAttitudeRealTime wrapper method implementations
//

HRESULT IAgVeAttitudeRealTime::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEVeLookAheadMethod IAgVeAttitudeRealTime::GetLookAheadMethod ( ) {
    enum AgEVeLookAheadMethod _result;
    HRESULT _hr = get_LookAheadMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAttitudeRealTime::PutLookAheadMethod ( enum AgEVeLookAheadMethod pVal ) {
    HRESULT _hr = put_LookAheadMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeDurationPtr IAgVeAttitudeRealTime::GetDuration ( ) {
    struct IAgVeDuration * _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeDurationPtr(_result, false);
}

HRESULT IAgVeAttitudeRealTime::AddCBFQuaternion ( const _variant_t & Time, double Q1, double Q2, double Q3, double Q4 ) {
    HRESULT _hr = raw_AddCBFQuaternion(Time, Q1, Q2, Q3, Q4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeAttitudeRealTime::AddQuaternion ( const _variant_t & Time, double Q1, double Q2, double Q3, double Q4 ) {
    HRESULT _hr = raw_AddQuaternion(Time, Q1, Q2, Q3, Q4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeAttitudeRealTime::AddYPR ( const _variant_t & Time, _bstr_t Sequence, double Yaw, double Pitch, double Roll ) {
    HRESULT _hr = raw_AddYPR(Time, Sequence, Yaw, Pitch, Roll);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeAttitudeRealTime::AddECIYPR ( const _variant_t & Time, _bstr_t Sequence, double Yaw, double Pitch, double Roll ) {
    HRESULT _hr = raw_AddECIYPR(Time, Sequence, Yaw, Pitch, Roll);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeAttitudeRealTime::AddEuler ( const _variant_t & Time, _bstr_t Sequence, double Angle1, double Angle2, double Angle3 ) {
    HRESULT _hr = raw_AddEuler(Time, Sequence, Angle1, Angle2, Angle3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeAttitudeRealTime::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeAttitudeRealTimeDataReferencePtr IAgVeAttitudeRealTime::GetDataReference ( ) {
    struct IAgVeAttitudeRealTimeDataReference * _result = 0;
    HRESULT _hr = get_DataReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeRealTimeDataReferencePtr(_result, false);
}

int IAgVeAttitudeRealTime::GetBlockFactor ( ) {
    int _result = 0;
    HRESULT _hr = get_BlockFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAttitudeRealTime::PutBlockFactor ( int pVal ) {
    HRESULT _hr = put_BlockFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeProfileCoordinatedTurn wrapper method implementations
//

_bstr_t _IAgVeProfileCoordinatedTurn::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double _IAgVeProfileCoordinatedTurn::GetTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfileCoordinatedTurn::PutTimeOffset ( double pVal ) {
    HRESULT _hr = put_TimeOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeProfileCoordinatedTurn wrapper method implementations
//

double IAgVeProfileCoordinatedTurn::GetTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfileCoordinatedTurn::PutTimeOffset ( double pVal ) {
    HRESULT _hr = put_TimeOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeProfileYawToNadir wrapper method implementations
//

_bstr_t _IAgVeProfileYawToNadir::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

STKUtil::IAgDirectionPtr _IAgVeProfileYawToNadir::GetInertial ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Inertial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface IAgVeProfileYawToNadir wrapper method implementations
//

STKUtil::IAgDirectionPtr IAgVeProfileYawToNadir::GetInertial ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_Inertial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

//
// interface _IAgVeTorque wrapper method implementations
//

VARIANT_BOOL _IAgVeTorque::GetUseTorqueFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTorqueFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeTorque::PutUseTorqueFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTorqueFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeTorque::GetTorqueFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TorqueFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeTorque::PutTorqueFile ( _bstr_t pVal ) {
    HRESULT _hr = put_TorqueFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeTorque wrapper method implementations
//

VARIANT_BOOL IAgVeTorque::GetUseTorqueFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTorqueFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeTorque::PutUseTorqueFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTorqueFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeTorque::GetTorqueFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TorqueFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeTorque::PutTorqueFile ( _bstr_t pVal ) {
    HRESULT _hr = put_TorqueFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeIntegratedAttitude wrapper method implementations
//

_variant_t _IAgVeIntegratedAttitude::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeIntegratedAttitude::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeIntegratedAttitude::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeIntegratedAttitude::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeIntegratedAttitude::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeIntegratedAttitude::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr _IAgVeIntegratedAttitude::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

double _IAgVeIntegratedAttitude::GetWx ( ) {
    double _result = 0;
    HRESULT _hr = get_Wx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeIntegratedAttitude::PutWx ( double pVal ) {
    HRESULT _hr = put_Wx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeIntegratedAttitude::GetWy ( ) {
    double _result = 0;
    HRESULT _hr = get_Wy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeIntegratedAttitude::PutWy ( double pVal ) {
    HRESULT _hr = put_Wy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeIntegratedAttitude::GetWz ( ) {
    double _result = 0;
    HRESULT _hr = get_Wz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeIntegratedAttitude::PutWz ( double pVal ) {
    HRESULT _hr = put_Wz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeIntegratedAttitude::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeIntegratedAttitude::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeTorquePtr _IAgVeIntegratedAttitude::GetTorque ( ) {
    struct IAgVeTorque * _result = 0;
    HRESULT _hr = get_Torque(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTorquePtr(_result, false);
}

HRESULT _IAgVeIntegratedAttitude::Run ( ) {
    HRESULT _hr = raw_Run();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeIntegratedAttitude::InitFromAtt ( ) {
    HRESULT _hr = raw_InitFromAtt();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeIntegratedAttitude::SaveToFile ( _bstr_t Filename ) {
    HRESULT _hr = raw_SaveToFile(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeIntegratedAttitude wrapper method implementations
//

_variant_t IAgVeIntegratedAttitude::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeIntegratedAttitude::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeIntegratedAttitude::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeIntegratedAttitude::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeIntegratedAttitude::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeIntegratedAttitude::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr IAgVeIntegratedAttitude::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

double IAgVeIntegratedAttitude::GetWx ( ) {
    double _result = 0;
    HRESULT _hr = get_Wx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeIntegratedAttitude::PutWx ( double pVal ) {
    HRESULT _hr = put_Wx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeIntegratedAttitude::GetWy ( ) {
    double _result = 0;
    HRESULT _hr = get_Wy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeIntegratedAttitude::PutWy ( double pVal ) {
    HRESULT _hr = put_Wy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeIntegratedAttitude::GetWz ( ) {
    double _result = 0;
    HRESULT _hr = get_Wz(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeIntegratedAttitude::PutWz ( double pVal ) {
    HRESULT _hr = put_Wz(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeIntegratedAttitude::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeIntegratedAttitude::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeTorquePtr IAgVeIntegratedAttitude::GetTorque ( ) {
    struct IAgVeTorque * _result = 0;
    HRESULT _hr = get_Torque(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTorquePtr(_result, false);
}

HRESULT IAgVeIntegratedAttitude::Run ( ) {
    HRESULT _hr = raw_Run();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeIntegratedAttitude::InitFromAtt ( ) {
    HRESULT _hr = raw_InitFromAtt();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeIntegratedAttitude::SaveToFile ( _bstr_t Filename ) {
    HRESULT _hr = raw_SaveToFile(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeAttitudeStandard wrapper method implementations
//

enum AgEAttitudeStandardType IAgVeAttitudeStandard::GetType ( ) {
    enum AgEAttitudeStandardType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeRouteAttitudeStandard wrapper method implementations
//

enum AgEAttitudeStandardType _IAgVeRouteAttitudeStandard::GetType ( ) {
    enum AgEAttitudeStandardType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeStandardBasicPtr _IAgVeRouteAttitudeStandard::GetBasic ( ) {
    struct IAgVeStandardBasic * _result = 0;
    HRESULT _hr = get_Basic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStandardBasicPtr(_result, false);
}

IAgVeAttExternalPtr _IAgVeRouteAttitudeStandard::GetExternal ( ) {
    struct IAgVeAttExternal * _result = 0;
    HRESULT _hr = get_External(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttExternalPtr(_result, false);
}

//
// interface IAgVeRouteAttitudeStandard wrapper method implementations
//

IAgVeStandardBasicPtr IAgVeRouteAttitudeStandard::GetBasic ( ) {
    struct IAgVeStandardBasic * _result = 0;
    HRESULT _hr = get_Basic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStandardBasicPtr(_result, false);
}

IAgVeAttExternalPtr IAgVeRouteAttitudeStandard::GetExternal ( ) {
    struct IAgVeAttExternal * _result = 0;
    HRESULT _hr = get_External(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttExternalPtr(_result, false);
}

//
// interface _IAgVeGfxLine wrapper method implementations
//

enum STKUtil::AgELineStyle _IAgVeGfxLine::GetStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLine::PutStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeGfxLine::GetWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLine::PutWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxLine wrapper method implementations
//

enum STKUtil::AgELineStyle IAgVeGfxLine::GetStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLine::PutStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeGfxLine::GetWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLine::PutWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxAttributesBasic wrapper method implementations
//

VARIANT_BOOL IAgVeGfxAttributesBasic::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesBasic::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxAttributesBasic::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesBasic::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeGfxAttributesBasic::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesBasic::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxAttributesBasic::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxAttributesBasic::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxAttributesBasic::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesBasic::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxLinePtr IAgVeGfxAttributesBasic::GetLine ( ) {
    struct IAgVeGfxLine * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLinePtr(_result, false);
}

//
// interface IAgVeGfxInterval wrapper method implementations
//

IAgVeGfxAttributesBasicPtr IAgVeGfxInterval::GetGfxAttributes ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_GfxAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

_variant_t IAgVeGfxInterval::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeGfxInterval::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeGfxInterval::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeGfxInterval::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxIntervalsCollection wrapper method implementations
//

long IAgVeGfxIntervalsCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxIntervalPtr IAgVeGfxIntervalsCollection::GetItem ( long Index ) {
    struct IAgVeGfxInterval * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxIntervalPtr(_result, false);
}

IUnknownPtr IAgVeGfxIntervalsCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeGfxIntervalsCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeGfxIntervalsCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeGfxIntervalPtr IAgVeGfxIntervalsCollection::Add ( const _variant_t & Start, const _variant_t & Stop ) {
    struct IAgVeGfxInterval * _result = 0;
    HRESULT _hr = raw_Add(Start, Stop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxIntervalPtr(_result, false);
}

//
// interface _IAgVeGfxAttributesCustom wrapper method implementations
//

IAgVeGfxAttributesBasicPtr _IAgVeGfxAttributesCustom::GetDefault ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxIntervalsCollectionPtr _IAgVeGfxAttributesCustom::GetIntervals ( ) {
    struct IAgVeGfxIntervalsCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxIntervalsCollectionPtr(_result, false);
}

HRESULT _IAgVeGfxAttributesCustom::Deconflict ( ) {
    HRESULT _hr = raw_Deconflict();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeGfxAttributesCustom::GetPreemptiveIntervals ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreemptiveIntervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesCustom::PutPreemptiveIntervals ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PreemptiveIntervals(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxAttributesCustom wrapper method implementations
//

IAgVeGfxAttributesBasicPtr IAgVeGfxAttributesCustom::GetDefault ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxIntervalsCollectionPtr IAgVeGfxAttributesCustom::GetIntervals ( ) {
    struct IAgVeGfxIntervalsCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxIntervalsCollectionPtr(_result, false);
}

HRESULT IAgVeGfxAttributesCustom::Deconflict ( ) {
    HRESULT _hr = raw_Deconflict();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeGfxAttributesCustom::GetPreemptiveIntervals ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreemptiveIntervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesCustom::PutPreemptiveIntervals ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PreemptiveIntervals(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxAttributesRealtime wrapper method implementations
//

IAgVeGfxAttributesBasicPtr _IAgVeGfxAttributesRealtime::GetHistory ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_History(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr _IAgVeGfxAttributesRealtime::GetSpline ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_Spline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr _IAgVeGfxAttributesRealtime::GetLookAhead ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_LookAhead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr _IAgVeGfxAttributesRealtime::GetDropOut ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_DropOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

//
// interface IAgVeGfxAttributesRealtime wrapper method implementations
//

IAgVeGfxAttributesBasicPtr IAgVeGfxAttributesRealtime::GetHistory ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_History(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr IAgVeGfxAttributesRealtime::GetSpline ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_Spline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr IAgVeGfxAttributesRealtime::GetLookAhead ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_LookAhead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr IAgVeGfxAttributesRealtime::GetDropOut ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_DropOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

//
// interface _IAgVeGfxLightingElement wrapper method implementations
//

VARIANT_BOOL _IAgVeGfxLightingElement::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLightingElement::PutVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Visible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeGfxLightingElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLightingElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxLightingElement::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxLightingElement::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeGfxLightingElement::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLightingElement::PutLineStyle ( enum STKUtil::AgELineStyle ppVal ) {
    HRESULT _hr = put_LineStyle(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeGfxLightingElement::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLightingElement::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxLighting wrapper method implementations
//

IAgVeGfxLightingElementPtr _IAgVeGfxLighting::GetSunlight ( ) {
    struct IAgVeGfxLightingElement * _result = 0;
    HRESULT _hr = get_Sunlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingElementPtr(_result, false);
}

IAgVeGfxLightingElementPtr _IAgVeGfxLighting::GetPenumbra ( ) {
    struct IAgVeGfxLightingElement * _result = 0;
    HRESULT _hr = get_Penumbra(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingElementPtr(_result, false);
}

IAgVeGfxLightingElementPtr _IAgVeGfxLighting::GetUmbra ( ) {
    struct IAgVeGfxLightingElement * _result = 0;
    HRESULT _hr = get_Umbra(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingElementPtr(_result, false);
}

VARIANT_BOOL _IAgVeGfxLighting::GetIsSunLightPenumbraVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSunLightPenumbraVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLighting::PutIsSunLightPenumbraVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsSunLightPenumbraVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxLighting::GetIsPenumbraUmbraVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPenumbraUmbraVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLighting::PutIsPenumbraUmbraVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPenumbraUmbraVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxLighting::GetIsSolarSpecularReflectionPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSolarSpecularReflectionPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLighting::PutIsSolarSpecularReflectionPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsSolarSpecularReflectionPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxElevationGroundElevation wrapper method implementations
//

double _IAgVeGfxElevationGroundElevation::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationGroundElevation::PutAngle ( double pVal ) {
    HRESULT _hr = put_Angle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxElevationGroundElevation wrapper method implementations
//

double IAgVeGfxElevationGroundElevation::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationGroundElevation::PutAngle ( double pVal ) {
    HRESULT _hr = put_Angle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxElevationSwathHalfWidth wrapper method implementations
//

double _IAgVeGfxElevationSwathHalfWidth::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationSwathHalfWidth::PutDistance ( double pVal ) {
    HRESULT _hr = put_Distance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxElevationSwathHalfWidth wrapper method implementations
//

double IAgVeGfxElevationSwathHalfWidth::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationSwathHalfWidth::PutDistance ( double pVal ) {
    HRESULT _hr = put_Distance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxElevationVehicleHalfAngle wrapper method implementations
//

double _IAgVeGfxElevationVehicleHalfAngle::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationVehicleHalfAngle::PutAngle ( double pVal ) {
    HRESULT _hr = put_Angle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxElevationVehicleHalfAngle wrapper method implementations
//

double IAgVeGfxElevationVehicleHalfAngle::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxElevationVehicleHalfAngle::PutAngle ( double pVal ) {
    HRESULT _hr = put_Angle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxSwath wrapper method implementations
//

enum AgEVeGfxElevation _IAgVeGfxSwath::GetElevationType ( ) {
    enum AgEVeGfxElevation _result;
    HRESULT _hr = get_ElevationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeGfxSwath::SetElevationType ( enum AgEVeGfxElevation Elevation ) {
    HRESULT _hr = raw_SetElevationType(Elevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeGfxSwath::IsElevationTypeSupported ( enum AgEVeGfxElevation Elevation ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsElevationTypeSupported(Elevation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeGfxSwath::GetElevationSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ElevationSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxElevationPtr _IAgVeGfxSwath::GetElevation ( ) {
    struct IAgVeGfxElevation * _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevationPtr(_result, false);
}

enum AgEVeGfxOptions _IAgVeGfxSwath::GetOptions ( ) {
    enum AgEVeGfxOptions _result;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxSwath::PutOptions ( enum AgEVeGfxOptions pVal ) {
    HRESULT _hr = put_Options(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxLeadDataFraction wrapper method implementations
//

double _IAgVeGfxLeadDataFraction::GetFraction ( ) {
    double _result = 0;
    HRESULT _hr = get_Fraction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLeadDataFraction::PutFraction ( double pVal ) {
    HRESULT _hr = put_Fraction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxLeadDataFraction wrapper method implementations
//

double IAgVeGfxLeadDataFraction::GetFraction ( ) {
    double _result = 0;
    HRESULT _hr = get_Fraction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLeadDataFraction::PutFraction ( double pVal ) {
    HRESULT _hr = put_Fraction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxLeadDataTime wrapper method implementations
//

double _IAgVeGfxLeadDataTime::GetTime ( ) {
    double _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxLeadDataTime::PutTime ( double pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxLeadDataTime wrapper method implementations
//

double IAgVeGfxLeadDataTime::GetTime ( ) {
    double _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxLeadDataTime::PutTime ( double pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxTrailDataFraction wrapper method implementations
//

double _IAgVeGfxTrailDataFraction::GetFraction ( ) {
    double _result = 0;
    HRESULT _hr = get_Fraction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTrailDataFraction::PutFraction ( double pVal ) {
    HRESULT _hr = put_Fraction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxTrailDataFraction wrapper method implementations
//

double IAgVeGfxTrailDataFraction::GetFraction ( ) {
    double _result = 0;
    HRESULT _hr = get_Fraction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTrailDataFraction::PutFraction ( double pVal ) {
    HRESULT _hr = put_Fraction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxTrailDataTime wrapper method implementations
//

double _IAgVeGfxTrailDataTime::GetTime ( ) {
    double _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTrailDataTime::PutTime ( double pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxTrailDataTime wrapper method implementations
//

double IAgVeGfxTrailDataTime::GetTime ( ) {
    double _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTrailDataTime::PutTime ( double pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxRoutePassData wrapper method implementations
//

IAgVeGfxLeadTrailDataPtr _IAgVeGfxRoutePassData::GetRoute ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

//
// interface IAgVeGfxRoutePassData wrapper method implementations
//

IAgVeGfxLeadTrailDataPtr IAgVeGfxRoutePassData::GetRoute ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

//
// interface _IAgVeGfxLeadTrailData wrapper method implementations
//

enum AgELeadTrailData _IAgVeGfxLeadTrailData::GetLeadDataType ( ) {
    enum AgELeadTrailData _result;
    HRESULT _hr = get_LeadDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeGfxLeadTrailData::SetLeadDataType ( enum AgELeadTrailData LeadData ) {
    HRESULT _hr = raw_SetLeadDataType(LeadData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeGfxLeadTrailData::IsLeadDataTypeSupported ( enum AgELeadTrailData LeadData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLeadDataTypeSupported(LeadData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeGfxLeadTrailData::GetLeadDataSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_LeadDataSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeLeadTrailDataPtr _IAgVeGfxLeadTrailData::GetLeadData ( ) {
    struct IAgVeLeadTrailData * _result = 0;
    HRESULT _hr = get_LeadData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLeadTrailDataPtr(_result, false);
}

enum AgELeadTrailData _IAgVeGfxLeadTrailData::GetTrailDataType ( ) {
    enum AgELeadTrailData _result;
    HRESULT _hr = get_TrailDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeGfxLeadTrailData::SetTrailDataType ( enum AgELeadTrailData TrailData ) {
    HRESULT _hr = raw_SetTrailDataType(TrailData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeGfxLeadTrailData::IsTrailDataTypeSupported ( enum AgELeadTrailData TrailData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrailDataTypeSupported(TrailData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeGfxLeadTrailData::GetTrailDataSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TrailDataSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeLeadTrailDataPtr _IAgVeGfxLeadTrailData::GetTrailData ( ) {
    struct IAgVeLeadTrailData * _result = 0;
    HRESULT _hr = get_TrailData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLeadTrailDataPtr(_result, false);
}

VARIANT_BOOL _IAgVeGfxLeadTrailData::GetHasLeadData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeadData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeGfxLeadTrailData::GetHasTrailData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTrailData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeGfxLeadTrailData::SetTrailSameAsLead ( ) {
    HRESULT _hr = raw_SetTrailSameAsLead();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeGfxOrbitPassData wrapper method implementations
//

IAgVeGfxLeadTrailDataPtr _IAgVeGfxOrbitPassData::GetGroundTrack ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

IAgVeGfxLeadTrailDataPtr _IAgVeGfxOrbitPassData::GetOrbit ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

//
// interface _IAgVeGfxTrajectoryPassData wrapper method implementations
//

IAgVeGfxLeadTrailDataPtr _IAgVeGfxTrajectoryPassData::GetGroundTrack ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

IAgVeGfxLeadTrailDataPtr _IAgVeGfxTrajectoryPassData::GetTrajectory ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

//
// interface IAgVeGfxTrajectoryPassData wrapper method implementations
//

IAgVeGfxLeadTrailDataPtr IAgVeGfxTrajectoryPassData::GetGroundTrack ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

IAgVeGfxLeadTrailDataPtr IAgVeGfxTrajectoryPassData::GetTrajectory ( ) {
    struct IAgVeGfxLeadTrailData * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLeadTrailDataPtr(_result, false);
}

//
// interface _IAgVeGfxTrajectoryResolution wrapper method implementations
//

double _IAgVeGfxTrajectoryResolution::GetGroundTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTrajectoryResolution::PutGroundTrack ( double pVal ) {
    HRESULT _hr = put_GroundTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGfxTrajectoryResolution::GetTrajectory ( ) {
    double _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTrajectoryResolution::PutTrajectory ( double pVal ) {
    HRESULT _hr = put_Trajectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGfxTrajectoryResolution::GetMinGroundTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_MinGroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTrajectoryResolution::PutMinGroundTrack ( double pVal ) {
    HRESULT _hr = put_MinGroundTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGfxTrajectoryResolution::GetMinTrajectory ( ) {
    double _result = 0;
    HRESULT _hr = get_MinTrajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTrajectoryResolution::PutMinTrajectory ( double pVal ) {
    HRESULT _hr = put_MinTrajectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxTrajectoryResolution wrapper method implementations
//

double IAgVeGfxTrajectoryResolution::GetGroundTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTrajectoryResolution::PutGroundTrack ( double pVal ) {
    HRESULT _hr = put_GroundTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGfxTrajectoryResolution::GetTrajectory ( ) {
    double _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTrajectoryResolution::PutTrajectory ( double pVal ) {
    HRESULT _hr = put_Trajectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGfxTrajectoryResolution::GetMinGroundTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_MinGroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTrajectoryResolution::PutMinGroundTrack ( double pVal ) {
    HRESULT _hr = put_MinGroundTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGfxTrajectoryResolution::GetMinTrajectory ( ) {
    double _result = 0;
    HRESULT _hr = get_MinTrajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTrajectoryResolution::PutMinTrajectory ( double pVal ) {
    HRESULT _hr = put_MinTrajectory(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxTimeEventTypeLine wrapper method implementations
//

_variant_t _IAgVeGfxTimeEventTypeLine::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeGfxTimeEventTypeLine::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeGfxTimeEventTypeLine::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeGfxTimeEventTypeLine::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeGfxTimeEventTypeLine::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTimeEventTypeLine::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeGfxTimeEventTypeLine::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTimeEventTypeLine::PutLineStyle ( enum STKUtil::AgELineStyle ppVal ) {
    HRESULT _hr = put_LineStyle(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeGfxTimeEventTypeLine::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTimeEventTypeLine::PutLineWidth ( enum AgELineWidth ppVal ) {
    HRESULT _hr = put_LineWidth(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxTimeEventTypeLine::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxTimeEventTypeLine::PutUniqueID ( _bstr_t pVal ) {
    HRESULT _hr = put_UniqueID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGfxOffset _IAgVeGfxTimeEventTypeLine::GetOffsetType ( ) {
    enum AgEVeGfxOffset _result;
    HRESULT _hr = get_OffsetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeGfxTimeEventTypeLine::SetOffsetType ( enum AgEVeGfxOffset Offset ) {
    HRESULT _hr = raw_SetOffsetType(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeGfxTimeEventTypeLine::IsOffsetTypeSupported ( enum AgEVeGfxOffset Offset ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsOffsetTypeSupported(Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeGfxTimeEventTypeLine::GetOffsetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_OffsetSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long _IAgVeGfxTimeEventTypeLine::GetOffsetPixels ( ) {
    long _result = 0;
    HRESULT _hr = get_OffsetPixels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTimeEventTypeLine::PutOffsetPixels ( long pVal ) {
    HRESULT _hr = put_OffsetPixels(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxTimeEventTypeLine wrapper method implementations
//

_variant_t IAgVeGfxTimeEventTypeLine::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeGfxTimeEventTypeLine::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeGfxTimeEventTypeLine::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeGfxTimeEventTypeLine::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeGfxTimeEventTypeLine::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTimeEventTypeLine::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgVeGfxTimeEventTypeLine::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTimeEventTypeLine::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeGfxTimeEventTypeLine::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTimeEventTypeLine::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxTimeEventTypeLine::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxTimeEventTypeLine::PutUniqueID ( _bstr_t pVal ) {
    HRESULT _hr = put_UniqueID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGfxOffset IAgVeGfxTimeEventTypeLine::GetOffsetType ( ) {
    enum AgEVeGfxOffset _result;
    HRESULT _hr = get_OffsetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeGfxTimeEventTypeLine::SetOffsetType ( enum AgEVeGfxOffset Offset ) {
    HRESULT _hr = raw_SetOffsetType(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeGfxTimeEventTypeLine::IsOffsetTypeSupported ( enum AgEVeGfxOffset Offset ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsOffsetTypeSupported(Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeGfxTimeEventTypeLine::GetOffsetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_OffsetSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IAgVeGfxTimeEventTypeLine::GetOffsetPixels ( ) {
    long _result = 0;
    HRESULT _hr = get_OffsetPixels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTimeEventTypeLine::PutOffsetPixels ( long pVal ) {
    HRESULT _hr = put_OffsetPixels(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxTimeEventTypeMarker wrapper method implementations
//

_variant_t _IAgVeGfxTimeEventTypeMarker::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeGfxTimeEventTypeMarker::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeGfxTimeEventTypeMarker::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

OLE_COLOR _IAgVeGfxTimeEventTypeMarker::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTimeEventTypeMarker::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxTimeEventTypeMarker::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxTimeEventTypeMarker::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxTimeEventTypeMarker::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxTimeEventTypeMarker::PutUniqueID ( _bstr_t pVal ) {
    HRESULT _hr = put_UniqueID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxTimeEventTypeMarker wrapper method implementations
//

_variant_t IAgVeGfxTimeEventTypeMarker::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeGfxTimeEventTypeMarker::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeGfxTimeEventTypeMarker::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

OLE_COLOR IAgVeGfxTimeEventTypeMarker::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTimeEventTypeMarker::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxTimeEventTypeMarker::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxTimeEventTypeMarker::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxTimeEventTypeMarker::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxTimeEventTypeMarker::PutUniqueID ( _bstr_t pVal ) {
    HRESULT _hr = put_UniqueID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxTimeEventTypeText wrapper method implementations
//

_variant_t _IAgVeGfxTimeEventTypeText::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeGfxTimeEventTypeText::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeGfxTimeEventTypeText::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

OLE_COLOR _IAgVeGfxTimeEventTypeText::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTimeEventTypeText::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxTimeEventTypeText::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxTimeEventTypeText::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxTimeEventTypeText::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxTimeEventTypeText::PutUniqueID ( _bstr_t pVal ) {
    HRESULT _hr = put_UniqueID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGfxOffset _IAgVeGfxTimeEventTypeText::GetOffsetType ( ) {
    enum AgEVeGfxOffset _result;
    HRESULT _hr = get_OffsetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeGfxTimeEventTypeText::SetOffsetType ( enum AgEVeGfxOffset Offset ) {
    HRESULT _hr = raw_SetOffsetType(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeGfxTimeEventTypeText::IsOffsetTypeSupported ( enum AgEVeGfxOffset Offset ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsOffsetTypeSupported(Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeGfxTimeEventTypeText::GetOffsetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_OffsetSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long _IAgVeGfxTimeEventTypeText::GetOffsetPixels ( ) {
    long _result = 0;
    HRESULT _hr = get_OffsetPixels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTimeEventTypeText::PutOffsetPixels ( long pVal ) {
    HRESULT _hr = put_OffsetPixels(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxTimeEventTypeText wrapper method implementations
//

_variant_t IAgVeGfxTimeEventTypeText::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeGfxTimeEventTypeText::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeGfxTimeEventTypeText::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

OLE_COLOR IAgVeGfxTimeEventTypeText::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTimeEventTypeText::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxTimeEventTypeText::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxTimeEventTypeText::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxTimeEventTypeText::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxTimeEventTypeText::PutUniqueID ( _bstr_t pVal ) {
    HRESULT _hr = put_UniqueID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGfxOffset IAgVeGfxTimeEventTypeText::GetOffsetType ( ) {
    enum AgEVeGfxOffset _result;
    HRESULT _hr = get_OffsetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeGfxTimeEventTypeText::SetOffsetType ( enum AgEVeGfxOffset Offset ) {
    HRESULT _hr = raw_SetOffsetType(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeGfxTimeEventTypeText::IsOffsetTypeSupported ( enum AgEVeGfxOffset Offset ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsOffsetTypeSupported(Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeGfxTimeEventTypeText::GetOffsetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_OffsetSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IAgVeGfxTimeEventTypeText::GetOffsetPixels ( ) {
    long _result = 0;
    HRESULT _hr = get_OffsetPixels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxTimeEventTypeText::PutOffsetPixels ( long pVal ) {
    HRESULT _hr = put_OffsetPixels(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxTimeEventsElement wrapper method implementations
//

VARIANT_BOOL _IAgVeGfxTimeEventsElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxTimeEventsElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGfxTimeEventType _IAgVeGfxTimeEventsElement::GetTimeEventType ( ) {
    enum AgEVeGfxTimeEventType _result;
    HRESULT _hr = get_TimeEventType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeGfxTimeEventsElement::SetTimeEventType ( enum AgEVeGfxTimeEventType TimeEventType ) {
    HRESULT _hr = raw_SetTimeEventType(TimeEventType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeGfxTimeEventsElement::IsTimeEventTypeSupported ( enum AgEVeGfxTimeEventType TimeEventType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTimeEventTypeSupported(TimeEventType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeGfxTimeEventsElement::GetTimeEventTypeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TimeEventTypeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxTimeEventTypePtr _IAgVeGfxTimeEventsElement::GetTimeEventTypeData ( ) {
    struct IAgVeGfxTimeEventType * _result = 0;
    HRESULT _hr = get_TimeEventTypeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTimeEventTypePtr(_result, false);
}

//
// interface _IAgVeGfxPassShowPasses wrapper method implementations
//

long _IAgVeGfxPassShowPasses::GetFirstPass ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxPassShowPasses::PutFirstPass ( long pVal ) {
    HRESULT _hr = put_FirstPass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeGfxPassShowPasses::GetLastPass ( ) {
    long _result = 0;
    HRESULT _hr = get_LastPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxPassShowPasses::PutLastPass ( long pVal ) {
    HRESULT _hr = put_LastPass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxPassShowPasses wrapper method implementations
//

long IAgVeGfxPassShowPasses::GetFirstPass ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxPassShowPasses::PutFirstPass ( long pVal ) {
    HRESULT _hr = put_FirstPass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeGfxPassShowPasses::GetLastPass ( ) {
    long _result = 0;
    HRESULT _hr = get_LastPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxPassShowPasses::PutLastPass ( long pVal ) {
    HRESULT _hr = put_LastPass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxPasses wrapper method implementations
//

enum AgEVeGfxPass _IAgVeGfxPasses::GetPassType ( ) {
    enum AgEVeGfxPass _result;
    HRESULT _hr = get_PassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeGfxPasses::SetPassType ( enum AgEVeGfxPass Pass ) {
    HRESULT _hr = raw_SetPassType(Pass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeGfxPasses::IsPassTypeSupported ( enum AgEVeGfxPass Pass ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPassTypeSupported(Pass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeGfxPasses::GetPassSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PassSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxPassPtr _IAgVeGfxPasses::GetPass ( ) {
    struct IAgVeGfxPass * _result = 0;
    HRESULT _hr = get_Pass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxPassPtr(_result, false);
}

enum AgEVeGfxVisibleSides _IAgVeGfxPasses::GetVisibleSides ( ) {
    enum AgEVeGfxVisibleSides _result;
    HRESULT _hr = get_VisibleSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxPasses::PutVisibleSides ( enum AgEVeGfxVisibleSides pVal ) {
    HRESULT _hr = put_VisibleSides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxPasses::GetIsPassLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPassLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxPasses::PutIsPassLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPassLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxPasses::GetIsPathLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPathLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxPasses::PutIsPathLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPathLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxSAA wrapper method implementations
//

VARIANT_BOOL _IAgVeGfxSAA::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxSAA::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxSAA::GetUseVehicleAlt ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseVehicleAlt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxSAA::PutUseVehicleAlt ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseVehicleAlt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGfxSAA::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxSAA::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxSAA::GetIsFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxSAA::PutIsFillVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsFillVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgEFillStyle _IAgVeGfxSAA::GetFillStyle ( ) {
    enum STKUtil::AgEFillStyle _result;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxSAA::PutFillStyle ( enum STKUtil::AgEFillStyle pVal ) {
    HRESULT _hr = put_FillStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxElevationsElement wrapper method implementations
//

double _IAgVeGfxElevationsElement::GetElevation ( ) {
    double _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationsElement::PutElevation ( double pVal ) {
    HRESULT _hr = put_Elevation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeGfxElevationsElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationsElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeGfxElevationsElement::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationsElement::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeGfxElevationsElement::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationsElement::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxElevationsElement::GetDistanceVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DistanceVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationsElement::PutDistanceVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DistanceVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxElevationsElement::GetUserTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserTextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationsElement::PutUserTextVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UserTextVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxElevationsElement::GetUserText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxElevationsElement::PutUserText ( _bstr_t pVal ) {
    HRESULT _hr = put_UserText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeGfxElevationsElement::GetLabelAngle ( ) {
    long _result = 0;
    HRESULT _hr = get_LabelAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevationsElement::PutLabelAngle ( long pVal ) {
    HRESULT _hr = put_LabelAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxElevContours wrapper method implementations
//

VARIANT_BOOL _IAgVeGfxElevContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevContours::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxElevContours::GetIsFillVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFillVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevContours::PutIsFillVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsFillVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgEFillStyle _IAgVeGfxElevContours::GetFillStyle ( ) {
    enum STKUtil::AgEFillStyle _result;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevContours::PutFillStyle ( enum STKUtil::AgEFillStyle pVal ) {
    HRESULT _hr = put_FillStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeGfxElevContours::GetNumOfDecimalDigits ( ) {
    long _result = 0;
    HRESULT _hr = get_NumOfDecimalDigits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxElevContours::PutNumOfDecimalDigits ( long pVal ) {
    HRESULT _hr = put_NumOfDecimalDigits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxElevationsCollectionPtr _IAgVeGfxElevContours::GetElevations ( ) {
    struct IAgVeGfxElevationsCollection * _result = 0;
    HRESULT _hr = get_Elevations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevationsCollectionPtr(_result, false);
}

//
// interface _IAgVeGfxRouteResolution wrapper method implementations
//

double _IAgVeGfxRouteResolution::GetRoute ( ) {
    double _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxRouteResolution::PutRoute ( double pVal ) {
    HRESULT _hr = put_Route(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGfxRouteResolution::GetMinRoute ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRoute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxRouteResolution::PutMinRoute ( double pVal ) {
    HRESULT _hr = put_MinRoute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxRouteResolution wrapper method implementations
//

double IAgVeGfxRouteResolution::GetRoute ( ) {
    double _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxRouteResolution::PutRoute ( double pVal ) {
    HRESULT _hr = put_Route(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGfxRouteResolution::GetMinRoute ( ) {
    double _result = 0;
    HRESULT _hr = get_MinRoute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxRouteResolution::PutMinRoute ( double pVal ) {
    HRESULT _hr = put_MinRoute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxWaypointMarkersElement wrapper method implementations
//

_variant_t _IAgVeGfxWaypointMarkersElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL _IAgVeGfxWaypointMarkersElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxWaypointMarkersElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxWaypointMarkersElement::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxWaypointMarkersElement::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxWaypointMarkersElement::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxWaypointMarkersElement::PutLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_Label(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxWaypointMarkersElement::GetUseVehColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseVehColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxWaypointMarkersElement::PutUseVehColor ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseVehColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeGfxWaypointMarkersElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxWaypointMarkersElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxWaypointMarkersElement::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxWaypointMarkersElement::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxWaypointMarkersElement wrapper method implementations
//

_variant_t IAgVeGfxWaypointMarkersElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IAgVeGfxWaypointMarkersElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxWaypointMarkersElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxWaypointMarkersElement::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxWaypointMarkersElement::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxWaypointMarkersElement::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxWaypointMarkersElement::PutLabel ( _bstr_t pVal ) {
    HRESULT _hr = put_Label(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxWaypointMarkersElement::GetUseVehColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseVehColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxWaypointMarkersElement::PutUseVehColor ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseVehColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeGfxWaypointMarkersElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxWaypointMarkersElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeGfxWaypointMarkersElement::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGfxWaypointMarkersElement::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxWaypointMarkersCollection wrapper method implementations
//

long IAgVeGfxWaypointMarkersCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxWaypointMarkersElementPtr IAgVeGfxWaypointMarkersCollection::GetItem ( long Index ) {
    struct IAgVeGfxWaypointMarkersElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxWaypointMarkersElementPtr(_result, false);
}

IUnknownPtr IAgVeGfxWaypointMarkersCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVeGfxWaypointMarker wrapper method implementations
//

VARIANT_BOOL _IAgVeGfxWaypointMarker::GetIsWaypointMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsWaypointMarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxWaypointMarker::PutIsWaypointMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsWaypointMarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxWaypointMarker::GetIsTurnMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTurnMarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxWaypointMarker::PutIsTurnMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTurnMarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxWaypointMarkersCollectionPtr _IAgVeGfxWaypointMarker::GetWaypointMarkers ( ) {
    struct IAgVeGfxWaypointMarkersCollection * _result = 0;
    HRESULT _hr = get_WaypointMarkers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxWaypointMarkersCollectionPtr(_result, false);
}

//
// interface IAgVeGfxWaypointMarker wrapper method implementations
//

VARIANT_BOOL IAgVeGfxWaypointMarker::GetIsWaypointMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsWaypointMarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxWaypointMarker::PutIsWaypointMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsWaypointMarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxWaypointMarker::GetIsTurnMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTurnMarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxWaypointMarker::PutIsTurnMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTurnMarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxWaypointMarkersCollectionPtr IAgVeGfxWaypointMarker::GetWaypointMarkers ( ) {
    struct IAgVeGfxWaypointMarkersCollection * _result = 0;
    HRESULT _hr = get_WaypointMarkers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxWaypointMarkersCollectionPtr(_result, false);
}

//
// interface _IAgVeGfxInterval wrapper method implementations
//

IAgVeGfxAttributesBasicPtr _IAgVeGfxInterval::GetGfxAttributes ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_GfxAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

_variant_t _IAgVeGfxInterval::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeGfxInterval::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeGfxInterval::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeGfxInterval::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxPassResolution wrapper method implementations
//

double _IAgVeGfxPassResolution::GetGroundTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxPassResolution::PutGroundTrack ( double pVal ) {
    HRESULT _hr = put_GroundTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGfxPassResolution::GetOrbit ( ) {
    double _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxPassResolution::PutOrbit ( double pVal ) {
    HRESULT _hr = put_Orbit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGfxPassResolution::GetMinGroundTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_MinGroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxPassResolution::PutMinGroundTrack ( double pVal ) {
    HRESULT _hr = put_MinGroundTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGfxPassResolution::GetMinOrbit ( ) {
    double _result = 0;
    HRESULT _hr = get_MinOrbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxPassResolution::PutMinOrbit ( double pVal ) {
    HRESULT _hr = put_MinOrbit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxGroundEllipsesElement wrapper method implementations
//

_bstr_t _IAgVeGfxGroundEllipsesElement::GetEllipseSetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EllipseSetName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgVeGfxGroundEllipsesElement::GetStaticGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StaticGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxGroundEllipsesElement::PutStaticGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_StaticGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxGroundEllipsesElement::GetDynamicGfx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DynamicGfx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxGroundEllipsesElement::PutDynamicGfx ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DynamicGfx(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxGroundEllipsesElement::GetInterpolate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Interpolate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxGroundEllipsesElement::PutInterpolate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Interpolate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxGroundEllipsesElement::GetIsNameVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsNameVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxGroundEllipsesElement::PutIsNameVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsNameVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxGroundEllipsesElement::GetIsCenterVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCenterVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxGroundEllipsesElement::PutIsCenterVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsCenterVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeGfxGroundEllipsesElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxGroundEllipsesElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeGfxGroundEllipsesElement::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxGroundEllipsesElement::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxAttributesRoute wrapper method implementations
//

VARIANT_BOOL _IAgVeGfxAttributesRoute::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesRoute::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesRoute::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesRoute::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeGfxAttributesRoute::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesRoute::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxAttributesRoute::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxAttributesRoute::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesRoute::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesRoute::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxLinePtr _IAgVeGfxAttributesRoute::GetLine ( ) {
    struct IAgVeGfxLine * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLinePtr(_result, false);
}

VARIANT_BOOL _IAgVeGfxAttributesRoute::GetIsRouteVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRouteVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesRoute::PutIsRouteVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsRouteVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesRoute::GetIsRouteMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRouteMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesRoute::PutIsRouteMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsRouteMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxAttributesRoute wrapper method implementations
//

VARIANT_BOOL IAgVeGfxAttributesRoute::GetIsRouteVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRouteVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesRoute::PutIsRouteVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsRouteVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxAttributesRoute::GetIsRouteMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRouteMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesRoute::PutIsRouteMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsRouteMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxAttributesTrajectory wrapper method implementations
//

VARIANT_BOOL _IAgVeGfxAttributesTrajectory::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesTrajectory::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesTrajectory::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesTrajectory::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeGfxAttributesTrajectory::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesTrajectory::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxAttributesTrajectory::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxAttributesTrajectory::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesTrajectory::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesTrajectory::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxLinePtr _IAgVeGfxAttributesTrajectory::GetLine ( ) {
    struct IAgVeGfxLine * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLinePtr(_result, false);
}

VARIANT_BOOL _IAgVeGfxAttributesTrajectory::GetIsGroundTrackVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGroundTrackVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesTrajectory::PutIsGroundTrackVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsGroundTrackVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesTrajectory::GetIsGroundMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGroundMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesTrajectory::PutIsGroundMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsGroundMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesTrajectory::GetIsTrajectoryVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTrajectoryVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesTrajectory::PutIsTrajectoryVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTrajectoryVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesTrajectory::GetIsTrajectoryMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTrajectoryMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesTrajectory::PutIsTrajectoryMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTrajectoryMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxAttributesTrajectory wrapper method implementations
//

VARIANT_BOOL IAgVeGfxAttributesTrajectory::GetIsGroundTrackVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGroundTrackVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesTrajectory::PutIsGroundTrackVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsGroundTrackVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxAttributesTrajectory::GetIsGroundMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGroundMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesTrajectory::PutIsGroundMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsGroundMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxAttributesTrajectory::GetIsTrajectoryVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTrajectoryVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesTrajectory::PutIsTrajectoryVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTrajectoryVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxAttributesTrajectory::GetIsTrajectoryMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTrajectoryMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesTrajectory::PutIsTrajectoryMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTrajectoryMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGfxAttributesOrbit wrapper method implementations
//

VARIANT_BOOL _IAgVeGfxAttributesOrbit::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesOrbit::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesOrbit::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesOrbit::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeGfxAttributesOrbit::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesOrbit::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeGfxAttributesOrbit::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGfxAttributesOrbit::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesOrbit::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesOrbit::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxLinePtr _IAgVeGfxAttributesOrbit::GetLine ( ) {
    struct IAgVeGfxLine * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLinePtr(_result, false);
}

VARIANT_BOOL _IAgVeGfxAttributesOrbit::GetIsGroundTrackVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGroundTrackVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesOrbit::PutIsGroundTrackVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsGroundTrackVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesOrbit::GetIsGroundMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGroundMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesOrbit::PutIsGroundMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsGroundMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesOrbit::GetIsOrbitVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOrbitVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesOrbit::PutIsOrbitVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsOrbitVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeGfxAttributesOrbit::GetIsOrbitMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOrbitMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGfxAttributesOrbit::PutIsOrbitMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsOrbitMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGfxAttributesOrbit wrapper method implementations
//

VARIANT_BOOL IAgVeGfxAttributesOrbit::GetIsGroundTrackVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGroundTrackVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesOrbit::PutIsGroundTrackVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsGroundTrackVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxAttributesOrbit::GetIsGroundMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGroundMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesOrbit::PutIsGroundMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsGroundMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxAttributesOrbit::GetIsOrbitVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOrbitVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesOrbit::PutIsOrbitVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsOrbitVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeGfxAttributesOrbit::GetIsOrbitMarkerVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOrbitMarkerVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGfxAttributesOrbit::PutIsOrbitMarkerVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsOrbitMarkerVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOSystemsElement wrapper method implementations
//

VARIANT_BOOL _IAgVeVOSystemsElement::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSystemsElement::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOSystemsElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSystemsElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOSystemsElement::GetVOWindow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VOWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOSystemsElement::PutVOWindow ( _bstr_t pVal ) {
    HRESULT _hr = put_VOWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeVOSystemsElement::GetAvailableVOWindows ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableVOWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVeVOSystemsElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgVeVOSystemsElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSystemsElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeVOSystemsElement::GetVOWindowIds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetVOWindowIds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOSystemsElement::SetVOWindowIds ( SAFEARRAY * * WindowIds ) {
    HRESULT _hr = raw_SetVOWindowIds(WindowIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeVOSystemsSpecialElement wrapper method implementations
//

VARIANT_BOOL _IAgVeVOSystemsSpecialElement::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSystemsSpecialElement::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOSystemsSpecialElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSystemsSpecialElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOSystemsSpecialElement::GetVOWindow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VOWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOSystemsSpecialElement::PutVOWindow ( _bstr_t pVal ) {
    HRESULT _hr = put_VOWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeVOSystemsSpecialElement::GetAvailableVOWindows ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableVOWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeVOSystemsSpecialElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSystemsSpecialElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeVOSystemsSpecialElement::GetVOWindowIds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetVOWindowIds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOSystemsSpecialElement::SetVOWindowIds ( SAFEARRAY * * WindowIds ) {
    HRESULT _hr = raw_SetVOWindowIds(WindowIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeVOControlBox wrapper method implementations
//

VARIANT_BOOL _IAgVeVOControlBox::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOControlBox::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVOControlBox::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOControlBox::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOControlBox::GetIsTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutIsTextVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTextVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOControlBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOControlBox::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeVOControlBox::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOControlBox::GetCrossTrack ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutCrossTrack ( double pVal ) {
    HRESULT _hr = put_CrossTrack(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOControlBox::GetTangential ( ) {
    double _result = 0;
    HRESULT _hr = get_Tangential(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutTangential ( double pVal ) {
    HRESULT _hr = put_Tangential(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOControlBox::GetNormal ( ) {
    double _result = 0;
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutNormal ( double pVal ) {
    HRESULT _hr = put_Normal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOControlBox::GetCrossTrackOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossTrackOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutCrossTrackOffset ( double pVal ) {
    HRESULT _hr = put_CrossTrackOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOControlBox::GetTangentialOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_TangentialOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutTangentialOffset ( double pVal ) {
    HRESULT _hr = put_TangentialOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOControlBox::GetNormalOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_NormalOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutNormalOffset ( double pVal ) {
    HRESULT _hr = put_NormalOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOControlBox::GetUseTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutUseTranslucency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOControlBox::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOControlBox::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOBearingBox wrapper method implementations
//

VARIANT_BOOL _IAgVeVOBearingBox::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOBearingBox::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVOBearingBox::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOBearingBox::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOBearingBox::GetIsTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutIsTextVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTextVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOBearingBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBearingBox::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeVOBearingBox::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingBox::GetBearing ( ) {
    double _result = 0;
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutBearing ( double pVal ) {
    HRESULT _hr = put_Bearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingBox::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingBox::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutWidth ( double pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingBox::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutHeight ( double pVal ) {
    HRESULT _hr = put_Height(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingBox::GetLengthOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_LengthOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutLengthOffset ( double pVal ) {
    HRESULT _hr = put_LengthOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingBox::GetWidthOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_WidthOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutWidthOffset ( double pVal ) {
    HRESULT _hr = put_WidthOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingBox::GetHeightOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_HeightOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutHeightOffset ( double pVal ) {
    HRESULT _hr = put_HeightOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOBearingBox::GetUseTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutUseTranslucency ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingBox::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingBox::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOBearingEllipse wrapper method implementations
//

VARIANT_BOOL _IAgVeVOBearingEllipse::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOBearingEllipse::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVOBearingEllipse::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOBearingEllipse::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOBearingEllipse::GetIsTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutIsTextVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTextVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOBearingEllipse::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBearingEllipse::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeVOBearingEllipse::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingEllipse::GetBearing ( ) {
    double _result = 0;
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutBearing ( double pVal ) {
    HRESULT _hr = put_Bearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingEllipse::GetSemiMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutSemiMajorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMajorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingEllipse::GetSemiMinorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_SemiMinorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutSemiMinorAxis ( double pVal ) {
    HRESULT _hr = put_SemiMinorAxis(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingEllipse::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutGranularity ( double pVal ) {
    HRESULT _hr = put_Granularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingEllipse::GetMajorAxisOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorAxisOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutMajorAxisOffset ( double pVal ) {
    HRESULT _hr = put_MajorAxisOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBearingEllipse::GetMinorAxisOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorAxisOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBearingEllipse::PutMinorAxisOffset ( double pVal ) {
    HRESULT _hr = put_MinorAxisOffset(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOLineOfBearing wrapper method implementations
//

VARIANT_BOOL _IAgVeVOLineOfBearing::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOLineOfBearing::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVOLineOfBearing::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOLineOfBearing::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOLineOfBearing::GetIsTextVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTextVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutIsTextVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTextVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOLineOfBearing::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOLineOfBearing::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeVOLineOfBearing::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOLineOfBearing::GetBearing ( ) {
    double _result = 0;
    HRESULT _hr = get_Bearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutBearing ( double pVal ) {
    HRESULT _hr = put_Bearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOLineOfBearing::GetOriginLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_OriginLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutOriginLatitude ( double pVal ) {
    HRESULT _hr = put_OriginLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOLineOfBearing::GetOriginLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_OriginLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutOriginLongitude ( double pVal ) {
    HRESULT _hr = put_OriginLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOLineOfBearing::GetOriginAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_OriginAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutOriginAltitude ( double pVal ) {
    HRESULT _hr = put_OriginAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOLineOfBearing::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOLineOfBearing::GetBearingError ( ) {
    double _result = 0;
    HRESULT _hr = get_BearingError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutBearingError ( double pVal ) {
    HRESULT _hr = put_BearingError(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOLineOfBearing::GetErrorColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ErrorColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutErrorColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ErrorColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVOLineOfBearing::GetErrorLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_ErrorLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOLineOfBearing::PutErrorLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_ErrorLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOGeoBox wrapper method implementations
//

VARIANT_BOOL _IAgVeVOGeoBox::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOGeoBox::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOGeoBox::GetLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOGeoBox::PutLongitude ( double pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOGeoBox::GetNorthSouth ( ) {
    double _result = 0;
    HRESULT _hr = get_NorthSouth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOGeoBox::PutNorthSouth ( double pVal ) {
    HRESULT _hr = put_NorthSouth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOGeoBox::GetEastWest ( ) {
    double _result = 0;
    HRESULT _hr = get_EastWest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOGeoBox::PutEastWest ( double pVal ) {
    HRESULT _hr = put_EastWest(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOGeoBox::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOGeoBox::PutRadius ( double pVal ) {
    HRESULT _hr = put_Radius(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOGeoBox::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOGeoBox::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgVeVOGeoBox::Reposition ( ) {
    HRESULT _hr = raw_Reposition();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeVORouteProximity wrapper method implementations
//

IAgVeVOControlBoxPtr _IAgVeVORouteProximity::GetControlBox ( ) {
    struct IAgVeVOControlBox * _result = 0;
    HRESULT _hr = get_ControlBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOControlBoxPtr(_result, false);
}

IAgVeVOBearingBoxPtr _IAgVeVORouteProximity::GetBearingBox ( ) {
    struct IAgVeVOBearingBox * _result = 0;
    HRESULT _hr = get_BearingBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingBoxPtr(_result, false);
}

IAgVeVOBearingEllipsePtr _IAgVeVORouteProximity::GetBearingEllipse ( ) {
    struct IAgVeVOBearingEllipse * _result = 0;
    HRESULT _hr = get_BearingEllipse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingEllipsePtr(_result, false);
}

IAgVeVOLineOfBearingPtr _IAgVeVORouteProximity::GetLineOfBearing ( ) {
    struct IAgVeVOLineOfBearing * _result = 0;
    HRESULT _hr = get_LineOfBearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLineOfBearingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr _IAgVeVORouteProximity::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface IAgVeVORouteProximity wrapper method implementations
//

IAgVeVOControlBoxPtr IAgVeVORouteProximity::GetControlBox ( ) {
    struct IAgVeVOControlBox * _result = 0;
    HRESULT _hr = get_ControlBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOControlBoxPtr(_result, false);
}

IAgVeVOBearingBoxPtr IAgVeVORouteProximity::GetBearingBox ( ) {
    struct IAgVeVOBearingBox * _result = 0;
    HRESULT _hr = get_BearingBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingBoxPtr(_result, false);
}

IAgVeVOBearingEllipsePtr IAgVeVORouteProximity::GetBearingEllipse ( ) {
    struct IAgVeVOBearingEllipse * _result = 0;
    HRESULT _hr = get_BearingEllipse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingEllipsePtr(_result, false);
}

IAgVeVOLineOfBearingPtr IAgVeVORouteProximity::GetLineOfBearing ( ) {
    struct IAgVeVOLineOfBearing * _result = 0;
    HRESULT _hr = get_LineOfBearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLineOfBearingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr IAgVeVORouteProximity::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface _IAgVeVOOrbitProximity wrapper method implementations
//

IAgVeVOGeoBoxPtr _IAgVeVOOrbitProximity::GetGeoBox ( ) {
    struct IAgVeVOGeoBox * _result = 0;
    HRESULT _hr = get_GeoBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOGeoBoxPtr(_result, false);
}

IAgVeVOControlBoxPtr _IAgVeVOOrbitProximity::GetControlBox ( ) {
    struct IAgVeVOControlBox * _result = 0;
    HRESULT _hr = get_ControlBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOControlBoxPtr(_result, false);
}

IAgVeVOBearingBoxPtr _IAgVeVOOrbitProximity::GetBearingBox ( ) {
    struct IAgVeVOBearingBox * _result = 0;
    HRESULT _hr = get_BearingBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingBoxPtr(_result, false);
}

IAgVeVOBearingEllipsePtr _IAgVeVOOrbitProximity::GetBearingEllipse ( ) {
    struct IAgVeVOBearingEllipse * _result = 0;
    HRESULT _hr = get_BearingEllipse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingEllipsePtr(_result, false);
}

IAgVeVOLineOfBearingPtr _IAgVeVOOrbitProximity::GetLineOfBearing ( ) {
    struct IAgVeVOLineOfBearing * _result = 0;
    HRESULT _hr = get_LineOfBearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLineOfBearingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr _IAgVeVOOrbitProximity::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface _IAgVeVOElevContours wrapper method implementations
//

VARIANT_BOOL _IAgVeVOElevContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOElevContours::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOElevContours::GetIsConesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOElevContours::PutIsConesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsConesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOElevContours::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOElevContours::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOElevContours::GetFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOElevContours::PutFill ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Fill(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOElevContours::GetFillTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_FillTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOElevContours::PutFillTranslucency ( double pVal ) {
    HRESULT _hr = put_FillTranslucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOSAA wrapper method implementations
//

VARIANT_BOOL _IAgVeVOSAA::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSAA::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOSAA::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSAA::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOSigmaScaleProbability wrapper method implementations
//

double _IAgVeVOSigmaScaleProbability::GetProbability ( ) {
    double _result = 0;
    HRESULT _hr = get_Probability(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSigmaScaleProbability::PutProbability ( double pVal ) {
    HRESULT _hr = put_Probability(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOSigmaScaleProbability wrapper method implementations
//

double IAgVeVOSigmaScaleProbability::GetProbability ( ) {
    double _result = 0;
    HRESULT _hr = get_Probability(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSigmaScaleProbability::PutProbability ( double pVal ) {
    HRESULT _hr = put_Probability(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOSigmaScaleScale wrapper method implementations
//

double _IAgVeVOSigmaScaleScale::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSigmaScaleScale::PutScaleValue ( double pVal ) {
    HRESULT _hr = put_ScaleValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOSigmaScaleScale wrapper method implementations
//

double IAgVeVOSigmaScaleScale::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOSigmaScaleScale::PutScaleValue ( double pVal ) {
    HRESULT _hr = put_ScaleValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVODefaultAttributes wrapper method implementations
//

VARIANT_BOOL _IAgVeVODefaultAttributes::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODefaultAttributes::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVODefaultAttributes::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODefaultAttributes::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVODefaultAttributes::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODefaultAttributes::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVODefaultAttributes::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODefaultAttributes::PutTranslucency ( double pTranslucency ) {
    HRESULT _hr = put_Translucency(pTranslucency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVODefaultAttributes wrapper method implementations
//

VARIANT_BOOL IAgVeVODefaultAttributes::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODefaultAttributes::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVODefaultAttributes::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODefaultAttributes::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeVODefaultAttributes::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODefaultAttributes::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVODefaultAttributes::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODefaultAttributes::PutTranslucency ( double pTranslucency ) {
    HRESULT _hr = put_Translucency(pTranslucency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOIntervalsElement wrapper method implementations
//

_variant_t _IAgVeVOIntervalsElement::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeVOIntervalsElement::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeVOIntervalsElement::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeVOIntervalsElement::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOIntervalsElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOIntervalsElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOIntervalsElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOIntervalsElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVOIntervalsElement::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOIntervalsElement::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOIntervalsElement::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOIntervalsElement::PutTranslucency ( double pTranslucency ) {
    HRESULT _hr = put_Translucency(pTranslucency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOIntervalsElement wrapper method implementations
//

_variant_t IAgVeVOIntervalsElement::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeVOIntervalsElement::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeVOIntervalsElement::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeVOIntervalsElement::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOIntervalsElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOIntervalsElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVOIntervalsElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOIntervalsElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeVOIntervalsElement::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOIntervalsElement::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOIntervalsElement::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOIntervalsElement::PutTranslucency ( double pTranslucency ) {
    HRESULT _hr = put_Translucency(pTranslucency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOIntervalsCollection wrapper method implementations
//

long IAgVeVOIntervalsCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOIntervalsElementPtr IAgVeVOIntervalsCollection::GetItem ( long Index ) {
    struct IAgVeVOIntervalsElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOIntervalsElementPtr(_result, false);
}

IUnknownPtr IAgVeVOIntervalsCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeVOIntervalsCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeVOIntervalsCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeVOIntervalsElementPtr IAgVeVOIntervalsCollection::Add ( const _variant_t & Start, const _variant_t & Stop ) {
    struct IAgVeVOIntervalsElement * _result = 0;
    HRESULT _hr = raw_Add(Start, Stop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOIntervalsElementPtr(_result, false);
}

//
// interface _IAgVeVOAttributesBasic wrapper method implementations
//

VARIANT_BOOL _IAgVeVOAttributesBasic::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOAttributesBasic::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOAttributesBasic::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOAttributesBasic::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVOAttributesBasic::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOAttributesBasic::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOAttributesBasic::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOAttributesBasic::PutTranslucency ( double pTranslucency ) {
    HRESULT _hr = put_Translucency(pTranslucency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOAttributesBasic wrapper method implementations
//

VARIANT_BOOL IAgVeVOAttributesBasic::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOAttributesBasic::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgVeVOAttributesBasic::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOAttributesBasic::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeVOAttributesBasic::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOAttributesBasic::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOAttributesBasic::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOAttributesBasic::PutTranslucency ( double pTranslucency ) {
    HRESULT _hr = put_Translucency(pTranslucency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOAttributesIntervals wrapper method implementations
//

IAgVeVODefaultAttributesPtr _IAgVeVOAttributesIntervals::GetDefaultAttributes ( ) {
    struct IAgVeVODefaultAttributes * _result = 0;
    HRESULT _hr = get_DefaultAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODefaultAttributesPtr(_result, false);
}

IAgVeVOIntervalsCollectionPtr _IAgVeVOAttributesIntervals::GetIntervals ( ) {
    struct IAgVeVOIntervalsCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOIntervalsCollectionPtr(_result, false);
}

//
// interface IAgVeVOAttributesIntervals wrapper method implementations
//

IAgVeVODefaultAttributesPtr IAgVeVOAttributesIntervals::GetDefaultAttributes ( ) {
    struct IAgVeVODefaultAttributes * _result = 0;
    HRESULT _hr = get_DefaultAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODefaultAttributesPtr(_result, false);
}

IAgVeVOIntervalsCollectionPtr IAgVeVOAttributesIntervals::GetIntervals ( ) {
    struct IAgVeVOIntervalsCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOIntervalsCollectionPtr(_result, false);
}

//
// interface _IAgVeVOSize wrapper method implementations
//

VARIANT_BOOL _IAgVeVOSize::GetScaleToAttitudeSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScaleToAttitudeSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSize::PutScaleToAttitudeSphere ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ScaleToAttitudeSphere(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOSize::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOSize::PutScaleValue ( double pVal ) {
    HRESULT _hr = put_ScaleValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVODataFraction wrapper method implementations
//

double _IAgVeVODataFraction::GetFraction ( ) {
    double _result = 0;
    HRESULT _hr = get_Fraction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODataFraction::PutFraction ( double pVal ) {
    HRESULT _hr = put_Fraction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVODataFraction wrapper method implementations
//

double IAgVeVODataFraction::GetFraction ( ) {
    double _result = 0;
    HRESULT _hr = get_Fraction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODataFraction::PutFraction ( double pVal ) {
    HRESULT _hr = put_Fraction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVODataTime wrapper method implementations
//

double _IAgVeVODataTime::GetTime ( ) {
    double _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODataTime::PutTime ( double pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVODataTime wrapper method implementations
//

double IAgVeVODataTime::GetTime ( ) {
    double _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVODataTime::PutTime ( double pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOOrbitPassData wrapper method implementations
//

IAgVeVOLeadTrailDataPtr _IAgVeVOOrbitPassData::GetGroundTrack ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

IAgVeVOLeadTrailDataPtr _IAgVeVOOrbitPassData::GetOrbit ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

//
// interface _IAgVeVOOrbitTrackData wrapper method implementations
//

VARIANT_BOOL _IAgVeVOOrbitTrackData::GetInheritFrom2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFrom2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOOrbitTrackData::PutInheritFrom2D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritFrom2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOOrbitPassDataPtr _IAgVeVOOrbitTrackData::GetPassData ( ) {
    struct IAgVeVOOrbitPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitPassDataPtr(_result, false);
}

//
// interface _IAgVeVOTickDataLine wrapper method implementations
//

double _IAgVeVOTickDataLine::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOTickDataLine::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVOTickDataLine::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOTickDataLine::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOTickDataLine wrapper method implementations
//

double IAgVeVOTickDataLine::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOTickDataLine::PutLength ( double pVal ) {
    HRESULT _hr = put_Length(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgVeVOTickDataLine::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOTickDataLine::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOTickDataPoint wrapper method implementations
//

double _IAgVeVOTickDataPoint::GetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOTickDataPoint::PutSize ( double pVal ) {
    HRESULT _hr = put_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOTickDataPoint wrapper method implementations
//

double IAgVeVOTickDataPoint::GetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOTickDataPoint::PutSize ( double pVal ) {
    HRESULT _hr = put_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOOrbitTickMarks wrapper method implementations
//

double _IAgVeVOOrbitTickMarks::GetTimeBetweenTicks ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeBetweenTicks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOOrbitTickMarks::PutTimeBetweenTicks ( double pVal ) {
    HRESULT _hr = put_TimeBetweenTicks(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOPathTickMarksPtr _IAgVeVOOrbitTickMarks::GetGroundTrack ( ) {
    struct IAgVeVOPathTickMarks * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPathTickMarksPtr(_result, false);
}

IAgVeVOPathTickMarksPtr _IAgVeVOOrbitTickMarks::GetOrbit ( ) {
    struct IAgVeVOPathTickMarks * _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPathTickMarksPtr(_result, false);
}

//
// interface _IAgVeVOPass wrapper method implementations
//

IAgVeVOOrbitTrackDataPtr _IAgVeVOPass::GetTrackData ( ) {
    struct IAgVeVOOrbitTrackData * _result = 0;
    HRESULT _hr = get_TrackData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitTrackDataPtr(_result, false);
}

IAgVeVOOrbitTickMarksPtr _IAgVeVOPass::GetTickMarks ( ) {
    struct IAgVeVOOrbitTickMarks * _result = 0;
    HRESULT _hr = get_TickMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitTickMarksPtr(_result, false);
}

VARIANT_BOOL _IAgVeVOPass::GetEnableDepthCueing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableDepthCueing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOPass::PutEnableDepthCueing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableDepthCueing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOCovariance wrapper method implementations
//

enum AgEVeVOSigmaScale _IAgVeVOCovariance::GetSigmaScaleType ( ) {
    enum AgEVeVOSigmaScale _result;
    HRESULT _hr = get_SigmaScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOCovariance::SetSigmaScaleType ( enum AgEVeVOSigmaScale SigmaScale ) {
    HRESULT _hr = raw_SetSigmaScaleType(SigmaScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeVOCovariance::IsSigmaScaleTypeSupported ( enum AgEVeVOSigmaScale SigmaScale ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSigmaScaleTypeSupported(SigmaScale, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeVOCovariance::GetSigmaScaleSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SigmaScaleSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOSigmaScalePtr _IAgVeVOCovariance::GetSigmaScale ( ) {
    struct IAgVeVOSigmaScale * _result = 0;
    HRESULT _hr = get_SigmaScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSigmaScalePtr(_result, false);
}

enum AgEVeVOAttributes _IAgVeVOCovariance::GetAttributesType ( ) {
    enum AgEVeVOAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOCovariance::SetAttributesType ( enum AgEVeVOAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeVOCovariance::IsAttributesTypeSupported ( enum AgEVeVOAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeVOCovariance::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOAttributesPtr _IAgVeVOCovariance::GetAttributes ( ) {
    struct IAgVeVOAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOAttributesPtr(_result, false);
}

//
// interface _IAgVeVOTrajectoryProximity wrapper method implementations
//

IAgVeVOControlBoxPtr _IAgVeVOTrajectoryProximity::GetControlBox ( ) {
    struct IAgVeVOControlBox * _result = 0;
    HRESULT _hr = get_ControlBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOControlBoxPtr(_result, false);
}

IAgVeVOBearingBoxPtr _IAgVeVOTrajectoryProximity::GetBearingBox ( ) {
    struct IAgVeVOBearingBox * _result = 0;
    HRESULT _hr = get_BearingBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingBoxPtr(_result, false);
}

IAgVeVOBearingEllipsePtr _IAgVeVOTrajectoryProximity::GetBearingEllipse ( ) {
    struct IAgVeVOBearingEllipse * _result = 0;
    HRESULT _hr = get_BearingEllipse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingEllipsePtr(_result, false);
}

IAgVeVOLineOfBearingPtr _IAgVeVOTrajectoryProximity::GetLineOfBearing ( ) {
    struct IAgVeVOLineOfBearing * _result = 0;
    HRESULT _hr = get_LineOfBearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLineOfBearingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr _IAgVeVOTrajectoryProximity::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface IAgVeVOTrajectoryProximity wrapper method implementations
//

IAgVeVOControlBoxPtr IAgVeVOTrajectoryProximity::GetControlBox ( ) {
    struct IAgVeVOControlBox * _result = 0;
    HRESULT _hr = get_ControlBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOControlBoxPtr(_result, false);
}

IAgVeVOBearingBoxPtr IAgVeVOTrajectoryProximity::GetBearingBox ( ) {
    struct IAgVeVOBearingBox * _result = 0;
    HRESULT _hr = get_BearingBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingBoxPtr(_result, false);
}

IAgVeVOBearingEllipsePtr IAgVeVOTrajectoryProximity::GetBearingEllipse ( ) {
    struct IAgVeVOBearingEllipse * _result = 0;
    HRESULT _hr = get_BearingEllipse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBearingEllipsePtr(_result, false);
}

IAgVeVOLineOfBearingPtr IAgVeVOTrajectoryProximity::GetLineOfBearing ( ) {
    struct IAgVeVOLineOfBearing * _result = 0;
    HRESULT _hr = get_LineOfBearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLineOfBearingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr IAgVeVOTrajectoryProximity::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

//
// interface IAgVeVOTrajectoryPassData wrapper method implementations
//

IAgVeVOLeadTrailDataPtr IAgVeVOTrajectoryPassData::GetGroundTrack ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

IAgVeVOLeadTrailDataPtr IAgVeVOTrajectoryPassData::GetTrajectory ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

//
// interface IAgVeVOTrajectoryTrackData wrapper method implementations
//

VARIANT_BOOL IAgVeVOTrajectoryTrackData::GetInheritFrom2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFrom2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOTrajectoryTrackData::PutInheritFrom2D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritFrom2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOTrajectoryPassDataPtr IAgVeVOTrajectoryTrackData::GetPassData ( ) {
    struct IAgVeVOTrajectoryPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryPassDataPtr(_result, false);
}

//
// interface IAgVeVOTrajectoryTickMarks wrapper method implementations
//

double IAgVeVOTrajectoryTickMarks::GetTimeBetweenTicks ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeBetweenTicks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOTrajectoryTickMarks::PutTimeBetweenTicks ( double pVal ) {
    HRESULT _hr = put_TimeBetweenTicks(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOPathTickMarksPtr IAgVeVOTrajectoryTickMarks::GetGroundTrack ( ) {
    struct IAgVeVOPathTickMarks * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPathTickMarksPtr(_result, false);
}

IAgVeVOPathTickMarksPtr IAgVeVOTrajectoryTickMarks::GetTrajectory ( ) {
    struct IAgVeVOPathTickMarks * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPathTickMarksPtr(_result, false);
}

//
// interface _IAgVeVOTrajectory wrapper method implementations
//

IAgVeVOTrajectoryTrackDataPtr _IAgVeVOTrajectory::GetTrackData ( ) {
    struct IAgVeVOTrajectoryTrackData * _result = 0;
    HRESULT _hr = get_TrackData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryTrackDataPtr(_result, false);
}

IAgVeVOTrajectoryTickMarksPtr _IAgVeVOTrajectory::GetTickMarks ( ) {
    struct IAgVeVOTrajectoryTickMarks * _result = 0;
    HRESULT _hr = get_TickMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryTickMarksPtr(_result, false);
}

//
// interface IAgVeVOTrajectory wrapper method implementations
//

IAgVeVOTrajectoryTrackDataPtr IAgVeVOTrajectory::GetTrackData ( ) {
    struct IAgVeVOTrajectoryTrackData * _result = 0;
    HRESULT _hr = get_TrackData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryTrackDataPtr(_result, false);
}

IAgVeVOTrajectoryTickMarksPtr IAgVeVOTrajectory::GetTickMarks ( ) {
    struct IAgVeVOTrajectoryTickMarks * _result = 0;
    HRESULT _hr = get_TickMarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryTickMarksPtr(_result, false);
}

//
// interface _IAgVeVOTrajectoryTrackData wrapper method implementations
//

VARIANT_BOOL _IAgVeVOTrajectoryTrackData::GetInheritFrom2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritFrom2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOTrajectoryTrackData::PutInheritFrom2D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritFrom2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOTrajectoryPassDataPtr _IAgVeVOTrajectoryTrackData::GetPassData ( ) {
    struct IAgVeVOTrajectoryPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryPassDataPtr(_result, false);
}

//
// interface _IAgVeVOTrajectoryPassData wrapper method implementations
//

IAgVeVOLeadTrailDataPtr _IAgVeVOTrajectoryPassData::GetGroundTrack ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

IAgVeVOLeadTrailDataPtr _IAgVeVOTrajectoryPassData::GetTrajectory ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

//
// interface _IAgVeVOLeadTrailData wrapper method implementations
//

enum AgELeadTrailData _IAgVeVOLeadTrailData::GetLeadDataType ( ) {
    enum AgELeadTrailData _result;
    HRESULT _hr = get_LeadDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgELeadTrailData _IAgVeVOLeadTrailData::GetTrailDataType ( ) {
    enum AgELeadTrailData _result;
    HRESULT _hr = get_TrailDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOLeadTrailData::SetLeadDataType ( enum AgELeadTrailData ELeadData ) {
    HRESULT _hr = raw_SetLeadDataType(ELeadData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeVOLeadTrailData::SetTrailDataType ( enum AgELeadTrailData ETrailData ) {
    HRESULT _hr = raw_SetTrailDataType(ETrailData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeLeadTrailDataPtr _IAgVeVOLeadTrailData::GetLeadData ( ) {
    struct IAgVeLeadTrailData * _result = 0;
    HRESULT _hr = get_LeadData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLeadTrailDataPtr(_result, false);
}

IAgVeLeadTrailDataPtr _IAgVeVOLeadTrailData::GetTrailData ( ) {
    struct IAgVeLeadTrailData * _result = 0;
    HRESULT _hr = get_TrailData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeLeadTrailDataPtr(_result, false);
}

VARIANT_BOOL _IAgVeVOLeadTrailData::GetHasLeadData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeadData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeVOLeadTrailData::GetHasTrailData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTrailData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeVOLeadTrailData::IsDataTypeSupported ( enum AgELeadTrailData EData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDataTypeSupported(EData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeVOLeadTrailData::GetSupportedDataTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedDataTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOLeadTrailData::SetTrailSameAsLead ( ) {
    HRESULT _hr = raw_SetTrailSameAsLead();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeVOTrajectoryTickMarks wrapper method implementations
//

double _IAgVeVOTrajectoryTickMarks::GetTimeBetweenTicks ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeBetweenTicks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOTrajectoryTickMarks::PutTimeBetweenTicks ( double pVal ) {
    HRESULT _hr = put_TimeBetweenTicks(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOPathTickMarksPtr _IAgVeVOTrajectoryTickMarks::GetGroundTrack ( ) {
    struct IAgVeVOPathTickMarks * _result = 0;
    HRESULT _hr = get_GroundTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPathTickMarksPtr(_result, false);
}

IAgVeVOPathTickMarksPtr _IAgVeVOTrajectoryTickMarks::GetTrajectory ( ) {
    struct IAgVeVOPathTickMarks * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPathTickMarksPtr(_result, false);
}

//
// interface _IAgVeVOPathTickMarks wrapper method implementations
//

VARIANT_BOOL _IAgVeVOPathTickMarks::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOPathTickMarks::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETickData _IAgVeVOPathTickMarks::GetTickDataType ( ) {
    enum AgETickData _result;
    HRESULT _hr = get_TickDataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOPathTickMarks::SetTickDataType ( enum AgETickData TickData ) {
    HRESULT _hr = raw_SetTickDataType(TickData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeVOPathTickMarks::IsTickDataTypeSupported ( enum AgETickData TickData ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTickDataTypeSupported(TickData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeVOPathTickMarks::GetTickDataSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TickDataSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOTickDataPtr _IAgVeVOPathTickMarks::GetTickData ( ) {
    struct IAgVeVOTickData * _result = 0;
    HRESULT _hr = get_TickData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTickDataPtr(_result, false);
}

//
// interface _IAgVeVOWaypointMarkersElement wrapper method implementations
//

_variant_t _IAgVeVOWaypointMarkersElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum AgERouteVOMarkerType _IAgVeVOWaypointMarkersElement::GetMarkerType ( ) {
    enum AgERouteVOMarkerType _result;
    HRESULT _hr = get_MarkerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOWaypointMarkersElement::PutMarkerType ( enum AgERouteVOMarkerType pVal ) {
    HRESULT _hr = put_MarkerType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgE3dMarkerShape _IAgVeVOWaypointMarkersElement::GetShape ( ) {
    enum AgE3dMarkerShape _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOWaypointMarkersElement::PutShape ( enum AgE3dMarkerShape pVal ) {
    HRESULT _hr = put_Shape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOWaypointMarkersElement::GetMarkerFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOWaypointMarkersElement::PutMarkerFile ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeVOWaypointMarkersElement::GetPixelSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOWaypointMarkersElement::PutPixelSize ( long pVal ) {
    HRESULT _hr = put_PixelSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOWaypointMarkersElement::GetIsTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTransparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOWaypointMarkersElement::PutIsTransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTransparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgVeVOWaypointMarkersElement::SetImageFile ( _bstr_t MarkerFile ) {
    HRESULT _hr = raw_SetImageFile(MarkerFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeVOWaypointMarkersElement wrapper method implementations
//

_variant_t IAgVeVOWaypointMarkersElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum AgERouteVOMarkerType IAgVeVOWaypointMarkersElement::GetMarkerType ( ) {
    enum AgERouteVOMarkerType _result;
    HRESULT _hr = get_MarkerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOWaypointMarkersElement::PutMarkerType ( enum AgERouteVOMarkerType pVal ) {
    HRESULT _hr = put_MarkerType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgE3dMarkerShape IAgVeVOWaypointMarkersElement::GetShape ( ) {
    enum AgE3dMarkerShape _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOWaypointMarkersElement::PutShape ( enum AgE3dMarkerShape pVal ) {
    HRESULT _hr = put_Shape(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgVeVOWaypointMarkersElement::GetMarkerFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeVOWaypointMarkersElement::PutMarkerFile ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVeVOWaypointMarkersElement::GetPixelSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOWaypointMarkersElement::PutPixelSize ( long pVal ) {
    HRESULT _hr = put_PixelSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeVOWaypointMarkersElement::GetIsTransparent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTransparent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOWaypointMarkersElement::PutIsTransparent ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsTransparent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgVeVOWaypointMarkersElement::SetImageFile ( _bstr_t MarkerFile ) {
    HRESULT _hr = raw_SetImageFile(MarkerFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeVOWaypointMarkersCollection wrapper method implementations
//

long IAgVeVOWaypointMarkersCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOWaypointMarkersElementPtr IAgVeVOWaypointMarkersCollection::GetItem ( long Index ) {
    struct IAgVeVOWaypointMarkersElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOWaypointMarkersElementPtr(_result, false);
}

IUnknownPtr IAgVeVOWaypointMarkersCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgVeVORoute wrapper method implementations
//

VARIANT_BOOL _IAgVeVORoute::GetInheritTrackDataFrom2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritTrackDataFrom2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVORoute::PutInheritTrackDataFrom2D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritTrackDataFrom2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOLeadTrailDataPtr _IAgVeVORoute::GetTrackData ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_TrackData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

IAgVeVOWaypointMarkersCollectionPtr _IAgVeVORoute::GetWaypointMarkers ( ) {
    struct IAgVeVOWaypointMarkersCollection * _result = 0;
    HRESULT _hr = get_WaypointMarkers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOWaypointMarkersCollectionPtr(_result, false);
}

//
// interface IAgVeVORoute wrapper method implementations
//

VARIANT_BOOL IAgVeVORoute::GetInheritTrackDataFrom2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InheritTrackDataFrom2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVORoute::PutInheritTrackDataFrom2D ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_InheritTrackDataFrom2D(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOLeadTrailDataPtr IAgVeVORoute::GetTrackData ( ) {
    struct IAgVeVOLeadTrailData * _result = 0;
    HRESULT _hr = get_TrackData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOLeadTrailDataPtr(_result, false);
}

IAgVeVOWaypointMarkersCollectionPtr IAgVeVORoute::GetWaypointMarkers ( ) {
    struct IAgVeVOWaypointMarkersCollection * _result = 0;
    HRESULT _hr = get_WaypointMarkers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOWaypointMarkersCollectionPtr(_result, false);
}

//
// interface _IAgVOLabelSwapDistance wrapper method implementations
//

double _IAgVOLabelSwapDistance::GetDistanceValue ( ) {
    double _result = 0;
    HRESULT _hr = get_DistanceValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOLabelSwapDistance::PutDistanceValue ( double pVal ) {
    HRESULT _hr = put_DistanceValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgVOLabelSwapDistance::SetDistanceLevel ( enum AgEVOLabelSwapDistance Val ) {
    HRESULT _hr = raw_SetDistanceLevel(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEVOLabelSwapDistance _IAgVOLabelSwapDistance::GetDistanceLevel ( ) {
    enum AgEVOLabelSwapDistance _result;
    HRESULT _hr = get_DistanceLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeVODropLinePosItem wrapper method implementations
//

enum AgEVeVODropLineType _IAgVeVODropLinePosItem::GetType ( ) {
    enum AgEVeVODropLineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeVODropLinePosItem::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePosItem::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVODropLinePosItem::GetUse2DColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use2DColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePosItem::PutUse2DColor ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use2DColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVODropLinePosItem::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePosItem::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVODropLinePosItem::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePosItem::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeVODropLinePosItem::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePosItem::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVODropLinePathItem wrapper method implementations
//

enum AgEVeVODropLineType _IAgVeVODropLinePathItem::GetType ( ) {
    enum AgEVeVODropLineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeVODropLinePathItem::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePathItem::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVODropLinePathItem::GetUse2DColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Use2DColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePathItem::PutUse2DColor ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Use2DColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVODropLinePathItem::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePathItem::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVODropLinePathItem::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePathItem::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVODropLinePathItem::GetInterval ( ) {
    double _result = 0;
    HRESULT _hr = get_Interval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePathItem::PutInterval ( double pVal ) {
    HRESULT _hr = put_Interval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeVODropLinePathItem::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVODropLinePathItem::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOOrbitDropLines wrapper method implementations
//

IAgVeVODropLinePosItemCollectionPtr _IAgVeVOOrbitDropLines::GetPosition ( ) {
    struct IAgVeVODropLinePosItemCollection * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePosItemCollectionPtr(_result, false);
}

IAgVeVODropLinePathItemCollectionPtr _IAgVeVOOrbitDropLines::GetOrbit ( ) {
    struct IAgVeVODropLinePathItemCollection * _result = 0;
    HRESULT _hr = get_Orbit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePathItemCollectionPtr(_result, false);
}

//
// interface _IAgVeVORouteDropLines wrapper method implementations
//

IAgVeVODropLinePosItemCollectionPtr _IAgVeVORouteDropLines::GetPosition ( ) {
    struct IAgVeVODropLinePosItemCollection * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePosItemCollectionPtr(_result, false);
}

IAgVeVODropLinePathItemCollectionPtr _IAgVeVORouteDropLines::GetRoute ( ) {
    struct IAgVeVODropLinePathItemCollection * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePathItemCollectionPtr(_result, false);
}

//
// interface IAgVeVORouteDropLines wrapper method implementations
//

IAgVeVODropLinePosItemCollectionPtr IAgVeVORouteDropLines::GetPosition ( ) {
    struct IAgVeVODropLinePosItemCollection * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePosItemCollectionPtr(_result, false);
}

IAgVeVODropLinePathItemCollectionPtr IAgVeVORouteDropLines::GetRoute ( ) {
    struct IAgVeVODropLinePathItemCollection * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePathItemCollectionPtr(_result, false);
}

//
// interface _IAgVeVOTrajectoryDropLines wrapper method implementations
//

IAgVeVODropLinePosItemCollectionPtr _IAgVeVOTrajectoryDropLines::GetPosition ( ) {
    struct IAgVeVODropLinePosItemCollection * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePosItemCollectionPtr(_result, false);
}

IAgVeVODropLinePathItemCollectionPtr _IAgVeVOTrajectoryDropLines::GetTrajectory ( ) {
    struct IAgVeVODropLinePathItemCollection * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePathItemCollectionPtr(_result, false);
}

//
// interface IAgVeVOTrajectoryDropLines wrapper method implementations
//

IAgVeVODropLinePosItemCollectionPtr IAgVeVOTrajectoryDropLines::GetPosition ( ) {
    struct IAgVeVODropLinePosItemCollection * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePosItemCollectionPtr(_result, false);
}

IAgVeVODropLinePathItemCollectionPtr IAgVeVOTrajectoryDropLines::GetTrajectory ( ) {
    struct IAgVeVODropLinePathItemCollection * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePathItemCollectionPtr(_result, false);
}

//
// interface _IAgVeTrajectoryVOModel wrapper method implementations
//

VARIANT_BOOL _IAgVeTrajectoryVOModel::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeTrajectoryVOModel::PutVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_Visible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeTrajectoryVOModel::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeTrajectoryVOModel::PutScaleValue ( double pScale ) {
    HRESULT _hr = put_ScaleValue(pScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVODetailThresholdPtr _IAgVeTrajectoryVOModel::GetDetailThreshold ( ) {
    struct IAgVODetailThreshold * _result = 0;
    HRESULT _hr = get_DetailThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODetailThresholdPtr(_result, false);
}

IAgVOModelDataPtr _IAgVeTrajectoryVOModel::GetModelData ( ) {
    struct IAgVOModelData * _result = 0;
    HRESULT _hr = get_ModelData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelDataPtr(_result, false);
}

enum AgEModelType _IAgVeTrajectoryVOModel::GetModelType ( ) {
    enum AgEModelType _result;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeTrajectoryVOModel::PutModelType ( enum AgEModelType pType ) {
    HRESULT _hr = put_ModelType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOModelArticPtr _IAgVeTrajectoryVOModel::GetArticulation ( ) {
    struct IAgVOModelArtic * _result = 0;
    HRESULT _hr = get_Articulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelArticPtr(_result, false);
}

IAgVOMarkerPtr _IAgVeTrajectoryVOModel::GetTrajectoryMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_TrajectoryMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

IAgVOMarkerPtr _IAgVeTrajectoryVOModel::GetGroundMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_GroundMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

VARIANT_BOOL _IAgVeTrajectoryVOModel::GetIsPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeTrajectoryVOModel::PutIsPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeTrajectoryVOModel::GetPointSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeTrajectoryVOModel::PutPointSize ( const _variant_t & pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeTrajectoryVOModel wrapper method implementations
//

IAgVOMarkerPtr IAgVeTrajectoryVOModel::GetTrajectoryMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_TrajectoryMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

IAgVOMarkerPtr IAgVeTrajectoryVOModel::GetGroundMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_GroundMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

VARIANT_BOOL IAgVeTrajectoryVOModel::GetIsPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeTrajectoryVOModel::PutIsPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeTrajectoryVOModel::GetPointSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeTrajectoryVOModel::PutPointSize ( const _variant_t & pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeRouteVOModel wrapper method implementations
//

VARIANT_BOOL _IAgVeRouteVOModel::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRouteVOModel::PutVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_Visible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeRouteVOModel::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRouteVOModel::PutScaleValue ( double pScale ) {
    HRESULT _hr = put_ScaleValue(pScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVODetailThresholdPtr _IAgVeRouteVOModel::GetDetailThreshold ( ) {
    struct IAgVODetailThreshold * _result = 0;
    HRESULT _hr = get_DetailThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODetailThresholdPtr(_result, false);
}

IAgVOModelDataPtr _IAgVeRouteVOModel::GetModelData ( ) {
    struct IAgVOModelData * _result = 0;
    HRESULT _hr = get_ModelData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelDataPtr(_result, false);
}

enum AgEModelType _IAgVeRouteVOModel::GetModelType ( ) {
    enum AgEModelType _result;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRouteVOModel::PutModelType ( enum AgEModelType pType ) {
    HRESULT _hr = put_ModelType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOModelArticPtr _IAgVeRouteVOModel::GetArticulation ( ) {
    struct IAgVOModelArtic * _result = 0;
    HRESULT _hr = get_Articulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelArticPtr(_result, false);
}

IAgVOMarkerPtr _IAgVeRouteVOModel::GetRouteMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_RouteMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

VARIANT_BOOL _IAgVeRouteVOModel::GetIsPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeRouteVOModel::PutIsPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeRouteVOModel::GetPointSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeRouteVOModel::PutPointSize ( const _variant_t & pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeRouteVOModel wrapper method implementations
//

IAgVOMarkerPtr IAgVeRouteVOModel::GetRouteMarker ( ) {
    struct IAgVOMarker * _result = 0;
    HRESULT _hr = get_RouteMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerPtr(_result, false);
}

VARIANT_BOOL IAgVeRouteVOModel::GetIsPointVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeRouteVOModel::PutIsPointVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeRouteVOModel::GetPointSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeRouteVOModel::PutPointSize ( const _variant_t & pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOBPlaneTemplateDisplayElement wrapper method implementations
//

VARIANT_BOOL _IAgVeVOBPlaneTemplateDisplayElement::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTemplateDisplayElement::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOBPlaneTemplateDisplayElement::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

OLE_COLOR _IAgVeVOBPlaneTemplateDisplayElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTemplateDisplayElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlaneTemplateDisplayElement::GetScaleFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTemplateDisplayElement::PutScaleFactor ( double pVal ) {
    HRESULT _hr = put_ScaleFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOBPlaneTemplateDisplayElement::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTemplateDisplayElement::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOBPlaneTemplate wrapper method implementations
//

_bstr_t _IAgVeVOBPlaneTemplate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBPlaneTemplate::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOBPlaneTemplate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBPlaneTemplate::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOBPlaneTemplate::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBPlaneTemplate::PutCentralBody ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBody(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeVOBPlaneTemplate::GetAvailableCentralBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableCentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVeVOBPlaneTemplate::GetReferenceVector ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBPlaneTemplate::PutReferenceVector ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceVector(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeVOBPlaneTemplate::GetAvailableVectors ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableVectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeVOBPlaneTemplate::GetIsCartesianGridVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCartesianGridVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTemplate::PutIsCartesianGridVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsCartesianGridVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOBPlaneTemplate::GetIsPolarGridVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPolarGridVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTemplate::PutIsPolarGridVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPolarGridVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlaneTemplate::GetGridSpacing ( ) {
    double _result = 0;
    HRESULT _hr = get_GridSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTemplate::PutGridSpacing ( double pVal ) {
    HRESULT _hr = put_GridSpacing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOBPlaneTemplateDisplayCollectionPtr _IAgVeVOBPlaneTemplate::GetDisplayElements ( ) {
    struct IAgVeVOBPlaneTemplateDisplayCollection * _result = 0;
    HRESULT _hr = get_DisplayElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTemplateDisplayCollectionPtr(_result, false);
}

//
// interface _IAgVeVOBPlaneEvent wrapper method implementations
//

_variant_t _IAgVeVOBPlaneEvent::GetEventEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EventEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeVOBPlaneEvent::PutEventEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_EventEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlaneEvent::GetBeforeEvent ( ) {
    double _result = 0;
    HRESULT _hr = get_BeforeEvent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneEvent::PutBeforeEvent ( double pVal ) {
    HRESULT _hr = put_BeforeEvent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlaneEvent::GetAfterEvent ( ) {
    double _result = 0;
    HRESULT _hr = get_AfterEvent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneEvent::PutAfterEvent ( double pVal ) {
    HRESULT _hr = put_AfterEvent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOBPlaneEvent::GetAlwaysDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlwaysDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneEvent::PutAlwaysDisplay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AlwaysDisplay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOBPlanePoint wrapper method implementations
//

_bstr_t _IAgVeVOBPlanePoint::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBPlanePoint::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlanePoint::GetBMulT ( ) {
    double _result = 0;
    HRESULT _hr = get_BMulT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlanePoint::PutBMulT ( double pVal ) {
    HRESULT _hr = put_BMulT(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlanePoint::GetBMulR ( ) {
    double _result = 0;
    HRESULT _hr = get_BMulR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlanePoint::PutBMulR ( double pVal ) {
    HRESULT _hr = put_BMulR(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlanePoint::GetBMag ( ) {
    double _result = 0;
    HRESULT _hr = get_BMag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlanePoint::PutBMag ( double pVal ) {
    HRESULT _hr = put_BMag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlanePoint::GetTheta ( ) {
    double _result = 0;
    HRESULT _hr = get_Theta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlanePoint::PutTheta ( double pVal ) {
    HRESULT _hr = put_Theta(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOBPlaneTargetPointPositionCartesian wrapper method implementations
//

double _IAgVeVOBPlaneTargetPointPositionCartesian::GetBMulT ( ) {
    double _result = 0;
    HRESULT _hr = get_BMulT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTargetPointPositionCartesian::PutBMulT ( double pVal ) {
    HRESULT _hr = put_BMulT(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlaneTargetPointPositionCartesian::GetBMulR ( ) {
    double _result = 0;
    HRESULT _hr = get_BMulR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTargetPointPositionCartesian::PutBMulR ( double pVal ) {
    HRESULT _hr = put_BMulR(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOBPlaneTargetPointPositionCartesian wrapper method implementations
//

double IAgVeVOBPlaneTargetPointPositionCartesian::GetBMulT ( ) {
    double _result = 0;
    HRESULT _hr = get_BMulT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTargetPointPositionCartesian::PutBMulT ( double pVal ) {
    HRESULT _hr = put_BMulT(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlaneTargetPointPositionCartesian::GetBMulR ( ) {
    double _result = 0;
    HRESULT _hr = get_BMulR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTargetPointPositionCartesian::PutBMulR ( double pVal ) {
    HRESULT _hr = put_BMulR(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOBPlaneTargetPointPositionPolar wrapper method implementations
//

double _IAgVeVOBPlaneTargetPointPositionPolar::GetBMag ( ) {
    double _result = 0;
    HRESULT _hr = get_BMag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTargetPointPositionPolar::PutBMag ( double pVal ) {
    HRESULT _hr = put_BMag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlaneTargetPointPositionPolar::GetTheta ( ) {
    double _result = 0;
    HRESULT _hr = get_Theta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTargetPointPositionPolar::PutTheta ( double pVal ) {
    HRESULT _hr = put_Theta(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeVOBPlaneTargetPointPositionPolar wrapper method implementations
//

double IAgVeVOBPlaneTargetPointPositionPolar::GetBMag ( ) {
    double _result = 0;
    HRESULT _hr = get_BMag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTargetPointPositionPolar::PutBMag ( double pVal ) {
    HRESULT _hr = put_BMag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeVOBPlaneTargetPointPositionPolar::GetTheta ( ) {
    double _result = 0;
    HRESULT _hr = get_Theta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOBPlaneTargetPointPositionPolar::PutTheta ( double pVal ) {
    HRESULT _hr = put_Theta(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeVOBPlaneTargetPoint wrapper method implementations
//

VARIANT_BOOL _IAgVeVOBPlaneTargetPoint::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTargetPoint::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOBPlaneTargetPoint::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneTargetPoint::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeVOBPlaneTargetPointPosition _IAgVeVOBPlaneTargetPoint::GetPositionType ( ) {
    enum AgEVeVOBPlaneTargetPointPosition _result;
    HRESULT _hr = get_PositionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOBPlaneTargetPoint::SetPositionType ( enum AgEVeVOBPlaneTargetPointPosition Position ) {
    HRESULT _hr = raw_SetPositionType(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeVOBPlaneTargetPoint::IsPositionTypeSupported ( enum AgEVeVOBPlaneTargetPointPosition Position ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPositionTypeSupported(Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeVOBPlaneTargetPoint::GetPositionSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PositionSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOBPlaneTargetPointPositionPtr _IAgVeVOBPlaneTargetPoint::GetPosition ( ) {
    struct IAgVeVOBPlaneTargetPointPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTargetPointPositionPtr(_result, false);
}

//
// interface _IAgVeVOBPlaneInstance wrapper method implementations
//

VARIANT_BOOL _IAgVeVOBPlaneInstance::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneInstance::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOBPlaneInstance::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBPlaneInstance::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOBPlaneInstance::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBPlaneInstance::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOBPlaneInstance::GetDefinition ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Definition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgVeVOBPlaneInstance::GetEventName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EventName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBPlaneInstance::PutEventName ( _bstr_t pVal ) {
    HRESULT _hr = put_EventName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOBPlaneEventPtr _IAgVeVOBPlaneInstance::GetEvent ( ) {
    struct IAgVeVOBPlaneEvent * _result = 0;
    HRESULT _hr = get_Event(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneEventPtr(_result, false);
}

IAgVeVOBPlaneTargetPointPtr _IAgVeVOBPlaneInstance::GetTargetPoint ( ) {
    struct IAgVeVOBPlaneTargetPoint * _result = 0;
    HRESULT _hr = get_TargetPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTargetPointPtr(_result, false);
}

VARIANT_BOOL _IAgVeVOBPlaneInstance::GetIsLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneInstance::PutIsLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeVOBPlaneInstance::GetPointSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneInstance::PutPointSize ( double pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeVOBPlaneInstance::GetIsConnectPointsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConnectPointsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneInstance::PutIsConnectPointsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsConnectPointsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeVOBPlaneInstance::GetConnectPointsColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ConnectPointsColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneInstance::PutConnectPointsColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ConnectPointsColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeVOBPlaneInstance::GetConnectPointLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_ConnectPointLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOBPlaneInstance::PutConnectPointLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_ConnectPointLineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeVOBPlaneInstance::GetVOWindow ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VOWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeVOBPlaneInstance::PutVOWindow ( _bstr_t pVal ) {
    HRESULT _hr = put_VOWindow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeVOBPlaneInstance::GetAvailableVOWindows ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableVOWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOBPlanePointCollectionPtr _IAgVeVOBPlaneInstance::GetAdditionalPoints ( ) {
    struct IAgVeVOBPlanePointCollection * _result = 0;
    HRESULT _hr = get_AdditionalPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlanePointCollectionPtr(_result, false);
}

//
// interface _IAgVeVOBPlanes wrapper method implementations
//

IAgVeVOBPlaneTemplatesCollectionPtr _IAgVeVOBPlanes::GetTemplates ( ) {
    struct IAgVeVOBPlaneTemplatesCollection * _result = 0;
    HRESULT _hr = get_Templates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneTemplatesCollectionPtr(_result, false);
}

IAgVeVOBPlaneInstancesCollectionPtr _IAgVeVOBPlanes::GetInstances ( ) {
    struct IAgVeVOBPlaneInstancesCollection * _result = 0;
    HRESULT _hr = get_Instances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlaneInstancesCollectionPtr(_result, false);
}

//
// interface IAgLvGraphics wrapper method implementations
//

enum AgEVeGfxAttributes IAgLvGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgLvGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgLvGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgLvGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr IAgLvGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxTrajectoryPassDataPtr IAgLvGraphics::GetPassData ( ) {
    struct IAgVeGfxTrajectoryPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTrajectoryPassDataPtr(_result, false);
}

IAgVeGfxTrajectoryResolutionPtr IAgLvGraphics::GetResolution ( ) {
    struct IAgVeGfxTrajectoryResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTrajectoryResolutionPtr(_result, false);
}

IAgVeGfxElevContoursPtr IAgLvGraphics::GetElevContours ( ) {
    struct IAgVeGfxElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevContoursPtr(_result, false);
}

IAgGfxRangeContoursPtr IAgLvGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr IAgLvGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxSwathPtr IAgLvGraphics::GetSwath ( ) {
    struct IAgVeGfxSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSwathPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr IAgLvGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

VARIANT_BOOL IAgLvGraphics::GetUseInstName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLvGraphics::PutUseInstName ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseInstName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr IAgLvGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

VARIANT_BOOL IAgLvGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLvGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgLvGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgLvGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxSAAPtr IAgLvGraphics::GetSAA ( ) {
    struct IAgVeGfxSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSAAPtr(_result, false);
}

//
// interface IAgLvExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr IAgLvExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr IAgLvExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr IAgLvExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgLvGraphics wrapper method implementations
//

enum AgEVeGfxAttributes _IAgLvGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgLvGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgLvGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgLvGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr _IAgLvGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxTrajectoryPassDataPtr _IAgLvGraphics::GetPassData ( ) {
    struct IAgVeGfxTrajectoryPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTrajectoryPassDataPtr(_result, false);
}

IAgVeGfxTrajectoryResolutionPtr _IAgLvGraphics::GetResolution ( ) {
    struct IAgVeGfxTrajectoryResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTrajectoryResolutionPtr(_result, false);
}

IAgVeGfxElevContoursPtr _IAgLvGraphics::GetElevContours ( ) {
    struct IAgVeGfxElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevContoursPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgLvGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr _IAgLvGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxSwathPtr _IAgLvGraphics::GetSwath ( ) {
    struct IAgVeGfxSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSwathPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr _IAgLvGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgLvGraphics::GetUseInstName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLvGraphics::PutUseInstName ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseInstName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr _IAgLvGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgLvGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLvGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgLvGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLvGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxSAAPtr _IAgLvGraphics::GetSAA ( ) {
    struct IAgVeGfxSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSAAPtr(_result, false);
}

//
// interface IAgGreatArcGraphics wrapper method implementations
//

enum AgEVeGfxAttributes IAgGreatArcGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgGreatArcGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgGreatArcGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgGreatArcGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr IAgGreatArcGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxRoutePassDataPtr IAgGreatArcGraphics::GetPassData ( ) {
    struct IAgVeGfxRoutePassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxRoutePassDataPtr(_result, false);
}

IAgVeGfxWaypointMarkerPtr IAgGreatArcGraphics::GetWaypointMarker ( ) {
    struct IAgVeGfxWaypointMarker * _result = 0;
    HRESULT _hr = get_WaypointMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxWaypointMarkerPtr(_result, false);
}

IAgVeGfxRouteResolutionPtr IAgGreatArcGraphics::GetResolution ( ) {
    struct IAgVeGfxRouteResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxRouteResolutionPtr(_result, false);
}

IAgGfxRangeContoursPtr IAgGreatArcGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr IAgGreatArcGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr IAgGreatArcGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

IAgLabelNoteCollectionPtr IAgGreatArcGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

VARIANT_BOOL IAgGreatArcGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgGreatArcGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgGreatArcGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgGreatArcGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgGvExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr IAgGvExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr IAgGvExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr IAgGvExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface IAgGreatArcVehicle wrapper method implementations
//

enum AgEVePropagatorType IAgGreatArcVehicle::GetRouteType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_RouteType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgGreatArcVehicle::SetRouteType ( enum AgEVePropagatorType Route ) {
    HRESULT _hr = raw_SetRouteType(Route);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgGreatArcVehicle::IsRouteTypeSupported ( enum AgEVePropagatorType Route ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRouteTypeSupported(Route, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgGreatArcVehicle::GetRouteSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RouteSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVePropagatorPtr IAgGreatArcVehicle::GetRoute ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude IAgGreatArcVehicle::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgGreatArcVehicle::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgGreatArcVehicle::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgGreatArcVehicle::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr IAgGreatArcVehicle::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr IAgGreatArcVehicle::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgGreatArcVehicle::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

//
// interface _IAgGvGraphics wrapper method implementations
//

enum AgEVeGfxAttributes _IAgGvGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgGvGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgGvGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgGvGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr _IAgGvGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxRoutePassDataPtr _IAgGvGraphics::GetPassData ( ) {
    struct IAgVeGfxRoutePassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxRoutePassDataPtr(_result, false);
}

IAgVeGfxWaypointMarkerPtr _IAgGvGraphics::GetWaypointMarker ( ) {
    struct IAgVeGfxWaypointMarker * _result = 0;
    HRESULT _hr = get_WaypointMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxWaypointMarkerPtr(_result, false);
}

IAgVeGfxRouteResolutionPtr _IAgGvGraphics::GetResolution ( ) {
    struct IAgVeGfxRouteResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxRouteResolutionPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgGvGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr _IAgGvGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr _IAgGvGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

IAgLabelNoteCollectionPtr _IAgGvGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgGvGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgGvGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgGvGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgGvGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMsGraphics wrapper method implementations
//

enum AgEVeGfxAttributes IAgMsGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgMsGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgMsGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgMsGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr IAgMsGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxTrajectoryPassDataPtr IAgMsGraphics::GetPassData ( ) {
    struct IAgVeGfxTrajectoryPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTrajectoryPassDataPtr(_result, false);
}

IAgVeGfxTrajectoryResolutionPtr IAgMsGraphics::GetResolution ( ) {
    struct IAgVeGfxTrajectoryResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTrajectoryResolutionPtr(_result, false);
}

IAgVeGfxElevContoursPtr IAgMsGraphics::GetElevContours ( ) {
    struct IAgVeGfxElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevContoursPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr IAgMsGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

IAgGfxRangeContoursPtr IAgMsGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr IAgMsGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxSwathPtr IAgMsGraphics::GetSwath ( ) {
    struct IAgVeGfxSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSwathPtr(_result, false);
}

IAgLabelNoteCollectionPtr IAgMsGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

VARIANT_BOOL IAgMsGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMsGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgMsGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgMsGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxSAAPtr IAgMsGraphics::GetSAA ( ) {
    struct IAgVeGfxSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSAAPtr(_result, false);
}

//
// interface IAgMsExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr IAgMsExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr IAgMsExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr IAgMsExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgMsGraphics wrapper method implementations
//

enum AgEVeGfxAttributes _IAgMsGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgMsGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgMsGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgMsGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr _IAgMsGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxTrajectoryPassDataPtr _IAgMsGraphics::GetPassData ( ) {
    struct IAgVeGfxTrajectoryPassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTrajectoryPassDataPtr(_result, false);
}

IAgVeGfxTrajectoryResolutionPtr _IAgMsGraphics::GetResolution ( ) {
    struct IAgVeGfxTrajectoryResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxTrajectoryResolutionPtr(_result, false);
}

IAgVeGfxElevContoursPtr _IAgMsGraphics::GetElevContours ( ) {
    struct IAgVeGfxElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevContoursPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr _IAgMsGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgMsGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr _IAgMsGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxSwathPtr _IAgMsGraphics::GetSwath ( ) {
    struct IAgVeGfxSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSwathPtr(_result, false);
}

IAgLabelNoteCollectionPtr _IAgMsGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgMsGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMsGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgMsGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMsGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGfxSAAPtr _IAgMsGraphics::GetSAA ( ) {
    struct IAgVeGfxSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSAAPtr(_result, false);
}

//
// interface IAgAcGraphics wrapper method implementations
//

IAgVeGfxElevContoursPtr IAgAcGraphics::GetElevContours ( ) {
    struct IAgVeGfxElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevContoursPtr(_result, false);
}

IAgVeGfxSwathPtr IAgAcGraphics::GetSwath ( ) {
    struct IAgVeGfxSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSwathPtr(_result, false);
}

//
// interface IAgAcExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr IAgAcExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr IAgAcExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr IAgAcExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgAcGraphics wrapper method implementations
//

enum AgEVeGfxAttributes _IAgAcGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAcGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgAcGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgAcGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr _IAgAcGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxRoutePassDataPtr _IAgAcGraphics::GetPassData ( ) {
    struct IAgVeGfxRoutePassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxRoutePassDataPtr(_result, false);
}

IAgVeGfxWaypointMarkerPtr _IAgAcGraphics::GetWaypointMarker ( ) {
    struct IAgVeGfxWaypointMarker * _result = 0;
    HRESULT _hr = get_WaypointMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxWaypointMarkerPtr(_result, false);
}

IAgVeGfxRouteResolutionPtr _IAgAcGraphics::GetResolution ( ) {
    struct IAgVeGfxRouteResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxRouteResolutionPtr(_result, false);
}

IAgVeGfxElevContoursPtr _IAgAcGraphics::GetElevContours ( ) {
    struct IAgVeGfxElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxElevContoursPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgAcGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr _IAgAcGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxSwathPtr _IAgAcGraphics::GetSwath ( ) {
    struct IAgVeGfxSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxSwathPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr _IAgAcGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

IAgLabelNoteCollectionPtr _IAgAcGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgAcGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAcGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAcGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgAcGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgShExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr IAgShExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr IAgShExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr IAgShExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgShGraphics wrapper method implementations
//

enum AgEVeGfxAttributes _IAgShGraphics::GetAttributesType ( ) {
    enum AgEVeGfxAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgShGraphics::SetAttributesType ( enum AgEVeGfxAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgShGraphics::IsAttributesTypeSupported ( enum AgEVeGfxAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgShGraphics::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGfxAttributesPtr _IAgShGraphics::GetAttributes ( ) {
    struct IAgVeGfxAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesPtr(_result, false);
}

IAgVeGfxRoutePassDataPtr _IAgShGraphics::GetPassData ( ) {
    struct IAgVeGfxRoutePassData * _result = 0;
    HRESULT _hr = get_PassData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxRoutePassDataPtr(_result, false);
}

IAgVeGfxWaypointMarkerPtr _IAgShGraphics::GetWaypointMarker ( ) {
    struct IAgVeGfxWaypointMarker * _result = 0;
    HRESULT _hr = get_WaypointMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxWaypointMarkerPtr(_result, false);
}

IAgVeGfxRouteResolutionPtr _IAgShGraphics::GetResolution ( ) {
    struct IAgVeGfxRouteResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxRouteResolutionPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgShGraphics::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

IAgVeGfxLightingPtr _IAgShGraphics::GetLighting ( ) {
    struct IAgVeGfxLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxLightingPtr(_result, false);
}

IAgVeGfxGroundEllipsesCollectionPtr _IAgShGraphics::GetGroundEllipses ( ) {
    struct IAgVeGfxGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxGroundEllipsesCollectionPtr(_result, false);
}

IAgLabelNoteCollectionPtr _IAgShGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgShGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgShGraphics::PutUseInstNameLabel ( VARIANT_BOOL pUseInstName ) {
    HRESULT _hr = put_UseInstNameLabel(pUseInstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgShGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgShGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoTrackPoint wrapper method implementations
//

_variant_t _IAgMtoTrackPoint::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double _IAgMtoTrackPoint::GetLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoTrackPoint::PutLatitude ( double pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoTrackPoint::GetLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoTrackPoint::PutLongitude ( double pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoTrackPoint::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoTrackPoint::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgPositionPtr _IAgMtoTrackPoint::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

int _IAgMtoTrackPoint::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgMtoTrackPoint wrapper method implementations
//

_variant_t IAgMtoTrackPoint::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double IAgMtoTrackPoint::GetLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoTrackPoint::PutLatitude ( double pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoTrackPoint::GetLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoTrackPoint::PutLongitude ( double pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoTrackPoint::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoTrackPoint::PutAltitude ( double pVal ) {
    HRESULT _hr = put_Altitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgPositionPtr IAgMtoTrackPoint::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

int IAgMtoTrackPoint::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgMtoTrackPointCollection wrapper method implementations
//

long IAgMtoTrackPointCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgMtoTrackPointPtr IAgMtoTrackPointCollection::GetItem ( long Index ) {
    struct IAgMtoTrackPoint * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointPtr(_result, false);
}

IUnknownPtr IAgMtoTrackPointCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgMtoTrackPointCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgMtoTrackPointCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgMtoTrackPointPtr IAgMtoTrackPointCollection::Add ( const _variant_t & Time ) {
    struct IAgMtoTrackPoint * _result = 0;
    HRESULT _hr = raw_Add(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointPtr(_result, false);
}

IAgMtoTrackPointPtr IAgMtoTrackPointCollection::AddPoint ( const _variant_t & Time, double Latitude, double Longitude, double Altitude ) {
    struct IAgMtoTrackPoint * _result = 0;
    HRESULT _hr = raw_AddPoint(Time, Latitude, Longitude, Altitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointPtr(_result, false);
}

HRESULT IAgMtoTrackPointCollection::LoadPoints ( _bstr_t MTOTrackPoints ) {
    HRESULT _hr = raw_LoadPoints(MTOTrackPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgMtoTrackPointCollection::Extend ( SAFEARRAY * * TimeVals, SAFEARRAY * * LatVals, SAFEARRAY * * LonVals, SAFEARRAY * * AltVals ) {
    HRESULT _hr = raw_Extend(TimeVals, LatVals, LonVals, AltVals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgMtoTrackPointCollection::GetRecycling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Recycling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoTrackPointCollection::PutRecycling ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Recycling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgMtoTrackPointCollection::InsertPoint ( const _variant_t & Time, double Latitude, double Longitude, double Altitude ) {
    HRESULT _hr = raw_InsertPoint(Time, Latitude, Longitude, Altitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgMtoTrack wrapper method implementations
//

_bstr_t _IAgMtoTrack::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMtoTrack::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoTrack::GetInterpolate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Interpolate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoTrack::PutInterpolate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Interpolate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgMtoTrack::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgMtoTrackPointCollectionPtr _IAgMtoTrack::GetPoints ( ) {
    struct IAgMtoTrackPointCollection * _result = 0;
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointCollectionPtr(_result, false);
}

//
// interface IAgMtoTrack wrapper method implementations
//

_bstr_t IAgMtoTrack::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgMtoTrack::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoTrack::GetInterpolate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Interpolate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoTrack::PutInterpolate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Interpolate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgMtoTrack::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgMtoTrackPointCollectionPtr IAgMtoTrack::GetPoints ( ) {
    struct IAgMtoTrackPointCollection * _result = 0;
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointCollectionPtr(_result, false);
}

//
// interface IAgMtoTrackCollection wrapper method implementations
//

long IAgMtoTrackCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgMtoTrackPtr IAgMtoTrackCollection::GetItem ( long Index ) {
    struct IAgMtoTrack * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPtr(_result, false);
}

IUnknownPtr IAgMtoTrackCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgMtoTrackCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgMtoTrackCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgMtoTrackPtr IAgMtoTrackCollection::Add ( long TrackId ) {
    struct IAgMtoTrack * _result = 0;
    HRESULT _hr = raw_Add(TrackId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPtr(_result, false);
}

IAgMtoTrackPtr IAgMtoTrackCollection::AddTrack ( long TrackId, SAFEARRAY * * TimeVals, SAFEARRAY * * LatVals, SAFEARRAY * * LonVals, SAFEARRAY * * AltVals ) {
    struct IAgMtoTrack * _result = 0;
    HRESULT _hr = raw_AddTrack(TrackId, TimeVals, LatVals, LonVals, AltVals, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPtr(_result, false);
}

HRESULT IAgMtoTrackCollection::LoadCommandFile ( _bstr_t CommandFile ) {
    HRESULT _hr = raw_LoadCommandFile(CommandFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgMtoTrackPtr IAgMtoTrackCollection::GetTrackFromId ( long TrackId ) {
    struct IAgMtoTrack * _result = 0;
    HRESULT _hr = raw_GetTrackFromId(TrackId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPtr(_result, false);
}

VARIANT_BOOL IAgMtoTrackCollection::GetRecycling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Recycling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoTrackCollection::PutRecycling ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Recycling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgMtoTrackCollection::Remove ( struct IAgMtoTrack * pTrack ) {
    HRESULT _hr = raw_Remove(pTrack);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgMtoTrackCollection::RemoveById ( long TrackId ) {
    HRESULT _hr = raw_RemoveById(TrackId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgMtoTrackCollection::AddTracks ( long StartingTrackId, long NumberofTracks ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_AddTracks(StartingTrackId, NumberofTracks, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgMtoTrackCollection::RemoveTracks ( SAFEARRAY * * Tracks ) {
    HRESULT _hr = raw_RemoveTracks(Tracks);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgMtoTrackCollection::RemoveTracksById ( SAFEARRAY * * TrackIds ) {
    HRESULT _hr = raw_RemoveTracksById(TrackIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgMtoDefaultTrack wrapper method implementations
//

_bstr_t _IAgMtoDefaultTrack::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMtoDefaultTrack::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoDefaultTrack::GetInterpolate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Interpolate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoDefaultTrack::PutInterpolate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Interpolate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoDefaultTrack wrapper method implementations
//

_bstr_t IAgMtoDefaultTrack::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgMtoDefaultTrack::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoDefaultTrack::GetInterpolate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Interpolate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoDefaultTrack::PutInterpolate ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Interpolate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoGlobalTrackOptions wrapper method implementations
//

VARIANT_BOOL _IAgMtoGlobalTrackOptions::GetSaveTrackData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveTrackData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGlobalTrackOptions::PutSaveTrackData ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SaveTrackData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgMtoGlobalTrackOptions::GetComputationTrackId ( ) {
    long _result = 0;
    HRESULT _hr = get_ComputationTrackId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGlobalTrackOptions::PutComputationTrackId ( long pVal ) {
    HRESULT _hr = put_ComputationTrackId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgMtoGlobalTrackOptions::GetBlockSize ( ) {
    long _result = 0;
    HRESULT _hr = get_BlockSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGlobalTrackOptions::PutBlockSize ( long pVal ) {
    HRESULT _hr = put_BlockSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAltRefType _IAgMtoGlobalTrackOptions::GetAltitudeRef ( ) {
    enum AgEAltRefType _result;
    HRESULT _hr = get_AltitudeRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGlobalTrackOptions::PutAltitudeRef ( enum AgEAltRefType pAltRef ) {
    HRESULT _hr = put_AltitudeRef(pAltRef);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoGlobalTrackOptions::GetIsStatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGlobalTrackOptions::PutIsStatic ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsStatic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoGlobalTrackOptions wrapper method implementations
//

VARIANT_BOOL IAgMtoGlobalTrackOptions::GetSaveTrackData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveTrackData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGlobalTrackOptions::PutSaveTrackData ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SaveTrackData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgMtoGlobalTrackOptions::GetComputationTrackId ( ) {
    long _result = 0;
    HRESULT _hr = get_ComputationTrackId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGlobalTrackOptions::PutComputationTrackId ( long pVal ) {
    HRESULT _hr = put_ComputationTrackId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgMtoGlobalTrackOptions::GetBlockSize ( ) {
    long _result = 0;
    HRESULT _hr = get_BlockSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGlobalTrackOptions::PutBlockSize ( long pVal ) {
    HRESULT _hr = put_BlockSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAltRefType IAgMtoGlobalTrackOptions::GetAltitudeRef ( ) {
    enum AgEAltRefType _result;
    HRESULT _hr = get_AltitudeRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGlobalTrackOptions::PutAltitudeRef ( enum AgEAltRefType pAltRef ) {
    HRESULT _hr = put_AltitudeRef(pAltRef);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoGlobalTrackOptions::GetIsStatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGlobalTrackOptions::PutIsStatic ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsStatic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoGfxMarker wrapper method implementations
//

VARIANT_BOOL IAgMtoGfxMarker::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxMarker::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgMtoGfxMarker::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxMarker::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgMtoGfxMarker::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgMtoGfxMarker::PutStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoGfxLine wrapper method implementations
//

VARIANT_BOOL IAgMtoGfxLine::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxLine::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgMtoGfxLine::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxLine::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgMtoGfxLine::GetStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxLine::PutStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgMtoGfxLine::GetWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxLine::PutWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_Width(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoGfxFadeTimes wrapper method implementations
//

VARIANT_BOOL IAgMtoGfxFadeTimes::GetUsePreFade ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePreFade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxFadeTimes::PutUsePreFade ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePreFade(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoGfxFadeTimes::GetPreFadeTime ( ) {
    double _result = 0;
    HRESULT _hr = get_PreFadeTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxFadeTimes::PutPreFadeTime ( double pVal ) {
    HRESULT _hr = put_PreFadeTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoGfxFadeTimes::GetUsePostFade ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePostFade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxFadeTimes::PutUsePostFade ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePostFade(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoGfxFadeTimes::GetPostFadeTime ( ) {
    double _result = 0;
    HRESULT _hr = get_PostFadeTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxFadeTimes::PutPostFadeTime ( double pVal ) {
    HRESULT _hr = put_PostFadeTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoGfxLeadTrailTimes wrapper method implementations
//

VARIANT_BOOL IAgMtoGfxLeadTrailTimes::GetUseLeadTrail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLeadTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxLeadTrailTimes::PutUseLeadTrail ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLeadTrail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoGfxLeadTrailTimes::GetLeadTime ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxLeadTrailTimes::PutLeadTime ( double pVal ) {
    HRESULT _hr = put_LeadTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoGfxLeadTrailTimes::GetTrailTime ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxLeadTrailTimes::PutTrailTime ( double pVal ) {
    HRESULT _hr = put_TrailTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoGfxTrack wrapper method implementations
//

VARIANT_BOOL IAgMtoGfxTrack::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxTrack::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgMtoGfxTrack::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxTrack::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoGfxTrack::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxTrack::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgMtoGfxTrack::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxTrack::PutLabelColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_LabelColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoGfxMarkerPtr IAgMtoGfxTrack::GetMarker ( ) {
    struct IAgMtoGfxMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxMarkerPtr(_result, false);
}

IAgMtoGfxLinePtr IAgMtoGfxTrack::GetLine ( ) {
    struct IAgMtoGfxLine * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxLinePtr(_result, false);
}

IAgMtoGfxFadeTimesPtr IAgMtoGfxTrack::GetFadeTimes ( ) {
    struct IAgMtoGfxFadeTimes * _result = 0;
    HRESULT _hr = get_FadeTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxFadeTimesPtr(_result, false);
}

IAgMtoGfxLeadTrailTimesPtr IAgMtoGfxTrack::GetLeadTrailTimes ( ) {
    struct IAgMtoGfxLeadTrailTimes * _result = 0;
    HRESULT _hr = get_LeadTrailTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxLeadTrailTimesPtr(_result, false);
}

IAgGfxRangeContoursPtr IAgMtoGfxTrack::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

long IAgMtoGfxTrack::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgMtoGfxTrackCollection wrapper method implementations
//

long IAgMtoGfxTrackCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgMtoGfxTrackPtr IAgMtoGfxTrackCollection::GetItem ( long Index ) {
    struct IAgMtoGfxTrack * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxTrackPtr(_result, false);
}

IUnknownPtr IAgMtoGfxTrackCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgMtoGfxTrackPtr IAgMtoGfxTrackCollection::GetTrackFromId ( long TrackId ) {
    struct IAgMtoGfxTrack * _result = 0;
    HRESULT _hr = raw_GetTrackFromId(TrackId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxTrackPtr(_result, false);
}

VARIANT_BOOL IAgMtoGfxTrackCollection::GetRecycling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Recycling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxTrackCollection::PutRecycling ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Recycling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoDefaultGfxTrack wrapper method implementations
//

VARIANT_BOOL IAgMtoDefaultGfxTrack::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoDefaultGfxTrack::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgMtoDefaultGfxTrack::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoDefaultGfxTrack::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoDefaultGfxTrack::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoDefaultGfxTrack::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgMtoDefaultGfxTrack::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoDefaultGfxTrack::PutLabelColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_LabelColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoGfxMarkerPtr IAgMtoDefaultGfxTrack::GetMarker ( ) {
    struct IAgMtoGfxMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxMarkerPtr(_result, false);
}

IAgMtoGfxLinePtr IAgMtoDefaultGfxTrack::GetLine ( ) {
    struct IAgMtoGfxLine * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxLinePtr(_result, false);
}

IAgMtoGfxFadeTimesPtr IAgMtoDefaultGfxTrack::GetFadeTimes ( ) {
    struct IAgMtoGfxFadeTimes * _result = 0;
    HRESULT _hr = get_FadeTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxFadeTimesPtr(_result, false);
}

IAgMtoGfxLeadTrailTimesPtr IAgMtoDefaultGfxTrack::GetLeadTrailTimes ( ) {
    struct IAgMtoGfxLeadTrailTimes * _result = 0;
    HRESULT _hr = get_LeadTrailTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxLeadTrailTimesPtr(_result, false);
}

IAgGfxRangeContoursPtr IAgMtoDefaultGfxTrack::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

//
// interface IAgMtoGfxGlobalTrackOptions wrapper method implementations
//

VARIANT_BOOL IAgMtoGfxGlobalTrackOptions::GetTracksVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TracksVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoGfxGlobalTrackOptions::PutTracksVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TracksVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoGraphics wrapper method implementations
//

IAgMtoGfxTrackCollectionPtr IAgMtoGraphics::GetTracks ( ) {
    struct IAgMtoGfxTrackCollection * _result = 0;
    HRESULT _hr = get_Tracks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxTrackCollectionPtr(_result, false);
}

IAgMtoDefaultGfxTrackPtr IAgMtoGraphics::GetDefaultTrack ( ) {
    struct IAgMtoDefaultGfxTrack * _result = 0;
    HRESULT _hr = get_DefaultTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoDefaultGfxTrackPtr(_result, false);
}

IAgMtoGfxGlobalTrackOptionsPtr IAgMtoGraphics::GetGlobalTrackOptions ( ) {
    struct IAgMtoGfxGlobalTrackOptions * _result = 0;
    HRESULT _hr = get_GlobalTrackOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxGlobalTrackOptionsPtr(_result, false);
}

//
// interface IAgMtoVOMarker wrapper method implementations
//

long IAgMtoVOMarker::GetPixelSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOMarker::PutPixelSize ( long pSize ) {
    HRESULT _hr = put_PixelSize(pSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMarkerType IAgMtoVOMarker::GetMarkerType ( ) {
    enum AgEMarkerType _result;
    HRESULT _hr = get_MarkerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOMarker::PutMarkerType ( enum AgEMarkerType pMarkerType ) {
    HRESULT _hr = put_MarkerType(pMarkerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoVOMarker::GetEnableRotate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOMarker::PutEnableRotate ( VARIANT_BOOL pRotate ) {
    HRESULT _hr = put_EnableRotate(pRotate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgMtoVOMarker::GetAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgMtoVOMarker::PutAngle ( const _variant_t & pAngle ) {
    HRESULT _hr = put_Angle(pAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOriginType IAgMtoVOMarker::GetXOrigin ( ) {
    enum AgEVOMarkerOriginType _result;
    HRESULT _hr = get_XOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOMarker::PutXOrigin ( enum AgEVOMarkerOriginType pXOrigin ) {
    HRESULT _hr = put_XOrigin(pXOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOriginType IAgMtoVOMarker::GetYOrigin ( ) {
    enum AgEVOMarkerOriginType _result;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOMarker::PutYOrigin ( enum AgEVOMarkerOriginType pYOrigin ) {
    HRESULT _hr = put_YOrigin(pYOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOMarkerDataPtr IAgMtoVOMarker::GetMarkerData ( ) {
    struct IAgVOMarkerData * _result = 0;
    HRESULT _hr = get_MarkerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerDataPtr(_result, false);
}

HRESULT IAgMtoVOMarker::SetMarkerImageFile ( _bstr_t ImageFile ) {
    HRESULT _hr = raw_SetMarkerImageFile(ImageFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgMtoVOMarker::GetRotateFromNorth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RotateFromNorth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOMarker::PutRotateFromNorth ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RotateFromNorth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOrientation IAgMtoVOMarker::GetOrientationMode ( ) {
    enum AgEVOMarkerOrientation _result;
    HRESULT _hr = get_OrientationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOMarker::PutOrientationMode ( enum AgEVOMarkerOrientation pRetVal ) {
    HRESULT _hr = put_OrientationMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoVOPoint wrapper method implementations
//

VARIANT_BOOL IAgMtoVOPoint::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOPoint::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOPoint::GetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOPoint::PutSize ( double pVal ) {
    HRESULT _hr = put_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoVOModel wrapper method implementations
//

VARIANT_BOOL IAgMtoVOModel::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOModel::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgMtoVOModel::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgMtoVOModel::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOModel::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOModel::PutScaleValue ( double pVal ) {
    HRESULT _hr = put_ScaleValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOModel::GetInitialBearing ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialBearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOModel::PutInitialBearing ( double pVal ) {
    HRESULT _hr = put_InitialBearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoVOModel::GetZPointsNadir ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ZPointsNadir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOModel::PutZPointsNadir ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ZPointsNadir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoVOSwapDistances wrapper method implementations
//

VARIANT_BOOL IAgMtoVOSwapDistances::GetUseSwapDistances ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSwapDistances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOSwapDistances::PutUseSwapDistances ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSwapDistances(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOSwapDistances::GetLabelFrom ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOSwapDistances::PutLabelFrom ( double pVal ) {
    HRESULT _hr = put_LabelFrom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOSwapDistances::GetLabelTo ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOSwapDistances::PutLabelTo ( double pVal ) {
    HRESULT _hr = put_LabelTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOSwapDistances::GetModelFrom ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOSwapDistances::PutModelFrom ( double pVal ) {
    HRESULT _hr = put_ModelFrom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOSwapDistances::GetModelTo ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOSwapDistances::PutModelTo ( double pVal ) {
    HRESULT _hr = put_ModelTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOSwapDistances::GetMarkerFrom ( ) {
    double _result = 0;
    HRESULT _hr = get_MarkerFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOSwapDistances::PutMarkerFrom ( double pVal ) {
    HRESULT _hr = put_MarkerFrom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOSwapDistances::GetMarkerTo ( ) {
    double _result = 0;
    HRESULT _hr = get_MarkerTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOSwapDistances::PutMarkerTo ( double pVal ) {
    HRESULT _hr = put_MarkerTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOSwapDistances::GetPointFrom ( ) {
    double _result = 0;
    HRESULT _hr = get_PointFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOSwapDistances::PutPointFrom ( double pVal ) {
    HRESULT _hr = put_PointFrom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoVOSwapDistances::GetPointTo ( ) {
    double _result = 0;
    HRESULT _hr = get_PointTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOSwapDistances::PutPointTo ( double pVal ) {
    HRESULT _hr = put_PointTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoVODropLines wrapper method implementations
//

IAgVeVODropLinePosItemCollectionPtr IAgMtoVODropLines::GetPosition ( ) {
    struct IAgVeVODropLinePosItemCollection * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePosItemCollectionPtr(_result, false);
}

IAgVeVODropLinePathItemCollectionPtr IAgMtoVODropLines::GetEphemeris ( ) {
    struct IAgVeVODropLinePathItemCollection * _result = 0;
    HRESULT _hr = get_Ephemeris(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePathItemCollectionPtr(_result, false);
}

//
// interface IAgMtoVOTrack wrapper method implementations
//

VARIANT_BOOL IAgMtoVOTrack::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOTrack::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoVOMarkerPtr IAgMtoVOTrack::GetMarker ( ) {
    struct IAgMtoVOMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOMarkerPtr(_result, false);
}

IAgMtoVOPointPtr IAgMtoVOTrack::GetPoint ( ) {
    struct IAgMtoVOPoint * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOPointPtr(_result, false);
}

IAgMtoVOModelPtr IAgMtoVOTrack::GetModel ( ) {
    struct IAgMtoVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOModelPtr(_result, false);
}

IAgVOOffsetLabelPtr IAgMtoVOTrack::GetLabel ( ) {
    struct IAgVOOffsetLabel * _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetLabelPtr(_result, false);
}

IAgMtoVOSwapDistancesPtr IAgMtoVOTrack::GetSwapDistances ( ) {
    struct IAgMtoVOSwapDistances * _result = 0;
    HRESULT _hr = get_SwapDistances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOSwapDistancesPtr(_result, false);
}

IAgVORangeContoursPtr IAgMtoVOTrack::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgMtoVODropLinesPtr IAgMtoVOTrack::GetDropLines ( ) {
    struct IAgMtoVODropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVODropLinesPtr(_result, false);
}

long IAgMtoVOTrack::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgMtoVOTrack::GetShouldFadeOverTrailTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShouldFadeOverTrailTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOTrack::PutShouldFadeOverTrailTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShouldFadeOverTrailTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoVOTrackCollection wrapper method implementations
//

long IAgMtoVOTrackCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgMtoVOTrackPtr IAgMtoVOTrackCollection::GetItem ( long Index ) {
    struct IAgMtoVOTrack * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOTrackPtr(_result, false);
}

IUnknownPtr IAgMtoVOTrackCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgMtoVOTrackPtr IAgMtoVOTrackCollection::GetTrackFromId ( long TrackId ) {
    struct IAgMtoVOTrack * _result = 0;
    HRESULT _hr = raw_GetTrackFromId(TrackId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOTrackPtr(_result, false);
}

VARIANT_BOOL IAgMtoVOTrackCollection::GetRecycling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Recycling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOTrackCollection::PutRecycling ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Recycling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoDefaultVOTrack wrapper method implementations
//

VARIANT_BOOL IAgMtoDefaultVOTrack::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoDefaultVOTrack::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoVOMarkerPtr IAgMtoDefaultVOTrack::GetMarker ( ) {
    struct IAgMtoVOMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOMarkerPtr(_result, false);
}

IAgMtoVOPointPtr IAgMtoDefaultVOTrack::GetPoint ( ) {
    struct IAgMtoVOPoint * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOPointPtr(_result, false);
}

IAgMtoVOModelPtr IAgMtoDefaultVOTrack::GetModel ( ) {
    struct IAgMtoVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOModelPtr(_result, false);
}

IAgVOOffsetLabelPtr IAgMtoDefaultVOTrack::GetLabel ( ) {
    struct IAgVOOffsetLabel * _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetLabelPtr(_result, false);
}

IAgMtoVOSwapDistancesPtr IAgMtoDefaultVOTrack::GetSwapDistances ( ) {
    struct IAgMtoVOSwapDistances * _result = 0;
    HRESULT _hr = get_SwapDistances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOSwapDistancesPtr(_result, false);
}

IAgVORangeContoursPtr IAgMtoDefaultVOTrack::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgMtoVODropLinesPtr IAgMtoDefaultVOTrack::GetDropLines ( ) {
    struct IAgMtoVODropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVODropLinesPtr(_result, false);
}

VARIANT_BOOL IAgMtoDefaultVOTrack::GetShouldFadeOverTrailTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShouldFadeOverTrailTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoDefaultVOTrack::PutShouldFadeOverTrailTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShouldFadeOverTrailTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoVOGlobalTrackOptions wrapper method implementations
//

VARIANT_BOOL IAgMtoVOGlobalTrackOptions::GetTracksVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TracksVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOGlobalTrackOptions::PutTracksVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TracksVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoVOGlobalTrackOptions::GetLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOGlobalTrackOptions::PutLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoVOGlobalTrackOptions::GetMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOGlobalTrackOptions::PutMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoVOGlobalTrackOptions::GetLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOGlobalTrackOptions::PutLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoVOGlobalTrackOptions::GetPointsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PointsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOGlobalTrackOptions::PutPointsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PointsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoVOGlobalTrackOptions::GetOptimizeLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OptimizeLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoVOGlobalTrackOptions::PutOptimizeLines ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OptimizeLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgMtoVO wrapper method implementations
//

IAgMtoVOTrackCollectionPtr IAgMtoVO::GetTracks ( ) {
    struct IAgMtoVOTrackCollection * _result = 0;
    HRESULT _hr = get_Tracks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOTrackCollectionPtr(_result, false);
}

IAgMtoDefaultVOTrackPtr IAgMtoVO::GetDefaultTrack ( ) {
    struct IAgMtoDefaultVOTrack * _result = 0;
    HRESULT _hr = get_DefaultTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoDefaultVOTrackPtr(_result, false);
}

IAgMtoVOGlobalTrackOptionsPtr IAgMtoVO::GetGlobalTrackOptions ( ) {
    struct IAgMtoVOGlobalTrackOptions * _result = 0;
    HRESULT _hr = get_GlobalTrackOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOGlobalTrackOptionsPtr(_result, false);
}

//
// interface IAgMtoAnalysisPosition wrapper method implementations
//

enum AgEAltRefType IAgMtoAnalysisPosition::GetAltRef ( ) {
    enum AgEAltRefType _result;
    HRESULT _hr = get_AltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisPosition::PutAltRef ( enum AgEAltRefType pVal ) {
    HRESULT _hr = put_AltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoTrackPointCollectionPtr IAgMtoAnalysisPosition::ComputeAllTracks ( const _variant_t & Time ) {
    struct IAgMtoTrackPointCollection * _result = 0;
    HRESULT _hr = raw_ComputeAllTracks(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointCollectionPtr(_result, false);
}

IAgMtoTrackPointCollectionPtr IAgMtoAnalysisPosition::ComputeTracks ( SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    struct IAgMtoTrackPointCollection * _result = 0;
    HRESULT _hr = raw_ComputeTracks(TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointCollectionPtr(_result, false);
}

IAgMtoTrackPointPtr IAgMtoAnalysisPosition::ComputeTrack ( int TrackId, const _variant_t & Time ) {
    struct IAgMtoTrackPoint * _result = 0;
    HRESULT _hr = raw_ComputeTrack(TrackId, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointPtr(_result, false);
}

//
// interface IAgMtoAnalysisRange wrapper method implementations
//

double IAgMtoAnalysisRange::GetLowerLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_LowerLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisRange::PutLowerLimit ( double pVal ) {
    HRESULT _hr = put_LowerLimit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgMtoAnalysisRange::GetUpperLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_UpperLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisRange::PutUpperLimit ( double pVal ) {
    HRESULT _hr = put_UpperLimit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMtoObjectInterval IAgMtoAnalysisRange::GetObjectInterval ( ) {
    enum AgEMtoObjectInterval _result;
    HRESULT _hr = get_ObjectInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisRange::PutObjectInterval ( enum AgEMtoObjectInterval pVal ) {
    HRESULT _hr = put_ObjectInterval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgMtoAnalysisRange::GetObjectData ( ) {
    int _result = 0;
    HRESULT _hr = get_ObjectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisRange::PutObjectData ( int pVal ) {
    HRESULT _hr = put_ObjectData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgMtoAnalysisRange::GetStkObjectPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StkObjectPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgMtoAnalysisRange::PutStkObjectPath ( _bstr_t pRetVal ) {
    HRESULT _hr = put_StkObjectPath(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoAnalysisRange::IsAnyTrackInRange ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAnyTrackInRange(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgMtoAnalysisRange::AreAllTracksInRange ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreAllTracksInRange(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgMtoAnalysisRange::IsTrackInRange ( int TrackId, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrackInRange(TrackId, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgMtoAnalysisRange::ComputeRanges ( enum AgEMtoRangeMode Mode, SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeRanges(Mode, TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgMtoAnalysisRange::ComputeAllRanges ( enum AgEMtoRangeMode Mode, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeAllRanges(Mode, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEMtoEntirety IAgMtoAnalysisRange::GetEntirety ( ) {
    enum AgEMtoEntirety _result;
    HRESULT _hr = get_Entirety(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisRange::PutEntirety ( enum AgEMtoEntirety pEntirety ) {
    HRESULT _hr = put_Entirety(pEntirety);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoAnalysisRange::AreTracksInRange ( enum AgEMtoTrackEval AllOrAny, SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreTracksInRange(AllOrAny, TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgMtoAnalysisFieldOfView wrapper method implementations
//

VARIANT_BOOL IAgMtoAnalysisFieldOfView::IsAnyTrackInFOV ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAnyTrackInFOV(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgMtoAnalysisFieldOfView::AreAllTracksInFOV ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreAllTracksInFOV(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgMtoAnalysisFieldOfView::IsTrackInFOV ( int TrackId, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrackInFOV(TrackId, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgMtoAnalysisFieldOfView::ComputeTracks ( enum AgEMtoVisibilityMode Mode, SAFEARRAY * * Tracks, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeTracks(Mode, Tracks, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgMtoAnalysisFieldOfView::ComputeAllTracks ( enum AgEMtoVisibilityMode Mode, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeAllTracks(Mode, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgMtoAnalysisFieldOfView::GetSensor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sensor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgMtoAnalysisFieldOfView::PutSensor ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Sensor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMtoEntirety IAgMtoAnalysisFieldOfView::GetEntirety ( ) {
    enum AgEMtoEntirety _result;
    HRESULT _hr = get_Entirety(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisFieldOfView::PutEntirety ( enum AgEMtoEntirety pEntirety ) {
    HRESULT _hr = put_Entirety(pEntirety);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoAnalysisFieldOfView::AreTracksInFOV ( enum AgEMtoTrackEval AnyOrAll, SAFEARRAY * * Tracks, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreTracksInFOV(AnyOrAll, Tracks, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgMtoAnalysisVisibility wrapper method implementations
//

VARIANT_BOOL IAgMtoAnalysisVisibility::IsAnyTrackVisible ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAnyTrackVisible(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgMtoAnalysisVisibility::AreAllTracksVisible ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreAllTracksVisible(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgMtoAnalysisVisibility::GetUseTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisVisibility::PutUseTerrain ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTerrain(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMtoEntirety IAgMtoAnalysisVisibility::GetEntirety ( ) {
    enum AgEMtoEntirety _result;
    HRESULT _hr = get_Entirety(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisVisibility::PutEntirety ( enum AgEMtoEntirety pEntirety ) {
    HRESULT _hr = put_Entirety(pEntirety);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMtoObjectInterval IAgMtoAnalysisVisibility::GetObjectInterval ( ) {
    enum AgEMtoObjectInterval _result;
    HRESULT _hr = get_ObjectInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisVisibility::PutObjectInterval ( enum AgEMtoObjectInterval pVal ) {
    HRESULT _hr = put_ObjectInterval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgMtoAnalysisVisibility::GetObjectData ( ) {
    int _result = 0;
    HRESULT _hr = get_ObjectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgMtoAnalysisVisibility::PutObjectData ( int pVal ) {
    HRESULT _hr = put_ObjectData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoAnalysisVisibility::IsTrackVisible ( int TrackId, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrackVisible(TrackId, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgMtoAnalysisVisibility::GetStkObjectPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StkObjectPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgMtoAnalysisVisibility::PutStkObjectPath ( _bstr_t pRetVal ) {
    HRESULT _hr = put_StkObjectPath(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgMtoAnalysisVisibility::AreTracksVisible ( enum AgEMtoTrackEval Eval, SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreTracksVisible(Eval, TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgMtoAnalysisVisibility::ComputeTracks ( enum AgEMtoVisibilityMode Mode, SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeTracks(Mode, TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgMtoAnalysisVisibility::ComputeAllTracks ( enum AgEMtoVisibilityMode Mode, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeAllTracks(Mode, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgMtoAnalysis wrapper method implementations
//

IAgMtoAnalysisPositionPtr IAgMtoAnalysis::GetPosition ( ) {
    struct IAgMtoAnalysisPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisPositionPtr(_result, false);
}

IAgMtoAnalysisRangePtr IAgMtoAnalysis::GetRange ( ) {
    struct IAgMtoAnalysisRange * _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisRangePtr(_result, false);
}

IAgMtoAnalysisFieldOfViewPtr IAgMtoAnalysis::GetFieldOfView ( ) {
    struct IAgMtoAnalysisFieldOfView * _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisFieldOfViewPtr(_result, false);
}

IAgMtoAnalysisVisibilityPtr IAgMtoAnalysis::GetVisibility ( ) {
    struct IAgMtoAnalysisVisibility * _result = 0;
    HRESULT _hr = get_Visibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisVisibilityPtr(_result, false);
}

//
// interface IAgMto wrapper method implementations
//

IAgMtoTrackCollectionPtr IAgMto::GetTracks ( ) {
    struct IAgMtoTrackCollection * _result = 0;
    HRESULT _hr = get_Tracks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackCollectionPtr(_result, false);
}

IAgMtoDefaultTrackPtr IAgMto::GetDefaultTrack ( ) {
    struct IAgMtoDefaultTrack * _result = 0;
    HRESULT _hr = get_DefaultTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoDefaultTrackPtr(_result, false);
}

IAgMtoGlobalTrackOptionsPtr IAgMto::GetGlobalTrackOptions ( ) {
    struct IAgMtoGlobalTrackOptions * _result = 0;
    HRESULT _hr = get_GlobalTrackOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGlobalTrackOptionsPtr(_result, false);
}

IAgMtoGraphicsPtr IAgMto::GetGraphics ( ) {
    struct IAgMtoGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGraphicsPtr(_result, false);
}

IAgMtoVOPtr IAgMto::GetVO ( ) {
    struct IAgMtoVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOPtr(_result, false);
}

IAgMtoAnalysisPtr IAgMto::GetAnalysis ( ) {
    struct IAgMtoAnalysis * _result = 0;
    HRESULT _hr = get_Analysis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisPtr(_result, false);
}

//
// interface _IAgMtoGfxMarker wrapper method implementations
//

VARIANT_BOOL _IAgMtoGfxMarker::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxMarker::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgMtoGfxMarker::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxMarker::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgMtoGfxMarker::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMtoGfxMarker::PutStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_Style(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoGfxLine wrapper method implementations
//

VARIANT_BOOL _IAgMtoGfxLine::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxLine::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgMtoGfxLine::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxLine::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgMtoGfxLine::GetStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxLine::PutStyle ( enum STKUtil::AgELineStyle ppVal ) {
    HRESULT _hr = put_Style(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgMtoGfxLine::GetWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxLine::PutWidth ( enum AgELineWidth ppVal ) {
    HRESULT _hr = put_Width(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoGfxFadeTimes wrapper method implementations
//

VARIANT_BOOL _IAgMtoGfxFadeTimes::GetUsePreFade ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePreFade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxFadeTimes::PutUsePreFade ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePreFade(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoGfxFadeTimes::GetPreFadeTime ( ) {
    double _result = 0;
    HRESULT _hr = get_PreFadeTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxFadeTimes::PutPreFadeTime ( double pVal ) {
    HRESULT _hr = put_PreFadeTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoGfxFadeTimes::GetUsePostFade ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePostFade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxFadeTimes::PutUsePostFade ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UsePostFade(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoGfxFadeTimes::GetPostFadeTime ( ) {
    double _result = 0;
    HRESULT _hr = get_PostFadeTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxFadeTimes::PutPostFadeTime ( double pVal ) {
    HRESULT _hr = put_PostFadeTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoGfxLeadTrailTimes wrapper method implementations
//

VARIANT_BOOL _IAgMtoGfxLeadTrailTimes::GetUseLeadTrail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLeadTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxLeadTrailTimes::PutUseLeadTrail ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLeadTrail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoGfxLeadTrailTimes::GetLeadTime ( ) {
    double _result = 0;
    HRESULT _hr = get_LeadTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxLeadTrailTimes::PutLeadTime ( double pVal ) {
    HRESULT _hr = put_LeadTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoGfxLeadTrailTimes::GetTrailTime ( ) {
    double _result = 0;
    HRESULT _hr = get_TrailTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxLeadTrailTimes::PutTrailTime ( double pVal ) {
    HRESULT _hr = put_TrailTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoGfxTrack wrapper method implementations
//

VARIANT_BOOL _IAgMtoGfxTrack::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxTrack::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgMtoGfxTrack::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxTrack::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoGfxTrack::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxTrack::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgMtoGfxTrack::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxTrack::PutLabelColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_LabelColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoGfxMarkerPtr _IAgMtoGfxTrack::GetMarker ( ) {
    struct IAgMtoGfxMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxMarkerPtr(_result, false);
}

IAgMtoGfxLinePtr _IAgMtoGfxTrack::GetLine ( ) {
    struct IAgMtoGfxLine * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxLinePtr(_result, false);
}

IAgMtoGfxFadeTimesPtr _IAgMtoGfxTrack::GetFadeTimes ( ) {
    struct IAgMtoGfxFadeTimes * _result = 0;
    HRESULT _hr = get_FadeTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxFadeTimesPtr(_result, false);
}

IAgMtoGfxLeadTrailTimesPtr _IAgMtoGfxTrack::GetLeadTrailTimes ( ) {
    struct IAgMtoGfxLeadTrailTimes * _result = 0;
    HRESULT _hr = get_LeadTrailTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxLeadTrailTimesPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgMtoGfxTrack::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

long _IAgMtoGfxTrack::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgMtoDefaultGfxTrack wrapper method implementations
//

VARIANT_BOOL _IAgMtoDefaultGfxTrack::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoDefaultGfxTrack::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgMtoDefaultGfxTrack::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoDefaultGfxTrack::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoDefaultGfxTrack::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoDefaultGfxTrack::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgMtoDefaultGfxTrack::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoDefaultGfxTrack::PutLabelColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_LabelColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoGfxMarkerPtr _IAgMtoDefaultGfxTrack::GetMarker ( ) {
    struct IAgMtoGfxMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxMarkerPtr(_result, false);
}

IAgMtoGfxLinePtr _IAgMtoDefaultGfxTrack::GetLine ( ) {
    struct IAgMtoGfxLine * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxLinePtr(_result, false);
}

IAgMtoGfxFadeTimesPtr _IAgMtoDefaultGfxTrack::GetFadeTimes ( ) {
    struct IAgMtoGfxFadeTimes * _result = 0;
    HRESULT _hr = get_FadeTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxFadeTimesPtr(_result, false);
}

IAgMtoGfxLeadTrailTimesPtr _IAgMtoDefaultGfxTrack::GetLeadTrailTimes ( ) {
    struct IAgMtoGfxLeadTrailTimes * _result = 0;
    HRESULT _hr = get_LeadTrailTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxLeadTrailTimesPtr(_result, false);
}

IAgGfxRangeContoursPtr _IAgMtoDefaultGfxTrack::GetRangeContours ( ) {
    struct IAgGfxRangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGfxRangeContoursPtr(_result, false);
}

//
// interface _IAgMtoGfxGlobalTrackOptions wrapper method implementations
//

VARIANT_BOOL _IAgMtoGfxGlobalTrackOptions::GetTracksVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TracksVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoGfxGlobalTrackOptions::PutTracksVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TracksVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoGraphics wrapper method implementations
//

IAgMtoGfxTrackCollectionPtr _IAgMtoGraphics::GetTracks ( ) {
    struct IAgMtoGfxTrackCollection * _result = 0;
    HRESULT _hr = get_Tracks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxTrackCollectionPtr(_result, false);
}

IAgMtoDefaultGfxTrackPtr _IAgMtoGraphics::GetDefaultTrack ( ) {
    struct IAgMtoDefaultGfxTrack * _result = 0;
    HRESULT _hr = get_DefaultTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoDefaultGfxTrackPtr(_result, false);
}

IAgMtoGfxGlobalTrackOptionsPtr _IAgMtoGraphics::GetGlobalTrackOptions ( ) {
    struct IAgMtoGfxGlobalTrackOptions * _result = 0;
    HRESULT _hr = get_GlobalTrackOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGfxGlobalTrackOptionsPtr(_result, false);
}

//
// interface _IAgMtoVOMarker wrapper method implementations
//

long _IAgMtoVOMarker::GetPixelSize ( ) {
    long _result = 0;
    HRESULT _hr = get_PixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOMarker::PutPixelSize ( long pSize ) {
    HRESULT _hr = put_PixelSize(pSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMarkerType _IAgMtoVOMarker::GetMarkerType ( ) {
    enum AgEMarkerType _result;
    HRESULT _hr = get_MarkerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOMarker::PutMarkerType ( enum AgEMarkerType pMarkerType ) {
    HRESULT _hr = put_MarkerType(pMarkerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoVOMarker::GetEnableRotate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableRotate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOMarker::PutEnableRotate ( VARIANT_BOOL pRotate ) {
    HRESULT _hr = put_EnableRotate(pRotate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgMtoVOMarker::GetAngle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgMtoVOMarker::PutAngle ( const _variant_t & pAngle ) {
    HRESULT _hr = put_Angle(pAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOriginType _IAgMtoVOMarker::GetXOrigin ( ) {
    enum AgEVOMarkerOriginType _result;
    HRESULT _hr = get_XOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOMarker::PutXOrigin ( enum AgEVOMarkerOriginType pXOrigin ) {
    HRESULT _hr = put_XOrigin(pXOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOriginType _IAgMtoVOMarker::GetYOrigin ( ) {
    enum AgEVOMarkerOriginType _result;
    HRESULT _hr = get_YOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOMarker::PutYOrigin ( enum AgEVOMarkerOriginType pYOrigin ) {
    HRESULT _hr = put_YOrigin(pYOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOMarkerDataPtr _IAgMtoVOMarker::GetMarkerData ( ) {
    struct IAgVOMarkerData * _result = 0;
    HRESULT _hr = get_MarkerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOMarkerDataPtr(_result, false);
}

HRESULT _IAgMtoVOMarker::SetMarkerImageFile ( _bstr_t ImageFile ) {
    HRESULT _hr = raw_SetMarkerImageFile(ImageFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgMtoVOMarker::GetRotateFromNorth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RotateFromNorth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOMarker::PutRotateFromNorth ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RotateFromNorth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVOMarkerOrientation _IAgMtoVOMarker::GetOrientationMode ( ) {
    enum AgEVOMarkerOrientation _result;
    HRESULT _hr = get_OrientationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOMarker::PutOrientationMode ( enum AgEVOMarkerOrientation pRetVal ) {
    HRESULT _hr = put_OrientationMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoVOPoint wrapper method implementations
//

VARIANT_BOOL _IAgMtoVOPoint::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOPoint::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOPoint::GetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOPoint::PutSize ( double pVal ) {
    HRESULT _hr = put_Size(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoVOModel wrapper method implementations
//

VARIANT_BOOL _IAgMtoVOModel::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOModel::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgMtoVOModel::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMtoVOModel::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOModel::GetScaleValue ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOModel::PutScaleValue ( double pVal ) {
    HRESULT _hr = put_ScaleValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOModel::GetInitialBearing ( ) {
    double _result = 0;
    HRESULT _hr = get_InitialBearing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOModel::PutInitialBearing ( double pVal ) {
    HRESULT _hr = put_InitialBearing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoVOModel::GetZPointsNadir ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ZPointsNadir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOModel::PutZPointsNadir ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ZPointsNadir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoVOSwapDistances wrapper method implementations
//

VARIANT_BOOL _IAgMtoVOSwapDistances::GetUseSwapDistances ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSwapDistances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOSwapDistances::PutUseSwapDistances ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSwapDistances(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOSwapDistances::GetLabelFrom ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOSwapDistances::PutLabelFrom ( double pVal ) {
    HRESULT _hr = put_LabelFrom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOSwapDistances::GetLabelTo ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOSwapDistances::PutLabelTo ( double pVal ) {
    HRESULT _hr = put_LabelTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOSwapDistances::GetModelFrom ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOSwapDistances::PutModelFrom ( double pVal ) {
    HRESULT _hr = put_ModelFrom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOSwapDistances::GetModelTo ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOSwapDistances::PutModelTo ( double pVal ) {
    HRESULT _hr = put_ModelTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOSwapDistances::GetMarkerFrom ( ) {
    double _result = 0;
    HRESULT _hr = get_MarkerFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOSwapDistances::PutMarkerFrom ( double pVal ) {
    HRESULT _hr = put_MarkerFrom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOSwapDistances::GetMarkerTo ( ) {
    double _result = 0;
    HRESULT _hr = get_MarkerTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOSwapDistances::PutMarkerTo ( double pVal ) {
    HRESULT _hr = put_MarkerTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOSwapDistances::GetPointFrom ( ) {
    double _result = 0;
    HRESULT _hr = get_PointFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOSwapDistances::PutPointFrom ( double pVal ) {
    HRESULT _hr = put_PointFrom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoVOSwapDistances::GetPointTo ( ) {
    double _result = 0;
    HRESULT _hr = get_PointTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOSwapDistances::PutPointTo ( double pVal ) {
    HRESULT _hr = put_PointTo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoVODropLines wrapper method implementations
//

IAgVeVODropLinePosItemCollectionPtr _IAgMtoVODropLines::GetPosition ( ) {
    struct IAgVeVODropLinePosItemCollection * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePosItemCollectionPtr(_result, false);
}

IAgVeVODropLinePathItemCollectionPtr _IAgMtoVODropLines::GetEphemeris ( ) {
    struct IAgVeVODropLinePathItemCollection * _result = 0;
    HRESULT _hr = get_Ephemeris(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVODropLinePathItemCollectionPtr(_result, false);
}

//
// interface _IAgMtoVOTrack wrapper method implementations
//

VARIANT_BOOL _IAgMtoVOTrack::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOTrack::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoVOMarkerPtr _IAgMtoVOTrack::GetMarker ( ) {
    struct IAgMtoVOMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOMarkerPtr(_result, false);
}

IAgMtoVOPointPtr _IAgMtoVOTrack::GetPoint ( ) {
    struct IAgMtoVOPoint * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOPointPtr(_result, false);
}

IAgMtoVOModelPtr _IAgMtoVOTrack::GetModel ( ) {
    struct IAgMtoVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOModelPtr(_result, false);
}

IAgVOOffsetLabelPtr _IAgMtoVOTrack::GetLabel ( ) {
    struct IAgVOOffsetLabel * _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetLabelPtr(_result, false);
}

IAgMtoVOSwapDistancesPtr _IAgMtoVOTrack::GetSwapDistances ( ) {
    struct IAgMtoVOSwapDistances * _result = 0;
    HRESULT _hr = get_SwapDistances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOSwapDistancesPtr(_result, false);
}

IAgVORangeContoursPtr _IAgMtoVOTrack::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgMtoVODropLinesPtr _IAgMtoVOTrack::GetDropLines ( ) {
    struct IAgMtoVODropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVODropLinesPtr(_result, false);
}

long _IAgMtoVOTrack::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgMtoVOTrack::GetShouldFadeOverTrailTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShouldFadeOverTrailTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOTrack::PutShouldFadeOverTrailTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShouldFadeOverTrailTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoDefaultVOTrack wrapper method implementations
//

VARIANT_BOOL _IAgMtoDefaultVOTrack::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoDefaultVOTrack::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoVOMarkerPtr _IAgMtoDefaultVOTrack::GetMarker ( ) {
    struct IAgMtoVOMarker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOMarkerPtr(_result, false);
}

IAgMtoVOPointPtr _IAgMtoDefaultVOTrack::GetPoint ( ) {
    struct IAgMtoVOPoint * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOPointPtr(_result, false);
}

IAgMtoVOModelPtr _IAgMtoDefaultVOTrack::GetModel ( ) {
    struct IAgMtoVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOModelPtr(_result, false);
}

IAgVOOffsetLabelPtr _IAgMtoDefaultVOTrack::GetLabel ( ) {
    struct IAgVOOffsetLabel * _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetLabelPtr(_result, false);
}

IAgMtoVOSwapDistancesPtr _IAgMtoDefaultVOTrack::GetSwapDistances ( ) {
    struct IAgMtoVOSwapDistances * _result = 0;
    HRESULT _hr = get_SwapDistances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOSwapDistancesPtr(_result, false);
}

IAgVORangeContoursPtr _IAgMtoDefaultVOTrack::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgMtoVODropLinesPtr _IAgMtoDefaultVOTrack::GetDropLines ( ) {
    struct IAgMtoVODropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVODropLinesPtr(_result, false);
}

VARIANT_BOOL _IAgMtoDefaultVOTrack::GetShouldFadeOverTrailTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShouldFadeOverTrailTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoDefaultVOTrack::PutShouldFadeOverTrailTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShouldFadeOverTrailTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoVOGlobalTrackOptions wrapper method implementations
//

VARIANT_BOOL _IAgMtoVOGlobalTrackOptions::GetTracksVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TracksVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOGlobalTrackOptions::PutTracksVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_TracksVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoVOGlobalTrackOptions::GetLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOGlobalTrackOptions::PutLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoVOGlobalTrackOptions::GetMarkersVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MarkersVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOGlobalTrackOptions::PutMarkersVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MarkersVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoVOGlobalTrackOptions::GetLinesVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LinesVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOGlobalTrackOptions::PutLinesVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LinesVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoVOGlobalTrackOptions::GetPointsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PointsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOGlobalTrackOptions::PutPointsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PointsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoVOGlobalTrackOptions::GetOptimizeLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OptimizeLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoVOGlobalTrackOptions::PutOptimizeLines ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_OptimizeLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgMtoVO wrapper method implementations
//

IAgMtoVOTrackCollectionPtr _IAgMtoVO::GetTracks ( ) {
    struct IAgMtoVOTrackCollection * _result = 0;
    HRESULT _hr = get_Tracks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOTrackCollectionPtr(_result, false);
}

IAgMtoDefaultVOTrackPtr _IAgMtoVO::GetDefaultTrack ( ) {
    struct IAgMtoDefaultVOTrack * _result = 0;
    HRESULT _hr = get_DefaultTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoDefaultVOTrackPtr(_result, false);
}

IAgMtoVOGlobalTrackOptionsPtr _IAgMtoVO::GetGlobalTrackOptions ( ) {
    struct IAgMtoVOGlobalTrackOptions * _result = 0;
    HRESULT _hr = get_GlobalTrackOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOGlobalTrackOptionsPtr(_result, false);
}

//
// interface _IAgLLAGeocentric wrapper method implementations
//

double _IAgLLAGeocentric::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLLAGeocentric::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgLLAGeocentric::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLLAGeocentric::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgLLAGeocentric::GetRad ( ) {
    double _result = 0;
    HRESULT _hr = get_Rad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLLAGeocentric::PutRad ( double pVal ) {
    HRESULT _hr = put_Rad(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLLAPositionPtr _IAgLLAGeocentric::ConvertTo ( enum AgELLAPositionType Type ) {
    struct IAgLLAPosition * _result = 0;
    HRESULT _hr = raw_ConvertTo(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLLAPositionPtr(_result, false);
}

enum AgELLAPositionType _IAgLLAGeocentric::GetType ( ) {
    enum AgELLAPositionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgLLAGeocentric::Assign ( struct IAgLLAPosition * pPos ) {
    HRESULT _hr = raw_Assign(pPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgLLAGeocentric::AssignGeocentric ( double Lat, double Lon, double Rad ) {
    HRESULT _hr = raw_AssignGeocentric(Lat, Lon, Rad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgLLAGeocentric::AssignGeodetic ( double Lat, double Lon, double Alt ) {
    HRESULT _hr = raw_AssignGeodetic(Lat, Lon, Alt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgLLAGeocentric wrapper method implementations
//

double IAgLLAGeocentric::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLLAGeocentric::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgLLAGeocentric::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLLAGeocentric::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgLLAGeocentric::GetRad ( ) {
    double _result = 0;
    HRESULT _hr = get_Rad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLLAGeocentric::PutRad ( double pVal ) {
    HRESULT _hr = put_Rad(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgLLAGeodetic wrapper method implementations
//

double _IAgLLAGeodetic::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLLAGeodetic::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgLLAGeodetic::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLLAGeodetic::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgLLAGeodetic::GetAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_Alt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLLAGeodetic::PutAlt ( double pVal ) {
    HRESULT _hr = put_Alt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLLAPositionPtr _IAgLLAGeodetic::ConvertTo ( enum AgELLAPositionType Type ) {
    struct IAgLLAPosition * _result = 0;
    HRESULT _hr = raw_ConvertTo(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLLAPositionPtr(_result, false);
}

enum AgELLAPositionType _IAgLLAGeodetic::GetType ( ) {
    enum AgELLAPositionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgLLAGeodetic::Assign ( struct IAgLLAPosition * pPos ) {
    HRESULT _hr = raw_Assign(pPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgLLAGeodetic::AssignGeocentric ( double Lat, double Lon, double Rad ) {
    HRESULT _hr = raw_AssignGeocentric(Lat, Lon, Rad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgLLAGeodetic::AssignGeodetic ( double Lat, double Lon, double Alt ) {
    HRESULT _hr = raw_AssignGeodetic(Lat, Lon, Alt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgLLAGeodetic wrapper method implementations
//

double IAgLLAGeodetic::GetLat ( ) {
    double _result = 0;
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLLAGeodetic::PutLat ( double pVal ) {
    HRESULT _hr = put_Lat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgLLAGeodetic::GetLon ( ) {
    double _result = 0;
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLLAGeodetic::PutLon ( double pVal ) {
    HRESULT _hr = put_Lon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgLLAGeodetic::GetAlt ( ) {
    double _result = 0;
    HRESULT _hr = get_Alt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLLAGeodetic::PutAlt ( double pVal ) {
    HRESULT _hr = put_Alt(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgLtPoint wrapper method implementations
//

_variant_t _IAgLtPoint::GetLat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgLtPoint::PutLat ( const _variant_t & pLat ) {
    HRESULT _hr = put_Lat(pLat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgLtPoint::GetLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgLtPoint::PutLon ( const _variant_t & pLon ) {
    HRESULT _hr = put_Lon(pLon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgLtPoint wrapper method implementations
//

_variant_t IAgLtPoint::GetLat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Lat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgLtPoint::PutLat ( const _variant_t & pLat ) {
    HRESULT _hr = put_Lat(pLat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgLtPoint::GetLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Lon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgLtPoint::PutLon ( const _variant_t & pLon ) {
    HRESULT _hr = put_Lon(pLon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgLtPointCollection wrapper method implementations
//

IUnknownPtr IAgLtPointCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

long IAgLtPointCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgLtPointPtr IAgLtPointCollection::GetItem ( long Index ) {
    struct IAgLtPoint * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLtPointPtr(_result, false);
}

IAgLtPointPtr IAgLtPointCollection::Add ( const _variant_t & Lat, const _variant_t & Lon ) {
    struct IAgLtPoint * _result = 0;
    HRESULT _hr = raw_Add(Lat, Lon, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLtPointPtr(_result, false);
}

HRESULT IAgLtPointCollection::Remove ( long ItemIndex ) {
    HRESULT _hr = raw_Remove(ItemIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgLtPointCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IAgLtPointCollection::GetAnchorPoint ( ) {
    long _result = 0;
    HRESULT _hr = get_AnchorPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtPointCollection::PutAnchorPoint ( long pAnchorPt ) {
    HRESULT _hr = put_AnchorPoint(pAnchorPt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgLtGraphics wrapper method implementations
//

_bstr_t IAgLtGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgLtGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgLtGraphics::GetBoundingRectVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundingRectVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtGraphics::PutBoundingRectVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BoundingRectVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgLtGraphics::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtGraphics::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle IAgLtGraphics::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtGraphics::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgLtGraphics::GetLinePtsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LinePtsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtGraphics::PutLinePtsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LinePtsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgLtGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtGraphics::PutUseInstNameLabel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseInstNameLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgLtGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtGraphics::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgLtGraphics::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtGraphics::PutLabelColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_LabelColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgLtGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgLtGraphics::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgLtGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtGraphics::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgLtGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtGraphics::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr IAgLtGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

//
// interface IAgLtVO wrapper method implementations
//

VARIANT_BOOL IAgLtVO::GetEnableLabelMaxViewingDist ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLabelMaxViewingDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtVO::PutEnableLabelMaxViewingDist ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_EnableLabelMaxViewingDist(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgLtVO::GetLabelMaxViewingDist ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelMaxViewingDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLtVO::PutLabelMaxViewingDist ( double pLabelMaxViewingDist ) {
    HRESULT _hr = put_LabelMaxViewingDist(pLabelMaxViewingDist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOBorderWallPtr IAgLtVO::GetBorderWall ( ) {
    struct IAgVOBorderWall * _result = 0;
    HRESULT _hr = get_BorderWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOBorderWallPtr(_result, false);
}

IAgVOVectorPtr IAgLtVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

//
// interface IAgLineTarget wrapper method implementations
//

IAgLtPointCollectionPtr IAgLineTarget::GetPoints ( ) {
    struct IAgLtPointCollection * _result = 0;
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLtPointCollectionPtr(_result, false);
}

IAgLtGraphicsPtr IAgLineTarget::GetGraphics ( ) {
    struct IAgLtGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLtGraphicsPtr(_result, false);
}

IAgLtVOPtr IAgLineTarget::GetVO ( ) {
    struct IAgLtVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLtVOPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgLineTarget::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

VARIANT_BOOL IAgLineTarget::GetAllowObjectAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowObjectAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgLineTarget::PutAllowObjectAccess ( VARIANT_BOOL pAllowAccess ) {
    HRESULT _hr = put_AllowObjectAccess(pAllowAccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgLtGraphics wrapper method implementations
//

_bstr_t _IAgLtGraphics::GetLabelName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLtGraphics::PutLabelName ( _bstr_t pVal ) {
    HRESULT _hr = put_LabelName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLtGraphics::GetBoundingRectVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoundingRectVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtGraphics::PutBoundingRectVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_BoundingRectVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgLtGraphics::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtGraphics::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgLtGraphics::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtGraphics::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLtGraphics::GetLinePtsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LinePtsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtGraphics::PutLinePtsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LinePtsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLtGraphics::GetUseInstNameLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseInstNameLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtGraphics::PutUseInstNameLabel ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseInstNameLabel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLtGraphics::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtGraphics::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgLtGraphics::GetLabelColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LabelColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtGraphics::PutLabelColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_LabelColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgLtGraphics::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLtGraphics::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgLtGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtGraphics::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLtGraphics::GetInherit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Inherit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtGraphics::PutInherit ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Inherit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLabelNoteCollectionPtr _IAgLtGraphics::GetLabelNotes ( ) {
    struct IAgLabelNoteCollection * _result = 0;
    HRESULT _hr = get_LabelNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLabelNoteCollectionPtr(_result, false);
}

//
// interface _IAgLtVO wrapper method implementations
//

VARIANT_BOOL _IAgLtVO::GetEnableLabelMaxViewingDist ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLabelMaxViewingDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtVO::PutEnableLabelMaxViewingDist ( VARIANT_BOOL pUse ) {
    HRESULT _hr = put_EnableLabelMaxViewingDist(pUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgLtVO::GetLabelMaxViewingDist ( ) {
    double _result = 0;
    HRESULT _hr = get_LabelMaxViewingDist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLtVO::PutLabelMaxViewingDist ( double pLabelMaxViewingDist ) {
    HRESULT _hr = put_LabelMaxViewingDist(pLabelMaxViewingDist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVOBorderWallPtr _IAgLtVO::GetBorderWall ( ) {
    struct IAgVOBorderWall * _result = 0;
    HRESULT _hr = get_BorderWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOBorderWallPtr(_result, false);
}

IAgVOVectorPtr _IAgLtVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

//
// interface IAgCvGrid wrapper method implementations
//

enum AgECvBounds IAgCvGrid::GetBoundsType ( ) {
    enum AgECvBounds _result;
    HRESULT _hr = get_BoundsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGrid::PutBoundsType ( enum AgECvBounds pVal ) {
    HRESULT _hr = put_BoundsType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCvBoundsPtr IAgCvGrid::GetBounds ( ) {
    struct IAgCvBounds * _result = 0;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvBoundsPtr(_result, false);
}

enum AgECvResolution IAgCvGrid::GetResolutionType ( ) {
    enum AgECvResolution _result;
    HRESULT _hr = get_ResolutionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGrid::PutResolutionType ( enum AgECvResolution pVal ) {
    HRESULT _hr = put_ResolutionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCvResolutionPtr IAgCvGrid::GetResolution ( ) {
    struct IAgCvResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvResolutionPtr(_result, false);
}

//
// interface IAgCvPointFileListCollection wrapper method implementations
//

long IAgCvPointFileListCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgCvPointFileListCollection::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr IAgCvPointFileListCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgCvPointFileListCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvPointFileListCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvPointFileListCollection::Add ( _bstr_t Filename ) {
    HRESULT _hr = raw_Add(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvPointFileListCollection::Remove ( _bstr_t Filename ) {
    HRESULT _hr = raw_Remove(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgCvPointDefinition wrapper method implementations
//

enum AgECvPointLocMethod IAgCvPointDefinition::GetPointLocationMethod ( ) {
    enum AgECvPointLocMethod _result;
    HRESULT _hr = get_PointLocationMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvPointDefinition::PutPointLocationMethod ( enum AgECvPointLocMethod pVal ) {
    HRESULT _hr = put_PointLocationMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCvPointFileListCollectionPtr IAgCvPointDefinition::GetPointFileList ( ) {
    struct IAgCvPointFileListCollection * _result = 0;
    HRESULT _hr = get_PointFileList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvPointFileListCollectionPtr(_result, false);
}

enum AgECvGridClass IAgCvPointDefinition::GetGridClass ( ) {
    enum AgECvGridClass _result;
    HRESULT _hr = get_GridClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvPointDefinition::PutGridClass ( enum AgECvGridClass pVal ) {
    HRESULT _hr = put_GridClass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgCvPointDefinition::GetUseGridSeed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseGridSeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvPointDefinition::PutUseGridSeed ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseGridSeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgCvPointDefinition::GetUseObjectAsSeed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseObjectAsSeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvPointDefinition::PutUseObjectAsSeed ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseObjectAsSeed(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvAltitudeMethod IAgCvPointDefinition::GetAltitudeMethod ( ) {
    enum AgECvAltitudeMethod _result;
    HRESULT _hr = get_AltitudeMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvPointDefinition::PutAltitudeMethod ( enum AgECvAltitudeMethod pVal ) {
    HRESULT _hr = put_AltitudeMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgCvPointDefinition::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvPointDefinition::PutAltitude ( double pRetVal ) {
    HRESULT _hr = put_Altitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgCvPointDefinition::GetSeedInstance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SeedInstance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgCvPointDefinition::PutSeedInstance ( _bstr_t pRetVal ) {
    HRESULT _hr = put_SeedInstance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgCvPointDefinition::GetAvailableSeeds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableSeeds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgCvPointDefinition::SetPointsLLA ( SAFEARRAY * * LLAPoints ) {
    HRESULT _hr = raw_SetPointsLLA(LLAPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgECvGroundAltitudeMethod IAgCvPointDefinition::GetGroundAltitudeMethod ( ) {
    enum AgECvGroundAltitudeMethod _result;
    HRESULT _hr = get_GroundAltitudeMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvPointDefinition::PutGroundAltitudeMethod ( enum AgECvGroundAltitudeMethod pVal ) {
    HRESULT _hr = put_GroundAltitudeMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgCvPointDefinition::GetGroundAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_GroundAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvPointDefinition::PutGroundAltitude ( double pRetVal ) {
    HRESULT _hr = put_GroundAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvAdvanced wrapper method implementations
//

enum AgECvDataRetention IAgCvAdvanced::GetDataRetention ( ) {
    enum AgECvDataRetention _result;
    HRESULT _hr = get_DataRetention(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAdvanced::PutDataRetention ( enum AgECvDataRetention pVal ) {
    HRESULT _hr = put_DataRetention(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgCvAdvanced::GetAutoRecompute ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRecompute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAdvanced::PutAutoRecompute ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoRecompute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEDataSaveMode IAgCvAdvanced::GetSaveMode ( ) {
    enum AgEDataSaveMode _result;
    HRESULT _hr = get_SaveMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAdvanced::PutSaveMode ( enum AgEDataSaveMode pVal ) {
    HRESULT _hr = put_SaveMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvRegionAccessAccel IAgCvAdvanced::GetRegionAccessAcceleration ( ) {
    enum AgECvRegionAccessAccel _result;
    HRESULT _hr = get_RegionAccessAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAdvanced::PutRegionAccessAcceleration ( enum AgECvRegionAccessAccel pVal ) {
    HRESULT _hr = put_RegionAccessAcceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgCvAdvanced::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAdvanced::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgCvAdvanced::GetEnableLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAdvanced::PutEnableLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgCvAdvanced::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAdvanced::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessEventDetectionPtr IAgCvAdvanced::GetEventDetection ( ) {
    struct IAgAccessEventDetection * _result = 0;
    HRESULT _hr = get_EventDetection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessEventDetectionPtr(_result, false);
}

IAgAccessSamplingPtr IAgCvAdvanced::GetSampling ( ) {
    struct IAgAccessSampling * _result = 0;
    HRESULT _hr = get_Sampling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessSamplingPtr(_result, false);
}

long IAgCvAdvanced::GetNAssetsSatisfactionThreshold ( ) {
    long _result = 0;
    HRESULT _hr = get_NAssetsSatisfactionThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAdvanced::PutNAssetsSatisfactionThreshold ( long pVal ) {
    HRESULT _hr = put_NAssetsSatisfactionThreshold(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvSatisfactionType IAgCvAdvanced::GetNAssetsSatisfactionType ( ) {
    enum AgECvSatisfactionType _result;
    HRESULT _hr = get_NAssetsSatisfactionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAdvanced::PutNAssetsSatisfactionType ( enum AgECvSatisfactionType pVal ) {
    HRESULT _hr = put_NAssetsSatisfactionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvInterval wrapper method implementations
//

VARIANT_BOOL IAgCvInterval::GetUseScenarioInterval ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvInterval::PutUseScenarioInterval ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseScenarioInterval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgCvInterval::GetStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvInterval::PutStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_Start(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgCvInterval::GetStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvInterval::PutStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_Stop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvGfxStatic wrapper method implementations
//

VARIANT_BOOL IAgCvGfxStatic::GetIsRegionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRegionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGfxStatic::PutIsRegionVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsRegionVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgCvGfxStatic::GetIsPointsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGfxStatic::PutIsPointsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgCvGfxStatic::GetIsLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGfxStatic::PutIsLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgCvGfxStatic::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGfxStatic::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgCvGfxStatic::GetFillPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGfxStatic::PutFillPoints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillPoints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgCvGfxStatic::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgCvGfxStatic::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvGfxAnimation wrapper method implementations
//

VARIANT_BOOL IAgCvGfxAnimation::GetIsSatisfactionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSatisfactionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGfxAnimation::PutIsSatisfactionVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsSatisfactionVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgCvGfxAnimation::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGfxAnimation::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvGfxProgress wrapper method implementations
//

VARIANT_BOOL IAgCvGfxProgress::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGfxProgress::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgCvGfxProgress::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvGfxProgress::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvGraphics wrapper method implementations
//

IAgCvGfxStaticPtr IAgCvGraphics::GetStatic ( ) {
    struct IAgCvGfxStatic * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGfxStaticPtr(_result, false);
}

IAgCvGfxAnimationPtr IAgCvGraphics::GetAnimation ( ) {
    struct IAgCvGfxAnimation * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGfxAnimationPtr(_result, false);
}

IAgCvGfxProgressPtr IAgCvGraphics::GetProgress ( ) {
    struct IAgCvGfxProgress * _result = 0;
    HRESULT _hr = get_Progress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGfxProgressPtr(_result, false);
}

//
// interface IAgCvVOAttributes wrapper method implementations
//

VARIANT_BOOL IAgCvVOAttributes::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvVOAttributes::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgCvVOAttributes::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvVOAttributes::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgCvVOAttributes::GetPointSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvVOAttributes::PutPointSize ( double pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvVO wrapper method implementations
//

IAgCvVOAttributesPtr IAgCvVO::GetStatic ( ) {
    struct IAgCvVOAttributes * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvVOAttributesPtr(_result, false);
}

IAgCvVOAttributesPtr IAgCvVO::GetAnimation ( ) {
    struct IAgCvVOAttributes * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvVOAttributesPtr(_result, false);
}

double IAgCvVO::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvVO::PutGranularity ( double pVal ) {
    HRESULT _hr = put_Granularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvGridPointSelection wrapper method implementations
//

IUnknownPtr IAgCvGridPointSelection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SAFEARRAY * IAgCvGridPointSelection::ToArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ToArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgCvGridInspector wrapper method implementations
//

HRESULT IAgCvGridInspector::SelectPoint ( const _variant_t & Lat, const _variant_t & Lon ) {
    HRESULT _hr = raw_SelectPoint(Lat, Lon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvGridInspector::SelectRegion ( _bstr_t RegionName ) {
    HRESULT _hr = raw_SelectRegion(RegionName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgDataProviderInfoPtr IAgCvGridInspector::GetPointCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr IAgCvGridInspector::GetPointDailyCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointDailyCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr IAgCvGridInspector::GetPointProbOfCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointProbOfCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr IAgCvGridInspector::GetRegionCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr IAgCvGridInspector::GetRegionFullCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionFullCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr IAgCvGridInspector::GetRegionPassCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionPassCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

HRESULT IAgCvGridInspector::ClearSelection ( ) {
    HRESULT _hr = raw_ClearSelection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IAgCvGridInspector::GetMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgCvGridPointSelectionPtr IAgCvGridInspector::GetGridPointSelection ( ) {
    struct IAgCvGridPointSelection * _result = 0;
    HRESULT _hr = raw_GetGridPointSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGridPointSelectionPtr(_result, false);
}

//
// interface IAgCvRegionFilesCollection wrapper method implementations
//

long IAgCvRegionFilesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgCvRegionFilesCollection::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr IAgCvRegionFilesCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgCvRegionFilesCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvRegionFilesCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvRegionFilesCollection::Add ( _bstr_t Filename ) {
    HRESULT _hr = raw_Add(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvRegionFilesCollection::Remove ( _bstr_t Filename ) {
    HRESULT _hr = raw_Remove(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgCvAreaTargetsCollection wrapper method implementations
//

long IAgCvAreaTargetsCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgCvAreaTargetsCollection::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr IAgCvAreaTargetsCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgCvAreaTargetsCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvAreaTargetsCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvAreaTargetsCollection::Add ( _bstr_t TargetName ) {
    HRESULT _hr = raw_Add(TargetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvAreaTargetsCollection::Remove ( _bstr_t TargetName ) {
    HRESULT _hr = raw_Remove(TargetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgCvAreaTargetsCollection::GetAvailableAreaTargets ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAreaTargets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgCvBoundsCustomRegions wrapper method implementations
//

IAgCvRegionFilesCollectionPtr _IAgCvBoundsCustomRegions::GetRegionFiles ( ) {
    struct IAgCvRegionFilesCollection * _result = 0;
    HRESULT _hr = get_RegionFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvRegionFilesCollectionPtr(_result, false);
}

IAgCvAreaTargetsCollectionPtr _IAgCvBoundsCustomRegions::GetAreaTargets ( ) {
    struct IAgCvAreaTargetsCollection * _result = 0;
    HRESULT _hr = get_AreaTargets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAreaTargetsCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgCvBoundsCustomRegions::GetCheckForHoles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckForHoles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvBoundsCustomRegions::PutCheckForHoles ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CheckForHoles(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvCustomRegionAlgorithm _IAgCvBoundsCustomRegions::GetSmallRegionAlgorithm ( ) {
    enum AgECvCustomRegionAlgorithm _result;
    HRESULT _hr = get_SmallRegionAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvBoundsCustomRegions::PutSmallRegionAlgorithm ( enum AgECvCustomRegionAlgorithm pVal ) {
    HRESULT _hr = put_SmallRegionAlgorithm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvBoundsCustomRegions wrapper method implementations
//

IAgCvRegionFilesCollectionPtr IAgCvBoundsCustomRegions::GetRegionFiles ( ) {
    struct IAgCvRegionFilesCollection * _result = 0;
    HRESULT _hr = get_RegionFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvRegionFilesCollectionPtr(_result, false);
}

IAgCvAreaTargetsCollectionPtr IAgCvBoundsCustomRegions::GetAreaTargets ( ) {
    struct IAgCvAreaTargetsCollection * _result = 0;
    HRESULT _hr = get_AreaTargets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAreaTargetsCollectionPtr(_result, false);
}

VARIANT_BOOL IAgCvBoundsCustomRegions::GetCheckForHoles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckForHoles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvBoundsCustomRegions::PutCheckForHoles ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CheckForHoles(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvCustomRegionAlgorithm IAgCvBoundsCustomRegions::GetSmallRegionAlgorithm ( ) {
    enum AgECvCustomRegionAlgorithm _result;
    HRESULT _hr = get_SmallRegionAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvBoundsCustomRegions::PutSmallRegionAlgorithm ( enum AgECvCustomRegionAlgorithm pVal ) {
    HRESULT _hr = put_SmallRegionAlgorithm(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvBoundsLat wrapper method implementations
//

_variant_t _IAgCvBoundsLat::GetMinLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvBoundsLat::PutMinLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgCvBoundsLat::GetMaxLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvBoundsLat::PutMaxLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvBoundsLat wrapper method implementations
//

_variant_t IAgCvBoundsLat::GetMinLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvBoundsLat::PutMinLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgCvBoundsLat::GetMaxLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvBoundsLat::PutMaxLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvBoundsLatLine wrapper method implementations
//

_variant_t _IAgCvBoundsLatLine::GetStartLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvBoundsLatLine::PutStartLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgCvBoundsLatLine::GetStopLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvBoundsLatLine::PutStopLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgCvBoundsLatLine::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvBoundsLatLine::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvBoundsLatLine wrapper method implementations
//

_variant_t IAgCvBoundsLatLine::GetStartLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvBoundsLatLine::PutStartLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgCvBoundsLatLine::GetStopLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvBoundsLatLine::PutStopLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgCvBoundsLatLine::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvBoundsLatLine::PutLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Latitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvBoundsLonLine wrapper method implementations
//

_variant_t _IAgCvBoundsLonLine::GetMinLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvBoundsLonLine::PutMinLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgCvBoundsLonLine::GetMaxLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvBoundsLonLine::PutMaxLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgCvBoundsLonLine::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvBoundsLonLine::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvBoundsLonLine wrapper method implementations
//

_variant_t IAgCvBoundsLonLine::GetMinLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvBoundsLonLine::PutMinLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MinLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgCvBoundsLonLine::GetMaxLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvBoundsLonLine::PutMaxLatitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_MaxLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgCvBoundsLonLine::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvBoundsLonLine::PutLongitude ( const _variant_t & pVal ) {
    HRESULT _hr = put_Longitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvGrid wrapper method implementations
//

enum AgECvBounds _IAgCvGrid::GetBoundsType ( ) {
    enum AgECvBounds _result;
    HRESULT _hr = get_BoundsType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGrid::PutBoundsType ( enum AgECvBounds pRetVal ) {
    HRESULT _hr = put_BoundsType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCvBoundsPtr _IAgCvGrid::GetBounds ( ) {
    struct IAgCvBounds * _result = 0;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvBoundsPtr(_result, false);
}

enum AgECvResolution _IAgCvGrid::GetResolutionType ( ) {
    enum AgECvResolution _result;
    HRESULT _hr = get_ResolutionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGrid::PutResolutionType ( enum AgECvResolution pVal ) {
    HRESULT _hr = put_ResolutionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCvResolutionPtr _IAgCvGrid::GetResolution ( ) {
    struct IAgCvResolution * _result = 0;
    HRESULT _hr = get_Resolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvResolutionPtr(_result, false);
}

//
// interface _IAgCvPointDefinition wrapper method implementations
//

enum AgECvPointLocMethod _IAgCvPointDefinition::GetPointLocationMethod ( ) {
    enum AgECvPointLocMethod _result;
    HRESULT _hr = get_PointLocationMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvPointDefinition::PutPointLocationMethod ( enum AgECvPointLocMethod pRetVal ) {
    HRESULT _hr = put_PointLocationMethod(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvGridClass _IAgCvPointDefinition::GetGridClass ( ) {
    enum AgECvGridClass _result;
    HRESULT _hr = get_GridClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvPointDefinition::PutGridClass ( enum AgECvGridClass pRetVal ) {
    HRESULT _hr = put_GridClass(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgCvPointDefinition::GetUseGridSeed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseGridSeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvPointDefinition::PutUseGridSeed ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseGridSeed(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgCvPointDefinition::GetUseObjectAsSeed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseObjectAsSeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvPointDefinition::PutUseObjectAsSeed ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseObjectAsSeed(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvAltitudeMethod _IAgCvPointDefinition::GetAltitudeMethod ( ) {
    enum AgECvAltitudeMethod _result;
    HRESULT _hr = get_AltitudeMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvPointDefinition::PutAltitudeMethod ( enum AgECvAltitudeMethod pRetVal ) {
    HRESULT _hr = put_AltitudeMethod(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCvPointFileListCollectionPtr _IAgCvPointDefinition::GetPointFileList ( ) {
    struct IAgCvPointFileListCollection * _result = 0;
    HRESULT _hr = get_PointFileList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvPointFileListCollectionPtr(_result, false);
}

double _IAgCvPointDefinition::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvPointDefinition::PutAltitude ( double pRetVal ) {
    HRESULT _hr = put_Altitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgCvPointDefinition::GetSeedInstance ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SeedInstance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgCvPointDefinition::PutSeedInstance ( _bstr_t pRetVal ) {
    HRESULT _hr = put_SeedInstance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgCvPointDefinition::GetAvailableSeeds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableSeeds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgCvPointDefinition::SetPointsLLA ( SAFEARRAY * * LLAPoints ) {
    HRESULT _hr = raw_SetPointsLLA(LLAPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgECvGroundAltitudeMethod _IAgCvPointDefinition::GetGroundAltitudeMethod ( ) {
    enum AgECvGroundAltitudeMethod _result;
    HRESULT _hr = get_GroundAltitudeMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvPointDefinition::PutGroundAltitudeMethod ( enum AgECvGroundAltitudeMethod pVal ) {
    HRESULT _hr = put_GroundAltitudeMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgCvPointDefinition::GetGroundAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_GroundAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvPointDefinition::PutGroundAltitude ( double pRetVal ) {
    HRESULT _hr = put_GroundAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvAdvanced wrapper method implementations
//

enum AgECvDataRetention _IAgCvAdvanced::GetDataRetention ( ) {
    enum AgECvDataRetention _result;
    HRESULT _hr = get_DataRetention(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAdvanced::PutDataRetention ( enum AgECvDataRetention pVal ) {
    HRESULT _hr = put_DataRetention(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgCvAdvanced::GetAutoRecompute ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRecompute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAdvanced::PutAutoRecompute ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoRecompute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEDataSaveMode _IAgCvAdvanced::GetSaveMode ( ) {
    enum AgEDataSaveMode _result;
    HRESULT _hr = get_SaveMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAdvanced::PutSaveMode ( enum AgEDataSaveMode pVal ) {
    HRESULT _hr = put_SaveMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvRegionAccessAccel _IAgCvAdvanced::GetRegionAccessAcceleration ( ) {
    enum AgECvRegionAccessAccel _result;
    HRESULT _hr = get_RegionAccessAcceleration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAdvanced::PutRegionAccessAcceleration ( enum AgECvRegionAccessAccel pVal ) {
    HRESULT _hr = put_RegionAccessAcceleration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgCvAdvanced::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAdvanced::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgCvAdvanced::GetEnableLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAdvanced::PutEnableLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgCvAdvanced::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAdvanced::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessEventDetectionPtr _IAgCvAdvanced::GetEventDetection ( ) {
    struct IAgAccessEventDetection * _result = 0;
    HRESULT _hr = get_EventDetection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessEventDetectionPtr(_result, false);
}

IAgAccessSamplingPtr _IAgCvAdvanced::GetSampling ( ) {
    struct IAgAccessSampling * _result = 0;
    HRESULT _hr = get_Sampling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessSamplingPtr(_result, false);
}

long _IAgCvAdvanced::GetNAssetsSatisfactionThreshold ( ) {
    long _result = 0;
    HRESULT _hr = get_NAssetsSatisfactionThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAdvanced::PutNAssetsSatisfactionThreshold ( long pVal ) {
    HRESULT _hr = put_NAssetsSatisfactionThreshold(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvSatisfactionType _IAgCvAdvanced::GetNAssetsSatisfactionType ( ) {
    enum AgECvSatisfactionType _result;
    HRESULT _hr = get_NAssetsSatisfactionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAdvanced::PutNAssetsSatisfactionType ( enum AgECvSatisfactionType pVal ) {
    HRESULT _hr = put_NAssetsSatisfactionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvInterval wrapper method implementations
//

VARIANT_BOOL _IAgCvInterval::GetUseScenarioInterval ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvInterval::PutUseScenarioInterval ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioInterval(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgCvInterval::GetStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvInterval::PutStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_Start(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgCvInterval::GetStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvInterval::PutStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_Stop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvResolutionArea wrapper method implementations
//

double _IAgCvResolutionArea::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvResolutionArea::PutArea ( double pVal ) {
    HRESULT _hr = put_Area(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvResolutionArea wrapper method implementations
//

double IAgCvResolutionArea::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvResolutionArea::PutArea ( double pVal ) {
    HRESULT _hr = put_Area(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvResolutionDistance wrapper method implementations
//

double _IAgCvResolutionDistance::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvResolutionDistance::PutDistance ( double pVal ) {
    HRESULT _hr = put_Distance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvResolutionDistance wrapper method implementations
//

double IAgCvResolutionDistance::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvResolutionDistance::PutDistance ( double pVal ) {
    HRESULT _hr = put_Distance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvResolutionLatLon wrapper method implementations
//

_variant_t _IAgCvResolutionLatLon::GetLatLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LatLon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgCvResolutionLatLon::PutLatLon ( const _variant_t & pVal ) {
    HRESULT _hr = put_LatLon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCvResolutionLatLon wrapper method implementations
//

_variant_t IAgCvResolutionLatLon::GetLatLon ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LatLon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgCvResolutionLatLon::PutLatLon ( const _variant_t & pVal ) {
    HRESULT _hr = put_LatLon(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvGfxStatic wrapper method implementations
//

VARIANT_BOOL _IAgCvGfxStatic::GetIsRegionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRegionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGfxStatic::PutIsRegionVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsRegionVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgCvGfxStatic::GetIsPointsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGfxStatic::PutIsPointsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsPointsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgCvGfxStatic::GetIsLabelsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLabelsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGfxStatic::PutIsLabelsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLabelsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgCvGfxStatic::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGfxStatic::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgCvGfxStatic::GetFillPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGfxStatic::PutFillPoints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillPoints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgCvGfxStatic::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgCvGfxStatic::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvGfxAnimation wrapper method implementations
//

VARIANT_BOOL _IAgCvGfxAnimation::GetIsSatisfactionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSatisfactionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGfxAnimation::PutIsSatisfactionVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsSatisfactionVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgCvGfxAnimation::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGfxAnimation::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvGfxProgress wrapper method implementations
//

VARIANT_BOOL _IAgCvGfxProgress::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGfxProgress::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgCvGfxProgress::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvGfxProgress::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvGraphics wrapper method implementations
//

IAgCvGfxStaticPtr _IAgCvGraphics::GetStatic ( ) {
    struct IAgCvGfxStatic * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGfxStaticPtr(_result, false);
}

IAgCvGfxAnimationPtr _IAgCvGraphics::GetAnimation ( ) {
    struct IAgCvGfxAnimation * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGfxAnimationPtr(_result, false);
}

IAgCvGfxProgressPtr _IAgCvGraphics::GetProgress ( ) {
    struct IAgCvGfxProgress * _result = 0;
    HRESULT _hr = get_Progress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGfxProgressPtr(_result, false);
}

//
// interface _IAgCvVO wrapper method implementations
//

IAgCvVOAttributesPtr _IAgCvVO::GetStatic ( ) {
    struct IAgCvVOAttributes * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvVOAttributesPtr(_result, false);
}

IAgCvVOAttributesPtr _IAgCvVO::GetAnimation ( ) {
    struct IAgCvVOAttributes * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvVOAttributesPtr(_result, false);
}

double _IAgCvVO::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvVO::PutGranularity ( double pVal ) {
    HRESULT _hr = put_Granularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCvVOAttributes wrapper method implementations
//

VARIANT_BOOL _IAgCvVOAttributes::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvVOAttributes::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgCvVOAttributes::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvVOAttributes::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgCvVOAttributes::GetPointSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvVOAttributes::PutPointSize ( double pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgChTimePeriodBase wrapper method implementations
//

enum AgEChTimePeriodType _IAgChTimePeriodBase::GetType ( ) {
    enum AgEChTimePeriodType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgChTimePeriodBase wrapper method implementations
//

enum AgEChTimePeriodType IAgChTimePeriodBase::GetType ( ) {
    enum AgEChTimePeriodType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgChUserSpecifiedTimePeriod wrapper method implementations
//

enum AgEChTimePeriodType _IAgChUserSpecifiedTimePeriod::GetType ( ) {
    enum AgEChTimePeriodType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgChUserSpecifiedTimePeriod::GetStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgChUserSpecifiedTimePeriod::PutStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_Start(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgChUserSpecifiedTimePeriod::GetStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgChUserSpecifiedTimePeriod::PutStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_Stop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgChUserSpecifiedTimePeriod::SetTimePeriod ( const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_SetTimePeriod(Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgChUserSpecifiedTimePeriod wrapper method implementations
//

_variant_t IAgChUserSpecifiedTimePeriod::GetStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgChUserSpecifiedTimePeriod::PutStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_Start(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgChUserSpecifiedTimePeriod::GetStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgChUserSpecifiedTimePeriod::PutStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_Stop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgChUserSpecifiedTimePeriod::SetTimePeriod ( const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_SetTimePeriod(Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgChConstraints wrapper method implementations
//

VARIANT_BOOL _IAgChConstraints::GetUseMinAngle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChConstraints::PutUseMinAngle ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgChConstraints::GetMinAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_MinAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChConstraints::PutMinAngle ( double pVal ) {
    HRESULT _hr = put_MinAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgChConstraints::GetUseMaxAngle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChConstraints::PutUseMaxAngle ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgChConstraints::GetMaxAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChConstraints::PutMaxAngle ( double pVal ) {
    HRESULT _hr = put_MaxAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgChConstraints::GetUseMinLinkTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinLinkTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChConstraints::PutUseMinLinkTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinLinkTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgChConstraints::GetMinLinkTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinLinkTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChConstraints::PutMinLinkTime ( double pVal ) {
    HRESULT _hr = put_MinLinkTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgChConstraints::GetUseLoadIntervalFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLoadIntervalFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChConstraints::PutUseLoadIntervalFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLoadIntervalFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgChConstraints::GetLoadIntervalFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LoadIntervalFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgChConstraints::PutLoadIntervalFile ( _bstr_t pVal ) {
    HRESULT _hr = put_LoadIntervalFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgChConstraints wrapper method implementations
//

VARIANT_BOOL IAgChConstraints::GetUseMinAngle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChConstraints::PutUseMinAngle ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgChConstraints::GetMinAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_MinAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChConstraints::PutMinAngle ( double pVal ) {
    HRESULT _hr = put_MinAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgChConstraints::GetUseMaxAngle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMaxAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChConstraints::PutUseMaxAngle ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMaxAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgChConstraints::GetMaxAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChConstraints::PutMaxAngle ( double pVal ) {
    HRESULT _hr = put_MaxAngle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgChConstraints::GetUseMinLinkTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseMinLinkTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChConstraints::PutUseMinLinkTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseMinLinkTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgChConstraints::GetMinLinkTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinLinkTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChConstraints::PutMinLinkTime ( double pVal ) {
    HRESULT _hr = put_MinLinkTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgChConstraints::GetUseLoadIntervalFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLoadIntervalFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChConstraints::PutUseLoadIntervalFile ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLoadIntervalFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgChConstraints::GetLoadIntervalFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LoadIntervalFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgChConstraints::PutLoadIntervalFile ( _bstr_t pVal ) {
    HRESULT _hr = put_LoadIntervalFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgChGfxStatic wrapper method implementations
//

VARIANT_BOOL IAgChGfxStatic::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChGfxStatic::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgChGfxStatic::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChGfxStatic::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgChGfxStatic::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChGfxStatic::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgChGfxAnimation wrapper method implementations
//

VARIANT_BOOL IAgChGfxAnimation::GetIsHighlightVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsHighlightVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChGfxAnimation::PutIsHighlightVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsHighlightVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgChGfxAnimation::GetIsLineVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLineVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChGfxAnimation::PutIsLineVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLineVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgChGfxAnimation::GetIsDirectionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDirectionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChGfxAnimation::PutIsDirectionVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsDirectionVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgChGfxAnimation::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChGfxAnimation::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth IAgChGfxAnimation::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChGfxAnimation::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgChGraphics wrapper method implementations
//

IAgChGfxStaticPtr IAgChGraphics::GetStatic ( ) {
    struct IAgChGfxStatic * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChGfxStaticPtr(_result, false);
}

IAgChGfxAnimationPtr IAgChGraphics::GetAnimation ( ) {
    struct IAgChGfxAnimation * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChGfxAnimationPtr(_result, false);
}

//
// interface IAgChVO wrapper method implementations
//

IAgVODataDisplayCollectionPtr IAgChVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

//
// interface _IAgChGfxStatic wrapper method implementations
//

VARIANT_BOOL _IAgChGfxStatic::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChGfxStatic::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgChGfxStatic::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChGfxStatic::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgChGfxStatic::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChGfxStatic::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgChGfxAnimation wrapper method implementations
//

VARIANT_BOOL _IAgChGfxAnimation::GetIsHighlightVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsHighlightVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChGfxAnimation::PutIsHighlightVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsHighlightVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgChGfxAnimation::GetIsLineVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLineVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChGfxAnimation::PutIsLineVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsLineVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgChGfxAnimation::GetIsDirectionVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDirectionVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChGfxAnimation::PutIsDirectionVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsDirectionVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgChGfxAnimation::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChGfxAnimation::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgChGfxAnimation::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChGfxAnimation::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgChGraphics wrapper method implementations
//

IAgChGfxStaticPtr _IAgChGraphics::GetStatic ( ) {
    struct IAgChGfxStatic * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChGfxStaticPtr(_result, false);
}

IAgChGfxAnimationPtr _IAgChGraphics::GetAnimation ( ) {
    struct IAgChGfxAnimation * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChGfxAnimationPtr(_result, false);
}

//
// interface _IAgChVO wrapper method implementations
//

IAgVODataDisplayCollectionPtr _IAgChVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

//
// interface _IAgRfCoefficients wrapper method implementations
//

double _IAgRfCoefficients::GetC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_C0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC0 ( double pVal ) {
    HRESULT _hr = put_C0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC1 ( double pVal ) {
    HRESULT _hr = put_C1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_C2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC2 ( double pVal ) {
    HRESULT _hr = put_C2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_C3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC3 ( double pVal ) {
    HRESULT _hr = put_C3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC4 ( ) {
    double _result = 0;
    HRESULT _hr = get_C4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC4 ( double pVal ) {
    HRESULT _hr = put_C4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC5 ( ) {
    double _result = 0;
    HRESULT _hr = get_C5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC5 ( double pVal ) {
    HRESULT _hr = put_C5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC6 ( ) {
    double _result = 0;
    HRESULT _hr = get_C6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC6 ( double pVal ) {
    HRESULT _hr = put_C6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC7 ( ) {
    double _result = 0;
    HRESULT _hr = get_C7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC7 ( double pVal ) {
    HRESULT _hr = put_C7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC8 ( ) {
    double _result = 0;
    HRESULT _hr = get_C8(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC8 ( double pVal ) {
    HRESULT _hr = put_C8(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC9 ( ) {
    double _result = 0;
    HRESULT _hr = get_C9(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC9 ( double pVal ) {
    HRESULT _hr = put_C9(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfCoefficients::GetC10 ( ) {
    double _result = 0;
    HRESULT _hr = get_C10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfCoefficients::PutC10 ( double pVal ) {
    HRESULT _hr = put_C10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgRfCoefficients wrapper method implementations
//

double IAgRfCoefficients::GetC0 ( ) {
    double _result = 0;
    HRESULT _hr = get_C0(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC0 ( double pVal ) {
    HRESULT _hr = put_C0(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC1 ( ) {
    double _result = 0;
    HRESULT _hr = get_C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC1 ( double pVal ) {
    HRESULT _hr = put_C1(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC2 ( ) {
    double _result = 0;
    HRESULT _hr = get_C2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC2 ( double pVal ) {
    HRESULT _hr = put_C2(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC3 ( ) {
    double _result = 0;
    HRESULT _hr = get_C3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC3 ( double pVal ) {
    HRESULT _hr = put_C3(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC4 ( ) {
    double _result = 0;
    HRESULT _hr = get_C4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC4 ( double pVal ) {
    HRESULT _hr = put_C4(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC5 ( ) {
    double _result = 0;
    HRESULT _hr = get_C5(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC5 ( double pVal ) {
    HRESULT _hr = put_C5(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC6 ( ) {
    double _result = 0;
    HRESULT _hr = get_C6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC6 ( double pVal ) {
    HRESULT _hr = put_C6(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC7 ( ) {
    double _result = 0;
    HRESULT _hr = get_C7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC7 ( double pVal ) {
    HRESULT _hr = put_C7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC8 ( ) {
    double _result = 0;
    HRESULT _hr = get_C8(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC8 ( double pVal ) {
    HRESULT _hr = put_C8(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC9 ( ) {
    double _result = 0;
    HRESULT _hr = get_C9(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC9 ( double pVal ) {
    HRESULT _hr = put_C9(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfCoefficients::GetC10 ( ) {
    double _result = 0;
    HRESULT _hr = get_C10(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfCoefficients::PutC10 ( double pVal ) {
    HRESULT _hr = put_C10(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgRfModelEffectiveRadiusMethod wrapper method implementations
//

double _IAgRfModelEffectiveRadiusMethod::GetEffRad ( ) {
    double _result = 0;
    HRESULT _hr = get_EffRad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelEffectiveRadiusMethod::PutEffRad ( double pVal ) {
    HRESULT _hr = put_EffRad(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfModelEffectiveRadiusMethod::GetMaxTargetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTargetAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelEffectiveRadiusMethod::PutMaxTargetAltitude ( double pVal ) {
    HRESULT _hr = put_MaxTargetAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgRfModelEffectiveRadiusMethod::GetUseExtrapolation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseExtrapolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelEffectiveRadiusMethod::PutUseExtrapolation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseExtrapolation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfModelEffectiveRadiusMethod::GetCeiling ( ) {
    double _result = 0;
    HRESULT _hr = get_Ceiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelEffectiveRadiusMethod::PutCeiling ( double pVal ) {
    HRESULT _hr = put_Ceiling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgRfModelEffectiveRadiusMethod wrapper method implementations
//

double IAgRfModelEffectiveRadiusMethod::GetEffRad ( ) {
    double _result = 0;
    HRESULT _hr = get_EffRad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelEffectiveRadiusMethod::PutEffRad ( double pVal ) {
    HRESULT _hr = put_EffRad(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfModelEffectiveRadiusMethod::GetMaxTargetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTargetAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelEffectiveRadiusMethod::PutMaxTargetAltitude ( double pVal ) {
    HRESULT _hr = put_MaxTargetAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgRfModelEffectiveRadiusMethod::GetUseExtrapolation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseExtrapolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelEffectiveRadiusMethod::PutUseExtrapolation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseExtrapolation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfModelEffectiveRadiusMethod::GetCeiling ( ) {
    double _result = 0;
    HRESULT _hr = get_Ceiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelEffectiveRadiusMethod::PutCeiling ( double pVal ) {
    HRESULT _hr = put_Ceiling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgRfModelITURP8344 wrapper method implementations
//

double _IAgRfModelITURP8344::GetCeiling ( ) {
    double _result = 0;
    HRESULT _hr = get_Ceiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelITURP8344::PutCeiling ( double pVal ) {
    HRESULT _hr = put_Ceiling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfModelITURP8344::GetAtmosAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelITURP8344::PutAtmosAltitude ( double pVal ) {
    HRESULT _hr = put_AtmosAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfModelITURP8344::GetKneeBendFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_KneeBendFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelITURP8344::PutKneeBendFactor ( double pVal ) {
    HRESULT _hr = put_KneeBendFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgRfModelITURP8344 wrapper method implementations
//

double IAgRfModelITURP8344::GetCeiling ( ) {
    double _result = 0;
    HRESULT _hr = get_Ceiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelITURP8344::PutCeiling ( double pVal ) {
    HRESULT _hr = put_Ceiling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfModelITURP8344::GetAtmosAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelITURP8344::PutAtmosAltitude ( double pVal ) {
    HRESULT _hr = put_AtmosAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfModelITURP8344::GetKneeBendFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_KneeBendFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelITURP8344::PutKneeBendFactor ( double pVal ) {
    HRESULT _hr = put_KneeBendFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgRfModelSCFMethod wrapper method implementations
//

double _IAgRfModelSCFMethod::GetMinTargetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MinTargetAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelSCFMethod::PutMinTargetAltitude ( double pVal ) {
    HRESULT _hr = put_MinTargetAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgRfModelSCFMethod::GetUseExtrapolation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseExtrapolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelSCFMethod::PutUseExtrapolation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseExtrapolation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfModelSCFMethod::GetCeiling ( ) {
    double _result = 0;
    HRESULT _hr = get_Ceiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelSCFMethod::PutCeiling ( double pVal ) {
    HRESULT _hr = put_Ceiling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfModelSCFMethod::GetAtmosAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelSCFMethod::PutAtmosAltitude ( double pVal ) {
    HRESULT _hr = put_AtmosAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfModelSCFMethod::GetKneeBendFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_KneeBendFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelSCFMethod::PutKneeBendFactor ( double pVal ) {
    HRESULT _hr = put_KneeBendFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgRfModelSCFMethod::GetUseRefractionIndex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseRefractionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelSCFMethod::PutUseRefractionIndex ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseRefractionIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgRfModelSCFMethod::GetRefractionIndex ( ) {
    double _result = 0;
    HRESULT _hr = get_RefractionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgRfModelSCFMethod::PutRefractionIndex ( double pVal ) {
    HRESULT _hr = put_RefractionIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgRfCoefficientsPtr _IAgRfModelSCFMethod::GetCoefficients ( ) {
    struct IAgRfCoefficients * _result = 0;
    HRESULT _hr = get_Coefficients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgRfCoefficientsPtr(_result, false);
}

//
// interface IAgRfModelSCFMethod wrapper method implementations
//

double IAgRfModelSCFMethod::GetMinTargetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MinTargetAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelSCFMethod::PutMinTargetAltitude ( double pVal ) {
    HRESULT _hr = put_MinTargetAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgRfModelSCFMethod::GetUseExtrapolation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseExtrapolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelSCFMethod::PutUseExtrapolation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseExtrapolation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfModelSCFMethod::GetCeiling ( ) {
    double _result = 0;
    HRESULT _hr = get_Ceiling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelSCFMethod::PutCeiling ( double pVal ) {
    HRESULT _hr = put_Ceiling(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfModelSCFMethod::GetAtmosAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AtmosAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelSCFMethod::PutAtmosAltitude ( double pVal ) {
    HRESULT _hr = put_AtmosAltitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfModelSCFMethod::GetKneeBendFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_KneeBendFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelSCFMethod::PutKneeBendFactor ( double pVal ) {
    HRESULT _hr = put_KneeBendFactor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgRfModelSCFMethod::GetUseRefractionIndex ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseRefractionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelSCFMethod::PutUseRefractionIndex ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseRefractionIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgRfModelSCFMethod::GetRefractionIndex ( ) {
    double _result = 0;
    HRESULT _hr = get_RefractionIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgRfModelSCFMethod::PutRefractionIndex ( double pVal ) {
    HRESULT _hr = put_RefractionIndex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgRfCoefficientsPtr IAgRfModelSCFMethod::GetCoefficients ( ) {
    struct IAgRfCoefficients * _result = 0;
    HRESULT _hr = get_Coefficients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgRfCoefficientsPtr(_result, false);
}

//
// interface _IAgFmDefCompute wrapper method implementations
//

enum AgEFmCompute _IAgFmDefCompute::GetComputeType ( ) {
    enum AgEFmCompute _result;
    HRESULT _hr = get_ComputeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefCompute::SetComputeType ( enum AgEFmCompute CompteType ) {
    HRESULT _hr = raw_SetComputeType(CompteType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefCompute::IsComputeTypeSupported ( enum AgEFmCompute ComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsComputeTypeSupported(ComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefCompute::GetComputeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ComputeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionDataPtr _IAgFmDefCompute::GetCompute ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_Compute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

IAgFmSatisfactionPtr _IAgFmDefCompute::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

//
// interface _IAgFmDefDataMinMax wrapper method implementations
//

double _IAgFmDefDataMinMax::GetMinValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefDataMinMax::PutMinValue ( double pVal ) {
    HRESULT _hr = put_MinValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgFmDefDataMinMax::GetMaxValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefDataMinMax::PutMaxValue ( double pVal ) {
    HRESULT _hr = put_MaxValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmDefDataMinMax wrapper method implementations
//

double IAgFmDefDataMinMax::GetMinValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MinValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefDataMinMax::PutMinValue ( double pVal ) {
    HRESULT _hr = put_MinValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgFmDefDataMinMax::GetMaxValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefDataMinMax::PutMaxValue ( double pVal ) {
    HRESULT _hr = put_MaxValue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmDefDataMinAssets wrapper method implementations
//

long _IAgFmDefDataMinAssets::GetMinAssets ( ) {
    long _result = 0;
    HRESULT _hr = get_MinAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefDataMinAssets::PutMinAssets ( long pVal ) {
    HRESULT _hr = put_MinAssets(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmDefDataMinAssets wrapper method implementations
//

long IAgFmDefDataMinAssets::GetMinAssets ( ) {
    long _result = 0;
    HRESULT _hr = get_MinAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefDataMinAssets::PutMinAssets ( long pVal ) {
    HRESULT _hr = put_MinAssets(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmDefDataPercentLevel wrapper method implementations
//

double _IAgFmDefDataPercentLevel::GetPercentLevel ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefDataPercentLevel::PutPercentLevel ( double pVal ) {
    HRESULT _hr = put_PercentLevel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmDefDataPercentLevel wrapper method implementations
//

double IAgFmDefDataPercentLevel::GetPercentLevel ( ) {
    double _result = 0;
    HRESULT _hr = get_PercentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefDataPercentLevel::PutPercentLevel ( double pVal ) {
    HRESULT _hr = put_PercentLevel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmDefDataBestN wrapper method implementations
//

long _IAgFmDefDataBestN::GetBestN ( ) {
    long _result = 0;
    HRESULT _hr = get_BestN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefDataBestN::PutBestN ( long pVal ) {
    HRESULT _hr = put_BestN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmDefDataBestN wrapper method implementations
//

long IAgFmDefDataBestN::GetBestN ( ) {
    long _result = 0;
    HRESULT _hr = get_BestN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefDataBestN::PutBestN ( long pVal ) {
    HRESULT _hr = put_BestN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmDefAccessConstraint wrapper method implementations
//

enum AgEFmCompute _IAgFmDefAccessConstraint::GetComputeType ( ) {
    enum AgEFmCompute _result;
    HRESULT _hr = get_ComputeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefAccessConstraint::SetComputeType ( enum AgEFmCompute ComputeType ) {
    HRESULT _hr = raw_SetComputeType(ComputeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefAccessConstraint::IsComputeTypeSupported ( enum AgEFmCompute ComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsComputeTypeSupported(ComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefAccessConstraint::GetComputeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ComputeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionDataPtr _IAgFmDefAccessConstraint::GetCompute ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_Compute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

IAgFmSatisfactionPtr _IAgFmDefAccessConstraint::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

enum AgEFmAcrossAssets _IAgFmDefAccessConstraint::GetAcrossAssets ( ) {
    enum AgEFmAcrossAssets _result;
    HRESULT _hr = get_AcrossAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefAccessConstraint::PutAcrossAssets ( enum AgEFmAcrossAssets pVal ) {
    HRESULT _hr = put_AcrossAssets(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgFmDefAccessConstraint::GetTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefAccessConstraint::PutTimeStep ( double pVal ) {
    HRESULT _hr = put_TimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmConstraintName _IAgFmDefAccessConstraint::GetConstraintName ( ) {
    enum AgEFmConstraintName _result;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefAccessConstraint::PutConstraintName ( enum AgEFmConstraintName pVal ) {
    HRESULT _hr = put_ConstraintName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgFmDefAccessConstraint::GetConstraint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Constraint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFmDefAccessConstraint::PutConstraint ( _bstr_t pConstraintName ) {
    HRESULT _hr = put_Constraint(pConstraintName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmSatisfaction wrapper method implementations
//

VARIANT_BOOL _IAgFmSatisfaction::GetEnableSatisfaction ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSatisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmSatisfaction::PutEnableSatisfaction ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableSatisfaction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmSatisfactionType _IAgFmSatisfaction::GetSatisfactionType ( ) {
    enum AgEFmSatisfactionType _result;
    HRESULT _hr = get_SatisfactionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmSatisfaction::PutSatisfactionType ( enum AgEFmSatisfactionType pVal ) {
    HRESULT _hr = put_SatisfactionType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgFmSatisfaction::GetSatisfactionThreshold ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SatisfactionThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgFmSatisfaction::PutSatisfactionThreshold ( const _variant_t & pVal ) {
    HRESULT _hr = put_SatisfactionThreshold(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgFmSatisfaction::GetInvalidDataIndicator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InvalidDataIndicator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgFmSatisfaction::PutInvalidDataIndicator ( const _variant_t & pVal ) {
    HRESULT _hr = put_InvalidDataIndicator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgFmSatisfaction::GetUseValueRangeCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseValueRangeCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmSatisfaction::PutUseValueRangeCheck ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseValueRangeCheck(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgFmSatisfaction::GetMinValueRange ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinValueRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgFmSatisfaction::PutMinValueRange ( const _variant_t & pInVal ) {
    HRESULT _hr = put_MinValueRange(pInVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgFmSatisfaction::GetMaxValueRange ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaxValueRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgFmSatisfaction::PutMaxValueRange ( const _variant_t & pInVal ) {
    HRESULT _hr = put_MaxValueRange(pInVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgFmSatisfaction::GetExcludeValueRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExcludeValueRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmSatisfaction::PutExcludeValueRange ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExcludeValueRange(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmVOAttributes wrapper method implementations
//

VARIANT_BOOL IAgFmVOAttributes::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmVOAttributes::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgFmVOAttributes::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmVOAttributes::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgFmVOAttributes::GetPointSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmVOAttributes::PutPointSize ( double pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmVO wrapper method implementations
//

IAgFmVOAttributesPtr IAgFmVO::GetStatic ( ) {
    struct IAgFmVOAttributes * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmVOAttributesPtr(_result, false);
}

IAgFmVOAttributesPtr IAgFmVO::GetAnimation ( ) {
    struct IAgFmVOAttributes * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmVOAttributesPtr(_result, false);
}

double IAgFmVO::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmVO::PutGranularity ( double pVal ) {
    HRESULT _hr = put_Granularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgFmVO::GetPixelsPerDeg ( ) {
    double _result = 0;
    HRESULT _hr = get_PixelsPerDeg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmVO::PutPixelsPerDeg ( double pVal ) {
    HRESULT _hr = put_PixelsPerDeg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgFmVO::GetTempInlayDir ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TempInlayDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgFmVO::PutTempInlayDir ( _bstr_t pVal ) {
    HRESULT _hr = put_TempInlayDir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGridInspector wrapper method implementations
//

HRESULT IAgFmGridInspector::SelectPoint ( const _variant_t & Lat, const _variant_t & Lon ) {
    HRESULT _hr = raw_SelectPoint(Lat, Lon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgFmGridInspector::ClearSelection ( ) {
    HRESULT _hr = raw_ClearSelection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgFmGridInspector::SelectRegion ( _bstr_t RegionName ) {
    HRESULT _hr = raw_SelectRegion(RegionName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgDataProviderInfoPtr IAgFmGridInspector::GetRegionFOM ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionFOM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr IAgFmGridInspector::GetRegionSatisfaction ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionSatisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr IAgFmGridInspector::GetPointFOM ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointFOM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr IAgFmGridInspector::GetPointSatisfaction ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointSatisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

_bstr_t IAgFmGridInspector::GetMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgFigureOfMerit wrapper method implementations
//

enum AgEFmDefinitionType IAgFigureOfMerit::GetDefinitionType ( ) {
    enum AgEFmDefinitionType _result;
    HRESULT _hr = get_DefinitionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgFigureOfMerit::SetDefinitionType ( enum AgEFmDefinitionType Def ) {
    HRESULT _hr = raw_SetDefinitionType(Def);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgFigureOfMerit::IsDefinitionTypeSupported ( enum AgEFmDefinitionType Def ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDefinitionTypeSupported(Def, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgFigureOfMerit::GetDefinitionSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DefinitionSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionPtr IAgFigureOfMerit::GetDefinition ( ) {
    struct IAgFmDefinition * _result = 0;
    HRESULT _hr = get_Definition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionPtr(_result, false);
}

IAgFmDefAccessConstraintPtr IAgFigureOfMerit::SetAccessConstraintDefinition ( enum AgEFmConstraintName ConstraintName ) {
    struct IAgFmDefAccessConstraint * _result = 0;
    HRESULT _hr = raw_SetAccessConstraintDefinition(ConstraintName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefAccessConstraintPtr(_result, false);
}

IAgFmGraphicsPtr IAgFigureOfMerit::GetGraphics ( ) {
    struct IAgFmGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGraphicsPtr(_result, false);
}

IAgFmVOPtr IAgFigureOfMerit::GetVO ( ) {
    struct IAgFmVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmVOPtr(_result, false);
}

IAgFmGridInspectorPtr IAgFigureOfMerit::GetGridInspector ( ) {
    struct IAgFmGridInspector * _result = 0;
    HRESULT _hr = get_GridInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGridInspectorPtr(_result, false);
}

IAgFmDefAccessConstraintPtr IAgFigureOfMerit::SetAccessConstraintDefinitionName ( _bstr_t ConstraintName ) {
    struct IAgFmDefAccessConstraint * _result = 0;
    HRESULT _hr = raw_SetAccessConstraintDefinitionName(ConstraintName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefAccessConstraintPtr(_result, false);
}

//
// interface _IAgFmDefAccessSeparation wrapper method implementations
//

IAgFmSatisfactionPtr _IAgFmDefAccessSeparation::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

IAgFmDefDataMinMaxPtr _IAgFmDefAccessSeparation::GetMinMaxData ( ) {
    struct IAgFmDefDataMinMax * _result = 0;
    HRESULT _hr = get_MinMaxData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefDataMinMaxPtr(_result, false);
}

//
// interface IAgFmDefAccessSeparation wrapper method implementations
//

IAgFmDefDataMinMaxPtr IAgFmDefAccessSeparation::GetMinMaxData ( ) {
    struct IAgFmDefDataMinMax * _result = 0;
    HRESULT _hr = get_MinMaxData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefDataMinMaxPtr(_result, false);
}

//
// interface _IAgFmDefDilutionOfPrecision wrapper method implementations
//

IAgFmSatisfactionPtr _IAgFmDefDilutionOfPrecision::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

enum AgEFmCompute _IAgFmDefDilutionOfPrecision::GetComputeType ( ) {
    enum AgEFmCompute _result;
    HRESULT _hr = get_ComputeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefDilutionOfPrecision::SetComputeType ( enum AgEFmCompute ComputeType ) {
    HRESULT _hr = raw_SetComputeType(ComputeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefDilutionOfPrecision::IsComputeTypeSupported ( enum AgEFmCompute ComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsComputeTypeSupported(ComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefDilutionOfPrecision::GetComputeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ComputeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionDataPtr _IAgFmDefDilutionOfPrecision::GetCompute ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_Compute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

enum AgEFmMethod _IAgFmDefDilutionOfPrecision::GetMethod ( ) {
    enum AgEFmMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefDilutionOfPrecision::SetMethod ( enum AgEFmMethod AgEFmMethod ) {
    HRESULT _hr = raw_SetMethod(AgEFmMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefDilutionOfPrecision::IsMethodSupported ( enum AgEFmMethod AgEFmMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMethodSupported(AgEFmMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefDilutionOfPrecision::GetSupportedMethods ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedMethods(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEFmComputeType _IAgFmDefDilutionOfPrecision::GetType ( ) {
    enum AgEFmComputeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefDilutionOfPrecision::SetType ( enum AgEFmComputeType AgEFmComputeType ) {
    HRESULT _hr = raw_SetType(AgEFmComputeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefDilutionOfPrecision::IsTypeSupported ( enum AgEFmComputeType AgEFmComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTypeSupported(AgEFmComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefDilutionOfPrecision::GetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgFmDefDilutionOfPrecision::GetTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefDilutionOfPrecision::PutTimeStep ( double pVal ) {
    HRESULT _hr = put_TimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmDefinitionDataPtr _IAgFmDefDilutionOfPrecision::GetTypeData ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_TypeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

//
// interface IAgFmDefDilutionOfPrecision wrapper method implementations
//

enum AgEFmMethod IAgFmDefDilutionOfPrecision::GetMethod ( ) {
    enum AgEFmMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgFmDefDilutionOfPrecision::SetMethod ( enum AgEFmMethod AgEFmMethod ) {
    HRESULT _hr = raw_SetMethod(AgEFmMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgFmDefDilutionOfPrecision::IsMethodSupported ( enum AgEFmMethod AgEFmMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMethodSupported(AgEFmMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgFmDefDilutionOfPrecision::GetSupportedMethods ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedMethods(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEFmComputeType IAgFmDefDilutionOfPrecision::GetType ( ) {
    enum AgEFmComputeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgFmDefDilutionOfPrecision::SetType ( enum AgEFmComputeType AgEFmComputeType ) {
    HRESULT _hr = raw_SetType(AgEFmComputeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgFmDefDilutionOfPrecision::IsTypeSupported ( enum AgEFmComputeType AgEFmComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTypeSupported(AgEFmComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgFmDefDilutionOfPrecision::GetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgFmDefDilutionOfPrecision::GetTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefDilutionOfPrecision::PutTimeStep ( double pVal ) {
    HRESULT _hr = put_TimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmDefinitionDataPtr IAgFmDefDilutionOfPrecision::GetTypeData ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_TypeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

//
// interface IAgFmAssetListElement wrapper method implementations
//

enum AgEFmNAMethodType IAgFmAssetListElement::GetMethodType ( ) {
    enum AgEFmNAMethodType _result;
    HRESULT _hr = get_MethodType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmAssetListElement::PutMethodType ( enum AgEFmNAMethodType pVal ) {
    HRESULT _hr = put_MethodType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmNAMethodPtr IAgFmAssetListElement::GetMethod ( ) {
    struct IAgFmNAMethod * _result = 0;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmNAMethodPtr(_result, false);
}

_bstr_t IAgFmAssetListElement::GetAsset ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Asset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgFmAssetListCollection wrapper method implementations
//

long IAgFmAssetListCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmAssetListElementPtr IAgFmAssetListCollection::GetItem ( long Index ) {
    struct IAgFmAssetListElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmAssetListElementPtr(_result, false);
}

IUnknownPtr IAgFmAssetListCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgFmUncertainties wrapper method implementations
//

double IAgFmUncertainties::GetReceiverRange ( ) {
    double _result = 0;
    HRESULT _hr = get_ReceiverRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmUncertainties::PutReceiverRange ( double pVal ) {
    HRESULT _hr = put_ReceiverRange(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmAssetListCollectionPtr IAgFmUncertainties::GetAssetList ( ) {
    struct IAgFmAssetListCollection * _result = 0;
    HRESULT _hr = get_AssetList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmAssetListCollectionPtr(_result, false);
}

//
// interface _IAgFmDefNavigationAccuracy wrapper method implementations
//

IAgFmSatisfactionPtr _IAgFmDefNavigationAccuracy::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

enum AgEFmCompute _IAgFmDefNavigationAccuracy::GetComputeType ( ) {
    enum AgEFmCompute _result;
    HRESULT _hr = get_ComputeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefNavigationAccuracy::SetComputeType ( enum AgEFmCompute ComputeType ) {
    HRESULT _hr = raw_SetComputeType(ComputeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefNavigationAccuracy::IsComputeTypeSupported ( enum AgEFmCompute ComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsComputeTypeSupported(ComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefNavigationAccuracy::GetComputeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ComputeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionDataPtr _IAgFmDefNavigationAccuracy::GetCompute ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_Compute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

enum AgEFmMethod _IAgFmDefNavigationAccuracy::GetMethod ( ) {
    enum AgEFmMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefNavigationAccuracy::SetMethod ( enum AgEFmMethod AgEFmMethod ) {
    HRESULT _hr = raw_SetMethod(AgEFmMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefNavigationAccuracy::IsMethodSupported ( enum AgEFmMethod AgEFmMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMethodSupported(AgEFmMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefNavigationAccuracy::GetSupportedMethods ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedMethods(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEFmComputeType _IAgFmDefNavigationAccuracy::GetType ( ) {
    enum AgEFmComputeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefNavigationAccuracy::SetType ( enum AgEFmComputeType AgEFmComputeType ) {
    HRESULT _hr = raw_SetType(AgEFmComputeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefNavigationAccuracy::IsTypeSupported ( enum AgEFmComputeType AgEFmComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTypeSupported(AgEFmComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefNavigationAccuracy::GetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgFmDefNavigationAccuracy::GetTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefNavigationAccuracy::PutTimeStep ( double pRetVal ) {
    HRESULT _hr = put_TimeStep(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmUncertaintiesPtr _IAgFmDefNavigationAccuracy::GetUncertainties ( ) {
    struct IAgFmUncertainties * _result = 0;
    HRESULT _hr = get_Uncertainties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmUncertaintiesPtr(_result, false);
}

IAgFmDefinitionDataPtr _IAgFmDefNavigationAccuracy::GetTypeData ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_TypeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

//
// interface IAgFmDefNavigationAccuracy wrapper method implementations
//

IAgFmUncertaintiesPtr IAgFmDefNavigationAccuracy::GetUncertainties ( ) {
    struct IAgFmUncertainties * _result = 0;
    HRESULT _hr = get_Uncertainties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmUncertaintiesPtr(_result, false);
}

//
// interface _IAgFmAssetListElement wrapper method implementations
//

enum AgEFmNAMethodType _IAgFmAssetListElement::GetMethodType ( ) {
    enum AgEFmNAMethodType _result;
    HRESULT _hr = get_MethodType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmAssetListElement::PutMethodType ( enum AgEFmNAMethodType pVal ) {
    HRESULT _hr = put_MethodType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmNAMethodPtr _IAgFmAssetListElement::GetMethod ( ) {
    struct IAgFmNAMethod * _result = 0;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmNAMethodPtr(_result, false);
}

_bstr_t _IAgFmAssetListElement::GetAsset ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Asset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgFmUncertainties wrapper method implementations
//

double _IAgFmUncertainties::GetReceiverRange ( ) {
    double _result = 0;
    HRESULT _hr = get_ReceiverRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmUncertainties::PutReceiverRange ( double pVal ) {
    HRESULT _hr = put_ReceiverRange(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmAssetListCollectionPtr _IAgFmUncertainties::GetAssetList ( ) {
    struct IAgFmAssetListCollection * _result = 0;
    HRESULT _hr = get_AssetList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmAssetListCollectionPtr(_result, false);
}

//
// interface _IAgFmDefResponseTime wrapper method implementations
//

enum AgEFmCompute _IAgFmDefResponseTime::GetComputeType ( ) {
    enum AgEFmCompute _result;
    HRESULT _hr = get_ComputeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefResponseTime::SetComputeType ( enum AgEFmCompute ComputeType ) {
    HRESULT _hr = raw_SetComputeType(ComputeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefResponseTime::IsComputeTypeSupported ( enum AgEFmCompute ComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsComputeTypeSupported(ComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefResponseTime::GetComputeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ComputeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionDataPtr _IAgFmDefResponseTime::GetCompute ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_Compute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

IAgFmSatisfactionPtr _IAgFmDefResponseTime::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

long _IAgFmDefResponseTime::GetMinAssets ( ) {
    long _result = 0;
    HRESULT _hr = get_MinAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefResponseTime::PutMinAssets ( long pVal ) {
    HRESULT _hr = put_MinAssets(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmDefResponseTime wrapper method implementations
//

long IAgFmDefResponseTime::GetMinAssets ( ) {
    long _result = 0;
    HRESULT _hr = get_MinAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefResponseTime::PutMinAssets ( long pVal ) {
    HRESULT _hr = put_MinAssets(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmDefRevisitTime wrapper method implementations
//

IAgFmSatisfactionPtr _IAgFmDefRevisitTime::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

enum AgEFmCompute _IAgFmDefRevisitTime::GetComputeType ( ) {
    enum AgEFmCompute _result;
    HRESULT _hr = get_ComputeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFmDefRevisitTime::SetComputeType ( enum AgEFmCompute ComputeType ) {
    HRESULT _hr = raw_SetComputeType(ComputeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFmDefRevisitTime::IsComputeTypeSupported ( enum AgEFmCompute ComputeType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsComputeTypeSupported(ComputeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFmDefRevisitTime::GetComputeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ComputeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionDataPtr _IAgFmDefRevisitTime::GetCompute ( ) {
    struct IAgFmDefinitionData * _result = 0;
    HRESULT _hr = get_Compute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionDataPtr(_result, false);
}

long _IAgFmDefRevisitTime::GetMinAssets ( ) {
    long _result = 0;
    HRESULT _hr = get_MinAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefRevisitTime::PutMinAssets ( long pVal ) {
    HRESULT _hr = put_MinAssets(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmEndGapOption _IAgFmDefRevisitTime::GetEndGapOption ( ) {
    enum AgEFmEndGapOption _result;
    HRESULT _hr = get_EndGapOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmDefRevisitTime::PutEndGapOption ( enum AgEFmEndGapOption pVal ) {
    HRESULT _hr = put_EndGapOption(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmDefRevisitTime wrapper method implementations
//

enum AgEFmEndGapOption IAgFmDefRevisitTime::GetEndGapOption ( ) {
    enum AgEFmEndGapOption _result;
    HRESULT _hr = get_EndGapOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmDefRevisitTime::PutEndGapOption ( enum AgEFmEndGapOption pVal ) {
    HRESULT _hr = put_EndGapOption(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmDefSimpleCoverage wrapper method implementations
//

IAgFmSatisfactionPtr _IAgFmDefSimpleCoverage::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

//
// interface _IAgFmDefTimeAverageGap wrapper method implementations
//

IAgFmSatisfactionPtr _IAgFmDefTimeAverageGap::GetSatisfaction ( ) {
    struct IAgFmSatisfaction * _result = 0;
    HRESULT _hr = get_Satisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmSatisfactionPtr(_result, false);
}

//
// interface _IAgFmGfxContours wrapper method implementations
//

VARIANT_BOOL _IAgFmGfxContours::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxContours::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmGfxContourType _IAgFmGfxContours::GetContourType ( ) {
    enum AgEFmGfxContourType _result;
    HRESULT _hr = get_ContourType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxContours::PutContourType ( enum AgEFmGfxContourType pVal ) {
    HRESULT _hr = put_ContourType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmGfxColorMethod _IAgFmGfxContours::GetColorMethod ( ) {
    enum AgEFmGfxColorMethod _result;
    HRESULT _hr = get_ColorMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxContours::PutColorMethod ( enum AgEFmGfxColorMethod pVal ) {
    HRESULT _hr = put_ColorMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxRampColorPtr _IAgFmGfxContours::GetRampColor ( ) {
    struct IAgFmGfxRampColor * _result = 0;
    HRESULT _hr = get_RampColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxRampColorPtr(_result, false);
}

IAgFmGfxLevelAttributesCollectionPtr _IAgFmGfxContours::GetLevelAttributes ( ) {
    struct IAgFmGfxLevelAttributesCollection * _result = 0;
    HRESULT _hr = get_LevelAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLevelAttributesCollectionPtr(_result, false);
}

IAgFmGfxLegendPtr _IAgFmGfxContours::GetLegend ( ) {
    struct IAgFmGfxLegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLegendPtr(_result, false);
}

//
// interface _IAgFmGfxAttributes wrapper method implementations
//

VARIANT_BOOL _IAgFmGfxAttributes::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxAttributes::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgFmGfxAttributes::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxAttributes::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgFmGfxAttributes::GetFillPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxAttributes::PutFillPoints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillPoints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgFmGfxAttributes::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFmGfxAttributes::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxContoursPtr _IAgFmGfxAttributes::GetContours ( ) {
    struct IAgFmGfxContours * _result = 0;
    HRESULT _hr = get_Contours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxContoursPtr(_result, false);
}

//
// interface _IAgFmGfxContoursAnimation wrapper method implementations
//

VARIANT_BOOL _IAgFmGfxContoursAnimation::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxContoursAnimation::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmGfxContourType _IAgFmGfxContoursAnimation::GetContourType ( ) {
    enum AgEFmGfxContourType _result;
    HRESULT _hr = get_ContourType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxContoursAnimation::PutContourType ( enum AgEFmGfxContourType pVal ) {
    HRESULT _hr = put_ContourType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmGfxColorMethod _IAgFmGfxContoursAnimation::GetColorMethod ( ) {
    enum AgEFmGfxColorMethod _result;
    HRESULT _hr = get_ColorMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxContoursAnimation::PutColorMethod ( enum AgEFmGfxColorMethod pVal ) {
    HRESULT _hr = put_ColorMethod(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxRampColorPtr _IAgFmGfxContoursAnimation::GetRampColor ( ) {
    struct IAgFmGfxRampColor * _result = 0;
    HRESULT _hr = get_RampColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxRampColorPtr(_result, false);
}

IAgFmGfxLevelAttributesCollectionPtr _IAgFmGfxContoursAnimation::GetLevelAttributes ( ) {
    struct IAgFmGfxLevelAttributesCollection * _result = 0;
    HRESULT _hr = get_LevelAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLevelAttributesCollectionPtr(_result, false);
}

IAgFmGfxLegendPtr _IAgFmGfxContoursAnimation::GetLegend ( ) {
    struct IAgFmGfxLegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLegendPtr(_result, false);
}

VARIANT_BOOL _IAgFmGfxContoursAnimation::GetUseStaticContours ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseStaticContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxContoursAnimation::PutUseStaticContours ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseStaticContours(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmGfxContoursAnimation wrapper method implementations
//

VARIANT_BOOL IAgFmGfxContoursAnimation::GetUseStaticContours ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseStaticContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmGfxContoursAnimation::PutUseStaticContours ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseStaticContours(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmGfxAttributesAnimation wrapper method implementations
//

VARIANT_BOOL _IAgFmGfxAttributesAnimation::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxAttributesAnimation::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgFmGfxAttributesAnimation::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxAttributesAnimation::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgFmGfxAttributesAnimation::GetFillPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxAttributesAnimation::PutFillPoints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_FillPoints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgFmGfxAttributesAnimation::GetMarkerStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFmGfxAttributesAnimation::PutMarkerStyle ( _bstr_t pVal ) {
    HRESULT _hr = put_MarkerStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxContoursPtr _IAgFmGfxAttributesAnimation::GetContours ( ) {
    struct IAgFmGfxContours * _result = 0;
    HRESULT _hr = get_Contours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxContoursPtr(_result, false);
}

enum AgEFmGfxAccumulation _IAgFmGfxAttributesAnimation::GetAccumulation ( ) {
    enum AgEFmGfxAccumulation _result;
    HRESULT _hr = get_Accumulation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxAttributesAnimation::PutAccumulation ( enum AgEFmGfxAccumulation ppVal ) {
    HRESULT _hr = put_Accumulation(ppVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmGraphics wrapper method implementations
//

IAgFmGfxAttributesPtr _IAgFmGraphics::GetStatic ( ) {
    struct IAgFmGfxAttributes * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxAttributesPtr(_result, false);
}

IAgFmGfxAttributesAnimationPtr _IAgFmGraphics::GetAnimation ( ) {
    struct IAgFmGfxAttributesAnimation * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxAttributesAnimationPtr(_result, false);
}

//
// interface _IAgFmGfxRampColor wrapper method implementations
//

OLE_COLOR _IAgFmGfxRampColor::GetStartColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxRampColor::PutStartColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_StartColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgFmGfxRampColor::GetEndColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_EndColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxRampColor::PutEndColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_EndColor(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmGfxLevelAttributesElement wrapper method implementations
//

_variant_t _IAgFmGfxLevelAttributesElement::GetLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Level(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgFmGfxLevelAttributesElement::PutLevel ( const _variant_t & pVal ) {
    HRESULT _hr = put_Level(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgFmGfxLevelAttributesElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxLevelAttributesElement::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmGfxPositionOnMap wrapper method implementations
//

long _IAgFmGfxPositionOnMap::GetX ( ) {
    long _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxPositionOnMap::PutX ( long pRetVal ) {
    HRESULT _hr = put_X(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgFmGfxPositionOnMap::GetY ( ) {
    long _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxPositionOnMap::PutY ( long pRetVal ) {
    HRESULT _hr = put_Y(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmGfxColorOptions wrapper method implementations
//

OLE_COLOR _IAgFmGfxColorOptions::GetBackground ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxColorOptions::PutBackground ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Background(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgFmGfxColorOptions::GetText ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxColorOptions::PutText ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmGfxLegendWindow wrapper method implementations
//

VARIANT_BOOL _IAgFmGfxLegendWindow::GetIsVisibleOnMap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisibleOnMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxLegendWindow::PutIsVisibleOnMap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisibleOnMap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxPositionOnMapPtr _IAgFmGfxLegendWindow::GetPositionOnMap ( ) {
    struct IAgFmGfxPositionOnMap * _result = 0;
    HRESULT _hr = get_PositionOnMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxPositionOnMapPtr(_result, false);
}

//
// interface _IAgFmVOLegendWindow wrapper method implementations
//

VARIANT_BOOL _IAgFmVOLegendWindow::GetIsVisibleOnMap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisibleOnMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmVOLegendWindow::PutIsVisibleOnMap ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisibleOnMap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgFmGfxPositionOnMapPtr _IAgFmVOLegendWindow::GetPositionOnMap ( ) {
    struct IAgFmGfxPositionOnMap * _result = 0;
    HRESULT _hr = get_PositionOnMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxPositionOnMapPtr(_result, false);
}

double _IAgFmVOLegendWindow::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmVOLegendWindow::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmGfxTextOptions wrapper method implementations
//

_bstr_t _IAgFmGfxTextOptions::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFmGfxTextOptions::PutTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgFmGfxTextOptions::GetNumDecimalDigits ( ) {
    long _result = 0;
    HRESULT _hr = get_NumDecimalDigits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxTextOptions::PutNumDecimalDigits ( long pVal ) {
    HRESULT _hr = put_NumDecimalDigits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEFmGfxFloatingPointFormat _IAgFmGfxTextOptions::GetFloatingPointFormat ( ) {
    enum AgEFmGfxFloatingPointFormat _result;
    HRESULT _hr = get_FloatingPointFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxTextOptions::PutFloatingPointFormat ( enum AgEFmGfxFloatingPointFormat pVal ) {
    HRESULT _hr = put_FloatingPointFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmGfxRangeColorOptions wrapper method implementations
//

enum AgEFmGfxDirection _IAgFmGfxRangeColorOptions::GetDirection ( ) {
    enum AgEFmGfxDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxRangeColorOptions::PutDirection ( enum AgEFmGfxDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgFmGfxRangeColorOptions::GetMaxSquaresPerRow ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSquaresPerRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxRangeColorOptions::PutMaxSquaresPerRow ( long pVal ) {
    HRESULT _hr = put_MaxSquaresPerRow(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgFmGfxRangeColorOptions::GetMaxSquaresPerColumn ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSquaresPerColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxRangeColorOptions::PutMaxSquaresPerColumn ( long pVal ) {
    HRESULT _hr = put_MaxSquaresPerColumn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgFmGfxRangeColorOptions::GetColorSquareWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_ColorSquareWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxRangeColorOptions::PutColorSquareWidth ( long pVal ) {
    HRESULT _hr = put_ColorSquareWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgFmGfxRangeColorOptions::GetColorSquareHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_ColorSquareHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmGfxRangeColorOptions::PutColorSquareHeight ( long pVal ) {
    HRESULT _hr = put_ColorSquareHeight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmGfxLegend wrapper method implementations
//

IAgFmGfxColorOptionsPtr _IAgFmGfxLegend::GetColorOptions ( ) {
    struct IAgFmGfxColorOptions * _result = 0;
    HRESULT _hr = get_ColorOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxColorOptionsPtr(_result, false);
}

IAgFmGfxTextOptionsPtr _IAgFmGfxLegend::GetTextOptions ( ) {
    struct IAgFmGfxTextOptions * _result = 0;
    HRESULT _hr = get_TextOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxTextOptionsPtr(_result, false);
}

IAgFmGfxRangeColorOptionsPtr _IAgFmGfxLegend::GetRangeColorOptions ( ) {
    struct IAgFmGfxRangeColorOptions * _result = 0;
    HRESULT _hr = get_RangeColorOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxRangeColorOptionsPtr(_result, false);
}

IAgFmGfxLegendWindowPtr _IAgFmGfxLegend::GetGfxWindow ( ) {
    struct IAgFmGfxLegendWindow * _result = 0;
    HRESULT _hr = get_GfxWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGfxLegendWindowPtr(_result, false);
}

IAgFmVOLegendWindowPtr _IAgFmGfxLegend::GetVOWindow ( ) {
    struct IAgFmVOLegendWindow * _result = 0;
    HRESULT _hr = get_VOWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmVOLegendWindowPtr(_result, false);
}

//
// interface _IAgFmNAMethodElevationAngle wrapper method implementations
//

_bstr_t _IAgFmNAMethodElevationAngle::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFmNAMethodElevationAngle::PutFilename ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Filename(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmNAMethodElevationAngle wrapper method implementations
//

_bstr_t IAgFmNAMethodElevationAngle::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgFmNAMethodElevationAngle::PutFilename ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Filename(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmNAMethodConstant wrapper method implementations
//

double _IAgFmNAMethodConstant::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmNAMethodConstant::PutValue ( double pRetVal ) {
    HRESULT _hr = put_Value(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFmNAMethodConstant wrapper method implementations
//

double IAgFmNAMethodConstant::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFmNAMethodConstant::PutValue ( double pRetVal ) {
    HRESULT _hr = put_Value(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmVOAttributes wrapper method implementations
//

VARIANT_BOOL _IAgFmVOAttributes::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmVOAttributes::PutIsVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgFmVOAttributes::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmVOAttributes::PutTranslucency ( double pVal ) {
    HRESULT _hr = put_Translucency(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgFmVOAttributes::GetPointSize ( ) {
    double _result = 0;
    HRESULT _hr = get_PointSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmVOAttributes::PutPointSize ( double pVal ) {
    HRESULT _hr = put_PointSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgFmVO wrapper method implementations
//

IAgFmVOAttributesPtr _IAgFmVO::GetStatic ( ) {
    struct IAgFmVOAttributes * _result = 0;
    HRESULT _hr = get_Static(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmVOAttributesPtr(_result, false);
}

IAgFmVOAttributesPtr _IAgFmVO::GetAnimation ( ) {
    struct IAgFmVOAttributes * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmVOAttributesPtr(_result, false);
}

double _IAgFmVO::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmVO::PutGranularity ( double pVal ) {
    HRESULT _hr = put_Granularity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgFmVO::GetPixelsPerDeg ( ) {
    double _result = 0;
    HRESULT _hr = get_PixelsPerDeg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFmVO::PutPixelsPerDeg ( double pVal ) {
    HRESULT _hr = put_PixelsPerDeg(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgFmVO::GetTempInlayDir ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TempInlayDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFmVO::PutTempInlayDir ( _bstr_t pVal ) {
    HRESULT _hr = put_TempInlayDir(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeProfileGPS wrapper method implementations
//

_bstr_t _IAgVeProfileGPS::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEGPSAttModelType _IAgVeProfileGPS::GetModelType ( ) {
    enum AgEGPSAttModelType _result;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeProfileGPS::PutModelType ( enum AgEGPSAttModelType pVal ) {
    HRESULT _hr = put_ModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeProfileGPS wrapper method implementations
//

enum AgEGPSAttModelType IAgVeProfileGPS::GetModelType ( ) {
    enum AgEGPSAttModelType _result;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeProfileGPS::PutModelType ( enum AgEGPSAttModelType pVal ) {
    HRESULT _hr = put_ModelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStdMil2525bSymbols wrapper method implementations
//

VARIANT_BOOL _IAgStdMil2525bSymbols::GetFillEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FillEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStdMil2525bSymbols::PutFillEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FillEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

unsigned int _IAgStdMil2525bSymbols::GetSymbolImageSize ( ) {
    unsigned int _result = 0;
    HRESULT _hr = get_SymbolImageSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStdMil2525bSymbols::PutSymbolImageSize ( unsigned int pRetVal ) {
    HRESULT _hr = put_SymbolImageSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStdMil2525bSymbols::CreateSymbol ( _bstr_t SymbolID, _bstr_t SaveImageFilePath ) {
    HRESULT _hr = raw_CreateSymbol(SymbolID, SaveImageFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgCvGridInspector wrapper method implementations
//

HRESULT _IAgCvGridInspector::SelectPoint ( const _variant_t & Lat, const _variant_t & Lon ) {
    HRESULT _hr = raw_SelectPoint(Lat, Lon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgCvGridInspector::SelectRegion ( _bstr_t RegionName ) {
    HRESULT _hr = raw_SelectRegion(RegionName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgDataProviderInfoPtr _IAgCvGridInspector::GetPointCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr _IAgCvGridInspector::GetPointDailyCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointDailyCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr _IAgCvGridInspector::GetPointProbOfCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointProbOfCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr _IAgCvGridInspector::GetRegionCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr _IAgCvGridInspector::GetRegionFullCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionFullCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr _IAgCvGridInspector::GetRegionPassCoverage ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionPassCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

HRESULT _IAgCvGridInspector::ClearSelection ( ) {
    HRESULT _hr = raw_ClearSelection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t _IAgCvGridInspector::GetMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgCvGridPointSelectionPtr _IAgCvGridInspector::GetGridPointSelection ( ) {
    struct IAgCvGridPointSelection * _result = 0;
    HRESULT _hr = raw_GetGridPointSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGridPointSelectionPtr(_result, false);
}

//
// interface _IAgFmGridInspector wrapper method implementations
//

HRESULT _IAgFmGridInspector::SelectPoint ( const _variant_t & Lat, const _variant_t & Lon ) {
    HRESULT _hr = raw_SelectPoint(Lat, Lon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgFmGridInspector::ClearSelection ( ) {
    HRESULT _hr = raw_ClearSelection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgFmGridInspector::SelectRegion ( _bstr_t RegionName ) {
    HRESULT _hr = raw_SelectRegion(RegionName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgDataProviderInfoPtr _IAgFmGridInspector::GetRegionFOM ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionFOM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr _IAgFmGridInspector::GetRegionSatisfaction ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_RegionSatisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr _IAgFmGridInspector::GetPointFOM ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointFOM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

IAgDataProviderInfoPtr _IAgFmGridInspector::GetPointSatisfaction ( ) {
    struct IAgDataProviderInfo * _result = 0;
    HRESULT _hr = get_PointSatisfaction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderInfoPtr(_result, false);
}

_bstr_t _IAgFmGridInspector::GetMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgVOVaporTrail wrapper method implementations
//

VARIANT_BOOL _IAgVOVaporTrail::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVaporTrail::PutVisible ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_Visible(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVOVaporTrail::GetMaxNumOfPuffs ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxNumOfPuffs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVaporTrail::PutMaxNumOfPuffs ( long pMaxNum ) {
    HRESULT _hr = put_MaxNumOfPuffs(pMaxNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOVaporTrail::GetDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_Density(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVaporTrail::PutDensity ( double pDensity ) {
    HRESULT _hr = put_Density(pDensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVOVaporTrail::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVaporTrail::PutRadius ( double pRadius ) {
    HRESULT _hr = put_Radius(pRadius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVOVaporTrail::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVOVaporTrail::PutStartTime ( const _variant_t & pStartTime ) {
    HRESULT _hr = put_StartTime(pStartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVOVaporTrail::GetEndTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVOVaporTrail::PutEndTime ( const _variant_t & pEndTime ) {
    HRESULT _hr = put_EndTime(pEndTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVOVaporTrail::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVaporTrail::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVOVaporTrail::GetUseAttachPoint ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAttachPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVOVaporTrail::PutUseAttachPoint ( VARIANT_BOOL pUseAttach ) {
    HRESULT _hr = put_UseAttachPoint(pUseAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVOVaporTrail::GetAttachPointName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AttachPointName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVOVaporTrail::PutAttachPointName ( _bstr_t pAttachName ) {
    HRESULT _hr = put_AttachPointName(pAttachName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVOVaporTrail::GetImageFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ImageFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVOVaporTrail::PutImageFile ( _bstr_t pImageFile ) {
    HRESULT _hr = put_ImageFile(pImageFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVOVaporTrail::GetAvailableAttachPoints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAttachPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgAccessCnstrPluginMinMax wrapper method implementations
//

VARIANT_BOOL _IAgAccessCnstrPluginMinMax::GetEnableMin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrPluginMinMax::PutEnableMin ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrPluginMinMax::GetEnableMax ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrPluginMinMax::PutEnableMax ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableMax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAccessCnstrPluginMinMax::GetMin ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrPluginMinMax::PutMin ( const _variant_t & pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgAccessCnstrPluginMinMax::GetMax ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgAccessCnstrPluginMinMax::PutMax ( const _variant_t & pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAccessCnstrPluginMinMax::GetConstraintName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstraintName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgAccessCnstrPluginMinMax::GetIsPlugin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlugin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrPluginMinMax::PutIsPlugin ( VARIANT_BOOL pPlugin ) {
    HRESULT _hr = put_IsPlugin(pPlugin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAccessCnstrPluginMinMax::GetExclIntvl ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExclIntvl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrPluginMinMax::PutExclIntvl ( VARIANT_BOOL pExcl ) {
    HRESULT _hr = put_ExclIntvl(pExcl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAccessConstraints _IAgAccessCnstrPluginMinMax::GetConstraintType ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr _IAgAccessCnstrPluginMinMax::GetRawPluginObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetRawPluginObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

_variant_t _IAgAccessCnstrPluginMinMax::GetProperty ( _bstr_t Path ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT _IAgAccessCnstrPluginMinMax::SetProperty ( _bstr_t Path, const _variant_t & Val ) {
    HRESULT _hr = raw_SetProperty(Path, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgAccessCnstrPluginMinMax::GetAvailableProperties ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgAccessCnstrPluginMinMax::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrPluginMinMax::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAccessCnstrPluginMinMax::GetMaxRelMotion ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxRelMotion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAccessCnstrPluginMinMax::PutMaxRelMotion ( double pVal ) {
    HRESULT _hr = put_MaxRelMotion(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgAccessCnstrPluginMinMax wrapper method implementations
//

IUnknownPtr IAgAccessCnstrPluginMinMax::GetRawPluginObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetRawPluginObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

_variant_t IAgAccessCnstrPluginMinMax::GetProperty ( _bstr_t Path ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT IAgAccessCnstrPluginMinMax::SetProperty ( _bstr_t Path, const _variant_t & Val ) {
    HRESULT _hr = raw_SetProperty(Path, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgAccessCnstrPluginMinMax::GetAvailableProperties ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgCnConstraints wrapper method implementations
//

enum AgECnCnstrRestriction _IAgCnConstraints::GetRestrictionType ( ) {
    enum AgECnCnstrRestriction _result;
    HRESULT _hr = get_RestrictionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgCnConstraints::SetRestrictionType ( enum AgECnCnstrRestriction Restriction ) {
    HRESULT _hr = raw_SetRestrictionType(Restriction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgCnCnstrRestrictionPtr _IAgCnConstraints::GetRestriction ( ) {
    struct IAgCnCnstrRestriction * _result = 0;
    HRESULT _hr = get_Restriction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCnCnstrRestrictionPtr(_result, false);
}

VARIANT_BOOL _IAgCnConstraints::GetIsRelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCnConstraints::PutIsRelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsRelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCnConstraints wrapper method implementations
//

enum AgECnCnstrRestriction IAgCnConstraints::GetRestrictionType ( ) {
    enum AgECnCnstrRestriction _result;
    HRESULT _hr = get_RestrictionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgCnConstraints::SetRestrictionType ( enum AgECnCnstrRestriction Restriction ) {
    HRESULT _hr = raw_SetRestrictionType(Restriction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgCnCnstrRestrictionPtr IAgCnConstraints::GetRestriction ( ) {
    struct IAgCnCnstrRestriction * _result = 0;
    HRESULT _hr = get_Restriction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCnCnstrRestrictionPtr(_result, false);
}

VARIANT_BOOL IAgCnConstraints::GetIsRelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCnConstraints::PutIsRelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsRelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCnCnstrObjectRestriction wrapper method implementations
//

long _IAgCnCnstrObjectRestriction::GetNumberOfObjects ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCnCnstrObjectRestriction::PutNumberOfObjects ( long pVal ) {
    HRESULT _hr = put_NumberOfObjects(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCnCnstrObjectRestriction wrapper method implementations
//

long IAgCnCnstrObjectRestriction::GetNumberOfObjects ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCnCnstrObjectRestriction::PutNumberOfObjects ( long pVal ) {
    HRESULT _hr = put_NumberOfObjects(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgCnGraphics wrapper method implementations
//

HRESULT IAgCnGraphics::HideGraphics ( ) {
    HRESULT _hr = raw_HideGraphics();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCnGraphics::RestoreGraphics ( ) {
    HRESULT _hr = raw_RestoreGraphics();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgCnGraphics wrapper method implementations
//

HRESULT _IAgCnGraphics::HideGraphics ( ) {
    HRESULT _hr = raw_HideGraphics();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgCnGraphics::RestoreGraphics ( ) {
    HRESULT _hr = raw_RestoreGraphics();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgEventDetectionSubSampling wrapper method implementations
//

double _IAgEventDetectionSubSampling::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgEventDetectionSubSampling::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgEventDetectionSubSampling::GetAbsValueConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_AbsValueConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgEventDetectionSubSampling::PutAbsValueConvergence ( double pVal ) {
    HRESULT _hr = put_AbsValueConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgEventDetectionSubSampling::GetRelValueConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_RelValueConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgEventDetectionSubSampling::PutRelValueConvergence ( double pVal ) {
    HRESULT _hr = put_RelValueConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgEventDetectionSubSampling wrapper method implementations
//

double IAgEventDetectionSubSampling::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgEventDetectionSubSampling::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgEventDetectionSubSampling::GetAbsValueConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_AbsValueConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgEventDetectionSubSampling::PutAbsValueConvergence ( double pVal ) {
    HRESULT _hr = put_AbsValueConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgEventDetectionSubSampling::GetRelValueConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_RelValueConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgEventDetectionSubSampling::PutRelValueConvergence ( double pVal ) {
    HRESULT _hr = put_RelValueConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSamplingMethodAdaptive wrapper method implementations
//

double _IAgSamplingMethodAdaptive::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSamplingMethodAdaptive::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSamplingMethodAdaptive::GetMinTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSamplingMethodAdaptive::PutMinTimeStep ( double pVal ) {
    HRESULT _hr = put_MinTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSamplingMethodAdaptive wrapper method implementations
//

double IAgSamplingMethodAdaptive::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSamplingMethodAdaptive::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSamplingMethodAdaptive::GetMinTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MinTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSamplingMethodAdaptive::PutMinTimeStep ( double pVal ) {
    HRESULT _hr = put_MinTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSamplingMethodFixedStep wrapper method implementations
//

double _IAgSamplingMethodFixedStep::GetFixedTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_FixedTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSamplingMethodFixedStep::PutFixedTimeStep ( double pVal ) {
    HRESULT _hr = put_FixedTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSamplingMethodFixedStep::GetTimeBound ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSamplingMethodFixedStep::PutTimeBound ( double pVal ) {
    HRESULT _hr = put_TimeBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSamplingMethodFixedStep wrapper method implementations
//

double IAgSamplingMethodFixedStep::GetFixedTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_FixedTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSamplingMethodFixedStep::PutFixedTimeStep ( double pVal ) {
    HRESULT _hr = put_FixedTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSamplingMethodFixedStep::GetTimeBound ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSamplingMethodFixedStep::PutTimeBound ( double pVal ) {
    HRESULT _hr = put_TimeBound(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnAccessAdvanced wrapper method implementations
//

enum AgEAberrationType _IAgSnAccessAdvanced::GetAberrationType ( ) {
    enum AgEAberrationType _result;
    HRESULT _hr = get_AberrationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnAccessAdvanced::PutAberrationType ( enum AgEAberrationType pVal ) {
    HRESULT _hr = put_AberrationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnAccessAdvanced::GetTimeDelayConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeDelayConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnAccessAdvanced::PutTimeDelayConvergence ( double pVal ) {
    HRESULT _hr = put_TimeDelayConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessEventDetectionPtr _IAgSnAccessAdvanced::GetEventDetection ( ) {
    struct IAgAccessEventDetection * _result = 0;
    HRESULT _hr = get_EventDetection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessEventDetectionPtr(_result, false);
}

IAgAccessSamplingPtr _IAgSnAccessAdvanced::GetSampling ( ) {
    struct IAgAccessSampling * _result = 0;
    HRESULT _hr = get_Sampling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessSamplingPtr(_result, false);
}

//
// interface _IAgVeAccessAdvanced wrapper method implementations
//

enum AgEAberrationType _IAgVeAccessAdvanced::GetAberrationType ( ) {
    enum AgEAberrationType _result;
    HRESULT _hr = get_AberrationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAccessAdvanced::PutAberrationType ( enum AgEAberrationType pVal ) {
    HRESULT _hr = put_AberrationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeAccessAdvanced::GetTimeDelayConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeDelayConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAccessAdvanced::PutTimeDelayConvergence ( double pVal ) {
    HRESULT _hr = put_TimeDelayConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessEventDetectionPtr _IAgVeAccessAdvanced::GetEventDetection ( ) {
    struct IAgAccessEventDetection * _result = 0;
    HRESULT _hr = get_EventDetection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessEventDetectionPtr(_result, false);
}

IAgAccessSamplingPtr _IAgVeAccessAdvanced::GetSampling ( ) {
    struct IAgAccessSampling * _result = 0;
    HRESULT _hr = get_Sampling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessSamplingPtr(_result, false);
}

VARIANT_BOOL _IAgVeAccessAdvanced::GetUseLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAccessAdvanced::PutUseLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEIvTimeSense _IAgVeAccessAdvanced::GetTimeSense ( ) {
    enum AgEIvTimeSense _result;
    HRESULT _hr = get_TimeSense(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAccessAdvanced::PutTimeSense ( enum AgEIvTimeSense pVal ) {
    HRESULT _hr = put_TimeSense(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgAccessSampling wrapper method implementations
//

enum AgESamplingMethod _IAgAccessSampling::GetType ( ) {
    enum AgESamplingMethod _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAccessSampling::SetType ( enum AgESamplingMethod SamplingMethod ) {
    HRESULT _hr = raw_SetType(SamplingMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgAccessSampling::IsTypeSupported ( enum AgESamplingMethod SamplingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTypeSupported(SamplingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgAccessSampling::GetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSamplingMethodStrategyPtr _IAgAccessSampling::GetStrategy ( ) {
    struct IAgSamplingMethodStrategy * _result = 0;
    HRESULT _hr = get_Strategy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSamplingMethodStrategyPtr(_result, false);
}

//
// interface _IAgAccessEventDetection wrapper method implementations
//

enum AgEEventDetection _IAgAccessEventDetection::GetType ( ) {
    enum AgEEventDetection _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAccessEventDetection::SetType ( enum AgEEventDetection EventDetection ) {
    HRESULT _hr = raw_SetType(EventDetection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgAccessEventDetection::IsTypeSupported ( enum AgEEventDetection EventDetection ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTypeSupported(EventDetection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgAccessEventDetection::GetSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgEventDetectionStrategyPtr _IAgAccessEventDetection::GetStrategy ( ) {
    struct IAgEventDetectionStrategy * _result = 0;
    HRESULT _hr = get_Strategy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgEventDetectionStrategyPtr(_result, false);
}

//
// interface _IAgSnVOProjectionElement wrapper method implementations
//

_variant_t _IAgSnVOProjectionElement::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgSnVOProjectionElement::PutTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_Time(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnVOProjectionElement::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnVOProjectionElement::PutDistance ( double pVal ) {
    HRESULT _hr = put_Distance(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgCentralBodyTerrainCollectionElement wrapper method implementations
//

_bstr_t _IAgCentralBodyTerrainCollectionElement::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgTerrainCollectionPtr _IAgCentralBodyTerrainCollectionElement::GetTerrainCollection ( ) {
    struct IAgTerrainCollection * _result = 0;
    HRESULT _hr = get_TerrainCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainCollectionPtr(_result, false);
}

//
// interface _IAgSaExportTools wrapper method implementations
//

IAgVeEphemerisCCSDSExportToolPtr _IAgSaExportTools::GetEphemerisCCSDSExportTool ( ) {
    struct IAgVeEphemerisCCSDSExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisCCSDSExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisCCSDSExportToolPtr(_result, false);
}

IAgVeEphemerisStkExportToolPtr _IAgSaExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVeEphemerisSpiceExportToolPtr _IAgSaExportTools::GetEphemerisSpiceExportTool ( ) {
    struct IAgVeEphemerisSpiceExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisSpiceExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisSpiceExportToolPtr(_result, false);
}

IAgVeEphemerisCode500ExportToolPtr _IAgSaExportTools::GetEphemerisCode500ExportTool ( ) {
    struct IAgVeEphemerisCode500ExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisCode500ExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisCode500ExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr _IAgSaExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr _IAgSaExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgLvExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr _IAgLvExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr _IAgLvExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr _IAgLvExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgGvExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr _IAgGvExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr _IAgGvExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr _IAgGvExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgMsExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr _IAgMsExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr _IAgMsExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr _IAgMsExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgAcExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr _IAgAcExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr _IAgAcExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr _IAgAcExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgShExportTools wrapper method implementations
//

IAgVeEphemerisStkExportToolPtr _IAgShExportTools::GetEphemerisStkExportTool ( ) {
    struct IAgVeEphemerisStkExportTool * _result = 0;
    HRESULT _hr = raw_GetEphemerisStkExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEphemerisStkExportToolPtr(_result, false);
}

IAgVePropDefExportToolPtr _IAgShExportTools::GetPropDefExportTool ( ) {
    struct IAgVePropDefExportTool * _result = 0;
    HRESULT _hr = raw_GetPropDefExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropDefExportToolPtr(_result, false);
}

IAgVeAttitudeExportToolPtr _IAgShExportTools::GetAttitudeExportTool ( ) {
    struct IAgVeAttitudeExportTool * _result = 0;
    HRESULT _hr = raw_GetAttitudeExportTool(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudeExportToolPtr(_result, false);
}

//
// interface _IAgVeEphemerisCode500ExportTool wrapper method implementations
//

long _IAgVeEphemerisCode500ExportTool::GetSatID ( ) {
    long _result = 0;
    HRESULT _hr = get_SatID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisCode500ExportTool::PutSatID ( long pVal ) {
    HRESULT _hr = put_SatID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolStepSizePtr _IAgVeEphemerisCode500ExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

IAgExportToolTimePeriodPtr _IAgVeEphemerisCode500ExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

HRESULT _IAgVeEphemerisCode500ExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeEphemerisCCSDSExportTool wrapper method implementations
//

_bstr_t _IAgVeEphemerisCCSDSExportTool::GetOriginator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Originator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeEphemerisCCSDSExportTool::PutOriginator ( _bstr_t pVal ) {
    HRESULT _hr = put_Originator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeEphemerisCCSDSExportTool::GetObjectID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeEphemerisCCSDSExportTool::PutObjectID ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeEphemerisCCSDSExportTool::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeEphemerisCCSDSExportTool::PutObjectName ( _bstr_t pVal ) {
    HRESULT _hr = put_ObjectName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeEphemerisCCSDSExportTool::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeEphemerisCCSDSExportTool::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECCSDSReferenceFrame _IAgVeEphemerisCCSDSExportTool::GetReferenceFrame ( ) {
    enum AgECCSDSReferenceFrame _result;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisCCSDSExportTool::PutReferenceFrame ( enum AgECCSDSReferenceFrame pVal ) {
    HRESULT _hr = put_ReferenceFrame(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECCSDSDateFormat _IAgVeEphemerisCCSDSExportTool::GetDateFormat ( ) {
    enum AgECCSDSDateFormat _result;
    HRESULT _hr = get_DateFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisCCSDSExportTool::PutDateFormat ( enum AgECCSDSDateFormat pVal ) {
    HRESULT _hr = put_DateFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECCSDSEphemFormat _IAgVeEphemerisCCSDSExportTool::GetEphemerisFormat ( ) {
    enum AgECCSDSEphemFormat _result;
    HRESULT _hr = get_EphemerisFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisCCSDSExportTool::PutEphemerisFormat ( enum AgECCSDSEphemFormat pVal ) {
    HRESULT _hr = put_EphemerisFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeEphemerisCCSDSExportTool::GetTimePrecision ( ) {
    long _result = 0;
    HRESULT _hr = get_TimePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisCCSDSExportTool::PutTimePrecision ( long pVal ) {
    HRESULT _hr = put_TimePrecision(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolStepSizePtr _IAgVeEphemerisCCSDSExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

IAgExportToolTimePeriodPtr _IAgVeEphemerisCCSDSExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

SAFEARRAY * _IAgVeEphemerisCCSDSExportTool::GetReferenceFramesSupported ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ReferenceFramesSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeEphemerisCCSDSExportTool::GetUseSatelliteCenterAndFrame ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSatelliteCenterAndFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisCCSDSExportTool::PutUseSatelliteCenterAndFrame ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseSatelliteCenterAndFrame(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgVeEphemerisCCSDSExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeEphemerisStkExportTool wrapper method implementations
//

enum AgEStkEphemCoordinateSystem _IAgVeEphemerisStkExportTool::GetCoordinateSystem ( ) {
    enum AgEStkEphemCoordinateSystem _result;
    HRESULT _hr = get_CoordinateSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisStkExportTool::PutCoordinateSystem ( enum AgEStkEphemCoordinateSystem pVal ) {
    HRESULT _hr = put_CoordinateSystem(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeEphemerisStkExportTool::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeEphemerisStkExportTool::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEExportToolVersionFormat _IAgVeEphemerisStkExportTool::GetVersionFormat ( ) {
    enum AgEExportToolVersionFormat _result;
    HRESULT _hr = get_VersionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisStkExportTool::PutVersionFormat ( enum AgEExportToolVersionFormat pVal ) {
    HRESULT _hr = put_VersionFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeEphemerisStkExportTool::GetIncludeInterp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInterp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisStkExportTool::PutIncludeInterp ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeInterp(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolTimePeriodPtr _IAgVeEphemerisStkExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

IAgExportToolStepSizePtr _IAgVeEphemerisStkExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

enum AgEStkEphemCovarianceType _IAgVeEphemerisStkExportTool::GetCovarianceType ( ) {
    enum AgEStkEphemCovarianceType _result;
    HRESULT _hr = get_CovarianceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisStkExportTool::PutCovarianceType ( enum AgEStkEphemCovarianceType pVal ) {
    HRESULT _hr = put_CovarianceType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgVeEphemerisStkExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeEphemerisSpiceExportTool wrapper method implementations
//

_bstr_t _IAgVeEphemerisSpiceExportTool::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeEphemerisSpiceExportTool::PutCentralBodyName ( _bstr_t pVal ) {
    HRESULT _hr = put_CentralBodyName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeEphemerisSpiceExportTool::GetSatID ( ) {
    long _result = 0;
    HRESULT _hr = get_SatID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisSpiceExportTool::PutSatID ( long pVal ) {
    HRESULT _hr = put_SatID(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpiceInterpolation _IAgVeEphemerisSpiceExportTool::GetInterpolationType ( ) {
    enum AgESpiceInterpolation _result;
    HRESULT _hr = get_InterpolationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisSpiceExportTool::PutInterpolationType ( enum AgESpiceInterpolation pVal ) {
    HRESULT _hr = put_InterpolationType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVeEphemerisSpiceExportTool::GetInterpolation ( ) {
    long _result = 0;
    HRESULT _hr = get_Interpolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeEphemerisSpiceExportTool::PutInterpolation ( long pVal ) {
    HRESULT _hr = put_Interpolation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolStepSizePtr _IAgVeEphemerisSpiceExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

IAgExportToolTimePeriodPtr _IAgVeEphemerisSpiceExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

HRESULT _IAgVeEphemerisSpiceExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgExportToolTimePeriod wrapper method implementations
//

_variant_t _IAgExportToolTimePeriod::GetStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgExportToolTimePeriod::PutStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_Start(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgExportToolTimePeriod::GetStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgExportToolTimePeriod::PutStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_Stop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEExportToolTimePeriod _IAgExportToolTimePeriod::GetTimePeriodType ( ) {
    enum AgEExportToolTimePeriod _result;
    HRESULT _hr = get_TimePeriodType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgExportToolTimePeriod::PutTimePeriodType ( enum AgEExportToolTimePeriod pVal ) {
    HRESULT _hr = put_TimePeriodType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeAttitudeExportTool wrapper method implementations
//

enum AgEAttCoordinateAxes _IAgVeAttitudeExportTool::GetCoordinateAxesType ( ) {
    enum AgEAttCoordinateAxes _result;
    HRESULT _hr = get_CoordinateAxesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeAttitudeExportTool::SetCoordinateAxesType ( enum AgEAttCoordinateAxes CoordinateAxes ) {
    HRESULT _hr = raw_SetCoordinateAxesType(CoordinateAxes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeCoordinateAxesPtr _IAgVeAttitudeExportTool::GetCoordinateAxes ( ) {
    struct IAgVeCoordinateAxes * _result = 0;
    HRESULT _hr = get_CoordinateAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeCoordinateAxesPtr(_result, false);
}

IAgExportToolTimePeriodPtr _IAgVeAttitudeExportTool::GetTimePeriod ( ) {
    struct IAgExportToolTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolTimePeriodPtr(_result, false);
}

enum AgEAttInclude _IAgVeAttitudeExportTool::GetInclude ( ) {
    enum AgEAttInclude _result;
    HRESULT _hr = get_Include(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAttitudeExportTool::PutInclude ( enum AgEAttInclude pVal ) {
    HRESULT _hr = put_Include(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEExportToolVersionFormat _IAgVeAttitudeExportTool::GetVersionFormat ( ) {
    enum AgEExportToolVersionFormat _result;
    HRESULT _hr = get_VersionFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAttitudeExportTool::PutVersionFormat ( enum AgEExportToolVersionFormat pVal ) {
    HRESULT _hr = put_VersionFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgExportToolStepSizePtr _IAgVeAttitudeExportTool::GetStepSize ( ) {
    struct IAgExportToolStepSize * _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgExportToolStepSizePtr(_result, false);
}

SAFEARRAY * _IAgVeAttitudeExportTool::GetSupportedCoordinateAxes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedCoordinateAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVeAttitudeExportTool::GetCentralBodyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBodyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT _IAgVeAttitudeExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVePropDefExportTool wrapper method implementations
//

HRESULT _IAgVePropDefExportTool::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeCoordinateAxesCustom wrapper method implementations
//

_bstr_t _IAgVeCoordinateAxesCustom::GetReferenceAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeCoordinateAxesCustom::PutReferenceAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeCoordinateAxesCustom wrapper method implementations
//

_bstr_t IAgVeCoordinateAxesCustom::GetReferenceAxesName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferenceAxesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeCoordinateAxesCustom::PutReferenceAxesName ( _bstr_t pVal ) {
    HRESULT _hr = put_ReferenceAxesName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgExportToolStepSize wrapper method implementations
//

double _IAgExportToolStepSize::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgExportToolStepSize::PutValue ( double pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEExportToolStepSize _IAgExportToolStepSize::GetStepSizeType ( ) {
    enum AgEExportToolStepSize _result;
    HRESULT _hr = get_StepSizeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgExportToolStepSize::PutStepSizeType ( enum AgEExportToolStepSize pVal ) {
    HRESULT _hr = put_StepSizeType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeEclipsingBodies wrapper method implementations
//

SAFEARRAY * _IAgVeEclipsingBodies::GetAvailableEclipsingBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableEclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeEclipsingBodies::GetAssignedEclipsingBodies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AssignedEclipsingBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeEclipsingBodies::IsEclipsingBodyAssigned ( _bstr_t EclipsingBody ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEclipsingBodyAssigned(EclipsingBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeEclipsingBodies::AssignEclipsingBody ( _bstr_t EclipsingBody ) {
    HRESULT _hr = raw_AssignEclipsingBody(EclipsingBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeEclipsingBodies::RemoveEclipsingBody ( _bstr_t EclipsingBody ) {
    HRESULT _hr = raw_RemoveEclipsingBody(EclipsingBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeEclipsingBodies::RemoveAllEclipsingBodies ( ) {
    HRESULT _hr = raw_RemoveAllEclipsingBodies();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgLocationCrdnPoint wrapper method implementations
//

_bstr_t _IAgLocationCrdnPoint::GetPointPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLocationCrdnPoint::PutPointPath ( _bstr_t pPoint ) {
    HRESULT _hr = put_PointPath(pPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgLocationCrdnPoint wrapper method implementations
//

_bstr_t IAgLocationCrdnPoint::GetPointPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgLocationCrdnPoint::PutPointPath ( _bstr_t pPoint ) {
    HRESULT _hr = put_PointPath(pPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgTimePeriod wrapper method implementations
//

IAgTimePeriodValuePtr _IAgTimePeriod::GetStartTime ( ) {
    struct IAgTimePeriodValue * _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodValuePtr(_result, false);
}

IAgTimePeriodValuePtr _IAgTimePeriod::GetStopTime ( ) {
    struct IAgTimePeriodValue * _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodValuePtr(_result, false);
}

_variant_t _IAgTimePeriod::GetDuration ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgTimePeriod::PutDuration ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Duration(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgTimePeriodValue wrapper method implementations
//

_variant_t _IAgTimePeriodValue::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgTimePeriodValue::PutValue ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Value(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgETimePeriodValueType _IAgTimePeriodValue::GetType ( ) {
    enum AgETimePeriodValueType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTimePeriodValue::PutType ( enum AgETimePeriodValueType pRetVal ) {
    HRESULT _hr = put_Type(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSpatialState wrapper method implementations
//

STKUtil::IAgPositionPtr _IAgSpatialState::GetFixedPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_FixedPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

STKUtil::IAgPositionPtr _IAgSpatialState::GetInertialPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_InertialPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

STKUtil::IAgOrientationPtr _IAgSpatialState::GetInertialOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_InertialOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

STKUtil::IAgOrientationPtr _IAgSpatialState::GetFixedOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_FixedOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

_variant_t _IAgSpatialState::GetCurrentTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t _IAgSpatialState::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t _IAgSpatialState::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgSpatialState::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL _IAgSpatialState::GetIsAvailable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSpatialState::QueryVelocityFixed ( double * pVx, double * pVy, double * pVz ) {
    HRESULT _hr = raw_QueryVelocityFixed(pVx, pVy, pVz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgSpatialState::QueryVelocityInertial ( double * pVx, double * pVy, double * pVz ) {
    HRESULT _hr = raw_QueryVelocityInertial(pVx, pVy, pVz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeSpatialInfo wrapper method implementations
//

IAgSpatialStatePtr _IAgVeSpatialInfo::GetState ( const _variant_t & Time ) {
    struct IAgSpatialState * _result = 0;
    HRESULT _hr = raw_GetState(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpatialStatePtr(_result, false);
}

VARIANT_BOOL _IAgVeSpatialInfo::GetRecycle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Recycle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgOnePtAccess wrapper method implementations
//

IAgOnePtAccessResultCollectionPtr _IAgOnePtAccess::Compute ( ) {
    struct IAgOnePtAccessResultCollection * _result = 0;
    HRESULT _hr = raw_Compute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessResultCollectionPtr(_result, false);
}

HRESULT _IAgOnePtAccess::Remove ( ) {
    HRESULT _hr = raw_Remove();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEOnePtAccessSummary _IAgOnePtAccess::GetSummaryOption ( ) {
    enum AgEOnePtAccessSummary _result;
    HRESULT _hr = get_SummaryOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgOnePtAccess::PutSummaryOption ( enum AgEOnePtAccessSummary pVal ) {
    HRESULT _hr = put_SummaryOption(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgOnePtAccess::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgOnePtAccess::PutStartTime ( const _variant_t & pStartTime ) {
    HRESULT _hr = put_StartTime(pStartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgOnePtAccess::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgOnePtAccess::PutStopTime ( const _variant_t & pStopTime ) {
    HRESULT _hr = put_StopTime(pStopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgOnePtAccess::GetStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgOnePtAccess::PutStepSize ( double pStepSize ) {
    HRESULT _hr = put_StepSize(pStepSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgOnePtAccess::GetOutputToFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OutputToFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgOnePtAccess::PutOutputToFile ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_OutputToFile(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgOnePtAccess::GetOutputFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutputFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgOnePtAccess::PutOutputFile ( _bstr_t pRetVal ) {
    HRESULT _hr = put_OutputFile(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgOnePtAccessResult wrapper method implementations
//

VARIANT_BOOL _IAgOnePtAccessResult::GetAccessSatisfied ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AccessSatisfied(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgOnePtAccessResult::GetTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IAgOnePtAccessConstraintCollectionPtr _IAgOnePtAccessResult::GetConstraints ( ) {
    struct IAgOnePtAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessConstraintCollectionPtr(_result, false);
}

//
// interface _IAgOnePtAccessConstraint wrapper method implementations
//

enum AgEOnePtAccessStatus _IAgOnePtAccessConstraint::GetStatus ( ) {
    enum AgEOnePtAccessStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEAccessConstraints _IAgOnePtAccessConstraint::GetConstraint ( ) {
    enum AgEAccessConstraints _result;
    HRESULT _hr = get_Constraint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgOnePtAccessConstraint::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgOnePtAccessConstraint::GetObjectPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgVeRealtimeCartesianPoints wrapper method implementations
//

HRESULT IAgVeRealtimeCartesianPoints::AddPosition ( const _variant_t & Time, double X, double Y, double Z ) {
    HRESULT _hr = raw_AddPosition(Time, X, Y, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeRealtimeCartesianPoints::Add ( const _variant_t & Time, double X, double Y, double Z, double Vx, double Vy, double Vz ) {
    HRESULT _hr = raw_Add(Time, X, Y, Z, Vx, Vy, Vz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeRealtimeLLAHPSPoints wrapper method implementations
//

HRESULT IAgVeRealtimeLLAHPSPoints::Add ( const _variant_t & Time, double Lat, double Lon, double Alt, double Heading, double Pitch, double Speed ) {
    HRESULT _hr = raw_Add(Time, Lat, Lon, Alt, Heading, Pitch, Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeRealtimeLLAPoints wrapper method implementations
//

HRESULT IAgVeRealtimeLLAPoints::AddPosition ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    HRESULT _hr = raw_AddPosition(Time, Lat, Lon, Alt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeRealtimeLLAPoints::Add ( const _variant_t & Time, double Lat, double Lon, double Alt, double LatRate, double LonRate, double AltRate ) {
    HRESULT _hr = raw_Add(Time, Lat, Lon, Alt, LatRate, LonRate, AltRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeRealtimeLLAPoints::AddPositionBatch ( SAFEARRAY * * Times, SAFEARRAY * * Lats, SAFEARRAY * * Lons, SAFEARRAY * * Alts ) {
    HRESULT _hr = raw_AddPositionBatch(Times, Lats, Lons, Alts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeRealtimeLLAPoints::AddBatch ( SAFEARRAY * * Times, SAFEARRAY * * Lats, SAFEARRAY * * Lons, SAFEARRAY * * Alts, SAFEARRAY * * LatRates, SAFEARRAY * * LonRates, SAFEARRAY * * AltRates ) {
    HRESULT _hr = raw_AddBatch(Times, Lats, Lons, Alts, LatRates, LonRates, AltRates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeRealtimeUTMPoints wrapper method implementations
//

HRESULT IAgVeRealtimeUTMPoints::AddPosition ( const _variant_t & Time, _bstr_t ZoneStr, double Easting, double Northing, double Alt ) {
    HRESULT _hr = raw_AddPosition(Time, ZoneStr, Easting, Northing, Alt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeRealtimeUTMPoints::Add ( const _variant_t & Time, _bstr_t ZoneStr, double Easting, double Northing, double Alt, double LonRate, double LatRate, double AltRate ) {
    HRESULT _hr = raw_Add(Time, ZoneStr, Easting, Northing, Alt, LonRate, LatRate, AltRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeRealtimePointBuilder wrapper method implementations
//

IAgVeRealtimeCartesianPointsPtr IAgVeRealtimePointBuilder::GetB1950 ( ) {
    struct IAgVeRealtimeCartesianPoints * _result = 0;
    HRESULT _hr = get_B1950(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeCartesianPointsPtr(_result, false);
}

IAgVeRealtimeCartesianPointsPtr IAgVeRealtimePointBuilder::GetECF ( ) {
    struct IAgVeRealtimeCartesianPoints * _result = 0;
    HRESULT _hr = get_ECF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeCartesianPointsPtr(_result, false);
}

IAgVeRealtimeCartesianPointsPtr IAgVeRealtimePointBuilder::GetECI ( ) {
    struct IAgVeRealtimeCartesianPoints * _result = 0;
    HRESULT _hr = get_ECI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeCartesianPointsPtr(_result, false);
}

IAgVeRealtimeLLAHPSPointsPtr IAgVeRealtimePointBuilder::GetLLAHPS ( ) {
    struct IAgVeRealtimeLLAHPSPoints * _result = 0;
    HRESULT _hr = get_LLAHPS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeLLAHPSPointsPtr(_result, false);
}

IAgVeRealtimeLLAPointsPtr IAgVeRealtimePointBuilder::GetLLA ( ) {
    struct IAgVeRealtimeLLAPoints * _result = 0;
    HRESULT _hr = get_LLA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeLLAPointsPtr(_result, false);
}

IAgVeRealtimeLLAPointsPtr IAgVeRealtimePointBuilder::GetAGL_LLA ( ) {
    struct IAgVeRealtimeLLAPoints * _result = 0;
    HRESULT _hr = get_AGL_LLA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeLLAPointsPtr(_result, false);
}

IAgVeRealtimeLLAPointsPtr IAgVeRealtimePointBuilder::GetMSL_LLA ( ) {
    struct IAgVeRealtimeLLAPoints * _result = 0;
    HRESULT _hr = get_MSL_LLA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeLLAPointsPtr(_result, false);
}

IAgVeRealtimeUTMPointsPtr IAgVeRealtimePointBuilder::GetUTM ( ) {
    struct IAgVeRealtimeUTMPoints * _result = 0;
    HRESULT _hr = get_UTM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeUTMPointsPtr(_result, false);
}

IAgVeRealtimeCartesianPointsPtr IAgVeRealtimePointBuilder::GetPointsInFrame ( _bstr_t ReferenceFrame ) {
    struct IAgVeRealtimeCartesianPoints * _result = 0;
    HRESULT _hr = raw_GetPointsInFrame(ReferenceFrame, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeCartesianPointsPtr(_result, false);
}

HRESULT IAgVeRealtimePointBuilder::RemoveAllPoints ( ) {
    HRESULT _hr = raw_RemoveAllPoints();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVePropagatorRealtime wrapper method implementations
//

HRESULT _IAgVePropagatorRealtime::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeDurationPtr _IAgVePropagatorRealtime::GetDuration ( ) {
    struct IAgVeDuration * _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeDurationPtr(_result, false);
}

long _IAgVePropagatorRealtime::GetInterpolationOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_InterpolationOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorRealtime::PutInterpolationOrder ( long pVal ) {
    HRESULT _hr = put_InterpolationOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELookAheadPropagator _IAgVePropagatorRealtime::GetLookAheadPropagator ( ) {
    enum AgELookAheadPropagator _result;
    HRESULT _hr = get_LookAheadPropagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorRealtime::PutLookAheadPropagator ( enum AgELookAheadPropagator pVal ) {
    HRESULT _hr = put_LookAheadPropagator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVePropagatorRealtime::GetSupportedLookAheadPropagators ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedLookAheadPropagators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVePropagatorRealtime::IsLookAheadPropagatorSupported ( enum AgELookAheadPropagator Propagator ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLookAheadPropagatorSupported(Propagator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVePropagatorRealtime::GetTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorRealtime::PutTimeStep ( double pVal ) {
    HRESULT _hr = put_TimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorRealtime::GetTimeoutGap ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeoutGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorRealtime::PutTimeoutGap ( double pVal ) {
    HRESULT _hr = put_TimeoutGap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeRealtimePointBuilderPtr _IAgVePropagatorRealtime::GetPointBuilder ( ) {
    struct IAgVeRealtimePointBuilder * _result = 0;
    HRESULT _hr = get_PointBuilder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimePointBuilderPtr(_result, false);
}

//
// interface IAgVePropagatorRealtime wrapper method implementations
//

HRESULT IAgVePropagatorRealtime::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeDurationPtr IAgVePropagatorRealtime::GetDuration ( ) {
    struct IAgVeDuration * _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeDurationPtr(_result, false);
}

long IAgVePropagatorRealtime::GetInterpolationOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_InterpolationOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorRealtime::PutInterpolationOrder ( long pVal ) {
    HRESULT _hr = put_InterpolationOrder(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELookAheadPropagator IAgVePropagatorRealtime::GetLookAheadPropagator ( ) {
    enum AgELookAheadPropagator _result;
    HRESULT _hr = get_LookAheadPropagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorRealtime::PutLookAheadPropagator ( enum AgELookAheadPropagator pVal ) {
    HRESULT _hr = put_LookAheadPropagator(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVePropagatorRealtime::GetSupportedLookAheadPropagators ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedLookAheadPropagators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVePropagatorRealtime::IsLookAheadPropagatorSupported ( enum AgELookAheadPropagator Propagator ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsLookAheadPropagatorSupported(Propagator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVePropagatorRealtime::GetTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorRealtime::PutTimeStep ( double pVal ) {
    HRESULT _hr = put_TimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorRealtime::GetTimeoutGap ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeoutGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorRealtime::PutTimeoutGap ( double pVal ) {
    HRESULT _hr = put_TimeoutGap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeRealtimePointBuilderPtr IAgVePropagatorRealtime::GetPointBuilder ( ) {
    struct IAgVeRealtimePointBuilder * _result = 0;
    HRESULT _hr = get_PointBuilder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimePointBuilderPtr(_result, false);
}

//
// interface _IAgVeRealtimePointBuilder wrapper method implementations
//

IAgVeRealtimeCartesianPointsPtr _IAgVeRealtimePointBuilder::GetB1950 ( ) {
    struct IAgVeRealtimeCartesianPoints * _result = 0;
    HRESULT _hr = get_B1950(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeCartesianPointsPtr(_result, false);
}

IAgVeRealtimeCartesianPointsPtr _IAgVeRealtimePointBuilder::GetECF ( ) {
    struct IAgVeRealtimeCartesianPoints * _result = 0;
    HRESULT _hr = get_ECF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeCartesianPointsPtr(_result, false);
}

IAgVeRealtimeCartesianPointsPtr _IAgVeRealtimePointBuilder::GetECI ( ) {
    struct IAgVeRealtimeCartesianPoints * _result = 0;
    HRESULT _hr = get_ECI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeCartesianPointsPtr(_result, false);
}

IAgVeRealtimeLLAHPSPointsPtr _IAgVeRealtimePointBuilder::GetLLAHPS ( ) {
    struct IAgVeRealtimeLLAHPSPoints * _result = 0;
    HRESULT _hr = get_LLAHPS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeLLAHPSPointsPtr(_result, false);
}

IAgVeRealtimeLLAPointsPtr _IAgVeRealtimePointBuilder::GetLLA ( ) {
    struct IAgVeRealtimeLLAPoints * _result = 0;
    HRESULT _hr = get_LLA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeLLAPointsPtr(_result, false);
}

IAgVeRealtimeLLAPointsPtr _IAgVeRealtimePointBuilder::GetAGL_LLA ( ) {
    struct IAgVeRealtimeLLAPoints * _result = 0;
    HRESULT _hr = get_AGL_LLA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeLLAPointsPtr(_result, false);
}

IAgVeRealtimeLLAPointsPtr _IAgVeRealtimePointBuilder::GetMSL_LLA ( ) {
    struct IAgVeRealtimeLLAPoints * _result = 0;
    HRESULT _hr = get_MSL_LLA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeLLAPointsPtr(_result, false);
}

IAgVeRealtimeUTMPointsPtr _IAgVeRealtimePointBuilder::GetUTM ( ) {
    struct IAgVeRealtimeUTMPoints * _result = 0;
    HRESULT _hr = get_UTM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeUTMPointsPtr(_result, false);
}

IAgVeRealtimeCartesianPointsPtr _IAgVeRealtimePointBuilder::GetPointsInFrame ( _bstr_t ReferenceFrame ) {
    struct IAgVeRealtimeCartesianPoints * _result = 0;
    HRESULT _hr = raw_GetPointsInFrame(ReferenceFrame, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRealtimeCartesianPointsPtr(_result, false);
}

HRESULT _IAgVeRealtimePointBuilder::RemoveAllPoints ( ) {
    HRESULT _hr = raw_RemoveAllPoints();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeRealtimeCartesianPoints wrapper method implementations
//

HRESULT _IAgVeRealtimeCartesianPoints::AddPosition ( const _variant_t & Time, double X, double Y, double Z ) {
    HRESULT _hr = raw_AddPosition(Time, X, Y, Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeRealtimeCartesianPoints::Add ( const _variant_t & Time, double X, double Y, double Z, double Vx, double Vy, double Vz ) {
    HRESULT _hr = raw_Add(Time, X, Y, Z, Vx, Vy, Vz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeRealtimeLLAHPSPoints wrapper method implementations
//

HRESULT _IAgVeRealtimeLLAHPSPoints::Add ( const _variant_t & Time, double Lat, double Lon, double Alt, double Heading, double Pitch, double Speed ) {
    HRESULT _hr = raw_Add(Time, Lat, Lon, Alt, Heading, Pitch, Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeRealtimeLLAPoints wrapper method implementations
//

HRESULT _IAgVeRealtimeLLAPoints::AddPosition ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    HRESULT _hr = raw_AddPosition(Time, Lat, Lon, Alt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeRealtimeLLAPoints::Add ( const _variant_t & Time, double Lat, double Lon, double Alt, double LatRate, double LonRate, double AltRate ) {
    HRESULT _hr = raw_Add(Time, Lat, Lon, Alt, LatRate, LonRate, AltRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeRealtimeLLAPoints::AddPositionBatch ( SAFEARRAY * * Times, SAFEARRAY * * Lats, SAFEARRAY * * Lons, SAFEARRAY * * Alts ) {
    HRESULT _hr = raw_AddPositionBatch(Times, Lats, Lons, Alts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeRealtimeLLAPoints::AddBatch ( SAFEARRAY * * Times, SAFEARRAY * * Lats, SAFEARRAY * * Lons, SAFEARRAY * * Alts, SAFEARRAY * * LatRates, SAFEARRAY * * LonRates, SAFEARRAY * * AltRates ) {
    HRESULT _hr = raw_AddBatch(Times, Lats, Lons, Alts, LatRates, LonRates, AltRates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeRealtimeUTMPoints wrapper method implementations
//

HRESULT _IAgVeRealtimeUTMPoints::AddPosition ( const _variant_t & Time, _bstr_t ZoneStr, double Easting, double Northing, double Alt ) {
    HRESULT _hr = raw_AddPosition(Time, ZoneStr, Easting, Northing, Alt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVeRealtimeUTMPoints::Add ( const _variant_t & Time, _bstr_t ZoneStr, double Easting, double Northing, double Alt, double LonRate, double LatRate, double AltRate ) {
    HRESULT _hr = raw_Add(Time, ZoneStr, Easting, Northing, Alt, LonRate, LatRate, AltRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgSRPModelGPS wrapper method implementations
//

enum AgESRPModel _IAgSRPModelGPS::GetType ( ) {
    enum AgESRPModel _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgSRPModelGPS::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSRPModelGPS::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSRPModelGPS::GetYBias ( ) {
    double _result = 0;
    HRESULT _hr = get_YBias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSRPModelGPS::PutYBias ( double pVal ) {
    HRESULT _hr = put_YBias(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSRPModelGPS wrapper method implementations
//

double IAgSRPModelGPS::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSRPModelGPS::PutScale ( double pVal ) {
    HRESULT _hr = put_Scale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSRPModelGPS::GetYBias ( ) {
    double _result = 0;
    HRESULT _hr = get_YBias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSRPModelGPS::PutYBias ( double pVal ) {
    HRESULT _hr = put_YBias(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSRPModelSpherical wrapper method implementations
//

enum AgESRPModel _IAgSRPModelSpherical::GetType ( ) {
    enum AgESRPModel _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgSRPModelSpherical::GetCr ( ) {
    double _result = 0;
    HRESULT _hr = get_Cr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSRPModelSpherical::PutCr ( double pVal ) {
    HRESULT _hr = put_Cr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSRPModelSpherical::GetAreaMassRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaMassRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSRPModelSpherical::PutAreaMassRatio ( double pVal ) {
    HRESULT _hr = put_AreaMassRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSRPModelSpherical wrapper method implementations
//

double IAgSRPModelSpherical::GetCr ( ) {
    double _result = 0;
    HRESULT _hr = get_Cr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSRPModelSpherical::PutCr ( double pVal ) {
    HRESULT _hr = put_Cr(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSRPModelSpherical::GetAreaMassRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_AreaMassRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSRPModelSpherical::PutAreaMassRatio ( double pVal ) {
    HRESULT _hr = put_AreaMassRatio(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeHPOPSRPModel wrapper method implementations
//

enum AgESRPModel _IAgVeHPOPSRPModel::GetModelType ( ) {
    enum AgESRPModel _result;
    HRESULT _hr = get_ModelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeHPOPSRPModel::SetModelType ( enum AgESRPModel SRPModel ) {
    HRESULT _hr = raw_SetModelType(SRPModel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeHPOPSRPModel::IsModelTypeSupported ( enum AgESRPModel SRPModel ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsModelTypeSupported(SRPModel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeHPOPSRPModel::GetModelSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ModelSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSRPModelBasePtr _IAgVeHPOPSRPModel::GetModel ( ) {
    struct IAgSRPModelBase * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSRPModelBasePtr(_result, false);
}

//
// interface _IAgScAnimationTimePeriod wrapper method implementations
//

IAgTimePeriodValuePtr _IAgScAnimationTimePeriod::GetStartTime ( ) {
    struct IAgTimePeriodValue * _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodValuePtr(_result, false);
}

IAgTimePeriodValuePtr _IAgScAnimationTimePeriod::GetStopTime ( ) {
    struct IAgTimePeriodValue * _result = 0;
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodValuePtr(_result, false);
}

_variant_t _IAgScAnimationTimePeriod::GetDuration ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgScAnimationTimePeriod::PutDuration ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Duration(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScAnimationTimePeriod::GetUseAnalysisStartTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAnalysisStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScAnimationTimePeriod::PutUseAnalysisStartTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAnalysisStartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScAnimationTimePeriod::GetUseAnalysisStopTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAnalysisStopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScAnimationTimePeriod::PutUseAnalysisStopTime ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAnalysisStopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnProjConstantAlt wrapper method implementations
//

double _IAgSnProjConstantAlt::GetMin ( ) {
    double _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjConstantAlt::PutMin ( double pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSnProjConstantAlt::GetMax ( ) {
    double _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjConstantAlt::PutMax ( double pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgSnProjConstantAlt::GetNumberOfSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjConstantAlt::PutNumberOfSteps ( long pVal ) {
    HRESULT _hr = put_NumberOfSteps(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnProjConstantAlt::GetProjectsThruCrossing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectsThruCrossing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjConstantAlt::PutProjectsThruCrossing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProjectsThruCrossing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnAltCrossingSides _IAgSnProjConstantAlt::GetAltCrossingSides ( ) {
    enum AgESnAltCrossingSides _result;
    HRESULT _hr = get_AltCrossingSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjConstantAlt::PutAltCrossingSides ( enum AgESnAltCrossingSides pVal ) {
    HRESULT _hr = put_AltCrossingSides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnAltCrossingDirection _IAgSnProjConstantAlt::GetDirection ( ) {
    enum AgESnAltCrossingDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjConstantAlt::PutDirection ( enum AgESnAltCrossingDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSnProjConstantAlt::GetExcludeHorizonArcs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExcludeHorizonArcs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjConstantAlt::PutExcludeHorizonArcs ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExcludeHorizonArcs(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnProjConstantAlt wrapper method implementations
//

double IAgSnProjConstantAlt::GetMin ( ) {
    double _result = 0;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjConstantAlt::PutMin ( double pVal ) {
    HRESULT _hr = put_Min(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSnProjConstantAlt::GetMax ( ) {
    double _result = 0;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjConstantAlt::PutMax ( double pVal ) {
    HRESULT _hr = put_Max(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgSnProjConstantAlt::GetNumberOfSteps ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjConstantAlt::PutNumberOfSteps ( long pVal ) {
    HRESULT _hr = put_NumberOfSteps(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnProjConstantAlt::GetProjectsThruCrossing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectsThruCrossing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjConstantAlt::PutProjectsThruCrossing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ProjectsThruCrossing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnAltCrossingSides IAgSnProjConstantAlt::GetAltCrossingSides ( ) {
    enum AgESnAltCrossingSides _result;
    HRESULT _hr = get_AltCrossingSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjConstantAlt::PutAltCrossingSides ( enum AgESnAltCrossingSides pVal ) {
    HRESULT _hr = put_AltCrossingSides(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnAltCrossingDirection IAgSnProjConstantAlt::GetDirection ( ) {
    enum AgESnAltCrossingDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjConstantAlt::PutDirection ( enum AgESnAltCrossingDirection pVal ) {
    HRESULT _hr = put_Direction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgSnProjConstantAlt::GetExcludeHorizonArcs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExcludeHorizonArcs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjConstantAlt::PutExcludeHorizonArcs ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExcludeHorizonArcs(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSnProjObjectAlt wrapper method implementations
//

VARIANT_BOOL _IAgSnProjObjectAlt::GetExcludeHorizonArcs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExcludeHorizonArcs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnProjObjectAlt::PutExcludeHorizonArcs ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExcludeHorizonArcs(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnProjObjectAlt wrapper method implementations
//

VARIANT_BOOL IAgSnProjObjectAlt::GetExcludeHorizonArcs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExcludeHorizonArcs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnProjObjectAlt::PutExcludeHorizonArcs ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ExcludeHorizonArcs(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeAttitudeRealTimeDataReference wrapper method implementations
//

enum AgEVeProfile _IAgVeAttitudeRealTimeDataReference::GetProfileType ( ) {
    enum AgEVeProfile _result;
    HRESULT _hr = get_ProfileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeAttitudeRealTimeDataReference::SetProfileType ( enum AgEVeProfile Profile ) {
    HRESULT _hr = raw_SetProfileType(Profile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeAttitudeRealTimeDataReference::IsProfileTypeSupported ( enum AgEVeProfile Profile ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsProfileTypeSupported(Profile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeAttitudeRealTimeDataReference::GetProfileSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ProfileSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttProfilePtr _IAgVeAttitudeRealTimeDataReference::GetProfile ( ) {
    struct IAgVeAttProfile * _result = 0;
    HRESULT _hr = get_Profile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttProfilePtr(_result, false);
}

//
// interface _IAgMtoAnalysis wrapper method implementations
//

IAgMtoAnalysisPositionPtr _IAgMtoAnalysis::GetPosition ( ) {
    struct IAgMtoAnalysisPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisPositionPtr(_result, false);
}

IAgMtoAnalysisRangePtr _IAgMtoAnalysis::GetRange ( ) {
    struct IAgMtoAnalysisRange * _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisRangePtr(_result, false);
}

IAgMtoAnalysisFieldOfViewPtr _IAgMtoAnalysis::GetFieldOfView ( ) {
    struct IAgMtoAnalysisFieldOfView * _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisFieldOfViewPtr(_result, false);
}

IAgMtoAnalysisVisibilityPtr _IAgMtoAnalysis::GetVisibility ( ) {
    struct IAgMtoAnalysisVisibility * _result = 0;
    HRESULT _hr = get_Visibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisVisibilityPtr(_result, false);
}

//
// interface _IAgMtoAnalysisPosition wrapper method implementations
//

enum AgEAltRefType _IAgMtoAnalysisPosition::GetAltRef ( ) {
    enum AgEAltRefType _result;
    HRESULT _hr = get_AltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisPosition::PutAltRef ( enum AgEAltRefType pVal ) {
    HRESULT _hr = put_AltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgMtoTrackPointCollectionPtr _IAgMtoAnalysisPosition::ComputeAllTracks ( const _variant_t & Time ) {
    struct IAgMtoTrackPointCollection * _result = 0;
    HRESULT _hr = raw_ComputeAllTracks(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointCollectionPtr(_result, false);
}

IAgMtoTrackPointCollectionPtr _IAgMtoAnalysisPosition::ComputeTracks ( SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    struct IAgMtoTrackPointCollection * _result = 0;
    HRESULT _hr = raw_ComputeTracks(TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointCollectionPtr(_result, false);
}

IAgMtoTrackPointPtr _IAgMtoAnalysisPosition::ComputeTrack ( int TrackId, const _variant_t & Time ) {
    struct IAgMtoTrackPoint * _result = 0;
    HRESULT _hr = raw_ComputeTrack(TrackId, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackPointPtr(_result, false);
}

//
// interface _IAgMtoAnalysisRange wrapper method implementations
//

double _IAgMtoAnalysisRange::GetLowerLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_LowerLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisRange::PutLowerLimit ( double pVal ) {
    HRESULT _hr = put_LowerLimit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgMtoAnalysisRange::GetUpperLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_UpperLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisRange::PutUpperLimit ( double pVal ) {
    HRESULT _hr = put_UpperLimit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMtoObjectInterval _IAgMtoAnalysisRange::GetObjectInterval ( ) {
    enum AgEMtoObjectInterval _result;
    HRESULT _hr = get_ObjectInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisRange::PutObjectInterval ( enum AgEMtoObjectInterval pVal ) {
    HRESULT _hr = put_ObjectInterval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgMtoAnalysisRange::GetObjectData ( ) {
    int _result = 0;
    HRESULT _hr = get_ObjectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisRange::PutObjectData ( int pVal ) {
    HRESULT _hr = put_ObjectData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgMtoAnalysisRange::GetStkObjectPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StkObjectPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMtoAnalysisRange::PutStkObjectPath ( _bstr_t pRetVal ) {
    HRESULT _hr = put_StkObjectPath(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoAnalysisRange::IsAnyTrackInRange ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAnyTrackInRange(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgMtoAnalysisRange::AreAllTracksInRange ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreAllTracksInRange(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgMtoAnalysisRange::IsTrackInRange ( int TrackId, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrackInRange(TrackId, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgMtoAnalysisRange::ComputeRanges ( enum AgEMtoRangeMode Mode, SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeRanges(Mode, TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgMtoAnalysisRange::ComputeAllRanges ( enum AgEMtoRangeMode Mode, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeAllRanges(Mode, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEMtoEntirety _IAgMtoAnalysisRange::GetEntirety ( ) {
    enum AgEMtoEntirety _result;
    HRESULT _hr = get_Entirety(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisRange::PutEntirety ( enum AgEMtoEntirety pEntirety ) {
    HRESULT _hr = put_Entirety(pEntirety);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoAnalysisRange::AreTracksInRange ( enum AgEMtoTrackEval AllOrAny, SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreTracksInRange(AllOrAny, TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgMtoAnalysisFieldOfView wrapper method implementations
//

VARIANT_BOOL _IAgMtoAnalysisFieldOfView::IsAnyTrackInFOV ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAnyTrackInFOV(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgMtoAnalysisFieldOfView::AreAllTracksInFOV ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreAllTracksInFOV(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgMtoAnalysisFieldOfView::IsTrackInFOV ( int TrackId, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrackInFOV(TrackId, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgMtoAnalysisFieldOfView::ComputeTracks ( enum AgEMtoVisibilityMode Mode, SAFEARRAY * * Tracks, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeTracks(Mode, Tracks, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgMtoAnalysisFieldOfView::ComputeAllTracks ( enum AgEMtoVisibilityMode Mode, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeAllTracks(Mode, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgMtoAnalysisFieldOfView::GetSensor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Sensor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMtoAnalysisFieldOfView::PutSensor ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Sensor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMtoEntirety _IAgMtoAnalysisFieldOfView::GetEntirety ( ) {
    enum AgEMtoEntirety _result;
    HRESULT _hr = get_Entirety(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisFieldOfView::PutEntirety ( enum AgEMtoEntirety pEntirety ) {
    HRESULT _hr = put_Entirety(pEntirety);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoAnalysisFieldOfView::AreTracksInFOV ( enum AgEMtoTrackEval AnyOrAll, SAFEARRAY * * Tracks, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreTracksInFOV(AnyOrAll, Tracks, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgMtoAnalysisVisibility wrapper method implementations
//

VARIANT_BOOL _IAgMtoAnalysisVisibility::IsAnyTrackVisible ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAnyTrackVisible(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgMtoAnalysisVisibility::AreAllTracksVisible ( const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreAllTracksVisible(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgMtoAnalysisVisibility::GetUseTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisVisibility::PutUseTerrain ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTerrain(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMtoEntirety _IAgMtoAnalysisVisibility::GetEntirety ( ) {
    enum AgEMtoEntirety _result;
    HRESULT _hr = get_Entirety(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisVisibility::PutEntirety ( enum AgEMtoEntirety pEntirety ) {
    HRESULT _hr = put_Entirety(pEntirety);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEMtoObjectInterval _IAgMtoAnalysisVisibility::GetObjectInterval ( ) {
    enum AgEMtoObjectInterval _result;
    HRESULT _hr = get_ObjectInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisVisibility::PutObjectInterval ( enum AgEMtoObjectInterval pVal ) {
    HRESULT _hr = put_ObjectInterval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgMtoAnalysisVisibility::GetObjectData ( ) {
    int _result = 0;
    HRESULT _hr = get_ObjectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgMtoAnalysisVisibility::PutObjectData ( int pVal ) {
    HRESULT _hr = put_ObjectData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoAnalysisVisibility::IsTrackVisible ( int TrackId, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrackVisible(TrackId, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgMtoAnalysisVisibility::GetStkObjectPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StkObjectPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMtoAnalysisVisibility::PutStkObjectPath ( _bstr_t pRetVal ) {
    HRESULT _hr = put_StkObjectPath(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMtoAnalysisVisibility::AreTracksVisible ( enum AgEMtoTrackEval Eval, SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AreTracksVisible(Eval, TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgMtoAnalysisVisibility::ComputeTracks ( enum AgEMtoVisibilityMode Mode, SAFEARRAY * * TrackIds, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeTracks(Mode, TrackIds, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgMtoAnalysisVisibility::ComputeAllTracks ( enum AgEMtoVisibilityMode Mode, const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeAllTracks(Mode, Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeGPSAutoUpdateProperties wrapper method implementations
//

enum AgEVeGPSElemSelection IAgVeGPSAutoUpdateProperties::GetSelection ( ) {
    enum AgEVeGPSElemSelection _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGPSAutoUpdateProperties::PutSelection ( enum AgEVeGPSElemSelection pRetVal ) {
    HRESULT _hr = put_Selection(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGPSSwitchMethod IAgVeGPSAutoUpdateProperties::GetSwitchMethod ( ) {
    enum AgEVeGPSSwitchMethod _result;
    HRESULT _hr = get_SwitchMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGPSAutoUpdateProperties::PutSwitchMethod ( enum AgEVeGPSSwitchMethod pRetVal ) {
    HRESULT _hr = put_SwitchMethod(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgVeGPSElement wrapper method implementations
//

_variant_t IAgVeGPSElement::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

long IAgVeGPSElement::GetWeek ( ) {
    long _result = 0;
    HRESULT _hr = get_Week(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeGPSElement::GetTimeOfAlmanac ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeGPSElement::GetAge ( ) {
    double _result = 0;
    HRESULT _hr = get_Age(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeGPSElementCollection wrapper method implementations
//

long IAgVeGPSElementCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeGPSElementPtr IAgVeGPSElementCollection::GetItem ( long Index ) {
    struct IAgVeGPSElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSElementPtr(_result, false);
}

IUnknownPtr IAgVeGPSElementCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgVeGPSAutoUpdateFileSource wrapper method implementations
//

_bstr_t IAgVeGPSAutoUpdateFileSource::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGPSAutoUpdateFileSource::PutFilename ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Filename(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGPSElementCollectionPtr IAgVeGPSAutoUpdateFileSource::Preview ( ) {
    struct IAgVeGPSElementCollection * _result = 0;
    HRESULT _hr = raw_Preview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSElementCollectionPtr(_result, false);
}

//
// interface IAgVeGPSAutoUpdateOnlineSource wrapper method implementations
//

IAgVeGPSElementCollectionPtr IAgVeGPSAutoUpdateOnlineSource::Preview ( ) {
    struct IAgVeGPSElementCollection * _result = 0;
    HRESULT _hr = raw_Preview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSElementCollectionPtr(_result, false);
}

//
// interface IAgVeGPSAutoUpdate wrapper method implementations
//

enum AgEVeGPSAutoUpdateSource IAgVeGPSAutoUpdate::GetSelectedSource ( ) {
    enum AgEVeGPSAutoUpdateSource _result;
    HRESULT _hr = get_SelectedSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGPSAutoUpdate::PutSelectedSource ( enum AgEVeGPSAutoUpdateSource pRetVal ) {
    HRESULT _hr = put_SelectedSource(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGPSAutoUpdatePropertiesPtr IAgVeGPSAutoUpdate::GetProperties ( ) {
    struct IAgVeGPSAutoUpdateProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAutoUpdatePropertiesPtr(_result, false);
}

IAgVeGPSAutoUpdateFileSourcePtr IAgVeGPSAutoUpdate::GetFileSource ( ) {
    struct IAgVeGPSAutoUpdateFileSource * _result = 0;
    HRESULT _hr = get_FileSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAutoUpdateFileSourcePtr(_result, false);
}

IAgVeGPSAutoUpdateOnlineSourcePtr IAgVeGPSAutoUpdate::GetOnlineSource ( ) {
    struct IAgVeGPSAutoUpdateOnlineSource * _result = 0;
    HRESULT _hr = get_OnlineSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAutoUpdateOnlineSourcePtr(_result, false);
}

//
// interface IAgVeGPSAlmanacProperties wrapper method implementations
//

enum AgEVeGPSAlmanacType IAgVeGPSAlmanacProperties::GetType ( ) {
    enum AgEVeGPSAlmanacType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeGPSSpecifyAlmanac wrapper method implementations
//

_bstr_t IAgVeGPSSpecifyAlmanac::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeGPSSpecifyAlmanac::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGPSAlmanacPropertiesPtr IAgVeGPSSpecifyAlmanac::GetProperties ( ) {
    struct IAgVeGPSAlmanacProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAlmanacPropertiesPtr(_result, false);
}

//
// interface _IAgVePropagatorGPS wrapper method implementations
//

HRESULT _IAgVePropagatorGPS::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgVePropagatorGPS::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorGPS::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVePropagatorGPS::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVePropagatorGPS::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVePropagatorGPS::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorGPS::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVePropagatorGPS::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorGPS::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgVePropagatorGPS::GetPRN ( ) {
    long _result = 0;
    HRESULT _hr = get_PRN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorGPS::PutPRN ( long pVal ) {
    HRESULT _hr = put_PRN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVePropagatorGPS::GetAvailablePRNs ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePRNs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVePropagatorGPS::GetAutoUpdateEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdateEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVePropagatorGPS::PutAutoUpdateEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutoUpdateEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGPSAutoUpdatePtr _IAgVePropagatorGPS::GetAutoUpdate ( ) {
    struct IAgVeGPSAutoUpdate * _result = 0;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAutoUpdatePtr(_result, false);
}

IAgVeGPSSpecifyAlmanacPtr _IAgVePropagatorGPS::GetSpecifyCatalog ( ) {
    struct IAgVeGPSSpecifyAlmanac * _result = 0;
    HRESULT _hr = get_SpecifyCatalog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSSpecifyAlmanacPtr(_result, false);
}

//
// interface IAgVePropagatorGPS wrapper method implementations
//

HRESULT IAgVePropagatorGPS::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAgVePropagatorGPS::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorGPS::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVePropagatorGPS::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVePropagatorGPS::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVePropagatorGPS::GetStep ( ) {
    double _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorGPS::PutStep ( double pVal ) {
    HRESULT _hr = put_Step(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVePropagatorGPS::GetUseScenarioAnalysisTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseScenarioAnalysisTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorGPS::PutUseScenarioAnalysisTime ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseScenarioAnalysisTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IAgVePropagatorGPS::GetPRN ( ) {
    long _result = 0;
    HRESULT _hr = get_PRN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorGPS::PutPRN ( long pVal ) {
    HRESULT _hr = put_PRN(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgVePropagatorGPS::GetAvailablePRNs ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePRNs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVePropagatorGPS::GetAutoUpdateEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoUpdateEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePropagatorGPS::PutAutoUpdateEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutoUpdateEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGPSAutoUpdatePtr IAgVePropagatorGPS::GetAutoUpdate ( ) {
    struct IAgVeGPSAutoUpdate * _result = 0;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAutoUpdatePtr(_result, false);
}

IAgVeGPSSpecifyAlmanacPtr IAgVePropagatorGPS::GetSpecifyCatalog ( ) {
    struct IAgVeGPSSpecifyAlmanac * _result = 0;
    HRESULT _hr = get_SpecifyCatalog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSSpecifyAlmanacPtr(_result, false);
}

//
// interface _IAgAvailableFeatures wrapper method implementations
//

VARIANT_BOOL _IAgAvailableFeatures::IsPropagatorTypeAvailable ( enum AgEVePropagatorType PropagatorType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPropagatorTypeAvailable(PropagatorType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgAvailableFeatures::IsObjectTypeAvailable ( enum AgESTKObjectType ObjectType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectTypeAvailable(ObjectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVePropagatorSGP4CommonTasks wrapper method implementations
//

HRESULT _IAgVePropagatorSGP4CommonTasks::AddSegsFromFile ( _bstr_t SSCNumber, _bstr_t Filename ) {
    HRESULT _hr = raw_AddSegsFromFile(SSCNumber, Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVePropagatorSGP4CommonTasks::AddSegsFromOnlineSource ( _bstr_t SSCNum ) {
    HRESULT _hr = raw_AddSegsFromOnlineSource(SSCNum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVePropagatorSGP4CommonTasks::AddSegsFromSpaceTrack ( _bstr_t SSCNum, _bstr_t Username, _bstr_t Password ) {
    HRESULT _hr = raw_AddSegsFromSpaceTrack(SSCNum, Username, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgVeSGP4AutoUpdateProperties wrapper method implementations
//

enum AgEVeSGP4TLESelection _IAgVeSGP4AutoUpdateProperties::GetSelection ( ) {
    enum AgEVeSGP4TLESelection _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4AutoUpdateProperties::PutSelection ( enum AgEVeSGP4TLESelection pRetVal ) {
    HRESULT _hr = put_Selection(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSGP4SwitchMethod _IAgVeSGP4AutoUpdateProperties::GetSwitchMethod ( ) {
    enum AgEVeSGP4SwitchMethod _result;
    HRESULT _hr = get_SwitchMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4AutoUpdateProperties::PutSwitchMethod ( enum AgEVeSGP4SwitchMethod pRetVal ) {
    HRESULT _hr = put_SwitchMethod(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeSGP4AutoUpdateFileSource wrapper method implementations
//

_bstr_t _IAgVeSGP4AutoUpdateFileSource::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeSGP4AutoUpdateFileSource::PutFilename ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Filename(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeSGP4AutoUpdateFileSource::Preview ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Preview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeSGP4AutoUpdateOnlineSource wrapper method implementations
//

SAFEARRAY * _IAgVeSGP4AutoUpdateOnlineSource::Preview ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Preview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeSGP4AutoUpdate wrapper method implementations
//

enum AgEVeSGP4AutoUpdateSource _IAgVeSGP4AutoUpdate::GetSelectedSource ( ) {
    enum AgEVeSGP4AutoUpdateSource _result;
    HRESULT _hr = get_SelectedSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4AutoUpdate::PutSelectedSource ( enum AgEVeSGP4AutoUpdateSource pRetVal ) {
    HRESULT _hr = put_SelectedSource(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeSGP4AutoUpdatePropertiesPtr _IAgVeSGP4AutoUpdate::GetProperties ( ) {
    struct IAgVeSGP4AutoUpdateProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4AutoUpdatePropertiesPtr(_result, false);
}

IAgVeSGP4AutoUpdateFileSourcePtr _IAgVeSGP4AutoUpdate::GetFileSource ( ) {
    struct IAgVeSGP4AutoUpdateFileSource * _result = 0;
    HRESULT _hr = get_FileSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4AutoUpdateFileSourcePtr(_result, false);
}

IAgVeSGP4AutoUpdateOnlineSourcePtr _IAgVeSGP4AutoUpdate::GetOnlineSource ( ) {
    struct IAgVeSGP4AutoUpdateOnlineSource * _result = 0;
    HRESULT _hr = get_OnlineSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSGP4AutoUpdateOnlineSourcePtr(_result, false);
}

//
// interface _IAgVeSGP4PropagatorSettings wrapper method implementations
//

VARIANT_BOOL _IAgVeSGP4PropagatorSettings::GetUseSGP4OnePtInterpolation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSGP4OnePtInterpolation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4PropagatorSettings::PutUseSGP4OnePtInterpolation ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseSGP4OnePtInterpolation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSGP4PropagatorSettings::GetUseSGP4OnePtValidation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSGP4OnePtValidation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4PropagatorSettings::PutUseSGP4OnePtValidation ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseSGP4OnePtValidation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSGP4PropagatorSettings::GetUseSGP4OnePtWarning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSGP4OnePtWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSGP4PropagatorSettings::PutUseSGP4OnePtWarning ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseSGP4OnePtWarning(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGPSAutoUpdateProperties wrapper method implementations
//

enum AgEVeGPSElemSelection _IAgVeGPSAutoUpdateProperties::GetSelection ( ) {
    enum AgEVeGPSElemSelection _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGPSAutoUpdateProperties::PutSelection ( enum AgEVeGPSElemSelection pRetVal ) {
    HRESULT _hr = put_Selection(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeGPSSwitchMethod _IAgVeGPSAutoUpdateProperties::GetSwitchMethod ( ) {
    enum AgEVeGPSSwitchMethod _result;
    HRESULT _hr = get_SwitchMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGPSAutoUpdateProperties::PutSwitchMethod ( enum AgEVeGPSSwitchMethod pRetVal ) {
    HRESULT _hr = put_SwitchMethod(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeGPSAutoUpdateFileSource wrapper method implementations
//

_bstr_t _IAgVeGPSAutoUpdateFileSource::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGPSAutoUpdateFileSource::PutFilename ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Filename(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGPSElementCollectionPtr _IAgVeGPSAutoUpdateFileSource::Preview ( ) {
    struct IAgVeGPSElementCollection * _result = 0;
    HRESULT _hr = raw_Preview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSElementCollectionPtr(_result, false);
}

//
// interface _IAgVeGPSAutoUpdateOnlineSource wrapper method implementations
//

IAgVeGPSElementCollectionPtr _IAgVeGPSAutoUpdateOnlineSource::Preview ( ) {
    struct IAgVeGPSElementCollection * _result = 0;
    HRESULT _hr = raw_Preview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSElementCollectionPtr(_result, false);
}

//
// interface _IAgVeGPSAutoUpdate wrapper method implementations
//

enum AgEVeGPSAutoUpdateSource _IAgVeGPSAutoUpdate::GetSelectedSource ( ) {
    enum AgEVeGPSAutoUpdateSource _result;
    HRESULT _hr = get_SelectedSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGPSAutoUpdate::PutSelectedSource ( enum AgEVeGPSAutoUpdateSource pRetVal ) {
    HRESULT _hr = put_SelectedSource(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGPSAutoUpdatePropertiesPtr _IAgVeGPSAutoUpdate::GetProperties ( ) {
    struct IAgVeGPSAutoUpdateProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAutoUpdatePropertiesPtr(_result, false);
}

IAgVeGPSAutoUpdateFileSourcePtr _IAgVeGPSAutoUpdate::GetFileSource ( ) {
    struct IAgVeGPSAutoUpdateFileSource * _result = 0;
    HRESULT _hr = get_FileSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAutoUpdateFileSourcePtr(_result, false);
}

IAgVeGPSAutoUpdateOnlineSourcePtr _IAgVeGPSAutoUpdate::GetOnlineSource ( ) {
    struct IAgVeGPSAutoUpdateOnlineSource * _result = 0;
    HRESULT _hr = get_OnlineSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAutoUpdateOnlineSourcePtr(_result, false);
}

//
// interface _IAgVeGPSSpecifyAlmanac wrapper method implementations
//

_bstr_t _IAgVeGPSSpecifyAlmanac::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeGPSSpecifyAlmanac::PutFilename ( _bstr_t pVal ) {
    HRESULT _hr = put_Filename(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeGPSAlmanacPropertiesPtr _IAgVeGPSSpecifyAlmanac::GetProperties ( ) {
    struct IAgVeGPSAlmanacProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGPSAlmanacPropertiesPtr(_result, false);
}

//
// interface _IAgVeGPSAlmanacProperties wrapper method implementations
//

enum AgEVeGPSAlmanacType _IAgVeGPSAlmanacProperties::GetType ( ) {
    enum AgEVeGPSAlmanacType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeGPSAlmanacPropertiesSEM wrapper method implementations
//

enum AgEVeGPSAlmanacType _IAgVeGPSAlmanacPropertiesSEM::GetType ( ) {
    enum AgEVeGPSAlmanacType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long _IAgVeGPSAlmanacPropertiesSEM::GetAvgURA ( ) {
    long _result = 0;
    HRESULT _hr = get_AvgURA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long _IAgVeGPSAlmanacPropertiesSEM::GetAlmanacWeek ( ) {
    long _result = 0;
    HRESULT _hr = get_AlmanacWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEGPSReferenceWeek _IAgVeGPSAlmanacPropertiesSEM::GetReferenceWeek ( ) {
    enum AgEGPSReferenceWeek _result;
    HRESULT _hr = get_ReferenceWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGPSAlmanacPropertiesSEM::PutReferenceWeek ( enum AgEGPSReferenceWeek pVal ) {
    HRESULT _hr = put_ReferenceWeek(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGPSAlmanacPropertiesSEM::GetTimeOfAlmanac ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVeGPSAlmanacPropertiesSEM::GetDateOfAlmanac ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DateOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long _IAgVeGPSAlmanacPropertiesSEM::GetHealth ( ) {
    long _result = 0;
    HRESULT _hr = get_Health(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeGPSAlmanacPropertiesSEM wrapper method implementations
//

long IAgVeGPSAlmanacPropertiesSEM::GetAvgURA ( ) {
    long _result = 0;
    HRESULT _hr = get_AvgURA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IAgVeGPSAlmanacPropertiesSEM::GetAlmanacWeek ( ) {
    long _result = 0;
    HRESULT _hr = get_AlmanacWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEGPSReferenceWeek IAgVeGPSAlmanacPropertiesSEM::GetReferenceWeek ( ) {
    enum AgEGPSReferenceWeek _result;
    HRESULT _hr = get_ReferenceWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGPSAlmanacPropertiesSEM::PutReferenceWeek ( enum AgEGPSReferenceWeek pVal ) {
    HRESULT _hr = put_ReferenceWeek(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGPSAlmanacPropertiesSEM::GetTimeOfAlmanac ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgVeGPSAlmanacPropertiesSEM::GetDateOfAlmanac ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DateOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IAgVeGPSAlmanacPropertiesSEM::GetHealth ( ) {
    long _result = 0;
    HRESULT _hr = get_Health(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeGPSAlmanacPropertiesYUMA wrapper method implementations
//

enum AgEVeGPSAlmanacType _IAgVeGPSAlmanacPropertiesYUMA::GetType ( ) {
    enum AgEVeGPSAlmanacType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long _IAgVeGPSAlmanacPropertiesYUMA::GetWeekNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_WeekNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long _IAgVeGPSAlmanacPropertiesYUMA::GetAlmanacWeek ( ) {
    long _result = 0;
    HRESULT _hr = get_AlmanacWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEGPSReferenceWeek _IAgVeGPSAlmanacPropertiesYUMA::GetReferenceWeek ( ) {
    enum AgEGPSReferenceWeek _result;
    HRESULT _hr = get_ReferenceWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeGPSAlmanacPropertiesYUMA::PutReferenceWeek ( enum AgEGPSReferenceWeek pVal ) {
    HRESULT _hr = put_ReferenceWeek(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeGPSAlmanacPropertiesYUMA::GetTimeOfAlmanac ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVeGPSAlmanacPropertiesYUMA::GetDateOfAlmanac ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DateOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long _IAgVeGPSAlmanacPropertiesYUMA::GetHealth ( ) {
    long _result = 0;
    HRESULT _hr = get_Health(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeGPSAlmanacPropertiesYUMA wrapper method implementations
//

long IAgVeGPSAlmanacPropertiesYUMA::GetWeekNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_WeekNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IAgVeGPSAlmanacPropertiesYUMA::GetAlmanacWeek ( ) {
    long _result = 0;
    HRESULT _hr = get_AlmanacWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEGPSReferenceWeek IAgVeGPSAlmanacPropertiesYUMA::GetReferenceWeek ( ) {
    enum AgEGPSReferenceWeek _result;
    HRESULT _hr = get_ReferenceWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeGPSAlmanacPropertiesYUMA::PutReferenceWeek ( enum AgEGPSReferenceWeek pVal ) {
    HRESULT _hr = put_ReferenceWeek(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeGPSAlmanacPropertiesYUMA::GetTimeOfAlmanac ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgVeGPSAlmanacPropertiesYUMA::GetDateOfAlmanac ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DateOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IAgVeGPSAlmanacPropertiesYUMA::GetHealth ( ) {
    long _result = 0;
    HRESULT _hr = get_Health(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeGPSAlmanacPropertiesSP3 wrapper method implementations
//

enum AgEVeGPSAlmanacType _IAgVeGPSAlmanacPropertiesSP3::GetType ( ) {
    enum AgEVeGPSAlmanacType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long _IAgVeGPSAlmanacPropertiesSP3::GetAlmanacWeek ( ) {
    long _result = 0;
    HRESULT _hr = get_AlmanacWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeGPSAlmanacPropertiesSP3::GetTimeOfAlmanac ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgVeGPSAlmanacPropertiesSP3::GetDateOfAlmanac ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DateOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgVeGPSAlmanacPropertiesSP3 wrapper method implementations
//

long IAgVeGPSAlmanacPropertiesSP3::GetAlmanacWeek ( ) {
    long _result = 0;
    HRESULT _hr = get_AlmanacWeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeGPSAlmanacPropertiesSP3::GetTimeOfAlmanac ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgVeGPSAlmanacPropertiesSP3::GetDateOfAlmanac ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DateOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgVeGPSElement wrapper method implementations
//

_variant_t _IAgVeGPSElement::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

long _IAgVeGPSElement::GetWeek ( ) {
    long _result = 0;
    HRESULT _hr = get_Week(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeGPSElement::GetTimeOfAlmanac ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeOfAlmanac(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeGPSElement::GetAge ( ) {
    double _result = 0;
    HRESULT _hr = get_Age(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgSpEnvRadEnergyMethodSpecify wrapper method implementations
//

STKUtil::IAgDoublesCollectionPtr _IAgSpEnvRadEnergyMethodSpecify::GetElectronEnergies ( ) {
    struct STKUtil::IAgDoublesCollection * _result = 0;
    HRESULT _hr = get_ElectronEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDoublesCollectionPtr(_result, false);
}

STKUtil::IAgDoublesCollectionPtr _IAgSpEnvRadEnergyMethodSpecify::GetProtonEnergies ( ) {
    struct STKUtil::IAgDoublesCollection * _result = 0;
    HRESULT _hr = get_ProtonEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDoublesCollectionPtr(_result, false);
}

//
// interface _IAgSpEnvRadEnergyValues wrapper method implementations
//

VARIANT_BOOL _IAgSpEnvRadEnergyValues::GetUseDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvRadEnergyValues::PutUseDefault ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseDefault(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSpEnvRadEnergyMethodSpecifyPtr _IAgSpEnvRadEnergyValues::GetCustom ( ) {
    struct IAgSpEnvRadEnergyMethodSpecify * _result = 0;
    HRESULT _hr = get_Custom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvRadEnergyMethodSpecifyPtr(_result, false);
}

//
// interface _IAgSpEnvRadiationEnvironment wrapper method implementations
//

enum AgESpEnvCrresProtonActivity _IAgSpEnvRadiationEnvironment::GetCrresProtonActivity ( ) {
    enum AgESpEnvCrresProtonActivity _result;
    HRESULT _hr = get_CrresProtonActivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvRadiationEnvironment::PutCrresProtonActivity ( enum AgESpEnvCrresProtonActivity pVal ) {
    HRESULT _hr = put_CrresProtonActivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvCrresRadiationActivity _IAgSpEnvRadiationEnvironment::GetCrresRadiationActivity ( ) {
    enum AgESpEnvCrresRadiationActivity _result;
    HRESULT _hr = get_CrresRadiationActivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvRadiationEnvironment::PutCrresRadiationActivity ( enum AgESpEnvCrresRadiationActivity pVal ) {
    HRESULT _hr = put_CrresRadiationActivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSpEnvRadEnergyValuesPtr _IAgSpEnvRadiationEnvironment::GetNasaEnergyValues ( ) {
    struct IAgSpEnvRadEnergyValues * _result = 0;
    HRESULT _hr = get_NasaEnergyValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvRadEnergyValuesPtr(_result, false);
}

SAFEARRAY * _IAgSpEnvRadiationEnvironment::GetCrresElectronEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetCrresElectronEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSpEnvRadiationEnvironment::GetCrresProtonEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetCrresProtonEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSpEnvRadiationEnvironment::GetNasaElectronEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetNasaElectronEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSpEnvRadiationEnvironment::GetNasaProtonEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetNasaProtonEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgESpEnvNasaModelsActivity _IAgSpEnvRadiationEnvironment::GetNasaModelsActivity ( ) {
    enum AgESpEnvNasaModelsActivity _result;
    HRESULT _hr = get_NasaModelsActivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvRadiationEnvironment::PutNasaModelsActivity ( enum AgESpEnvNasaModelsActivity pVal ) {
    HRESULT _hr = put_NasaModelsActivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSpEnvMagFieldGfx wrapper method implementations
//

VARIANT_BOOL _IAgSpEnvMagFieldGfx::GetIsMagFieldVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMagFieldVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutIsMagFieldVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsMagFieldVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagFieldColorMode _IAgSpEnvMagFieldGfx::GetColorMode ( ) {
    enum AgESpEnvMagFieldColorMode _result;
    HRESULT _hr = get_ColorMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutColorMode ( enum AgESpEnvMagFieldColorMode pVal ) {
    HRESULT _hr = put_ColorMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagFieldColorScale _IAgSpEnvMagFieldGfx::GetColorScale ( ) {
    enum AgESpEnvMagFieldColorScale _result;
    HRESULT _hr = get_ColorScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutColorScale ( enum AgESpEnvMagFieldColorScale pVal ) {
    HRESULT _hr = put_ColorScale(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSpEnvMagFieldGfx::GetFieldLineRefresh ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldLineRefresh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutFieldLineRefresh ( double pVal ) {
    HRESULT _hr = put_FieldLineRefresh(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgSpEnvMagFieldGfx::GetColorRampStart ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ColorRampStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutColorRampStart ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ColorRampStart(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgSpEnvMagFieldGfx::GetColorRampStop ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ColorRampStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutColorRampStop ( OLE_COLOR pVal ) {
    HRESULT _hr = put_ColorRampStop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgSpEnvMagFieldGfx::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgSpEnvMagFieldGfx::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSpEnvMagFieldGfx::GetRefLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_RefLongitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutRefLongitude ( double pVal ) {
    HRESULT _hr = put_RefLongitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagFieldLineMode _IAgSpEnvMagFieldGfx::GetFieldLineMode ( ) {
    enum AgESpEnvMagFieldLineMode _result;
    HRESULT _hr = get_FieldLineMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutFieldLineMode ( enum AgESpEnvMagFieldLineMode pVal ) {
    HRESULT _hr = put_FieldLineMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSpEnvMagFieldGfx::GetStartLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_StartLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutStartLatitude ( double pVal ) {
    HRESULT _hr = put_StartLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSpEnvMagFieldGfx::GetStopLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_StopLatitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutStopLatitude ( double pVal ) {
    HRESULT _hr = put_StopLatitude(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgSpEnvMagFieldGfx::GetNumFieldLines ( ) {
    long _result = 0;
    HRESULT _hr = get_NumFieldLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutNumFieldLines ( long pVal ) {
    HRESULT _hr = put_NumFieldLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long _IAgSpEnvMagFieldGfx::GetNumLongitudes ( ) {
    long _result = 0;
    HRESULT _hr = get_NumLongitudes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutNumLongitudes ( long pVal ) {
    HRESULT _hr = put_NumLongitudes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagneticMainField _IAgSpEnvMagFieldGfx::GetMainField ( ) {
    enum AgESpEnvMagneticMainField _result;
    HRESULT _hr = get_MainField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutMainField ( enum AgESpEnvMagneticMainField pVal ) {
    HRESULT _hr = put_MainField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagneticExternalField _IAgSpEnvMagFieldGfx::GetExternalField ( ) {
    enum AgESpEnvMagneticExternalField _result;
    HRESULT _hr = get_ExternalField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutExternalField ( enum AgESpEnvMagneticExternalField pVal ) {
    HRESULT _hr = put_ExternalField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSpEnvMagFieldGfx::GetIGRF_UpdateRate ( ) {
    double _result = 0;
    HRESULT _hr = get_IGRF_UpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutIGRF_UpdateRate ( double pVal ) {
    HRESULT _hr = put_IGRF_UpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgSpEnvMagFieldGfx::ComputeBField ( const _variant_t & Time, double Lat, double Lon, double Alt, double * pBx, double * pBy, double * pBz ) {
    HRESULT _hr = raw_ComputeBField(Time, Lat, Lon, Alt, pBx, pBy, pBz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgSpEnvMagFieldGfx::ComputeBFieldAsArray ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeBFieldAsArray(Time, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgSpEnvMagFieldGfx::ComputeDipoleL ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeDipoleL(Time, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgSpEnvMagFieldGfx::ComputeMcIlwainL ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeMcIlwainL(Time, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgSpEnvMagFieldGfx::ComputeBBeq ( const _variant_t & Time, double Lat, double Lon, double Alt ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeBBeq(Time, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgSpEnvMagFieldGfx::GetMaxTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvMagFieldGfx::PutMaxTranslucency ( double pRetVal ) {
    HRESULT _hr = put_MaxTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgSpEnvScenExtVO wrapper method implementations
//

IAgSpEnvMagFieldGfxPtr _IAgSpEnvScenExtVO::GetMagneticField ( ) {
    struct IAgSpEnvMagFieldGfx * _result = 0;
    HRESULT _hr = get_MagneticField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvMagFieldGfxPtr(_result, false);
}

//
// interface _IAgSpEnvScenSpaceEnvironment wrapper method implementations
//

IAgSpEnvRadiationEnvironmentPtr _IAgSpEnvScenSpaceEnvironment::GetRadiationEnvironment ( ) {
    struct IAgSpEnvRadiationEnvironment * _result = 0;
    HRESULT _hr = get_RadiationEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvRadiationEnvironmentPtr(_result, false);
}

IAgSpEnvScenExtVOPtr _IAgSpEnvScenSpaceEnvironment::GetVO ( ) {
    struct IAgSpEnvScenExtVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvScenExtVOPtr(_result, false);
}

double _IAgSpEnvScenSpaceEnvironment::ComputeSAAFluxIntensity ( enum AgESpEnvSAAChannel Channel, double Lat, double Lon, double Alt ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeSAAFluxIntensity(Channel, Lat, Lon, Alt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeSpEnvRadDoseRateElement wrapper method implementations
//

double _IAgVeSpEnvRadDoseRateElement::GetShieldingThickness ( ) {
    double _result = 0;
    HRESULT _hr = get_ShieldingThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeSpEnvRadDoseRateElement::GetIsElectronDoseRateValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsElectronDoseRateValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvRadDoseRateElement::ElectronDoseRate ( ) {
    double _result = 0;
    HRESULT _hr = raw_ElectronDoseRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeSpEnvRadDoseRateElement::GetIsElectronBremsstrahlungDoseRateValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsElectronBremsstrahlungDoseRateValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvRadDoseRateElement::ElectronBremsstrahlungDoseRate ( ) {
    double _result = 0;
    HRESULT _hr = raw_ElectronBremsstrahlungDoseRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeSpEnvRadDoseRateElement::GetIsProtonDoseRateValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsProtonDoseRateValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvRadDoseRateElement::ProtonDoseRate ( ) {
    double _result = 0;
    HRESULT _hr = raw_ProtonDoseRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeSpEnvRadDoseRateElement::GetIsTotalDoseRateValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTotalDoseRateValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvRadDoseRateElement::TotalDoseRate ( ) {
    double _result = 0;
    HRESULT _hr = raw_TotalDoseRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgSpEnvSAAContour wrapper method implementations
//

enum AgESpEnvSAAChannel _IAgSpEnvSAAContour::GetChannel ( ) {
    enum AgESpEnvSAAChannel _result;
    HRESULT _hr = get_Channel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvSAAContour::PutChannel ( enum AgESpEnvSAAChannel pVal ) {
    HRESULT _hr = put_Channel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvSAAFluxLevel _IAgSpEnvSAAContour::GetFluxLevel ( ) {
    enum AgESpEnvSAAFluxLevel _result;
    HRESULT _hr = get_FluxLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSpEnvSAAContour::PutFluxLevel ( enum AgESpEnvSAAFluxLevel pVal ) {
    HRESULT _hr = put_FluxLevel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSpEnvSAAContour::ComputeSAAFluxIntensity ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeSAAFluxIntensity(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeSpEnvVehTemperature wrapper method implementations
//

double _IAgVeSpEnvVehTemperature::GetEarthAlbedo ( ) {
    double _result = 0;
    HRESULT _hr = get_EarthAlbedo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvVehTemperature::PutEarthAlbedo ( double pVal ) {
    HRESULT _hr = put_EarthAlbedo(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvVehTemperature::GetMaterialEmissivity ( ) {
    double _result = 0;
    HRESULT _hr = get_MaterialEmissivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvVehTemperature::PutMaterialEmissivity ( double pVal ) {
    HRESULT _hr = put_MaterialEmissivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvVehTemperature::GetMaterialAbsorptivity ( ) {
    double _result = 0;
    HRESULT _hr = get_MaterialAbsorptivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvVehTemperature::PutMaterialAbsorptivity ( double pVal ) {
    HRESULT _hr = put_MaterialAbsorptivity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvVehTemperature::GetDissipation ( ) {
    double _result = 0;
    HRESULT _hr = get_Dissipation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvVehTemperature::PutDissipation ( double pVal ) {
    HRESULT _hr = put_Dissipation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvVehTemperature::GetCrossSectionalArea ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossSectionalArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvVehTemperature::PutCrossSectionalArea ( double pVal ) {
    HRESULT _hr = put_CrossSectionalArea(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSpEnvShapeModel _IAgVeSpEnvVehTemperature::GetShapeModel ( ) {
    enum AgEVeSpEnvShapeModel _result;
    HRESULT _hr = get_ShapeModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvVehTemperature::PutShapeModel ( enum AgEVeSpEnvShapeModel pVal ) {
    HRESULT _hr = put_ShapeModel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeSpEnvVehTemperature::GetNormalVector ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NormalVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeSpEnvVehTemperature::PutNormalVector ( _bstr_t pVal ) {
    HRESULT _hr = put_NormalVector(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvVehTemperature::ComputeTemperature ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeTemperature(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeSpEnvParticleFlux wrapper method implementations
//

enum AgEVeSpEnvF10p7Source _IAgVeSpEnvParticleFlux::GetF10p7Source ( ) {
    enum AgEVeSpEnvF10p7Source _result;
    HRESULT _hr = get_F10p7Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvParticleFlux::PutF10p7Source ( enum AgEVeSpEnvF10p7Source pVal ) {
    HRESULT _hr = put_F10p7Source(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvParticleFlux::GetF10p7 ( ) {
    double _result = 0;
    HRESULT _hr = get_F10p7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvParticleFlux::PutF10p7 ( double pVal ) {
    HRESULT _hr = put_F10p7(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSpEnvMaterial _IAgVeSpEnvParticleFlux::GetMaterial ( ) {
    enum AgEVeSpEnvMaterial _result;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvParticleFlux::PutMaterial ( enum AgEVeSpEnvMaterial pVal ) {
    HRESULT _hr = put_Material(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvParticleFlux::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvParticleFlux::PutArea ( double pVal ) {
    HRESULT _hr = put_Area(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvParticleFlux::GetPitDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_PitDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvParticleFlux::PutPitDepth ( double pVal ) {
    HRESULT _hr = put_PitDepth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSpEnvParticleFlux::GetUseSporadicMeteors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSporadicMeteors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvParticleFlux::PutUseSporadicMeteors ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSporadicMeteors(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvParticleFlux::GetMaterialDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_MaterialDensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvParticleFlux::PutMaterialDensity ( double pVal ) {
    HRESULT _hr = put_MaterialDensity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvParticleFlux::GetTensileStrength ( ) {
    double _result = 0;
    HRESULT _hr = get_TensileStrength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvParticleFlux::PutTensileStrength ( double pVal ) {
    HRESULT _hr = put_TensileStrength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeSpEnvParticleFlux::GetFluxFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FluxFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeSpEnvParticleFlux::PutFluxFile ( _bstr_t pVal ) {
    HRESULT _hr = put_FluxFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeSpEnvParticleFlux::GetParticleMassArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetParticleMassArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvParticleFlux::ComputeMeteorImpactFlux ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeMeteorImpactFlux(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvParticleFlux::ComputeMeteorDamageImpactFlux ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeMeteorDamageImpactFlux(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSpEnvParticleFlux::ComputeMeteorImpactFluxDistribution ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeMeteorImpactFluxDistribution(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSpEnvParticleFlux::ComputeMeteorDamageImpactFluxDistribution ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeMeteorDamageImpactFluxDistribution(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvParticleFlux::ComputeDebrisImpactFlux ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeDebrisImpactFlux(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvParticleFlux::ComputeDebrisDamageImpactFlux ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeDebrisDamageImpactFlux(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSpEnvParticleFlux::ComputeDebrisImpactFluxDistribution ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeDebrisImpactFluxDistribution(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSpEnvParticleFlux::ComputeDebrisDamageImpactFluxDistribution ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeDebrisDamageImpactFluxDistribution(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeSpEnvMagneticField wrapper method implementations
//

enum AgESpEnvMagneticMainField _IAgVeSpEnvMagneticField::GetMainField ( ) {
    enum AgESpEnvMagneticMainField _result;
    HRESULT _hr = get_MainField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvMagneticField::PutMainField ( enum AgESpEnvMagneticMainField pVal ) {
    HRESULT _hr = put_MainField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESpEnvMagneticExternalField _IAgVeSpEnvMagneticField::GetExternalField ( ) {
    enum AgESpEnvMagneticExternalField _result;
    HRESULT _hr = get_ExternalField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvMagneticField::PutExternalField ( enum AgESpEnvMagneticExternalField pVal ) {
    HRESULT _hr = put_ExternalField(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvMagneticField::GetIGRF_UpdateRate ( ) {
    double _result = 0;
    HRESULT _hr = get_IGRF_UpdateRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvMagneticField::PutIGRF_UpdateRate ( double pVal ) {
    HRESULT _hr = put_IGRF_UpdateRate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgVeSpEnvMagneticField::ComputeBField ( const _variant_t & Time, double * pBx, double * pBy, double * pBz ) {
    HRESULT _hr = raw_ComputeBField(Time, pBx, pBy, pBz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgVeSpEnvMagneticField::ComputeBFieldAsArray ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeBFieldAsArray(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvMagneticField::ComputeDipoleL ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeDipoleL(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvMagneticField::ComputeMcIlwainL ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeMcIlwainL(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeSpEnvMagneticField::ComputeBBeq ( const _variant_t & Time ) {
    double _result = 0;
    HRESULT _hr = raw_ComputeBBeq(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeSpEnvRadiation wrapper method implementations
//

enum AgEVeSpEnvComputationMode _IAgVeSpEnvRadiation::GetComputationMode ( ) {
    enum AgEVeSpEnvComputationMode _result;
    HRESULT _hr = get_ComputationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutComputationMode ( enum AgEVeSpEnvComputationMode pVal ) {
    HRESULT _hr = put_ComputationMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeSpEnvRadiation::GetFluxStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FluxStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEVeSpEnvDoseChannel _IAgVeSpEnvRadiation::GetDoseChannel ( ) {
    enum AgEVeSpEnvDoseChannel _result;
    HRESULT _hr = get_DoseChannel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutDoseChannel ( enum AgEVeSpEnvDoseChannel pVal ) {
    HRESULT _hr = put_DoseChannel(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSpEnvRadiation::GetUseNuclearAttenuation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseNuclearAttenuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutUseNuclearAttenuation ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseNuclearAttenuation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEVeSpEnvDetectorType _IAgVeSpEnvRadiation::GetDetectorType ( ) {
    enum AgEVeSpEnvDetectorType _result;
    HRESULT _hr = get_DetectorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutDetectorType ( enum AgEVeSpEnvDetectorType pVal ) {
    HRESULT _hr = put_DetectorType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDoublesCollectionPtr _IAgVeSpEnvRadiation::GetShieldingThicknesses ( ) {
    struct STKUtil::IAgDoublesCollection * _result = 0;
    HRESULT _hr = get_ShieldingThicknesses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDoublesCollectionPtr(_result, false);
}

enum AgEVeSpEnvApSource _IAgVeSpEnvRadiation::GetApSource ( ) {
    enum AgEVeSpEnvApSource _result;
    HRESULT _hr = get_ApSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutApSource ( enum AgEVeSpEnvApSource pVal ) {
    HRESULT _hr = put_ApSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvRadiation::GetAp ( ) {
    double _result = 0;
    HRESULT _hr = get_Ap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutAp ( double pVal ) {
    HRESULT _hr = put_Ap(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgVeSpEnvRadiation::GetFluxFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FluxFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeSpEnvRadiation::PutFluxFile ( _bstr_t pVal ) {
    HRESULT _hr = put_FluxFile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSpEnvRadiation::GetIncludeNuclearAttenNeutrons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeNuclearAttenNeutrons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutIncludeNuclearAttenNeutrons ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IncludeNuclearAttenNeutrons(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeSpEnvRadiation::GetElectronEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetElectronEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSpEnvRadiation::GetProtonEnergies ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetProtonEnergies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSpEnvRadiation::ComputeElectronFluxes ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeElectronFluxes(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSpEnvRadiation::ComputeProtonFluxes ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeProtonFluxes(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeSpEnvRadDoseRateCollectionPtr _IAgVeSpEnvRadiation::ComputeDoseRates ( const _variant_t & Time ) {
    struct IAgVeSpEnvRadDoseRateCollection * _result = 0;
    HRESULT _hr = raw_ComputeDoseRates(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvRadDoseRateCollectionPtr(_result, false);
}

enum AgEVeSpEnvDetectorGeometry _IAgVeSpEnvRadiation::GetDetectorGeometry ( ) {
    enum AgEVeSpEnvDetectorGeometry _result;
    HRESULT _hr = get_DetectorGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutDetectorGeometry ( enum AgEVeSpEnvDetectorGeometry pVal ) {
    HRESULT _hr = put_DetectorGeometry(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgVeSpEnvRadiation::ComputeElectronIntegralFluxes ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeElectronIntegralFluxes(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeSpEnvRadiation::ComputeProtonIntegralFluxes ( const _variant_t & Time ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ComputeProtonIntegralFluxes(Time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgVeSpEnvRadiation::GetUseModelEpoch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseModelEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutUseModelEpoch ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseModelEpoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSpEnvRadiation::GetShiftSAA ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShiftSAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutShiftSAA ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShiftSAA(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvRadiation::GetDoseIntegrationStep ( ) {
    double _result = 0;
    HRESULT _hr = get_DoseIntegrationStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutDoseIntegrationStep ( double pVal ) {
    HRESULT _hr = put_DoseIntegrationStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeSpEnvRadiation::GetDoseReportStep ( ) {
    double _result = 0;
    HRESULT _hr = get_DoseReportStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvRadiation::PutDoseReportStep ( double pVal ) {
    HRESULT _hr = put_DoseReportStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeSpEnvMagFieldLine wrapper method implementations
//

VARIANT_BOOL _IAgVeSpEnvMagFieldLine::GetIs2DVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Is2DVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvMagFieldLine::PutIs2DVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Is2DVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSpEnvMagFieldLine::GetIs3DVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Is3DVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvMagFieldLine::PutIs3DVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Is3DVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgVeSpEnvMagFieldLine::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvMagFieldLine::PutColor ( OLE_COLOR pVal ) {
    HRESULT _hr = put_Color(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum STKUtil::AgELineStyle _IAgVeSpEnvMagFieldLine::GetLineStyle ( ) {
    enum STKUtil::AgELineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvMagFieldLine::PutLineStyle ( enum STKUtil::AgELineStyle pVal ) {
    HRESULT _hr = put_LineStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgELineWidth _IAgVeSpEnvMagFieldLine::GetLineWidth ( ) {
    enum AgELineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvMagFieldLine::PutLineWidth ( enum AgELineWidth pVal ) {
    HRESULT _hr = put_LineWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeSpEnvMagFieldLine::GetLabelVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LabelVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeSpEnvMagFieldLine::PutLabelVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_LabelVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgVeSpEnvGraphics wrapper method implementations
//

IAgVeSpEnvMagFieldLinePtr _IAgVeSpEnvGraphics::GetMagFieldLine ( ) {
    struct IAgVeSpEnvMagFieldLine * _result = 0;
    HRESULT _hr = get_MagFieldLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvMagFieldLinePtr(_result, false);
}

//
// interface _IAgVeSpEnvSpaceEnvironment wrapper method implementations
//

IAgSpEnvSAAContourPtr _IAgVeSpEnvSpaceEnvironment::GetSAAContour ( ) {
    struct IAgSpEnvSAAContour * _result = 0;
    HRESULT _hr = get_SAAContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvSAAContourPtr(_result, false);
}

IAgVeSpEnvMagneticFieldPtr _IAgVeSpEnvSpaceEnvironment::GetMagneticField ( ) {
    struct IAgVeSpEnvMagneticField * _result = 0;
    HRESULT _hr = get_MagneticField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvMagneticFieldPtr(_result, false);
}

IAgVeSpEnvVehTemperaturePtr _IAgVeSpEnvSpaceEnvironment::GetVehTemperature ( ) {
    struct IAgVeSpEnvVehTemperature * _result = 0;
    HRESULT _hr = get_VehTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvVehTemperaturePtr(_result, false);
}

IAgVeSpEnvParticleFluxPtr _IAgVeSpEnvSpaceEnvironment::GetParticleFlux ( ) {
    struct IAgVeSpEnvParticleFlux * _result = 0;
    HRESULT _hr = get_ParticleFlux(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvParticleFluxPtr(_result, false);
}

IAgVeSpEnvRadiationPtr _IAgVeSpEnvSpaceEnvironment::GetRadiation ( ) {
    struct IAgVeSpEnvRadiation * _result = 0;
    HRESULT _hr = get_Radiation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvRadiationPtr(_result, false);
}

IAgVeSpEnvGraphicsPtr _IAgVeSpEnvSpaceEnvironment::GetGraphics ( ) {
    struct IAgVeSpEnvGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvGraphicsPtr(_result, false);
}

//
// interface _IAgCvSelectedGridPoint wrapper method implementations
//

_variant_t _IAgCvSelectedGridPoint::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t _IAgCvSelectedGridPoint::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

SAFEARRAY * _IAgCvSelectedGridPoint::GetIntervals ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgCvSelectedGridPoint wrapper method implementations
//

_variant_t IAgCvSelectedGridPoint::GetLatitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAgCvSelectedGridPoint::GetLongitude ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

SAFEARRAY * IAgCvSelectedGridPoint::GetIntervals ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgCelestialBodyInfo wrapper method implementations
//

_bstr_t _IAgCelestialBodyInfo::GetIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Identifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgCelestialBodyInfo::GetCatalogName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CatalogName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double _IAgCelestialBodyInfo::GetRA ( ) {
    double _result = 0;
    HRESULT _hr = get_RA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgCelestialBodyInfo::GetDec ( ) {
    double _result = 0;
    HRESULT _hr = get_Dec(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgCelestialBodyInfo::GetParallax ( ) {
    double _result = 0;
    HRESULT _hr = get_Parallax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgCelestialBodyInfo::GetVelocity ( ) {
    double _result = 0;
    HRESULT _hr = get_Velocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgCelestialBodyInfo::GetVisualMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_VisualMagnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgCelestialBodyInfo::GetBminusV ( ) {
    double _result = 0;
    HRESULT _hr = get_BminusV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgCelestialBodyInfo::GetEffectiveTemperature ( ) {
    double _result = 0;
    HRESULT _hr = get_EffectiveTemperature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgCelestialBodyInfo::GetMagnitudeToIrradianceConversionFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_MagnitudeToIrradianceConversionFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

STKUtil::IAgCartesian3VectorPtr _IAgCelestialBodyInfo::GetLastComputedDirectionInICRF ( ) {
    struct STKUtil::IAgCartesian3Vector * _result = 0;
    HRESULT _hr = raw_GetLastComputedDirectionInICRF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgCartesian3VectorPtr(_result, false);
}

//
// interface _IAgStkCentralBodyEllipsoid wrapper method implementations
//

double _IAgStkCentralBodyEllipsoid::GetA ( ) {
    double _result = 0;
    HRESULT _hr = get_A(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkCentralBodyEllipsoid::GetB ( ) {
    double _result = 0;
    HRESULT _hr = get_B(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkCentralBodyEllipsoid::GetC ( ) {
    double _result = 0;
    HRESULT _hr = get_C(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkCentralBodyEllipsoid::GetMeanRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MeanRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkCentralBodyEllipsoid::GetVolumetricRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_VolumetricRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkCentralBody wrapper method implementations
//

_bstr_t _IAgStkCentralBody::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkCentralBodyEllipsoidPtr _IAgStkCentralBody::GetEllipsoid ( ) {
    struct IAgStkCentralBodyEllipsoid * _result = 0;
    HRESULT _hr = get_Ellipsoid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkCentralBodyEllipsoidPtr(_result, false);
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgStkCentralBody::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgStkObject wrapper method implementations
//

IAgStkObjectPtr _IAgStkObject::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgStkObject::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkObject::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkObject::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgStkObject::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkObject::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgStkObject::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgStkObject::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgStkObject::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgStkObject::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgStkObject::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkObject::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkObject::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkObject::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkObject::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkObject::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgStkObject::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgStkObject::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgStkObject::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgStkObject::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgStkObject::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAccessConstraintCollectionPtr _IAgStkObject::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgOnePtAccessPtr _IAgStkObject::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgStkObject::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkObject::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkObject::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgStkObject::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface IAgStkObject wrapper method implementations
//

IAgStkObjectPtr IAgStkObject::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t IAgStkObject::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgStkObject::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgStkObject::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType IAgStkObject::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgStkObject::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr IAgStkObject::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT IAgStkObject::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr IAgStkObject::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr IAgStkObject::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t IAgStkObject::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgStkObject::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgStkObject::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgStkObject::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkObject::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkObject::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr IAgStkObject::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL IAgStkObject::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr IAgStkObject::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr IAgStkObject::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgStkObject::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgOnePtAccessPtr IAgStkObject::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * IAgStkObject::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkObject::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkObject::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr IAgStkObject::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface IAgStkObjectElementCollection wrapper method implementations
//

long IAgStkObjectElementCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectPtr IAgStkObjectElementCollection::GetItem ( const _variant_t & Index ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

IUnknownPtr IAgStkObjectElementCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL IAgStkObjectElementCollection::Contains ( _bstr_t InstName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(InstName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkObjectCollection wrapper method implementations
//

long IAgStkObjectCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectPtr IAgStkObjectCollection::GetItem ( const _variant_t & Index ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

IUnknownPtr IAgStkObjectCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgStkObjectPtr IAgStkObjectCollection::New ( enum AgESTKObjectType EClassType, _bstr_t InstName ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = raw_New(EClassType, InstName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

HRESULT IAgStkObjectCollection::Unload ( enum AgESTKObjectType EClassType, _bstr_t InstName ) {
    HRESULT _hr = raw_Unload(EClassType, InstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectElementCollectionPtr IAgStkObjectCollection::GetElements ( enum AgESTKObjectType EClassType ) {
    struct IAgStkObjectElementCollection * _result = 0;
    HRESULT _hr = raw_GetElements(EClassType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectElementCollectionPtr(_result, false);
}

HRESULT IAgStkObjectCollection::Import ( _bstr_t FilePath ) {
    HRESULT _hr = raw_Import(FilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectPtr IAgStkObjectCollection::NewOnCentralBody ( enum AgESTKObjectType EClassType, _bstr_t InstName, _bstr_t CentralBodyName ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = raw_NewOnCentralBody(EClassType, InstName, CentralBodyName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

SAFEARRAY * IAgStkObjectCollection::GetSupportedChildTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SupportedChildTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkObjectCollection::Contains ( enum AgESTKObjectType EClassType, _bstr_t InstName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(EClassType, InstName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectPtr IAgStkObjectCollection::ImportObject ( _bstr_t FilePath ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = raw_ImportObject(FilePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

//
// interface IAgStkObjectRoot wrapper method implementations
//

STKUtil::IAgExecCmdResultPtr IAgStkObjectRoot::ExecuteCommand ( _bstr_t ConnectCommand ) {
    struct STKUtil::IAgExecCmdResult * _result = 0;
    HRESULT _hr = raw_ExecuteCommand(ConnectCommand, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgExecCmdResultPtr(_result, false);
}

HRESULT IAgStkObjectRoot::LoadScenario ( _bstr_t Path ) {
    HRESULT _hr = raw_LoadScenario(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkObjectRoot::CloseScenario ( ) {
    HRESULT _hr = raw_CloseScenario();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkObjectRoot::NewScenario ( _bstr_t ScenarioName ) {
    HRESULT _hr = raw_NewScenario(ScenarioName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkObjectRoot::SaveScenario ( ) {
    HRESULT _hr = raw_SaveScenario();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkObjectRoot::SaveScenarioAs ( _bstr_t ScFileName ) {
    HRESULT _hr = raw_SaveScenarioAs(ScFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

STKUtil::IAgUnitPrefsDimCollectionPtr IAgStkObjectRoot::GetUnitPreferences ( ) {
    struct STKUtil::IAgUnitPrefsDimCollection * _result = 0;
    HRESULT _hr = get_UnitPreferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgUnitPrefsDimCollectionPtr(_result, false);
}

IAgStkObjectPtr IAgStkObjectRoot::GetCurrentScenario ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_CurrentScenario(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

HRESULT IAgStkObjectRoot::LoadCustomMarker ( _bstr_t Filename ) {
    HRESULT _hr = raw_LoadCustomMarker(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgStkObjectRoot::AvailableMarkerTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_AvailableMarkerTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectPtr IAgStkObjectRoot::GetObjectFromPath ( _bstr_t ObjectPath ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = raw_GetObjectFromPath(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t IAgStkObjectRoot::AllInstanceNamesToXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AllInstanceNamesToXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IAgStkObjectRoot::BeginUpdate ( ) {
    HRESULT _hr = raw_BeginUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkObjectRoot::EndUpdate ( ) {
    HRESULT _hr = raw_EndUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

STKUtil::IAgExecMultiCmdResultPtr IAgStkObjectRoot::ExecuteMultipleCommands ( SAFEARRAY * * ConnectCommands, enum STKUtil::AgEExecMultiCmdResultAction Action ) {
    struct STKUtil::IAgExecMultiCmdResult * _result = 0;
    HRESULT _hr = raw_ExecuteMultipleCommands(ConnectCommands, Action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgExecMultiCmdResultPtr(_result, false);
}

HRESULT IAgStkObjectRoot::Isolate ( ) {
    HRESULT _hr = raw_Isolate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkObjectRoot::GetIsolated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Isolated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

STKUtil::IAgConversionUtilityPtr IAgStkObjectRoot::GetConversionUtility ( ) {
    struct STKUtil::IAgConversionUtility * _result = 0;
    HRESULT _hr = get_ConversionUtility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgConversionUtilityPtr(_result, false);
}

IAgStdMil2525bSymbolsPtr IAgStkObjectRoot::GetStdMil2525bSymbols ( ) {
    struct IAgStdMil2525bSymbols * _result = 0;
    HRESULT _hr = get_StdMil2525bSymbols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStdMil2525bSymbolsPtr(_result, false);
}

HRESULT IAgStkObjectRoot::LoadVDF ( _bstr_t Path, _bstr_t Password ) {
    HRESULT _hr = raw_LoadVDF(Path, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgAvailableFeaturesPtr IAgStkObjectRoot::GetAvailableFeatures ( ) {
    struct IAgAvailableFeatures * _result = 0;
    HRESULT _hr = get_AvailableFeatures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAvailableFeaturesPtr(_result, false);
}

VARIANT_BOOL IAgStkObjectRoot::ObjectExists ( _bstr_t ObjectPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ObjectExists(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnRootPtr IAgStkObjectRoot::GetVgtRoot ( ) {
    struct AgSTKVgtLib::IAgCrdnRoot * _result = 0;
    HRESULT _hr = get_VgtRoot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnRootPtr(_result, false);
}

IAgStkCentralBodyCollectionPtr IAgStkObjectRoot::GetCentralBodies ( ) {
    struct IAgStkCentralBodyCollection * _result = 0;
    HRESULT _hr = get_CentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkCentralBodyCollectionPtr(_result, false);
}

//
// interface IAgLinkToObject wrapper method implementations
//

_bstr_t IAgLinkToObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectPtr IAgLinkToObject::GetLinkedObject ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

IAgStkObjectPtr IAgLinkToObject::BindTo ( _bstr_t Path ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = raw_BindTo(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

SAFEARRAY * IAgLinkToObject::GetAvailableObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgLinkToObject::GetIsIntrinsic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsIntrinsic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVOPointableElementsElement wrapper method implementations
//

_bstr_t IAgVOPointableElementsElement::GetPointingName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointingName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVOPointableElementsElement::PutPointingName ( _bstr_t pVal ) {
    HRESULT _hr = put_PointingName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLinkToObjectPtr IAgVOPointableElementsElement::GetAssignedTargetObject ( ) {
    struct IAgLinkToObject * _result = 0;
    HRESULT _hr = get_AssignedTargetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLinkToObjectPtr(_result, false);
}

IAgIntervalCollectionPtr IAgVOPointableElementsElement::GetIntervals ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

//
// interface IAgVOPointableElementsCollection wrapper method implementations
//

long IAgVOPointableElementsCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVOPointableElementsElementPtr IAgVOPointableElementsCollection::GetItem ( long Index ) {
    struct IAgVOPointableElementsElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOPointableElementsElementPtr(_result, false);
}

IUnknownPtr IAgVOPointableElementsCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVOPointableElementsCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVOPointableElementsCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVOPointableElementsElementPtr IAgVOPointableElementsCollection::Add ( ) {
    struct IAgVOPointableElementsElement * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOPointableElementsElementPtr(_result, false);
}

HRESULT IAgVOPointableElementsCollection::Sort ( ) {
    HRESULT _hr = raw_Sort();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVOModelPointing wrapper method implementations
//

IAgVOPointableElementsCollectionPtr IAgVOModelPointing::GetPointableElements ( ) {
    struct IAgVOPointableElementsCollection * _result = 0;
    HRESULT _hr = get_PointableElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOPointableElementsCollectionPtr(_result, false);
}

HRESULT IAgVOModelPointing::AddInterval ( _bstr_t AttachPointName, _bstr_t TargetName, const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_AddInterval(AttachPointName, TargetName, Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVOModelPointing::RemoveInterval ( _bstr_t AttachPointName, _bstr_t TargetName ) {
    HRESULT _hr = raw_RemoveInterval(AttachPointName, TargetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVOModelPointing::LoadIntervals ( _bstr_t Filename, _bstr_t AttachPoint ) {
    HRESULT _hr = raw_LoadIntervals(Filename, AttachPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgFaVO wrapper method implementations
//

IAgPtTargetVOModelPtr _IAgFaVO::GetModel ( ) {
    struct IAgPtTargetVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPtTargetVOModelPtr(_result, false);
}

IAgVOOffsetPtr _IAgFaVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr _IAgFaVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgFaVO::GetDataDisplays ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOVectorPtr _IAgFaVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVOAzElMaskPtr _IAgFaVO::GetAzElMask ( ) {
    struct IAgVOAzElMask * _result = 0;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOAzElMaskPtr(_result, false);
}

IAgVOModelPointingPtr _IAgFaVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr _IAgFaVO::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

IAgVOVaporTrailPtr _IAgFaVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgFaVO wrapper method implementations
//

IAgPtTargetVOModelPtr IAgFaVO::GetModel ( ) {
    struct IAgPtTargetVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPtTargetVOModelPtr(_result, false);
}

IAgVOOffsetPtr IAgFaVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr IAgFaVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVODataDisplayCollectionPtr IAgFaVO::GetDataDisplays ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOVectorPtr IAgFaVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVOAzElMaskPtr IAgFaVO::GetAzElMask ( ) {
    struct IAgVOAzElMask * _result = 0;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOAzElMaskPtr(_result, false);
}

IAgVOModelPointingPtr IAgFaVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr IAgFaVO::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

IAgVOVaporTrailPtr IAgFaVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgObjectLink wrapper method implementations
//

_bstr_t IAgObjectLink::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgObjectLink::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgESTKObjectType IAgObjectLink::GetType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectPtr IAgObjectLink::GetLinkedObject ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

//
// interface IAgObjectLinkCollection wrapper method implementations
//

long IAgObjectLinkCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgObjectLinkCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgObjectLinkPtr IAgObjectLinkCollection::GetItem ( long Index ) {
    struct IAgObjectLink * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkPtr(_result, false);
}

HRESULT IAgObjectLinkCollection::Add ( _bstr_t Name ) {
    HRESULT _hr = raw_Add(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgObjectLinkCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgObjectLinkCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgObjectLinkCollection::RemoveName ( _bstr_t Name ) {
    HRESULT _hr = raw_RemoveName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgObjectLinkCollection::GetAvailableObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgObjectLinkCollection::AddObject ( struct IAgStkObject * pObject ) {
    HRESULT _hr = raw_AddObject(pObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgObjectLinkCollection::RemoveObject ( struct IAgStkObject * pObject ) {
    HRESULT _hr = raw_RemoveObject(pObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgDuringAccess wrapper method implementations
//

IAgIntervalCollectionPtr _IAgDuringAccess::GetDisplayIntervals ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_DisplayIntervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

IAgObjectLinkCollectionPtr _IAgDuringAccess::GetAccessObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_AccessObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

//
// interface IAgDuringAccess wrapper method implementations
//

IAgIntervalCollectionPtr IAgDuringAccess::GetDisplayIntervals ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_DisplayIntervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

IAgObjectLinkCollectionPtr IAgDuringAccess::GetAccessObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_AccessObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

//
// interface IAgSnTargetCollection wrapper method implementations
//

long IAgSnTargetCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgSnTargetCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IAgSnTargetPtr IAgSnTargetCollection::GetItem ( long Index ) {
    struct IAgSnTarget * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnTargetPtr(_result, false);
}

HRESULT IAgSnTargetCollection::Add ( _bstr_t Name ) {
    HRESULT _hr = raw_Add(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSnTargetCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSnTargetCollection::RemoveTarget ( _bstr_t Name ) {
    HRESULT _hr = raw_RemoveTarget(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSnTargetCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSnTargetCollection::AddObject ( struct IAgStkObject * pObject ) {
    HRESULT _hr = raw_AddObject(pObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSnTargetCollection::RemoveObject ( struct IAgStkObject * pObject ) {
    HRESULT _hr = raw_RemoveObject(pObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgSnPtTargeted wrapper method implementations
//

enum AgESnPtTrgtBsightType _IAgSnPtTargeted::GetBoresight ( ) {
    enum AgESnPtTrgtBsightType _result;
    HRESULT _hr = get_Boresight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnPtTargeted::PutBoresight ( enum AgESnPtTrgtBsightType pVal ) {
    HRESULT _hr = put_Boresight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnPtTrgtBsightPtr _IAgSnPtTargeted::GetBoresightData ( ) {
    struct IAgSnPtTrgtBsight * _result = 0;
    HRESULT _hr = get_BoresightData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtTrgtBsightPtr(_result, false);
}

VARIANT_BOOL _IAgSnPtTargeted::GetEnableAccessTimes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAccessTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnPtTargeted::PutEnableAccessTimes ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAccessTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessTimeCollectionPtr _IAgSnPtTargeted::GetAccessTimes ( ) {
    struct IAgAccessTimeCollection * _result = 0;
    HRESULT _hr = get_AccessTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessTimeCollectionPtr(_result, false);
}

IAgScheduleTimeCollectionPtr _IAgSnPtTargeted::GetScheduleTimes ( ) {
    struct IAgScheduleTimeCollection * _result = 0;
    HRESULT _hr = get_ScheduleTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScheduleTimeCollectionPtr(_result, false);
}

IAgSnTargetCollectionPtr _IAgSnPtTargeted::GetTargets ( ) {
    struct IAgSnTargetCollection * _result = 0;
    HRESULT _hr = get_Targets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnTargetCollectionPtr(_result, false);
}

SAFEARRAY * _IAgSnPtTargeted::GetAvailableTargets ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableTargets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSnAccessAdvancedPtr _IAgSnPtTargeted::GetAdvanced ( ) {
    struct IAgSnAccessAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnAccessAdvancedPtr(_result, false);
}

VARIANT_BOOL _IAgSnPtTargeted::GetSaveTargetAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveTargetAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSnPtTargeted::PutSaveTargetAccess ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SaveTargetAccess(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgSnPtTargeted wrapper method implementations
//

enum AgESnPtTrgtBsightType IAgSnPtTargeted::GetBoresight ( ) {
    enum AgESnPtTrgtBsightType _result;
    HRESULT _hr = get_Boresight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnPtTargeted::PutBoresight ( enum AgESnPtTrgtBsightType pVal ) {
    HRESULT _hr = put_Boresight(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnPtTrgtBsightPtr IAgSnPtTargeted::GetBoresightData ( ) {
    struct IAgSnPtTrgtBsight * _result = 0;
    HRESULT _hr = get_BoresightData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtTrgtBsightPtr(_result, false);
}

VARIANT_BOOL IAgSnPtTargeted::GetEnableAccessTimes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAccessTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnPtTargeted::PutEnableAccessTimes ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAccessTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessTimeCollectionPtr IAgSnPtTargeted::GetAccessTimes ( ) {
    struct IAgAccessTimeCollection * _result = 0;
    HRESULT _hr = get_AccessTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessTimeCollectionPtr(_result, false);
}

IAgScheduleTimeCollectionPtr IAgSnPtTargeted::GetScheduleTimes ( ) {
    struct IAgScheduleTimeCollection * _result = 0;
    HRESULT _hr = get_ScheduleTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScheduleTimeCollectionPtr(_result, false);
}

IAgSnTargetCollectionPtr IAgSnPtTargeted::GetTargets ( ) {
    struct IAgSnTargetCollection * _result = 0;
    HRESULT _hr = get_Targets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnTargetCollectionPtr(_result, false);
}

SAFEARRAY * IAgSnPtTargeted::GetAvailableTargets ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableTargets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSnAccessAdvancedPtr IAgSnPtTargeted::GetAdvanced ( ) {
    struct IAgSnAccessAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnAccessAdvancedPtr(_result, false);
}

VARIANT_BOOL IAgSnPtTargeted::GetSaveTargetAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SaveTargetAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSnPtTargeted::PutSaveTargetAccess ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SaveTargetAccess(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgFacility wrapper method implementations
//

VARIANT_BOOL IAgFacility::GetUseLocalTimeOffset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFacility::PutUseLocalTimeOffset ( VARIANT_BOOL pUseLocalTimeOffset ) {
    HRESULT _hr = put_UseLocalTimeOffset(pUseLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgFacility::GetLocalTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_LocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFacility::PutLocalTimeOffset ( double pLocalTimeOffset ) {
    HRESULT _hr = put_LocalTimeOffset(pLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgFacility::GetUseTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFacility::PutUseTerrain ( VARIANT_BOOL pEnableTerrain ) {
    HRESULT _hr = put_UseTerrain(pEnableTerrain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgFacility::SetAzElMask ( enum AgEAzElMaskType Type, const _variant_t & Data ) {
    HRESULT _hr = raw_SetAzElMask(Type, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgFaGraphicsPtr IAgFacility::GetGraphics ( ) {
    struct IAgFaGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFaGraphicsPtr(_result, false);
}

STKUtil::IAgPositionPtr IAgFacility::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

void IAgFacility::PutTerrainNorm ( enum AgETerrainNormType pType ) {
    HRESULT _hr = put_TerrainNorm(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgTerrainNormDataPtr IAgFacility::GetTerrainNormData ( ) {
    struct IAgTerrainNormData * _result = 0;
    HRESULT _hr = get_TerrainNormData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainNormDataPtr(_result, false);
}

IAgFaVOPtr IAgFacility::GetVO ( ) {
    struct IAgFaVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFaVOPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgFacility::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

HRESULT IAgFacility::ResetAzElMask ( ) {
    HRESULT _hr = raw_ResetAzElMask();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAzElMaskType IAgFacility::GetAzElMask ( ) {
    enum AgEAzElMaskType _result;
    HRESULT _hr = raw_GetAzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IAgFacility::GetAzElMaskData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAzElMaskData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum AgETerrainNormType IAgFacility::GetTerrainNorm ( ) {
    enum AgETerrainNormType _result;
    HRESULT _hr = get_TerrainNorm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFacility::PutHeightAboveGround ( double pVal ) {
    HRESULT _hr = put_HeightAboveGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgFacility::GetHeightAboveGround ( ) {
    double _result = 0;
    HRESULT _hr = get_HeightAboveGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgFacility::PutAltRef ( enum AgEAltRefType pVal ) {
    HRESULT _hr = put_AltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAltRefType IAgFacility::GetAltRef ( ) {
    enum AgEAltRefType _result;
    HRESULT _hr = get_AltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgTargetVO wrapper method implementations
//

IAgPtTargetVOModelPtr IAgTargetVO::GetModel ( ) {
    struct IAgPtTargetVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPtTargetVOModelPtr(_result, false);
}

IAgVOOffsetPtr IAgTargetVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr IAgTargetVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVODataDisplayCollectionPtr IAgTargetVO::GetDataDisplays ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOVectorPtr IAgTargetVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVOAzElMaskPtr IAgTargetVO::GetAzElMask ( ) {
    struct IAgVOAzElMask * _result = 0;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOAzElMaskPtr(_result, false);
}

IAgVOModelPointingPtr IAgTargetVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr IAgTargetVO::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

IAgVOVaporTrailPtr IAgTargetVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgTarget wrapper method implementations
//

VARIANT_BOOL IAgTarget::GetUseLocalTimeOffset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTarget::PutUseLocalTimeOffset ( VARIANT_BOOL pUseLocalTimeOffset ) {
    HRESULT _hr = put_UseLocalTimeOffset(pUseLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgTarget::GetLocalTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_LocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTarget::PutLocalTimeOffset ( double pLocalTimeOffset ) {
    HRESULT _hr = put_LocalTimeOffset(pLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgTarget::GetUseTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTarget::PutUseTerrain ( VARIANT_BOOL pEnableTerrain ) {
    HRESULT _hr = put_UseTerrain(pEnableTerrain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgTarget::SetAzElMask ( enum AgEAzElMaskType Type, const _variant_t & Data ) {
    HRESULT _hr = raw_SetAzElMask(Type, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgTargetGraphicsPtr IAgTarget::GetGraphics ( ) {
    struct IAgTargetGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTargetGraphicsPtr(_result, false);
}

STKUtil::IAgPositionPtr IAgTarget::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

void IAgTarget::PutTerrainNorm ( enum AgETerrainNormType pType ) {
    HRESULT _hr = put_TerrainNorm(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgTerrainNormDataPtr IAgTarget::GetTerrainNormData ( ) {
    struct IAgTerrainNormData * _result = 0;
    HRESULT _hr = get_TerrainNormData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainNormDataPtr(_result, false);
}

IAgTargetVOPtr IAgTarget::GetVO ( ) {
    struct IAgTargetVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTargetVOPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgTarget::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

HRESULT IAgTarget::ResetAzElMask ( ) {
    HRESULT _hr = raw_ResetAzElMask();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAzElMaskType IAgTarget::GetAzElMask ( ) {
    enum AgEAzElMaskType _result;
    HRESULT _hr = raw_GetAzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IAgTarget::GetAzElMaskData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAzElMaskData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum AgETerrainNormType IAgTarget::GetTerrainNorm ( ) {
    enum AgETerrainNormType _result;
    HRESULT _hr = get_TerrainNorm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTarget::PutHeightAboveGround ( double pVal ) {
    HRESULT _hr = put_HeightAboveGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgTarget::GetHeightAboveGround ( ) {
    double _result = 0;
    HRESULT _hr = get_HeightAboveGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgTarget::PutAltRef ( enum AgEAltRefType pVal ) {
    HRESULT _hr = put_AltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAltRefType IAgTarget::GetAltRef ( ) {
    enum AgEAltRefType _result;
    HRESULT _hr = get_AltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgSnCommonTasks wrapper method implementations
//

IAgSnSimpleConicPatternPtr IAgSnCommonTasks::SetPatternSimpleConic ( const _variant_t & ConeAngle, const _variant_t & AngularResolution ) {
    struct IAgSnSimpleConicPattern * _result = 0;
    HRESULT _hr = raw_SetPatternSimpleConic(ConeAngle, AngularResolution, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnSimpleConicPatternPtr(_result, false);
}

IAgSnComplexConicPatternPtr IAgSnCommonTasks::SetPatternComplexConic ( const _variant_t & InnerConeHalfAngle, const _variant_t & OuterConeHalfAngle, const _variant_t & MinimumClockAngle, const _variant_t & MaximumClockAngle ) {
    struct IAgSnComplexConicPattern * _result = 0;
    HRESULT _hr = raw_SetPatternComplexConic(InnerConeHalfAngle, OuterConeHalfAngle, MinimumClockAngle, MaximumClockAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnComplexConicPatternPtr(_result, false);
}

IAgSnHalfPowerPatternPtr IAgSnCommonTasks::SetPatternHalfPower ( double Frequency, double AntennaDiameter, const _variant_t & AngularResolution ) {
    struct IAgSnHalfPowerPattern * _result = 0;
    HRESULT _hr = raw_SetPatternHalfPower(Frequency, AntennaDiameter, AngularResolution, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnHalfPowerPatternPtr(_result, false);
}

IAgSnRectangularPatternPtr IAgSnCommonTasks::SetPatternRectangular ( const _variant_t & VerticalHalfAngle, const _variant_t & HorizontalHalfAngle ) {
    struct IAgSnRectangularPattern * _result = 0;
    HRESULT _hr = raw_SetPatternRectangular(VerticalHalfAngle, HorizontalHalfAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnRectangularPatternPtr(_result, false);
}

IAgSnCustomPatternPtr IAgSnCommonTasks::SetPatternCustom ( _bstr_t Filename ) {
    struct IAgSnCustomPattern * _result = 0;
    HRESULT _hr = raw_SetPatternCustom(Filename, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnCustomPatternPtr(_result, false);
}

IAgSnSARPatternPtr IAgSnCommonTasks::SetPatternSAR ( const _variant_t & MinElevationAngle, const _variant_t & MaxElevationAngle, const _variant_t & ForeExclusionAngle, const _variant_t & AftExclusionAngle, double ParentAltitude ) {
    struct IAgSnSARPattern * _result = 0;
    HRESULT _hr = raw_SetPatternSAR(MinElevationAngle, MaxElevationAngle, ForeExclusionAngle, AftExclusionAngle, ParentAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnSARPatternPtr(_result, false);
}

IAgSnPtFixedPtr IAgSnCommonTasks::SetPointingFixedAzEl ( const _variant_t & Azimuth, const _variant_t & Elevation, enum STKUtil::AgEAzElAboutBoresight AboutBoresight ) {
    struct IAgSnPtFixed * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAzEl(Azimuth, Elevation, AboutBoresight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedPtr(_result, false);
}

IAgSnPtFixedPtr IAgSnCommonTasks::SetPointingFixedEuler ( enum STKUtil::AgEEulerOrientationSequence Sequence, const _variant_t & A, const _variant_t & B, const _variant_t & C ) {
    struct IAgSnPtFixed * _result = 0;
    HRESULT _hr = raw_SetPointingFixedEuler(Sequence, A, B, C, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedPtr(_result, false);
}

IAgSnPtFixedPtr IAgSnCommonTasks::SetPointingFixedQuat ( double QX, double QY, double QZ, double QS ) {
    struct IAgSnPtFixed * _result = 0;
    HRESULT _hr = raw_SetPointingFixedQuat(QX, QY, QZ, QS, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedPtr(_result, false);
}

IAgSnPtFixedPtr IAgSnCommonTasks::SetPointingFixedYPR ( enum STKUtil::AgEYPRAnglesSequence Sequence, const _variant_t & Yaw, const _variant_t & Pitch, const _variant_t & Roll ) {
    struct IAgSnPtFixed * _result = 0;
    HRESULT _hr = raw_SetPointingFixedYPR(Sequence, Yaw, Pitch, Roll, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedPtr(_result, false);
}

IAgSnPtFixedAxesPtr IAgSnCommonTasks::SetPointingFixedAxesAzEl ( _bstr_t ReferenceAxes, const _variant_t & Azimuth, const _variant_t & Elevation, enum STKUtil::AgEAzElAboutBoresight AboutBoresight ) {
    struct IAgSnPtFixedAxes * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAxesAzEl(ReferenceAxes, Azimuth, Elevation, AboutBoresight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedAxesPtr(_result, false);
}

IAgSnPtFixedAxesPtr IAgSnCommonTasks::SetPointingFixedAxesEuler ( _bstr_t ReferenceAxes, enum STKUtil::AgEEulerOrientationSequence Sequence, const _variant_t & A, const _variant_t & B, const _variant_t & C ) {
    struct IAgSnPtFixedAxes * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAxesEuler(ReferenceAxes, Sequence, A, B, C, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedAxesPtr(_result, false);
}

IAgSnPtFixedAxesPtr IAgSnCommonTasks::SetPointingFixedAxesQuat ( _bstr_t ReferenceAxes, double QX, double QY, double QZ, double QS ) {
    struct IAgSnPtFixedAxes * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAxesQuat(ReferenceAxes, QX, QY, QZ, QS, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedAxesPtr(_result, false);
}

IAgSnPtFixedAxesPtr IAgSnCommonTasks::SetPointingFixedAxesYPR ( _bstr_t ReferenceAxes, enum STKUtil::AgEYPRAnglesSequence Sequence, const _variant_t & Yaw, const _variant_t & Pitch, const _variant_t & Roll ) {
    struct IAgSnPtFixedAxes * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAxesYPR(ReferenceAxes, Sequence, Yaw, Pitch, Roll, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedAxesPtr(_result, false);
}

IAgSnPt3DModelPtr IAgSnCommonTasks::SetPointing3DModel ( _bstr_t AttachName ) {
    struct IAgSnPt3DModel * _result = 0;
    HRESULT _hr = raw_SetPointing3DModel(AttachName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPt3DModelPtr(_result, false);
}

IAgSnPtGrazingAltPtr IAgSnCommonTasks::SetPointingGrazingAlt ( const _variant_t & AzimuthOffset, double GrazingAlt ) {
    struct IAgSnPtGrazingAlt * _result = 0;
    HRESULT _hr = raw_SetPointingGrazingAlt(AzimuthOffset, GrazingAlt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtGrazingAltPtr(_result, false);
}

IAgSnPtSpinningPtr IAgSnCommonTasks::SetPointingSpinning ( const _variant_t & SpinAxisAzimuth, const _variant_t & SpinAxisElevation, const _variant_t & SpinAxisConeAngle, enum AgESnScanMode ScanMode, double SpinRate, const _variant_t & OffsetAngle, const _variant_t & ClockAngleStart, const _variant_t & ClockAngleStop ) {
    struct IAgSnPtSpinning * _result = 0;
    HRESULT _hr = raw_SetPointingSpinning(SpinAxisAzimuth, SpinAxisElevation, SpinAxisConeAngle, ScanMode, SpinRate, OffsetAngle, ClockAngleStart, ClockAngleStop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtSpinningPtr(_result, false);
}

IAgSnPtTargetedPtr IAgSnCommonTasks::SetPointingTargetedTracking ( enum AgETrackModeType TrackModeType, enum AgEBoresightType AboutBoresightType, _bstr_t TargetPath ) {
    struct IAgSnPtTargeted * _result = 0;
    HRESULT _hr = raw_SetPointingTargetedTracking(TrackModeType, AboutBoresightType, TargetPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtTargetedPtr(_result, false);
}

//
// interface IAgSensor wrapper method implementations
//

enum AgESnPattern IAgSensor::GetPatternType ( ) {
    enum AgESnPattern _result;
    HRESULT _hr = get_PatternType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSensor::SetPatternType ( enum AgESnPattern PatternType ) {
    HRESULT _hr = raw_SetPatternType(PatternType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSnPatternPtr IAgSensor::GetPattern ( ) {
    struct IAgSnPattern * _result = 0;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPatternPtr(_result, false);
}

enum AgESnPointing IAgSensor::GetPointingType ( ) {
    enum AgESnPointing _result;
    HRESULT _hr = get_PointingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSensor::SetPointingType ( enum AgESnPointing PointingType ) {
    HRESULT _hr = raw_SetPointingType(PointingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSensor::SetPointingExternalFile ( _bstr_t MaskFile ) {
    HRESULT _hr = raw_SetPointingExternalFile(MaskFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSnPointingPtr IAgSensor::GetPointing ( ) {
    struct IAgSnPointing * _result = 0;
    HRESULT _hr = get_Pointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPointingPtr(_result, false);
}

HRESULT IAgSensor::ResetAzElMask ( ) {
    HRESULT _hr = raw_ResetAzElMask();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAzElMaskType IAgSensor::GetAzElMask ( ) {
    enum AgEAzElMaskType _result;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSensor::SetAzElMask ( enum AgEAzElMaskType AzElMaskType ) {
    HRESULT _hr = raw_SetAzElMask(AzElMaskType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgSensor::SetAzElMaskFile ( _bstr_t Filename ) {
    HRESULT _hr = raw_SetAzElMaskFile(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgAzElMaskDataPtr IAgSensor::GetAzElMaskData ( ) {
    struct IAgAzElMaskData * _result = 0;
    HRESULT _hr = get_AzElMaskData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAzElMaskDataPtr(_result, false);
}

double IAgSensor::GetFocalLength ( ) {
    double _result = 0;
    HRESULT _hr = get_FocalLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSensor::PutFocalLength ( double pVal ) {
    HRESULT _hr = put_FocalLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgSensor::GetDetectorPitch ( ) {
    double _result = 0;
    HRESULT _hr = get_DetectorPitch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSensor::PutDetectorPitch ( double pVal ) {
    HRESULT _hr = put_DetectorPitch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnRefractionType IAgSensor::GetRefraction ( ) {
    enum AgESnRefractionType _result;
    HRESULT _hr = get_Refraction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSensor::PutRefraction ( enum AgESnRefractionType pVal ) {
    HRESULT _hr = put_Refraction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnGraphicsPtr IAgSensor::GetGraphics ( ) {
    struct IAgSnGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnGraphicsPtr(_result, false);
}

IAgSnVOPtr IAgSensor::GetVO ( ) {
    struct IAgSnVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOPtr(_result, false);
}

enum AgESnLocation IAgSensor::GetLocationType ( ) {
    enum AgESnLocation _result;
    HRESULT _hr = get_LocationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSensor::SetLocationType ( enum AgESnLocation LocationType ) {
    HRESULT _hr = raw_SetLocationType(LocationType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

STKUtil::IAgLocationDataPtr IAgSensor::GetLocationData ( ) {
    struct STKUtil::IAgLocationData * _result = 0;
    HRESULT _hr = get_LocationData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgLocationDataPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgSensor::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgSwathPtr IAgSensor::GetSwath ( ) {
    struct IAgSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSwathPtr(_result, false);
}

VARIANT_BOOL IAgSensor::IsRefractionTypeSupported ( enum AgESnRefractionType Model ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRefractionTypeSupported(Model, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgSensor::GetRefractionSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RefractionSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgRfModelBasePtr IAgSensor::GetRefractionModel ( ) {
    struct IAgRfModelBase * _result = 0;
    HRESULT _hr = get_RefractionModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgRfModelBasePtr(_result, false);
}

VARIANT_BOOL IAgSensor::GetUseRefractionInAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseRefractionInAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgSensor::PutUseRefractionInAccess ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseRefractionInAccess(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnCommonTasksPtr IAgSensor::GetCommonTasks ( ) {
    struct IAgSnCommonTasks * _result = 0;
    HRESULT _hr = get_CommonTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnCommonTasksPtr(_result, false);
}

IAgCelestialBodyCollectionPtr IAgSensor::GetStarsInFOV ( const _variant_t & Epoch ) {
    struct IAgCelestialBodyCollection * _result = 0;
    HRESULT _hr = raw_GetStarsInFOV(Epoch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCelestialBodyCollectionPtr(_result, false);
}

//
// interface _IAgSnCommonTasks wrapper method implementations
//

IAgSnSimpleConicPatternPtr _IAgSnCommonTasks::SetPatternSimpleConic ( const _variant_t & ConeAngle, const _variant_t & AngularResolution ) {
    struct IAgSnSimpleConicPattern * _result = 0;
    HRESULT _hr = raw_SetPatternSimpleConic(ConeAngle, AngularResolution, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnSimpleConicPatternPtr(_result, false);
}

IAgSnComplexConicPatternPtr _IAgSnCommonTasks::SetPatternComplexConic ( const _variant_t & InnerConeHalfAngle, const _variant_t & OuterConeHalfAngle, const _variant_t & MinimumClockAngle, const _variant_t & MaximumClockAngle ) {
    struct IAgSnComplexConicPattern * _result = 0;
    HRESULT _hr = raw_SetPatternComplexConic(InnerConeHalfAngle, OuterConeHalfAngle, MinimumClockAngle, MaximumClockAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnComplexConicPatternPtr(_result, false);
}

IAgSnHalfPowerPatternPtr _IAgSnCommonTasks::SetPatternHalfPower ( double Frequency, double AntennaDiameter, const _variant_t & AngularResolution ) {
    struct IAgSnHalfPowerPattern * _result = 0;
    HRESULT _hr = raw_SetPatternHalfPower(Frequency, AntennaDiameter, AngularResolution, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnHalfPowerPatternPtr(_result, false);
}

IAgSnRectangularPatternPtr _IAgSnCommonTasks::SetPatternRectangular ( const _variant_t & VerticalHalfAngle, const _variant_t & HorizontalHalfAngle ) {
    struct IAgSnRectangularPattern * _result = 0;
    HRESULT _hr = raw_SetPatternRectangular(VerticalHalfAngle, HorizontalHalfAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnRectangularPatternPtr(_result, false);
}

IAgSnCustomPatternPtr _IAgSnCommonTasks::SetPatternCustom ( _bstr_t Filename ) {
    struct IAgSnCustomPattern * _result = 0;
    HRESULT _hr = raw_SetPatternCustom(Filename, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnCustomPatternPtr(_result, false);
}

IAgSnSARPatternPtr _IAgSnCommonTasks::SetPatternSAR ( const _variant_t & MinElevationAngle, const _variant_t & MaxElevationAngle, const _variant_t & ForeExclusionAngle, const _variant_t & AftExclusionAngle, double ParentAltitude ) {
    struct IAgSnSARPattern * _result = 0;
    HRESULT _hr = raw_SetPatternSAR(MinElevationAngle, MaxElevationAngle, ForeExclusionAngle, AftExclusionAngle, ParentAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnSARPatternPtr(_result, false);
}

IAgSnPtFixedPtr _IAgSnCommonTasks::SetPointingFixedAzEl ( const _variant_t & Azimuth, const _variant_t & Elevation, enum STKUtil::AgEAzElAboutBoresight AboutBoresight ) {
    struct IAgSnPtFixed * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAzEl(Azimuth, Elevation, AboutBoresight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedPtr(_result, false);
}

IAgSnPtFixedPtr _IAgSnCommonTasks::SetPointingFixedEuler ( enum STKUtil::AgEEulerOrientationSequence Sequence, const _variant_t & A, const _variant_t & B, const _variant_t & C ) {
    struct IAgSnPtFixed * _result = 0;
    HRESULT _hr = raw_SetPointingFixedEuler(Sequence, A, B, C, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedPtr(_result, false);
}

IAgSnPtFixedPtr _IAgSnCommonTasks::SetPointingFixedQuat ( double QX, double QY, double QZ, double QS ) {
    struct IAgSnPtFixed * _result = 0;
    HRESULT _hr = raw_SetPointingFixedQuat(QX, QY, QZ, QS, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedPtr(_result, false);
}

IAgSnPtFixedPtr _IAgSnCommonTasks::SetPointingFixedYPR ( enum STKUtil::AgEYPRAnglesSequence Sequence, const _variant_t & Yaw, const _variant_t & Pitch, const _variant_t & Roll ) {
    struct IAgSnPtFixed * _result = 0;
    HRESULT _hr = raw_SetPointingFixedYPR(Sequence, Yaw, Pitch, Roll, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedPtr(_result, false);
}

IAgSnPtFixedAxesPtr _IAgSnCommonTasks::SetPointingFixedAxesAzEl ( _bstr_t ReferenceAxes, const _variant_t & Azimuth, const _variant_t & Elevation, enum STKUtil::AgEAzElAboutBoresight AboutBoresight ) {
    struct IAgSnPtFixedAxes * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAxesAzEl(ReferenceAxes, Azimuth, Elevation, AboutBoresight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedAxesPtr(_result, false);
}

IAgSnPtFixedAxesPtr _IAgSnCommonTasks::SetPointingFixedAxesEuler ( _bstr_t ReferenceAxes, enum STKUtil::AgEEulerOrientationSequence Sequence, const _variant_t & A, const _variant_t & B, const _variant_t & C ) {
    struct IAgSnPtFixedAxes * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAxesEuler(ReferenceAxes, Sequence, A, B, C, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedAxesPtr(_result, false);
}

IAgSnPtFixedAxesPtr _IAgSnCommonTasks::SetPointingFixedAxesQuat ( _bstr_t ReferenceAxes, double QX, double QY, double QZ, double QS ) {
    struct IAgSnPtFixedAxes * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAxesQuat(ReferenceAxes, QX, QY, QZ, QS, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedAxesPtr(_result, false);
}

IAgSnPtFixedAxesPtr _IAgSnCommonTasks::SetPointingFixedAxesYPR ( _bstr_t ReferenceAxes, enum STKUtil::AgEYPRAnglesSequence Sequence, const _variant_t & Yaw, const _variant_t & Pitch, const _variant_t & Roll ) {
    struct IAgSnPtFixedAxes * _result = 0;
    HRESULT _hr = raw_SetPointingFixedAxesYPR(ReferenceAxes, Sequence, Yaw, Pitch, Roll, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtFixedAxesPtr(_result, false);
}

IAgSnPt3DModelPtr _IAgSnCommonTasks::SetPointing3DModel ( _bstr_t AttachName ) {
    struct IAgSnPt3DModel * _result = 0;
    HRESULT _hr = raw_SetPointing3DModel(AttachName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPt3DModelPtr(_result, false);
}

IAgSnPtGrazingAltPtr _IAgSnCommonTasks::SetPointingGrazingAlt ( const _variant_t & AzimuthOffset, double GrazingAlt ) {
    struct IAgSnPtGrazingAlt * _result = 0;
    HRESULT _hr = raw_SetPointingGrazingAlt(AzimuthOffset, GrazingAlt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtGrazingAltPtr(_result, false);
}

IAgSnPtSpinningPtr _IAgSnCommonTasks::SetPointingSpinning ( const _variant_t & SpinAxisAzimuth, const _variant_t & SpinAxisElevation, const _variant_t & SpinAxisConeAngle, enum AgESnScanMode ScanMode, double SpinRate, const _variant_t & OffsetAngle, const _variant_t & ClockAngleStart, const _variant_t & ClockAngleStop ) {
    struct IAgSnPtSpinning * _result = 0;
    HRESULT _hr = raw_SetPointingSpinning(SpinAxisAzimuth, SpinAxisElevation, SpinAxisConeAngle, ScanMode, SpinRate, OffsetAngle, ClockAngleStart, ClockAngleStop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtSpinningPtr(_result, false);
}

IAgSnPtTargetedPtr _IAgSnCommonTasks::SetPointingTargetedTracking ( enum AgETrackModeType TrackModeType, enum AgEBoresightType BoresightType, _bstr_t TargetPath ) {
    struct IAgSnPtTargeted * _result = 0;
    HRESULT _hr = raw_SetPointingTargetedTracking(TrackModeType, BoresightType, TargetPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPtTargetedPtr(_result, false);
}

//
// interface _IAgTargetVO wrapper method implementations
//

IAgPtTargetVOModelPtr _IAgTargetVO::GetModel ( ) {
    struct IAgPtTargetVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPtTargetVOModelPtr(_result, false);
}

IAgVOOffsetPtr _IAgTargetVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr _IAgTargetVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgTargetVO::GetDataDisplays ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOVectorPtr _IAgTargetVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVOAzElMaskPtr _IAgTargetVO::GetAzElMask ( ) {
    struct IAgVOAzElMask * _result = 0;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOAzElMaskPtr(_result, false);
}

IAgVOModelPointingPtr _IAgTargetVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVOLabelSwapDistancePtr _IAgTargetVO::GetAOULabelSwapDistance ( ) {
    struct IAgVOLabelSwapDistance * _result = 0;
    HRESULT _hr = get_AOULabelSwapDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOLabelSwapDistancePtr(_result, false);
}

IAgVOVaporTrailPtr _IAgTargetVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface _IAgObjectLink wrapper method implementations
//

_bstr_t _IAgObjectLink::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgObjectLink::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgESTKObjectType _IAgObjectLink::GetType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectPtr _IAgObjectLink::GetLinkedObject ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

//
// interface _IAgLinkToObject wrapper method implementations
//

_bstr_t _IAgLinkToObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectPtr _IAgLinkToObject::GetLinkedObject ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

IAgStkObjectPtr _IAgLinkToObject::BindTo ( _bstr_t Path ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = raw_BindTo(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

SAFEARRAY * _IAgLinkToObject::GetAvailableObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgLinkToObject::GetIsIntrinsic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsIntrinsic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgVeVOCovariancePointingContour wrapper method implementations
//

enum AgEVeVOSigmaScale IAgVeVOCovariancePointingContour::GetSigmaScaleType ( ) {
    enum AgEVeVOSigmaScale _result;
    HRESULT _hr = get_SigmaScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOCovariancePointingContour::SetSigmaScaleType ( enum AgEVeVOSigmaScale SigmaScale ) {
    HRESULT _hr = raw_SetSigmaScaleType(SigmaScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeVOCovariancePointingContour::IsSigmaScaleTypeSupported ( enum AgEVeVOSigmaScale SigmaScale ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSigmaScaleTypeSupported(SigmaScale, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeVOCovariancePointingContour::GetSigmaScaleSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SigmaScaleSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOSigmaScalePtr IAgVeVOCovariancePointingContour::GetSigmaScale ( ) {
    struct IAgVeVOSigmaScale * _result = 0;
    HRESULT _hr = get_SigmaScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSigmaScalePtr(_result, false);
}

enum AgEVeVOAttributes IAgVeVOCovariancePointingContour::GetAttributesType ( ) {
    enum AgEVeVOAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeVOCovariancePointingContour::SetAttributesType ( enum AgEVeVOAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgVeVOCovariancePointingContour::IsAttributesTypeSupported ( enum AgEVeVOAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeVOCovariancePointingContour::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOAttributesPtr IAgVeVOCovariancePointingContour::GetAttributes ( ) {
    struct IAgVeVOAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOAttributesPtr(_result, false);
}

VARIANT_BOOL IAgVeVOCovariancePointingContour::GetIsConeVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeVOCovariancePointingContour::PutIsConeVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsConeVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOSizePtr IAgVeVOCovariancePointingContour::GetSize ( ) {
    struct IAgVeVOSize * _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSizePtr(_result, false);
}

IAgLinkToObjectPtr IAgVeVOCovariancePointingContour::GetToObject ( ) {
    struct IAgLinkToObject * _result = 0;
    HRESULT _hr = get_ToObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgSaVO wrapper method implementations
//

IAgSaVOModelPtr IAgSaVO::GetModel ( ) {
    struct IAgSaVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSaVOModelPtr(_result, false);
}

IAgVeVOSystemsCollectionPtr IAgSaVO::GetOrbitSystems ( ) {
    struct IAgVeVOSystemsCollection * _result = 0;
    HRESULT _hr = get_OrbitSystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsCollectionPtr(_result, false);
}

IAgVeVOOrbitProximityPtr IAgSaVO::GetProximity ( ) {
    struct IAgVeVOOrbitProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitProximityPtr(_result, false);
}

IAgVeVOElevContoursPtr IAgSaVO::GetElevContours ( ) {
    struct IAgVeVOElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOElevContoursPtr(_result, false);
}

IAgVeVOSAAPtr IAgSaVO::GetSAA ( ) {
    struct IAgVeVOSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSAAPtr(_result, false);
}

IAgVeVOCovariancePointingContourPtr IAgSaVO::GetCovariancePointingContour ( ) {
    struct IAgVeVOCovariancePointingContour * _result = 0;
    HRESULT _hr = get_CovariancePointingContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePointingContourPtr(_result, false);
}

IAgVeVOPassPtr IAgSaVO::GetPass ( ) {
    struct IAgVeVOPass * _result = 0;
    HRESULT _hr = get_Pass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPassPtr(_result, false);
}

IAgVOOffsetPtr IAgSaVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr IAgSaVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr IAgSaVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr IAgSaVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr IAgSaVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr IAgSaVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVeVOOrbitDropLinesPtr IAgSaVO::GetDropLines ( ) {
    struct IAgVeVOOrbitDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitDropLinesPtr(_result, false);
}

IAgVeVOBPlanesPtr IAgSaVO::GetBPlanes ( ) {
    struct IAgVeVOBPlanes * _result = 0;
    HRESULT _hr = get_BPlanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlanesPtr(_result, false);
}

IAgVOVaporTrailPtr IAgSaVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgSatellite wrapper method implementations
//

enum AgEVePropagatorType IAgSatellite::GetPropagatorType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_PropagatorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSatellite::SetPropagatorType ( enum AgEVePropagatorType EPropagator ) {
    HRESULT _hr = raw_SetPropagatorType(EPropagator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVePropagatorPtr IAgSatellite::GetPropagator ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Propagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude IAgSatellite::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgSatellite::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgSatellite::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgSatellite::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr IAgSatellite::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgVeMassPropertiesPtr IAgSatellite::GetMassProperties ( ) {
    struct IAgVeMassProperties * _result = 0;
    HRESULT _hr = get_MassProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeMassPropertiesPtr(_result, false);
}

IAgVePassBreakPtr IAgSatellite::GetPassBreak ( ) {
    struct IAgVePassBreak * _result = 0;
    HRESULT _hr = get_PassBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePassBreakPtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr IAgSatellite::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgSaGraphicsPtr IAgSatellite::GetGraphics ( ) {
    struct IAgSaGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSaGraphicsPtr(_result, false);
}

IAgSaVOPtr IAgSatellite::GetVO ( ) {
    struct IAgSaVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSaVOPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgSatellite::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgVeEclipseBodiesPtr IAgSatellite::GetEclipseBodies ( ) {
    struct IAgVeEclipseBodies * _result = 0;
    HRESULT _hr = get_EclipseBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEclipseBodiesPtr(_result, false);
}

VARIANT_BOOL IAgSatellite::IsPropagatorTypeSupported ( enum AgEVePropagatorType Propagator ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPropagatorTypeSupported(Propagator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgSatellite::GetPropagatorSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PropagatorSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSaExportToolsPtr IAgSatellite::GetExportTools ( ) {
    struct IAgSaExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSaExportToolsPtr(_result, false);
}

IAgVeSpEnvSpaceEnvironmentPtr IAgSatellite::GetSpaceEnvironment ( ) {
    struct IAgVeSpEnvSpaceEnvironment * _result = 0;
    HRESULT _hr = get_SpaceEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvSpaceEnvironmentPtr(_result, false);
}

//
// interface _IAgSaVO wrapper method implementations
//

IAgSaVOModelPtr _IAgSaVO::GetModel ( ) {
    struct IAgSaVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSaVOModelPtr(_result, false);
}

IAgVeVOSystemsCollectionPtr _IAgSaVO::GetOrbitSystems ( ) {
    struct IAgVeVOSystemsCollection * _result = 0;
    HRESULT _hr = get_OrbitSystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsCollectionPtr(_result, false);
}

IAgVeVOOrbitProximityPtr _IAgSaVO::GetProximity ( ) {
    struct IAgVeVOOrbitProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitProximityPtr(_result, false);
}

IAgVeVOElevContoursPtr _IAgSaVO::GetElevContours ( ) {
    struct IAgVeVOElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOElevContoursPtr(_result, false);
}

IAgVeVOSAAPtr _IAgSaVO::GetSAA ( ) {
    struct IAgVeVOSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSAAPtr(_result, false);
}

IAgVeVOCovariancePointingContourPtr _IAgSaVO::GetCovariancePointingContour ( ) {
    struct IAgVeVOCovariancePointingContour * _result = 0;
    HRESULT _hr = get_CovariancePointingContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePointingContourPtr(_result, false);
}

IAgVeVOPassPtr _IAgSaVO::GetPass ( ) {
    struct IAgVeVOPass * _result = 0;
    HRESULT _hr = get_Pass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOPassPtr(_result, false);
}

IAgVOOffsetPtr _IAgSaVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr _IAgSaVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr _IAgSaVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr _IAgSaVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgSaVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr _IAgSaVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVeVOOrbitDropLinesPtr _IAgSaVO::GetDropLines ( ) {
    struct IAgVeVOOrbitDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOOrbitDropLinesPtr(_result, false);
}

IAgVeVOBPlanesPtr _IAgSaVO::GetBPlanes ( ) {
    struct IAgVeVOBPlanes * _result = 0;
    HRESULT _hr = get_BPlanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOBPlanesPtr(_result, false);
}

IAgVOVaporTrailPtr _IAgSaVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgVeScheduleTimesElement wrapper method implementations
//

_variant_t IAgVeScheduleTimesElement::GetStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeScheduleTimesElement::PutStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_Start(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgVeScheduleTimesElement::GetStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgVeScheduleTimesElement::PutStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_Stop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLinkToObjectPtr IAgVeScheduleTimesElement::GetTarget ( ) {
    struct IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLinkToObjectPtr(_result, false);
}

//
// interface IAgVeScheduleTimesCollection wrapper method implementations
//

long IAgVeScheduleTimesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeScheduleTimesElementPtr IAgVeScheduleTimesCollection::GetItem ( long Index ) {
    struct IAgVeScheduleTimesElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeScheduleTimesElementPtr(_result, false);
}

IUnknownPtr IAgVeScheduleTimesCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeScheduleTimesCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeScheduleTimesCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeScheduleTimesElementPtr IAgVeScheduleTimesCollection::Add ( _bstr_t TargetPath ) {
    struct IAgVeScheduleTimesElement * _result = 0;
    HRESULT _hr = raw_Add(TargetPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeScheduleTimesElementPtr(_result, false);
}

SAFEARRAY * IAgVeScheduleTimesCollection::GetAvailableTargets ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableTargets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgVeTargetTimes wrapper method implementations
//

VARIANT_BOOL _IAgVeTargetTimes::GetUseAccessTimes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAccessTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeTargetTimes::PutUseAccessTimes ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAccessTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessTimeCollectionPtr _IAgVeTargetTimes::GetAccessTimes ( ) {
    struct IAgAccessTimeCollection * _result = 0;
    HRESULT _hr = get_AccessTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessTimeCollectionPtr(_result, false);
}

IAgVeScheduleTimesCollectionPtr _IAgVeTargetTimes::GetScheduleTimes ( ) {
    struct IAgVeScheduleTimesCollection * _result = 0;
    HRESULT _hr = get_ScheduleTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeScheduleTimesCollectionPtr(_result, false);
}

HRESULT _IAgVeTargetTimes::Deconflict ( ) {
    HRESULT _hr = raw_Deconflict();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeTargetTimes wrapper method implementations
//

VARIANT_BOOL IAgVeTargetTimes::GetUseAccessTimes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAccessTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeTargetTimes::PutUseAccessTimes ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseAccessTimes(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessTimeCollectionPtr IAgVeTargetTimes::GetAccessTimes ( ) {
    struct IAgAccessTimeCollection * _result = 0;
    HRESULT _hr = get_AccessTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessTimeCollectionPtr(_result, false);
}

IAgVeScheduleTimesCollectionPtr IAgVeTargetTimes::GetScheduleTimes ( ) {
    struct IAgVeScheduleTimesCollection * _result = 0;
    HRESULT _hr = get_ScheduleTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeScheduleTimesCollectionPtr(_result, false);
}

HRESULT IAgVeTargetTimes::Deconflict ( ) {
    HRESULT _hr = raw_Deconflict();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgVeTargetPointingIntervalCollection wrapper method implementations
//

long IAgVeTargetPointingIntervalCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeScheduleTimesElementPtr IAgVeTargetPointingIntervalCollection::GetItem ( long Index ) {
    struct IAgVeScheduleTimesElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeScheduleTimesElementPtr(_result, false);
}

IUnknownPtr IAgVeTargetPointingIntervalCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeTargetPointingIntervalCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeTargetPointingIntervalCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeScheduleTimesElementPtr IAgVeTargetPointingIntervalCollection::Add ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    struct IAgVeScheduleTimesElement * _result = 0;
    HRESULT _hr = raw_Add(StartTime, StopTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeScheduleTimesElementPtr(_result, false);
}

//
// interface IAgVeTargetPointingElement wrapper method implementations
//

IAgLinkToObjectPtr IAgVeTargetPointingElement::GetTarget ( ) {
    struct IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLinkToObjectPtr(_result, false);
}

STKUtil::IAgDirectionPtr IAgVeTargetPointingElement::GetAlignedVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_AlignedVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

STKUtil::IAgDirectionPtr IAgVeTargetPointingElement::GetConstrainedVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_ConstrainedVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

_bstr_t IAgVeTargetPointingElement::GetConstrainedVectorReference ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstrainedVectorReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgVeTargetPointingElement::PutConstrainedVectorReference ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstrainedVectorReference(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgVeTargetPointingElement::ResetConstrainedVectorReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ResetConstrainedVectorReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgVeTargetPointingElement::GetAvailableConstrainedVectors ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableConstrainedVectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeTargetPointingElement::GetLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeTargetPointingElement::GetLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgVeTargetPointingElement::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeTargetPointingIntervalCollectionPtr IAgVeTargetPointingElement::GetIntervals ( ) {
    struct IAgVeTargetPointingIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTargetPointingIntervalCollectionPtr(_result, false);
}

//
// interface IAgVeTargetPointingCollection wrapper method implementations
//

long IAgVeTargetPointingCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeTargetPointingElementPtr IAgVeTargetPointingCollection::GetItem ( long Index ) {
    struct IAgVeTargetPointingElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTargetPointingElementPtr(_result, false);
}

IUnknownPtr IAgVeTargetPointingCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgVeTargetPointingCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgVeTargetPointingCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeTargetPointingElementPtr IAgVeTargetPointingCollection::Add ( _bstr_t ShortPath ) {
    struct IAgVeTargetPointingElement * _result = 0;
    HRESULT _hr = raw_Add(ShortPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTargetPointingElementPtr(_result, false);
}

SAFEARRAY * IAgVeTargetPointingCollection::GetAvailableTargets ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableTargets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgVeTargetPointingCollection::Contains ( _bstr_t Path ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgVeTargetPointingCollection::Remove ( _bstr_t Path ) {
    HRESULT _hr = raw_Remove(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeTargetPointingElementPtr IAgVeTargetPointingCollection::AddPositionAsTarget ( double Latitude, double Longitude, double Altitude ) {
    struct IAgVeTargetPointingElement * _result = 0;
    HRESULT _hr = raw_AddPositionAsTarget(Latitude, Longitude, Altitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTargetPointingElementPtr(_result, false);
}

//
// interface _IAgVeAttPointing wrapper method implementations
//

VARIANT_BOOL _IAgVeAttPointing::GetUseTargetPointing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTargetPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAttPointing::PutUseTargetPointing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTargetPointing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeTargetPointingCollectionPtr _IAgVeAttPointing::GetTargets ( ) {
    struct IAgVeTargetPointingCollection * _result = 0;
    HRESULT _hr = get_Targets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTargetPointingCollectionPtr(_result, false);
}

IAgVeTargetTimesPtr _IAgVeAttPointing::GetTargetTimes ( ) {
    struct IAgVeTargetTimes * _result = 0;
    HRESULT _hr = get_TargetTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTargetTimesPtr(_result, false);
}

VARIANT_BOOL _IAgVeAttPointing::GetMatchAngularVelocity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchAngularVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAttPointing::PutMatchAngularVelocity ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MatchAngularVelocity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgVeAttPointing::GetSlewTime ( ) {
    double _result = 0;
    HRESULT _hr = get_SlewTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeAttPointing::PutSlewTime ( double pVal ) {
    HRESULT _hr = put_SlewTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeAccessAdvancedPtr _IAgVeAttPointing::GetAdvanced ( ) {
    struct IAgVeAccessAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAccessAdvancedPtr(_result, false);
}

//
// interface IAgVePointing wrapper method implementations
//

VARIANT_BOOL IAgVePointing::GetUseTargetPointing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTargetPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVePointing::PutUseTargetPointing ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTargetPointing(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeTargetPointingCollectionPtr IAgVePointing::GetTargets ( ) {
    struct IAgVeTargetPointingCollection * _result = 0;
    HRESULT _hr = get_Targets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTargetPointingCollectionPtr(_result, false);
}

IAgVeTargetTimesPtr IAgVePointing::GetTargetTimes ( ) {
    struct IAgVeTargetTimes * _result = 0;
    HRESULT _hr = get_TargetTimes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTargetTimesPtr(_result, false);
}

//
// interface IAgVeAttPointing wrapper method implementations
//

VARIANT_BOOL IAgVeAttPointing::GetMatchAngularVelocity ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchAngularVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAttPointing::PutMatchAngularVelocity ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MatchAngularVelocity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgVeAttPointing::GetSlewTime ( ) {
    double _result = 0;
    HRESULT _hr = get_SlewTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgVeAttPointing::PutSlewTime ( double pVal ) {
    HRESULT _hr = put_SlewTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeAccessAdvancedPtr IAgVeAttPointing::GetAdvanced ( ) {
    struct IAgVeAccessAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAccessAdvancedPtr(_result, false);
}

//
// interface _IAgVeTargetPointingElement wrapper method implementations
//

IAgLinkToObjectPtr _IAgVeTargetPointingElement::GetTarget ( ) {
    struct IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLinkToObjectPtr(_result, false);
}

STKUtil::IAgDirectionPtr _IAgVeTargetPointingElement::GetAlignedVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_AlignedVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

STKUtil::IAgDirectionPtr _IAgVeTargetPointingElement::GetConstrainedVector ( ) {
    struct STKUtil::IAgDirection * _result = 0;
    HRESULT _hr = get_ConstrainedVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDirectionPtr(_result, false);
}

_bstr_t _IAgVeTargetPointingElement::GetConstrainedVectorReference ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConstrainedVectorReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVeTargetPointingElement::PutConstrainedVectorReference ( _bstr_t pVal ) {
    HRESULT _hr = put_ConstrainedVectorReference(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgVeTargetPointingElement::ResetConstrainedVectorReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ResetConstrainedVectorReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeTargetPointingElement::GetAvailableConstrainedVectors ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableConstrainedVectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeTargetPointingElement::GetLatitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Latitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeTargetPointingElement::GetLongitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Longitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgVeTargetPointingElement::GetAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Altitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeTargetPointingIntervalCollectionPtr _IAgVeTargetPointingElement::GetIntervals ( ) {
    struct IAgVeTargetPointingIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTargetPointingIntervalCollectionPtr(_result, false);
}

//
// interface _IAgVeScheduleTimesElement wrapper method implementations
//

_variant_t _IAgVeScheduleTimesElement::GetStart ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeScheduleTimesElement::PutStart ( const _variant_t & pVal ) {
    HRESULT _hr = put_Start(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgVeScheduleTimesElement::GetStop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgVeScheduleTimesElement::PutStop ( const _variant_t & pVal ) {
    HRESULT _hr = put_Stop(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLinkToObjectPtr _IAgVeScheduleTimesElement::GetTarget ( ) {
    struct IAgLinkToObject * _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVeTrajectoryAttitudeStandard wrapper method implementations
//

enum AgEAttitudeStandardType _IAgVeTrajectoryAttitudeStandard::GetType ( ) {
    enum AgEAttitudeStandardType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeStandardBasicPtr _IAgVeTrajectoryAttitudeStandard::GetBasic ( ) {
    struct IAgVeStandardBasic * _result = 0;
    HRESULT _hr = get_Basic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStandardBasicPtr(_result, false);
}

IAgVeAttPointingPtr _IAgVeTrajectoryAttitudeStandard::GetPointing ( ) {
    struct IAgVeAttPointing * _result = 0;
    HRESULT _hr = get_Pointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttPointingPtr(_result, false);
}

IAgVeAttExternalPtr _IAgVeTrajectoryAttitudeStandard::GetExternal ( ) {
    struct IAgVeAttExternal * _result = 0;
    HRESULT _hr = get_External(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttExternalPtr(_result, false);
}

//
// interface IAgVeTrajectoryAttitudeStandard wrapper method implementations
//

IAgVeStandardBasicPtr IAgVeTrajectoryAttitudeStandard::GetBasic ( ) {
    struct IAgVeStandardBasic * _result = 0;
    HRESULT _hr = get_Basic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStandardBasicPtr(_result, false);
}

IAgVeAttPointingPtr IAgVeTrajectoryAttitudeStandard::GetPointing ( ) {
    struct IAgVeAttPointing * _result = 0;
    HRESULT _hr = get_Pointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttPointingPtr(_result, false);
}

IAgVeAttExternalPtr IAgVeTrajectoryAttitudeStandard::GetExternal ( ) {
    struct IAgVeAttExternal * _result = 0;
    HRESULT _hr = get_External(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttExternalPtr(_result, false);
}

//
// interface _IAgVeOrbitAttitudeStandard wrapper method implementations
//

enum AgEAttitudeStandardType _IAgVeOrbitAttitudeStandard::GetType ( ) {
    enum AgEAttitudeStandardType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeStandardBasicPtr _IAgVeOrbitAttitudeStandard::GetBasic ( ) {
    struct IAgVeStandardBasic * _result = 0;
    HRESULT _hr = get_Basic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStandardBasicPtr(_result, false);
}

IAgVeAttPointingPtr _IAgVeOrbitAttitudeStandard::GetPointing ( ) {
    struct IAgVeAttPointing * _result = 0;
    HRESULT _hr = get_Pointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttPointingPtr(_result, false);
}

IAgVeAttExternalPtr _IAgVeOrbitAttitudeStandard::GetExternal ( ) {
    struct IAgVeAttExternal * _result = 0;
    HRESULT _hr = get_External(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttExternalPtr(_result, false);
}

IAgVeIntegratedAttitudePtr _IAgVeOrbitAttitudeStandard::GetIntegratedAttitude ( ) {
    struct IAgVeIntegratedAttitude * _result = 0;
    HRESULT _hr = get_IntegratedAttitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeIntegratedAttitudePtr(_result, false);
}

//
// interface IAgVeOrbitAttitudeStandard wrapper method implementations
//

IAgVeStandardBasicPtr IAgVeOrbitAttitudeStandard::GetBasic ( ) {
    struct IAgVeStandardBasic * _result = 0;
    HRESULT _hr = get_Basic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeStandardBasicPtr(_result, false);
}

IAgVeAttPointingPtr IAgVeOrbitAttitudeStandard::GetPointing ( ) {
    struct IAgVeAttPointing * _result = 0;
    HRESULT _hr = get_Pointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttPointingPtr(_result, false);
}

IAgVeAttExternalPtr IAgVeOrbitAttitudeStandard::GetExternal ( ) {
    struct IAgVeAttExternal * _result = 0;
    HRESULT _hr = get_External(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttExternalPtr(_result, false);
}

IAgVeIntegratedAttitudePtr IAgVeOrbitAttitudeStandard::GetIntegratedAttitude ( ) {
    struct IAgVeIntegratedAttitude * _result = 0;
    HRESULT _hr = get_IntegratedAttitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeIntegratedAttitudePtr(_result, false);
}

//
// interface _IAgVeGfxAttributesAccess wrapper method implementations
//

IAgObjectLinkCollectionPtr _IAgVeGfxAttributesAccess::GetAccessObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_AccessObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr _IAgVeGfxAttributesAccess::GetDuringAccess ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_DuringAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr _IAgVeGfxAttributesAccess::GetNoAccess ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_NoAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

//
// interface IAgVeGfxAttributesAccess wrapper method implementations
//

IAgObjectLinkCollectionPtr IAgVeGfxAttributesAccess::GetAccessObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_AccessObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr IAgVeGfxAttributesAccess::GetDuringAccess ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_DuringAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

IAgVeGfxAttributesBasicPtr IAgVeGfxAttributesAccess::GetNoAccess ( ) {
    struct IAgVeGfxAttributesBasic * _result = 0;
    HRESULT _hr = get_NoAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGfxAttributesBasicPtr(_result, false);
}

//
// interface _IAgVOPointableElementsElement wrapper method implementations
//

_bstr_t _IAgVOPointableElementsElement::GetPointingName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PointingName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgVOPointableElementsElement::PutPointingName ( _bstr_t pVal ) {
    HRESULT _hr = put_PointingName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgLinkToObjectPtr _IAgVOPointableElementsElement::GetAssignedTargetObject ( ) {
    struct IAgLinkToObject * _result = 0;
    HRESULT _hr = get_AssignedTargetObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLinkToObjectPtr(_result, false);
}

IAgIntervalCollectionPtr _IAgVOPointableElementsElement::GetIntervals ( ) {
    struct IAgIntervalCollection * _result = 0;
    HRESULT _hr = get_Intervals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgIntervalCollectionPtr(_result, false);
}

//
// interface _IAgVeVOCovariancePointingContour wrapper method implementations
//

enum AgEVeVOSigmaScale _IAgVeVOCovariancePointingContour::GetSigmaScaleType ( ) {
    enum AgEVeVOSigmaScale _result;
    HRESULT _hr = get_SigmaScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOCovariancePointingContour::SetSigmaScaleType ( enum AgEVeVOSigmaScale SigmaScale ) {
    HRESULT _hr = raw_SetSigmaScaleType(SigmaScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeVOCovariancePointingContour::IsSigmaScaleTypeSupported ( enum AgEVeVOSigmaScale SigmaScale ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSigmaScaleTypeSupported(SigmaScale, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeVOCovariancePointingContour::GetSigmaScaleSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SigmaScaleSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOSigmaScalePtr _IAgVeVOCovariancePointingContour::GetSigmaScale ( ) {
    struct IAgVeVOSigmaScale * _result = 0;
    HRESULT _hr = get_SigmaScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSigmaScalePtr(_result, false);
}

enum AgEVeVOAttributes _IAgVeVOCovariancePointingContour::GetAttributesType ( ) {
    enum AgEVeVOAttributes _result;
    HRESULT _hr = get_AttributesType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgVeVOCovariancePointingContour::SetAttributesType ( enum AgEVeVOAttributes Attributes ) {
    HRESULT _hr = raw_SetAttributesType(Attributes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgVeVOCovariancePointingContour::IsAttributesTypeSupported ( enum AgEVeVOAttributes Attributes ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttributesTypeSupported(Attributes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgVeVOCovariancePointingContour::GetAttributesSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttributesSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeVOAttributesPtr _IAgVeVOCovariancePointingContour::GetAttributes ( ) {
    struct IAgVeVOAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOAttributesPtr(_result, false);
}

VARIANT_BOOL _IAgVeVOCovariancePointingContour::GetIsConeVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgVeVOCovariancePointingContour::PutIsConeVisible ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsConeVisible(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgVeVOSizePtr _IAgVeVOCovariancePointingContour::GetSize ( ) {
    struct IAgVeVOSize * _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSizePtr(_result, false);
}

IAgLinkToObjectPtr _IAgVeVOCovariancePointingContour::GetToObject ( ) {
    struct IAgLinkToObject * _result = 0;
    HRESULT _hr = get_ToObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLinkToObjectPtr(_result, false);
}

//
// interface _IAgVOModelPointing wrapper method implementations
//

IAgVOPointableElementsCollectionPtr _IAgVOModelPointing::GetPointableElements ( ) {
    struct IAgVOPointableElementsCollection * _result = 0;
    HRESULT _hr = get_PointableElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOPointableElementsCollectionPtr(_result, false);
}

HRESULT _IAgVOModelPointing::AddInterval ( _bstr_t AttachPointName, _bstr_t TargetName, const _variant_t & Start, const _variant_t & Stop ) {
    HRESULT _hr = raw_AddInterval(AttachPointName, TargetName, Start, Stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVOModelPointing::RemoveInterval ( _bstr_t AttachPointName, _bstr_t TargetName ) {
    HRESULT _hr = raw_RemoveInterval(AttachPointName, TargetName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgVOModelPointing::LoadIntervals ( _bstr_t Filename, _bstr_t AttachPoint ) {
    HRESULT _hr = raw_LoadIntervals(Filename, AttachPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgLvVO wrapper method implementations
//

IAgVeTrajectoryVOModelPtr IAgLvVO::GetModel ( ) {
    struct IAgVeTrajectoryVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTrajectoryVOModelPtr(_result, false);
}

IAgVeVOSystemsCollectionPtr IAgLvVO::GetTrajectorySystems ( ) {
    struct IAgVeVOSystemsCollection * _result = 0;
    HRESULT _hr = get_TrajectorySystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsCollectionPtr(_result, false);
}

IAgVeVOTrajectoryProximityPtr IAgLvVO::GetProximity ( ) {
    struct IAgVeVOTrajectoryProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryProximityPtr(_result, false);
}

IAgVeVOElevContoursPtr IAgLvVO::GetElevContours ( ) {
    struct IAgVeVOElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOElevContoursPtr(_result, false);
}

IAgVeVOCovariancePointingContourPtr IAgLvVO::GetCovariancePointingContour ( ) {
    struct IAgVeVOCovariancePointingContour * _result = 0;
    HRESULT _hr = get_CovariancePointingContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePointingContourPtr(_result, false);
}

IAgVeVOTrajectoryPtr IAgLvVO::GetTrajectory ( ) {
    struct IAgVeVOTrajectory * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryPtr(_result, false);
}

IAgVOOffsetPtr IAgLvVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr IAgLvVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr IAgLvVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr IAgLvVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr IAgLvVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr IAgLvVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVeVOTrajectoryDropLinesPtr IAgLvVO::GetDropLines ( ) {
    struct IAgVeVOTrajectoryDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryDropLinesPtr(_result, false);
}

IAgVOVaporTrailPtr IAgLvVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

IAgVeVOSAAPtr IAgLvVO::GetSAA ( ) {
    struct IAgVeVOSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSAAPtr(_result, false);
}

//
// interface IAgLaunchVehicle wrapper method implementations
//

enum AgEVePropagatorType IAgLaunchVehicle::GetTrajectoryType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_TrajectoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgLaunchVehicle::SetTrajectoryType ( enum AgEVePropagatorType Trajectory ) {
    HRESULT _hr = raw_SetTrajectoryType(Trajectory);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgLaunchVehicle::IsTrajectoryTypeSupported ( enum AgEVePropagatorType Trajectory ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrajectoryTypeSupported(Trajectory, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgLaunchVehicle::GetTrajectorySupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TrajectorySupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVePropagatorPtr IAgLaunchVehicle::GetTrajectory ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude IAgLaunchVehicle::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgLaunchVehicle::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgLaunchVehicle::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgLaunchVehicle::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr IAgLaunchVehicle::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgLvGraphicsPtr IAgLaunchVehicle::GetGraphics ( ) {
    struct IAgLvGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLvGraphicsPtr(_result, false);
}

IAgLvVOPtr IAgLaunchVehicle::GetVO ( ) {
    struct IAgLvVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLvVOPtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr IAgLaunchVehicle::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgLaunchVehicle::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgLvExportToolsPtr IAgLaunchVehicle::GetExportTools ( ) {
    struct IAgLvExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLvExportToolsPtr(_result, false);
}

IAgVeSpEnvSpaceEnvironmentPtr IAgLaunchVehicle::GetSpaceEnvironment ( ) {
    struct IAgVeSpEnvSpaceEnvironment * _result = 0;
    HRESULT _hr = get_SpaceEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvSpaceEnvironmentPtr(_result, false);
}

//
// interface _IAgLvVO wrapper method implementations
//

IAgVeTrajectoryVOModelPtr _IAgLvVO::GetModel ( ) {
    struct IAgVeTrajectoryVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTrajectoryVOModelPtr(_result, false);
}

IAgVeVOSystemsCollectionPtr _IAgLvVO::GetTrajectorySystems ( ) {
    struct IAgVeVOSystemsCollection * _result = 0;
    HRESULT _hr = get_TrajectorySystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsCollectionPtr(_result, false);
}

IAgVeVOTrajectoryProximityPtr _IAgLvVO::GetProximity ( ) {
    struct IAgVeVOTrajectoryProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryProximityPtr(_result, false);
}

IAgVeVOElevContoursPtr _IAgLvVO::GetElevContours ( ) {
    struct IAgVeVOElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOElevContoursPtr(_result, false);
}

IAgVeVOCovariancePointingContourPtr _IAgLvVO::GetCovariancePointingContour ( ) {
    struct IAgVeVOCovariancePointingContour * _result = 0;
    HRESULT _hr = get_CovariancePointingContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePointingContourPtr(_result, false);
}

IAgVeVOTrajectoryPtr _IAgLvVO::GetTrajectory ( ) {
    struct IAgVeVOTrajectory * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryPtr(_result, false);
}

IAgVOOffsetPtr _IAgLvVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr _IAgLvVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr _IAgLvVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr _IAgLvVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgLvVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr _IAgLvVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVeVOTrajectoryDropLinesPtr _IAgLvVO::GetDropLines ( ) {
    struct IAgVeVOTrajectoryDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryDropLinesPtr(_result, false);
}

IAgVOVaporTrailPtr _IAgLvVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

IAgVeVOSAAPtr _IAgLvVO::GetSAA ( ) {
    struct IAgVeVOSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSAAPtr(_result, false);
}

//
// interface IAgGreatArcVO wrapper method implementations
//

IAgVeRouteVOModelPtr IAgGreatArcVO::GetModel ( ) {
    struct IAgVeRouteVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRouteVOModelPtr(_result, false);
}

IAgVeVORoutePtr IAgGreatArcVO::GetRoute ( ) {
    struct IAgVeVORoute * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORoutePtr(_result, false);
}

IAgVOOffsetPtr IAgGreatArcVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr IAgGreatArcVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr IAgGreatArcVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr IAgGreatArcVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr IAgGreatArcVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr IAgGreatArcVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

//
// interface IAgGvVO wrapper method implementations
//

IAgVOVaporTrailPtr IAgGvVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgGroundVehicle wrapper method implementations
//

IAgGvGraphicsPtr IAgGroundVehicle::GetGraphics ( ) {
    struct IAgGvGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGvGraphicsPtr(_result, false);
}

IAgGvVOPtr IAgGroundVehicle::GetVO ( ) {
    struct IAgGvVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGvVOPtr(_result, false);
}

IAgGvExportToolsPtr IAgGroundVehicle::GetExportTools ( ) {
    struct IAgGvExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGvExportToolsPtr(_result, false);
}

//
// interface _IAgGvVO wrapper method implementations
//

IAgVeRouteVOModelPtr _IAgGvVO::GetModel ( ) {
    struct IAgVeRouteVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRouteVOModelPtr(_result, false);
}

IAgVeVORoutePtr _IAgGvVO::GetRoute ( ) {
    struct IAgVeVORoute * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORoutePtr(_result, false);
}

IAgVOOffsetPtr _IAgGvVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr _IAgGvVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr _IAgGvVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr _IAgGvVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgGvVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr _IAgGvVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVOVaporTrailPtr _IAgGvVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgMsVO wrapper method implementations
//

IAgVeTrajectoryVOModelPtr IAgMsVO::GetModel ( ) {
    struct IAgVeTrajectoryVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTrajectoryVOModelPtr(_result, false);
}

IAgVeVOTrajectoryProximityPtr IAgMsVO::GetProximity ( ) {
    struct IAgVeVOTrajectoryProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryProximityPtr(_result, false);
}

IAgVeVOElevContoursPtr IAgMsVO::GetElevContours ( ) {
    struct IAgVeVOElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOElevContoursPtr(_result, false);
}

IAgVeVOCovariancePointingContourPtr IAgMsVO::GetCovariancePointingContour ( ) {
    struct IAgVeVOCovariancePointingContour * _result = 0;
    HRESULT _hr = get_CovariancePointingContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePointingContourPtr(_result, false);
}

IAgVeVOSystemsCollectionPtr IAgMsVO::GetTrajectorySystems ( ) {
    struct IAgVeVOSystemsCollection * _result = 0;
    HRESULT _hr = get_TrajectorySystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsCollectionPtr(_result, false);
}

IAgVeVOTrajectoryPtr IAgMsVO::GetTrajectory ( ) {
    struct IAgVeVOTrajectory * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryPtr(_result, false);
}

IAgVOOffsetPtr IAgMsVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr IAgMsVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr IAgMsVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr IAgMsVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr IAgMsVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr IAgMsVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVeVOTrajectoryDropLinesPtr IAgMsVO::GetDropLines ( ) {
    struct IAgVeVOTrajectoryDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryDropLinesPtr(_result, false);
}

IAgVOVaporTrailPtr IAgMsVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

IAgVeVOSAAPtr IAgMsVO::GetSAA ( ) {
    struct IAgVeVOSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSAAPtr(_result, false);
}

//
// interface IAgMissile wrapper method implementations
//

enum AgEVePropagatorType IAgMissile::GetTrajectoryType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_TrajectoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgMissile::SetTrajectoryType ( enum AgEVePropagatorType Propagator ) {
    HRESULT _hr = raw_SetTrajectoryType(Propagator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgMissile::IsTrajectoryTypeSupported ( enum AgEVePropagatorType Propagator ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrajectoryTypeSupported(Propagator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgMissile::GetTrajectorySupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TrajectorySupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVePropagatorPtr IAgMissile::GetTrajectory ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude IAgMissile::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgMissile::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgMissile::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgMissile::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr IAgMissile::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgMsGraphicsPtr IAgMissile::GetGraphics ( ) {
    struct IAgMsGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMsGraphicsPtr(_result, false);
}

IAgMsVOPtr IAgMissile::GetVO ( ) {
    struct IAgMsVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMsVOPtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr IAgMissile::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr IAgMissile::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgMsExportToolsPtr IAgMissile::GetExportTools ( ) {
    struct IAgMsExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMsExportToolsPtr(_result, false);
}

IAgVeSpEnvSpaceEnvironmentPtr IAgMissile::GetSpaceEnvironment ( ) {
    struct IAgVeSpEnvSpaceEnvironment * _result = 0;
    HRESULT _hr = get_SpaceEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvSpaceEnvironmentPtr(_result, false);
}

//
// interface _IAgMsVO wrapper method implementations
//

IAgVeTrajectoryVOModelPtr _IAgMsVO::GetModel ( ) {
    struct IAgVeTrajectoryVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeTrajectoryVOModelPtr(_result, false);
}

IAgVeVOTrajectoryProximityPtr _IAgMsVO::GetProximity ( ) {
    struct IAgVeVOTrajectoryProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryProximityPtr(_result, false);
}

IAgVeVOElevContoursPtr _IAgMsVO::GetElevContours ( ) {
    struct IAgVeVOElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOElevContoursPtr(_result, false);
}

IAgVeVOCovariancePointingContourPtr _IAgMsVO::GetCovariancePointingContour ( ) {
    struct IAgVeVOCovariancePointingContour * _result = 0;
    HRESULT _hr = get_CovariancePointingContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePointingContourPtr(_result, false);
}

IAgVeVOSystemsCollectionPtr _IAgMsVO::GetTrajectorySystems ( ) {
    struct IAgVeVOSystemsCollection * _result = 0;
    HRESULT _hr = get_TrajectorySystems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSystemsCollectionPtr(_result, false);
}

IAgVeVOTrajectoryPtr _IAgMsVO::GetTrajectory ( ) {
    struct IAgVeVOTrajectory * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryPtr(_result, false);
}

IAgVOOffsetPtr _IAgMsVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr _IAgMsVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr _IAgMsVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr _IAgMsVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgMsVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr _IAgMsVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVeVOTrajectoryDropLinesPtr _IAgMsVO::GetDropLines ( ) {
    struct IAgVeVOTrajectoryDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOTrajectoryDropLinesPtr(_result, false);
}

IAgVOVaporTrailPtr _IAgMsVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

IAgVeVOSAAPtr _IAgMsVO::GetSAA ( ) {
    struct IAgVeVOSAA * _result = 0;
    HRESULT _hr = get_SAA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOSAAPtr(_result, false);
}

//
// interface IAgAcVO wrapper method implementations
//

IAgVeVORouteProximityPtr IAgAcVO::GetProximity ( ) {
    struct IAgVeVORouteProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORouteProximityPtr(_result, false);
}

IAgVeVOElevContoursPtr IAgAcVO::GetElevContours ( ) {
    struct IAgVeVOElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOElevContoursPtr(_result, false);
}

IAgVeVOCovariancePointingContourPtr IAgAcVO::GetCovariancePointingContour ( ) {
    struct IAgVeVOCovariancePointingContour * _result = 0;
    HRESULT _hr = get_CovariancePointingContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePointingContourPtr(_result, false);
}

IAgVeVORouteDropLinesPtr IAgAcVO::GetDropLines ( ) {
    struct IAgVeVORouteDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORouteDropLinesPtr(_result, false);
}

IAgVOVaporTrailPtr IAgAcVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgAircraft wrapper method implementations
//

IAgAcGraphicsPtr IAgAircraft::GetGraphics ( ) {
    struct IAgAcGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAcGraphicsPtr(_result, false);
}

IAgAcVOPtr IAgAircraft::GetVO ( ) {
    struct IAgAcVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAcVOPtr(_result, false);
}

IAgAcExportToolsPtr IAgAircraft::GetExportTools ( ) {
    struct IAgAcExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAcExportToolsPtr(_result, false);
}

//
// interface _IAgAcVO wrapper method implementations
//

IAgVeRouteVOModelPtr _IAgAcVO::GetModel ( ) {
    struct IAgVeRouteVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRouteVOModelPtr(_result, false);
}

IAgVeVORouteProximityPtr _IAgAcVO::GetProximity ( ) {
    struct IAgVeVORouteProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORouteProximityPtr(_result, false);
}

IAgVeVOElevContoursPtr _IAgAcVO::GetElevContours ( ) {
    struct IAgVeVOElevContours * _result = 0;
    HRESULT _hr = get_ElevContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOElevContoursPtr(_result, false);
}

IAgVeVOCovariancePointingContourPtr _IAgAcVO::GetCovariancePointingContour ( ) {
    struct IAgVeVOCovariancePointingContour * _result = 0;
    HRESULT _hr = get_CovariancePointingContour(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePointingContourPtr(_result, false);
}

IAgVeVORoutePtr _IAgAcVO::GetRoute ( ) {
    struct IAgVeVORoute * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORoutePtr(_result, false);
}

IAgVOOffsetPtr _IAgAcVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr _IAgAcVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr _IAgAcVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr _IAgAcVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgAcVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr _IAgAcVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVeVORouteDropLinesPtr _IAgAcVO::GetDropLines ( ) {
    struct IAgVeVORouteDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORouteDropLinesPtr(_result, false);
}

IAgVOVaporTrailPtr _IAgAcVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgShVO wrapper method implementations
//

IAgVeVORouteProximityPtr IAgShVO::GetProximity ( ) {
    struct IAgVeVORouteProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORouteProximityPtr(_result, false);
}

IAgVeVORouteDropLinesPtr IAgShVO::GetDropLines ( ) {
    struct IAgVeVORouteDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORouteDropLinesPtr(_result, false);
}

IAgVOVaporTrailPtr IAgShVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface IAgShip wrapper method implementations
//

IAgShGraphicsPtr IAgShip::GetGraphics ( ) {
    struct IAgShGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgShGraphicsPtr(_result, false);
}

IAgShVOPtr IAgShip::GetVO ( ) {
    struct IAgShVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgShVOPtr(_result, false);
}

IAgShExportToolsPtr IAgShip::GetExportTools ( ) {
    struct IAgShExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgShExportToolsPtr(_result, false);
}

//
// interface _IAgShVO wrapper method implementations
//

IAgVeRouteVOModelPtr _IAgShVO::GetModel ( ) {
    struct IAgVeRouteVOModel * _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeRouteVOModelPtr(_result, false);
}

IAgVeVORouteProximityPtr _IAgShVO::GetProximity ( ) {
    struct IAgVeVORouteProximity * _result = 0;
    HRESULT _hr = get_Proximity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORouteProximityPtr(_result, false);
}

IAgVeVORoutePtr _IAgShVO::GetRoute ( ) {
    struct IAgVeVORoute * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORoutePtr(_result, false);
}

IAgVOOffsetPtr _IAgShVO::GetOffsets ( ) {
    struct IAgVOOffset * _result = 0;
    HRESULT _hr = get_Offsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOOffsetPtr(_result, false);
}

IAgVORangeContoursPtr _IAgShVO::GetRangeContours ( ) {
    struct IAgVORangeContours * _result = 0;
    HRESULT _hr = get_RangeContours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVORangeContoursPtr(_result, false);
}

IAgVeVOCovariancePtr _IAgShVO::GetCovariance ( ) {
    struct IAgVeVOCovariance * _result = 0;
    HRESULT _hr = get_Covariance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVOCovariancePtr(_result, false);
}

IAgVOVectorPtr _IAgShVO::GetVector ( ) {
    struct IAgVOVector * _result = 0;
    HRESULT _hr = get_Vector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVectorPtr(_result, false);
}

IAgVODataDisplayCollectionPtr _IAgShVO::GetDataDisplay ( ) {
    struct IAgVODataDisplayCollection * _result = 0;
    HRESULT _hr = get_DataDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVODataDisplayCollectionPtr(_result, false);
}

IAgVOModelPointingPtr _IAgShVO::GetModelPointing ( ) {
    struct IAgVOModelPointing * _result = 0;
    HRESULT _hr = get_ModelPointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOModelPointingPtr(_result, false);
}

IAgVeVORouteDropLinesPtr _IAgShVO::GetDropLines ( ) {
    struct IAgVeVORouteDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeVORouteDropLinesPtr(_result, false);
}

IAgVOVaporTrailPtr _IAgShVO::GetVaporTrail ( ) {
    struct IAgVOVaporTrail * _result = 0;
    HRESULT _hr = get_VaporTrail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVOVaporTrailPtr(_result, false);
}

//
// interface _IAgCvBoundsCustomBoundary wrapper method implementations
//

IAgCvRegionFilesCollectionPtr _IAgCvBoundsCustomBoundary::GetRegionFiles ( ) {
    struct IAgCvRegionFilesCollection * _result = 0;
    HRESULT _hr = get_RegionFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvRegionFilesCollectionPtr(_result, false);
}

IAgObjectLinkCollectionPtr _IAgCvBoundsCustomBoundary::GetBoundaryObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_BoundaryObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

//
// interface IAgCvBoundsCustomBoundary wrapper method implementations
//

IAgCvRegionFilesCollectionPtr IAgCvBoundsCustomBoundary::GetRegionFiles ( ) {
    struct IAgCvRegionFilesCollection * _result = 0;
    HRESULT _hr = get_RegionFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvRegionFilesCollectionPtr(_result, false);
}

IAgObjectLinkCollectionPtr IAgCvBoundsCustomBoundary::GetBoundaryObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_BoundaryObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

//
// interface IAgChain wrapper method implementations
//

IAgObjectLinkCollectionPtr IAgChain::GetObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

VARIANT_BOOL IAgChain::GetAutoRecompute ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRecompute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChain::PutAutoRecompute ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoRecompute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEChTimePeriodType IAgChain::GetTimePeriodType ( ) {
    enum AgEChTimePeriodType _result;
    HRESULT _hr = get_TimePeriodType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgChain::SetTimePeriodType ( enum AgEChTimePeriodType TimePeriodType ) {
    HRESULT _hr = raw_SetTimePeriodType(TimePeriodType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgChTimePeriodBasePtr IAgChain::GetTimePeriod ( ) {
    struct IAgChTimePeriodBase * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChTimePeriodBasePtr(_result, false);
}

enum AgEDataSaveMode IAgChain::GetDataSaveMode ( ) {
    enum AgEDataSaveMode _result;
    HRESULT _hr = get_DataSaveMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChain::PutDataSaveMode ( enum AgEDataSaveMode pVal ) {
    HRESULT _hr = put_DataSaveMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgChain::SetAccessIntervalsFile ( _bstr_t Filename ) {
    HRESULT _hr = raw_SetAccessIntervalsFile(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgChain::ResetAccessIntervalsFile ( ) {
    HRESULT _hr = raw_ResetAccessIntervalsFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IAgChain::GetAccessIntervalsFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AccessIntervalsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgChain::GetEnableLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChain::PutEnableLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgChain::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChain::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgChain::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChain::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgChConstraintsPtr IAgChain::GetConstraints ( ) {
    struct IAgChConstraints * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChConstraintsPtr(_result, false);
}

IAgChGraphicsPtr IAgChain::GetGraphics ( ) {
    struct IAgChGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChGraphicsPtr(_result, false);
}

IAgChVOPtr IAgChain::GetVO ( ) {
    struct IAgChVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChVOPtr(_result, false);
}

HRESULT IAgChain::ComputeAccess ( ) {
    HRESULT _hr = raw_ComputeAccess();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgChain::ClearAccess ( ) {
    HRESULT _hr = raw_ClearAccess();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgAccessEventDetectionPtr IAgChain::GetEventDetection ( ) {
    struct IAgAccessEventDetection * _result = 0;
    HRESULT _hr = get_EventDetection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessEventDetectionPtr(_result, false);
}

IAgAccessSamplingPtr IAgChain::GetSampling ( ) {
    struct IAgAccessSampling * _result = 0;
    HRESULT _hr = get_Sampling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessSamplingPtr(_result, false);
}

VARIANT_BOOL IAgChain::GetDetectEventsBasedOnSamplesOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DetectEventsBasedOnSamplesOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgChain::PutDetectEventsBasedOnSamplesOnly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DetectEventsBasedOnSamplesOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkObjectModelContext wrapper method implementations
//

IAgStkObjectRootPtr _IAgStkObjectModelContext::Create ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = raw_Create(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgStkObjectRootPtr _IAgStkObjectModelContext::CreateRestrictive ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = raw_CreateRestrictive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

//
// interface IAgStkObjectModelContext wrapper method implementations
//

IAgStkObjectRootPtr IAgStkObjectModelContext::Create ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = raw_Create(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgStkObjectRootPtr IAgStkObjectModelContext::CreateRestrictive ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = raw_CreateRestrictive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

//
// interface IAgConstellation wrapper method implementations
//

IAgObjectLinkCollectionPtr IAgConstellation::GetObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

IAgCnConstraintsPtr IAgConstellation::GetConstraints ( ) {
    struct IAgCnConstraints * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCnConstraintsPtr(_result, false);
}

IAgCnGraphicsPtr IAgConstellation::GetGraphics ( ) {
    struct IAgCnGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCnGraphicsPtr(_result, false);
}

//
// interface IAgStkObjectCoverage wrapper method implementations
//

IAgDataProviderCollectionPtr IAgStkObjectCoverage::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_variant_t IAgStkObjectCoverage::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgStkObjectCoverage::PutStartTime ( const _variant_t & pStartTime ) {
    HRESULT _hr = put_StartTime(pStartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgStkObjectCoverage::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgStkObjectCoverage::PutStopTime ( const _variant_t & pStopTime ) {
    HRESULT _hr = put_StopTime(pStopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCvAssetListCollectionPtr IAgStkObjectCoverage::GetAssets ( ) {
    struct IAgCvAssetListCollection * _result = 0;
    HRESULT _hr = get_Assets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAssetListCollectionPtr(_result, false);
}

IAgObjectCoverageFOMPtr IAgStkObjectCoverage::GetFOM ( ) {
    struct IAgObjectCoverageFOM * _result = 0;
    HRESULT _hr = get_FOM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectCoverageFOMPtr(_result, false);
}

HRESULT IAgStkObjectCoverage::Compute ( ) {
    HRESULT _hr = raw_Compute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkObjectCoverage::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkObjectRoot wrapper method implementations
//

STKUtil::IAgExecCmdResultPtr _IAgStkObjectRoot::ExecuteCommand ( _bstr_t ConnectCommand ) {
    struct STKUtil::IAgExecCmdResult * _result = 0;
    HRESULT _hr = raw_ExecuteCommand(ConnectCommand, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgExecCmdResultPtr(_result, false);
}

HRESULT _IAgStkObjectRoot::LoadScenario ( _bstr_t Path ) {
    HRESULT _hr = raw_LoadScenario(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::CloseScenario ( ) {
    HRESULT _hr = raw_CloseScenario();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::NewScenario ( _bstr_t ScenarioName ) {
    HRESULT _hr = raw_NewScenario(ScenarioName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::SaveScenario ( ) {
    HRESULT _hr = raw_SaveScenario();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::SaveScenarioAs ( _bstr_t ScFileName ) {
    HRESULT _hr = raw_SaveScenarioAs(ScFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

STKUtil::IAgUnitPrefsDimCollectionPtr _IAgStkObjectRoot::GetUnitPreferences ( ) {
    struct STKUtil::IAgUnitPrefsDimCollection * _result = 0;
    HRESULT _hr = get_UnitPreferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgUnitPrefsDimCollectionPtr(_result, false);
}

IAgStkObjectPtr _IAgStkObjectRoot::GetCurrentScenario ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_CurrentScenario(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

HRESULT _IAgStkObjectRoot::LoadCustomMarker ( _bstr_t Filename ) {
    HRESULT _hr = raw_LoadCustomMarker(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgStkObjectRoot::AvailableMarkerTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_AvailableMarkerTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectPtr _IAgStkObjectRoot::GetObjectFromPath ( _bstr_t ObjectPath ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = raw_GetObjectFromPath(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgStkObjectRoot::AllInstanceNamesToXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AllInstanceNamesToXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT _IAgStkObjectRoot::BeginUpdate ( ) {
    HRESULT _hr = raw_BeginUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::EndUpdate ( ) {
    HRESULT _hr = raw_EndUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectPtr _IAgStkObjectRoot::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgStkObjectRoot::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkObjectRoot::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkObjectRoot::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgStkObjectRoot::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkObjectRoot::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgStkObjectRoot::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgStkObjectRoot::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgStkObjectRoot::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgStkObjectRoot::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgStkObjectRoot::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkObjectRoot::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkObjectRoot::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkObjectRoot::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkObjectRoot::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkObjectRoot::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgStkObjectRoot::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgStkObjectRoot::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgStkObjectRoot::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgStkObjectRoot::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgStkObjectRoot::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkObjectRoot::PlayForward ( ) {
    HRESULT _hr = raw_PlayForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::PlayBackward ( ) {
    HRESULT _hr = raw_PlayBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::Rewind ( ) {
    HRESULT _hr = raw_Rewind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::StepForward ( ) {
    HRESULT _hr = raw_StepForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::StepBackward ( ) {
    HRESULT _hr = raw_StepBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::Faster ( ) {
    HRESULT _hr = raw_Faster();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectRoot::Slower ( ) {
    HRESULT _hr = raw_Slower();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAnimationModes _IAgStkObjectRoot::GetMode ( ) {
    enum AgEAnimationModes _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkObjectRoot::PutMode ( enum AgEAnimationModes pRetVal ) {
    HRESULT _hr = put_Mode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkObjectRoot::GetCurrentTime ( ) {
    double _result = 0;
    HRESULT _hr = get_CurrentTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkObjectRoot::PutCurrentTime ( double pVal ) {
    HRESULT _hr = put_CurrentTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkObjectRoot::GetStep ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Step(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

STKUtil::IAgExecMultiCmdResultPtr _IAgStkObjectRoot::ExecuteMultipleCommands ( SAFEARRAY * * ConnectCommands, enum STKUtil::AgEExecMultiCmdResultAction Action ) {
    struct STKUtil::IAgExecMultiCmdResult * _result = 0;
    HRESULT _hr = raw_ExecuteMultipleCommands(ConnectCommands, Action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgExecMultiCmdResultPtr(_result, false);
}

HRESULT _IAgStkObjectRoot::Isolate ( ) {
    HRESULT _hr = raw_Isolate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkObjectRoot::GetIsolated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Isolated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

STKUtil::IAgConversionUtilityPtr _IAgStkObjectRoot::GetConversionUtility ( ) {
    struct STKUtil::IAgConversionUtility * _result = 0;
    HRESULT _hr = get_ConversionUtility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgConversionUtilityPtr(_result, false);
}

IAgStdMil2525bSymbolsPtr _IAgStkObjectRoot::GetStdMil2525bSymbols ( ) {
    struct IAgStdMil2525bSymbols * _result = 0;
    HRESULT _hr = get_StdMil2525bSymbols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStdMil2525bSymbolsPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgStkObjectRoot::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgOnePtAccessPtr _IAgStkObjectRoot::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

enum AgEAnimationOptions _IAgStkObjectRoot::GetAnimationOptions ( ) {
    enum AgEAnimationOptions _result;
    HRESULT _hr = get_AnimationOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkObjectRoot::PutAnimationOptions ( enum AgEAnimationOptions pRetVal ) {
    HRESULT _hr = put_AnimationOptions(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkObjectRoot::GetHighSpeed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HighSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkObjectRoot::PutHighSpeed ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_HighSpeed(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkObjectRoot::LoadVDF ( _bstr_t Path, _bstr_t Password ) {
    HRESULT _hr = raw_LoadVDF(Path, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgAvailableFeaturesPtr _IAgStkObjectRoot::GetAvailableFeatures ( ) {
    struct IAgAvailableFeatures * _result = 0;
    HRESULT _hr = get_AvailableFeatures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAvailableFeaturesPtr(_result, false);
}

VARIANT_BOOL _IAgStkObjectRoot::ObjectExists ( _bstr_t ObjectPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ObjectExists(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkObjectRoot::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkObjectRoot::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

AgSTKVgtLib::IAgCrdnRootPtr _IAgStkObjectRoot::GetVgtRoot ( ) {
    struct AgSTKVgtLib::IAgCrdnRoot * _result = 0;
    HRESULT _hr = get_VgtRoot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnRootPtr(_result, false);
}

IAgStkCentralBodyCollectionPtr _IAgStkObjectRoot::GetCentralBodies ( ) {
    struct IAgStkCentralBodyCollection * _result = 0;
    HRESULT _hr = get_CentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkCentralBodyCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgStkObjectRoot::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgStkObjectRoot::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgScenario wrapper method implementations
//

_variant_t _IAgScenario::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgScenario::PutStartTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgScenario::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgScenario::PutStopTime ( const _variant_t & pVal ) {
    HRESULT _hr = put_StopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgScenario::GetEpoch ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgScenario::PutEpoch ( const _variant_t & pVal ) {
    HRESULT _hr = put_Epoch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgScAnimationPtr _IAgScenario::GetAnimation ( ) {
    struct IAgScAnimation * _result = 0;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScAnimationPtr(_result, false);
}

IAgScEarthDataPtr _IAgScenario::GetEarthData ( ) {
    struct IAgScEarthData * _result = 0;
    HRESULT _hr = get_EarthData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScEarthDataPtr(_result, false);
}

IAgScGraphicsPtr _IAgScenario::GetGraphics ( ) {
    struct IAgScGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScGraphicsPtr(_result, false);
}

IAgTerrainCollectionPtr _IAgScenario::GetTerrainCollection ( ) {
    struct IAgTerrainCollection * _result = 0;
    HRESULT _hr = get_TerrainCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainCollectionPtr(_result, false);
}

IAgScGenDbCollectionPtr _IAgScenario::GetGenDbs ( ) {
    struct IAgScGenDbCollection * _result = 0;
    HRESULT _hr = get_GenDbs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScGenDbCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgScenario::GetSatNoOrbitWarning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SatNoOrbitWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScenario::PutSatNoOrbitWarning ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SatNoOrbitWarning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScenario::GetMslNoOrbitWarning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MslNoOrbitWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScenario::PutMslNoOrbitWarning ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MslNoOrbitWarning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgScVOPtr _IAgScenario::GetVO ( ) {
    struct IAgScVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgScVOPtr(_result, false);
}

HRESULT _IAgScenario::SetTimePeriod ( const _variant_t & StartTime, const _variant_t & StopTime ) {
    HRESULT _hr = raw_SetTimePeriod(StartTime, StopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectPtr _IAgScenario::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgScenario::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgScenario::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScenario::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgScenario::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgScenario::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgScenario::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgScenario::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgScenario::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgScenario::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgScenario::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScenario::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgScenario::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgScenario::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScenario::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgScenario::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgScenario::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgScenario::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgScenario::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgScenario::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgScenario::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEAcWGS84WarningType _IAgScenario::GetAcWGS84Warning ( ) {
    enum AgEAcWGS84WarningType _result;
    HRESULT _hr = get_AcWGS84Warning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScenario::PutAcWGS84Warning ( enum AgEAcWGS84WarningType pVal ) {
    HRESULT _hr = put_AcWGS84Warning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgScenario::GetMslStopTimeWarning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MslStopTimeWarning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScenario::PutMslStopTimeWarning ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_MslStopTimeWarning(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCentralBodyTerrainCollectionPtr _IAgScenario::GetTerrain ( ) {
    struct IAgCentralBodyTerrainCollection * _result = 0;
    HRESULT _hr = get_Terrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCentralBodyTerrainCollectionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgScenario::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

STKUtil::IAgComponentDirectoryPtr _IAgScenario::GetComponentDirectory ( ) {
    struct STKUtil::IAgComponentDirectory * _result = 0;
    HRESULT _hr = get_ComponentDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgComponentDirectoryPtr(_result, false);
}

SAFEARRAY * _IAgScenario::GetScenarioFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ScenarioFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgScenario::GetIsDirty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgTimePeriodPtr _IAgScenario::GetTimePeriod ( ) {
    struct IAgTimePeriod * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTimePeriodPtr(_result, false);
}

IAgOnePtAccessPtr _IAgScenario::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

VARIANT_BOOL _IAgScenario::GetUseAnalysisStartTimeForEpoch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAnalysisStartTimeForEpoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgScenario::PutUseAnalysisStartTimeForEpoch ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAnalysisStartTimeForEpoch(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgScenario::SetDirty ( ) {
    HRESULT _hr = raw_SetDirty();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgScenario::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgScenario::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSpEnvScenSpaceEnvironmentPtr _IAgScenario::GetSpaceEnvironment ( ) {
    struct IAgSpEnvScenSpaceEnvironment * _result = 0;
    HRESULT _hr = get_SpaceEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSpEnvScenSpaceEnvironmentPtr(_result, false);
}

VARIANT_BOOL _IAgScenario::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgScenario::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgAreaTarget wrapper method implementations
//

VARIANT_BOOL _IAgAreaTarget::GetUseLocalTimeOffset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAreaTarget::PutUseLocalTimeOffset ( VARIANT_BOOL pUseLocalTimeOffset ) {
    HRESULT _hr = put_UseLocalTimeOffset(pUseLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgAreaTarget::GetLocalTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_LocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAreaTarget::PutLocalTimeOffset ( double pLocalTimeOffset ) {
    HRESULT _hr = put_LocalTimeOffset(pLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAreaTarget::GetAutoCentroid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoCentroid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAreaTarget::PutAutoCentroid ( VARIANT_BOOL pAutoCentroid ) {
    HRESULT _hr = put_AutoCentroid(pAutoCentroid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgPositionPtr _IAgAreaTarget::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgAreaTarget::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgATGraphicsPtr _IAgAreaTarget::GetGraphics ( ) {
    struct IAgATGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgATGraphicsPtr(_result, false);
}

IAgATVOPtr _IAgAreaTarget::GetVO ( ) {
    struct IAgATVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgATVOPtr(_result, false);
}

enum AgEAreaType _IAgAreaTarget::GetAreaType ( ) {
    enum AgEAreaType _result;
    HRESULT _hr = get_AreaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAreaTarget::PutAreaType ( enum AgEAreaType pType ) {
    HRESULT _hr = put_AreaType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAreaTypeDataPtr _IAgAreaTarget::GetAreaTypeData ( ) {
    struct IAgAreaTypeData * _result = 0;
    HRESULT _hr = get_AreaTypeData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAreaTypeDataPtr(_result, false);
}

VARIANT_BOOL _IAgAreaTarget::GetUseTerrainData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrainData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAreaTarget::PutUseTerrainData ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseTerrainData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAreaTarget::GetAllowObjectAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowObjectAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgAreaTarget::PutAllowObjectAccess ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AllowObjectAccess(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkObjectPtr _IAgAreaTarget::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgAreaTarget::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgAreaTarget::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgAreaTarget::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgAreaTarget::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgAreaTarget::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgAreaTarget::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgAreaTarget::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgAreaTarget::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgAreaTarget::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgAreaTarget::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgAreaTarget::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAreaTarget::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgAreaTarget::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAreaTarget::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgAreaTarget::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgAreaTarget::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgAreaTarget::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgAreaTarget::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgAreaTarget::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgAreaTarget::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEDisplayTimesType _IAgAreaTarget::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAreaTarget::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgAreaTarget::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgAreaTarget::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgAreaTarget::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

IAgOnePtAccessPtr _IAgAreaTarget::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

IAgATCommonTasksPtr _IAgAreaTarget::GetCommonTasks ( ) {
    struct IAgATCommonTasks * _result = 0;
    HRESULT _hr = get_CommonTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgATCommonTasksPtr(_result, false);
}

SAFEARRAY * _IAgAreaTarget::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAreaTarget::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgAreaTarget::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgAreaTarget::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgFacility wrapper method implementations
//

VARIANT_BOOL _IAgFacility::GetUseLocalTimeOffset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFacility::PutUseLocalTimeOffset ( VARIANT_BOOL pUseLocalTimeOffset ) {
    HRESULT _hr = put_UseLocalTimeOffset(pUseLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgFacility::GetLocalTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_LocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFacility::PutLocalTimeOffset ( double pLocalTimeOffset ) {
    HRESULT _hr = put_LocalTimeOffset(pLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgFacility::GetUseTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFacility::PutUseTerrain ( VARIANT_BOOL pEnableTerrain ) {
    HRESULT _hr = put_UseTerrain(pEnableTerrain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgFacility::SetAzElMask ( enum AgEAzElMaskType Type, const _variant_t & Data ) {
    HRESULT _hr = raw_SetAzElMask(Type, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgFaGraphicsPtr _IAgFacility::GetGraphics ( ) {
    struct IAgFaGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFaGraphicsPtr(_result, false);
}

STKUtil::IAgPositionPtr _IAgFacility::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

void _IAgFacility::PutTerrainNorm ( enum AgETerrainNormType pType ) {
    HRESULT _hr = put_TerrainNorm(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgTerrainNormDataPtr _IAgFacility::GetTerrainNormData ( ) {
    struct IAgTerrainNormData * _result = 0;
    HRESULT _hr = get_TerrainNormData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainNormDataPtr(_result, false);
}

IAgFaVOPtr _IAgFacility::GetVO ( ) {
    struct IAgFaVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFaVOPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgFacility::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

HRESULT _IAgFacility::ResetAzElMask ( ) {
    HRESULT _hr = raw_ResetAzElMask();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAzElMaskType _IAgFacility::GetAzElMask ( ) {
    enum AgEAzElMaskType _result;
    HRESULT _hr = raw_GetAzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgFacility::GetAzElMaskData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAzElMaskData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum AgETerrainNormType _IAgFacility::GetTerrainNorm ( ) {
    enum AgETerrainNormType _result;
    HRESULT _hr = get_TerrainNorm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgFacility::GetHeightAboveGround ( ) {
    double _result = 0;
    HRESULT _hr = get_HeightAboveGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFacility::PutHeightAboveGround ( double pVal ) {
    HRESULT _hr = put_HeightAboveGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAltRefType _IAgFacility::GetAltRef ( ) {
    enum AgEAltRefType _result;
    HRESULT _hr = get_AltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgFacility::PutAltRef ( enum AgEAltRefType pVal ) {
    HRESULT _hr = put_AltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkObjectPtr _IAgFacility::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgFacility::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgFacility::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFacility::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgFacility::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgFacility::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgFacility::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgFacility::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgFacility::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgFacility::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgFacility::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFacility::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgFacility::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFacility::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgFacility::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgFacility::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgFacility::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgFacility::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgFacility::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgFacility::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgFacility::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEDisplayTimesType _IAgFacility::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFacility::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFacility::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFacility::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgFacility::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

IAgOnePtAccessPtr _IAgFacility::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgFacility::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFacility::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFacility::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgFacility::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgTarget wrapper method implementations
//

VARIANT_BOOL _IAgTarget::GetUseLocalTimeOffset ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseLocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTarget::PutUseLocalTimeOffset ( VARIANT_BOOL pUseLocalTimeOffset ) {
    HRESULT _hr = put_UseLocalTimeOffset(pUseLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgTarget::GetLocalTimeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_LocalTimeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTarget::PutLocalTimeOffset ( double pLocalTimeOffset ) {
    HRESULT _hr = put_LocalTimeOffset(pLocalTimeOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgTarget::GetUseTerrain ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTerrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTarget::PutUseTerrain ( VARIANT_BOOL pEnableTerrain ) {
    HRESULT _hr = put_UseTerrain(pEnableTerrain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgTarget::SetAzElMask ( enum AgEAzElMaskType Type, const _variant_t & Data ) {
    HRESULT _hr = raw_SetAzElMask(Type, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgTargetGraphicsPtr _IAgTarget::GetGraphics ( ) {
    struct IAgTargetGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTargetGraphicsPtr(_result, false);
}

STKUtil::IAgPositionPtr _IAgTarget::GetPosition ( ) {
    struct STKUtil::IAgPosition * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgPositionPtr(_result, false);
}

void _IAgTarget::PutTerrainNorm ( enum AgETerrainNormType pType ) {
    HRESULT _hr = put_TerrainNorm(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgTerrainNormDataPtr _IAgTarget::GetTerrainNormData ( ) {
    struct IAgTerrainNormData * _result = 0;
    HRESULT _hr = get_TerrainNormData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTerrainNormDataPtr(_result, false);
}

IAgTargetVOPtr _IAgTarget::GetVO ( ) {
    struct IAgTargetVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgTargetVOPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgTarget::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

HRESULT _IAgTarget::ResetAzElMask ( ) {
    HRESULT _hr = raw_ResetAzElMask();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAzElMaskType _IAgTarget::GetAzElMask ( ) {
    enum AgEAzElMaskType _result;
    HRESULT _hr = raw_GetAzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgTarget::GetAzElMaskData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAzElMaskData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum AgETerrainNormType _IAgTarget::GetTerrainNorm ( ) {
    enum AgETerrainNormType _result;
    HRESULT _hr = get_TerrainNorm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgTarget::GetHeightAboveGround ( ) {
    double _result = 0;
    HRESULT _hr = get_HeightAboveGround(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTarget::PutHeightAboveGround ( double pVal ) {
    HRESULT _hr = put_HeightAboveGround(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEAltRefType _IAgTarget::GetAltRef ( ) {
    enum AgEAltRefType _result;
    HRESULT _hr = get_AltRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgTarget::PutAltRef ( enum AgEAltRefType pVal ) {
    HRESULT _hr = put_AltRef(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkObjectPtr _IAgTarget::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgTarget::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgTarget::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgTarget::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgTarget::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgTarget::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgTarget::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgTarget::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgTarget::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgTarget::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgTarget::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgTarget::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgTarget::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgTarget::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgTarget::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgTarget::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgTarget::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgTarget::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgTarget::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgTarget::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgTarget::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEDisplayTimesType _IAgTarget::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgTarget::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgTarget::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgTarget::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgTarget::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

IAgOnePtAccessPtr _IAgTarget::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgTarget::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgTarget::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgTarget::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgTarget::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgPlanet wrapper method implementations
//

IAgPlGraphicsPtr _IAgPlanet::GetGraphics ( ) {
    struct IAgPlGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlGraphicsPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgPlanet::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgPlVOPtr _IAgPlanet::GetVO ( ) {
    struct IAgPlVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlVOPtr(_result, false);
}

enum AgEPlPositionSourceType _IAgPlanet::GetPositionSource ( ) {
    enum AgEPlPositionSourceType _result;
    HRESULT _hr = get_PositionSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgPlanet::PutPositionSource ( enum AgEPlPositionSourceType pVal ) {
    HRESULT _hr = put_PositionSource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgPositionSourceDataPtr _IAgPlanet::GetPositionSourceData ( ) {
    struct IAgPositionSourceData * _result = 0;
    HRESULT _hr = get_PositionSourceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPositionSourceDataPtr(_result, false);
}

IAgStkObjectPtr _IAgPlanet::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgPlanet::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgPlanet::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgPlanet::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgPlanet::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgPlanet::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgPlanet::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgPlanet::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgPlanet::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgPlanet::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgPlanet::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgPlanet::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgPlanet::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgPlanet::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgPlanet::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgPlanet::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgPlanet::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgPlanet::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgPlanet::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgPlanet::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgPlanet::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgOnePtAccessPtr _IAgPlanet::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

IAgPlCommonTasksPtr _IAgPlanet::GetCommonTasks ( ) {
    struct IAgPlCommonTasks * _result = 0;
    HRESULT _hr = get_CommonTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgPlCommonTasksPtr(_result, false);
}

SAFEARRAY * _IAgPlanet::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgPlanet::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgPlanet::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgPlanet::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgSensor wrapper method implementations
//

enum AgESnPattern _IAgSensor::GetPatternType ( ) {
    enum AgESnPattern _result;
    HRESULT _hr = get_PatternType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSensor::SetPatternType ( enum AgESnPattern PatternType ) {
    HRESULT _hr = raw_SetPatternType(PatternType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSnPatternPtr _IAgSensor::GetPattern ( ) {
    struct IAgSnPattern * _result = 0;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPatternPtr(_result, false);
}

enum AgESnPointing _IAgSensor::GetPointingType ( ) {
    enum AgESnPointing _result;
    HRESULT _hr = get_PointingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSensor::SetPointingType ( enum AgESnPointing PointingType ) {
    HRESULT _hr = raw_SetPointingType(PointingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgSensor::SetPointingExternalFile ( _bstr_t MaskFile ) {
    HRESULT _hr = raw_SetPointingExternalFile(MaskFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgSnPointingPtr _IAgSensor::GetPointing ( ) {
    struct IAgSnPointing * _result = 0;
    HRESULT _hr = get_Pointing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnPointingPtr(_result, false);
}

HRESULT _IAgSensor::ResetAzElMask ( ) {
    HRESULT _hr = raw_ResetAzElMask();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum AgEAzElMaskType _IAgSensor::GetAzElMask ( ) {
    enum AgEAzElMaskType _result;
    HRESULT _hr = get_AzElMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSensor::SetAzElMask ( enum AgEAzElMaskType AzElMaskType ) {
    HRESULT _hr = raw_SetAzElMask(AzElMaskType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgSensor::SetAzElMaskFile ( _bstr_t Filename ) {
    HRESULT _hr = raw_SetAzElMaskFile(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgAzElMaskDataPtr _IAgSensor::GetAzElMaskData ( ) {
    struct IAgAzElMaskData * _result = 0;
    HRESULT _hr = get_AzElMaskData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAzElMaskDataPtr(_result, false);
}

double _IAgSensor::GetFocalLength ( ) {
    double _result = 0;
    HRESULT _hr = get_FocalLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSensor::PutFocalLength ( double pVal ) {
    HRESULT _hr = put_FocalLength(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgSensor::GetDetectorPitch ( ) {
    double _result = 0;
    HRESULT _hr = get_DetectorPitch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSensor::PutDetectorPitch ( double pVal ) {
    HRESULT _hr = put_DetectorPitch(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESnRefractionType _IAgSensor::GetRefraction ( ) {
    enum AgESnRefractionType _result;
    HRESULT _hr = get_Refraction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSensor::PutRefraction ( enum AgESnRefractionType pVal ) {
    HRESULT _hr = put_Refraction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnGraphicsPtr _IAgSensor::GetGraphics ( ) {
    struct IAgSnGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnGraphicsPtr(_result, false);
}

IAgSnVOPtr _IAgSensor::GetVO ( ) {
    struct IAgSnVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnVOPtr(_result, false);
}

enum AgESnLocation _IAgSensor::GetLocationType ( ) {
    enum AgESnLocation _result;
    HRESULT _hr = get_LocationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSensor::SetLocationType ( enum AgESnLocation LocationType ) {
    HRESULT _hr = raw_SetLocationType(LocationType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

STKUtil::IAgLocationDataPtr _IAgSensor::GetLocationData ( ) {
    struct STKUtil::IAgLocationData * _result = 0;
    HRESULT _hr = get_LocationData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgLocationDataPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgSensor::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgSwathPtr _IAgSensor::GetSwath ( ) {
    struct IAgSwath * _result = 0;
    HRESULT _hr = get_Swath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSwathPtr(_result, false);
}

IAgStkObjectPtr _IAgSensor::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgSensor::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgSensor::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSensor::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgSensor::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgSensor::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgSensor::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgSensor::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgSensor::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgSensor::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgSensor::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSensor::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgSensor::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSensor::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSensor::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgSensor::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgSensor::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgSensor::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgSensor::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgSensor::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgSensor::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEDisplayTimesType _IAgSensor::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSensor::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgSensor::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSensor::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgSensor::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

VARIANT_BOOL _IAgSensor::IsRefractionTypeSupported ( enum AgESnRefractionType Model ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRefractionTypeSupported(Model, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSensor::GetRefractionSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RefractionSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgRfModelBasePtr _IAgSensor::GetRefractionModel ( ) {
    struct IAgRfModelBase * _result = 0;
    HRESULT _hr = get_RefractionModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgRfModelBasePtr(_result, false);
}

VARIANT_BOOL _IAgSensor::GetUseRefractionInAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseRefractionInAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgSensor::PutUseRefractionInAccess ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseRefractionInAccess(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgSnCommonTasksPtr _IAgSensor::GetCommonTasks ( ) {
    struct IAgSnCommonTasks * _result = 0;
    HRESULT _hr = get_CommonTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSnCommonTasksPtr(_result, false);
}

IAgOnePtAccessPtr _IAgSensor::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgSensor::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSensor::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgCelestialBodyCollectionPtr _IAgSensor::GetStarsInFOV ( const _variant_t & Epoch ) {
    struct IAgCelestialBodyCollection * _result = 0;
    HRESULT _hr = raw_GetStarsInFOV(Epoch, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCelestialBodyCollectionPtr(_result, false);
}

IAgVeSpatialInfoPtr _IAgSensor::GetSpatialInfo ( VARIANT_BOOL Recycle ) {
    struct IAgVeSpatialInfo * _result = 0;
    HRESULT _hr = raw_GetSpatialInfo(Recycle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpatialInfoPtr(_result, false);
}

VARIANT_BOOL _IAgSensor::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgSensor::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgStar wrapper method implementations
//

_variant_t _IAgStar::GetLocationRightAscension ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LocationRightAscension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStar::PutLocationRightAscension ( const _variant_t & pRightAscension ) {
    HRESULT _hr = put_LocationRightAscension(pRightAscension);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgStar::GetLocationDeclination ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LocationDeclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStar::PutLocationDeclination ( const _variant_t & pDeclination ) {
    HRESULT _hr = put_LocationDeclination(pDeclination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStar::GetProperMotionRightAscension ( ) {
    double _result = 0;
    HRESULT _hr = get_ProperMotionRightAscension(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStar::PutProperMotionRightAscension ( double pProperMotionRightAscension ) {
    HRESULT _hr = put_ProperMotionRightAscension(pProperMotionRightAscension);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStar::GetProperMotionDeclination ( ) {
    double _result = 0;
    HRESULT _hr = get_ProperMotionDeclination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStar::PutProperMotionDeclination ( double pProperMotionDeclination ) {
    HRESULT _hr = put_ProperMotionDeclination(pProperMotionDeclination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgStar::GetParallax ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parallax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStar::PutParallax ( const _variant_t & pProperMotionParallax ) {
    HRESULT _hr = put_Parallax(pProperMotionParallax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStar::GetEpoch ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Epoch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStar::PutEpoch ( _bstr_t pEpoch ) {
    HRESULT _hr = put_Epoch(pEpoch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStar::GetMagnitude ( ) {
    double _result = 0;
    HRESULT _hr = get_Magnitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStar::PutMagnitude ( double pMagnitude ) {
    HRESULT _hr = put_Magnitude(pMagnitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStGraphicsPtr _IAgStar::GetGraphics ( ) {
    struct IAgStGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStGraphicsPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgStar::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgStVOPtr _IAgStar::GetVO ( ) {
    struct IAgStVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStVOPtr(_result, false);
}

IAgStkObjectPtr _IAgStar::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgStar::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStar::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStar::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgStar::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStar::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgStar::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgStar::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgStar::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgStar::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgStar::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStar::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStar::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStar::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStar::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStar::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgStar::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgStar::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgStar::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgStar::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgStar::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgOnePtAccessPtr _IAgStar::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

enum AgEStarReferenceFrame _IAgStar::GetReferenceFrame ( ) {
    enum AgEStarReferenceFrame _result;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStar::GetProperMotionRadialVelocity ( ) {
    double _result = 0;
    HRESULT _hr = get_ProperMotionRadialVelocity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStar::PutProperMotionRadialVelocity ( double pVal ) {
    HRESULT _hr = put_ProperMotionRadialVelocity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStar::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStar::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStar::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgStar::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgSatellite wrapper method implementations
//

enum AgEVePropagatorType _IAgSatellite::GetPropagatorType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_PropagatorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSatellite::SetPropagatorType ( enum AgEVePropagatorType EPropagator ) {
    HRESULT _hr = raw_SetPropagatorType(EPropagator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVePropagatorPtr _IAgSatellite::GetPropagator ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Propagator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude _IAgSatellite::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSatellite::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgSatellite::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSatellite::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr _IAgSatellite::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgVeMassPropertiesPtr _IAgSatellite::GetMassProperties ( ) {
    struct IAgVeMassProperties * _result = 0;
    HRESULT _hr = get_MassProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeMassPropertiesPtr(_result, false);
}

IAgVePassBreakPtr _IAgSatellite::GetPassBreak ( ) {
    struct IAgVePassBreak * _result = 0;
    HRESULT _hr = get_PassBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePassBreakPtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr _IAgSatellite::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgSaGraphicsPtr _IAgSatellite::GetGraphics ( ) {
    struct IAgSaGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSaGraphicsPtr(_result, false);
}

IAgSaVOPtr _IAgSatellite::GetVO ( ) {
    struct IAgSaVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSaVOPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgSatellite::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgStkObjectPtr _IAgSatellite::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgSatellite::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgSatellite::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSatellite::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgSatellite::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgSatellite::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgSatellite::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgSatellite::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgSatellite::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgSatellite::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgSatellite::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSatellite::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgSatellite::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgSatellite::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgSatellite::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgSatellite::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgSatellite::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgSatellite::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgSatellite::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgSatellite::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgSatellite::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeEclipseBodiesPtr _IAgSatellite::GetEclipseBodies ( ) {
    struct IAgVeEclipseBodies * _result = 0;
    HRESULT _hr = get_EclipseBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeEclipseBodiesPtr(_result, false);
}

VARIANT_BOOL _IAgSatellite::IsPropagatorTypeSupported ( enum AgEVePropagatorType Propagator ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPropagatorTypeSupported(Propagator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgSatellite::GetPropagatorSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PropagatorSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgSaExportToolsPtr _IAgSatellite::GetExportTools ( ) {
    struct IAgSaExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgSaExportToolsPtr(_result, false);
}

IAgVeSpatialInfoPtr _IAgSatellite::GetSpatialInfo ( VARIANT_BOOL Recycle ) {
    struct IAgVeSpatialInfo * _result = 0;
    HRESULT _hr = raw_GetSpatialInfo(Recycle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpatialInfoPtr(_result, false);
}

IAgOnePtAccessPtr _IAgSatellite::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgSatellite::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgSatellite::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeSpEnvSpaceEnvironmentPtr _IAgSatellite::GetSpaceEnvironment ( ) {
    struct IAgVeSpEnvSpaceEnvironment * _result = 0;
    HRESULT _hr = get_SpaceEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvSpaceEnvironmentPtr(_result, false);
}

VARIANT_BOOL _IAgSatellite::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgSatellite::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgLaunchVehicle wrapper method implementations
//

enum AgEVePropagatorType _IAgLaunchVehicle::GetTrajectoryType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_TrajectoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgLaunchVehicle::SetTrajectoryType ( enum AgEVePropagatorType Trajectory ) {
    HRESULT _hr = raw_SetTrajectoryType(Trajectory);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgLaunchVehicle::IsTrajectoryTypeSupported ( enum AgEVePropagatorType Trajectory ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrajectoryTypeSupported(Trajectory, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgLaunchVehicle::GetTrajectorySupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TrajectorySupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVePropagatorPtr _IAgLaunchVehicle::GetTrajectory ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude _IAgLaunchVehicle::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgLaunchVehicle::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgLaunchVehicle::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgLaunchVehicle::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr _IAgLaunchVehicle::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgLvGraphicsPtr _IAgLaunchVehicle::GetGraphics ( ) {
    struct IAgLvGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLvGraphicsPtr(_result, false);
}

IAgLvVOPtr _IAgLaunchVehicle::GetVO ( ) {
    struct IAgLvVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLvVOPtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr _IAgLaunchVehicle::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgLaunchVehicle::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgStkObjectPtr _IAgLaunchVehicle::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgLaunchVehicle::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgLaunchVehicle::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLaunchVehicle::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgLaunchVehicle::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgLaunchVehicle::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgLaunchVehicle::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgLaunchVehicle::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgLaunchVehicle::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgLaunchVehicle::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgLaunchVehicle::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLaunchVehicle::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgLaunchVehicle::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLaunchVehicle::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLaunchVehicle::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgLaunchVehicle::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgLaunchVehicle::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgLaunchVehicle::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgLaunchVehicle::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgLaunchVehicle::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgLaunchVehicle::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgLvExportToolsPtr _IAgLaunchVehicle::GetExportTools ( ) {
    struct IAgLvExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLvExportToolsPtr(_result, false);
}

IAgVeSpatialInfoPtr _IAgLaunchVehicle::GetSpatialInfo ( VARIANT_BOOL Recycle ) {
    struct IAgVeSpatialInfo * _result = 0;
    HRESULT _hr = raw_GetSpatialInfo(Recycle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpatialInfoPtr(_result, false);
}

IAgOnePtAccessPtr _IAgLaunchVehicle::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgLaunchVehicle::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgLaunchVehicle::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeSpEnvSpaceEnvironmentPtr _IAgLaunchVehicle::GetSpaceEnvironment ( ) {
    struct IAgVeSpEnvSpaceEnvironment * _result = 0;
    HRESULT _hr = get_SpaceEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvSpaceEnvironmentPtr(_result, false);
}

VARIANT_BOOL _IAgLaunchVehicle::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgLaunchVehicle::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgGroundVehicle wrapper method implementations
//

enum AgEVePropagatorType _IAgGroundVehicle::GetRouteType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_RouteType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgGroundVehicle::SetRouteType ( enum AgEVePropagatorType Route ) {
    HRESULT _hr = raw_SetRouteType(Route);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgGroundVehicle::IsRouteTypeSupported ( enum AgEVePropagatorType Route ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRouteTypeSupported(Route, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgGroundVehicle::GetRouteSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RouteSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVePropagatorPtr _IAgGroundVehicle::GetRoute ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude _IAgGroundVehicle::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgGroundVehicle::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgGroundVehicle::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgGroundVehicle::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr _IAgGroundVehicle::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgGvGraphicsPtr _IAgGroundVehicle::GetGraphics ( ) {
    struct IAgGvGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGvGraphicsPtr(_result, false);
}

IAgGvVOPtr _IAgGroundVehicle::GetVO ( ) {
    struct IAgGvVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGvVOPtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr _IAgGroundVehicle::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgGroundVehicle::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgStkObjectPtr _IAgGroundVehicle::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgGroundVehicle::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgGroundVehicle::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgGroundVehicle::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgGroundVehicle::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgGroundVehicle::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgGroundVehicle::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgGroundVehicle::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgGroundVehicle::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgGroundVehicle::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgGroundVehicle::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgGroundVehicle::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgGroundVehicle::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgGroundVehicle::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgGroundVehicle::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgGroundVehicle::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgGroundVehicle::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgGroundVehicle::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgGroundVehicle::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgGroundVehicle::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgGroundVehicle::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgGvExportToolsPtr _IAgGroundVehicle::GetExportTools ( ) {
    struct IAgGvExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgGvExportToolsPtr(_result, false);
}

IAgVeSpatialInfoPtr _IAgGroundVehicle::GetSpatialInfo ( VARIANT_BOOL Recycle ) {
    struct IAgVeSpatialInfo * _result = 0;
    HRESULT _hr = raw_GetSpatialInfo(Recycle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpatialInfoPtr(_result, false);
}

IAgOnePtAccessPtr _IAgGroundVehicle::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgGroundVehicle::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgGroundVehicle::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgGroundVehicle::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgGroundVehicle::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgMissile wrapper method implementations
//

enum AgEVePropagatorType _IAgMissile::GetTrajectoryType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_TrajectoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgMissile::SetTrajectoryType ( enum AgEVePropagatorType Propagator ) {
    HRESULT _hr = raw_SetTrajectoryType(Propagator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgMissile::IsTrajectoryTypeSupported ( enum AgEVePropagatorType Propagator ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTrajectoryTypeSupported(Propagator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgMissile::GetTrajectorySupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TrajectorySupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVePropagatorPtr _IAgMissile::GetTrajectory ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Trajectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude _IAgMissile::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgMissile::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgMissile::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgMissile::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr _IAgMissile::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgMsGraphicsPtr _IAgMissile::GetGraphics ( ) {
    struct IAgMsGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMsGraphicsPtr(_result, false);
}

IAgMsVOPtr _IAgMissile::GetVO ( ) {
    struct IAgMsVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMsVOPtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr _IAgMissile::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgMissile::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgStkObjectPtr _IAgMissile::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgMissile::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgMissile::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMissile::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgMissile::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgMissile::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgMissile::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgMissile::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgMissile::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgMissile::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgMissile::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMissile::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgMissile::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMissile::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMissile::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgMissile::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgMissile::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgMissile::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgMissile::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgMissile::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgMissile::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgMsExportToolsPtr _IAgMissile::GetExportTools ( ) {
    struct IAgMsExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMsExportToolsPtr(_result, false);
}

IAgVeSpatialInfoPtr _IAgMissile::GetSpatialInfo ( VARIANT_BOOL Recycle ) {
    struct IAgVeSpatialInfo * _result = 0;
    HRESULT _hr = raw_GetSpatialInfo(Recycle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpatialInfoPtr(_result, false);
}

IAgOnePtAccessPtr _IAgMissile::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgMissile::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgMissile::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgVeSpEnvSpaceEnvironmentPtr _IAgMissile::GetSpaceEnvironment ( ) {
    struct IAgVeSpEnvSpaceEnvironment * _result = 0;
    HRESULT _hr = get_SpaceEnvironment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpEnvSpaceEnvironmentPtr(_result, false);
}

VARIANT_BOOL _IAgMissile::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgMissile::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgAircraft wrapper method implementations
//

enum AgEVePropagatorType _IAgAircraft::GetRouteType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_RouteType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAircraft::SetRouteType ( enum AgEVePropagatorType Route ) {
    HRESULT _hr = raw_SetRouteType(Route);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgAircraft::IsRouteTypeSupported ( enum AgEVePropagatorType Route ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRouteTypeSupported(Route, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgAircraft::GetRouteSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RouteSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVePropagatorPtr _IAgAircraft::GetRoute ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude _IAgAircraft::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAircraft::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgAircraft::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgAircraft::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr _IAgAircraft::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgAcGraphicsPtr _IAgAircraft::GetGraphics ( ) {
    struct IAgAcGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAcGraphicsPtr(_result, false);
}

IAgAcVOPtr _IAgAircraft::GetVO ( ) {
    struct IAgAcVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAcVOPtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr _IAgAircraft::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgAircraft::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgStkObjectPtr _IAgAircraft::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgAircraft::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgAircraft::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgAircraft::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgAircraft::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgAircraft::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgAircraft::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgAircraft::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgAircraft::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgAircraft::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgAircraft::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgAircraft::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgAircraft::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgAircraft::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgAircraft::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgAircraft::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgAircraft::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgAircraft::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgAircraft::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgAircraft::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgAircraft::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAcExportToolsPtr _IAgAircraft::GetExportTools ( ) {
    struct IAgAcExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAcExportToolsPtr(_result, false);
}

IAgVeSpatialInfoPtr _IAgAircraft::GetSpatialInfo ( VARIANT_BOOL Recycle ) {
    struct IAgVeSpatialInfo * _result = 0;
    HRESULT _hr = raw_GetSpatialInfo(Recycle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpatialInfoPtr(_result, false);
}

IAgOnePtAccessPtr _IAgAircraft::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgAircraft::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgAircraft::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgAircraft::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgAircraft::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgShip wrapper method implementations
//

enum AgEVePropagatorType _IAgShip::GetRouteType ( ) {
    enum AgEVePropagatorType _result;
    HRESULT _hr = get_RouteType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgShip::SetRouteType ( enum AgEVePropagatorType Route ) {
    HRESULT _hr = raw_SetRouteType(Route);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgShip::IsRouteTypeSupported ( enum AgEVePropagatorType Route ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRouteTypeSupported(Route, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgShip::GetRouteSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RouteSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVePropagatorPtr _IAgShip::GetRoute ( ) {
    struct IAgVePropagator * _result = 0;
    HRESULT _hr = get_Route(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVePropagatorPtr(_result, false);
}

enum AgEVeAttitude _IAgShip::GetAttitudeType ( ) {
    enum AgEVeAttitude _result;
    HRESULT _hr = get_AttitudeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgShip::SetAttitudeType ( enum AgEVeAttitude Attitude ) {
    HRESULT _hr = raw_SetAttitudeType(Attitude);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgShip::IsAttitudeTypeSupported ( enum AgEVeAttitude Attitude ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAttitudeTypeSupported(Attitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgShip::GetAttitudeSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AttitudeSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgVeAttitudePtr _IAgShip::GetAttitude ( ) {
    struct IAgVeAttitude * _result = 0;
    HRESULT _hr = get_Attitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeAttitudePtr(_result, false);
}

IAgShGraphicsPtr _IAgShip::GetGraphics ( ) {
    struct IAgShGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgShGraphicsPtr(_result, false);
}

IAgShVOPtr _IAgShip::GetVO ( ) {
    struct IAgShVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgShVOPtr(_result, false);
}

IAgVeGroundEllipsesCollectionPtr _IAgShip::GetGroundEllipses ( ) {
    struct IAgVeGroundEllipsesCollection * _result = 0;
    HRESULT _hr = get_GroundEllipses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeGroundEllipsesCollectionPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgShip::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgStkObjectPtr _IAgShip::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgShip::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgShip::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgShip::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgShip::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgShip::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgShip::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgShip::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgShip::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgShip::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgShip::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgShip::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgShip::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgShip::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgShip::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgShip::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgShip::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgShip::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgShip::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgShip::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgShip::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgShExportToolsPtr _IAgShip::GetExportTools ( ) {
    struct IAgShExportTools * _result = 0;
    HRESULT _hr = get_ExportTools(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgShExportToolsPtr(_result, false);
}

IAgVeSpatialInfoPtr _IAgShip::GetSpatialInfo ( VARIANT_BOOL Recycle ) {
    struct IAgVeSpatialInfo * _result = 0;
    HRESULT _hr = raw_GetSpatialInfo(Recycle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgVeSpatialInfoPtr(_result, false);
}

IAgOnePtAccessPtr _IAgShip::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgShip::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgShip::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgShip::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgShip::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgMto wrapper method implementations
//

IAgMtoTrackCollectionPtr _IAgMto::GetTracks ( ) {
    struct IAgMtoTrackCollection * _result = 0;
    HRESULT _hr = get_Tracks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoTrackCollectionPtr(_result, false);
}

IAgMtoDefaultTrackPtr _IAgMto::GetDefaultTrack ( ) {
    struct IAgMtoDefaultTrack * _result = 0;
    HRESULT _hr = get_DefaultTrack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoDefaultTrackPtr(_result, false);
}

IAgMtoGlobalTrackOptionsPtr _IAgMto::GetGlobalTrackOptions ( ) {
    struct IAgMtoGlobalTrackOptions * _result = 0;
    HRESULT _hr = get_GlobalTrackOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGlobalTrackOptionsPtr(_result, false);
}

IAgMtoGraphicsPtr _IAgMto::GetGraphics ( ) {
    struct IAgMtoGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoGraphicsPtr(_result, false);
}

IAgMtoVOPtr _IAgMto::GetVO ( ) {
    struct IAgMtoVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoVOPtr(_result, false);
}

IAgStkObjectPtr _IAgMto::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgMto::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgMto::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMto::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgMto::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgMto::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgMto::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgMto::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgMto::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgMto::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgMto::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMto::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgMto::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgMto::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgMto::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgMto::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgMto::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgMto::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgMto::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgMto::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgMto::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAccessConstraintCollectionPtr _IAgMto::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgOnePtAccessPtr _IAgMto::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

IAgMtoAnalysisPtr _IAgMto::GetAnalysis ( ) {
    struct IAgMtoAnalysis * _result = 0;
    HRESULT _hr = get_Analysis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgMtoAnalysisPtr(_result, false);
}

SAFEARRAY * _IAgMto::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgMto::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgMto::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgMto::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgLineTarget wrapper method implementations
//

IAgLtPointCollectionPtr _IAgLineTarget::GetPoints ( ) {
    struct IAgLtPointCollection * _result = 0;
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLtPointCollectionPtr(_result, false);
}

IAgLtGraphicsPtr _IAgLineTarget::GetGraphics ( ) {
    struct IAgLtGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLtGraphicsPtr(_result, false);
}

IAgLtVOPtr _IAgLineTarget::GetVO ( ) {
    struct IAgLtVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgLtVOPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgLineTarget::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgLineTarget::GetAllowObjectAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowObjectAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgLineTarget::PutAllowObjectAccess ( VARIANT_BOOL pAllowAccess ) {
    HRESULT _hr = put_AllowObjectAccess(pAllowAccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkObjectPtr _IAgLineTarget::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgLineTarget::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgLineTarget::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLineTarget::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgLineTarget::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgLineTarget::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgLineTarget::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgLineTarget::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgLineTarget::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgLineTarget::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgLineTarget::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLineTarget::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgLineTarget::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgLineTarget::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgLineTarget::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgLineTarget::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgLineTarget::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgLineTarget::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgLineTarget::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgLineTarget::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgLineTarget::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEDisplayTimesType _IAgLineTarget::GetDisplayStatusType ( ) {
    enum AgEDisplayTimesType _result;
    HRESULT _hr = get_DisplayStatusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgLineTarget::SetDisplayStatusType ( enum AgEDisplayTimesType DisplayStatus ) {
    HRESULT _hr = raw_SetDisplayStatusType(DisplayStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgLineTarget::IsDisplayStatusTypeSupported ( enum AgEDisplayTimesType DisplayStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDisplayStatusTypeSupported(DisplayStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgLineTarget::GetDisplayStatusSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DisplayStatusSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgDisplayTimesDataPtr _IAgLineTarget::GetDisplayTimesData ( ) {
    struct IAgDisplayTimesData * _result = 0;
    HRESULT _hr = get_DisplayTimesData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDisplayTimesDataPtr(_result, false);
}

IAgOnePtAccessPtr _IAgLineTarget::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgLineTarget::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgLineTarget::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgLineTarget::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgLineTarget::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgChain wrapper method implementations
//

IAgObjectLinkCollectionPtr _IAgChain::GetObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgChain::GetAutoRecompute ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRecompute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChain::PutAutoRecompute ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoRecompute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEChTimePeriodType _IAgChain::GetTimePeriodType ( ) {
    enum AgEChTimePeriodType _result;
    HRESULT _hr = get_TimePeriodType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgChain::SetTimePeriodType ( enum AgEChTimePeriodType TimePeriodType ) {
    HRESULT _hr = raw_SetTimePeriodType(TimePeriodType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgChTimePeriodBasePtr _IAgChain::GetTimePeriod ( ) {
    struct IAgChTimePeriodBase * _result = 0;
    HRESULT _hr = get_TimePeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChTimePeriodBasePtr(_result, false);
}

enum AgEDataSaveMode _IAgChain::GetDataSaveMode ( ) {
    enum AgEDataSaveMode _result;
    HRESULT _hr = get_DataSaveMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChain::PutDataSaveMode ( enum AgEDataSaveMode pVal ) {
    HRESULT _hr = put_DataSaveMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgChain::SetAccessIntervalsFile ( _bstr_t Filename ) {
    HRESULT _hr = raw_SetAccessIntervalsFile(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgChain::ResetAccessIntervalsFile ( ) {
    HRESULT _hr = raw_ResetAccessIntervalsFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t _IAgChain::GetAccessIntervalsFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AccessIntervalsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgChConstraintsPtr _IAgChain::GetConstraints ( ) {
    struct IAgChConstraints * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChConstraintsPtr(_result, false);
}

IAgChGraphicsPtr _IAgChain::GetGraphics ( ) {
    struct IAgChGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChGraphicsPtr(_result, false);
}

IAgChVOPtr _IAgChain::GetVO ( ) {
    struct IAgChVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgChVOPtr(_result, false);
}

VARIANT_BOOL _IAgChain::GetEnableLightTimeDelay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableLightTimeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChain::PutEnableLightTimeDelay ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableLightTimeDelay(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgChain::GetMaxTimeStep ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxTimeStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChain::PutMaxTimeStep ( double pVal ) {
    HRESULT _hr = put_MaxTimeStep(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgChain::GetTimeConvergence ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeConvergence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChain::PutTimeConvergence ( double pVal ) {
    HRESULT _hr = put_TimeConvergence(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkObjectPtr _IAgChain::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgChain::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgChain::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgChain::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgChain::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgChain::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgChain::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgChain::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgChain::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgChain::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgChain::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgChain::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgChain::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgChain::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgChain::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgChain::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgChain::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgChain::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgChain::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgChain::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgChain::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgChain::ComputeAccess ( ) {
    HRESULT _hr = raw_ComputeAccess();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgChain::ClearAccess ( ) {
    HRESULT _hr = raw_ClearAccess();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgAccessEventDetectionPtr _IAgChain::GetEventDetection ( ) {
    struct IAgAccessEventDetection * _result = 0;
    HRESULT _hr = get_EventDetection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessEventDetectionPtr(_result, false);
}

IAgAccessSamplingPtr _IAgChain::GetSampling ( ) {
    struct IAgAccessSampling * _result = 0;
    HRESULT _hr = get_Sampling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessSamplingPtr(_result, false);
}

VARIANT_BOOL _IAgChain::GetDetectEventsBasedOnSamplesOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DetectEventsBasedOnSamplesOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgChain::PutDetectEventsBasedOnSamplesOnly ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DetectEventsBasedOnSamplesOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgAccessConstraintCollectionPtr _IAgChain::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgOnePtAccessPtr _IAgChain::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgChain::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgChain::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgChain::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgChain::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgFigureOfMerit wrapper method implementations
//

enum AgEFmDefinitionType _IAgFigureOfMerit::GetDefinitionType ( ) {
    enum AgEFmDefinitionType _result;
    HRESULT _hr = get_DefinitionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFigureOfMerit::SetDefinitionType ( enum AgEFmDefinitionType Def ) {
    HRESULT _hr = raw_SetDefinitionType(Def);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFigureOfMerit::IsDefinitionTypeSupported ( enum AgEFmDefinitionType Def ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDefinitionTypeSupported(Def, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgFigureOfMerit::GetDefinitionSupportedTypes ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DefinitionSupportedTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmDefinitionPtr _IAgFigureOfMerit::GetDefinition ( ) {
    struct IAgFmDefinition * _result = 0;
    HRESULT _hr = get_Definition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefinitionPtr(_result, false);
}

IAgFmDefAccessConstraintPtr _IAgFigureOfMerit::SetAccessConstraintDefinition ( enum AgEFmConstraintName ConstraintName ) {
    struct IAgFmDefAccessConstraint * _result = 0;
    HRESULT _hr = raw_SetAccessConstraintDefinition(ConstraintName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefAccessConstraintPtr(_result, false);
}

IAgFmGraphicsPtr _IAgFigureOfMerit::GetGraphics ( ) {
    struct IAgFmGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGraphicsPtr(_result, false);
}

IAgFmVOPtr _IAgFigureOfMerit::GetVO ( ) {
    struct IAgFmVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmVOPtr(_result, false);
}

IAgStkObjectPtr _IAgFigureOfMerit::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgFigureOfMerit::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgFigureOfMerit::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFigureOfMerit::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgFigureOfMerit::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgFigureOfMerit::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgFigureOfMerit::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgFigureOfMerit::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgFigureOfMerit::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgFigureOfMerit::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgFigureOfMerit::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFigureOfMerit::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgFigureOfMerit::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgFigureOfMerit::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgFigureOfMerit::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgFigureOfMerit::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgFigureOfMerit::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgFigureOfMerit::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgFigureOfMerit::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgFigureOfMerit::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgFigureOfMerit::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgFmGridInspectorPtr _IAgFigureOfMerit::GetGridInspector ( ) {
    struct IAgFmGridInspector * _result = 0;
    HRESULT _hr = get_GridInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmGridInspectorPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgFigureOfMerit::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgOnePtAccessPtr _IAgFigureOfMerit::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

IAgFmDefAccessConstraintPtr _IAgFigureOfMerit::SetAccessConstraintDefinitionName ( _bstr_t ConstraintName ) {
    struct IAgFmDefAccessConstraint * _result = 0;
    HRESULT _hr = raw_SetAccessConstraintDefinitionName(ConstraintName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgFmDefAccessConstraintPtr(_result, false);
}

SAFEARRAY * _IAgFigureOfMerit::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgFigureOfMerit::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgFigureOfMerit::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgFigureOfMerit::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface _IAgConstellation wrapper method implementations
//

IAgObjectLinkCollectionPtr _IAgConstellation::GetObjects ( ) {
    struct IAgObjectLinkCollection * _result = 0;
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectLinkCollectionPtr(_result, false);
}

IAgCnConstraintsPtr _IAgConstellation::GetConstraints ( ) {
    struct IAgCnConstraints * _result = 0;
    HRESULT _hr = get_Constraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCnConstraintsPtr(_result, false);
}

IAgCnGraphicsPtr _IAgConstellation::GetGraphics ( ) {
    struct IAgCnGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCnGraphicsPtr(_result, false);
}

IAgStkObjectPtr _IAgConstellation::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgConstellation::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgConstellation::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgConstellation::PutInstanceName ( _bstr_t pVal ) {
    HRESULT _hr = put_InstanceName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgConstellation::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgConstellation::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgConstellation::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgConstellation::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgConstellation::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgConstellation::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgConstellation::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgConstellation::PutShortDescription ( _bstr_t pShortDesc ) {
    HRESULT _hr = put_ShortDescription(pShortDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgConstellation::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgConstellation::PutLongDescription ( _bstr_t pLongDesc ) {
    HRESULT _hr = put_LongDescription(pLongDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgConstellation::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgConstellation::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgConstellation::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgConstellation::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgConstellation::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgConstellation::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgConstellation::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgAccessConstraintCollectionPtr _IAgConstellation::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgOnePtAccessPtr _IAgConstellation::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgConstellation::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgConstellation::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgConstellation::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgConstellation::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface IAgCvAssetListCollection wrapper method implementations
//

long IAgCvAssetListCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgCvAssetListElementPtr IAgCvAssetListCollection::GetItem ( long Index ) {
    struct IAgCvAssetListElement * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAssetListElementPtr(_result, false);
}

IUnknownPtr IAgCvAssetListCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgCvAssetListCollection::RemoveAt ( long Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCvAssetListCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgCvAssetListElementPtr IAgCvAssetListCollection::Add ( _bstr_t ObjectPath ) {
    struct IAgCvAssetListElement * _result = 0;
    HRESULT _hr = raw_Add(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAssetListElementPtr(_result, false);
}

SAFEARRAY * IAgCvAssetListCollection::GetAvailableAssets ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailableAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgCvAssetListCollection::Remove ( _bstr_t ObjectPath ) {
    HRESULT _hr = raw_Remove(ObjectPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgCvAssetListElementPtr IAgCvAssetListCollection::GetAssetFromPath ( _bstr_t ObjectPath ) {
    struct IAgCvAssetListElement * _result = 0;
    HRESULT _hr = raw_GetAssetFromPath(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAssetListElementPtr(_result, false);
}

VARIANT_BOOL IAgCvAssetListCollection::IsAssetAssigned ( _bstr_t ObjectPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAssetAssigned(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgCvAssetListCollection::CanAssignAsset ( _bstr_t ObjectPath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanAssignAsset(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgCvAssetListElement wrapper method implementations
//

enum AgECvAssetStatus IAgCvAssetListElement::GetAssetStatus ( ) {
    enum AgECvAssetStatus _result;
    HRESULT _hr = get_AssetStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAssetListElement::PutAssetStatus ( enum AgECvAssetStatus pRetVal ) {
    HRESULT _hr = put_AssetStatus(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvAssetGrouping IAgCvAssetListElement::GetGrouping ( ) {
    enum AgECvAssetGrouping _result;
    HRESULT _hr = get_Grouping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAssetListElement::PutGrouping ( enum AgECvAssetGrouping pRetVal ) {
    HRESULT _hr = put_Grouping(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgCvAssetListElement::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgCvAssetListElement::ContainsSubAssets ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsSubAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgCvAssetListCollectionPtr IAgCvAssetListElement::GetSubAssetList ( ) {
    struct IAgCvAssetListCollection * _result = 0;
    HRESULT _hr = get_SubAssetList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAssetListCollectionPtr(_result, false);
}

VARIANT_BOOL IAgCvAssetListElement::GetRequired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Required(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAssetListElement::PutRequired ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Required(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgCvAssetListElement::GetUseConstConstraints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseConstConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgCvAssetListElement::PutUseConstConstraints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseConstConstraints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkObjectCoverage wrapper method implementations
//

IAgDataProviderCollectionPtr _IAgStkObjectCoverage::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_variant_t _IAgStkObjectCoverage::GetStartTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkObjectCoverage::PutStartTime ( const _variant_t & pStartTime ) {
    HRESULT _hr = put_StartTime(pStartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgStkObjectCoverage::GetStopTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkObjectCoverage::PutStopTime ( const _variant_t & pStopTime ) {
    HRESULT _hr = put_StopTime(pStopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgCvAssetListCollectionPtr _IAgStkObjectCoverage::GetAssets ( ) {
    struct IAgCvAssetListCollection * _result = 0;
    HRESULT _hr = get_Assets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAssetListCollectionPtr(_result, false);
}

IAgObjectCoverageFOMPtr _IAgStkObjectCoverage::GetFOM ( ) {
    struct IAgObjectCoverageFOM * _result = 0;
    HRESULT _hr = get_FOM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgObjectCoverageFOMPtr(_result, false);
}

HRESULT _IAgStkObjectCoverage::Compute ( ) {
    HRESULT _hr = raw_Compute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkObjectCoverage::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgCoverageDefinition wrapper method implementations
//

IAgCvGridPtr _IAgCoverageDefinition::GetGrid ( ) {
    struct IAgCvGrid * _result = 0;
    HRESULT _hr = get_Grid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGridPtr(_result, false);
}

IAgCvPointDefinitionPtr _IAgCoverageDefinition::GetPointDefinition ( ) {
    struct IAgCvPointDefinition * _result = 0;
    HRESULT _hr = get_PointDefinition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvPointDefinitionPtr(_result, false);
}

IAgCvAssetListCollectionPtr _IAgCoverageDefinition::GetAssetList ( ) {
    struct IAgCvAssetListCollection * _result = 0;
    HRESULT _hr = get_AssetList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAssetListCollectionPtr(_result, false);
}

IAgCvAdvancedPtr _IAgCoverageDefinition::GetAdvanced ( ) {
    struct IAgCvAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAdvancedPtr(_result, false);
}

IAgCvIntervalPtr _IAgCoverageDefinition::GetInterval ( ) {
    struct IAgCvInterval * _result = 0;
    HRESULT _hr = get_Interval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvIntervalPtr(_result, false);
}

IAgCvGraphicsPtr _IAgCoverageDefinition::GetGraphics ( ) {
    struct IAgCvGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGraphicsPtr(_result, false);
}

IAgCvVOPtr _IAgCoverageDefinition::GetVO ( ) {
    struct IAgCvVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvVOPtr(_result, false);
}

IAgStkObjectPtr _IAgCoverageDefinition::GetParent ( ) {
    struct IAgStkObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectPtr(_result, false);
}

_bstr_t _IAgCoverageDefinition::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgCoverageDefinition::GetInstanceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgCoverageDefinition::PutInstanceName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_InstanceName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgESTKObjectType _IAgCoverageDefinition::GetClassType ( ) {
    enum AgESTKObjectType _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgCoverageDefinition::GetClassName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkObjectCollectionPtr _IAgCoverageDefinition::GetChildren ( ) {
    struct IAgStkObjectCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCollectionPtr(_result, false);
}

HRESULT _IAgCoverageDefinition::Export ( _bstr_t Filename ) {
    HRESULT _hr = raw_Export(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkObjectRootPtr _IAgCoverageDefinition::GetRoot ( ) {
    struct IAgStkObjectRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectRootPtr(_result, false);
}

IAgDataProviderCollectionPtr _IAgCoverageDefinition::GetDataProviders ( ) {
    struct IAgDataProviderCollection * _result = 0;
    HRESULT _hr = get_DataProviders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgDataProviderCollectionPtr(_result, false);
}

_bstr_t _IAgCoverageDefinition::GetShortDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgCoverageDefinition::PutShortDescription ( _bstr_t pRetVal ) {
    HRESULT _hr = put_ShortDescription(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgCoverageDefinition::GetLongDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LongDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgCoverageDefinition::PutLongDescription ( _bstr_t pRetVal ) {
    HRESULT _hr = put_LongDescription(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgCoverageDefinition::GetHasChildren ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildren(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgCoverageDefinition::IsObjectCoverageSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsObjectCoverageSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkObjectCoveragePtr _IAgCoverageDefinition::GetObjectCoverage ( ) {
    struct IAgStkObjectCoverage * _result = 0;
    HRESULT _hr = get_ObjectCoverage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkObjectCoveragePtr(_result, false);
}

VARIANT_BOOL _IAgCoverageDefinition::IsAccessSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkAccessPtr _IAgCoverageDefinition::GetAccess ( _bstr_t ObjectPath ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccess(ObjectPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

IAgStkAccessPtr _IAgCoverageDefinition::GetAccessToObject ( struct IAgStkObject * pObject ) {
    struct IAgStkAccess * _result = 0;
    HRESULT _hr = raw_GetAccessToObject(pObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkAccessPtr(_result, false);
}

VARIANT_BOOL _IAgCoverageDefinition::GetHasBeenDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBeenDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgCoverageDefinition::ComputeAccesses ( ) {
    HRESULT _hr = raw_ComputeAccesses();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgCoverageDefinition::ClearAccesses ( ) {
    HRESULT _hr = raw_ClearAccesses();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgCoverageDefinition::ReloadAccesses ( ) {
    HRESULT _hr = raw_ReloadAccesses();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgCoverageDefinition::ExportAccessesAsText ( _bstr_t Filename ) {
    HRESULT _hr = raw_ExportAccessesAsText(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgCvGridInspectorPtr _IAgCoverageDefinition::GetGridInspector ( ) {
    struct IAgCvGridInspector * _result = 0;
    HRESULT _hr = get_GridInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGridInspectorPtr(_result, false);
}

IAgAccessConstraintCollectionPtr _IAgCoverageDefinition::GetAccessConstraints ( ) {
    struct IAgAccessConstraintCollection * _result = 0;
    HRESULT _hr = get_AccessConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgAccessConstraintCollectionPtr(_result, false);
}

IAgOnePtAccessPtr _IAgCoverageDefinition::CreateOnePointAccess ( _bstr_t PathToObject ) {
    struct IAgOnePtAccess * _result = 0;
    HRESULT _hr = raw_CreateOnePointAccess(PathToObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgOnePtAccessPtr(_result, false);
}

SAFEARRAY * _IAgCoverageDefinition::GetObjectFiles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ObjectFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgCoverageDefinition::Unload ( ) {
    HRESULT _hr = raw_Unload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgCoverageDefinition::IsVgtSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsVgtSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnProviderPtr _IAgCoverageDefinition::GetVgt ( ) {
    struct AgSTKVgtLib::IAgCrdnProvider * _result = 0;
    HRESULT _hr = get_Vgt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnProviderPtr(_result, false);
}

//
// interface IAgCoverageDefinition wrapper method implementations
//

IAgCvGridPtr IAgCoverageDefinition::GetGrid ( ) {
    struct IAgCvGrid * _result = 0;
    HRESULT _hr = get_Grid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGridPtr(_result, false);
}

IAgCvPointDefinitionPtr IAgCoverageDefinition::GetPointDefinition ( ) {
    struct IAgCvPointDefinition * _result = 0;
    HRESULT _hr = get_PointDefinition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvPointDefinitionPtr(_result, false);
}

IAgCvAssetListCollectionPtr IAgCoverageDefinition::GetAssetList ( ) {
    struct IAgCvAssetListCollection * _result = 0;
    HRESULT _hr = get_AssetList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAssetListCollectionPtr(_result, false);
}

IAgCvAdvancedPtr IAgCoverageDefinition::GetAdvanced ( ) {
    struct IAgCvAdvanced * _result = 0;
    HRESULT _hr = get_Advanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAdvancedPtr(_result, false);
}

IAgCvIntervalPtr IAgCoverageDefinition::GetInterval ( ) {
    struct IAgCvInterval * _result = 0;
    HRESULT _hr = get_Interval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvIntervalPtr(_result, false);
}

IAgCvGraphicsPtr IAgCoverageDefinition::GetGraphics ( ) {
    struct IAgCvGraphics * _result = 0;
    HRESULT _hr = get_Graphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGraphicsPtr(_result, false);
}

IAgCvVOPtr IAgCoverageDefinition::GetVO ( ) {
    struct IAgCvVO * _result = 0;
    HRESULT _hr = get_VO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvVOPtr(_result, false);
}

HRESULT IAgCoverageDefinition::ComputeAccesses ( ) {
    HRESULT _hr = raw_ComputeAccesses();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCoverageDefinition::ClearAccesses ( ) {
    HRESULT _hr = raw_ClearAccesses();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCoverageDefinition::ReloadAccesses ( ) {
    HRESULT _hr = raw_ReloadAccesses();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgCoverageDefinition::ExportAccessesAsText ( _bstr_t Filename ) {
    HRESULT _hr = raw_ExportAccessesAsText(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgCvGridInspectorPtr IAgCoverageDefinition::GetGridInspector ( ) {
    struct IAgCvGridInspector * _result = 0;
    HRESULT _hr = get_GridInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvGridInspectorPtr(_result, false);
}

//
// interface _IAgCvAssetListElement wrapper method implementations
//

enum AgECvAssetStatus _IAgCvAssetListElement::GetAssetStatus ( ) {
    enum AgECvAssetStatus _result;
    HRESULT _hr = get_AssetStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAssetListElement::PutAssetStatus ( enum AgECvAssetStatus pRetVal ) {
    HRESULT _hr = put_AssetStatus(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgECvAssetGrouping _IAgCvAssetListElement::GetGrouping ( ) {
    enum AgECvAssetGrouping _result;
    HRESULT _hr = get_Grouping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAssetListElement::PutGrouping ( enum AgECvAssetGrouping pRetVal ) {
    HRESULT _hr = put_Grouping(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgCvAssetListElement::GetObjectName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ObjectName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgCvAssetListElement::ContainsSubAssets ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsSubAssets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgCvAssetListCollectionPtr _IAgCvAssetListElement::GetSubAssetList ( ) {
    struct IAgCvAssetListCollection * _result = 0;
    HRESULT _hr = get_SubAssetList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgCvAssetListCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgCvAssetListElement::GetRequired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Required(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAssetListElement::PutRequired ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Required(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgCvAssetListElement::GetUseConstConstraints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseConstConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgCvAssetListElement::PutUseConstConstraints ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseConstConstraints(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

} // namespace STKObjects
