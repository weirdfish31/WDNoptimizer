// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (59c7552e).
//
// c:\r_stk_v9.2.x\source\lib\release.net\tlhbuilder\agvgt.tlh
//
// C++ source equivalent of Win32 type library AgVGT.tlb
// compiler-generated file created 11/23/11 at 05:29:05 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AgSTKVgtLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("f5f54076-5828-4191-8056-fc087e415ed3"))
/* LIBID */ __AgSTKVgtLib;
struct __declspec(uuid("00c7427e-01eb-4756-97ec-08b87b23994a"))
/* interface */ IAgCrdn;
enum AgECrdnKind;
struct __declspec(uuid("13110a2d-e8d0-4f4e-b08f-54c44142498b"))
/* interface */ IAgCrdnContext;
struct __declspec(uuid("00b07a36-060b-42c7-a342-9063652a5470"))
/* interface */ IAgCrdnTypeInfo;
struct __declspec(uuid("12bc1bc1-f90f-4dd3-8c58-c69bd9dabdf7"))
/* interface */ IAgCrdnTimeProperties;
struct __declspec(uuid("8e2faf78-afa6-4f08-9e8b-943ea77c99e1"))
/* dual interface */ IAgCrdnIntervalCollection;
struct __declspec(uuid("28efa76d-9ab4-4955-b854-c03f4e3f83c8"))
/* interface */ IAgCrdnInterval;
struct __declspec(uuid("26659fa8-e64a-4771-84c7-533447994f53"))
/* interface */ IAgCrdnRefTo;
struct __declspec(uuid("09c75bbf-7eb7-474d-8c49-e18ed927a1f9"))
/* interface */ IAgCrdnTemplate;
struct __declspec(uuid("1c058b8b-912a-47ad-9097-d197c2095880"))
/* interface */ IAgCrdnInstance;
struct __declspec(uuid("b19a6aa7-f367-41d6-b3e9-5440836000c6"))
/* interface */ IAgCrdnPointRefTo;
struct __declspec(uuid("541dd40e-c399-4c27-881a-6df130cf6427"))
/* interface */ IAgCrdnPoint;
enum AgECrdnPointType;
struct __declspec(uuid("da25254d-7e4b-45dd-8103-4a82b450dd49"))
/* interface */ IAgCrdnSystem;
enum AgECrdnSystemType;
struct __declspec(uuid("6f707a4d-4993-46ff-bdad-2bb51a2a7cde"))
/* interface */ IAgCrdnSystemTransformResult;
struct __declspec(uuid("05db5cb3-53dd-4369-bd23-3bb5a2a636d8"))
/* interface */ IAgCrdnSystemTransformWithRateResult;
struct __declspec(uuid("63dcb829-9256-4ee6-80bb-2b3b820b1921"))
/* interface */ IAgCrdnSystemFindInSystemResult;
struct __declspec(uuid("456f22a5-1e8f-423f-a7e6-65259fc3f598"))
/* interface */ IAgCrdnPointLocateInSystemWithRateResult;
struct __declspec(uuid("6ac0fa73-a932-47f5-834b-a303064a15d2"))
/* interface */ IAgCrdnPointLocateInSystemResult;
struct __declspec(uuid("2b134783-ab56-4ba5-a5ad-02cf6827ec3b"))
/* interface */ IAgCrdnVectorRefTo;
struct __declspec(uuid("2db6efc3-b210-4b12-a8ef-fa08325a19e3"))
/* interface */ IAgCrdnVector;
enum AgECrdnVectorType;
struct __declspec(uuid("ac5d1b41-bc75-4619-a833-2a3ebb422777"))
/* interface */ IAgCrdnAxes;
enum AgECrdnAxesType;
struct __declspec(uuid("42d87abc-60b1-45af-85dc-389162d10b78"))
/* interface */ IAgCrdnAxesTransformResult;
struct __declspec(uuid("c8665c0a-9418-4e34-a5d6-64f766314722"))
/* interface */ IAgCrdnAxesTransformWithRateResult;
struct __declspec(uuid("866627fa-d132-4530-a7d2-03528ef3b5cb"))
/* interface */ IAgCrdnAxesFindInAxesWithRateResult;
struct __declspec(uuid("ae6a9b2d-5706-4c73-b8df-454f92a358bc"))
/* interface */ IAgCrdnAxesFindInAxesResult;
struct __declspec(uuid("fda2416c-d0c9-46a4-a4a3-bb0a70b5a662"))
/* interface */ IAgCrdnAxesLabels;
struct __declspec(uuid("364cadf7-e332-45f1-a35c-e38879b83987"))
/* interface */ IAgCrdnVectorFindInAxesResult;
struct __declspec(uuid("aa9f282d-765f-4fd1-af10-6ac8a33f53b6"))
/* interface */ IAgCrdnVectorFindInAxesWithRateResult;
struct __declspec(uuid("2cbacd87-1606-45b3-8eb1-e2dd5607b03f"))
/* interface */ IAgCrdnAxesRefTo;
struct __declspec(uuid("50ac25c4-0429-4509-ba3a-b9268fdac68f"))
/* interface */ IAgCrdnAngleRefTo;
struct __declspec(uuid("d8499f44-bd53-4576-ba04-2dd7e8c0c9bb"))
/* interface */ IAgCrdnAngle;
enum AgECrdnAngleType;
struct __declspec(uuid("779098a7-c93a-46f9-bee8-67ce5e502b5b"))
/* interface */ IAgCrdnAngleFindAngleResult;
struct __declspec(uuid("e8edebba-0a82-43bd-999d-cea6641ec47f"))
/* interface */ IAgCrdnAngleFindAngleWithRateResult;
struct __declspec(uuid("a8984b7f-560d-4c3c-909e-0ecd2497666d"))
/* interface */ IAgCrdnAngleFindResult;
struct __declspec(uuid("aa608c30-c8cb-4f56-baf6-13367672d380"))
/* interface */ IAgCrdnAngleFindWithRateResult;
struct __declspec(uuid("4c35e30e-e5af-447b-8f88-ffced737b90b"))
/* interface */ IAgCrdnSystemRefTo;
struct __declspec(uuid("db7f6364-adab-4463-868e-08900604566d"))
/* interface */ IAgCrdnPlaneRefTo;
struct __declspec(uuid("05812565-21d4-40b2-82cc-cfbb22c4cd6a"))
/* interface */ IAgCrdnPlane;
enum AgECrdnPlaneType;
struct __declspec(uuid("d5a5ec8b-8c14-452d-a59b-81b6815e0147"))
/* interface */ IAgCrdnPlaneFindInAxesResult;
struct __declspec(uuid("88008f30-8387-4451-8a15-c02b88102db1"))
/* interface */ IAgCrdnPlaneFindInAxesWithRateResult;
struct __declspec(uuid("dedfa84d-30ca-4e08-a036-2cf6230a6b2a"))
/* interface */ IAgCrdnPlaneFindInSystemResult;
struct __declspec(uuid("61aa5051-68ad-47d1-b1fc-74494bc2811c"))
/* interface */ IAgCrdnPlaneFindInSystemWithRateResult;
struct __declspec(uuid("94b509db-fdd6-43e1-9155-6d289b8629db"))
/* interface */ IAgCrdnPlaneLabels;
struct __declspec(uuid("f5ff4d9d-c05e-4a5f-8dad-fc01e19124a8"))
/* interface */ IAgCrdnAxesAlignedAndConstrained;
struct __declspec(uuid("85d0f960-6b16-4701-a4b2-d2f1fcc8a4a9"))
/* interface */ IAgCrdnAxesAngularOffset;
struct __declspec(uuid("1cec5dd3-d93b-4335-af94-7fd71ad0f2ab"))
/* interface */ IAgCrdnAxesFixedAtEpoch;
struct __declspec(uuid("1349ceaf-abfb-489f-8ef0-f9e71c522cf2"))
/* interface */ IAgCrdnAxesBPlane;
struct __declspec(uuid("a63fc04e-22e6-4cac-afb8-0ae13695d0e6"))
/* interface */ IAgCrdnCentralBodyRefTo;
struct __declspec(uuid("901f58a0-8740-472e-a8f1-06b2f77f49b6"))
/* interface */ IAgCrdnCentralBody;
enum AgECrdnDirectionType;
struct __declspec(uuid("6ab28307-f0c7-473d-beaf-fd60ae1c4fdb"))
/* interface */ IAgCrdnAxesCustomScript;
struct __declspec(uuid("708337d5-0b04-4f0a-8ac4-812ad0c4b88d"))
/* interface */ IAgCrdnAxesAttitudeFile;
struct __declspec(uuid("112b1e93-617b-40af-86db-c4763a359e9b"))
/* interface */ IAgCrdnAxesFixed;
struct __declspec(uuid("599ad89a-37d3-4491-851c-d8cbccfbf56a"))
/* interface */ IAgCrdnAxesModelAttach;
struct __declspec(uuid("1e6756bb-b4e2-42f9-9488-06b84ab3b590"))
/* interface */ IAgCrdnAxesSpinning;
struct __declspec(uuid("356a90b5-7c8a-4145-925e-0d2478b4386c"))
/* interface */ IAgCrdnAxesOnSurface;
struct __declspec(uuid("f622efa8-69ed-4c17-8f9c-e9edda4ba36b"))
/* interface */ IAgCrdnAxesTrajectory;
enum AgECrdnTrajectoryAxesType;
struct __declspec(uuid("6d8ef2a2-4f6d-4ec8-aa3b-9d3e8104f00b"))
/* interface */ IAgCrdnAxesLagrangeLibration;
enum AgECrdnLagrangeLibrationPointType;
struct __declspec(uuid("b457d9c2-42bd-40d6-ac2d-72c037b964f1"))
/* dual interface */ IAgCrdnCentralBodyCollection;
struct __declspec(uuid("9e02f4e5-72c9-49e9-93a0-9b4451c3dae7"))
/* interface */ IAgCrdnAngleBetweenVectors;
struct __declspec(uuid("486fd946-78d1-489c-bd7d-63090f6c912a"))
/* interface */ IAgCrdnAngleBetweenPlanes;
struct __declspec(uuid("3bea0eb6-13d2-4a14-baad-3a54718b8791"))
/* interface */ IAgCrdnAngleDihedral;
struct __declspec(uuid("b96bdcc4-2b80-411c-9a13-84c81c5b24cb"))
/* interface */ IAgCrdnAngleRotation;
enum AgECrdnDisplayAxisSelector;
struct __declspec(uuid("f073c479-68c3-496e-aca2-1532ad7c0d2d"))
/* interface */ IAgCrdnAngleToPlane;
enum AgECrdnSignedAngleType;
struct __declspec(uuid("12921103-07e5-4d1e-99f6-d1d5e9426b7a"))
/* interface */ IAgCrdnPlaneNormal;
struct __declspec(uuid("3678361f-f892-4383-8c96-16e6c10ea808"))
/* interface */ IAgCrdnPlaneQuadrant;
enum AgECrdnQuadrantType;
struct __declspec(uuid("9fdab3f5-eb7a-4761-b49d-9884c0cca176"))
/* interface */ IAgCrdnPlaneTrajectory;
struct __declspec(uuid("d029a9f6-0773-479f-8cb8-bcebb1d3de38"))
/* interface */ IAgCrdnPlaneTriad;
struct __declspec(uuid("3d80338d-b412-4886-aefe-a89d61740c6d"))
/* interface */ IAgCrdnPointBPlane;
enum AgECrdnPointBPlaneType;
struct __declspec(uuid("2e68dda7-0050-442c-9d96-bd40373278c8"))
/* interface */ IAgCrdnPointFile;
struct __declspec(uuid("73e29736-8897-4114-b628-195cce45eb91"))
/* interface */ IAgCrdnPointFixedInSystem;
struct __declspec(uuid("acbf34bd-1dbb-4aad-832a-497f7a1872da"))
/* interface */ IAgCrdnPointGrazing;
struct __declspec(uuid("ed1403d9-4e9d-4021-881e-2dd30215c7d0"))
/* interface */ IAgCrdnPointGlint;
struct __declspec(uuid("9efe77e9-bb0b-4a3a-b886-a20325d17a89"))
/* interface */ IAgCrdnPointCovarianceGrazing;
struct __declspec(uuid("03daeec7-7b5d-45b4-970f-ed16c14e3674"))
/* interface */ IAgCrdnPointPlaneIntersection;
struct __declspec(uuid("e5f3e4d0-cf5a-4626-9522-7780f5629e37"))
/* interface */ IAgCrdnPointOnSurface;
enum AgECrdnReferenceShapeType;
enum AgECrdnSurfaceType;
struct __declspec(uuid("b3de34c8-4858-45c2-89b8-ff5513e51b5b"))
/* interface */ IAgCrdnPointModelAttach;
struct __declspec(uuid("729f6c48-01f9-446d-9345-21232f52d149"))
/* interface */ IAgCrdnPointPlaneProjection;
struct __declspec(uuid("24355b1f-176c-4144-a3d4-30aabeacd3e7"))
/* interface */ IAgCrdnPointLagrangeLibration;
struct __declspec(uuid("16d2fb42-b4ca-4bbb-9a59-e008e5553af4"))
/* interface */ IAgCrdnSystemAssembled;
struct __declspec(uuid("0c4c4c74-20b7-4ab7-bb89-991ca601e895"))
/* interface */ IAgCrdnSystemOnSurface;
struct __declspec(uuid("13c9a566-6d42-495d-9fba-dde21bea0a8e"))
/* interface */ IAgCrdnLLAPosition;
struct __declspec(uuid("5697331e-ea7d-4ff6-ab23-a0a6e3d292d4"))
/* interface */ IAgCrdnVectorAngleRate;
struct __declspec(uuid("abce0fea-94d8-447f-84f1-8092a487fb4b"))
/* interface */ IAgCrdnVectorApoapsis;
enum AgECrdnMeanElementTheory;
struct __declspec(uuid("caecc04d-53a2-4615-9efb-4ae60d08efaf"))
/* interface */ IAgCrdnVectorFixedAtEpoch;
struct __declspec(uuid("ab73f35c-4870-4728-86c7-3aa930f53154"))
/* interface */ IAgCrdnVectorAngularVelocity;
struct __declspec(uuid("10bf9147-9165-46fb-b61b-9fa2342bdf5a"))
/* interface */ IAgCrdnVectorConing;
enum AgECrdnSweepMode;
struct __declspec(uuid("e53e7bb5-56ae-42bc-a3bd-bd0d6ba11f8e"))
/* interface */ IAgCrdnVectorCross;
struct __declspec(uuid("d6497ca8-ff58-4314-86e9-654a85a54358"))
/* interface */ IAgCrdnVectorCustomScript;
struct __declspec(uuid("da4689fd-9985-464b-bccd-46293fa3469d"))
/* interface */ IAgCrdnVectorDerivative;
struct __declspec(uuid("e17c2bb7-80f8-4e28-a323-fc180eb14fbc"))
/* interface */ IAgCrdnVectorDisplacement;
enum AgECrdnSignalSense;
struct __declspec(uuid("04ae25ad-bfa3-422e-ac9f-868a695fbe54"))
/* interface */ IAgCrdnVectorTwoPlanesIntersection;
struct __declspec(uuid("f7154df3-9cbc-4be9-b137-b9d34b301e00"))
/* interface */ IAgCrdnVectorModelAttach;
struct __declspec(uuid("0a703a31-a6c6-452f-b8e7-d04a968698ed"))
/* interface */ IAgCrdnVectorProjection;
struct __declspec(uuid("81a76c2f-0823-4d23-a853-9272092098db"))
/* interface */ IAgCrdnVectorScaled;
struct __declspec(uuid("dc2dfe86-102f-4fc1-833d-d1413bf478e0"))
/* interface */ IAgCrdnVectorEccentricity;
struct __declspec(uuid("a5e84e78-14ae-4ad7-a244-97412c694b32"))
/* interface */ IAgCrdnVectorFixedInAxes;
struct __declspec(uuid("aba10532-5b3d-46e5-ad33-70b2d2b9b95f"))
/* interface */ IAgCrdnVectorLineOfNodes;
struct __declspec(uuid("a8b61467-73b2-43d9-8f9b-40761d09bb82"))
/* interface */ IAgCrdnVectorOrbitAngularMomentum;
struct __declspec(uuid("4efcc3df-8b08-46ab-9333-bd1e7427c9dc"))
/* interface */ IAgCrdnVectorOrbitNormal;
struct __declspec(uuid("bf097ea5-042f-4f83-812a-734bf5df6ece"))
/* interface */ IAgCrdnVectorPeriapsis;
struct __declspec(uuid("618a7cf3-1f1f-4d4e-8bbc-ab25226d35db"))
/* interface */ IAgCrdnVectorReflection;
struct __declspec(uuid("5b74c40c-8e39-4683-a767-0591671a5401"))
/* interface */ IAgCrdnVectorDirectionToStar;
struct __declspec(uuid("f41b7d8f-4650-4142-bee7-b85b37ac122e"))
/* interface */ IAgCrdnVectorFactory;
struct __declspec(uuid("7b5d9fe0-6d87-491b-9ea7-acde40a70f6c"))
/* interface */ IAgCrdnAxesFactory;
struct __declspec(uuid("1a60b82f-a07c-4d1b-bcca-2a183b716e40"))
/* interface */ IAgCrdnSystemFactory;
struct __declspec(uuid("9d3ace08-e642-4aa6-8f5c-fa04d69e2959"))
/* interface */ IAgCrdnPointFactory;
struct __declspec(uuid("0f1d5512-0a14-4351-82eb-1c1f5bc84093"))
/* interface */ IAgCrdnPlaneFactory;
struct __declspec(uuid("3f8e04af-7c30-444f-9948-df5e5101d0ed"))
/* interface */ IAgCrdnAngleFactory;
struct __declspec(uuid("50d19ff1-ca3a-4577-95cc-c3999456f7f0"))
/* dual interface */ IAgCrdnVectorGroup;
struct __declspec(uuid("02c7bc1e-d448-4c54-8582-6a386ed28595"))
/* dual interface */ IAgCrdnPointGroup;
struct __declspec(uuid("a31c4b4f-ed34-494e-9f00-9ac367be8ee2"))
/* dual interface */ IAgCrdnAngleGroup;
struct __declspec(uuid("a237df51-09a6-47c1-b7e5-40d08d5cbc48"))
/* dual interface */ IAgCrdnAxesGroup;
struct __declspec(uuid("44ec47c8-4a01-41e6-bb2a-02ffbb748d76"))
/* dual interface */ IAgCrdnPlaneGroup;
struct __declspec(uuid("878080f5-115d-40d0-94f6-d5746813885f"))
/* dual interface */ IAgCrdnSystemGroup;
struct __declspec(uuid("968346cb-52da-4d88-869b-333257a5dc07"))
/* interface */ IAgCrdnProvider;
struct __declspec(uuid("e236502a-d350-4c38-b3d7-89404505c46d"))
/* interface */ IAgCrdnWellKnownSystems;
struct __declspec(uuid("b8bbd54b-90bf-4162-bd12-d6d997a0a197"))
/* interface */ IAgCrdnWellKnownEarthSystems;
struct __declspec(uuid("32382d96-8095-44c7-b3e0-a3720b901873"))
/* interface */ IAgCrdnWellKnownSunSystems;
struct __declspec(uuid("79cbb43b-e988-4f2c-b4e3-63ac5bb05f10"))
/* interface */ IAgCrdnWellKnownAxes;
struct __declspec(uuid("b0d65690-b48f-49fb-945f-33d99dac23e1"))
/* interface */ IAgCrdnWellKnownEarthAxes;
struct __declspec(uuid("c5fdf570-7a35-414e-95ad-80738ae1ae8d"))
/* interface */ IAgCrdnWellKnownSunAxes;
struct __declspec(uuid("f4d43358-fba5-4a35-bbdf-f7386df58d60"))
/* interface */ IAgCrdnRootSettings;
struct __declspec(uuid("fd25cb2f-4b60-4535-bcaf-c8e08c8b5ba7"))
/* interface */ IAgCrdnRoot;
struct __declspec(uuid("b128d432-2c0c-47ad-a4f5-ee71bf855c95"))
/* interface */ IAgCrdnMethodCallResult;
struct __declspec(uuid("868a40e5-a935-474b-95c7-4433c99f4935"))
/* dual interface */ _IAgCrdn;
struct __declspec(uuid("afc6a9ae-e0cd-4e6f-99aa-55e8f85c6c30"))
/* dual interface */ _IAgCrdnTypeInfo;
struct __declspec(uuid("d384a2b5-db37-407a-b1f6-7653b4000b73"))
/* dual interface */ _IAgCrdnTemplate;
struct __declspec(uuid("7e362fd4-ea91-4bf2-8b63-5b1d1eef4b76"))
/* dual interface */ _IAgCrdnInstance;
struct __declspec(uuid("400f4a97-bdd0-41e8-a046-329e2d43ac6c"))
/* dual interface */ _IAgCrdnPointRefTo;
struct __declspec(uuid("82536933-5086-476d-aca1-8d1fb6699d8c"))
/* dual interface */ _IAgCrdnVectorRefTo;
struct __declspec(uuid("fbe8753e-882e-40ad-946f-2fdd4e17def9"))
/* dual interface */ _IAgCrdnAxesRefTo;
struct __declspec(uuid("35e2d96c-e018-4db5-a2e8-8696391c4e53"))
/* dual interface */ _IAgCrdnAngleRefTo;
struct __declspec(uuid("4c9d8c34-a03c-4ac0-9904-cd5b7fc982d6"))
/* dual interface */ _IAgCrdnSystemRefTo;
struct __declspec(uuid("eaa9ef81-0c1f-4ce2-b8f5-0941baffb29c"))
/* dual interface */ _IAgCrdnPlaneRefTo;
struct __declspec(uuid("b797a631-c7e5-40fc-b006-f87767ea7d16"))
/* dual interface */ _IAgCrdnVector;
struct __declspec(uuid("3c59ff6e-d647-46f2-8d1c-a059d4228cb4"))
/* dual interface */ _IAgCrdnAxesLabels;
struct __declspec(uuid("bcb81d9f-4f0e-4dc8-bfbc-12a769329fc5"))
/* dual interface */ _IAgCrdnAxes;
struct __declspec(uuid("c25c7945-18af-4070-82e1-d7a9629bbdd9"))
/* dual interface */ _IAgCrdnPoint;
struct __declspec(uuid("d537ce79-83f0-4b25-88c8-5861516b2524"))
/* dual interface */ _IAgCrdnSystem;
struct __declspec(uuid("fdd0db57-f372-4ced-a1c9-6f3e20425e35"))
/* dual interface */ _IAgCrdnAngle;
struct __declspec(uuid("48310205-2b08-4fe2-8095-11fb10473d30"))
/* dual interface */ _IAgCrdnPlaneLabels;
struct __declspec(uuid("664280a6-d8f5-45bf-85b8-e736c88a23bf"))
/* dual interface */ _IAgCrdnPlane;
struct __declspec(uuid("c0bf8573-a4b0-46e6-9296-6dfa0fb00cd4"))
/* dual interface */ _IAgCrdnAxesAlignedAndConstrained;
struct __declspec(uuid("e76db712-9bae-4643-8fdc-6e0a1e8c0f77"))
/* dual interface */ _IAgCrdnAxesAngularOffset;
struct __declspec(uuid("4d7c9b4a-fe49-45fd-b910-3c12953e36ae"))
/* dual interface */ _IAgCrdnAxesFixedAtEpoch;
struct __declspec(uuid("985c2153-4918-4490-9bd1-2433bdb651b6"))
/* dual interface */ _IAgCrdnAxesBPlane;
struct __declspec(uuid("ac473caf-ee8e-448e-9c93-8a21663ca9a0"))
/* dual interface */ _IAgCrdnAxesCustomScript;
struct __declspec(uuid("3c8489e6-339f-45d4-b6cf-e3f74cde71a5"))
/* dual interface */ _IAgCrdnAxesAttitudeFile;
struct __declspec(uuid("29cbd71e-3ba9-48a5-a281-0503002c6e86"))
/* dual interface */ _IAgCrdnAxesFixed;
struct __declspec(uuid("bf93cc57-c5d0-4705-a261-05df1c6ea70f"))
/* dual interface */ _IAgCrdnAxesModelAttach;
struct __declspec(uuid("79182bd4-4a11-4d34-a5d2-b16f8b683992"))
/* dual interface */ _IAgCrdnAxesSpinning;
struct __declspec(uuid("34040f5f-dc5f-4546-bb6b-e1b2fa0fc8ff"))
/* dual interface */ _IAgCrdnAxesOnSurface;
struct __declspec(uuid("ad4e38d4-950a-4e9f-a932-ff4ff3a71991"))
/* dual interface */ _IAgCrdnAxesTrajectory;
struct __declspec(uuid("85924024-0bef-4731-a6bd-a9068aa69a2d"))
/* dual interface */ _IAgCrdnAxesLagrangeLibration;
struct __declspec(uuid("29ae10b0-601d-43ce-ad0d-91a87edc6082"))
/* dual interface */ _IAgCrdnAngleBetweenVectors;
struct __declspec(uuid("405b8f73-ae33-4a8f-94c6-1ece23313546"))
/* dual interface */ _IAgCrdnAngleBetweenPlanes;
struct __declspec(uuid("cc90a00e-5524-4d3f-9e03-bcd2dd2988ac"))
/* dual interface */ _IAgCrdnAngleDihedral;
struct __declspec(uuid("d2bf68b9-d45a-47e5-8138-704d8d73b35b"))
/* dual interface */ _IAgCrdnAngleRotation;
struct __declspec(uuid("ebf5f8c8-9558-4d74-bad9-0ab8d9c6ff48"))
/* dual interface */ _IAgCrdnAngleToPlane;
struct __declspec(uuid("cb75bf1c-7084-43b2-8056-a64d768aa78c"))
/* dual interface */ _IAgCrdnPlaneNormal;
struct __declspec(uuid("a3d52bf2-673d-450b-a09f-a6bb5b5aec52"))
/* dual interface */ _IAgCrdnPlaneQuadrant;
struct __declspec(uuid("3e9eed8e-48f1-49dd-b6b2-e2bc365d52fa"))
/* dual interface */ _IAgCrdnPlaneTrajectory;
struct __declspec(uuid("c5964119-c54c-46fe-b9e5-09b78c807c21"))
/* dual interface */ _IAgCrdnPlaneTriad;
struct __declspec(uuid("69b8ba81-482d-4f64-b109-eceff392afa4"))
/* dual interface */ _IAgCrdnPointBPlane;
struct __declspec(uuid("04bb1ea0-1c2a-4995-86ec-4a6fc6061add"))
/* dual interface */ _IAgCrdnPointFile;
struct __declspec(uuid("6f87c88c-3bcf-4a9f-ba78-2de853f5e7a0"))
/* dual interface */ _IAgCrdnPointFixedInSystem;
struct __declspec(uuid("d8d13396-1891-4221-9515-669cd96f3a53"))
/* dual interface */ _IAgCrdnPointGrazing;
struct __declspec(uuid("aa9f798b-03f7-46ae-b866-7daa422a261a"))
/* dual interface */ _IAgCrdnPointGlint;
struct __declspec(uuid("7ab76a05-4c2c-4162-8b6f-88004b8d3cb8"))
/* dual interface */ _IAgCrdnPointCovarianceGrazing;
struct __declspec(uuid("68fc4ba7-584c-4e5c-9a1e-18af3d8403ba"))
/* dual interface */ _IAgCrdnPointPlaneIntersection;
struct __declspec(uuid("5383a119-2020-440c-bb1e-7eab225ce980"))
/* dual interface */ _IAgCrdnPointOnSurface;
struct __declspec(uuid("f513cc71-65c3-4e0d-8a05-e1047845f548"))
/* dual interface */ _IAgCrdnPointModelAttach;
struct __declspec(uuid("e13a9a9f-0063-475f-8cf2-9b53f697c286"))
/* dual interface */ _IAgCrdnPointPlaneProjection;
struct __declspec(uuid("0fb7b445-643d-4ecf-9e41-b1086c497260"))
/* dual interface */ _IAgCrdnPointLagrangeLibration;
struct __declspec(uuid("1b329d8c-10cc-4a9c-b3a4-bb61b712baab"))
/* dual interface */ _IAgCrdnSystemAssembled;
struct __declspec(uuid("ba98fb15-191f-4441-9535-292cbfe166c6"))
/* dual interface */ _IAgCrdnSystemOnSurface;
struct __declspec(uuid("bd83f6b8-88ba-4594-80b1-90a005adec03"))
/* dual interface */ _IAgCrdnLLAPosition;
struct __declspec(uuid("172ac49d-9fc2-41e2-b307-a0b5fd977b3d"))
/* dual interface */ _IAgCrdnVectorAngleRate;
struct __declspec(uuid("bb7ba510-f52d-4506-af51-f310282305b8"))
/* dual interface */ _IAgCrdnVectorApoapsis;
struct __declspec(uuid("f8d728f3-a025-4a92-bd19-77b584bb1be8"))
/* dual interface */ _IAgCrdnVectorFixedAtEpoch;
struct __declspec(uuid("268586bb-2eee-4f6f-9986-7d4265bfcda5"))
/* dual interface */ _IAgCrdnVectorAngularVelocity;
struct __declspec(uuid("c18afd40-9030-4bfa-b401-1a6e5994a039"))
/* dual interface */ _IAgCrdnVectorConing;
struct __declspec(uuid("4d140b28-74f1-4e6f-8388-db5a2004a19a"))
/* dual interface */ _IAgCrdnVectorCross;
struct __declspec(uuid("b8ad3221-e971-47c1-8739-b09ea7ad438f"))
/* dual interface */ _IAgCrdnVectorCustomScript;
struct __declspec(uuid("c73c6b6d-30ee-458f-8faf-b97668359078"))
/* dual interface */ _IAgCrdnVectorDerivative;
struct __declspec(uuid("ec6fed24-d2d2-454f-a52e-1c99fd69460b"))
/* dual interface */ _IAgCrdnVectorDisplacement;
struct __declspec(uuid("1b39f9d7-a817-438d-955b-4ec83dcf7ca7"))
/* dual interface */ _IAgCrdnVectorTwoPlanesIntersection;
struct __declspec(uuid("25c5391e-f1df-4bd9-9aa0-63501ef28a78"))
/* dual interface */ _IAgCrdnVectorModelAttach;
struct __declspec(uuid("a38dea12-b96e-45b9-9a65-17bf453bb5fd"))
/* dual interface */ _IAgCrdnVectorProjection;
struct __declspec(uuid("19e084ba-76ec-41b4-a0e1-d31f6b3a7ff8"))
/* dual interface */ _IAgCrdnVectorScaled;
struct __declspec(uuid("e7908b0e-5794-41cb-b86e-744f86b1c8d4"))
/* dual interface */ _IAgCrdnVectorEccentricity;
struct __declspec(uuid("559393af-89f7-44a6-9ce0-1b4f1640d9f0"))
/* dual interface */ _IAgCrdnVectorFixedInAxes;
struct __declspec(uuid("2c7a59f6-6dc9-481c-8d15-5602a4b5c8ff"))
/* dual interface */ _IAgCrdnVectorLineOfNodes;
struct __declspec(uuid("fea1a5ac-d501-499b-a8fd-9fa1e11854e5"))
/* dual interface */ _IAgCrdnVectorOrbitAngularMomentum;
struct __declspec(uuid("1e94d3c5-1338-4a30-9745-7ede01fbe201"))
/* dual interface */ _IAgCrdnVectorOrbitNormal;
struct __declspec(uuid("69ac369e-9cf4-4908-9e0e-7c7dd6256e80"))
/* dual interface */ _IAgCrdnVectorPeriapsis;
struct __declspec(uuid("d6919e87-2636-4fe1-aafd-22033e2fc308"))
/* dual interface */ _IAgCrdnVectorReflection;
struct __declspec(uuid("dbea9dde-7dd9-4b77-97df-284552f014d5"))
/* dual interface */ _IAgCrdnVectorDirectionToStar;
struct __declspec(uuid("39cc3172-1136-4b07-a731-3ef5becd7c4f"))
/* dual interface */ _IAgCrdnVectorFactory;
struct __declspec(uuid("c8eb14f2-521a-438d-8a91-f3cd9df355c0"))
/* dual interface */ _IAgCrdnAxesFactory;
struct __declspec(uuid("23f9334a-26a8-4770-b4a1-7e455144701f"))
/* dual interface */ _IAgCrdnSystemFactory;
struct __declspec(uuid("ca6856bc-b9f7-4578-bb78-04790a41c91d"))
/* dual interface */ _IAgCrdnPointFactory;
struct __declspec(uuid("ab77e5e1-769a-41ad-b982-23146e1ec016"))
/* dual interface */ _IAgCrdnPlaneFactory;
struct __declspec(uuid("b120b024-20d7-47e4-af8a-272dd15d7d25"))
/* dual interface */ _IAgCrdnAngleFactory;
struct __declspec(uuid("b5b015d8-5e26-4512-a487-2b0913521c38"))
/* dual interface */ _IAgCrdnProvider;
struct __declspec(uuid("c50bd2de-576a-4ba6-a424-b04a5e121253"))
/* dual interface */ _IAgCrdnRootSettings;
struct __declspec(uuid("fd3b9067-7e9e-4aac-95e3-4047d7dce7be"))
/* dual interface */ _IAgCrdnRoot;
struct __declspec(uuid("c97ddc6c-d7d1-49bf-940a-333e52565c06"))
/* dual interface */ _IAgCrdnWellKnownEarthSystems;
struct __declspec(uuid("33c286c9-d8c9-45ef-94f9-1bb265555583"))
/* dual interface */ _IAgCrdnWellKnownEarthAxes;
struct __declspec(uuid("4098052e-cbe0-4683-81bb-45a39b09b837"))
/* dual interface */ _IAgCrdnWellKnownSunSystems;
struct __declspec(uuid("7fdf2759-4c2b-46ad-8a9a-6401b861fb84"))
/* dual interface */ _IAgCrdnWellKnownSunAxes;
struct __declspec(uuid("02de9e73-1a6d-4622-918e-ea8898167616"))
/* dual interface */ _IAgCrdnWellKnownSystems;
struct __declspec(uuid("54b61ae6-9360-425e-bebe-31276be88f3e"))
/* dual interface */ _IAgCrdnWellKnownAxes;
struct __declspec(uuid("167bc726-a8c6-4b54-a4aa-d2505dbef66d"))
/* dual interface */ _IAgCrdnMethodCallResult;
struct __declspec(uuid("7e786846-f2ad-4dec-b6b3-5629e270db65"))
/* dual interface */ _IAgCrdnInterval;
struct __declspec(uuid("c54a5c6f-af6c-45f9-9c1d-f13bea353c6d"))
/* dual interface */ _IAgCrdnCentralBody;
struct __declspec(uuid("9f194c9f-080b-45d2-8b36-74a751d800e4"))
/* dual interface */ _IAgCrdnCentralBodyRefTo;
struct /* coclass */ AgCrdnGeneric;
struct /* coclass */ AgCrdnTypeInfo;
struct /* coclass */ AgCrdnInstance;
struct /* coclass */ AgCrdnTemplate;
struct /* coclass */ AgCrdnPointRefTo;
struct /* coclass */ AgCrdnVectorRefTo;
struct /* coclass */ AgCrdnAxesRefTo;
struct /* coclass */ AgCrdnAngleRefTo;
struct /* coclass */ AgCrdnSystemRefTo;
struct /* coclass */ AgCrdnPlaneRefTo;
struct /* coclass */ AgCrdnVector;
struct /* coclass */ AgCrdnAxesLabels;
struct /* coclass */ AgCrdnAxes;
struct /* coclass */ AgCrdnPoint;
struct /* coclass */ AgCrdnSystem;
struct /* coclass */ AgCrdnAngle;
struct /* coclass */ AgCrdnPlaneLabels;
struct /* coclass */ AgCrdnPlane;
struct /* coclass */ AgCrdnAxesAlignedAndConstrained;
struct /* coclass */ AgCrdnAxesAngularOffset;
struct /* coclass */ AgCrdnAxesFixedAtEpoch;
struct /* coclass */ AgCrdnAxesBPlane;
struct /* coclass */ AgCrdnAxesCustomScript;
struct /* coclass */ AgCrdnAxesAttitudeFile;
struct /* coclass */ AgCrdnAxesFixed;
struct /* coclass */ AgCrdnAxesModelAttach;
struct /* coclass */ AgCrdnAxesSpinning;
struct /* coclass */ AgCrdnAxesOnSurface;
struct /* coclass */ AgCrdnAxesTrajectory;
struct /* coclass */ AgCrdnAxesLagrangeLibration;
struct /* coclass */ AgCrdnAngleBetweenVectors;
struct /* coclass */ AgCrdnAngleBetweenPlanes;
struct /* coclass */ AgCrdnAngleDihedral;
struct /* coclass */ AgCrdnAngleRotation;
struct /* coclass */ AgCrdnAngleToPlane;
struct /* coclass */ AgCrdnPlaneNormal;
struct /* coclass */ AgCrdnPlaneQuadrant;
struct /* coclass */ AgCrdnPlaneTrajectory;
struct /* coclass */ AgCrdnPlaneTriad;
struct /* coclass */ AgCrdnPointBPlane;
struct /* coclass */ AgCrdnPointFile;
struct /* coclass */ AgCrdnPointFixedInSystem;
struct /* coclass */ AgCrdnPointGrazing;
struct /* coclass */ AgCrdnPointGlint;
struct /* coclass */ AgCrdnPointCovarianceGrazing;
struct /* coclass */ AgCrdnPointPlaneIntersection;
struct /* coclass */ AgCrdnPointOnSurface;
struct /* coclass */ AgCrdnPointModelAttach;
struct /* coclass */ AgCrdnPointPlaneProjection;
struct /* coclass */ AgCrdnPointLagrangeLibration;
struct /* coclass */ AgCrdnSystemAssembled;
struct /* coclass */ AgCrdnSystemOnSurface;
struct /* coclass */ AgCrdnLLAPosition;
struct /* coclass */ AgCrdnVectorAngleRate;
struct /* coclass */ AgCrdnVectorApoapsis;
struct /* coclass */ AgCrdnVectorFixedAtEpoch;
struct /* coclass */ AgCrdnVectorAngularVelocity;
struct /* coclass */ AgCrdnVectorConing;
struct /* coclass */ AgCrdnVectorCross;
struct /* coclass */ AgCrdnVectorCustomScript;
struct /* coclass */ AgCrdnVectorDerivative;
struct /* coclass */ AgCrdnVectorDisplacement;
struct /* coclass */ AgCrdnVectorTwoPlanesIntersection;
struct /* coclass */ AgCrdnVectorModelAttach;
struct /* coclass */ AgCrdnVectorProjection;
struct /* coclass */ AgCrdnVectorScaled;
struct /* coclass */ AgCrdnVectorEccentricity;
struct /* coclass */ AgCrdnVectorFixedInAxes;
struct /* coclass */ AgCrdnVectorLineOfNodes;
struct /* coclass */ AgCrdnVectorOrbitAngularMomentum;
struct /* coclass */ AgCrdnVectorOrbitNormal;
struct /* coclass */ AgCrdnVectorPeriapsis;
struct /* coclass */ AgCrdnVectorReflection;
struct /* coclass */ AgCrdnVectorDirectionToStar;
struct /* coclass */ AgCrdnVectorFactory;
struct /* coclass */ AgCrdnAxesFactory;
struct /* coclass */ AgCrdnSystemFactory;
struct /* coclass */ AgCrdnPointFactory;
struct /* coclass */ AgCrdnPlaneFactory;
struct /* coclass */ AgCrdnAngleFactory;
struct /* coclass */ AgCrdnVectorGroup;
struct /* coclass */ AgCrdnPointGroup;
struct /* coclass */ AgCrdnAngleGroup;
struct /* coclass */ AgCrdnAxesGroup;
struct /* coclass */ AgCrdnPlaneGroup;
struct /* coclass */ AgCrdnSystemGroup;
struct /* coclass */ AgCrdnProvider;
struct /* coclass */ AgCrdnRootSettings;
struct /* coclass */ AgCrdnRoot;
struct /* coclass */ AgCrdnWellKnownEarthSystems;
struct /* coclass */ AgCrdnWellKnownEarthAxes;
struct /* coclass */ AgCrdnWellKnownSunSystems;
struct /* coclass */ AgCrdnWellKnownSunAxes;
struct /* coclass */ AgCrdnWellKnownSystems;
struct /* coclass */ AgCrdnWellKnownAxes;
struct /* coclass */ AgCrdnMethodCallResult;
struct /* coclass */ AgCrdnInterval;
struct /* coclass */ AgCrdnIntervalCollection;
struct /* coclass */ AgCrdnCentralBody;
struct /* coclass */ AgCrdnCentralBodyRefTo;
struct /* coclass */ AgCrdnCentralBodyCollection;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAgCrdnContext, __uuidof(IAgCrdnContext));
_COM_SMARTPTR_TYPEDEF(IAgCrdnTypeInfo, __uuidof(IAgCrdnTypeInfo));
_COM_SMARTPTR_TYPEDEF(IAgCrdn, __uuidof(IAgCrdn));
_COM_SMARTPTR_TYPEDEF(IAgCrdnInterval, __uuidof(IAgCrdnInterval));
_COM_SMARTPTR_TYPEDEF(IAgCrdnIntervalCollection, __uuidof(IAgCrdnIntervalCollection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnTimeProperties, __uuidof(IAgCrdnTimeProperties));
_COM_SMARTPTR_TYPEDEF(IAgCrdnRefTo, __uuidof(IAgCrdnRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnTemplate, __uuidof(IAgCrdnTemplate));
_COM_SMARTPTR_TYPEDEF(IAgCrdnInstance, __uuidof(IAgCrdnInstance));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemTransformResult, __uuidof(IAgCrdnSystemTransformResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemTransformWithRateResult, __uuidof(IAgCrdnSystemTransformWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemFindInSystemResult, __uuidof(IAgCrdnSystemFindInSystemResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystem, __uuidof(IAgCrdnSystem));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointLocateInSystemWithRateResult, __uuidof(IAgCrdnPointLocateInSystemWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointLocateInSystemResult, __uuidof(IAgCrdnPointLocateInSystemResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPoint, __uuidof(IAgCrdnPoint));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointRefTo, __uuidof(IAgCrdnPointRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesTransformResult, __uuidof(IAgCrdnAxesTransformResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesTransformWithRateResult, __uuidof(IAgCrdnAxesTransformWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFindInAxesWithRateResult, __uuidof(IAgCrdnAxesFindInAxesWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFindInAxesResult, __uuidof(IAgCrdnAxesFindInAxesResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesLabels, __uuidof(IAgCrdnAxesLabels));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxes, __uuidof(IAgCrdnAxes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFindInAxesResult, __uuidof(IAgCrdnVectorFindInAxesResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFindInAxesWithRateResult, __uuidof(IAgCrdnVectorFindInAxesWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVector, __uuidof(IAgCrdnVector));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorRefTo, __uuidof(IAgCrdnVectorRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesRefTo, __uuidof(IAgCrdnAxesRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFindAngleResult, __uuidof(IAgCrdnAngleFindAngleResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFindAngleWithRateResult, __uuidof(IAgCrdnAngleFindAngleWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFindResult, __uuidof(IAgCrdnAngleFindResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFindWithRateResult, __uuidof(IAgCrdnAngleFindWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngle, __uuidof(IAgCrdnAngle));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleRefTo, __uuidof(IAgCrdnAngleRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemRefTo, __uuidof(IAgCrdnSystemRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFindInAxesResult, __uuidof(IAgCrdnPlaneFindInAxesResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFindInAxesWithRateResult, __uuidof(IAgCrdnPlaneFindInAxesWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFindInSystemResult, __uuidof(IAgCrdnPlaneFindInSystemResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFindInSystemWithRateResult, __uuidof(IAgCrdnPlaneFindInSystemWithRateResult));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneLabels, __uuidof(IAgCrdnPlaneLabels));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlane, __uuidof(IAgCrdnPlane));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneRefTo, __uuidof(IAgCrdnPlaneRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesAlignedAndConstrained, __uuidof(IAgCrdnAxesAlignedAndConstrained));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesAngularOffset, __uuidof(IAgCrdnAxesAngularOffset));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFixedAtEpoch, __uuidof(IAgCrdnAxesFixedAtEpoch));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCentralBody, __uuidof(IAgCrdnCentralBody));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCentralBodyRefTo, __uuidof(IAgCrdnCentralBodyRefTo));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesBPlane, __uuidof(IAgCrdnAxesBPlane));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesCustomScript, __uuidof(IAgCrdnAxesCustomScript));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesAttitudeFile, __uuidof(IAgCrdnAxesAttitudeFile));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFixed, __uuidof(IAgCrdnAxesFixed));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesModelAttach, __uuidof(IAgCrdnAxesModelAttach));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesSpinning, __uuidof(IAgCrdnAxesSpinning));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesOnSurface, __uuidof(IAgCrdnAxesOnSurface));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesTrajectory, __uuidof(IAgCrdnAxesTrajectory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnCentralBodyCollection, __uuidof(IAgCrdnCentralBodyCollection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesLagrangeLibration, __uuidof(IAgCrdnAxesLagrangeLibration));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleBetweenVectors, __uuidof(IAgCrdnAngleBetweenVectors));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleBetweenPlanes, __uuidof(IAgCrdnAngleBetweenPlanes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleDihedral, __uuidof(IAgCrdnAngleDihedral));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleRotation, __uuidof(IAgCrdnAngleRotation));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleToPlane, __uuidof(IAgCrdnAngleToPlane));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneNormal, __uuidof(IAgCrdnPlaneNormal));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneQuadrant, __uuidof(IAgCrdnPlaneQuadrant));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneTrajectory, __uuidof(IAgCrdnPlaneTrajectory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneTriad, __uuidof(IAgCrdnPlaneTriad));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointBPlane, __uuidof(IAgCrdnPointBPlane));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointFile, __uuidof(IAgCrdnPointFile));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointFixedInSystem, __uuidof(IAgCrdnPointFixedInSystem));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointGrazing, __uuidof(IAgCrdnPointGrazing));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointGlint, __uuidof(IAgCrdnPointGlint));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointCovarianceGrazing, __uuidof(IAgCrdnPointCovarianceGrazing));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointPlaneIntersection, __uuidof(IAgCrdnPointPlaneIntersection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointOnSurface, __uuidof(IAgCrdnPointOnSurface));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointModelAttach, __uuidof(IAgCrdnPointModelAttach));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointPlaneProjection, __uuidof(IAgCrdnPointPlaneProjection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointLagrangeLibration, __uuidof(IAgCrdnPointLagrangeLibration));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemAssembled, __uuidof(IAgCrdnSystemAssembled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnLLAPosition, __uuidof(IAgCrdnLLAPosition));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemOnSurface, __uuidof(IAgCrdnSystemOnSurface));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorAngleRate, __uuidof(IAgCrdnVectorAngleRate));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorApoapsis, __uuidof(IAgCrdnVectorApoapsis));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFixedAtEpoch, __uuidof(IAgCrdnVectorFixedAtEpoch));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorAngularVelocity, __uuidof(IAgCrdnVectorAngularVelocity));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorConing, __uuidof(IAgCrdnVectorConing));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorCross, __uuidof(IAgCrdnVectorCross));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorCustomScript, __uuidof(IAgCrdnVectorCustomScript));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorDerivative, __uuidof(IAgCrdnVectorDerivative));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorDisplacement, __uuidof(IAgCrdnVectorDisplacement));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorTwoPlanesIntersection, __uuidof(IAgCrdnVectorTwoPlanesIntersection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorModelAttach, __uuidof(IAgCrdnVectorModelAttach));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorProjection, __uuidof(IAgCrdnVectorProjection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorScaled, __uuidof(IAgCrdnVectorScaled));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorEccentricity, __uuidof(IAgCrdnVectorEccentricity));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFixedInAxes, __uuidof(IAgCrdnVectorFixedInAxes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorLineOfNodes, __uuidof(IAgCrdnVectorLineOfNodes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorOrbitAngularMomentum, __uuidof(IAgCrdnVectorOrbitAngularMomentum));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorOrbitNormal, __uuidof(IAgCrdnVectorOrbitNormal));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorPeriapsis, __uuidof(IAgCrdnVectorPeriapsis));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorReflection, __uuidof(IAgCrdnVectorReflection));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorDirectionToStar, __uuidof(IAgCrdnVectorDirectionToStar));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorFactory, __uuidof(IAgCrdnVectorFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesFactory, __uuidof(IAgCrdnAxesFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemFactory, __uuidof(IAgCrdnSystemFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointFactory, __uuidof(IAgCrdnPointFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneFactory, __uuidof(IAgCrdnPlaneFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleFactory, __uuidof(IAgCrdnAngleFactory));
_COM_SMARTPTR_TYPEDEF(IAgCrdnVectorGroup, __uuidof(IAgCrdnVectorGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPointGroup, __uuidof(IAgCrdnPointGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAngleGroup, __uuidof(IAgCrdnAngleGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnAxesGroup, __uuidof(IAgCrdnAxesGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnPlaneGroup, __uuidof(IAgCrdnPlaneGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnSystemGroup, __uuidof(IAgCrdnSystemGroup));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownEarthSystems, __uuidof(IAgCrdnWellKnownEarthSystems));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownSunSystems, __uuidof(IAgCrdnWellKnownSunSystems));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownSystems, __uuidof(IAgCrdnWellKnownSystems));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownEarthAxes, __uuidof(IAgCrdnWellKnownEarthAxes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownSunAxes, __uuidof(IAgCrdnWellKnownSunAxes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnWellKnownAxes, __uuidof(IAgCrdnWellKnownAxes));
_COM_SMARTPTR_TYPEDEF(IAgCrdnProvider, __uuidof(IAgCrdnProvider));
_COM_SMARTPTR_TYPEDEF(IAgCrdnRootSettings, __uuidof(IAgCrdnRootSettings));
_COM_SMARTPTR_TYPEDEF(IAgCrdnRoot, __uuidof(IAgCrdnRoot));
_COM_SMARTPTR_TYPEDEF(IAgCrdnMethodCallResult, __uuidof(IAgCrdnMethodCallResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdn, __uuidof(_IAgCrdn));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnTypeInfo, __uuidof(_IAgCrdnTypeInfo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnTemplate, __uuidof(_IAgCrdnTemplate));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnInstance, __uuidof(_IAgCrdnInstance));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointRefTo, __uuidof(_IAgCrdnPointRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorRefTo, __uuidof(_IAgCrdnVectorRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesRefTo, __uuidof(_IAgCrdnAxesRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleRefTo, __uuidof(_IAgCrdnAngleRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystemRefTo, __uuidof(_IAgCrdnSystemRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneRefTo, __uuidof(_IAgCrdnPlaneRefTo));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVector, __uuidof(_IAgCrdnVector));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesLabels, __uuidof(_IAgCrdnAxesLabels));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxes, __uuidof(_IAgCrdnAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPoint, __uuidof(_IAgCrdnPoint));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystem, __uuidof(_IAgCrdnSystem));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngle, __uuidof(_IAgCrdnAngle));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneLabels, __uuidof(_IAgCrdnPlaneLabels));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlane, __uuidof(_IAgCrdnPlane));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesAlignedAndConstrained, __uuidof(_IAgCrdnAxesAlignedAndConstrained));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesAngularOffset, __uuidof(_IAgCrdnAxesAngularOffset));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesFixedAtEpoch, __uuidof(_IAgCrdnAxesFixedAtEpoch));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesBPlane, __uuidof(_IAgCrdnAxesBPlane));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesCustomScript, __uuidof(_IAgCrdnAxesCustomScript));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesAttitudeFile, __uuidof(_IAgCrdnAxesAttitudeFile));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesFixed, __uuidof(_IAgCrdnAxesFixed));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesModelAttach, __uuidof(_IAgCrdnAxesModelAttach));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesSpinning, __uuidof(_IAgCrdnAxesSpinning));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesOnSurface, __uuidof(_IAgCrdnAxesOnSurface));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesTrajectory, __uuidof(_IAgCrdnAxesTrajectory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesLagrangeLibration, __uuidof(_IAgCrdnAxesLagrangeLibration));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleBetweenVectors, __uuidof(_IAgCrdnAngleBetweenVectors));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleBetweenPlanes, __uuidof(_IAgCrdnAngleBetweenPlanes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleDihedral, __uuidof(_IAgCrdnAngleDihedral));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleRotation, __uuidof(_IAgCrdnAngleRotation));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleToPlane, __uuidof(_IAgCrdnAngleToPlane));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneNormal, __uuidof(_IAgCrdnPlaneNormal));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneQuadrant, __uuidof(_IAgCrdnPlaneQuadrant));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneTrajectory, __uuidof(_IAgCrdnPlaneTrajectory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneTriad, __uuidof(_IAgCrdnPlaneTriad));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointBPlane, __uuidof(_IAgCrdnPointBPlane));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointFile, __uuidof(_IAgCrdnPointFile));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointFixedInSystem, __uuidof(_IAgCrdnPointFixedInSystem));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointGrazing, __uuidof(_IAgCrdnPointGrazing));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointGlint, __uuidof(_IAgCrdnPointGlint));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointCovarianceGrazing, __uuidof(_IAgCrdnPointCovarianceGrazing));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointPlaneIntersection, __uuidof(_IAgCrdnPointPlaneIntersection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointOnSurface, __uuidof(_IAgCrdnPointOnSurface));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointModelAttach, __uuidof(_IAgCrdnPointModelAttach));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointPlaneProjection, __uuidof(_IAgCrdnPointPlaneProjection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointLagrangeLibration, __uuidof(_IAgCrdnPointLagrangeLibration));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystemAssembled, __uuidof(_IAgCrdnSystemAssembled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystemOnSurface, __uuidof(_IAgCrdnSystemOnSurface));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnLLAPosition, __uuidof(_IAgCrdnLLAPosition));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorAngleRate, __uuidof(_IAgCrdnVectorAngleRate));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorApoapsis, __uuidof(_IAgCrdnVectorApoapsis));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorFixedAtEpoch, __uuidof(_IAgCrdnVectorFixedAtEpoch));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorAngularVelocity, __uuidof(_IAgCrdnVectorAngularVelocity));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorConing, __uuidof(_IAgCrdnVectorConing));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorCross, __uuidof(_IAgCrdnVectorCross));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorCustomScript, __uuidof(_IAgCrdnVectorCustomScript));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorDerivative, __uuidof(_IAgCrdnVectorDerivative));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorDisplacement, __uuidof(_IAgCrdnVectorDisplacement));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorTwoPlanesIntersection, __uuidof(_IAgCrdnVectorTwoPlanesIntersection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorModelAttach, __uuidof(_IAgCrdnVectorModelAttach));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorProjection, __uuidof(_IAgCrdnVectorProjection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorScaled, __uuidof(_IAgCrdnVectorScaled));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorEccentricity, __uuidof(_IAgCrdnVectorEccentricity));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorFixedInAxes, __uuidof(_IAgCrdnVectorFixedInAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorLineOfNodes, __uuidof(_IAgCrdnVectorLineOfNodes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorOrbitAngularMomentum, __uuidof(_IAgCrdnVectorOrbitAngularMomentum));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorOrbitNormal, __uuidof(_IAgCrdnVectorOrbitNormal));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorPeriapsis, __uuidof(_IAgCrdnVectorPeriapsis));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorReflection, __uuidof(_IAgCrdnVectorReflection));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorDirectionToStar, __uuidof(_IAgCrdnVectorDirectionToStar));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnVectorFactory, __uuidof(_IAgCrdnVectorFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAxesFactory, __uuidof(_IAgCrdnAxesFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnSystemFactory, __uuidof(_IAgCrdnSystemFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPointFactory, __uuidof(_IAgCrdnPointFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnPlaneFactory, __uuidof(_IAgCrdnPlaneFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnAngleFactory, __uuidof(_IAgCrdnAngleFactory));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnProvider, __uuidof(_IAgCrdnProvider));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnRootSettings, __uuidof(_IAgCrdnRootSettings));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnRoot, __uuidof(_IAgCrdnRoot));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownEarthSystems, __uuidof(_IAgCrdnWellKnownEarthSystems));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownEarthAxes, __uuidof(_IAgCrdnWellKnownEarthAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownSunSystems, __uuidof(_IAgCrdnWellKnownSunSystems));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownSunAxes, __uuidof(_IAgCrdnWellKnownSunAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownSystems, __uuidof(_IAgCrdnWellKnownSystems));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnWellKnownAxes, __uuidof(_IAgCrdnWellKnownAxes));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnMethodCallResult, __uuidof(_IAgCrdnMethodCallResult));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnInterval, __uuidof(_IAgCrdnInterval));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCentralBody, __uuidof(_IAgCrdnCentralBody));
_COM_SMARTPTR_TYPEDEF(_IAgCrdnCentralBodyRefTo, __uuidof(_IAgCrdnCentralBodyRefTo));

//
// Type library items
//

enum AgECrdnKind
{
    eCrdnKindUnknown = -1,
    eCrdnKindInvalid = 0,
    eCrdnKindAxes = 1,
    eCrdnKindAngle = 2,
    eCrdnKindVector = 3,
    eCrdnKindPoint = 4,
    eCrdnKindPlane = 5,
    eCrdnKindSystem = 6
};

struct __declspec(uuid("13110a2d-e8d0-4f4e-b08f-54c44142498b"))
IAgCrdnContext : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsTemplate))
    VARIANT_BOOL IsTemplate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsTemplate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsTemplate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("00b07a36-060b-42c7-a342-9063652a5470"))
IAgCrdnTypeInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeDescription))
    _bstr_t TypeDescription;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetShortTypeDescription))
    _bstr_t ShortTypeDescription;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTypeDescription ( );
    _bstr_t GetTypeName ( );
    _bstr_t GetShortTypeDescription ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortTypeDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("00c7427e-01eb-4756-97ec-08b87b23994a"))
IAgCrdn : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("28efa76d-9ab4-4955-b854-c03f4e3f83c8"))
IAgCrdnInterval : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStart ( );
    _variant_t GetStop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("8e2faf78-afa6-4f08-9e8b-943ea77c99e1"))
IAgCrdnIntervalCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnIntervalPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCrdnIntervalPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCrdnInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("12bc1bc1-f90f-4dd3-8c58-c69bd9dabdf7"))
IAgCrdnTimeProperties : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnIntervalCollectionPtr GetAvailability ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("26659fa8-e64a-4771-84c7-533447994f53"))
IAgCrdnRefTo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("09c75bbf-7eb7-474d-8c49-e18ed927a1f9"))
IAgCrdnTemplate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetClassName))
    _bstr_t ClassName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetClassName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("1c058b8b-912a-47ad-9097-d197c2095880"))
IAgCrdnInstance : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInstancePath))
    _bstr_t InstancePath;
    __declspec(property(get=GetTemplate))
    IAgCrdnPtr Template;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetInstancePath ( );
    IAgCrdnPtr GetTemplate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InstancePath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Template (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
};

enum AgECrdnPointType
{
    eCrdnPointTypeUnknown = -1,
    eCrdnPointTypeBPlane = 0,
    eCrdnPointTypeGrazing = 1,
    eCrdnPointTypeCovarianceGrazing = 2,
    eCrdnPointTypeFromFile = 3,
    eCrdnPointTypeFixedInSystem = 4,
    eCrdnPointTypeGlint = 5,
    eCrdnPointTypePlaneIntersection = 6,
    eCrdnPointTypeModelAttachment = 7,
    eCrdnPointTypePlaneProjection = 8,
    eCrdnPointTypeOnSurface = 9,
    eCrdnPointTypeLagrangeLibration = 10,
    eCrdnPointTypeTemplate = 11
};

enum AgECrdnSystemType
{
    eCrdnSystemTypeUnknown = -1,
    eCrdnSystemTypeAssembled = 0,
    eCrdnSystemTypeOnSurface = 1,
    eCrdnSystemTypeTemplate = 2
};

struct __declspec(uuid("6f707a4d-4993-46ff-bdad-2bb51a2a7cde"))
IAgCrdnSystemTransformResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("05db5cb3-53dd-4369-bd23-3bb5a2a636d8"))
IAgCrdnSystemTransformWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("63dcb829-9256-4ee6-80bb-2b3b820b1921"))
IAgCrdnSystemFindInSystemResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetPosition))
    STKUtil::IAgCartesian3VectorPtr Position;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;
    __declspec(property(get=GetRate))
    STKUtil::IAgCartesian3VectorPtr Rate;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );
    STKUtil::IAgCartesian3VectorPtr GetRate ( );
    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
};

struct __declspec(uuid("da25254d-7e4b-45dd-8103-4a82b450dd49"))
IAgCrdnSystem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnSystemType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnSystemType GetType ( );
    IAgCrdnSystemTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * InputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInInputSystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * InputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInInputSystem );
    IAgCrdnSystemTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInMySystem );
    IAgCrdnSystemFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnSystemType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * InputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * InputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInInputSystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnSystemFindInSystemResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("456f22a5-1e8f-423f-a7e6-65259fc3f598"))
IAgCrdnPointLocateInSystemWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetPosition))
    STKUtil::IAgCartesian3VectorPtr Position;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("6ac0fa73-a932-47f5-834b-a303064a15d2"))
IAgCrdnPointLocateInSystemResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetPosition))
    STKUtil::IAgCartesian3VectorPtr Position;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("541dd40e-c399-4c27-881a-6df130cf6427"))
IAgCrdnPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("b19a6aa7-f367-41d6-b3e9-5440836000c6"))
IAgCrdnPointRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetPoint (
        struct IAgCrdnPoint * Point );
    IAgCrdnPointPtr GetPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ struct IAgCrdnPoint * Point ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
};

enum AgECrdnVectorType
{
    eCrdnVectorTypeUnknown = -1,
    eCrdnVectorTypeDisplacement = 0,
    eCrdnVectorTypeApoapsis = 1,
    eCrdnVectorTypeFixedAtEpoch = 2,
    eCrdnVectorTypeAngularVelocity = 3,
    eCrdnVectorTypeConing = 4,
    eCrdnVectorTypeCrossProduct = 5,
    eCrdnVectorTypeCustomScript = 6,
    eCrdnVectorTypeDerivative = 7,
    eCrdnVectorTypeAngleRate = 8,
    eCrdnVectorTypeEccentricity = 9,
    eCrdnVectorTypeFixedInAxes = 10,
    eCrdnVectorTypeTwoPlanesIntersection = 12,
    eCrdnVectorTypeLineOfNodes = 13,
    eCrdnVectorTypeModelAttachment = 14,
    eCrdnVectorTypeOrbitAngularMomentum = 15,
    eCrdnVectorTypeOrbitNormal = 16,
    eCrdnVectorTypePeriapsis = 17,
    eCrdnVectorTypeProjection = 18,
    eCrdnVectorTypeReflection = 19,
    eCrdnVectorTypeScaled = 20,
    eCrdnVectorTypeDirectionToStar = 21,
    eCrdnVectorTypeTemplate = 22
};

enum AgECrdnAxesType
{
    eCrdnAxesTypeUnknown = -1,
    eCrdnAxesTypeLagrangeLibration = 0,
    eCrdnAxesTypeAngularOffset = 1,
    eCrdnAxesTypeFixedAtEpoch = 2,
    eCrdnAxesTypeBPlane = 3,
    eCrdnAxesTypeCustomScript = 4,
    eCrdnAxesTypeFromFile = 5,
    eCrdnAxesTypeFixed = 6,
    eCrdnAxesTypeAlignedAndConstrained = 7,
    eCrdnAxesTypeModelAttachment = 8,
    eCrdnAxesTypeSpinning = 9,
    eCrdnAxesTypeOnSurface = 10,
    eCrdnAxesTypeTrajectory = 11,
    eCrdnAxesTypeTemplate = 12
};

struct __declspec(uuid("42d87abc-60b1-45af-85dc-389162d10b78"))
IAgCrdnAxesTransformResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("c8665c0a-9418-4e34-a5d6-64f766314722"))
IAgCrdnAxesTransformWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("866627fa-d132-4530-a7d2-03528ef3b5cb"))
IAgCrdnAxesFindInAxesWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngularVelocity))
    STKUtil::IAgCartesian3VectorPtr AngularVelocity;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetAngularVelocity ( );
    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngularVelocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
};

struct __declspec(uuid("ae6a9b2d-5706-4c73-b8df-454f92a358bc"))
IAgCrdnAxesFindInAxesResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
};

struct __declspec(uuid("fda2416c-d0c9-46a4-a4a3-bb0a70b5a662"))
IAgCrdnAxesLabels : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelX,put=PutLabelX))
    _bstr_t LabelX;
    __declspec(property(get=GetLabelY,put=PutLabelY))
    _bstr_t LabelY;
    __declspec(property(get=GetLabelZ,put=PutLabelZ))
    _bstr_t LabelZ;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLabelX ( );
    void PutLabelX (
        _bstr_t pRetVal );
    _bstr_t GetLabelY ( );
    void PutLabelY (
        _bstr_t pRetVal );
    _bstr_t GetLabelZ ( );
    void PutLabelZ (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelX (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelX (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelY (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelY (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelZ (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelZ (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("ac5d1b41-bc75-4619-a833-2a3ebb422777"))
IAgCrdnAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
};

struct __declspec(uuid("364cadf7-e332-45f1-a35c-e38879b83987"))
IAgCrdnVectorFindInAxesResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("aa9f282d-765f-4fd1-af10-6ac8a33f53b6"))
IAgCrdnVectorFindInAxesWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;
    __declspec(property(get=GetRate))
    STKUtil::IAgCartesian3VectorPtr Rate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );
    STKUtil::IAgCartesian3VectorPtr GetRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("2db6efc3-b210-4b12-a8ef-fa08325a19e3"))
IAgCrdnVector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("2b134783-ab56-4ba5-a5ad-02cf6827ec3b"))
IAgCrdnVectorRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetVector (
        struct IAgCrdnVector * Vector );
    IAgCrdnVectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetVector (
        /*[in]*/ struct IAgCrdnVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
};

struct __declspec(uuid("2cbacd87-1606-45b3-8eb1-e2dd5607b03f"))
IAgCrdnAxesRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetAxes (
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesPtr GetAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetAxes (
        /*[in]*/ struct IAgCrdnAxes * Axes ) = 0;
      virtual HRESULT __stdcall raw_GetAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

enum AgECrdnAngleType
{
    eCrdnAngleTypeUnknown = -1,
    eCrdnAngleTypeBetweenVectors = 0,
    eCrdnAngleTypeBetweenPlanes = 1,
    eCrdnAngleTypeDihedralAngle = 2,
    eCrdnAngleTypeRotation = 3,
    eCrdnAngleTypeToPlane = 4,
    eCrdnAngleTypeTemplate = 5
};

struct __declspec(uuid("779098a7-c93a-46f9-bee8-67ce5e502b5b"))
IAgCrdnAngleFindAngleResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    double GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("e8edebba-0a82-43bd-999d-cea6641ec47f"))
IAgCrdnAngleFindAngleWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngle))
    double Angle;
    __declspec(property(get=GetAngleRate))
    double AngleRate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    double GetAngle ( );
    double GetAngleRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("a8984b7f-560d-4c3c-909e-0ecd2497666d"))
IAgCrdnAngleFindResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngle))
    double Angle;
    __declspec(property(get=GetVectorFrom))
    STKUtil::IAgCartesian3VectorPtr VectorFrom;
    __declspec(property(get=GetVectorTo))
    STKUtil::IAgCartesian3VectorPtr VectorTo;
    __declspec(property(get=GetVectorAbout))
    STKUtil::IAgCartesian3VectorPtr VectorAbout;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    double GetAngle ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorFrom ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorTo ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorAbout ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorFrom (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorTo (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorAbout (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("aa608c30-c8cb-4f56-baf6-13367672d380"))
IAgCrdnAngleFindWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngle))
    double Angle;
    __declspec(property(get=GetAngleRate))
    double AngleRate;
    __declspec(property(get=GetVectorFrom))
    STKUtil::IAgCartesian3VectorPtr VectorFrom;
    __declspec(property(get=GetVectorTo))
    STKUtil::IAgCartesian3VectorPtr VectorTo;
    __declspec(property(get=GetVectorAbout))
    STKUtil::IAgCartesian3VectorPtr VectorAbout;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    double GetAngle ( );
    double GetAngleRate ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorFrom ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorTo ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorAbout ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorFrom (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorTo (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorAbout (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("d8499f44-bd53-4576-ba04-2dd7e8c0c9bb"))
IAgCrdnAngle : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("50ac25c4-0429-4509-ba3a-b9268fdac68f"))
IAgCrdnAngleRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetAngle (
        struct IAgCrdnAngle * Angle );
    IAgCrdnAnglePtr GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetAngle (
        /*[in]*/ struct IAgCrdnAngle * Angle ) = 0;
      virtual HRESULT __stdcall raw_GetAngle (
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
};

struct __declspec(uuid("4c35e30e-e5af-447b-8f88-ffced737b90b"))
IAgCrdnSystemRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetSystem (
        struct IAgCrdnSystem * System );
    IAgCrdnSystemPtr GetSystem ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetSystem (
        /*[in]*/ struct IAgCrdnSystem * System ) = 0;
      virtual HRESULT __stdcall raw_GetSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

enum AgECrdnPlaneType
{
    eCrdnPlaneTypeUnknown = -1,
    eCrdnPlaneTypeNormal = 0,
    eCrdnPlaneTypeQuadrant = 1,
    eCrdnPlaneTypeTrajectory = 2,
    eCrdnPlaneTypeTriad = 3,
    eCrdnPlaneTypeTemplate = 4
};

struct __declspec(uuid("d5a5ec8b-8c14-452d-a59b-81b6815e0147"))
IAgCrdnPlaneFindInAxesResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("88008f30-8387-4451-8a15-c02b88102db1"))
IAgCrdnPlaneFindInAxesWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetXAxisRate))
    STKUtil::IAgCartesian3VectorPtr XAxisRate;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;
    __declspec(property(get=GetYAxisRate))
    STKUtil::IAgCartesian3VectorPtr YAxisRate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxisRate ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxisRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("dedfa84d-30ca-4e08-a036-2cf6230a6b2a"))
IAgCrdnPlaneFindInSystemResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetOriginPosition))
    STKUtil::IAgCartesian3VectorPtr OriginPosition;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPosition (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("61aa5051-68ad-47d1-b1fc-74494bc2811c"))
IAgCrdnPlaneFindInSystemWithRateResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetOriginPosition))
    STKUtil::IAgCartesian3VectorPtr OriginPosition;
    __declspec(property(get=GetOriginVelocity))
    STKUtil::IAgCartesian3VectorPtr OriginVelocity;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetXAxisRate))
    STKUtil::IAgCartesian3VectorPtr XAxisRate;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;
    __declspec(property(get=GetYAxisRate))
    STKUtil::IAgCartesian3VectorPtr YAxisRate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginVelocity ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxisRate ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxisRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPosition (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginVelocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("94b509db-fdd6-43e1-9155-6d289b8629db"))
IAgCrdnPlaneLabels : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetXAxisLabel,put=PutXAxisLabel))
    _bstr_t XAxisLabel;
    __declspec(property(get=GetYAxisLabel,put=PutYAxisLabel))
    _bstr_t YAxisLabel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetXAxisLabel ( );
    void PutXAxisLabel (
        _bstr_t pRetVal );
    _bstr_t GetYAxisLabel ( );
    void PutYAxisLabel (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XAxisLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("05812565-21d4-40b2-82cc-cfbb22c4cd6a"))
IAgCrdnPlane : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
};

struct __declspec(uuid("db7f6364-adab-4463-868e-08900604566d"))
IAgCrdnPlaneRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetPlane (
        struct IAgCrdnPlane * Plane );
    IAgCrdnPlanePtr GetPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetPlane (
        /*[in]*/ struct IAgCrdnPlane * Plane ) = 0;
      virtual HRESULT __stdcall raw_GetPlane (
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
};

struct __declspec(uuid("f5ff4d9d-c05e-4a5f-8dad-fc01e19124a8"))
IAgCrdnAxesAlignedAndConstrained : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignmentReferenceVector))
    IAgCrdnVectorRefToPtr AlignmentReferenceVector;
    __declspec(property(get=GetConstraintReferenceVector))
    IAgCrdnVectorRefToPtr ConstraintReferenceVector;
    __declspec(property(get=GetAlignmentDirection))
    STKUtil::IAgDirectionPtr AlignmentDirection;
    __declspec(property(get=GetConstraintDirection))
    STKUtil::IAgDirectionPtr ConstraintDirection;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetAlignmentReferenceVector ( );
    IAgCrdnVectorRefToPtr GetConstraintReferenceVector ( );
    STKUtil::IAgDirectionPtr GetAlignmentDirection ( );
    STKUtil::IAgDirectionPtr GetConstraintDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AlignmentReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignmentDirection (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintDirection (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
};

struct __declspec(uuid("85d0f960-6b16-4701-a4b2-d2f1fcc8a4a9"))
IAgCrdnAxesAngularOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSpinVector))
    IAgCrdnVectorRefToPtr SpinVector;
    __declspec(property(get=GetRotationAngle))
    IAgCrdnAngleRefToPtr RotationAngle;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFixedOffsetAngle,put=PutFixedOffsetAngle))
    double FixedOffsetAngle;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetSpinVector ( );
    IAgCrdnAngleRefToPtr GetRotationAngle ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    double GetFixedOffsetAngle ( );
    void PutFixedOffsetAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpinVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ struct IAgCrdnAngleRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOffsetAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FixedOffsetAngle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("1cec5dd3-d93b-4335-af94-7fd71ad0f2ab"))
IAgCrdnAxesFixedAtEpoch : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceAxes))
    IAgCrdnAxesRefToPtr SourceAxes;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetSourceAxes ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SourceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("901f58a0-8740-472e-a8f1-06b2f77f49b6"))
IAgCrdnCentralBody : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("a63fc04e-22e6-4cac-afb8-0ae13695d0e6"))
IAgCrdnCentralBodyRefTo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetCentralBody (
        struct IAgCrdnCentralBody * CentralBody );
    IAgCrdnCentralBodyPtr GetCentralBody ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetCentralBody (
        /*[in]*/ struct IAgCrdnCentralBody * CentralBody ) = 0;
      virtual HRESULT __stdcall raw_GetCentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBody * * ppRetVal ) = 0;
};

enum AgECrdnDirectionType
{
    eCrdnDirectionIncomingAsymptote = 1,
    eCrdnDirectionOutgoingAsymptote = 2
};

struct __declspec(uuid("1349ceaf-abfb-489f-8ef0-f9e71c522cf2"))
IAgCrdnAxesBPlane : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTrajectory))
    IAgCrdnPointRefToPtr Trajectory;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetTargetBody))
    IAgCrdnCentralBodyRefToPtr TargetBody;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECrdnDirectionType Direction;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetTrajectory ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnCentralBodyRefToPtr GetTargetBody ( );
    enum AgECrdnDirectionType GetDirection ( );
    void PutDirection (
        enum AgECrdnDirectionType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECrdnDirectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECrdnDirectionType pRetVal ) = 0;
};

struct __declspec(uuid("6ab28307-f0c7-473d-beaf-fd60ae1c4fdb"))
IAgCrdnAxesCustomScript : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("708337d5-0b04-4f0a-8ac4-812ad0c4b88d"))
IAgCrdnAxesAttitudeFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("112b1e93-617b-40af-86db-c4763a359e9b"))
IAgCrdnAxesFixed : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFixedOrientation))
    STKUtil::IAgOrientationPtr FixedOrientation;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    STKUtil::IAgOrientationPtr GetFixedOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOrientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
};

struct __declspec(uuid("599ad89a-37d3-4491-851c-d8cbccfbf56a"))
IAgCrdnAxesModelAttach : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("1e6756bb-b4e2-42f9-9488-06b84ab3b590"))
IAgCrdnAxesSpinning : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSpinVector))
    IAgCrdnVectorRefToPtr SpinVector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetInitialOffset,put=PutInitialOffset))
    double InitialOffset;
    __declspec(property(get=GetSpinRate,put=PutSpinRate))
    double SpinRate;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetSpinVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    double GetInitialOffset ( );
    void PutInitialOffset (
        double pRetVal );
    double GetSpinRate ( );
    void PutSpinRate (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpinVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitialOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitialOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpinRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpinRate (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("356a90b5-7c8a-4145-925e-0d2478b4386c"))
IAgCrdnAxesOnSurface : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetUseMSL,put=PutUseMSL))
    VARIANT_BOOL UseMSL;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    VARIANT_BOOL GetUseMSL ( );
    void PutUseMSL (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMSL (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMSL (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

enum AgECrdnTrajectoryAxesType
{
    eCrdnTrajectoryAxesICR = 0,
    eCrdnTrajectoryAxesVNC = 1,
    eCrdnTrajectoryAxesRIC = 2,
    eCrdnTrajectoryAxesLVLH = 3,
    eCrdnTrajectoryAxesVVLH = 4,
    eCrdnTrajectoryAxesBBR = 5
};

struct __declspec(uuid("f622efa8-69ed-4c17-8f9c-e9edda4ba36b"))
IAgCrdnAxesTrajectory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTrajectoryPoint))
    IAgCrdnPointRefToPtr TrajectoryPoint;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetTrajectoryAxesType,put=PutTrajectoryAxesType))
    enum AgECrdnTrajectoryAxesType TrajectoryAxesType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetTrajectoryPoint ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    enum AgECrdnTrajectoryAxesType GetTrajectoryAxesType ( );
    void PutTrajectoryAxesType (
        enum AgECrdnTrajectoryAxesType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrajectoryPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectoryAxesType (
        /*[out,retval]*/ enum AgECrdnTrajectoryAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TrajectoryAxesType (
        /*[in]*/ enum AgECrdnTrajectoryAxesType pRetVal ) = 0;
};

enum AgECrdnLagrangeLibrationPointType
{
    eCrdnLagrangeLibrationPointTypeL1 = 1,
    eCrdnLagrangeLibrationPointTypeL2 = 2,
    eCrdnLagrangeLibrationPointTypeL3 = 3,
    eCrdnLagrangeLibrationPointTypeL4 = 4,
    eCrdnLagrangeLibrationPointTypeL5 = 5
};

struct __declspec(uuid("b457d9c2-42bd-40d6-ac2d-72c037b964f1"))
IAgCrdnCentralBodyCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Add (
        _bstr_t CentralBodyName );
    HRESULT Remove (
        _bstr_t CentralBodyName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR CentralBodyName ) = 0;
};

struct __declspec(uuid("6d8ef2a2-4f6d-4ec8-aa3b-9d3e8104f00b"))
IAgCrdnAxesLagrangeLibration : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPrimaryCentralBody))
    IAgCrdnCentralBodyRefToPtr PrimaryCentralBody;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnLagrangeLibrationPointType PointType;
    __declspec(property(get=GetSecondaryCentralBodies))
    IAgCrdnCentralBodyCollectionPtr SecondaryCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetPrimaryCentralBody ( );
    enum AgECrdnLagrangeLibrationPointType GetPointType ( );
    void PutPointType (
        enum AgECrdnLagrangeLibrationPointType pRetVal );
    IAgCrdnCentralBodyCollectionPtr GetSecondaryCentralBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PrimaryCentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnLagrangeLibrationPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnLagrangeLibrationPointType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryCentralBodies (
        /*[out,retval]*/ struct IAgCrdnCentralBodyCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("9e02f4e5-72c9-49e9-93a0-9b4451c3dae7"))
IAgCrdnAngleBetweenVectors : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFromVector))
    IAgCrdnVectorRefToPtr FromVector;
    __declspec(property(get=GetToVector))
    IAgCrdnVectorRefToPtr ToVector;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetFromVector ( );
    IAgCrdnVectorRefToPtr GetToVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("486fd946-78d1-489c-bd7d-63090f6c912a"))
IAgCrdnAngleBetweenPlanes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFromPlane))
    IAgCrdnPlaneRefToPtr FromPlane;
    __declspec(property(get=GetToPlane))
    IAgCrdnPlaneRefToPtr ToPlane;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPlaneRefToPtr GetFromPlane ( );
    IAgCrdnPlaneRefToPtr GetToPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromPlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToPlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("3bea0eb6-13d2-4a14-baad-3a54718b8791"))
IAgCrdnAngleDihedral : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFromVector))
    IAgCrdnVectorRefToPtr FromVector;
    __declspec(property(get=GetToVector))
    IAgCrdnVectorRefToPtr ToVector;
    __declspec(property(get=GetPoleAbout))
    IAgCrdnVectorRefToPtr PoleAbout;
    __declspec(property(get=GetCounterClockwiseRotation,put=PutCounterClockwiseRotation))
    VARIANT_BOOL CounterClockwiseRotation;
    __declspec(property(get=GetSignedAngle,put=PutSignedAngle))
    VARIANT_BOOL SignedAngle;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetFromVector ( );
    IAgCrdnVectorRefToPtr GetToVector ( );
    IAgCrdnVectorRefToPtr GetPoleAbout ( );
    VARIANT_BOOL GetCounterClockwiseRotation ( );
    void PutCounterClockwiseRotation (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSignedAngle ( );
    void PutSignedAngle (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PoleAbout (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterClockwiseRotation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CounterClockwiseRotation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SignedAngle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignedAngle (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

enum AgECrdnDisplayAxisSelector
{
    eCrdnDisplayAxisX = 0,
    eCrdnDisplayAxisY = 1,
    eCrdnDisplayAxisZ = 2
};

struct __declspec(uuid("b96bdcc4-2b80-411c-9a13-84c81c5b24cb"))
IAgCrdnAngleRotation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFromAxes))
    IAgCrdnAxesRefToPtr FromAxes;
    __declspec(property(get=GetToAxes))
    IAgCrdnAxesRefToPtr ToAxes;
    __declspec(property(get=GetReferenceDirection,put=PutReferenceDirection))
    enum AgECrdnDisplayAxisSelector ReferenceDirection;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetFromAxes ( );
    IAgCrdnAxesRefToPtr GetToAxes ( );
    enum AgECrdnDisplayAxisSelector GetReferenceDirection ( );
    void PutReferenceDirection (
        enum AgECrdnDisplayAxisSelector pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FromAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceDirection (
        /*[out,retval]*/ enum AgECrdnDisplayAxisSelector * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceDirection (
        /*[in]*/ enum AgECrdnDisplayAxisSelector pRetVal ) = 0;
};

enum AgECrdnSignedAngleType
{
    eCrdnSignedAngleNone = 0,
    eCrdnSignedAnglePositive = 1,
    eCrdnSignedAngleNegative = 2
};

struct __declspec(uuid("f073c479-68c3-496e-aca2-1532ad7c0d2d"))
IAgCrdnAngleToPlane : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetSigned,put=PutSigned))
    enum AgECrdnSignedAngleType Signed;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    enum AgECrdnSignedAngleType GetSigned ( );
    void PutSigned (
        enum AgECrdnSignedAngleType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Signed (
        /*[out,retval]*/ enum AgECrdnSignedAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Signed (
        /*[in]*/ enum AgECrdnSignedAngleType pRetVal ) = 0;
};

struct __declspec(uuid("12921103-07e5-4d1e-99f6-d1d5e9426b7a"))
IAgCrdnPlaneNormal : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetNormalVector))
    IAgCrdnVectorRefToPtr NormalVector;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetNormalVector ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

enum AgECrdnQuadrantType
{
    eCrdnQuadrantXY = 1,
    eCrdnQuadrantYX = 2,
    eCrdnQuadrantXZ = 3,
    eCrdnQuadrantZX = 4,
    eCrdnQuadrantYZ = 5,
    eCrdnQuadrantZY = 6
};

struct __declspec(uuid("3678361f-f892-4383-8c96-16e6c10ea808"))
IAgCrdnPlaneQuadrant : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetQuadrant,put=PutQuadrant))
    enum AgECrdnQuadrantType Quadrant;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    enum AgECrdnQuadrantType GetQuadrant ( );
    void PutQuadrant (
        enum AgECrdnQuadrantType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Quadrant (
        /*[out,retval]*/ enum AgECrdnQuadrantType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Quadrant (
        /*[in]*/ enum AgECrdnQuadrantType pRetVal ) = 0;
};

struct __declspec(uuid("9fdab3f5-eb7a-4761-b49d-9884c0cca176"))
IAgCrdnPlaneTrajectory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPoint))
    IAgCrdnPointRefToPtr Point;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetRotationOffset,put=PutRotationOffset))
    double RotationOffset;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetPoint ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    double GetRotationOffset ( );
    void PutRotationOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationOffset (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("d029a9f6-0773-479f-8cb8-bcebb1d3de38"))
IAgCrdnPlaneTriad : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointA))
    IAgCrdnPointRefToPtr PointA;
    __declspec(property(get=GetPointB))
    IAgCrdnPointRefToPtr PointB;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetRotationOffset,put=PutRotationOffset))
    double RotationOffset;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetPointA ( );
    IAgCrdnPointRefToPtr GetPointB ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    double GetRotationOffset ( );
    void PutRotationOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointA (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointB (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationOffset (
        /*[in]*/ double pRetVal ) = 0;
};

enum AgECrdnPointBPlaneType
{
    eCrdnPointBPlaneAsymptote = 1,
    eCrdnPointBPlaneATwoBody = 2
};

struct __declspec(uuid("3d80338d-b412-4886-aefe-a89d61740c6d"))
IAgCrdnPointBPlane : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetBody))
    IAgCrdnCentralBodyRefToPtr TargetBody;
    __declspec(property(get=GetTrajectory))
    IAgCrdnPointRefToPtr Trajectory;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnPointBPlaneType PointType;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECrdnDirectionType Direction;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetTargetBody ( );
    IAgCrdnPointRefToPtr GetTrajectory ( );
    enum AgECrdnPointBPlaneType GetPointType ( );
    void PutPointType (
        enum AgECrdnPointBPlaneType pRetVal );
    enum AgECrdnDirectionType GetDirection ( );
    void PutDirection (
        enum AgECrdnDirectionType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnPointBPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnPointBPlaneType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECrdnDirectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECrdnDirectionType pRetVal ) = 0;
};

struct __declspec(uuid("2e68dda7-0050-442c-9d96-bd40373278c8"))
IAgCrdnPointFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("73e29736-8897-4114-b628-195cce45eb91"))
IAgCrdnPointFixedInSystem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReference))
    IAgCrdnSystemRefToPtr Reference;
    __declspec(property(get=GetFixedPoint))
    STKUtil::IAgPositionPtr FixedPoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemRefToPtr GetReference ( );
    STKUtil::IAgPositionPtr GetFixedPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedPoint (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
};

struct __declspec(uuid("acbf34bd-1dbb-4aad-832a-497f7a1872da"))
IAgCrdnPointGrazing : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("ed1403d9-4e9d-4021-881e-2dd30215c7d0"))
IAgCrdnPointGlint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetSourcePoint))
    IAgCrdnPointRefToPtr SourcePoint;
    __declspec(property(get=GetObserverPoint))
    IAgCrdnPointRefToPtr ObserverPoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetSourcePoint ( );
    IAgCrdnPointRefToPtr GetObserverPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObserverPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("9efe77e9-bb0b-4a3a-b886-a20325d17a89"))
IAgCrdnPointCovarianceGrazing : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetTargetName,put=PutTargetName))
    _bstr_t TargetName;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetProbability,put=PutProbability))
    double Probability;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetUseProbability,put=PutUseProbability))
    VARIANT_BOOL UseProbability;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    _bstr_t GetTargetName ( );
    void PutTargetName (
        _bstr_t pRetVal );
    double GetDistance ( );
    void PutDistance (
        double pRetVal );
    double GetProbability ( );
    void PutProbability (
        double pRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetUseProbability ( );
    void PutUseProbability (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Probability (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Probability (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseProbability (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseProbability (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("03daeec7-7b5d-45b4-970f-ed16c14e3674"))
IAgCrdnPointPlaneIntersection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetOriginPoint))
    IAgCrdnPointRefToPtr OriginPoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    IAgCrdnPointRefToPtr GetOriginPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

enum AgECrdnReferenceShapeType
{
    eCrdnReferenceShapeEllipsoid = 1,
    eCrdnReferenceShapeTerrain = 2,
    eCrdnReferenceShapeMSL = 3
};

enum AgECrdnSurfaceType
{
    eCrdnSurfaceDetic = 1,
    eCrdnSurfaceCentric = 2
};

struct __declspec(uuid("e5f3e4d0-cf5a-4626-9522-7780f5629e37"))
IAgCrdnPointOnSurface : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetReferenceShape,put=PutReferenceShape))
    enum AgECrdnReferenceShapeType ReferenceShape;
    __declspec(property(get=GetSurfaceType,put=PutSurfaceType))
    enum AgECrdnSurfaceType SurfaceType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnReferenceShapeType GetReferenceShape ( );
    void PutReferenceShape (
        enum AgECrdnReferenceShapeType pRetVal );
    enum AgECrdnSurfaceType GetSurfaceType ( );
    void PutSurfaceType (
        enum AgECrdnSurfaceType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceShape (
        /*[out,retval]*/ enum AgECrdnReferenceShapeType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceShape (
        /*[in]*/ enum AgECrdnReferenceShapeType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceType (
        /*[out,retval]*/ enum AgECrdnSurfaceType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceType (
        /*[in]*/ enum AgECrdnSurfaceType pRetVal ) = 0;
};

struct __declspec(uuid("b3de34c8-4858-45c2-89b8-ff5513e51b5b"))
IAgCrdnPointModelAttach : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;
    __declspec(property(get=GetUseScale,put=PutUseScale))
    VARIANT_BOOL UseScale;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );
    VARIANT_BOOL GetUseScale ( );
    void PutUseScale (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScale (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("729f6c48-01f9-446d-9345-21232f52d149"))
IAgCrdnPointPlaneProjection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSourcePoint))
    IAgCrdnPointRefToPtr SourcePoint;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetSourcePoint ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("24355b1f-176c-4144-a3d4-30aabeacd3e7"))
IAgCrdnPointLagrangeLibration : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnLagrangeLibrationPointType PointType;
    __declspec(property(get=GetSecondaryCentralBodies))
    IAgCrdnCentralBodyCollectionPtr SecondaryCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    enum AgECrdnLagrangeLibrationPointType GetPointType ( );
    void PutPointType (
        enum AgECrdnLagrangeLibrationPointType pRetVal );
    IAgCrdnCentralBodyCollectionPtr GetSecondaryCentralBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnLagrangeLibrationPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnLagrangeLibrationPointType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryCentralBodies (
        /*[out,retval]*/ struct IAgCrdnCentralBodyCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("16d2fb42-b4ca-4bbb-9a59-e008e5553af4"))
IAgCrdnSystemAssembled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginPoint))
    IAgCrdnPointRefToPtr OriginPoint;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetOriginPoint ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("13c9a566-6d42-495d-9fba-dde21bea0a8e"))
IAgCrdnLLAPosition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;

    //
    // Wrapper methods for error-handling
    //

    double GetLatitude ( );
    void PutLatitude (
        double pRetVal );
    double GetLongitude ( );
    void PutLongitude (
        double pRetVal );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("0c4c4c74-20b7-4ab7-bb89-991ca601e895"))
IAgCrdnSystemOnSurface : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetAzimuthAngle,put=PutAzimuthAngle))
    double AzimuthAngle;
    __declspec(property(get=GetUseMSL,put=PutUseMSL))
    VARIANT_BOOL UseMSL;
    __declspec(property(get=GetPosition))
    IAgCrdnLLAPositionPtr Position;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    double GetAzimuthAngle ( );
    void PutAzimuthAngle (
        double pRetVal );
    VARIANT_BOOL GetUseMSL ( );
    void PutUseMSL (
        VARIANT_BOOL pRetVal );
    IAgCrdnLLAPositionPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AzimuthAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AzimuthAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMSL (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMSL (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgCrdnLLAPosition * * ppRetVal ) = 0;
};

struct __declspec(uuid("5697331e-ea7d-4ff6-ab23-a0a6e3d292d4"))
IAgCrdnVectorAngleRate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle))
    IAgCrdnAngleRefToPtr Angle;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAngleRefToPtr GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ struct IAgCrdnAngleRefTo * * ppRetVal ) = 0;
};

enum AgECrdnMeanElementTheory
{
    eCrdnMeanElementTheoryOsculating = 1,
    eCrdnMeanElementTheoryKozai = 2,
    eCrdnMeanElementTheoryBrouwerLyddane_Long = 3,
    eCrdnMeanElementTheoryBrouwerLyddane_Short = 4
};

struct __declspec(uuid("abce0fea-94d8-447f-84f1-8092a487fb4b"))
IAgCrdnVectorApoapsis : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("caecc04d-53a2-4615-9efb-4ae60d08efaf"))
IAgCrdnVectorFixedAtEpoch : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetSourceVector))
    IAgCrdnVectorRefToPtr SourceVector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    IAgCrdnVectorRefToPtr GetSourceVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("ab73f35c-4870-4728-86c7-3aa930f53154"))
IAgCrdnVectorAngularVelocity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAxes))
    IAgCrdnAxesRefToPtr Axes;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetAxes ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

enum AgECrdnSweepMode
{
    eCrdnSweepModeBidirectional = 1,
    eCrdnSweepModeUnidirectional = 2
};

struct __declspec(uuid("10bf9147-9165-46fb-b61b-9fa2342bdf5a"))
IAgCrdnVectorConing : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAboutVector))
    IAgCrdnVectorRefToPtr AboutVector;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetStartClockAngle,put=PutStartClockAngle))
    double StartClockAngle;
    __declspec(property(get=GetStopClockAngle,put=PutStopClockAngle))
    double StopClockAngle;
    __declspec(property(get=GetStartEpoch,put=PutStartEpoch))
    _variant_t StartEpoch;
    __declspec(property(get=GetClockAngleRate,put=PutClockAngleRate))
    double ClockAngleRate;
    __declspec(property(get=GetMode,put=PutMode))
    enum AgECrdnSweepMode Mode;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetAboutVector ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    double GetStartClockAngle ( );
    void PutStartClockAngle (
        double pRetVal );
    double GetStopClockAngle ( );
    void PutStopClockAngle (
        double pRetVal );
    _variant_t GetStartEpoch ( );
    void PutStartEpoch (
        const _variant_t & pRetVal );
    double GetClockAngleRate ( );
    void PutClockAngleRate (
        double pRetVal );
    enum AgECrdnSweepMode GetMode ( );
    void PutMode (
        enum AgECrdnSweepMode pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AboutVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartClockAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartClockAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopClockAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopClockAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartEpoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartEpoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClockAngleRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClockAngleRate (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum AgECrdnSweepMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum AgECrdnSweepMode pRetVal ) = 0;
};

struct __declspec(uuid("e53e7bb5-56ae-42bc-a3bd-bd0d6ba11f8e"))
IAgCrdnVectorCross : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFrom))
    IAgCrdnVectorRefToPtr From;
    __declspec(property(get=GetTo))
    IAgCrdnVectorRefToPtr To;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetFrom ( );
    IAgCrdnVectorRefToPtr GetTo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("d6497ca8-ff58-4314-86e9-654a85a54358"))
IAgCrdnVectorCustomScript : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetScriptFile,put=PutScriptFile))
    _bstr_t ScriptFile;
    __declspec(property(get=GetInitializationScriptFile,put=PutInitializationScriptFile))
    _bstr_t InitializationScriptFile;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _bstr_t GetScriptFile ( );
    void PutScriptFile (
        _bstr_t pRetVal );
    _bstr_t GetInitializationScriptFile ( );
    void PutInitializationScriptFile (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScriptFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScriptFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitializationScriptFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitializationScriptFile (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("da4689fd-9985-464b-bccd-46293fa3469d"))
IAgCrdnVectorDerivative : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVector))
    IAgCrdnVectorRefToPtr Vector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

enum AgECrdnSignalSense
{
    eCrdnSignalSenseReceive = 1,
    eCrdnSignalSenseTransmit = 2
};

struct __declspec(uuid("e17c2bb7-80f8-4e28-a323-fc180eb14fbc"))
IAgCrdnVectorDisplacement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrigin))
    IAgCrdnPointRefToPtr Origin;
    __declspec(property(get=GetDestination))
    IAgCrdnPointRefToPtr Destination;
    __declspec(property(get=GetApparent,put=PutApparent))
    VARIANT_BOOL Apparent;
    __declspec(property(get=GetIgnoreAbberation,put=PutIgnoreAbberation))
    VARIANT_BOOL IgnoreAbberation;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointRefToPtr GetOrigin ( );
    IAgCrdnPointRefToPtr GetDestination ( );
    VARIANT_BOOL GetApparent ( );
    void PutApparent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIgnoreAbberation ( );
    void PutIgnoreAbberation (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Destination (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Apparent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Apparent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreAbberation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreAbberation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("04ae25ad-bfa3-422e-ac9f-868a695fbe54"))
IAgCrdnVectorTwoPlanesIntersection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPlaneA))
    IAgCrdnPlaneRefToPtr PlaneA;
    __declspec(property(get=GetPlaneB))
    IAgCrdnPlaneRefToPtr PlaneB;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPlaneRefToPtr GetPlaneA ( );
    IAgCrdnPlaneRefToPtr GetPlaneB ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PlaneA (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneB (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("f7154df3-9cbc-4be9-b137-b9d34b301e00"))
IAgCrdnVectorModelAttach : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("0a703a31-a6c6-452f-b8e7-d04a968698ed"))
IAgCrdnVectorProjection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSource))
    IAgCrdnVectorRefToPtr Source;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetSource ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("81a76c2f-0823-4d23-a853-9272092098db"))
IAgCrdnVectorScaled : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetIsNormalized,put=PutIsNormalized))
    VARIANT_BOOL IsNormalized;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetIsNormalized ( );
    void PutIsNormalized (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsNormalized (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsNormalized (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("dc2dfe86-102f-4fc1-833d-d1413bf478e0"))
IAgCrdnVectorEccentricity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("a5e84e78-14ae-4ad7-a244-97412c694b32"))
IAgCrdnVectorFixedInAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    STKUtil::IAgPositionPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
};

struct __declspec(uuid("aba10532-5b3d-46e5-ad33-70b2d2b9b95f"))
IAgCrdnVectorLineOfNodes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("a8b61467-73b2-43d9-8f9b-40761d09bb82"))
IAgCrdnVectorOrbitAngularMomentum : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("4efcc3df-8b08-46ab-9333-bd1e7427c9dc"))
IAgCrdnVectorOrbitNormal : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("bf097ea5-042f-4f83-812a-734bf5df6ece"))
IAgCrdnVectorPeriapsis : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("618a7cf3-1f1f-4d4e-8bbc-ab25226d35db"))
IAgCrdnVectorReflection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIncomingVector))
    IAgCrdnVectorRefToPtr IncomingVector;
    __declspec(property(get=GetUseOppositeOfSelectedVector,put=PutUseOppositeOfSelectedVector))
    VARIANT_BOOL UseOppositeOfSelectedVector;
    __declspec(property(get=GetNormalVector))
    IAgCrdnVectorRefToPtr NormalVector;
    __declspec(property(get=GetAllowReflectionsOnBackside,put=PutAllowReflectionsOnBackside))
    VARIANT_BOOL AllowReflectionsOnBackside;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorRefToPtr GetIncomingVector ( );
    VARIANT_BOOL GetUseOppositeOfSelectedVector ( );
    void PutUseOppositeOfSelectedVector (
        VARIANT_BOOL pRetVal );
    IAgCrdnVectorRefToPtr GetNormalVector ( );
    VARIANT_BOOL GetAllowReflectionsOnBackside ( );
    void PutAllowReflectionsOnBackside (
        VARIANT_BOOL pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncomingVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseOppositeOfSelectedVector (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseOppositeOfSelectedVector (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AllowReflectionsOnBackside (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AllowReflectionsOnBackside (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("5b74c40c-8e39-4683-a767-0591671a5401"))
IAgCrdnVectorDirectionToStar : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedStar,put=PutSelectedStar))
    _bstr_t SelectedStar;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSelectedStar ( );
    void PutSelectedStar (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SelectedStar (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedStar (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("f41b7d8f-4650-4142-bee7-b85b37ac122e"))
IAgCrdnVectorFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr Create (
        _bstr_t VectorName,
        _bstr_t Description,
        enum AgECrdnVectorType VectorType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnVectorType Type );
    IAgCrdnVectorDisplacementPtr CreateDisplacementVector (
        _bstr_t VectorName,
        struct IAgCrdnPoint * OriginPoint,
        struct IAgCrdnPoint * DestPoint );
    IAgCrdnVectorCrossPtr CreateCrossVector (
        _bstr_t VectorName,
        struct IAgCrdnVector * VectorTo,
        struct IAgCrdnVector * VectorFrom );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnVectorType VectorType,
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnVectorType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDisplacementVector (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ struct IAgCrdnPoint * DestPoint,
        /*[out,retval]*/ struct IAgCrdnVectorDisplacement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCrossVector (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ struct IAgCrdnVector * VectorTo,
        /*[in]*/ struct IAgCrdnVector * VectorFrom,
        /*[out,retval]*/ struct IAgCrdnVectorCross * * ppRetVal ) = 0;
};

struct __declspec(uuid("7b5d9fe0-6d87-491b-9ea7-acde40a70f6c"))
IAgCrdnAxesFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr Create (
        _bstr_t AxesName,
        _bstr_t Description,
        enum AgECrdnAxesType AxesType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnAxesType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR AxesName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnAxesType AxesType,
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnAxesType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("1a60b82f-a07c-4d1b-bcca-2a183b716e40"))
IAgCrdnSystemFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr Create (
        _bstr_t SystemName,
        _bstr_t Description,
        enum AgECrdnSystemType SystemType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnSystemType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR SystemName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnSystemType SystemType,
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnSystemType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("9d3ace08-e642-4aa6-8f5c-fa04d69e2959"))
IAgCrdnPointFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointPtr Create (
        _bstr_t PointName,
        _bstr_t Description,
        enum AgECrdnPointType PointType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnPointType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR PointName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnPointType PointType,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnPointType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("0f1d5512-0a14-4351-82eb-1c1f5bc84093"))
IAgCrdnPlaneFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPlanePtr Create (
        _bstr_t PlaneName,
        _bstr_t Description,
        enum AgECrdnPlaneType PlaneType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnPlaneType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR PlaneName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnPlaneType PlaneType,
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnPlaneType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("3f8e04af-7c30-444f-9948-df5e5101d0ed"))
IAgCrdnAngleFactory : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAnglePtr Create (
        _bstr_t AngleName,
        _bstr_t Description,
        enum AgECrdnAngleType AngleType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnAngleType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR AngleName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnAngleType AngleType,
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnAngleType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("50d19ff1-ca3a-4577-95cc-c3999456f7f0"))
IAgCrdnVectorGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnVectorPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnVectorFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t VectorName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnVectorFactoryPtr GetFactory ( );
    IAgCrdnVectorPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR VectorName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnVectorFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("02c7bc1e-d448-4c54-8582-6a386ed28595"))
IAgCrdnPointGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnPointFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t PointName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnPointFactoryPtr GetFactory ( );
    IAgCrdnPointPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR PointName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnPointFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("a31c4b4f-ed34-494e-9f00-9ac367be8ee2"))
IAgCrdnAngleGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnAnglePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnAngleFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t AngleName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnAngleFactoryPtr GetFactory ( );
    IAgCrdnAnglePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR AngleName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnAngleFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("a237df51-09a6-47c1-b7e5-40d08d5cbc48"))
IAgCrdnAxesGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnAxesPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnAxesFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t AxesName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnAxesFactoryPtr GetFactory ( );
    IAgCrdnAxesPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR AxesName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnAxesFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("44ec47c8-4a01-41e6-bb2a-02ffbb748d76"))
IAgCrdnPlaneGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnPlanePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetFactory))
    IAgCrdnPlaneFactoryPtr Factory;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t PlaneName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnPlaneFactoryPtr GetFactory ( );
    IAgCrdnPlanePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR PlaneName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnPlaneFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("878080f5-115d-40d0-94f6-d5746813885f"))
IAgCrdnSystemGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCrdnSystemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetFactory))
    IAgCrdnSystemFactoryPtr Factory;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Remove (
        _bstr_t SystemName );
    IAgCrdnContextPtr GetContext ( );
    VARIANT_BOOL Contains (
        _bstr_t Name );
    long GetCount ( );
    IAgCrdnSystemFactoryPtr GetFactory ( );
    IAgCrdnSystemPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR SystemName ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Factory (
        /*[out,retval]*/ struct IAgCrdnSystemFactory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("b8bbd54b-90bf-4162-bd12-d6d997a0a197"))
IAgCrdnWellKnownEarthSystems : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnSystemPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnSystemPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnSystemPtr Inertial;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetFixed ( );
    IAgCrdnSystemPtr GetICRF ( );
    IAgCrdnSystemPtr GetInertial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

struct __declspec(uuid("32382d96-8095-44c7-b3e0-a3720b901873"))
IAgCrdnWellKnownSunSystems : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnSystemPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnSystemPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnSystemPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnSystemPtr J2000;
    __declspec(property(get=GetBarycenter))
    IAgCrdnSystemPtr Barycenter;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetFixed ( );
    IAgCrdnSystemPtr GetICRF ( );
    IAgCrdnSystemPtr GetInertial ( );
    IAgCrdnSystemPtr GetJ2000 ( );
    IAgCrdnSystemPtr GetBarycenter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Barycenter (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

struct __declspec(uuid("e236502a-d350-4c38-b3d7-89404505c46d"))
IAgCrdnWellKnownSystems : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEarth))
    IAgCrdnWellKnownEarthSystemsPtr Earth;
    __declspec(property(get=GetSun))
    IAgCrdnWellKnownSunSystemsPtr Sun;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnWellKnownEarthSystemsPtr GetEarth ( );
    IAgCrdnWellKnownSunSystemsPtr GetSun ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgCrdnWellKnownEarthSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgCrdnWellKnownSunSystems * * ppRetVal ) = 0;
};

struct __declspec(uuid("b0d65690-b48f-49fb-945f-33d99dac23e1"))
IAgCrdnWellKnownEarthAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnAxesPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnAxesPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnAxesPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnAxesPtr J2000;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr GetFixed ( );
    IAgCrdnAxesPtr GetICRF ( );
    IAgCrdnAxesPtr GetInertial ( );
    IAgCrdnAxesPtr GetJ2000 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("c5fdf570-7a35-414e-95ad-80738ae1ae8d"))
IAgCrdnWellKnownSunAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnAxesPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnAxesPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnAxesPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnAxesPtr J2000;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr GetFixed ( );
    IAgCrdnAxesPtr GetICRF ( );
    IAgCrdnAxesPtr GetInertial ( );
    IAgCrdnAxesPtr GetJ2000 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("79cbb43b-e988-4f2c-b4e3-63ac5bb05f10"))
IAgCrdnWellKnownAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEarth))
    IAgCrdnWellKnownEarthAxesPtr Earth;
    __declspec(property(get=GetSun))
    IAgCrdnWellKnownSunAxesPtr Sun;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnWellKnownEarthAxesPtr GetEarth ( );
    IAgCrdnWellKnownSunAxesPtr GetSun ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgCrdnWellKnownEarthAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgCrdnWellKnownSunAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("968346cb-52da-4d88-869b-333257a5dc07"))
IAgCrdnProvider : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVectors))
    IAgCrdnVectorGroupPtr Vectors;
    __declspec(property(get=GetPoints))
    IAgCrdnPointGroupPtr Points;
    __declspec(property(get=GetAngles))
    IAgCrdnAngleGroupPtr Angles;
    __declspec(property(get=GetAxes))
    IAgCrdnAxesGroupPtr Axes;
    __declspec(property(get=GetPlanes))
    IAgCrdnPlaneGroupPtr Planes;
    __declspec(property(get=GetSystems))
    IAgCrdnSystemGroupPtr Systems;
    __declspec(property(get=GetWellKnownSystems))
    IAgCrdnWellKnownSystemsPtr WellKnownSystems;
    __declspec(property(get=GetWellKnownAxes))
    IAgCrdnWellKnownAxesPtr WellKnownAxes;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorGroupPtr GetVectors ( );
    IAgCrdnPointGroupPtr GetPoints ( );
    IAgCrdnAngleGroupPtr GetAngles ( );
    IAgCrdnAxesGroupPtr GetAxes ( );
    IAgCrdnPlaneGroupPtr GetPlanes ( );
    IAgCrdnSystemGroupPtr GetSystems ( );
    IAgCrdnWellKnownSystemsPtr GetWellKnownSystems ( );
    IAgCrdnWellKnownAxesPtr GetWellKnownAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Vectors (
        /*[out,retval]*/ struct IAgCrdnVectorGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct IAgCrdnPointGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Angles (
        /*[out,retval]*/ struct IAgCrdnAngleGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxesGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Planes (
        /*[out,retval]*/ struct IAgCrdnPlaneGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Systems (
        /*[out,retval]*/ struct IAgCrdnSystemGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownSystems (
        /*[out,retval]*/ struct IAgCrdnWellKnownSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownAxes (
        /*[out,retval]*/ struct IAgCrdnWellKnownAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("f4d43358-fba5-4a35-bbdf-f7386df58d60"))
IAgCrdnRootSettings : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetForce3DNotify,put=PutForce3DNotify))
    VARIANT_BOOL Force3DNotify;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetForce3DNotify ( );
    void PutForce3DNotify (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Force3DNotify (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Force3DNotify (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("fd25cb2f-4b60-4535-bcaf-c8e08c8b5ba7"))
IAgCrdnRoot : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetWellKnownSystems))
    IAgCrdnWellKnownSystemsPtr WellKnownSystems;
    __declspec(property(get=GetWellKnownAxes))
    IAgCrdnWellKnownAxesPtr WellKnownAxes;
    __declspec(property(get=GetSettings))
    IAgCrdnRootSettingsPtr Settings;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnProviderPtr GetTemplateProvider (
        _bstr_t ClassName );
    IAgCrdnProviderPtr GetProvider (
        _bstr_t InstPath );
    IAgCrdnWellKnownSystemsPtr GetWellKnownSystems ( );
    IAgCrdnWellKnownAxesPtr GetWellKnownAxes ( );
    IAgCrdnRootSettingsPtr GetSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetTemplateProvider (
        /*[in]*/ BSTR ClassName,
        /*[out,retval]*/ struct IAgCrdnProvider * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetProvider (
        /*[in]*/ BSTR InstPath,
        /*[out,retval]*/ struct IAgCrdnProvider * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownSystems (
        /*[out,retval]*/ struct IAgCrdnWellKnownSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownAxes (
        /*[out,retval]*/ struct IAgCrdnWellKnownAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Settings (
        /*[out,retval]*/ struct IAgCrdnRootSettings * * ppRetVal ) = 0;
};

struct __declspec(uuid("b128d432-2c0c-47ad-a4f5-ee71bf855c95"))
IAgCrdnMethodCallResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("868a40e5-a935-474b-95c7-4433c99f4935"))
_IAgCrdn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("afc6a9ae-e0cd-4e6f-99aa-55e8f85c6c30"))
_IAgCrdnTypeInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeDescription))
    _bstr_t TypeDescription;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetShortTypeDescription))
    _bstr_t ShortTypeDescription;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTypeDescription ( );
    _bstr_t GetTypeName ( );
    _bstr_t GetShortTypeDescription ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortTypeDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("d384a2b5-db37-407a-b1f6-7653b4000b73"))
_IAgCrdnTemplate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsTemplate))
    VARIANT_BOOL IsTemplate;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsTemplate ( );
    _bstr_t GetClassName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsTemplate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("7e362fd4-ea91-4bf2-8b63-5b1d1eef4b76"))
_IAgCrdnInstance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsTemplate))
    VARIANT_BOOL IsTemplate;
    __declspec(property(get=GetInstancePath))
    _bstr_t InstancePath;
    __declspec(property(get=GetTemplate))
    IAgCrdnPtr Template;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsTemplate ( );
    _bstr_t GetInstancePath ( );
    IAgCrdnPtr GetTemplate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsTemplate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InstancePath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Template (
        /*[out,retval]*/ struct IAgCrdn * * ppRetVal ) = 0;
};

struct __declspec(uuid("400f4a97-bdd0-41e8-a046-329e2d43ac6c"))
_IAgCrdnPointRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetPoint (
        struct IAgCrdnPoint * Point );
    IAgCrdnPointPtr GetPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ struct IAgCrdnPoint * Point ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
};

struct __declspec(uuid("82536933-5086-476d-aca1-8d1fb6699d8c"))
_IAgCrdnVectorRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetVector (
        struct IAgCrdnVector * Vector );
    IAgCrdnVectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetVector (
        /*[in]*/ struct IAgCrdnVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
};

struct __declspec(uuid("fbe8753e-882e-40ad-946f-2fdd4e17def9"))
_IAgCrdnAxesRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetAxes (
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesPtr GetAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetAxes (
        /*[in]*/ struct IAgCrdnAxes * Axes ) = 0;
      virtual HRESULT __stdcall raw_GetAxes (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("35e2d96c-e018-4db5-a2e8-8696391c4e53"))
_IAgCrdnAngleRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetAngle (
        struct IAgCrdnAngle * Angle );
    IAgCrdnAnglePtr GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetAngle (
        /*[in]*/ struct IAgCrdnAngle * Angle ) = 0;
      virtual HRESULT __stdcall raw_GetAngle (
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
};

struct __declspec(uuid("4c9d8c34-a03c-4ac0-9904-cd5b7fc982d6"))
_IAgCrdnSystemRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetSystem (
        struct IAgCrdnSystem * System );
    IAgCrdnSystemPtr GetSystem ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetSystem (
        /*[in]*/ struct IAgCrdnSystem * System ) = 0;
      virtual HRESULT __stdcall raw_GetSystem (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

struct __declspec(uuid("eaa9ef81-0c1f-4ce2-b8f5-0941baffb29c"))
_IAgCrdnPlaneRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetPlane (
        struct IAgCrdnPlane * Plane );
    IAgCrdnPlanePtr GetPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetPlane (
        /*[in]*/ struct IAgCrdnPlane * Plane ) = 0;
      virtual HRESULT __stdcall raw_GetPlane (
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
};

struct __declspec(uuid("b797a631-c7e5-40fc-b006-f87767ea7d16"))
_IAgCrdnVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("3c59ff6e-d647-46f2-8d1c-a059d4228cb4"))
_IAgCrdnAxesLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelX,put=PutLabelX))
    _bstr_t LabelX;
    __declspec(property(get=GetLabelY,put=PutLabelY))
    _bstr_t LabelY;
    __declspec(property(get=GetLabelZ,put=PutLabelZ))
    _bstr_t LabelZ;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLabelX ( );
    void PutLabelX (
        _bstr_t pRetVal );
    _bstr_t GetLabelY ( );
    void PutLabelY (
        _bstr_t pRetVal );
    _bstr_t GetLabelZ ( );
    void PutLabelZ (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelX (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelX (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelY (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelY (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LabelZ (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LabelZ (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("bcb81d9f-4f0e-4dc8-bfbc-12a769329fc5"))
_IAgCrdnAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
};

struct __declspec(uuid("c25c7945-18af-4070-82e1-d7a9629bbdd9"))
_IAgCrdnPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("d537ce79-83f0-4b25-88c8-5861516b2524"))
_IAgCrdnSystem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnSystemType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnSystemType GetType ( );
    IAgCrdnSystemTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * InputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInInputSystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * InputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInInputSystem );
    IAgCrdnSystemTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInMySystem );
    IAgCrdnSystemFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnSystemType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * InputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * InputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInInputSystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnSystemFindInSystemResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("fdd0db57-f372-4ced-a1c9-6f3e20425e35"))
_IAgCrdnAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
};

struct __declspec(uuid("48310205-2b08-4fe2-8095-11fb10473d30"))
_IAgCrdnPlaneLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetXAxisLabel,put=PutXAxisLabel))
    _bstr_t XAxisLabel;
    __declspec(property(get=GetYAxisLabel,put=PutYAxisLabel))
    _bstr_t YAxisLabel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetXAxisLabel ( );
    void PutXAxisLabel (
        _bstr_t pRetVal );
    _bstr_t GetYAxisLabel ( );
    void PutYAxisLabel (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_XAxisLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_XAxisLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisLabel (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_YAxisLabel (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("664280a6-d8f5-45bf-85b8-e736c88a23bf"))
_IAgCrdnPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
};

struct __declspec(uuid("c0bf8573-a4b0-46e6-9296-6dfa0fb00cd4"))
_IAgCrdnAxesAlignedAndConstrained : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraintDirection))
    STKUtil::IAgDirectionPtr ConstraintDirection;
    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetAlignmentReferenceVector))
    IAgCrdnVectorRefToPtr AlignmentReferenceVector;
    __declspec(property(get=GetConstraintReferenceVector))
    IAgCrdnVectorRefToPtr ConstraintReferenceVector;
    __declspec(property(get=GetAlignmentDirection))
    STKUtil::IAgDirectionPtr AlignmentDirection;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnVectorRefToPtr GetAlignmentReferenceVector ( );
    IAgCrdnVectorRefToPtr GetConstraintReferenceVector ( );
    STKUtil::IAgDirectionPtr GetAlignmentDirection ( );
    STKUtil::IAgDirectionPtr GetConstraintDirection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignmentReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AlignmentDirection (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintDirection (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppRetVal ) = 0;
};

struct __declspec(uuid("e76db712-9bae-4643-8fdc-6e0a1e8c0f77"))
_IAgCrdnAxesAngularOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSpinVector))
    IAgCrdnVectorRefToPtr SpinVector;
    __declspec(property(get=GetRotationAngle))
    IAgCrdnAngleRefToPtr RotationAngle;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFixedOffsetAngle,put=PutFixedOffsetAngle))
    double FixedOffsetAngle;
    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnVectorRefToPtr GetSpinVector ( );
    IAgCrdnAngleRefToPtr GetRotationAngle ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    double GetFixedOffsetAngle ( );
    void PutFixedOffsetAngle (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpinVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ struct IAgCrdnAngleRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOffsetAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FixedOffsetAngle (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("4d7c9b4a-fe49-45fd-b910-3c12953e36ae"))
_IAgCrdnAxesFixedAtEpoch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetSourceAxes))
    IAgCrdnAxesRefToPtr SourceAxes;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnAxesRefToPtr GetSourceAxes ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("985c2153-4918-4490-9bd1-2433bdb651b6"))
_IAgCrdnAxesBPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetTrajectory))
    IAgCrdnPointRefToPtr Trajectory;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetTargetBody))
    IAgCrdnCentralBodyRefToPtr TargetBody;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECrdnDirectionType Direction;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnPointRefToPtr GetTrajectory ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnCentralBodyRefToPtr GetTargetBody ( );
    enum AgECrdnDirectionType GetDirection ( );
    void PutDirection (
        enum AgECrdnDirectionType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECrdnDirectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECrdnDirectionType pRetVal ) = 0;
};

struct __declspec(uuid("ac473caf-ee8e-448e-9c93-8a21663ca9a0"))
_IAgCrdnAxesCustomScript : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("3c8489e6-339f-45d4-b6cf-e3f74cde71a5"))
_IAgCrdnAxesAttitudeFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("29cbd71e-3ba9-48a5-a281-0503002c6e86"))
_IAgCrdnAxesFixed : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetFixedOrientation))
    STKUtil::IAgOrientationPtr FixedOrientation;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    STKUtil::IAgOrientationPtr GetFixedOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOrientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
};

struct __declspec(uuid("bf93cc57-c5d0-4705-a261-05df1c6ea70f"))
_IAgCrdnAxesModelAttach : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("79182bd4-4a11-4d34-a5d2-b16f8b683992"))
_IAgCrdnAxesSpinning : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInitialOffset,put=PutInitialOffset))
    double InitialOffset;
    __declspec(property(get=GetSpinRate,put=PutSpinRate))
    double SpinRate;
    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetSpinVector))
    IAgCrdnVectorRefToPtr SpinVector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnVectorRefToPtr GetSpinVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    double GetInitialOffset ( );
    void PutInitialOffset (
        double pRetVal );
    double GetSpinRate ( );
    void PutSpinRate (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpinVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitialOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitialOffset (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SpinRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SpinRate (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("34040f5f-dc5f-4546-bb6b-e1b2fa0fc8ff"))
_IAgCrdnAxesOnSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetUseMSL,put=PutUseMSL))
    VARIANT_BOOL UseMSL;
    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    VARIANT_BOOL GetUseMSL ( );
    void PutUseMSL (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMSL (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMSL (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("ad4e38d4-950a-4e9f-a932-ff4ff3a71991"))
_IAgCrdnAxesTrajectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetTrajectoryPoint))
    IAgCrdnPointRefToPtr TrajectoryPoint;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetTrajectoryAxesType,put=PutTrajectoryAxesType))
    enum AgECrdnTrajectoryAxesType TrajectoryAxesType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnPointRefToPtr GetTrajectoryPoint ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    enum AgECrdnTrajectoryAxesType GetTrajectoryAxesType ( );
    void PutTrajectoryAxesType (
        enum AgECrdnTrajectoryAxesType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectoryPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectoryAxesType (
        /*[out,retval]*/ enum AgECrdnTrajectoryAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TrajectoryAxesType (
        /*[in]*/ enum AgECrdnTrajectoryAxesType pRetVal ) = 0;
};

struct __declspec(uuid("85924024-0bef-4731-a6bd-a9068aa69a2d"))
_IAgCrdnAxesLagrangeLibration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgECrdnAxesType Type;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetLabels))
    IAgCrdnAxesLabelsPtr Labels;
    __declspec(property(get=GetPrimaryCentralBody))
    IAgCrdnCentralBodyRefToPtr PrimaryCentralBody;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnLagrangeLibrationPointType PointType;
    __declspec(property(get=GetSecondaryCentralBodies))
    IAgCrdnCentralBodyCollectionPtr SecondaryCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAxesType GetType ( );
    IAgCrdnAxesTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes );
    IAgCrdnAxesTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * InputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        struct STKUtil::IAgCartesian3Vector * RateInInputAxes );
    IAgCrdnAxesTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * OutputAxes,
        struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        struct STKUtil::IAgCartesian3Vector * RateInMyAxes );
    IAgCrdnAxesFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesLabelsPtr GetLabels ( );
    IAgCrdnCentralBodyRefToPtr GetPrimaryCentralBody ( );
    enum AgECrdnLagrangeLibrationPointType GetPointType ( );
    void PutPointType (
        enum AgECrdnLagrangeLibrationPointType pRetVal );
    IAgCrdnCentralBodyCollectionPtr GetSecondaryCentralBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAxesType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * InputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInInputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInInputAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * OutputAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VectorInMyAxes,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * RateInMyAxes,
        /*[out,retval]*/ struct IAgCrdnAxesTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAxesFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnAxesLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PrimaryCentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnLagrangeLibrationPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnLagrangeLibrationPointType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryCentralBodies (
        /*[out,retval]*/ struct IAgCrdnCentralBodyCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("29ae10b0-601d-43ce-ad0d-91a87edc6082"))
_IAgCrdnAngleBetweenVectors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetFromVector))
    IAgCrdnVectorRefToPtr FromVector;
    __declspec(property(get=GetToVector))
    IAgCrdnVectorRefToPtr ToVector;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetFromVector ( );
    IAgCrdnVectorRefToPtr GetToVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FromVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("405b8f73-ae33-4a8f-94c6-1ece23313546"))
_IAgCrdnAngleBetweenPlanes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetFromPlane))
    IAgCrdnPlaneRefToPtr FromPlane;
    __declspec(property(get=GetToPlane))
    IAgCrdnPlaneRefToPtr ToPlane;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneRefToPtr GetFromPlane ( );
    IAgCrdnPlaneRefToPtr GetToPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FromPlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToPlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("cc90a00e-5524-4d3f-9e03-bcd2dd2988ac"))
_IAgCrdnAngleDihedral : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetFromVector))
    IAgCrdnVectorRefToPtr FromVector;
    __declspec(property(get=GetToVector))
    IAgCrdnVectorRefToPtr ToVector;
    __declspec(property(get=GetPoleAbout))
    IAgCrdnVectorRefToPtr PoleAbout;
    __declspec(property(get=GetSignedAngle,put=PutSignedAngle))
    VARIANT_BOOL SignedAngle;
    __declspec(property(get=GetCounterClockwiseRotation,put=PutCounterClockwiseRotation))
    VARIANT_BOOL CounterClockwiseRotation;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetFromVector ( );
    IAgCrdnVectorRefToPtr GetToVector ( );
    IAgCrdnVectorRefToPtr GetPoleAbout ( );
    VARIANT_BOOL GetCounterClockwiseRotation ( );
    void PutCounterClockwiseRotation (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSignedAngle ( );
    void PutSignedAngle (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FromVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PoleAbout (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterClockwiseRotation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CounterClockwiseRotation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SignedAngle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignedAngle (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("d2bf68b9-d45a-47e5-8138-704d8d73b35b"))
_IAgCrdnAngleRotation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetFromAxes))
    IAgCrdnAxesRefToPtr FromAxes;
    __declspec(property(get=GetToAxes))
    IAgCrdnAxesRefToPtr ToAxes;
    __declspec(property(get=GetReferenceDirection,put=PutReferenceDirection))
    enum AgECrdnDisplayAxisSelector ReferenceDirection;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesRefToPtr GetFromAxes ( );
    IAgCrdnAxesRefToPtr GetToAxes ( );
    enum AgECrdnDisplayAxisSelector GetReferenceDirection ( );
    void PutReferenceDirection (
        enum AgECrdnDisplayAxisSelector pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FromAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ToAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceDirection (
        /*[out,retval]*/ enum AgECrdnDisplayAxisSelector * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceDirection (
        /*[in]*/ enum AgECrdnDisplayAxisSelector pRetVal ) = 0;
};

struct __declspec(uuid("ebf5f8c8-9558-4d74-bad9-0ab8d9c6ff48"))
_IAgCrdnAngleToPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnAngleType Type;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetSigned,put=PutSigned))
    enum AgECrdnSignedAngleType Signed;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnAngleType GetType ( );
    IAgCrdnAngleFindAngleResultPtr FindAngle (
        const _variant_t & Epoch );
    IAgCrdnAngleFindAngleWithRateResultPtr FindAngleWithRate (
        const _variant_t & Epoch );
    IAgCrdnAngleFindResultPtr FindCoordinates (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleFindWithRateResultPtr FindCoordinatesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    enum AgECrdnSignedAngleType GetSigned ( );
    void PutSigned (
        enum AgECrdnSignedAngleType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngle (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindAngleWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCrdnAngleFindAngleWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinates (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindCoordinatesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnAngleFindWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Signed (
        /*[out,retval]*/ enum AgECrdnSignedAngleType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Signed (
        /*[in]*/ enum AgECrdnSignedAngleType pRetVal ) = 0;
};

struct __declspec(uuid("cb75bf1c-7084-43b2-8056-a64d768aa78c"))
_IAgCrdnPlaneNormal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNormalVector))
    IAgCrdnVectorRefToPtr NormalVector;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );
    IAgCrdnVectorRefToPtr GetNormalVector ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("a3d52bf2-673d-450b-a09f-a6bb5b5aec52"))
_IAgCrdnPlaneQuadrant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetQuadrant,put=PutQuadrant))
    enum AgECrdnQuadrantType Quadrant;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    enum AgECrdnQuadrantType GetQuadrant ( );
    void PutQuadrant (
        enum AgECrdnQuadrantType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Quadrant (
        /*[out,retval]*/ enum AgECrdnQuadrantType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Quadrant (
        /*[in]*/ enum AgECrdnQuadrantType pRetVal ) = 0;
};

struct __declspec(uuid("3e9eed8e-48f1-49dd-b6b2-e2bc365d52fa"))
_IAgCrdnPlaneTrajectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetPoint))
    IAgCrdnPointRefToPtr Point;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetRotationOffset,put=PutRotationOffset))
    double RotationOffset;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );
    IAgCrdnPointRefToPtr GetPoint ( );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );
    double GetRotationOffset ( );
    void PutRotationOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationOffset (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("c5964119-c54c-46fe-b9e5-09b78c807c21"))
_IAgCrdnPlaneTriad : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetPointA))
    IAgCrdnPointRefToPtr PointA;
    __declspec(property(get=GetPointB))
    IAgCrdnPointRefToPtr PointB;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetRotationOffset,put=PutRotationOffset))
    double RotationOffset;
    __declspec(property(get=GetType))
    enum AgECrdnPlaneType Type;
    __declspec(property(get=GetLabels))
    IAgCrdnPlaneLabelsPtr Labels;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPlaneType GetType ( );
    IAgCrdnPlaneFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneFindInSystemWithRateResultPtr FindInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPlaneLabelsPtr GetLabels ( );
    IAgCrdnPointRefToPtr GetPointA ( );
    IAgCrdnPointRefToPtr GetPointB ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    double GetRotationOffset ( );
    void PutRotationOffset (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPlaneFindInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct IAgCrdnPlaneLabels * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointA (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointB (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RotationOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RotationOffset (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("69b8ba81-482d-4f64-b109-eceff392afa4"))
_IAgCrdnPointBPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetTargetBody))
    IAgCrdnCentralBodyRefToPtr TargetBody;
    __declspec(property(get=GetTrajectory))
    IAgCrdnPointRefToPtr Trajectory;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnPointBPlaneType PointType;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECrdnDirectionType Direction;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetTargetBody ( );
    IAgCrdnPointRefToPtr GetTrajectory ( );
    enum AgECrdnPointBPlaneType GetPointType ( );
    void PutPointType (
        enum AgECrdnPointBPlaneType pRetVal );
    enum AgECrdnDirectionType GetDirection ( );
    void PutDirection (
        enum AgECrdnDirectionType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnPointBPlaneType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnPointBPlaneType pRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECrdnDirectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECrdnDirectionType pRetVal ) = 0;
};

struct __declspec(uuid("04bb1ea0-1c2a-4995-86ec-4a6fc6061add"))
_IAgCrdnPointFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("6f87c88c-3bcf-4a9f-ba78-2de853f5e7a0"))
_IAgCrdnPointFixedInSystem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetReference))
    IAgCrdnSystemRefToPtr Reference;
    __declspec(property(get=GetFixedPoint))
    STKUtil::IAgPositionPtr FixedPoint;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnSystemRefToPtr GetReference ( );
    STKUtil::IAgPositionPtr GetFixedPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedPoint (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
};

struct __declspec(uuid("d8d13396-1891-4221-9515-669cd96f3a53"))
_IAgCrdnPointGrazing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("aa9f798b-03f7-46ae-b866-7daa422a261a"))
_IAgCrdnPointGlint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetSourcePoint))
    IAgCrdnPointRefToPtr SourcePoint;
    __declspec(property(get=GetObserverPoint))
    IAgCrdnPointRefToPtr ObserverPoint;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetSourcePoint ( );
    IAgCrdnPointRefToPtr GetObserverPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObserverPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("7ab76a05-4c2c-4162-8b6f-88004b8d3cb8"))
_IAgCrdnPointCovarianceGrazing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetTargetName,put=PutTargetName))
    _bstr_t TargetName;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetProbability,put=PutProbability))
    double Probability;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetUseProbability,put=PutUseProbability))
    VARIANT_BOOL UseProbability;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    _bstr_t GetTargetName ( );
    void PutTargetName (
        _bstr_t pRetVal );
    double GetDistance ( );
    void PutDistance (
        double pRetVal );
    double GetProbability ( );
    void PutProbability (
        double pRetVal );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetUseProbability ( );
    void PutUseProbability (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TargetName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Probability (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Probability (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseProbability (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseProbability (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("68fc4ba7-584c-4e5c-9a1e-18af3d8403ba"))
_IAgCrdnPointPlaneIntersection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetDirectionVector))
    IAgCrdnVectorRefToPtr DirectionVector;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetOriginPoint))
    IAgCrdnPointRefToPtr OriginPoint;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnVectorRefToPtr GetDirectionVector ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );
    IAgCrdnPointRefToPtr GetOriginPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("5383a119-2020-440c-bb1e-7eab225ce980"))
_IAgCrdnPointOnSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetReferenceShape,put=PutReferenceShape))
    enum AgECrdnReferenceShapeType ReferenceShape;
    __declspec(property(get=GetSurfaceType,put=PutSurfaceType))
    enum AgECrdnSurfaceType SurfaceType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnReferenceShapeType GetReferenceShape ( );
    void PutReferenceShape (
        enum AgECrdnReferenceShapeType pRetVal );
    enum AgECrdnSurfaceType GetSurfaceType ( );
    void PutSurfaceType (
        enum AgECrdnSurfaceType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceShape (
        /*[out,retval]*/ enum AgECrdnReferenceShapeType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceShape (
        /*[in]*/ enum AgECrdnReferenceShapeType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceType (
        /*[out,retval]*/ enum AgECrdnSurfaceType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceType (
        /*[in]*/ enum AgECrdnSurfaceType pRetVal ) = 0;
};

struct __declspec(uuid("f513cc71-65c3-4e0d-8a05-e1047845f548"))
_IAgCrdnPointModelAttach : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;
    __declspec(property(get=GetUseScale,put=PutUseScale))
    VARIANT_BOOL UseScale;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );
    VARIANT_BOOL GetUseScale ( );
    void PutUseScale (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScale (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScale (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("e13a9a9f-0063-475f-8cf2-9b53f697c286"))
_IAgCrdnPointPlaneProjection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetSourcePoint))
    IAgCrdnPointRefToPtr SourcePoint;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointRefToPtr GetSourcePoint ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SourcePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("0fb7b445-643d-4ecf-9e41-b1086c497260"))
_IAgCrdnPointLagrangeLibration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnPointType Type;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum AgECrdnLagrangeLibrationPointType PointType;
    __declspec(property(get=GetSecondaryCentralBodies))
    IAgCrdnCentralBodyCollectionPtr SecondaryCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnPointType GetType ( );
    IAgCrdnPointLocateInSystemWithRateResultPtr LocateInSystemWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointLocateInSystemResultPtr LocateInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    enum AgECrdnLagrangeLibrationPointType GetPointType ( );
    void PutPointType (
        enum AgECrdnLagrangeLibrationPointType pRetVal );
    IAgCrdnCentralBodyCollectionPtr GetSecondaryCentralBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystemWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LocateInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnPointLocateInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum AgECrdnLagrangeLibrationPointType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum AgECrdnLagrangeLibrationPointType pRetVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryCentralBodies (
        /*[out,retval]*/ struct IAgCrdnCentralBodyCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("1b329d8c-10cc-4a9c-b3a4-bb61b712baab"))
_IAgCrdnSystemAssembled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnSystemType Type;
    __declspec(property(get=GetOriginPoint))
    IAgCrdnPointRefToPtr OriginPoint;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnSystemType GetType ( );
    IAgCrdnSystemTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * InputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInInputSystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * InputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInInputSystem );
    IAgCrdnSystemTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInMySystem );
    IAgCrdnSystemFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnPointRefToPtr GetOriginPoint ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnSystemType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * InputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * InputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInInputSystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnSystemFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("ba98fb15-191f-4441-9535-292cbfe166c6"))
_IAgCrdnSystemOnSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetAzimuthAngle,put=PutAzimuthAngle))
    double AzimuthAngle;
    __declspec(property(get=GetUseMSL,put=PutUseMSL))
    VARIANT_BOOL UseMSL;
    __declspec(property(get=GetPosition))
    IAgCrdnLLAPositionPtr Position;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnSystemType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnSystemType GetType ( );
    IAgCrdnSystemTransformResultPtr TransformFrom (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * InputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInInputSystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformFromWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * InputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInInputSystem );
    IAgCrdnSystemTransformResultPtr TransformTo (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem );
    IAgCrdnSystemTransformWithRateResultPtr TransformToWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * OutputSystem,
        struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        struct STKUtil::IAgCartesian3Vector * VelocityInMySystem );
    IAgCrdnSystemFindInSystemResultPtr FindInSystem (
        const _variant_t & Epoch,
        struct IAgCrdnSystem * System );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    double GetAzimuthAngle ( );
    void PutAzimuthAngle (
        double pRetVal );
    VARIANT_BOOL GetUseMSL ( );
    void PutUseMSL (
        VARIANT_BOOL pRetVal );
    IAgCrdnLLAPositionPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnSystemType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFrom (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * InputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformFromWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * InputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInInputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInInputSystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformTo (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_TransformToWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * OutputSystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * PositionInMySystem,
        /*[in]*/ struct STKUtil::IAgCartesian3Vector * VelocityInMySystem,
        /*[out,retval]*/ struct IAgCrdnSystemTransformWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInSystem (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnSystem * System,
        /*[out,retval]*/ struct IAgCrdnSystemFindInSystemResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AzimuthAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AzimuthAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseMSL (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseMSL (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgCrdnLLAPosition * * ppRetVal ) = 0;
};

struct __declspec(uuid("bd83f6b8-88ba-4594-80b1-90a005adec03"))
_IAgCrdnLLAPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;

    //
    // Wrapper methods for error-handling
    //

    double GetLatitude ( );
    void PutLatitude (
        double pRetVal );
    double GetLongitude ( );
    void PutLongitude (
        double pRetVal );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("172ac49d-9fc2-41e2-b307-a0b5fd977b3d"))
_IAgCrdnVectorAngleRate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetAngle))
    IAgCrdnAngleRefToPtr Angle;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAngleRefToPtr GetAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ struct IAgCrdnAngleRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("bb7ba510-f52d-4506-af51-f310282305b8"))
_IAgCrdnVectorApoapsis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("f8d728f3-a025-4a92-bd19-77b584bb1be8"))
_IAgCrdnVectorFixedAtEpoch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetSourceVector))
    IAgCrdnVectorRefToPtr SourceVector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pRetVal );
    IAgCrdnVectorRefToPtr GetSourceVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("268586bb-2eee-4f6f-9986-7d4265bfcda5"))
_IAgCrdnVectorAngularVelocity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetAxes))
    IAgCrdnAxesRefToPtr Axes;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesRefToPtr GetAxes ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("c18afd40-9030-4bfa-b401-1a6e5994a039"))
_IAgCrdnVectorConing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMode,put=PutMode))
    enum AgECrdnSweepMode Mode;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetAboutVector))
    IAgCrdnVectorRefToPtr AboutVector;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetStartClockAngle,put=PutStartClockAngle))
    double StartClockAngle;
    __declspec(property(get=GetStopClockAngle,put=PutStopClockAngle))
    double StopClockAngle;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetStartEpoch,put=PutStartEpoch))
    _variant_t StartEpoch;
    __declspec(property(get=GetClockAngleRate,put=PutClockAngleRate))
    double ClockAngleRate;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetAboutVector ( );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    double GetStartClockAngle ( );
    void PutStartClockAngle (
        double pRetVal );
    double GetStopClockAngle ( );
    void PutStopClockAngle (
        double pRetVal );
    _variant_t GetStartEpoch ( );
    void PutStartEpoch (
        const _variant_t & pRetVal );
    double GetClockAngleRate ( );
    void PutClockAngleRate (
        double pRetVal );
    enum AgECrdnSweepMode GetMode ( );
    void PutMode (
        enum AgECrdnSweepMode pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AboutVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartClockAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartClockAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopClockAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StopClockAngle (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartEpoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StartEpoch (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClockAngleRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ClockAngleRate (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum AgECrdnSweepMode * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum AgECrdnSweepMode pRetVal ) = 0;
};

struct __declspec(uuid("4d140b28-74f1-4e6f-8388-db5a2004a19a"))
_IAgCrdnVectorCross : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetFrom))
    IAgCrdnVectorRefToPtr From;
    __declspec(property(get=GetTo))
    IAgCrdnVectorRefToPtr To;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetFrom ( );
    IAgCrdnVectorRefToPtr GetTo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("b8ad3221-e971-47c1-8739-b09ea7ad438f"))
_IAgCrdnVectorCustomScript : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetScriptFile,put=PutScriptFile))
    _bstr_t ScriptFile;
    __declspec(property(get=GetInitializationScriptFile,put=PutInitializationScriptFile))
    _bstr_t InitializationScriptFile;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    _bstr_t GetScriptFile ( );
    void PutScriptFile (
        _bstr_t pRetVal );
    _bstr_t GetInitializationScriptFile ( );
    void PutInitializationScriptFile (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScriptFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScriptFile (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_InitializationScriptFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InitializationScriptFile (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("c73c6b6d-30ee-458f-8faf-b97668359078"))
_IAgCrdnVectorDerivative : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVector))
    IAgCrdnVectorRefToPtr Vector;
    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetVector ( );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("ec6fed24-d2d2-454f-a52e-1c99fd69460b"))
_IAgCrdnVectorDisplacement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetOrigin))
    IAgCrdnPointRefToPtr Origin;
    __declspec(property(get=GetDestination))
    IAgCrdnPointRefToPtr Destination;
    __declspec(property(get=GetApparent,put=PutApparent))
    VARIANT_BOOL Apparent;
    __declspec(property(get=GetIgnoreAbberation,put=PutIgnoreAbberation))
    VARIANT_BOOL IgnoreAbberation;
    __declspec(property(get=GetSignalSense,put=PutSignalSense))
    enum AgECrdnSignalSense SignalSense;
    __declspec(property(get=GetReferenceSystem))
    IAgCrdnSystemRefToPtr ReferenceSystem;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPointRefToPtr GetOrigin ( );
    IAgCrdnPointRefToPtr GetDestination ( );
    VARIANT_BOOL GetApparent ( );
    void PutApparent (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIgnoreAbberation ( );
    void PutIgnoreAbberation (
        VARIANT_BOOL pRetVal );
    enum AgECrdnSignalSense GetSignalSense ( );
    void PutSignalSense (
        enum AgECrdnSignalSense pRetVal );
    IAgCrdnSystemRefToPtr GetReferenceSystem ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Destination (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Apparent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Apparent (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IgnoreAbberation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IgnoreAbberation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SignalSense (
        /*[out,retval]*/ enum AgECrdnSignalSense * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SignalSense (
        /*[in]*/ enum AgECrdnSignalSense pRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceSystem (
        /*[out,retval]*/ struct IAgCrdnSystemRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("1b39f9d7-a817-438d-955b-4ec83dcf7ca7"))
_IAgCrdnVectorTwoPlanesIntersection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetPlaneA))
    IAgCrdnPlaneRefToPtr PlaneA;
    __declspec(property(get=GetPlaneB))
    IAgCrdnPlaneRefToPtr PlaneB;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnPlaneRefToPtr GetPlaneA ( );
    IAgCrdnPlaneRefToPtr GetPlaneB ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneA (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneB (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("25c5391e-f1df-4bd9-9aa0-63501ef28a78"))
_IAgCrdnVectorModelAttach : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetPointableElementName,put=PutPointableElementName))
    _bstr_t PointableElementName;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    _bstr_t GetPointableElementName ( );
    void PutPointableElementName (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointableElementName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointableElementName (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("a38dea12-b96e-45b9-9a65-17bf453bb5fd"))
_IAgCrdnVectorProjection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetSource))
    IAgCrdnVectorRefToPtr Source;
    __declspec(property(get=GetReferencePlane))
    IAgCrdnPlaneRefToPtr ReferencePlane;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetSource ( );
    IAgCrdnPlaneRefToPtr GetReferencePlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePlane (
        /*[out,retval]*/ struct IAgCrdnPlaneRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("19e084ba-76ec-41b4-a0e1-d31f6b3a7ff8"))
_IAgCrdnVectorScaled : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetReferenceVector))
    IAgCrdnVectorRefToPtr ReferenceVector;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetIsNormalized,put=PutIsNormalized))
    VARIANT_BOOL IsNormalized;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetReferenceVector ( );
    double GetScale ( );
    void PutScale (
        double pRetVal );
    VARIANT_BOOL GetIsNormalized ( );
    void PutIsNormalized (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsNormalized (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsNormalized (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("e7908b0e-5794-41cb-b86e-744f86b1c8d4"))
_IAgCrdnVectorEccentricity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("559393af-89f7-44a6-9ce0-1b4f1640d9f0"))
_IAgCrdnVectorFixedInAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes))
    IAgCrdnAxesRefToPtr ReferenceAxes;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnAxesRefToPtr GetReferenceAxes ( );
    STKUtil::IAgPositionPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ struct IAgCrdnAxesRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
};

struct __declspec(uuid("2c7a59f6-6dc9-481c-8d15-5602a4b5c8ff"))
_IAgCrdnVectorLineOfNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
};

struct __declspec(uuid("fea1a5ac-d501-499b-a8fd-9fa1e11854e5"))
_IAgCrdnVectorOrbitAngularMomentum : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("1e94d3c5-1338-4a30-9745-7ede01fbe201"))
_IAgCrdnVectorOrbitNormal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;
    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("69ac369e-9cf4-4908-9e0e-7c7dd6256e80"))
_IAgCrdnVectorPeriapsis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    IAgCrdnCentralBodyRefToPtr CentralBody;
    __declspec(property(get=GetReferencePoint))
    IAgCrdnPointRefToPtr ReferencePoint;
    __declspec(property(get=GetMeanElementType,put=PutMeanElementType))
    enum AgECrdnMeanElementTheory MeanElementType;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnCentralBodyRefToPtr GetCentralBody ( );
    IAgCrdnPointRefToPtr GetReferencePoint ( );
    enum AgECrdnMeanElementTheory GetMeanElementType ( );
    void PutMeanElementType (
        enum AgECrdnMeanElementTheory pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBodyRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ struct IAgCrdnPointRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanElementType (
        /*[out,retval]*/ enum AgECrdnMeanElementTheory * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MeanElementType (
        /*[in]*/ enum AgECrdnMeanElementTheory pRetVal ) = 0;
};

struct __declspec(uuid("d6919e87-2636-4fe1-aafd-22033e2fc308"))
_IAgCrdnVectorReflection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncomingVector))
    IAgCrdnVectorRefToPtr IncomingVector;
    __declspec(property(get=GetUseOppositeOfSelectedVector,put=PutUseOppositeOfSelectedVector))
    VARIANT_BOOL UseOppositeOfSelectedVector;
    __declspec(property(get=GetNormalVector))
    IAgCrdnVectorRefToPtr NormalVector;
    __declspec(property(get=GetAllowReflectionsOnBackside,put=PutAllowReflectionsOnBackside))
    VARIANT_BOOL AllowReflectionsOnBackside;
    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorRefToPtr GetIncomingVector ( );
    VARIANT_BOOL GetUseOppositeOfSelectedVector ( );
    void PutUseOppositeOfSelectedVector (
        VARIANT_BOOL pRetVal );
    IAgCrdnVectorRefToPtr GetNormalVector ( );
    VARIANT_BOOL GetAllowReflectionsOnBackside ( );
    void PutAllowReflectionsOnBackside (
        VARIANT_BOOL pRetVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IncomingVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseOppositeOfSelectedVector (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseOppositeOfSelectedVector (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ struct IAgCrdnVectorRefTo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AllowReflectionsOnBackside (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AllowReflectionsOnBackside (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("dbea9dde-7dd9-4b77-97df-284552f014d5"))
_IAgCrdnVectorDirectionToStar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind))
    enum AgECrdnKind Kind;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIsDuplicable))
    VARIANT_BOOL IsDuplicable;
    __declspec(property(get=GetContext))
    IAgCrdnContextPtr Context;
    __declspec(property(get=GetTypeInfo))
    IAgCrdnTypeInfoPtr TypeInfo;
    __declspec(property(get=GetQualifiedPath))
    _bstr_t QualifiedPath;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetIsReady))
    VARIANT_BOOL IsReady;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetSelectedStar,put=PutSelectedStar))
    _bstr_t SelectedStar;
    __declspec(property(get=GetType))
    enum AgECrdnVectorType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgECrdnKind GetKind ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t pRetVal );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetIsDuplicable ( );
    IAgCrdnContextPtr GetContext ( );
    IAgCrdnTypeInfoPtr GetTypeInfo ( );
    _bstr_t GetQualifiedPath ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetIsReady ( );
    VARIANT_BOOL GetIsReadOnly ( );
    IAgCrdnIntervalCollectionPtr GetAvailability ( );
    enum AgECrdnVectorType GetType ( );
    IAgCrdnVectorFindInAxesResultPtr FindInAxes (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    IAgCrdnVectorFindInAxesWithRateResultPtr FindInAxesWithRate (
        const _variant_t & Epoch,
        struct IAgCrdnAxes * Axes );
    _bstr_t GetSelectedStar ( );
    void PutSelectedStar (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum AgECrdnKind * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDuplicable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct IAgCrdnContext * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeInfo (
        /*[out,retval]*/ struct IAgCrdnTypeInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_QualifiedPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReady (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailability (
        /*[out,retval]*/ struct IAgCrdnIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgECrdnVectorType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxes (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_FindInAxesWithRate (
        /*[in]*/ VARIANT Epoch,
        /*[in]*/ struct IAgCrdnAxes * Axes,
        /*[out,retval]*/ struct IAgCrdnVectorFindInAxesWithRateResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SelectedStar (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedStar (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("39cc3172-1136-4b07-a731-3ef5becd7c4f"))
_IAgCrdnVectorFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorPtr Create (
        _bstr_t VectorName,
        _bstr_t Description,
        enum AgECrdnVectorType VectorType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnVectorType Type );
    IAgCrdnVectorDisplacementPtr CreateDisplacementVector (
        _bstr_t VectorName,
        struct IAgCrdnPoint * OriginPoint,
        struct IAgCrdnPoint * DestPoint );
    IAgCrdnVectorCrossPtr CreateCrossVector (
        _bstr_t VectorName,
        struct IAgCrdnVector * VectorTo,
        struct IAgCrdnVector * VectorFrom );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnVectorType VectorType,
        /*[out,retval]*/ struct IAgCrdnVector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnVectorType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDisplacementVector (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ struct IAgCrdnPoint * OriginPoint,
        /*[in]*/ struct IAgCrdnPoint * DestPoint,
        /*[out,retval]*/ struct IAgCrdnVectorDisplacement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCrossVector (
        /*[in]*/ BSTR VectorName,
        /*[in]*/ struct IAgCrdnVector * VectorTo,
        /*[in]*/ struct IAgCrdnVector * VectorFrom,
        /*[out,retval]*/ struct IAgCrdnVectorCross * * ppRetVal ) = 0;
};

struct __declspec(uuid("c8eb14f2-521a-438d-8a91-f3cd9df355c0"))
_IAgCrdnAxesFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr Create (
        _bstr_t AxesName,
        _bstr_t Description,
        enum AgECrdnAxesType AxesType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnAxesType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR AxesName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnAxesType AxesType,
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnAxesType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("23f9334a-26a8-4770-b4a1-7e455144701f"))
_IAgCrdnSystemFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr Create (
        _bstr_t SystemName,
        _bstr_t Description,
        enum AgECrdnSystemType SystemType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnSystemType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR SystemName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnSystemType SystemType,
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnSystemType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("ca6856bc-b9f7-4578-bb78-04790a41c91d"))
_IAgCrdnPointFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPointPtr Create (
        _bstr_t PointName,
        _bstr_t Description,
        enum AgECrdnPointType PointType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnPointType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR PointName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnPointType PointType,
        /*[out,retval]*/ struct IAgCrdnPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnPointType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("ab77e5e1-769a-41ad-b982-23146e1ec016"))
_IAgCrdnPlaneFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnPlanePtr Create (
        _bstr_t PlaneName,
        _bstr_t Description,
        enum AgECrdnPlaneType PlaneType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnPlaneType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR PlaneName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnPlaneType PlaneType,
        /*[out,retval]*/ struct IAgCrdnPlane * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnPlaneType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("b120b024-20d7-47e4-af8a-272dd15d7d25"))
_IAgCrdnAngleFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAnglePtr Create (
        _bstr_t AngleName,
        _bstr_t Description,
        enum AgECrdnAngleType AngleType );
    VARIANT_BOOL IsTypeSupported (
        enum AgECrdnAngleType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR AngleName,
        /*[in]*/ BSTR Description,
        /*[in]*/ enum AgECrdnAngleType AngleType,
        /*[out,retval]*/ struct IAgCrdnAngle * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgECrdnAngleType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("b5b015d8-5e26-4512-a487-2b0913521c38"))
_IAgCrdnProvider : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxes))
    IAgCrdnAxesGroupPtr Axes;
    __declspec(property(get=GetPlanes))
    IAgCrdnPlaneGroupPtr Planes;
    __declspec(property(get=GetSystems))
    IAgCrdnSystemGroupPtr Systems;
    __declspec(property(get=GetWellKnownSystems))
    IAgCrdnWellKnownSystemsPtr WellKnownSystems;
    __declspec(property(get=GetWellKnownAxes))
    IAgCrdnWellKnownAxesPtr WellKnownAxes;
    __declspec(property(get=GetVectors))
    IAgCrdnVectorGroupPtr Vectors;
    __declspec(property(get=GetPoints))
    IAgCrdnPointGroupPtr Points;
    __declspec(property(get=GetAngles))
    IAgCrdnAngleGroupPtr Angles;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnVectorGroupPtr GetVectors ( );
    IAgCrdnPointGroupPtr GetPoints ( );
    IAgCrdnAngleGroupPtr GetAngles ( );
    IAgCrdnAxesGroupPtr GetAxes ( );
    IAgCrdnPlaneGroupPtr GetPlanes ( );
    IAgCrdnSystemGroupPtr GetSystems ( );
    IAgCrdnWellKnownSystemsPtr GetWellKnownSystems ( );
    IAgCrdnWellKnownAxesPtr GetWellKnownAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Vectors (
        /*[out,retval]*/ struct IAgCrdnVectorGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct IAgCrdnPointGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Angles (
        /*[out,retval]*/ struct IAgCrdnAngleGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ struct IAgCrdnAxesGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Planes (
        /*[out,retval]*/ struct IAgCrdnPlaneGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Systems (
        /*[out,retval]*/ struct IAgCrdnSystemGroup * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownSystems (
        /*[out,retval]*/ struct IAgCrdnWellKnownSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownAxes (
        /*[out,retval]*/ struct IAgCrdnWellKnownAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("c50bd2de-576a-4ba6-a424-b04a5e121253"))
_IAgCrdnRootSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetForce3DNotify,put=PutForce3DNotify))
    VARIANT_BOOL Force3DNotify;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetForce3DNotify ( );
    void PutForce3DNotify (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Force3DNotify (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Force3DNotify (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("fd3b9067-7e9e-4aac-95e3-4047d7dce7be"))
_IAgCrdnRoot : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWellKnownSystems))
    IAgCrdnWellKnownSystemsPtr WellKnownSystems;
    __declspec(property(get=GetWellKnownAxes))
    IAgCrdnWellKnownAxesPtr WellKnownAxes;
    __declspec(property(get=GetSettings))
    IAgCrdnRootSettingsPtr Settings;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnProviderPtr GetTemplateProvider (
        _bstr_t ClassName );
    IAgCrdnProviderPtr GetProvider (
        _bstr_t InstPath );
    IAgCrdnWellKnownSystemsPtr GetWellKnownSystems ( );
    IAgCrdnWellKnownAxesPtr GetWellKnownAxes ( );
    IAgCrdnRootSettingsPtr GetSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetTemplateProvider (
        /*[in]*/ BSTR ClassName,
        /*[out,retval]*/ struct IAgCrdnProvider * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetProvider (
        /*[in]*/ BSTR InstPath,
        /*[out,retval]*/ struct IAgCrdnProvider * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownSystems (
        /*[out,retval]*/ struct IAgCrdnWellKnownSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_WellKnownAxes (
        /*[out,retval]*/ struct IAgCrdnWellKnownAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Settings (
        /*[out,retval]*/ struct IAgCrdnRootSettings * * ppRetVal ) = 0;
};

struct __declspec(uuid("c97ddc6c-d7d1-49bf-940a-333e52565c06"))
_IAgCrdnWellKnownEarthSystems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnSystemPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnSystemPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnSystemPtr Inertial;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetFixed ( );
    IAgCrdnSystemPtr GetICRF ( );
    IAgCrdnSystemPtr GetInertial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

struct __declspec(uuid("33c286c9-d8c9-45ef-94f9-1bb265555583"))
_IAgCrdnWellKnownEarthAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnAxesPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnAxesPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnAxesPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnAxesPtr J2000;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr GetFixed ( );
    IAgCrdnAxesPtr GetICRF ( );
    IAgCrdnAxesPtr GetInertial ( );
    IAgCrdnAxesPtr GetJ2000 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("4098052e-cbe0-4683-81bb-45a39b09b837"))
_IAgCrdnWellKnownSunSystems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnSystemPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnSystemPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnSystemPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnSystemPtr J2000;
    __declspec(property(get=GetBarycenter))
    IAgCrdnSystemPtr Barycenter;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnSystemPtr GetFixed ( );
    IAgCrdnSystemPtr GetICRF ( );
    IAgCrdnSystemPtr GetInertial ( );
    IAgCrdnSystemPtr GetJ2000 ( );
    IAgCrdnSystemPtr GetBarycenter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Barycenter (
        /*[out,retval]*/ struct IAgCrdnSystem * * ppRetVal ) = 0;
};

struct __declspec(uuid("7fdf2759-4c2b-46ad-8a9a-6401b861fb84"))
_IAgCrdnWellKnownSunAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixed))
    IAgCrdnAxesPtr Fixed;
    __declspec(property(get=GetICRF))
    IAgCrdnAxesPtr ICRF;
    __declspec(property(get=GetInertial))
    IAgCrdnAxesPtr Inertial;
    __declspec(property(get=GetJ2000))
    IAgCrdnAxesPtr J2000;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnAxesPtr GetFixed ( );
    IAgCrdnAxesPtr GetICRF ( );
    IAgCrdnAxesPtr GetInertial ( );
    IAgCrdnAxesPtr GetJ2000 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fixed (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ICRF (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_J2000 (
        /*[out,retval]*/ struct IAgCrdnAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("02de9e73-1a6d-4622-918e-ea8898167616"))
_IAgCrdnWellKnownSystems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEarth))
    IAgCrdnWellKnownEarthSystemsPtr Earth;
    __declspec(property(get=GetSun))
    IAgCrdnWellKnownSunSystemsPtr Sun;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnWellKnownEarthSystemsPtr GetEarth ( );
    IAgCrdnWellKnownSunSystemsPtr GetSun ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgCrdnWellKnownEarthSystems * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgCrdnWellKnownSunSystems * * ppRetVal ) = 0;
};

struct __declspec(uuid("54b61ae6-9360-425e-bebe-31276be88f3e"))
_IAgCrdnWellKnownAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEarth))
    IAgCrdnWellKnownEarthAxesPtr Earth;
    __declspec(property(get=GetSun))
    IAgCrdnWellKnownSunAxesPtr Sun;

    //
    // Wrapper methods for error-handling
    //

    IAgCrdnWellKnownEarthAxesPtr GetEarth ( );
    IAgCrdnWellKnownSunAxesPtr GetSun ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgCrdnWellKnownEarthAxes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgCrdnWellKnownSunAxes * * ppRetVal ) = 0;
};

struct __declspec(uuid("167bc726-a8c6-4b54-a4aa-d2505dbef66d"))
_IAgCrdnMethodCallResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle))
    double Angle;
    __declspec(property(get=GetVectorFrom))
    STKUtil::IAgCartesian3VectorPtr VectorFrom;
    __declspec(property(get=GetVectorTo))
    STKUtil::IAgCartesian3VectorPtr VectorTo;
    __declspec(property(get=GetVectorAbout))
    STKUtil::IAgCartesian3VectorPtr VectorAbout;
    __declspec(property(get=GetOriginPosition))
    STKUtil::IAgCartesian3VectorPtr OriginPosition;
    __declspec(property(get=GetOriginVelocity))
    STKUtil::IAgCartesian3VectorPtr OriginVelocity;
    __declspec(property(get=GetXAxis))
    STKUtil::IAgCartesian3VectorPtr XAxis;
    __declspec(property(get=GetXAxisRate))
    STKUtil::IAgCartesian3VectorPtr XAxisRate;
    __declspec(property(get=GetYAxis))
    STKUtil::IAgCartesian3VectorPtr YAxis;
    __declspec(property(get=GetYAxisRate))
    STKUtil::IAgCartesian3VectorPtr YAxisRate;
    __declspec(property(get=GetPosition))
    STKUtil::IAgCartesian3VectorPtr Position;
    __declspec(property(get=GetVelocity))
    STKUtil::IAgCartesian3VectorPtr Velocity;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetVector))
    STKUtil::IAgCartesian3VectorPtr Vector;
    __declspec(property(get=GetRate))
    STKUtil::IAgCartesian3VectorPtr Rate;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAngleRate))
    double AngleRate;

    //
    // Wrapper methods for error-handling
    //

    double GetAngleRate ( );
    double GetAngle ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorFrom ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorTo ( );
    STKUtil::IAgCartesian3VectorPtr GetVectorAbout ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetOriginVelocity ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetXAxisRate ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxis ( );
    STKUtil::IAgCartesian3VectorPtr GetYAxisRate ( );
    STKUtil::IAgCartesian3VectorPtr GetPosition ( );
    STKUtil::IAgCartesian3VectorPtr GetVelocity ( );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    STKUtil::IAgCartesian3VectorPtr GetVector ( );
    STKUtil::IAgCartesian3VectorPtr GetRate ( );
    VARIANT_BOOL GetIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AngleRate (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorFrom (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorTo (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VectorAbout (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPosition (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginVelocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_XAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxis (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_YAxisRate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("7e786846-f2ad-4dec-b6b3-5629e270db65"))
_IAgCrdnInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    _variant_t Start;
    __declspec(property(get=GetStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStart ( );
    _variant_t GetStop ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
};

struct __declspec(uuid("c54a5c6f-af6c-45f9-9c1d-f13bea353c6d"))
_IAgCrdnCentralBody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("9f194c9f-080b-45d2-8b36-74a751d800e4"))
_IAgCrdnCentralBodyRefTo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    HRESULT SetPath (
        _bstr_t Path );
    HRESULT SetCentralBody (
        struct IAgCrdnCentralBody * CentralBody );
    IAgCrdnCentralBodyPtr GetCentralBody ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_SetCentralBody (
        /*[in]*/ struct IAgCrdnCentralBody * CentralBody ) = 0;
      virtual HRESULT __stdcall raw_GetCentralBody (
        /*[out,retval]*/ struct IAgCrdnCentralBody * * ppRetVal ) = 0;
};

struct __declspec(uuid("ee73aeae-7672-4208-81ab-de220b3f878c"))
AgCrdnGeneric;
    // [ default ] interface _IAgCrdn
    // interface IAgCrdn

struct __declspec(uuid("e2db528a-3ac7-47f1-8a4d-cfc330144f8c"))
AgCrdnTypeInfo;
    // [ default ] interface _IAgCrdnTypeInfo
    // interface IAgCrdnTypeInfo

struct __declspec(uuid("ed5d9493-3e4a-45f4-b02f-4ebf6b167288"))
AgCrdnInstance;
    // [ default ] interface _IAgCrdnInstance
    // interface IAgCrdnContext
    // interface IAgCrdnInstance

struct __declspec(uuid("3a1d7c99-0afc-4e02-b728-27c26c0bf559"))
AgCrdnTemplate;
    // [ default ] interface _IAgCrdnTemplate
    // interface IAgCrdnContext
    // interface IAgCrdnTemplate

struct __declspec(uuid("a0d4fe7a-1a82-4ee2-9efc-2e676790963a"))
AgCrdnPointRefTo;
    // [ default ] interface _IAgCrdnPointRefTo
    // interface IAgCrdnPointRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("e4fd5e00-ea4c-433b-86a1-ddd8960afa5b"))
AgCrdnVectorRefTo;
    // [ default ] interface _IAgCrdnVectorRefTo
    // interface IAgCrdnVectorRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("d917064c-c46c-4e43-984e-bf96bcfe1fb4"))
AgCrdnAxesRefTo;
    // [ default ] interface _IAgCrdnAxesRefTo
    // interface IAgCrdnAxesRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("bba9cb01-c85d-46ef-a726-45d06340ba19"))
AgCrdnAngleRefTo;
    // [ default ] interface _IAgCrdnAngleRefTo
    // interface IAgCrdnAngleRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("274bc64f-fcad-49aa-9c3f-029b7bfe3446"))
AgCrdnSystemRefTo;
    // [ default ] interface _IAgCrdnSystemRefTo
    // interface IAgCrdnSystemRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("6c24355a-25dd-4ad7-9925-25098c79c4db"))
AgCrdnPlaneRefTo;
    // [ default ] interface _IAgCrdnPlaneRefTo
    // interface IAgCrdnPlaneRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("0d9c375a-70c5-43e6-bd83-de1a616cfa5b"))
AgCrdnVector;
    // [ default ] interface _IAgCrdnVector
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("50bd0086-7610-428c-98bd-ababb8342f4f"))
AgCrdnAxesLabels;
    // [ default ] interface _IAgCrdnAxesLabels
    // interface IAgCrdnAxesLabels

struct __declspec(uuid("d7b0abea-9a48-4119-9e90-48dcc3d33c76"))
AgCrdnAxes;
    // [ default ] interface _IAgCrdnAxes
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("802e713d-6187-44cb-b008-e847516e3d50"))
AgCrdnPoint;
    // [ default ] interface _IAgCrdnPoint
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("84645f8c-11e4-49b3-91ca-72604cb3ea5d"))
AgCrdnSystem;
    // [ default ] interface _IAgCrdnSystem
    // interface IAgCrdnSystem
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("ccdfc39f-d284-46fe-86db-e8766375b527"))
AgCrdnAngle;
    // [ default ] interface _IAgCrdnAngle
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("e2a73a6a-e0da-45b5-b600-ea81952db925"))
AgCrdnPlaneLabels;
    // [ default ] interface _IAgCrdnPlaneLabels
    // interface IAgCrdnPlaneLabels

struct __declspec(uuid("73a4f479-c91d-4658-8fec-f8fc2530e550"))
AgCrdnPlane;
    // [ default ] interface _IAgCrdnPlane
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("69b16de0-e959-4719-a9d0-5e20d88880a3"))
AgCrdnAxesAlignedAndConstrained;
    // [ default ] interface _IAgCrdnAxesAlignedAndConstrained
    // interface IAgCrdnAxesAlignedAndConstrained
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("87f70f16-8e63-4e4b-8184-dde917ffb2e2"))
AgCrdnAxesAngularOffset;
    // [ default ] interface _IAgCrdnAxesAngularOffset
    // interface IAgCrdnAxesAngularOffset
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("0abbdd66-ac93-4a03-9e49-51b608760373"))
AgCrdnAxesFixedAtEpoch;
    // [ default ] interface _IAgCrdnAxesFixedAtEpoch
    // interface IAgCrdnAxesFixedAtEpoch
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("894c15b2-5b77-42ad-ac8f-03bc2673ea8d"))
AgCrdnAxesBPlane;
    // [ default ] interface _IAgCrdnAxesBPlane
    // interface IAgCrdnAxesBPlane
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("05fcec62-6f58-4cee-baf4-54992d65bfb9"))
AgCrdnAxesCustomScript;
    // [ default ] interface _IAgCrdnAxesCustomScript
    // interface IAgCrdnAxesCustomScript
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("ddfdabdf-62cd-4a08-a9d3-5b58f0a8cf0d"))
AgCrdnAxesAttitudeFile;
    // [ default ] interface _IAgCrdnAxesAttitudeFile
    // interface IAgCrdnAxesAttitudeFile
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("319627f8-0095-416c-965e-35b663864406"))
AgCrdnAxesFixed;
    // [ default ] interface _IAgCrdnAxesFixed
    // interface IAgCrdnAxesFixed
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("94dd82f1-ca25-45b1-a0bd-c2b11bd69510"))
AgCrdnAxesModelAttach;
    // [ default ] interface _IAgCrdnAxesModelAttach
    // interface IAgCrdnAxesModelAttach
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("4a719ebe-3232-4359-afc1-756f9bae826d"))
AgCrdnAxesSpinning;
    // [ default ] interface _IAgCrdnAxesSpinning
    // interface IAgCrdnAxesSpinning
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("d2fa5b4c-5a72-4018-8ac0-6890366d8376"))
AgCrdnAxesOnSurface;
    // [ default ] interface _IAgCrdnAxesOnSurface
    // interface IAgCrdnAxesOnSurface
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("f4f40c6a-7dc4-4762-a3d8-e49c275244f0"))
AgCrdnAxesTrajectory;
    // [ default ] interface _IAgCrdnAxesTrajectory
    // interface IAgCrdnAxesTrajectory
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("32ce60de-659f-4ee6-b8f3-72f1b250858b"))
AgCrdnAxesLagrangeLibration;
    // [ default ] interface _IAgCrdnAxesLagrangeLibration
    // interface IAgCrdnAxesLagrangeLibration
    // interface IAgCrdnAxes
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("bfc1d801-ee92-4d33-b89f-c012ebb3facc"))
AgCrdnAngleBetweenVectors;
    // [ default ] interface _IAgCrdnAngleBetweenVectors
    // interface IAgCrdnAngleBetweenVectors
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("510e6db1-f7cc-472a-b9d2-c9485d81e945"))
AgCrdnAngleBetweenPlanes;
    // [ default ] interface _IAgCrdnAngleBetweenPlanes
    // interface IAgCrdnAngleBetweenPlanes
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("51c0bd30-4c55-40a9-898c-06c88e7b9ca3"))
AgCrdnAngleDihedral;
    // [ default ] interface _IAgCrdnAngleDihedral
    // interface IAgCrdnAngleDihedral
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("2c8df0f2-f54d-4bee-ae47-99c507c30085"))
AgCrdnAngleRotation;
    // [ default ] interface _IAgCrdnAngleRotation
    // interface IAgCrdnAngleRotation
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("5065a468-1093-4df7-9b95-2d45406ba7b7"))
AgCrdnAngleToPlane;
    // [ default ] interface _IAgCrdnAngleToPlane
    // interface IAgCrdnAngleToPlane
    // interface IAgCrdnAngle
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("499e8029-d36b-45ba-89c8-6c9bdb8c1b12"))
AgCrdnPlaneNormal;
    // [ default ] interface _IAgCrdnPlaneNormal
    // interface IAgCrdnPlaneNormal
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("8819c7c7-ab67-41c5-88cd-55b8707e192e"))
AgCrdnPlaneQuadrant;
    // [ default ] interface _IAgCrdnPlaneQuadrant
    // interface IAgCrdnPlaneQuadrant
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("987f47f6-3cf6-4f4b-a0ab-2b838864420b"))
AgCrdnPlaneTrajectory;
    // [ default ] interface _IAgCrdnPlaneTrajectory
    // interface IAgCrdnPlaneTrajectory
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("1a73721c-5bae-4220-b610-07a23de6acd7"))
AgCrdnPlaneTriad;
    // [ default ] interface _IAgCrdnPlaneTriad
    // interface IAgCrdnPlaneTriad
    // interface IAgCrdnPlane
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("332e6375-2c5d-4f96-975f-980b45688c1c"))
AgCrdnPointBPlane;
    // [ default ] interface _IAgCrdnPointBPlane
    // interface IAgCrdnPointBPlane
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("71665954-22e3-4b4d-9501-a6134e78367e"))
AgCrdnPointFile;
    // [ default ] interface _IAgCrdnPointFile
    // interface IAgCrdnPointFile
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("9094c34d-8103-44af-b4cb-e99a0c3cd0fe"))
AgCrdnPointFixedInSystem;
    // [ default ] interface _IAgCrdnPointFixedInSystem
    // interface IAgCrdnPointFixedInSystem
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("afbea103-d8ee-48ba-9241-15b8624193b2"))
AgCrdnPointGrazing;
    // [ default ] interface _IAgCrdnPointGrazing
    // interface IAgCrdnPointGrazing
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("23019561-3b11-4e51-bb3e-64e51a3ab908"))
AgCrdnPointGlint;
    // [ default ] interface _IAgCrdnPointGlint
    // interface IAgCrdnPointGlint
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("7b194590-7e54-4c7b-8c4e-196240ba542f"))
AgCrdnPointCovarianceGrazing;
    // [ default ] interface _IAgCrdnPointCovarianceGrazing
    // interface IAgCrdnPointCovarianceGrazing
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("cdefb8dc-9f0d-420d-a020-332bbd62cede"))
AgCrdnPointPlaneIntersection;
    // [ default ] interface _IAgCrdnPointPlaneIntersection
    // interface IAgCrdnPointPlaneIntersection
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("d6b9d887-6c9f-40cb-8236-eead25be07e4"))
AgCrdnPointOnSurface;
    // [ default ] interface _IAgCrdnPointOnSurface
    // interface IAgCrdnPointOnSurface
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("7e21f43b-0186-48c5-a44a-7df4ea20e631"))
AgCrdnPointModelAttach;
    // [ default ] interface _IAgCrdnPointModelAttach
    // interface IAgCrdnPointModelAttach
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("f9a4d667-0545-4c7d-8f94-dc3aa3c2592c"))
AgCrdnPointPlaneProjection;
    // [ default ] interface _IAgCrdnPointPlaneProjection
    // interface IAgCrdnPointPlaneProjection
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("3ce5735d-db5f-4fbc-8aa2-acf6f13a11eb"))
AgCrdnPointLagrangeLibration;
    // [ default ] interface _IAgCrdnPointLagrangeLibration
    // interface IAgCrdnPointLagrangeLibration
    // interface IAgCrdnPoint
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("035a4e0c-739a-4fbd-bcd4-173e2e2d90b9"))
AgCrdnSystemAssembled;
    // [ default ] interface _IAgCrdnSystemAssembled
    // interface IAgCrdnSystemAssembled
    // interface IAgCrdnSystem
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("a86011f4-5857-4693-ba83-91102f1ce923"))
AgCrdnSystemOnSurface;
    // [ default ] interface _IAgCrdnSystemOnSurface
    // interface IAgCrdnSystemOnSurface
    // interface IAgCrdnSystem
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("6681d33d-dfe8-47b3-988b-0f4ae431147f"))
AgCrdnLLAPosition;
    // [ default ] interface _IAgCrdnLLAPosition
    // interface IAgCrdnLLAPosition

struct __declspec(uuid("a5a6e854-7721-4089-9778-2df9a0b9b35a"))
AgCrdnVectorAngleRate;
    // [ default ] interface _IAgCrdnVectorAngleRate
    // interface IAgCrdnVectorAngleRate
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("3e0fad47-9e3d-431d-b640-cd1960179c84"))
AgCrdnVectorApoapsis;
    // [ default ] interface _IAgCrdnVectorApoapsis
    // interface IAgCrdnVectorApoapsis
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("487162eb-0b77-4073-bad3-11c4a8e08e3d"))
AgCrdnVectorFixedAtEpoch;
    // [ default ] interface _IAgCrdnVectorFixedAtEpoch
    // interface IAgCrdnVectorFixedAtEpoch
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("1f722296-2d47-41b8-9877-68edc89a0533"))
AgCrdnVectorAngularVelocity;
    // [ default ] interface _IAgCrdnVectorAngularVelocity
    // interface IAgCrdnVectorAngularVelocity
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("646057ab-8bb2-46ac-85ed-13e02f25c7ea"))
AgCrdnVectorConing;
    // [ default ] interface _IAgCrdnVectorConing
    // interface IAgCrdnVectorConing
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("d9ca3640-9ebc-4ff4-9a32-9eb2b97d5bf9"))
AgCrdnVectorCross;
    // [ default ] interface _IAgCrdnVectorCross
    // interface IAgCrdnVectorCross
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("4dfe767b-6e27-4908-8ad9-eb84c5d94999"))
AgCrdnVectorCustomScript;
    // [ default ] interface _IAgCrdnVectorCustomScript
    // interface IAgCrdnVectorCustomScript
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("c1510e12-6be1-4718-82cc-45b1d67a9c31"))
AgCrdnVectorDerivative;
    // [ default ] interface _IAgCrdnVectorDerivative
    // interface IAgCrdnVectorDerivative
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("1c992418-2dba-4959-ae78-b26e9892329f"))
AgCrdnVectorDisplacement;
    // [ default ] interface _IAgCrdnVectorDisplacement
    // interface IAgCrdnVectorDisplacement
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("53e155e5-3baa-406e-8e7e-13c6a5db516f"))
AgCrdnVectorTwoPlanesIntersection;
    // [ default ] interface _IAgCrdnVectorTwoPlanesIntersection
    // interface IAgCrdnVectorTwoPlanesIntersection
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("f30ac4e3-cf0b-4e74-b5b9-8e429ee404b2"))
AgCrdnVectorModelAttach;
    // [ default ] interface _IAgCrdnVectorModelAttach
    // interface IAgCrdnVectorModelAttach
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("e23e7bdc-10a0-4cd7-98b2-9eabea2c2b54"))
AgCrdnVectorProjection;
    // [ default ] interface _IAgCrdnVectorProjection
    // interface IAgCrdnVectorProjection
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("83855147-d525-41ed-919b-84edcbb310ce"))
AgCrdnVectorScaled;
    // [ default ] interface _IAgCrdnVectorScaled
    // interface IAgCrdnVectorScaled
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("a1309e20-2fe0-4b53-8d4b-702c8caf13c4"))
AgCrdnVectorEccentricity;
    // [ default ] interface _IAgCrdnVectorEccentricity
    // interface IAgCrdnVectorEccentricity
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("a3de44ca-7199-4a42-9adb-cd62705c284b"))
AgCrdnVectorFixedInAxes;
    // [ default ] interface _IAgCrdnVectorFixedInAxes
    // interface IAgCrdnVectorFixedInAxes
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("d7689656-d3eb-450f-973f-b054c49415fa"))
AgCrdnVectorLineOfNodes;
    // [ default ] interface _IAgCrdnVectorLineOfNodes
    // interface IAgCrdnVectorLineOfNodes
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("2aee82b3-1a78-474e-b8aa-780b297e5652"))
AgCrdnVectorOrbitAngularMomentum;
    // [ default ] interface _IAgCrdnVectorOrbitAngularMomentum
    // interface IAgCrdnVectorOrbitAngularMomentum
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("e7906eea-40d4-4508-a666-d45240f4306d"))
AgCrdnVectorOrbitNormal;
    // [ default ] interface _IAgCrdnVectorOrbitNormal
    // interface IAgCrdnVectorOrbitNormal
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("e5ae0a02-81d1-4613-a29f-ef5f93be9a37"))
AgCrdnVectorPeriapsis;
    // [ default ] interface _IAgCrdnVectorPeriapsis
    // interface IAgCrdnVectorPeriapsis
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("5cad9107-7452-4d33-8658-6ea47206b6f3"))
AgCrdnVectorReflection;
    // [ default ] interface _IAgCrdnVectorReflection
    // interface IAgCrdnVectorReflection
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("e5fb9f79-77e8-4004-95f9-3347cecfb10a"))
AgCrdnVectorDirectionToStar;
    // [ default ] interface _IAgCrdnVectorDirectionToStar
    // interface IAgCrdnVectorDirectionToStar
    // interface IAgCrdnVector
    // interface IAgCrdnTimeProperties
    // interface IAgCrdn

struct __declspec(uuid("f3e4ef71-4870-4fd1-9488-341a3c996a54"))
AgCrdnVectorFactory;
    // [ default ] interface _IAgCrdnVectorFactory
    // interface IAgCrdnVectorFactory

struct __declspec(uuid("e6dc8656-034c-4059-aff7-60374e1df4df"))
AgCrdnAxesFactory;
    // [ default ] interface _IAgCrdnAxesFactory
    // interface IAgCrdnAxesFactory

struct __declspec(uuid("8806f8f4-6382-4669-bdcf-8293f91a31db"))
AgCrdnSystemFactory;
    // [ default ] interface _IAgCrdnSystemFactory
    // interface IAgCrdnSystemFactory

struct __declspec(uuid("41d01a7c-60f6-4144-8020-ac593922a5f1"))
AgCrdnPointFactory;
    // [ default ] interface _IAgCrdnPointFactory
    // interface IAgCrdnPointFactory

struct __declspec(uuid("afe34eca-72e3-4750-97d1-674def5cd679"))
AgCrdnPlaneFactory;
    // [ default ] interface _IAgCrdnPlaneFactory
    // interface IAgCrdnPlaneFactory

struct __declspec(uuid("08efaa65-54e2-4fb9-8e6d-bb6be5d3b635"))
AgCrdnAngleFactory;
    // [ default ] interface _IAgCrdnAngleFactory
    // interface IAgCrdnAngleFactory

struct __declspec(uuid("66b45e3f-bd95-409a-94ed-89679934006d"))
AgCrdnVectorGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnVectorGroup

struct __declspec(uuid("2703b1cf-bfc8-49a4-bc7a-b5c11a9bc693"))
AgCrdnPointGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnPointGroup

struct __declspec(uuid("89355aee-e808-4906-a080-260fe9c778d8"))
AgCrdnAngleGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnAngleGroup

struct __declspec(uuid("4b41356c-be24-446d-b2ff-2c763f0354fa"))
AgCrdnAxesGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnAxesGroup

struct __declspec(uuid("74737137-4f15-4384-99b0-e84aa8953da9"))
AgCrdnPlaneGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnPlaneGroup

struct __declspec(uuid("cceefb9a-d945-4937-b563-eb21e5c524c6"))
AgCrdnSystemGroup;
    // [ default ] interface IUnknown
    // interface IAgCrdnSystemGroup

struct __declspec(uuid("8f2b750f-594b-428a-b307-1c3b63958121"))
AgCrdnProvider;
    // [ default ] interface _IAgCrdnProvider
    // interface IAgCrdnProvider

struct __declspec(uuid("76d9d22a-4c5f-4770-9ca5-8efe53b0be48"))
AgCrdnRootSettings;
    // [ default ] interface _IAgCrdnRootSettings
    // interface IAgCrdnRootSettings

struct __declspec(uuid("47d3da9f-2487-42c4-b113-d590e16ce6f5"))
AgCrdnRoot;
    // [ default ] interface _IAgCrdnRoot
    // interface IAgCrdnRoot

struct __declspec(uuid("98e49d1f-319d-4039-a046-c95a07c07fea"))
AgCrdnWellKnownEarthSystems;
    // [ default ] interface _IAgCrdnWellKnownEarthSystems
    // interface IAgCrdnWellKnownEarthSystems

struct __declspec(uuid("f1eab25b-bccd-47e8-a3fb-a7c7325ff6fd"))
AgCrdnWellKnownEarthAxes;
    // [ default ] interface _IAgCrdnWellKnownEarthAxes
    // interface IAgCrdnWellKnownEarthAxes

struct __declspec(uuid("0ae066fd-24a4-4977-9e00-9a561b55405f"))
AgCrdnWellKnownSunSystems;
    // [ default ] interface _IAgCrdnWellKnownSunSystems
    // interface IAgCrdnWellKnownSunSystems

struct __declspec(uuid("1c8cff8e-ae18-4ed4-8c02-60d742d62f6e"))
AgCrdnWellKnownSunAxes;
    // [ default ] interface _IAgCrdnWellKnownSunAxes
    // interface IAgCrdnWellKnownSunAxes

struct __declspec(uuid("872a6310-3f32-4b79-830e-1889c2eb791b"))
AgCrdnWellKnownSystems;
    // [ default ] interface _IAgCrdnWellKnownSystems
    // interface IAgCrdnWellKnownSystems

struct __declspec(uuid("4847e370-8709-4794-a2af-aa00f68d42ad"))
AgCrdnWellKnownAxes;
    // [ default ] interface _IAgCrdnWellKnownAxes
    // interface IAgCrdnWellKnownAxes

struct __declspec(uuid("05c0eafe-b477-4073-93a6-4adadbf91495"))
AgCrdnMethodCallResult;
    // [ default ] interface _IAgCrdnMethodCallResult
    // interface IAgCrdnMethodCallResult

struct __declspec(uuid("96b535f4-5422-4fa0-962d-f9798cb5d9c6"))
AgCrdnInterval;
    // [ default ] interface _IAgCrdnInterval
    // interface IAgCrdnInterval

struct __declspec(uuid("5111851f-bb20-4f94-b282-243ff2c56776"))
AgCrdnIntervalCollection;
    // [ default ] interface IUnknown
    // interface IAgCrdnIntervalCollection

struct __declspec(uuid("35c129bb-0ecd-49be-8660-268c50542462"))
AgCrdnCentralBody;
    // [ default ] interface _IAgCrdnCentralBody
    // interface IAgCrdnCentralBody

struct __declspec(uuid("d1959e67-d14e-4a9f-aa19-085c94833d81"))
AgCrdnCentralBodyRefTo;
    // [ default ] interface _IAgCrdnCentralBodyRefTo
    // interface IAgCrdnCentralBodyRefTo
    // interface IAgCrdnRefTo

struct __declspec(uuid("6f27e049-dabf-450c-b821-c9dab464a919"))
AgCrdnCentralBodyCollection;
    // [ default ] interface IUnknown
    // interface IAgCrdnCentralBodyCollection

} // namespace AgSTKVgtLib

#pragma pack(pop)
