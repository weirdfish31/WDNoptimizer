// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (dfd63dde).
//
// c:\dev\r_stk_v10.1.x\source\lib\release.net\tlhbuilder\agstkgraphics.tli
//
// Wrapper implementations for Win32 type library AgStkGraphics.tlb
// compiler-generated file created 02/15/14 at 04:45:21 - DO NOT EDIT!

#pragma once

namespace AgSTKGraphicsLib {

//
// interface IAgStkGraphicsPathPoint wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsPathPoint::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPoint::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDatePtr IAgStkGraphicsPathPoint::GetDate ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

OLE_COLOR IAgStkGraphicsPathPoint::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPoint::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsPathPoint::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPoint::PutTranslucency ( double pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsPathPoint::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPoint::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsPathPoint::GetOutlineTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPoint::PutOutlineTranslucency ( double pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsPathPoint::GetIsTranslucent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTranslucent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsPathPoint wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsPathPoint::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPoint::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDatePtr _IAgStkGraphicsPathPoint::GetDate ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

OLE_COLOR _IAgStkGraphicsPathPoint::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPoint::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsPathPoint::GetTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPoint::PutTranslucency ( double pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsPathPoint::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPoint::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsPathPoint::GetOutlineTranslucency ( ) {
    double _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPoint::PutOutlineTranslucency ( double pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPathPoint::GetIsTranslucent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTranslucent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsPathPointFactory wrapper method implementations
//

IAgStkGraphicsPathPointPtr IAgStkGraphicsPathPointFactory::Initialize ( ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr IAgStkGraphicsPathPointFactory::InitializeWithDate ( struct STKUtil::IAgDate * PathPointDate ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_InitializeWithDate(PathPointDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr IAgStkGraphicsPathPointFactory::InitializeWithDateAndPosition ( struct STKUtil::IAgDate * PathPointDate, SAFEARRAY * * Position ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_InitializeWithDateAndPosition(PathPointDate, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr IAgStkGraphicsPathPointFactory::InitializeWithDatePositionAndColor ( struct STKUtil::IAgDate * PathPointDate, SAFEARRAY * * Position, OLE_COLOR Color ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_InitializeWithDatePositionAndColor(PathPointDate, Position, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr IAgStkGraphicsPathPointFactory::InitializeWithDatePositionColorAndTranslucency ( struct STKUtil::IAgDate * PathPointDate, SAFEARRAY * * Position, OLE_COLOR Color, double Translucency ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_InitializeWithDatePositionColorAndTranslucency(PathPointDate, Position, Color, Translucency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

//
// interface _IAgStkGraphicsPathPointFactory wrapper method implementations
//

IAgStkGraphicsPathPointPtr _IAgStkGraphicsPathPointFactory::Initialize ( ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr _IAgStkGraphicsPathPointFactory::InitializeWithDate ( struct STKUtil::IAgDate * PathPointDate ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_InitializeWithDate(PathPointDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr _IAgStkGraphicsPathPointFactory::InitializeWithDateAndPosition ( struct STKUtil::IAgDate * PathPointDate, SAFEARRAY * * Position ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_InitializeWithDateAndPosition(PathPointDate, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr _IAgStkGraphicsPathPointFactory::InitializeWithDatePositionAndColor ( struct STKUtil::IAgDate * PathPointDate, SAFEARRAY * * Position, OLE_COLOR Color ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_InitializeWithDatePositionAndColor(PathPointDate, Position, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr _IAgStkGraphicsPathPointFactory::InitializeWithDatePositionColorAndTranslucency ( struct STKUtil::IAgDate * PathPointDate, SAFEARRAY * * Position, OLE_COLOR Color, double Translucency ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_InitializeWithDatePositionColorAndTranslucency(PathPointDate, Position, Color, Translucency, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

//
// interface IAgStkGraphicsBoundingSphere wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsBoundingSphere::GetCenter ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsBoundingSphere::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsBoundingSphere wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsBoundingSphere::GetCenter ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsBoundingSphere::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsBoundingSphereFactory wrapper method implementations
//

IAgStkGraphicsBoundingSpherePtr IAgStkGraphicsBoundingSphereFactory::Initialize ( SAFEARRAY * * Center, double Radius ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = raw_Initialize(Center, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

IAgStkGraphicsBoundingSpherePtr IAgStkGraphicsBoundingSphereFactory::GetMaximumRadiusBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_MaximumRadiusBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

//
// interface _IAgStkGraphicsBoundingSphereFactory wrapper method implementations
//

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsBoundingSphereFactory::Initialize ( SAFEARRAY * * Center, double Radius ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = raw_Initialize(Center, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsBoundingSphereFactory::GetMaximumRadiusBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_MaximumRadiusBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

//
// interface IAgStkGraphicsTextureFilter2D wrapper method implementations
//

enum AgEStkGraphicsMinificationFilter IAgStkGraphicsTextureFilter2D::GetMinificationFilter ( ) {
    enum AgEStkGraphicsMinificationFilter _result;
    HRESULT _hr = get_MinificationFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMagnificationFilter IAgStkGraphicsTextureFilter2D::GetMagnificationFilter ( ) {
    enum AgEStkGraphicsMagnificationFilter _result;
    HRESULT _hr = get_MagnificationFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsTextureWrap IAgStkGraphicsTextureFilter2D::GetWrapS ( ) {
    enum AgEStkGraphicsTextureWrap _result;
    HRESULT _hr = get_WrapS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsTextureWrap IAgStkGraphicsTextureFilter2D::GetWrapT ( ) {
    enum AgEStkGraphicsTextureWrap _result;
    HRESULT _hr = get_WrapT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2D::GetNearestClampToEdge ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_NearestClampToEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2D::GetNearestRepeat ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_NearestRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2D::GetLinearClampToEdge ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_LinearClampToEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2D::GetLinearRepeat ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_LinearRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

//
// interface _IAgStkGraphicsTextureFilter2D wrapper method implementations
//

enum AgEStkGraphicsMinificationFilter _IAgStkGraphicsTextureFilter2D::GetMinificationFilter ( ) {
    enum AgEStkGraphicsMinificationFilter _result;
    HRESULT _hr = get_MinificationFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMagnificationFilter _IAgStkGraphicsTextureFilter2D::GetMagnificationFilter ( ) {
    enum AgEStkGraphicsMagnificationFilter _result;
    HRESULT _hr = get_MagnificationFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsTextureWrap _IAgStkGraphicsTextureFilter2D::GetWrapS ( ) {
    enum AgEStkGraphicsTextureWrap _result;
    HRESULT _hr = get_WrapS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsTextureWrap _IAgStkGraphicsTextureFilter2D::GetWrapT ( ) {
    enum AgEStkGraphicsTextureWrap _result;
    HRESULT _hr = get_WrapT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2D::GetNearestClampToEdge ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_NearestClampToEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2D::GetNearestRepeat ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_NearestRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2D::GetLinearClampToEdge ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_LinearClampToEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2D::GetLinearRepeat ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_LinearRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

//
// interface IAgStkGraphicsTextureFilter2DFactory wrapper method implementations
//

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2DFactory::GetNearestClampToEdge ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_NearestClampToEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2DFactory::GetNearestRepeat ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_NearestRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2DFactory::GetLinearClampToEdge ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_LinearClampToEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2DFactory::GetLinearRepeat ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_LinearRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2DFactory::Initialize ( enum AgEStkGraphicsMinificationFilter MinificationFilter, enum AgEStkGraphicsMagnificationFilter MagnificationFilter, enum AgEStkGraphicsTextureWrap WrapS, enum AgEStkGraphicsTextureWrap WrapT ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = raw_Initialize(MinificationFilter, MagnificationFilter, WrapS, WrapT, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2DFactory::InitializeWithTextureWrap ( enum AgEStkGraphicsTextureWrap WrapS, enum AgEStkGraphicsTextureWrap WrapT ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = raw_InitializeWithTextureWrap(WrapS, WrapT, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureFilter2DFactory::InitializeWithMinificationAndMagnification ( enum AgEStkGraphicsMinificationFilter MinificationFilter, enum AgEStkGraphicsMagnificationFilter MagnificationFilter ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = raw_InitializeWithMinificationAndMagnification(MinificationFilter, MagnificationFilter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

//
// interface _IAgStkGraphicsTextureFilter2DFactory wrapper method implementations
//

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2DFactory::GetNearestClampToEdge ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_NearestClampToEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2DFactory::GetNearestRepeat ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_NearestRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2DFactory::GetLinearClampToEdge ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_LinearClampToEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2DFactory::GetLinearRepeat ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_LinearRepeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2DFactory::Initialize ( enum AgEStkGraphicsMinificationFilter MinificationFilter, enum AgEStkGraphicsMagnificationFilter MagnificationFilter, enum AgEStkGraphicsTextureWrap WrapS, enum AgEStkGraphicsTextureWrap WrapT ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = raw_Initialize(MinificationFilter, MagnificationFilter, WrapS, WrapT, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2DFactory::InitializeWithTextureWrap ( enum AgEStkGraphicsTextureWrap WrapS, enum AgEStkGraphicsTextureWrap WrapT ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = raw_InitializeWithTextureWrap(WrapS, WrapT, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureFilter2DFactory::InitializeWithMinificationAndMagnification ( enum AgEStkGraphicsMinificationFilter MinificationFilter, enum AgEStkGraphicsMagnificationFilter MagnificationFilter ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = raw_InitializeWithMinificationAndMagnification(MinificationFilter, MagnificationFilter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

//
// interface IAgStkGraphicsRendererTextureTemplate2D wrapper method implementations
//

enum AgEStkGraphicsInternalTextureFormat IAgStkGraphicsRendererTextureTemplate2D::GetInternalFormat ( ) {
    enum AgEStkGraphicsInternalTextureFormat _result;
    HRESULT _hr = get_InternalFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsRendererTextureTemplate2D::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsRendererTextureTemplate2D::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsRendererTexture2D wrapper method implementations
//

IAgStkGraphicsRendererTextureTemplate2DPtr IAgStkGraphicsRendererTexture2D::GetTemplate ( ) {
    struct IAgStkGraphicsRendererTextureTemplate2D * _result = 0;
    HRESULT _hr = get_Template(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTextureTemplate2DPtr(_result, false);
}

//
// interface _IAgStkGraphicsRendererTexture2D wrapper method implementations
//

IAgStkGraphicsRendererTextureTemplate2DPtr _IAgStkGraphicsRendererTexture2D::GetTemplate ( ) {
    struct IAgStkGraphicsRendererTextureTemplate2D * _result = 0;
    HRESULT _hr = get_Template(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTextureTemplate2DPtr(_result, false);
}

//
// interface _IAgStkGraphicsRendererTextureTemplate2D wrapper method implementations
//

enum AgEStkGraphicsInternalTextureFormat _IAgStkGraphicsRendererTextureTemplate2D::GetInternalFormat ( ) {
    enum AgEStkGraphicsInternalTextureFormat _result;
    HRESULT _hr = get_InternalFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRendererTextureTemplate2D::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRendererTextureTemplate2D::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsPathPointCollection wrapper method implementations
//

long IAgStkGraphicsPathPointCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPathPointPtr IAgStkGraphicsPathPointCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IUnknownPtr IAgStkGraphicsPathPointCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgStkGraphicsPathPointCollection wrapper method implementations
//

long _IAgStkGraphicsPathPointCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPathPointPtr _IAgStkGraphicsPathPointCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsPathPointCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsObjectCollection wrapper method implementations
//

long IAgStkGraphicsObjectCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IAgStkGraphicsObjectCollection::GetItem ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IUnknownPtr IAgStkGraphicsObjectCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgStkGraphicsObjectCollection wrapper method implementations
//

long _IAgStkGraphicsObjectCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgStkGraphicsObjectCollection::GetItem ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IUnknownPtr _IAgStkGraphicsObjectCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsRasterAttributes wrapper method implementations
//

enum AgEStkGraphicsRasterFormat IAgStkGraphicsRasterAttributes::GetFormat ( ) {
    enum AgEStkGraphicsRasterFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsRasterType IAgStkGraphicsRasterAttributes::GetType ( ) {
    enum AgEStkGraphicsRasterType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsRasterOrientation IAgStkGraphicsRasterAttributes::GetOrientation ( ) {
    enum AgEStkGraphicsRasterOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsRasterAttributes::GetByteLength ( ) {
    int _result = 0;
    HRESULT _hr = get_ByteLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsRasterAttributes::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsRasterAttributes::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsRasterAttributes::GetPixelAspectRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_PixelAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsRasterAttributes::GetRowAlignment ( ) {
    int _result = 0;
    HRESULT _hr = get_RowAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsRasterAttributes::GetNumberOfBands ( ) {
    int _result = 0;
    HRESULT _hr = get_NumberOfBands(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsRasterAttributes::GetRowStride ( ) {
    int _result = 0;
    HRESULT _hr = get_RowStride(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsRasterAttributes::HasBand ( enum AgEStkGraphicsRasterBand Band ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasBand(Band, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsRaster wrapper method implementations
//

IAgStkGraphicsRasterAttributesPtr IAgStkGraphicsRaster::GetAttributes ( ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

int IAgStkGraphicsRaster::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsRaster::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsRaster::Flip ( enum AgEStkGraphicsFlipAxis Axis ) {
    HRESULT _hr = raw_Flip(Axis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsRaster::Rotate ( double Angle ) {
    HRESULT _hr = raw_Rotate(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr IAgStkGraphicsRaster::Apply ( struct IAgStkGraphicsRasterFilter * Filter ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_Apply(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT IAgStkGraphicsRaster::ApplyInPlace ( struct IAgStkGraphicsRasterFilter * Filter ) {
    HRESULT _hr = raw_ApplyInPlace(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr IAgStkGraphicsRaster::ExtractBand ( enum AgEStkGraphicsRasterBand Band ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBand(Band, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRasterPtr IAgStkGraphicsRaster::ExtractBandFromRasterFormat ( enum AgEStkGraphicsRasterFormat Format ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBandFromRasterFormat(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT IAgStkGraphicsRaster::CopyFromRaster ( struct IAgStkGraphicsRaster * Raster ) {
    HRESULT _hr = raw_CopyFromRaster(Raster);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsCameraSnapshot wrapper method implementations
//

HRESULT IAgStkGraphicsCameraSnapshot::SaveToFile ( _bstr_t Filename, enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat ) {
    HRESULT _hr = raw_SaveToFile(Filename, CameraSnapshotFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCameraSnapshot::SaveToFileWithWidthAndDPI ( _bstr_t Filename, enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat, double WidthInInches, double DotsPerInch ) {
    HRESULT _hr = raw_SaveToFileWithWidthAndDPI(Filename, CameraSnapshotFormat, WidthInInches, DotsPerInch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCameraSnapshot::SaveToClipboard ( ) {
    HRESULT _hr = raw_SaveToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr IAgStkGraphicsCameraSnapshot::SaveToRaster ( ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_SaveToRaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRendererTexture2DPtr IAgStkGraphicsCameraSnapshot::SaveToTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = raw_SaveToTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

//
// interface IAgStkGraphicsCameraVideoRecording wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsCameraVideoRecording::GetIsRecording ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsCameraVideoRecording::StartRecording ( _bstr_t WmvFilename, int VideoBitRate, int VideoFrameRate ) {
    HRESULT _hr = raw_StartRecording(WmvFilename, VideoBitRate, VideoFrameRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCameraVideoRecording::StartRecordingFrameStack ( _bstr_t FileDirectory, _bstr_t FilePrefix, enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFileFormat, int StartingFrameNumber, int NumberOfFrameDigits ) {
    HRESULT _hr = raw_StartRecordingFrameStack(FileDirectory, FilePrefix, CameraSnapshotFileFormat, StartingFrameNumber, NumberOfFrameDigits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCameraVideoRecording::StopRecording ( ) {
    HRESULT _hr = raw_StopRecording();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsCamera wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsCamera::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsCamera::GetReferencePoint ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ReferencePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutReferencePoint ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_ReferencePoint(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsCamera::GetDirection ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutDirection ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Direction(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsCamera::GetUpVector ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_UpVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutUpVector ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_UpVector(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsCamera::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutDistance ( double pRetVal ) {
    HRESULT _hr = put_Distance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

AgSTKVgtLib::IAgCrdnAxesPtr IAgStkGraphicsCamera::GetAxes ( ) {
    struct AgSTKVgtLib::IAgCrdnAxes * _result = 0;
    HRESULT _hr = get_Axes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnAxesPtr(_result, false);
}

void IAgStkGraphicsCamera::PutAxes ( struct AgSTKVgtLib::IAgCrdnAxes * ppRetVal ) {
    HRESULT _hr = put_Axes(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsConstrainedUpAxis IAgStkGraphicsCamera::GetConstrainedUpAxis ( ) {
    enum AgEStkGraphicsConstrainedUpAxis _result;
    HRESULT _hr = get_ConstrainedUpAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutConstrainedUpAxis ( enum AgEStkGraphicsConstrainedUpAxis pRetVal ) {
    HRESULT _hr = put_ConstrainedUpAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsCamera::GetAllowRotationOverConstrainedUpAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowRotationOverConstrainedUpAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutAllowRotationOverConstrainedUpAxis ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AllowRotationOverConstrainedUpAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsCamera::GetLockViewDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockViewDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutLockViewDirection ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_LockViewDirection(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsCamera::GetFieldOfView ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutFieldOfView ( double pRetVal ) {
    HRESULT _hr = put_FieldOfView(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsCamera::GetHorizontalFieldOfView ( ) {
    double _result = 0;
    HRESULT _hr = get_HorizontalFieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsCamera::GetVerticalFieldOfView ( ) {
    double _result = 0;
    HRESULT _hr = get_VerticalFieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsCamera::GetNearPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_NearPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutNearPlane ( double pRetVal ) {
    HRESULT _hr = put_NearPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsCamera::GetFarPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_FarPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutFarPlane ( double pRetVal ) {
    HRESULT _hr = put_FarPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsCamera::GetFarNearPlaneRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_FarNearPlaneRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCamera::PutFarNearPlaneRatio ( double pRetVal ) {
    HRESULT _hr = put_FarNearPlaneRatio(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsCamera::GetDistancePerRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_DistancePerRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsCameraSnapshotPtr IAgStkGraphicsCamera::GetSnapshot ( ) {
    struct IAgStkGraphicsCameraSnapshot * _result = 0;
    HRESULT _hr = get_Snapshot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCameraSnapshotPtr(_result, false);
}

IAgStkGraphicsCameraVideoRecordingPtr IAgStkGraphicsCamera::GetVideoRecording ( ) {
    struct IAgStkGraphicsCameraVideoRecording * _result = 0;
    HRESULT _hr = get_VideoRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCameraVideoRecordingPtr(_result, false);
}

double IAgStkGraphicsCamera::GetPixelSizePerDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_PixelSizePerDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnSystemPtr IAgStkGraphicsCamera::GetPositionReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_PositionReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

AgSTKVgtLib::IAgCrdnSystemPtr IAgStkGraphicsCamera::GetReferencePointReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferencePointReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

enum AgEStkGraphicsVisibility IAgStkGraphicsCamera::VisibilityTest ( struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame, struct IAgStkGraphicsBoundingSphere * Sphere ) {
    enum AgEStkGraphicsVisibility _result;
    HRESULT _hr = raw_VisibilityTest(ReferenceFrame, Sphere, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsCamera::CartographicToWindow ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_CartographicToWindow(CentralBody, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsCamera::TryCartographicToWindow ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_TryCartographicToWindow(CentralBody, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsCamera::WindowToCartographic ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_WindowToCartographic(CentralBody, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsCamera::TryWindowToCartographic ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_TryWindowToCartographic(CentralBody, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsCamera::ViewCentralBody ( _bstr_t CentralBody, struct AgSTKVgtLib::IAgCrdnAxes * Axes ) {
    HRESULT _hr = raw_ViewCentralBody(CentralBody, Axes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::ViewExtent ( _bstr_t CentralBody, SAFEARRAY * * Extent ) {
    HRESULT _hr = raw_ViewExtent(CentralBody, Extent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::ViewRectangularExtent ( _bstr_t CentralBody, double West, double South, double East, double North ) {
    HRESULT _hr = raw_ViewRectangularExtent(CentralBody, West, South, East, North);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::ViewWithUpAxis ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, SAFEARRAY * * UpAxis ) {
    HRESULT _hr = raw_ViewWithUpAxis(Axes, CameraPosition, ReferencePoint, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::View ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint ) {
    HRESULT _hr = raw_View(Axes, CameraPosition, ReferencePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::ViewDirectionWithUpAxis ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition, struct AgSTKVgtLib::IAgCrdnVector * Direction, SAFEARRAY * * UpAxis ) {
    HRESULT _hr = raw_ViewDirectionWithUpAxis(Axes, CameraPosition, Direction, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::ViewDirection ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition, struct AgSTKVgtLib::IAgCrdnVector * Direction ) {
    HRESULT _hr = raw_ViewDirection(Axes, CameraPosition, Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::ViewOffsetWithUpAxis ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, SAFEARRAY * * Offset, SAFEARRAY * * UpAxis ) {
    HRESULT _hr = raw_ViewOffsetWithUpAxis(Axes, ReferencePoint, Offset, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::ViewOffset ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, SAFEARRAY * * Offset ) {
    HRESULT _hr = raw_ViewOffset(Axes, ReferencePoint, Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::ViewOffsetDirectionWithUpAxis ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, struct AgSTKVgtLib::IAgCrdnVector * Direction, SAFEARRAY * * UpAxis ) {
    HRESULT _hr = raw_ViewOffsetDirectionWithUpAxis(Axes, ReferencePoint, Direction, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCamera::ViewOffsetDirection ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, struct AgSTKVgtLib::IAgCrdnVector * Direction ) {
    HRESULT _hr = raw_ViewOffsetDirection(Axes, ReferencePoint, Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsLighting wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsLighting::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsLighting::PutEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Enabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsLighting::GetAmbientIntensity ( ) {
    float _result = 0;
    HRESULT _hr = get_AmbientIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsLighting::PutAmbientIntensity ( float pRetVal ) {
    HRESULT _hr = put_AmbientIntensity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsLighting::GetDiffuseIntensity ( ) {
    float _result = 0;
    HRESULT _hr = get_DiffuseIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsLighting::PutDiffuseIntensity ( float pRetVal ) {
    HRESULT _hr = put_DiffuseIntensity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsLighting::GetNightLightsIntensity ( ) {
    float _result = 0;
    HRESULT _hr = get_NightLightsIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsLighting::PutNightLightsIntensity ( float pRetVal ) {
    HRESULT _hr = put_NightLightsIntensity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsGlobeImageOverlay wrapper method implementations
//

float IAgStkGraphicsGlobeImageOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeImageOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsGlobeImageOverlay::GetUseAltitudeBasedTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAltitudeBasedTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeImageOverlay::PutUseAltitudeBasedTranslucency ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAltitudeBasedTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsGlobeImageOverlay::GetAltitudeBasedTranslucencyLowerTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeImageOverlay::PutAltitudeBasedTranslucencyLowerTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsGlobeImageOverlay::GetAltitudeBasedTranslucencyUpperTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeImageOverlay::PutAltitudeBasedTranslucencyUpperTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsGlobeImageOverlay::GetAltitudeBasedTranslucencyLowerAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeImageOverlay::PutAltitudeBasedTranslucencyLowerAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsGlobeImageOverlay::GetAltitudeBasedTranslucencyUpperAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeImageOverlay::PutAltitudeBasedTranslucencyUpperAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsGlobeImageOverlay::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsTerrainOverlay wrapper method implementations
//

double IAgStkGraphicsTerrainOverlay::GetAltitudeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTerrainOverlay::PutAltitudeOffset ( double pRetVal ) {
    HRESULT _hr = put_AltitudeOffset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsTerrainOverlay::GetAltitudeScale ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTerrainOverlay::PutAltitudeScale ( double pRetVal ) {
    HRESULT _hr = put_AltitudeScale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsTerrainOverlay::GetSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsTerrainCollection wrapper method implementations
//

int IAgStkGraphicsTerrainCollection::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsTerrainCollection::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsTerrainOverlayPtr IAgStkGraphicsTerrainCollection::GetItem ( int Index ) {
    struct IAgStkGraphicsTerrainOverlay * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayPtr(_result, false);
}

IUnknownPtr IAgStkGraphicsTerrainCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsTerrainCollection::Contains ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(TerrainOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsTerrainCollection::ContainsUriString ( _bstr_t StringUri ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsUriString(StringUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsTerrainCollection::Remove ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(TerrainOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsTerrainCollection::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTerrainCollection::Add ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    HRESULT _hr = raw_Add(TerrainOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTerrainCollection::AddAsync ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    HRESULT _hr = raw_AddAsync(TerrainOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int IAgStkGraphicsTerrainCollection::IndexOf ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    int _result = 0;
    HRESULT _hr = raw_IndexOf(TerrainOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsTerrainCollection::IndexOfUriString ( _bstr_t StringUri ) {
    int _result = 0;
    HRESULT _hr = raw_IndexOfUriString(StringUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsTerrainOverlayPtr IAgStkGraphicsTerrainCollection::AddUriString ( _bstr_t Uri ) {
    struct IAgStkGraphicsTerrainOverlay * _result = 0;
    HRESULT _hr = raw_AddUriString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayPtr(_result, false);
}

IAgStkGraphicsTerrainOverlayPtr IAgStkGraphicsTerrainCollection::AddAsyncUriString ( _bstr_t Uri ) {
    struct IAgStkGraphicsTerrainOverlay * _result = 0;
    HRESULT _hr = raw_AddAsyncUriString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayPtr(_result, false);
}

HRESULT IAgStkGraphicsTerrainCollection::Swap ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay1, struct IAgStkGraphicsTerrainOverlay * TerrainOverlay2 ) {
    HRESULT _hr = raw_Swap(TerrainOverlay1, TerrainOverlay2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTerrainCollection::SwapByIndex ( int Index1, int Index2 ) {
    HRESULT _hr = raw_SwapByIndex(Index1, Index2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTerrainCollection::Move ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay, int NewPosition ) {
    HRESULT _hr = raw_Move(TerrainOverlay, NewPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTerrainCollection::MoveByIndex ( int Index, int NewPosition ) {
    HRESULT _hr = raw_MoveByIndex(Index, NewPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTerrainCollection::BringToFront ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    HRESULT _hr = raw_BringToFront(TerrainOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTerrainCollection::SendToBack ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    HRESULT _hr = raw_SendToBack(TerrainOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsImageCollection wrapper method implementations
//

int IAgStkGraphicsImageCollection::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsImageCollection::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsGlobeImageOverlayPtr IAgStkGraphicsImageCollection::GetItem ( int Index ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

IUnknownPtr IAgStkGraphicsImageCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsImageCollection::Contains ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(ImageryOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsImageCollection::ContainsUriString ( _bstr_t StringUri ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsUriString(StringUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsImageCollection::Remove ( struct IAgStkGraphicsGlobeImageOverlay * GlobeOverlay ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(GlobeOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsImageCollection::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsImageCollection::Add ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    HRESULT _hr = raw_Add(ImageryOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsImageCollection::AddAsync ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    HRESULT _hr = raw_AddAsync(ImageryOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int IAgStkGraphicsImageCollection::IndexOf ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    int _result = 0;
    HRESULT _hr = raw_IndexOf(ImageryOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsImageCollection::IndexOfUriString ( _bstr_t StringUri ) {
    int _result = 0;
    HRESULT _hr = raw_IndexOfUriString(StringUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsGlobeImageOverlayPtr IAgStkGraphicsImageCollection::AddUriString ( _bstr_t Uri ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = raw_AddUriString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

IAgStkGraphicsGlobeImageOverlayPtr IAgStkGraphicsImageCollection::AddAsyncUriString ( _bstr_t Uri ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = raw_AddAsyncUriString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

HRESULT IAgStkGraphicsImageCollection::Swap ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay1, struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay2 ) {
    HRESULT _hr = raw_Swap(ImageryOverlay1, ImageryOverlay2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsImageCollection::SwapByIndex ( int Index1, int Index2 ) {
    HRESULT _hr = raw_SwapByIndex(Index1, Index2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsImageCollection::Move ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay, int NewPosition ) {
    HRESULT _hr = raw_Move(ImageryOverlay, NewPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsImageCollection::MoveByIndex ( int Index, int NewPosition ) {
    HRESULT _hr = raw_MoveByIndex(Index, NewPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsImageCollection::BringToFront ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    HRESULT _hr = raw_BringToFront(ImageryOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsImageCollection::SendToBack ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    HRESULT _hr = raw_SendToBack(ImageryOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsKmlDocument wrapper method implementations
//

_bstr_t IAgStkGraphicsKmlDocument::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgStkGraphicsKmlDocumentCollection wrapper method implementations
//

long IAgStkGraphicsKmlDocumentCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsKmlDocumentPtr IAgStkGraphicsKmlDocumentCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

IUnknownPtr IAgStkGraphicsKmlDocumentCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsKmlGraphics wrapper method implementations
//

IAgStkGraphicsKmlDocumentCollectionPtr IAgStkGraphicsKmlGraphics::GetDocuments ( ) {
    struct IAgStkGraphicsKmlDocumentCollection * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentCollectionPtr(_result, false);
}

IAgStkGraphicsKmlDocumentPtr IAgStkGraphicsKmlGraphics::LoadDocument ( _bstr_t KmlUri ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = raw_LoadDocument(KmlUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

IAgStkGraphicsKmlDocumentPtr IAgStkGraphicsKmlGraphics::LoadDocumentString ( _bstr_t KmlUri ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = raw_LoadDocumentString(KmlUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

IAgStkGraphicsKmlDocumentPtr IAgStkGraphicsKmlGraphics::Load ( _bstr_t KmlDocument ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = raw_Load(KmlDocument, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

HRESULT IAgStkGraphicsKmlGraphics::LoadDocumentAsync ( _bstr_t KmlUri ) {
    HRESULT _hr = raw_LoadDocumentAsync(KmlUri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsKmlGraphics::LoadDocumentAsyncString ( _bstr_t KmlUri ) {
    HRESULT _hr = raw_LoadDocumentAsyncString(KmlUri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsKmlGraphics::LoadAsync ( _bstr_t KmlDocument ) {
    HRESULT _hr = raw_LoadAsync(KmlDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsKmlGraphics::Unload ( struct IAgStkGraphicsKmlDocument * KmlDocument ) {
    HRESULT _hr = raw_Unload(KmlDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsKmlGraphics::UnloadAll ( ) {
    HRESULT _hr = raw_UnloadAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsCentralBodyGraphics wrapper method implementations
//

OLE_COLOR IAgStkGraphicsCentralBodyGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCentralBodyGraphics::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsCentralBodyGraphics::GetSpecularColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_SpecularColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCentralBodyGraphics::PutSpecularColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_SpecularColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsCentralBodyGraphics::GetShininess ( ) {
    double _result = 0;
    HRESULT _hr = get_Shininess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCentralBodyGraphics::PutShininess ( double pRetVal ) {
    HRESULT _hr = put_Shininess(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsCentralBodyGraphics::GetShowImagery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowImagery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCentralBodyGraphics::PutShowImagery ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowImagery(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsCentralBodyGraphics::GetShow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCentralBodyGraphics::PutShow ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Show(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsCentralBodyGraphics::GetShowLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCentralBodyGraphics::PutShowLabel ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowLabel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsCentralBodyGraphics::GetAltitudeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCentralBodyGraphics::PutAltitudeOffset ( double pRetVal ) {
    HRESULT _hr = put_AltitudeOffset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGlobeImageOverlayPtr IAgStkGraphicsCentralBodyGraphics::GetBaseOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_BaseOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

void IAgStkGraphicsCentralBodyGraphics::PutBaseOverlay ( struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) {
    HRESULT _hr = put_BaseOverlay(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGlobeImageOverlayPtr IAgStkGraphicsCentralBodyGraphics::GetNightOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_NightOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

void IAgStkGraphicsCentralBodyGraphics::PutNightOverlay ( struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) {
    HRESULT _hr = put_NightOverlay(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGlobeImageOverlayPtr IAgStkGraphicsCentralBodyGraphics::GetSpecularOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_SpecularOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

void IAgStkGraphicsCentralBodyGraphics::PutSpecularOverlay ( struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) {
    HRESULT _hr = put_SpecularOverlay(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTerrainCollectionPtr IAgStkGraphicsCentralBodyGraphics::GetTerrain ( ) {
    struct IAgStkGraphicsTerrainCollection * _result = 0;
    HRESULT _hr = get_Terrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainCollectionPtr(_result, false);
}

IAgStkGraphicsImageCollectionPtr IAgStkGraphicsCentralBodyGraphics::GetImagery ( ) {
    struct IAgStkGraphicsImageCollection * _result = 0;
    HRESULT _hr = get_Imagery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsImageCollectionPtr(_result, false);
}

IAgStkGraphicsKmlGraphicsPtr IAgStkGraphicsCentralBodyGraphics::GetKml ( ) {
    struct IAgStkGraphicsKmlGraphics * _result = 0;
    HRESULT _hr = get_Kml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlGraphicsPtr(_result, false);
}

//
// interface IAgStkGraphicsCentralBodyGraphicsIndexer wrapper method implementations
//

IAgStkGraphicsCentralBodyGraphicsPtr IAgStkGraphicsCentralBodyGraphicsIndexer::GetEarth ( ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = get_Earth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

IAgStkGraphicsCentralBodyGraphicsPtr IAgStkGraphicsCentralBodyGraphicsIndexer::GetMoon ( ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = get_Moon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

IAgStkGraphicsCentralBodyGraphicsPtr IAgStkGraphicsCentralBodyGraphicsIndexer::GetSun ( ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = get_Sun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

IAgStkGraphicsCentralBodyGraphicsPtr IAgStkGraphicsCentralBodyGraphicsIndexer::GetItem ( _bstr_t CentralBody ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = get_Item(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

IAgStkGraphicsCentralBodyGraphicsPtr IAgStkGraphicsCentralBodyGraphicsIndexer::GetByName ( _bstr_t Name ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = raw_GetByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

//
// interface IAgStkGraphicsSceneGlobeOverlaySettings wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsSceneGlobeOverlaySettings::GetAntiAliasImagery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AntiAliasImagery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSceneGlobeOverlaySettings::PutAntiAliasImagery ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AntiAliasImagery(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsSceneGlobeOverlaySettings::GetTerrainMeshPixelError ( ) {
    double _result = 0;
    HRESULT _hr = get_TerrainMeshPixelError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSceneGlobeOverlaySettings::PutTerrainMeshPixelError ( double pRetVal ) {
    HRESULT _hr = put_TerrainMeshPixelError(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsSceneGlobeOverlaySettings::GetImageryPixelError ( ) {
    double _result = 0;
    HRESULT _hr = get_ImageryPixelError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSceneGlobeOverlaySettings::PutImageryPixelError ( double pRetVal ) {
    HRESULT _hr = put_ImageryPixelError(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsSceneGlobeOverlaySettings::GetProjectedRasterModelProjection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectedRasterModelProjection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSceneGlobeOverlaySettings::PutProjectedRasterModelProjection ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ProjectedRasterModelProjection(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsPickResult wrapper method implementations
//

IAgStkGraphicsObjectCollectionPtr IAgStkGraphicsPickResult::GetObjects ( ) {
    struct IAgStkGraphicsObjectCollection * _result = 0;
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsObjectCollectionPtr(_result, false);
}

float IAgStkGraphicsPickResult::GetDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsPickResult::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsPickResultCollection wrapper method implementations
//

long IAgStkGraphicsPickResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPickResultPtr IAgStkGraphicsPickResultCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsPickResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPickResultPtr(_result, false);
}

IUnknownPtr IAgStkGraphicsPickResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsScreenOverlayPickResult wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsScreenOverlayPickResult::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsScreenOverlayPickResult::GetControlPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayPtr IAgStkGraphicsScreenOverlayPickResult::GetOverlay ( ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = get_Overlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

//
// interface IAgStkGraphicsScreenOverlayPickResultCollection wrapper method implementations
//

long IAgStkGraphicsScreenOverlayPickResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayPickResultPtr IAgStkGraphicsScreenOverlayPickResultCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsScreenOverlayPickResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPickResultPtr(_result, false);
}

IUnknownPtr IAgStkGraphicsScreenOverlayPickResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsScene wrapper method implementations
//

IAgStkGraphicsCameraPtr IAgStkGraphicsScene::GetCamera ( ) {
    struct IAgStkGraphicsCamera * _result = 0;
    HRESULT _hr = get_Camera(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCameraPtr(_result, false);
}

IAgStkGraphicsLightingPtr IAgStkGraphicsScene::GetLighting ( ) {
    struct IAgStkGraphicsLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsLightingPtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsScene::GetShowSunshine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSunshine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsScene::PutShowSunshine ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowSunshine(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsCentralBodyGraphicsIndexerPtr IAgStkGraphicsScene::GetCentralBodies ( ) {
    struct IAgStkGraphicsCentralBodyGraphicsIndexer * _result = 0;
    HRESULT _hr = get_CentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsIndexerPtr(_result, false);
}

OLE_COLOR IAgStkGraphicsScene::GetBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsScene::PutBackgroundColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BackgroundColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsScene::GetShadeSkyBasedOnAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShadeSkyBasedOnAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsScene::PutShadeSkyBasedOnAltitude ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShadeSkyBasedOnAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsScene::GetShowStars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowStars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsScene::PutShowStars ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowStars(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsSceneGlobeOverlaySettingsPtr IAgStkGraphicsScene::GetGlobeOverlaySettings ( ) {
    struct IAgStkGraphicsSceneGlobeOverlaySettings * _result = 0;
    HRESULT _hr = get_GlobeOverlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneGlobeOverlaySettingsPtr(_result, false);
}

HRESULT IAgStkGraphicsScene::Render ( ) {
    HRESULT _hr = raw_Render();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsPickResultCollectionPtr IAgStkGraphicsScene::Pick ( int X, int Y ) {
    struct IAgStkGraphicsPickResultCollection * _result = 0;
    HRESULT _hr = raw_Pick(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPickResultCollectionPtr(_result, false);
}

IAgStkGraphicsPickResultCollectionPtr IAgStkGraphicsScene::PickRectangular ( int Left, int Bottom, int Right, int Top ) {
    struct IAgStkGraphicsPickResultCollection * _result = 0;
    HRESULT _hr = raw_PickRectangular(Left, Bottom, Right, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPickResultCollectionPtr(_result, false);
}

IAgStkGraphicsScreenOverlayPickResultCollectionPtr IAgStkGraphicsScene::PickScreenOverlays ( int X, int Y ) {
    struct IAgStkGraphicsScreenOverlayPickResultCollection * _result = 0;
    HRESULT _hr = raw_PickScreenOverlays(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPickResultCollectionPtr(_result, false);
}

int IAgStkGraphicsScene::GetSceneID ( ) {
    int _result = 0;
    HRESULT _hr = get_SceneID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsScene::GetShowWaterSurface ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowWaterSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsScene::PutShowWaterSurface ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowWaterSurface(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsSceneCollection wrapper method implementations
//

long IAgStkGraphicsSceneCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScenePtr IAgStkGraphicsSceneCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsScene * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScenePtr(_result, false);
}

IUnknownPtr IAgStkGraphicsSceneCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgStkGraphicsSceneCollection wrapper method implementations
//

long _IAgStkGraphicsSceneCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScenePtr _IAgStkGraphicsSceneCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsScene * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScenePtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsSceneCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsScreenOverlayContainer wrapper method implementations
//

IAgStkGraphicsScreenOverlayCollectionPtr IAgStkGraphicsScreenOverlayContainer::GetOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayCollection * _result = 0;
    HRESULT _hr = get_Overlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayCollectionPtr(_result, false);
}

SAFEARRAY * IAgStkGraphicsScreenOverlayContainer::GetPadding ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Padding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsScreenOverlayContainer::PutPadding ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Padding(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsScreenOverlayContainer::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsScreenOverlayContainer::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsScreenOverlayPickResultCollection wrapper method implementations
//

long _IAgStkGraphicsScreenOverlayPickResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayPickResultPtr _IAgStkGraphicsScreenOverlayPickResultCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsScreenOverlayPickResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPickResultPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsScreenOverlayPickResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs wrapper method implementations
//

IAgStkGraphicsGlobeImageOverlayPtr IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs::GetOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_Overlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs wrapper method implementations
//

IAgStkGraphicsGlobeImageOverlayPtr _IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs::GetOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_Overlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

//
// interface IAgStkGraphicsTerrainOverlayAddCompleteEventArgs wrapper method implementations
//

IAgStkGraphicsTerrainOverlayPtr IAgStkGraphicsTerrainOverlayAddCompleteEventArgs::GetOverlay ( ) {
    struct IAgStkGraphicsTerrainOverlay * _result = 0;
    HRESULT _hr = get_Overlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsTerrainOverlayAddCompleteEventArgs wrapper method implementations
//

IAgStkGraphicsTerrainOverlayPtr _IAgStkGraphicsTerrainOverlayAddCompleteEventArgs::GetOverlay ( ) {
    struct IAgStkGraphicsTerrainOverlay * _result = 0;
    HRESULT _hr = get_Overlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsPickResultCollection wrapper method implementations
//

long _IAgStkGraphicsPickResultCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPickResultPtr _IAgStkGraphicsPickResultCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsPickResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPickResultPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsPickResultCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsRenderingEventArgs wrapper method implementations
//

STKUtil::IAgDatePtr IAgStkGraphicsRenderingEventArgs::GetTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

double IAgStkGraphicsRenderingEventArgs::GetTimeInEpSecs ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeInEpSecs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsRenderingEventArgs wrapper method implementations
//

STKUtil::IAgDatePtr _IAgStkGraphicsRenderingEventArgs::GetTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

double _IAgStkGraphicsRenderingEventArgs::GetTimeInEpSecs ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeInEpSecs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr IAgStkGraphicsPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void IAgStkGraphicsPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr IAgStkGraphicsPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void IAgStkGraphicsPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr IAgStkGraphicsPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void IAgStkGraphicsPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IAgStkGraphicsPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgStkGraphicsPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsBatchPrimitiveIndex wrapper method implementations
//

long IAgStkGraphicsBatchPrimitiveIndex::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPrimitivePtr IAgStkGraphicsBatchPrimitiveIndex::GetPrimitive ( ) {
    struct IAgStkGraphicsPrimitive * _result = 0;
    HRESULT _hr = get_Primitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPrimitivePtr(_result, false);
}

//
// interface _IAgStkGraphicsBatchPrimitiveIndex wrapper method implementations
//

long _IAgStkGraphicsBatchPrimitiveIndex::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPrimitivePtr _IAgStkGraphicsBatchPrimitiveIndex::GetPrimitive ( ) {
    struct IAgStkGraphicsPrimitive * _result = 0;
    HRESULT _hr = get_Primitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPrimitivePtr(_result, false);
}

//
// interface _IAgStkGraphicsKmlDocumentCollection wrapper method implementations
//

long _IAgStkGraphicsKmlDocumentCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsKmlDocumentPtr _IAgStkGraphicsKmlDocumentCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsKmlDocumentCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsKmlFeature wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsKmlFeature::GetIsLoaded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsKmlFeature::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsKmlFeature::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgStkGraphicsKmlFeature::GetContent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Content(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgStkGraphicsKmlFeature::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgStkGraphicsKmlFeature::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgStkGraphicsKmlFeature::GetSnippet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Snippet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkGraphicsBoundingSpherePtr IAgStkGraphicsKmlFeature::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

HRESULT IAgStkGraphicsKmlFeature::FlyTo ( ) {
    HRESULT _hr = raw_FlyTo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsKmlFeatureCollection wrapper method implementations
//

long IAgStkGraphicsKmlFeatureCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsKmlFeaturePtr IAgStkGraphicsKmlFeatureCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsKmlFeature * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlFeaturePtr(_result, false);
}

IUnknownPtr IAgStkGraphicsKmlFeatureCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgStkGraphicsKmlFeatureCollection wrapper method implementations
//

long _IAgStkGraphicsKmlFeatureCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsKmlFeaturePtr _IAgStkGraphicsKmlFeatureCollection::GetItem ( long Index ) {
    struct IAgStkGraphicsKmlFeature * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlFeaturePtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsKmlFeatureCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsKmlDocumentLoadedEventArgs wrapper method implementations
//

IAgStkGraphicsKmlDocumentPtr IAgStkGraphicsKmlDocumentLoadedEventArgs::GetDocument ( ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

_bstr_t IAgStkGraphicsKmlDocumentLoadedEventArgs::GetException ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Exception(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgStkGraphicsKmlDocumentLoadedEventArgs wrapper method implementations
//

IAgStkGraphicsKmlDocumentPtr _IAgStkGraphicsKmlDocumentLoadedEventArgs::GetDocument ( ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

_bstr_t _IAgStkGraphicsKmlDocumentLoadedEventArgs::GetException ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Exception(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAgStkGraphicsSolidTriangulatorResult wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsSolidTriangulatorResult::GetOutlineIndices ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_OutlineIndices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsSolidTriangulatorResult::GetOutlinePositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_OutlinePositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsPolylineType IAgStkGraphicsSolidTriangulatorResult::GetOutlinePolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_OutlinePolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsSolidTriangulatorResult::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsBoxTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSolidTriangulatorResultPtr IAgStkGraphicsBoxTriangulatorInitializer::Compute ( SAFEARRAY * * Size ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

//
// interface IAgStkGraphicsCylinderTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSolidTriangulatorResultPtr IAgStkGraphicsCylinderTriangulatorInitializer::CreateSimple ( double Length, double Radius ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_CreateSimple(Length, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSolidTriangulatorResultPtr IAgStkGraphicsCylinderTriangulatorInitializer::Compute ( double Length, double BottomRadius, double TopRadius, int Slices, enum AgEStkGraphicsCylinderFill CylinderFill ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(Length, BottomRadius, TopRadius, Slices, CylinderFill, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

//
// interface IAgStkGraphicsEllipsoidTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSolidTriangulatorResultPtr IAgStkGraphicsEllipsoidTriangulatorInitializer::ComputeSimple ( SAFEARRAY * * Radii ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSimple(Radii, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSolidTriangulatorResultPtr IAgStkGraphicsEllipsoidTriangulatorInitializer::Compute ( SAFEARRAY * * Radii, int Slices, int Stacks ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(Radii, Slices, Stacks, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

//
// interface IAgStkGraphicsExtrudedPolylineTriangulatorResult wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetTopBoundaryPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TopBoundaryPositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetBottomBoundaryPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_BottomBoundaryPositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetBoundaryPositionsWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_BoundaryPositionsWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsExtrudedPolylineTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::Compute ( _bstr_t CentralBody, SAFEARRAY * * BottomPositions, SAFEARRAY * * TopPositions ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(CentralBody, BottomPositions, TopPositions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeWithWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * BottomPositions, SAFEARRAY * * TopPositions, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithWindingOrder(CentralBody, BottomPositions, TopPositions, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeCartographic ( _bstr_t CentralBody, SAFEARRAY * * BottomPositions, SAFEARRAY * * TopPositions ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographic(CentralBody, BottomPositions, TopPositions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeCartographicWithWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * BottomPositions, SAFEARRAY * * TopPositions, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographicWithWindingOrder(CentralBody, BottomPositions, TopPositions, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeWithAltitudes ( _bstr_t CentralBody, SAFEARRAY * * Positions, double BottomAltitude, double TopAltitude ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithAltitudes(CentralBody, Positions, BottomAltitude, TopAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeWithAltitudesAndWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, double BottomAltitude, double TopAltitude, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithAltitudesAndWindingOrder(CentralBody, Positions, BottomAltitude, TopAltitude, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeCartographicWithAltitudes ( _bstr_t CentralBody, SAFEARRAY * * Positions, double BottomAltitude, double TopAltitude ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographicWithAltitudes(CentralBody, Positions, BottomAltitude, TopAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeCartographicWithAltitudesAndWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, double BottomAltitude, double TopAltitude, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographicWithAltitudesAndWindingOrder(CentralBody, Positions, BottomAltitude, TopAltitude, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeSingleConstantAltitude ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSingleConstantAltitude(CentralBody, Positions, Altitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeSingleConstantAltitudeWithWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSingleConstantAltitudeWithWindingOrder(CentralBody, Positions, Altitude, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeSingleConstantAltitudeCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSingleConstantAltitudeCartographic(CentralBody, Positions, Altitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeSingleConstantAltitudeCartographicWithWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSingleConstantAltitudeCartographicWithWindingOrder(CentralBody, Positions, Altitude, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

//
// interface IAgStkGraphicsSurfaceTriangulatorResult wrapper method implementations
//

double IAgStkGraphicsSurfaceTriangulatorResult::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsSurfaceTriangulatorResult::GetBoundaryIndices ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_BoundaryIndices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsSurfaceTriangulatorResult::GetBoundaryPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_BoundaryPositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder IAgStkGraphicsSurfaceTriangulatorResult::GetBoundaryPositionsWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_BoundaryPositionsWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsPolylineType IAgStkGraphicsSurfaceTriangulatorResult::GetBoundaryPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_BoundaryPolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsSurfaceExtentTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSurfaceTriangulatorResultPtr IAgStkGraphicsSurfaceExtentTriangulatorInitializer::ComputeSimple ( _bstr_t CentralBody, SAFEARRAY * * Extent ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSimple(CentralBody, Extent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr IAgStkGraphicsSurfaceExtentTriangulatorInitializer::Compute ( _bstr_t CentralBody, SAFEARRAY * * Extent, double Altitude, double Granularity ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(CentralBody, Extent, Altitude, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

//
// interface IAgStkGraphicsSurfacePolygonTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSurfaceTriangulatorResultPtr IAgStkGraphicsSurfacePolygonTriangulatorInitializer::Compute ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(CentralBody, Positions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographic(CentralBody, Positions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeWithHole ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * HolePositions ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithHole(CentralBody, Positions, HolePositions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeWithHoleAltitudeAndGranularity ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * HolePositions, double Altitude, double Granularity ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithHoleAltitudeAndGranularity(CentralBody, Positions, HolePositions, Altitude, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeWithAltitudeAndGranularity ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude, double Granularity, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithAltitudeAndGranularity(CentralBody, Positions, Altitude, Granularity, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeCartographicWithAltitudeAndGranularity ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude, double Granularity, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographicWithAltitudeAndGranularity(CentralBody, Positions, Altitude, Granularity, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

//
// interface IAgStkGraphicsSurfaceShapesResult wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsSurfaceShapesResult::GetPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder IAgStkGraphicsSurfaceShapesResult::GetPositionsWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_PositionsWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsPolylineType IAgStkGraphicsSurfaceShapesResult::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsSurfaceShapesInitializer wrapper method implementations
//

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeCircleWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double Radius, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeCircleWithGranularity(CentralBody, Center, Radius, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeCircle ( _bstr_t CentralBody, SAFEARRAY * * Center, double Radius ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeCircle(CentralBody, Center, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeCircleCartographicWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double Radius, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeCircleCartographicWithGranularity(CentralBody, Center, Radius, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeCircleCartographic ( _bstr_t CentralBody, SAFEARRAY * * Center, double Radius ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeCircleCartographic(CentralBody, Center, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeEllipseWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double MajorAxisRadius, double MinorAxisRadius, double Bearing, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeEllipseWithGranularity(CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeEllipse ( _bstr_t CentralBody, SAFEARRAY * * Center, double MajorAxisRadius, double MinorAxisRadius, double Bearing ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeEllipse(CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeEllipseCartographicWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double MajorAxisRadius, double MinorAxisRadius, double Bearing, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeEllipseCartographicWithGranularity(CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeEllipseCartographic ( _bstr_t CentralBody, SAFEARRAY * * Center, double MajorAxisRadius, double MinorAxisRadius, double Bearing ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeEllipseCartographic(CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeSectorWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double InnerRadius, double OuterRadius, double StartBearing, double EndBearing, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeSectorWithGranularity(CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeSector ( _bstr_t CentralBody, SAFEARRAY * * Center, double InnerRadius, double OuterRadius, double StartBearing, double EndBearing ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeSector(CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeSectorCartographicWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double InnerRadius, double OuterRadius, double StartBearing, double EndBearing, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeSectorCartographicWithGranularity(CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr IAgStkGraphicsSurfaceShapesInitializer::ComputeSectorCartographic ( _bstr_t CentralBody, SAFEARRAY * * Center, double InnerRadius, double OuterRadius, double StartBearing, double EndBearing ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeSectorCartographic(CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

//
// interface IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory wrapper method implementations
//

IAgStkGraphicsAGIProcessedImageGlobeOverlayPtr IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory::InitializeWithString ( _bstr_t Uri ) {
    struct IAgStkGraphicsAGIProcessedImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIProcessedImageGlobeOverlayPtr(_result, false);
}

//
// interface IAgStkGraphicsAGIProcessedTerrainOverlayFactory wrapper method implementations
//

IAgStkGraphicsAGIProcessedTerrainOverlayPtr IAgStkGraphicsAGIProcessedTerrainOverlayFactory::InitializeWithString ( _bstr_t Uri ) {
    struct IAgStkGraphicsAGIProcessedTerrainOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIProcessedTerrainOverlayPtr(_result, false);
}

//
// interface IAgStkGraphicsAGIRoamImageGlobeOverlayFactory wrapper method implementations
//

IAgStkGraphicsAGIRoamImageGlobeOverlayPtr IAgStkGraphicsAGIRoamImageGlobeOverlayFactory::InitializeWithString ( _bstr_t Uri ) {
    struct IAgStkGraphicsAGIRoamImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIRoamImageGlobeOverlayPtr(_result, false);
}

//
// interface IAgStkGraphicsCustomImageGlobeOverlay wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsCustomImageGlobeOverlay::GetIsTranslucent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTranslucent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsCustomImageGlobeOverlay::GetMaximumMetersPerPixel ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumMetersPerPixel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMapProjection IAgStkGraphicsCustomImageGlobeOverlay::GetProjection ( ) {
    enum AgEStkGraphicsMapProjection _result;
    HRESULT _hr = get_Projection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsCustomImageGlobeOverlay::StartUp ( struct IAgStkGraphicsScene * Scene ) {
    HRESULT _hr = raw_StartUp(Scene);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCustomImageGlobeOverlay::ShutDown ( struct IAgStkGraphicsScene * Scene ) {
    HRESULT _hr = raw_ShutDown(Scene);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCustomImageGlobeOverlay::ClearCache ( ) {
    HRESULT _hr = raw_ClearCache();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCustomImageGlobeOverlay::Reload ( ) {
    HRESULT _hr = raw_Reload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsCustomImageGlobeOverlay::Read ( SAFEARRAY * * Extent, const _variant_t & UserTileData, IPictureDisp * Image ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Read(Extent, UserTileData, Image, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsCustomImageGlobeOverlayPluginProxy wrapper method implementations
//

IAgStkGraphicsCustomImageGlobeOverlayPtr IAgStkGraphicsCustomImageGlobeOverlayPluginProxy::GetCustomImageGlobeOverlay ( ) {
    struct IAgStkGraphicsCustomImageGlobeOverlay * _result = 0;
    HRESULT _hr = get_CustomImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCustomImageGlobeOverlayPtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsCustomImageGlobeOverlayPluginProxy::GetIsCustomImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCustomImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgStkGraphicsCustomImageGlobeOverlayPluginProxy::GetRealPluginObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RealPluginObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsCustomImageGlobeOverlayPluginActivator wrapper method implementations
//

IAgStkGraphicsCustomImageGlobeOverlayPluginProxyPtr IAgStkGraphicsCustomImageGlobeOverlayPluginActivator::CreateFromDisplayName ( _bstr_t DisplayName ) {
    struct IAgStkGraphicsCustomImageGlobeOverlayPluginProxy * _result = 0;
    HRESULT _hr = raw_CreateFromDisplayName(DisplayName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCustomImageGlobeOverlayPluginProxyPtr(_result, false);
}

SAFEARRAY * IAgStkGraphicsCustomImageGlobeOverlayPluginActivator::GetAvailableDisplayNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetAvailableDisplayNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory wrapper method implementations
//

IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorPtr IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory::Initialize ( ) {
    struct IAgStkGraphicsCustomImageGlobeOverlayPluginActivator * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorPtr(_result, false);
}

//
// interface IAgStkGraphicsGeospatialImageGlobeOverlay wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsGeospatialImageGlobeOverlay::GetUseTransparentColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGeospatialImageGlobeOverlay::PutUseTransparentColor ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseTransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsGeospatialImageGlobeOverlay::GetTransparentColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGeospatialImageGlobeOverlay::PutTransparentColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_TransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsGeospatialImageGlobeOverlayFactory wrapper method implementations
//

IAgStkGraphicsGeospatialImageGlobeOverlayPtr IAgStkGraphicsGeospatialImageGlobeOverlayFactory::InitializeWithString ( _bstr_t Uri ) {
    struct IAgStkGraphicsGeospatialImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGeospatialImageGlobeOverlayPtr(_result, false);
}

//
// interface IAgStkGraphicsProjection wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsProjection::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjection::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr IAgStkGraphicsProjection::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

void IAgStkGraphicsProjection::PutOrientation ( struct STKUtil::IAgOrientation * ppRetVal ) {
    HRESULT _hr = put_Orientation(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsProjection::GetFieldOfViewHorizontal ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldOfViewHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjection::PutFieldOfViewHorizontal ( double pRetVal ) {
    HRESULT _hr = put_FieldOfViewHorizontal(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsProjection::GetFieldOfViewVertical ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldOfViewVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjection::PutFieldOfViewVertical ( double pRetVal ) {
    HRESULT _hr = put_FieldOfViewVertical(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsProjection::GetNearPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_NearPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjection::PutNearPlane ( double pRetVal ) {
    HRESULT _hr = put_NearPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsProjection::GetFarPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_FarPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjection::PutFarPlane ( double pRetVal ) {
    HRESULT _hr = put_FarPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsProjectedRasterOverlay wrapper method implementations
//

IAgStkGraphicsRasterPtr IAgStkGraphicsProjectedRasterOverlay::GetRaster ( ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = get_Raster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

void IAgStkGraphicsProjectedRasterOverlay::PutRaster ( struct IAgStkGraphicsRaster * ppRetVal ) {
    HRESULT _hr = put_Raster(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsProjectionPtr IAgStkGraphicsProjectedRasterOverlay::GetProjection ( ) {
    struct IAgStkGraphicsProjection * _result = 0;
    HRESULT _hr = get_Projection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionPtr(_result, false);
}

void IAgStkGraphicsProjectedRasterOverlay::PutProjection ( struct IAgStkGraphicsProjection * ppRetVal ) {
    HRESULT _hr = put_Projection(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsProjectedRasterOverlay::GetShowShadows ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowShadows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutShowShadows ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowShadows(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsProjectedRasterOverlay::GetShowFrustum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFrustum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutShowFrustum ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowFrustum(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsProjectedRasterOverlay::GetShowFarPlane ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFarPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutShowFarPlane ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowFarPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsProjectedRasterOverlay::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsProjectedRasterOverlay::GetFrustumColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FrustumColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutFrustumColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_FrustumColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsProjectedRasterOverlay::GetFarPlaneColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FarPlaneColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutFarPlaneColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_FarPlaneColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsProjectedRasterOverlay::GetShadowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ShadowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutShadowColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_ShadowColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsProjectedRasterOverlay::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutBorderColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BorderColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsProjectedRasterOverlay::GetBorderWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BorderWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutBorderWidth ( float pRetVal ) {
    HRESULT _hr = put_BorderWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsProjectedRasterOverlay::GetFrustumTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_FrustumTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutFrustumTranslucency ( float pRetVal ) {
    HRESULT _hr = put_FrustumTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsProjectedRasterOverlay::GetFarPlaneTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_FarPlaneTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutFarPlaneTranslucency ( float pRetVal ) {
    HRESULT _hr = put_FarPlaneTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsProjectedRasterOverlay::GetShadowTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_ShadowTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutShadowTranslucency ( float pRetVal ) {
    HRESULT _hr = put_ShadowTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsProjectedRasterOverlay::GetBorderTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_BorderTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutBorderTranslucency ( float pRetVal ) {
    HRESULT _hr = put_BorderTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsProjectedRasterOverlay::GetUseTransparentColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutUseTransparentColor ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseTransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsProjectedRasterOverlay::GetTransparentColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectedRasterOverlay::PutTransparentColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_TransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsProjectedRasterOverlay::GetDirections ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Directions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsProjectedRasterOverlay::GetSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsProjectedRasterOverlayFactory wrapper method implementations
//

IAgStkGraphicsProjectedRasterOverlayPtr IAgStkGraphicsProjectedRasterOverlayFactory::Initialize ( struct IAgStkGraphicsRaster * Raster, struct IAgStkGraphicsProjection * Projection ) {
    struct IAgStkGraphicsProjectedRasterOverlay * _result = 0;
    HRESULT _hr = raw_Initialize(Raster, Projection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectedRasterOverlayPtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsProjectedRasterOverlayFactory::GetSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsProjectionFactory wrapper method implementations
//

IAgStkGraphicsProjectionPtr IAgStkGraphicsProjectionFactory::Initialize ( ) {
    struct IAgStkGraphicsProjection * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionPtr(_result, false);
}

IAgStkGraphicsProjectionPtr IAgStkGraphicsProjectionFactory::InitializeWithData ( SAFEARRAY * * Position, struct STKUtil::IAgOrientation * Orientation, double FieldOfViewHorizontal, double FieldOfViewVertical, double NearPlane, double FarPlane ) {
    struct IAgStkGraphicsProjection * _result = 0;
    HRESULT _hr = raw_InitializeWithData(Position, Orientation, FieldOfViewHorizontal, FieldOfViewVertical, NearPlane, FarPlane, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionPtr(_result, false);
}

IAgStkGraphicsProjectionPtr IAgStkGraphicsProjectionFactory::InitializeFromProjection ( struct IAgStkGraphicsProjection * Projection ) {
    struct IAgStkGraphicsProjection * _result = 0;
    HRESULT _hr = raw_InitializeFromProjection(Projection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionPtr(_result, false);
}

//
// interface IAgStkGraphicsAltitudeDisplayCondition wrapper method implementations
//

double IAgStkGraphicsAltitudeDisplayCondition::GetMinimumAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsAltitudeDisplayCondition::PutMinimumAltitude ( double pRetVal ) {
    HRESULT _hr = put_MinimumAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsAltitudeDisplayCondition::GetMaximumAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsAltitudeDisplayCondition::PutMaximumAltitude ( double pRetVal ) {
    HRESULT _hr = put_MaximumAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IAgStkGraphicsAltitudeDisplayCondition::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgStkGraphicsAltitudeDisplayCondition::PutCentralBody ( _bstr_t pRetVal ) {
    HRESULT _hr = put_CentralBody(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsAltitudeDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsAltitudeDisplayConditionPtr IAgStkGraphicsAltitudeDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsAltitudeDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAltitudeDisplayConditionPtr(_result, false);
}

IAgStkGraphicsAltitudeDisplayConditionPtr IAgStkGraphicsAltitudeDisplayConditionFactory::InitializeWithAltitudes ( double MinimumAltitude, double MaximumAltitude ) {
    struct IAgStkGraphicsAltitudeDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithAltitudes(MinimumAltitude, MaximumAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAltitudeDisplayConditionPtr(_result, false);
}

IAgStkGraphicsAltitudeDisplayConditionPtr IAgStkGraphicsAltitudeDisplayConditionFactory::InitializeWithCentralBodyAndAltitudes ( _bstr_t CentralBody, double MinimumAltitude, double MaximumAltitude ) {
    struct IAgStkGraphicsAltitudeDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBodyAndAltitudes(CentralBody, MinimumAltitude, MaximumAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAltitudeDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsCompositeDisplayCondition wrapper method implementations
//

int IAgStkGraphicsCompositeDisplayCondition::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsCompositeDisplayCondition::GetCapacity ( ) {
    int _result = 0;
    HRESULT _hr = get_Capacity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsBinaryLogicOperation IAgStkGraphicsCompositeDisplayCondition::GetLogicOperation ( ) {
    enum AgEStkGraphicsBinaryLogicOperation _result;
    HRESULT _hr = get_LogicOperation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCompositeDisplayCondition::PutLogicOperation ( enum AgEStkGraphicsBinaryLogicOperation pRetVal ) {
    HRESULT _hr = put_LogicOperation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr IAgStkGraphicsCompositeDisplayCondition::GetItem ( int Index ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

IUnknownPtr IAgStkGraphicsCompositeDisplayCondition::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::Reserve ( int Count ) {
    HRESULT _hr = raw_Reserve(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::AddWithNegate ( struct IAgStkGraphicsDisplayCondition * DisplayCondition, VARIANT_BOOL Negate ) {
    HRESULT _hr = raw_AddWithNegate(DisplayCondition, Negate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::Add ( struct IAgStkGraphicsDisplayCondition * DisplayCondition ) {
    HRESULT _hr = raw_Add(DisplayCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::InsertWithNegate ( int Index, struct IAgStkGraphicsDisplayCondition * DisplayCondition, VARIANT_BOOL Negate ) {
    HRESULT _hr = raw_InsertWithNegate(Index, DisplayCondition, Negate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::Insert ( int Index, struct IAgStkGraphicsDisplayCondition * DisplayCondition ) {
    HRESULT _hr = raw_Insert(Index, DisplayCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::Remove ( struct IAgStkGraphicsDisplayCondition * DisplayCondition ) {
    HRESULT _hr = raw_Remove(DisplayCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::RemoveAt ( int Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsCompositeDisplayCondition::GetNegate ( struct IAgStkGraphicsDisplayCondition * DisplayCondition ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNegate(DisplayCondition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::SetNegate ( struct IAgStkGraphicsDisplayCondition * DisplayCondition, VARIANT_BOOL Negate ) {
    HRESULT _hr = raw_SetNegate(DisplayCondition, Negate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsCompositeDisplayCondition::GetNegateAt ( int Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNegateAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsCompositeDisplayCondition::SetNegateAt ( int Index, VARIANT_BOOL Negate ) {
    HRESULT _hr = raw_SetNegateAt(Index, Negate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsCompositeDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsCompositeDisplayConditionPtr IAgStkGraphicsCompositeDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsCompositeDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCompositeDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsCompositePrimitive wrapper method implementations
//

int IAgStkGraphicsCompositePrimitive::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsPrimitivesSortOrder IAgStkGraphicsCompositePrimitive::GetTranslucentPrimitivesSortOrder ( ) {
    enum AgEStkGraphicsPrimitivesSortOrder _result;
    HRESULT _hr = get_TranslucentPrimitivesSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsCompositePrimitive::PutTranslucentPrimitivesSortOrder ( enum AgEStkGraphicsPrimitivesSortOrder pRetVal ) {
    HRESULT _hr = put_TranslucentPrimitivesSortOrder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsCompositePrimitive::Add ( struct IAgStkGraphicsPrimitive * Primitive ) {
    HRESULT _hr = raw_Add(Primitive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsCompositePrimitive::Remove ( struct IAgStkGraphicsPrimitive * Primitive ) {
    HRESULT _hr = raw_Remove(Primitive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsCompositePrimitive::Contains ( struct IAgStkGraphicsPrimitive * Primitive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Primitive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsCompositePrimitive::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr IAgStkGraphicsCompositePrimitive::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsCompositePrimitiveFactory wrapper method implementations
//

IAgStkGraphicsCompositePrimitivePtr IAgStkGraphicsCompositePrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsCompositePrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCompositePrimitivePtr(_result, false);
}

//
// interface IAgStkGraphicsConstantDisplayCondition wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsConstantDisplayCondition::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsConstantDisplayCondition::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsConstantDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsConstantDisplayConditionPtr IAgStkGraphicsConstantDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsConstantDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConstantDisplayConditionPtr(_result, false);
}

IAgStkGraphicsConstantDisplayConditionPtr IAgStkGraphicsConstantDisplayConditionFactory::InitializeDisplay ( VARIANT_BOOL Display ) {
    struct IAgStkGraphicsConstantDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeDisplay(Display, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConstantDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsDistanceDisplayCondition wrapper method implementations
//

double IAgStkGraphicsDistanceDisplayCondition::GetMinimumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDistanceDisplayCondition::PutMinimumDistance ( double pRetVal ) {
    HRESULT _hr = put_MinimumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceDisplayCondition::GetMaximumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDistanceDisplayCondition::PutMaximumDistance ( double pRetVal ) {
    HRESULT _hr = put_MaximumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceDisplayCondition::GetMinimumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsDistanceDisplayCondition::GetMaximumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsDistanceDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsDistanceDisplayConditionPtr IAgStkGraphicsDistanceDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceDisplayConditionPtr IAgStkGraphicsDistanceDisplayConditionFactory::InitializeWithDistances ( double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithDistances(MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsGlobeOverlay wrapper method implementations
//

_bstr_t IAgStkGraphicsGlobeOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * IAgStkGraphicsGlobeOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole IAgStkGraphicsGlobeOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgStkGraphicsGlobeOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IAgStkGraphicsGlobeOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr IAgStkGraphicsGlobeOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void IAgStkGraphicsGlobeOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition wrapper method implementations
//

IAgStkGraphicsGlobeOverlayPtr IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetGlobeOverlay ( ) {
    struct IAgStkGraphicsGlobeOverlay * _result = 0;
    HRESULT _hr = get_GlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeOverlayPtr(_result, false);
}

void IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::PutGlobeOverlay ( struct IAgStkGraphicsGlobeOverlay * ppRetVal ) {
    HRESULT _hr = put_GlobeOverlay(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetMinimumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::PutMinimumDistance ( double pRetVal ) {
    HRESULT _hr = put_MinimumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetMinimumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetMaximumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::PutMaximumDistance ( double pRetVal ) {
    HRESULT _hr = put_MaximumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetMaximumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory::InitializeWithDistances ( struct IAgStkGraphicsGlobeOverlay * GlobeOverlay, double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithDistances(GlobeOverlay, MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsDistanceToPositionDisplayCondition wrapper method implementations
//

double IAgStkGraphicsDistanceToPositionDisplayCondition::GetMinimumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDistanceToPositionDisplayCondition::PutMinimumDistance ( double pRetVal ) {
    HRESULT _hr = put_MinimumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceToPositionDisplayCondition::GetMinimumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsDistanceToPositionDisplayCondition::GetMaximumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDistanceToPositionDisplayCondition::PutMaximumDistance ( double pRetVal ) {
    HRESULT _hr = put_MaximumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceToPositionDisplayCondition::GetMaximumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsDistanceToPositionDisplayCondition::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDistanceToPositionDisplayCondition::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

AgSTKVgtLib::IAgCrdnSystemPtr IAgStkGraphicsDistanceToPositionDisplayCondition::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void IAgStkGraphicsDistanceToPositionDisplayCondition::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsDistanceToPositionDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsDistanceToPositionDisplayConditionPtr IAgStkGraphicsDistanceToPositionDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsDistanceToPositionDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPositionDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceToPositionDisplayConditionPtr IAgStkGraphicsDistanceToPositionDisplayConditionFactory::InitializeWithDistances ( SAFEARRAY * * Position, double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceToPositionDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithDistances(Position, MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPositionDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceToPositionDisplayConditionPtr IAgStkGraphicsDistanceToPositionDisplayConditionFactory::InitializeWithReferenceFrameAndDistances ( struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame, SAFEARRAY * * Position, double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceToPositionDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithReferenceFrameAndDistances(ReferenceFrame, Position, MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPositionDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsDistanceToPrimitiveDisplayCondition wrapper method implementations
//

IAgStkGraphicsPrimitivePtr IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetPrimitive ( ) {
    struct IAgStkGraphicsPrimitive * _result = 0;
    HRESULT _hr = get_Primitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPrimitivePtr(_result, false);
}

void IAgStkGraphicsDistanceToPrimitiveDisplayCondition::PutPrimitive ( struct IAgStkGraphicsPrimitive * ppRetVal ) {
    HRESULT _hr = put_Primitive(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetMinimumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDistanceToPrimitiveDisplayCondition::PutMinimumDistance ( double pRetVal ) {
    HRESULT _hr = put_MinimumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetMinimumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetMaximumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDistanceToPrimitiveDisplayCondition::PutMaximumDistance ( double pRetVal ) {
    HRESULT _hr = put_MaximumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetMaximumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsDistanceToPrimitiveDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory::InitializeWithDistances ( struct IAgStkGraphicsPrimitive * Primitive, double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceToPrimitiveDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithDistances(Primitive, MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsDurationPathPrimitiveUpdatePolicy wrapper method implementations
//

double IAgStkGraphicsDurationPathPrimitiveUpdatePolicy::GetDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDurationPathPrimitiveUpdatePolicy::PutDuration ( double pRetVal ) {
    HRESULT _hr = put_Duration(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsPathPrimitiveRemoveLocation IAgStkGraphicsDurationPathPrimitiveUpdatePolicy::GetRemoveLocation ( ) {
    enum AgEStkGraphicsPathPrimitiveRemoveLocation _result;
    HRESULT _hr = get_RemoveLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsDurationPathPrimitiveUpdatePolicy::PutRemoveLocation ( enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal ) {
    HRESULT _hr = put_RemoveLocation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory wrapper method implementations
//

IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory::Initialize ( ) {
    struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr(_result, false);
}

IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory::InitializeWithParameters ( double Duration, enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation ) {
    struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = raw_InitializeWithParameters(Duration, RemoveLocation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr(_result, false);
}

//
// interface IAgStkGraphicsGlobeImageOverlayInitializer wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsGlobeImageOverlayInitializer::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsGraphicsFont wrapper method implementations
//

_bstr_t IAgStkGraphicsGraphicsFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

int IAgStkGraphicsGraphicsFont::GetSize ( ) {
    int _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsGraphicsFont::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsGraphicsFont::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsGraphicsFont::GetUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsGraphicsFont::GetStrikeout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Strikeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsGraphicsFont::GetOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Outline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsFontStyle IAgStkGraphicsGraphicsFont::GetStyle ( ) {
    enum AgEStkGraphicsFontStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsGraphicsFont::GetAntialias ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Antialias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsGraphicsFontFactory wrapper method implementations
//

IAgStkGraphicsGraphicsFontPtr IAgStkGraphicsGraphicsFontFactory::InitializeWithNameSizeFontStyleOutline ( _bstr_t Name, int Size, enum AgEStkGraphicsFontStyle FontStyle, VARIANT_BOOL Outline ) {
    struct IAgStkGraphicsGraphicsFont * _result = 0;
    HRESULT _hr = raw_InitializeWithNameSizeFontStyleOutline(Name, Size, FontStyle, Outline, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontPtr(_result, false);
}

IAgStkGraphicsGraphicsFontPtr IAgStkGraphicsGraphicsFontFactory::InitializeWithNameSize ( _bstr_t Name, int Size ) {
    struct IAgStkGraphicsGraphicsFont * _result = 0;
    HRESULT _hr = raw_InitializeWithNameSize(Name, Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontPtr(_result, false);
}

//
// interface IAgStkGraphicsGreatArcInterpolator wrapper method implementations
//

_bstr_t IAgStkGraphicsGreatArcInterpolator::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgStkGraphicsGreatArcInterpolator::PutCentralBody ( _bstr_t pRetVal ) {
    HRESULT _hr = put_CentralBody(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsGreatArcInterpolator::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGreatArcInterpolator::PutGranularity ( double pRetVal ) {
    HRESULT _hr = put_Granularity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsGreatArcInterpolatorFactory wrapper method implementations
//

IAgStkGraphicsGreatArcInterpolatorPtr IAgStkGraphicsGreatArcInterpolatorFactory::Initialize ( ) {
    struct IAgStkGraphicsGreatArcInterpolator * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGreatArcInterpolatorPtr(_result, false);
}

IAgStkGraphicsGreatArcInterpolatorPtr IAgStkGraphicsGreatArcInterpolatorFactory::InitializeWithCentralBody ( _bstr_t CentralBody ) {
    struct IAgStkGraphicsGreatArcInterpolator * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBody(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGreatArcInterpolatorPtr(_result, false);
}

IAgStkGraphicsGreatArcInterpolatorPtr IAgStkGraphicsGreatArcInterpolatorFactory::InitializeWithCentralBodyAndGranularity ( _bstr_t CentralBody, double Granularity ) {
    struct IAgStkGraphicsGreatArcInterpolator * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBodyAndGranularity(CentralBody, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGreatArcInterpolatorPtr(_result, false);
}

//
// interface IAgStkGraphicsAlphaFromLuminanceFilterFactory wrapper method implementations
//

IAgStkGraphicsAlphaFromLuminanceFilterPtr IAgStkGraphicsAlphaFromLuminanceFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsAlphaFromLuminanceFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromLuminanceFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsAlphaFromPixelFilterFactory wrapper method implementations
//

IAgStkGraphicsAlphaFromPixelFilterPtr IAgStkGraphicsAlphaFromPixelFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsAlphaFromPixelFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromPixelFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsAlphaFromRasterFilter wrapper method implementations
//

IAgStkGraphicsRasterPtr IAgStkGraphicsAlphaFromRasterFilter::GetRaster ( ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = get_Raster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

void IAgStkGraphicsAlphaFromRasterFilter::PutRaster ( struct IAgStkGraphicsRaster * ppRetVal ) {
    HRESULT _hr = put_Raster(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsAlphaFromRasterFilterFactory wrapper method implementations
//

IAgStkGraphicsAlphaFromRasterFilterPtr IAgStkGraphicsAlphaFromRasterFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsAlphaFromRasterFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromRasterFilterPtr(_result, false);
}

IAgStkGraphicsAlphaFromRasterFilterPtr IAgStkGraphicsAlphaFromRasterFilterFactory::InitializeWithRaster ( struct IAgStkGraphicsRaster * Raster ) {
    struct IAgStkGraphicsAlphaFromRasterFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithRaster(Raster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromRasterFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsBandExtractFilter wrapper method implementations
//

enum AgEStkGraphicsRasterFormat IAgStkGraphicsBandExtractFilter::GetExtractFormat ( ) {
    enum AgEStkGraphicsRasterFormat _result;
    HRESULT _hr = get_ExtractFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsBandExtractFilter::PutExtractFormat ( enum AgEStkGraphicsRasterFormat pRetVal ) {
    HRESULT _hr = put_ExtractFormat(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsBandExtractFilterFactory wrapper method implementations
//

IAgStkGraphicsBandExtractFilterPtr IAgStkGraphicsBandExtractFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsBandExtractFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandExtractFilterPtr(_result, false);
}

IAgStkGraphicsBandExtractFilterPtr IAgStkGraphicsBandExtractFilterFactory::InitializeWithBand ( enum AgEStkGraphicsRasterBand RasterBand ) {
    struct IAgStkGraphicsBandExtractFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithBand(RasterBand, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandExtractFilterPtr(_result, false);
}

IAgStkGraphicsBandExtractFilterPtr IAgStkGraphicsBandExtractFilterFactory::InitializeWithFormat ( enum AgEStkGraphicsRasterFormat RasterFormat ) {
    struct IAgStkGraphicsBandExtractFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithFormat(RasterFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandExtractFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsBandOrderFilter wrapper method implementations
//

enum AgEStkGraphicsRasterFormat IAgStkGraphicsBandOrderFilter::GetBandOrder ( ) {
    enum AgEStkGraphicsRasterFormat _result;
    HRESULT _hr = get_BandOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsBandOrderFilter::PutBandOrder ( enum AgEStkGraphicsRasterFormat pRetVal ) {
    HRESULT _hr = put_BandOrder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsBandOrderFilter::GetMaintainRasterFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaintainRasterFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsBandOrderFilter::PutMaintainRasterFormat ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_MaintainRasterFormat(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsBandOrderFilterFactory wrapper method implementations
//

IAgStkGraphicsBandOrderFilterPtr IAgStkGraphicsBandOrderFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsBandOrderFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandOrderFilterPtr(_result, false);
}

IAgStkGraphicsBandOrderFilterPtr IAgStkGraphicsBandOrderFilterFactory::InitializeWithOrder ( enum AgEStkGraphicsRasterFormat BandOrder ) {
    struct IAgStkGraphicsBandOrderFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithOrder(BandOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandOrderFilterPtr(_result, false);
}

IAgStkGraphicsBandOrderFilterPtr IAgStkGraphicsBandOrderFilterFactory::InitializeWithOrderAndBool ( enum AgEStkGraphicsRasterFormat BandOrder, VARIANT_BOOL MaintainImageFormat ) {
    struct IAgStkGraphicsBandOrderFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithOrderAndBool(BandOrder, MaintainImageFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandOrderFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsBlurFilter wrapper method implementations
//

enum AgEStkGraphicsBlurMethod IAgStkGraphicsBlurFilter::GetMethod ( ) {
    enum AgEStkGraphicsBlurMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsBlurFilter::PutMethod ( enum AgEStkGraphicsBlurMethod pRetVal ) {
    HRESULT _hr = put_Method(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsBlurFilterFactory wrapper method implementations
//

IAgStkGraphicsBlurFilterPtr IAgStkGraphicsBlurFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsBlurFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBlurFilterPtr(_result, false);
}

IAgStkGraphicsBlurFilterPtr IAgStkGraphicsBlurFilterFactory::InitializeWithMethod ( enum AgEStkGraphicsBlurMethod Method ) {
    struct IAgStkGraphicsBlurFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithMethod(Method, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBlurFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsBrightnessFilter wrapper method implementations
//

double IAgStkGraphicsBrightnessFilter::GetAdjustment ( ) {
    double _result = 0;
    HRESULT _hr = get_Adjustment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsBrightnessFilter::PutAdjustment ( double pRetVal ) {
    HRESULT _hr = put_Adjustment(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsBrightnessFilterFactory wrapper method implementations
//

IAgStkGraphicsBrightnessFilterPtr IAgStkGraphicsBrightnessFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsBrightnessFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBrightnessFilterPtr(_result, false);
}

IAgStkGraphicsBrightnessFilterPtr IAgStkGraphicsBrightnessFilterFactory::InitializeWithAdjustment ( double Adjustment ) {
    struct IAgStkGraphicsBrightnessFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithAdjustment(Adjustment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBrightnessFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsColorToLuminanceFilterFactory wrapper method implementations
//

IAgStkGraphicsColorToLuminanceFilterPtr IAgStkGraphicsColorToLuminanceFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsColorToLuminanceFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsColorToLuminanceFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsContrastFilter wrapper method implementations
//

double IAgStkGraphicsContrastFilter::GetAdjustment ( ) {
    double _result = 0;
    HRESULT _hr = get_Adjustment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsContrastFilter::PutAdjustment ( double pRetVal ) {
    HRESULT _hr = put_Adjustment(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsContrastFilterFactory wrapper method implementations
//

IAgStkGraphicsContrastFilterPtr IAgStkGraphicsContrastFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsContrastFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsContrastFilterPtr(_result, false);
}

IAgStkGraphicsContrastFilterPtr IAgStkGraphicsContrastFilterFactory::InitializeWithAdjustment ( double Adjustment ) {
    struct IAgStkGraphicsContrastFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithAdjustment(Adjustment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsContrastFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsConvolutionFilter wrapper method implementations
//

double IAgStkGraphicsConvolutionFilter::GetDivisor ( ) {
    double _result = 0;
    HRESULT _hr = get_Divisor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsConvolutionFilter::PutDivisor ( double pRetVal ) {
    HRESULT _hr = put_Divisor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsConvolutionFilter::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsConvolutionFilter::PutOffset ( double pRetVal ) {
    HRESULT _hr = put_Offset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsConvolutionFilter::GetKernel ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Kernel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsConvolutionFilter::PutKernel ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Kernel(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsConvolutionFilterFactory wrapper method implementations
//

IAgStkGraphicsConvolutionFilterPtr IAgStkGraphicsConvolutionFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsConvolutionFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterPtr(_result, false);
}

IAgStkGraphicsConvolutionFilterPtr IAgStkGraphicsConvolutionFilterFactory::InitializeWithKernel ( SAFEARRAY * * Kernel ) {
    struct IAgStkGraphicsConvolutionFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithKernel(Kernel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterPtr(_result, false);
}

IAgStkGraphicsConvolutionFilterPtr IAgStkGraphicsConvolutionFilterFactory::InitializeWithKernelAndDivisor ( SAFEARRAY * * Kernel, double Divisor ) {
    struct IAgStkGraphicsConvolutionFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithKernelAndDivisor(Kernel, Divisor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterPtr(_result, false);
}

IAgStkGraphicsConvolutionFilterPtr IAgStkGraphicsConvolutionFilterFactory::InitializeWithKernelDivisorAndOffset ( SAFEARRAY * * Kernel, double Divisor, double Offset ) {
    struct IAgStkGraphicsConvolutionFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithKernelDivisorAndOffset(Kernel, Divisor, Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsEdgeDetectFilter wrapper method implementations
//

enum AgEStkGraphicsEdgeDetectMethod IAgStkGraphicsEdgeDetectFilter::GetMethod ( ) {
    enum AgEStkGraphicsEdgeDetectMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsEdgeDetectFilter::PutMethod ( enum AgEStkGraphicsEdgeDetectMethod pRetVal ) {
    HRESULT _hr = put_Method(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsEdgeDetectFilterFactory wrapper method implementations
//

IAgStkGraphicsEdgeDetectFilterPtr IAgStkGraphicsEdgeDetectFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsEdgeDetectFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsEdgeDetectFilterPtr(_result, false);
}

IAgStkGraphicsEdgeDetectFilterPtr IAgStkGraphicsEdgeDetectFilterFactory::InitializeWithMethod ( enum AgEStkGraphicsEdgeDetectMethod Method ) {
    struct IAgStkGraphicsEdgeDetectFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithMethod(Method, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsEdgeDetectFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsRasterStream wrapper method implementations
//

double IAgStkGraphicsRasterStream::GetUpdateDelta ( ) {
    double _result = 0;
    HRESULT _hr = get_UpdateDelta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsRasterStream::PutUpdateDelta ( double pRetVal ) {
    HRESULT _hr = put_UpdateDelta(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsRasterStream::Update ( struct STKUtil::IAgDate * Time, struct STKUtil::IAgDate * NextTime ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(Time, NextTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsFilteringRasterStream wrapper method implementations
//

IAgStkGraphicsRasterFilterPtr IAgStkGraphicsFilteringRasterStream::GetFilter ( ) {
    struct IAgStkGraphicsRasterFilter * _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterFilterPtr(_result, false);
}

IAgStkGraphicsRasterStreamPtr IAgStkGraphicsFilteringRasterStream::GetStream ( ) {
    struct IAgStkGraphicsRasterStream * _result = 0;
    HRESULT _hr = get_Stream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterStreamPtr(_result, false);
}

//
// interface IAgStkGraphicsFilteringRasterStreamFactory wrapper method implementations
//

IAgStkGraphicsFilteringRasterStreamPtr IAgStkGraphicsFilteringRasterStreamFactory::Initialize ( struct IAgStkGraphicsRasterStream * RasterStream, struct IAgStkGraphicsRasterFilter * Filter ) {
    struct IAgStkGraphicsFilteringRasterStream * _result = 0;
    HRESULT _hr = raw_Initialize(RasterStream, Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFilteringRasterStreamPtr(_result, false);
}

//
// interface IAgStkGraphicsFlipFilter wrapper method implementations
//

enum AgEStkGraphicsFlipAxis IAgStkGraphicsFlipFilter::GetFlipAxis ( ) {
    enum AgEStkGraphicsFlipAxis _result;
    HRESULT _hr = get_FlipAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsFlipFilter::PutFlipAxis ( enum AgEStkGraphicsFlipAxis pRetVal ) {
    HRESULT _hr = put_FlipAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsFlipFilterFactory wrapper method implementations
//

IAgStkGraphicsFlipFilterPtr IAgStkGraphicsFlipFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsFlipFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFlipFilterPtr(_result, false);
}

IAgStkGraphicsFlipFilterPtr IAgStkGraphicsFlipFilterFactory::InitializeWithFlipAxis ( enum AgEStkGraphicsFlipAxis FlipAxis ) {
    struct IAgStkGraphicsFlipFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithFlipAxis(FlipAxis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFlipFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsGammaCorrectionFilter wrapper method implementations
//

double IAgStkGraphicsGammaCorrectionFilter::GetGamma ( ) {
    double _result = 0;
    HRESULT _hr = get_Gamma(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGammaCorrectionFilter::PutGamma ( double pRetVal ) {
    HRESULT _hr = put_Gamma(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsGammaCorrectionFilterFactory wrapper method implementations
//

IAgStkGraphicsGammaCorrectionFilterPtr IAgStkGraphicsGammaCorrectionFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsGammaCorrectionFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGammaCorrectionFilterPtr(_result, false);
}

IAgStkGraphicsGammaCorrectionFilterPtr IAgStkGraphicsGammaCorrectionFilterFactory::InitializeWithGamma ( double Gamma ) {
    struct IAgStkGraphicsGammaCorrectionFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithGamma(Gamma, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGammaCorrectionFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsGaussianBlurFilterFactory wrapper method implementations
//

IAgStkGraphicsGaussianBlurFilterPtr IAgStkGraphicsGaussianBlurFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsGaussianBlurFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGaussianBlurFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsGradientDetectFilter wrapper method implementations
//

enum AgEStkGraphicsGradientDetectMethod IAgStkGraphicsGradientDetectFilter::GetMethod ( ) {
    enum AgEStkGraphicsGradientDetectMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGradientDetectFilter::PutMethod ( enum AgEStkGraphicsGradientDetectMethod pRetVal ) {
    HRESULT _hr = put_Method(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsGradientDetectFilterFactory wrapper method implementations
//

IAgStkGraphicsGradientDetectFilterPtr IAgStkGraphicsGradientDetectFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsGradientDetectFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGradientDetectFilterPtr(_result, false);
}

IAgStkGraphicsGradientDetectFilterPtr IAgStkGraphicsGradientDetectFilterFactory::InitializeWithMethod ( enum AgEStkGraphicsGradientDetectMethod Method ) {
    struct IAgStkGraphicsGradientDetectFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithMethod(Method, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGradientDetectFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsJpeg2000WriterInitializer wrapper method implementations
//

HRESULT IAgStkGraphicsJpeg2000WriterInitializer::WriteString ( _bstr_t ImageUri, enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile, int CompressionRate, _bstr_t Jpeg2000Uri, VARIANT_BOOL OverwriteExistingFile ) {
    HRESULT _hr = raw_WriteString(ImageUri, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsJpeg2000WriterInitializer::WriteExtentString ( _bstr_t ImageUri, SAFEARRAY * * Extent, enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile, int CompressionRate, _bstr_t Jpeg2000Uri, VARIANT_BOOL OverwriteExistingFile ) {
    HRESULT _hr = raw_WriteExtentString(ImageUri, Extent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsJpeg2000WriterInitializer::WriteExtentAndSubExtentString ( _bstr_t ImageUri, SAFEARRAY * * Extent, SAFEARRAY * * SubExtent, enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile, int CompressionRate, _bstr_t Jpeg2000Uri, VARIANT_BOOL OverwriteExistingFile ) {
    HRESULT _hr = raw_WriteExtentAndSubExtentString(ImageUri, Extent, SubExtent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsJpeg2000WriterInitializer::WriteExtentAndSubExtentTransparentColorString ( _bstr_t ImageUri, SAFEARRAY * * Extent, SAFEARRAY * * SubExtent, enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile, int CompressionRate, _bstr_t Jpeg2000Uri, VARIANT_BOOL OverwriteExistingFile, OLE_COLOR TransparentColor ) {
    HRESULT _hr = raw_WriteExtentAndSubExtentTransparentColorString(ImageUri, Extent, SubExtent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile, TransparentColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsLevelsFilter wrapper method implementations
//

HRESULT IAgStkGraphicsLevelsFilter::SetLevelAdjustment ( enum AgEStkGraphicsRasterBand Band, int Adjustment ) {
    HRESULT _hr = raw_SetLevelAdjustment(Band, Adjustment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsLevelsFilter::ClearAdjustments ( ) {
    HRESULT _hr = raw_ClearAdjustments();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsLevelsFilterFactory wrapper method implementations
//

IAgStkGraphicsLevelsFilterPtr IAgStkGraphicsLevelsFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsLevelsFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsLevelsFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsProjectionStream wrapper method implementations
//

double IAgStkGraphicsProjectionStream::GetUpdateDelta ( ) {
    double _result = 0;
    HRESULT _hr = get_UpdateDelta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsProjectionStream::PutUpdateDelta ( double pRetVal ) {
    HRESULT _hr = put_UpdateDelta(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsProjectionStream::Update ( struct STKUtil::IAgDate * Time, struct STKUtil::IAgDate * NextTime ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(Time, NextTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsProjectionRasterStreamPluginProxy wrapper method implementations
//

IAgStkGraphicsRasterStreamPtr IAgStkGraphicsProjectionRasterStreamPluginProxy::GetRasterStream ( ) {
    struct IAgStkGraphicsRasterStream * _result = 0;
    HRESULT _hr = get_RasterStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterStreamPtr(_result, false);
}

IAgStkGraphicsProjectionStreamPtr IAgStkGraphicsProjectionRasterStreamPluginProxy::GetProjectionStream ( ) {
    struct IAgStkGraphicsProjectionStream * _result = 0;
    HRESULT _hr = get_ProjectionStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionStreamPtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsProjectionRasterStreamPluginProxy::GetIsRasterStreamSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRasterStreamSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsProjectionRasterStreamPluginProxy::GetIsProjectionStreamSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsProjectionStreamSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgStkGraphicsProjectionRasterStreamPluginProxy::GetRealPluginObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RealPluginObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsProjectionRasterStreamPluginActivator wrapper method implementations
//

IAgStkGraphicsProjectionRasterStreamPluginProxyPtr IAgStkGraphicsProjectionRasterStreamPluginActivator::CreateFromDisplayName ( _bstr_t DisplayName ) {
    struct IAgStkGraphicsProjectionRasterStreamPluginProxy * _result = 0;
    HRESULT _hr = raw_CreateFromDisplayName(DisplayName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionRasterStreamPluginProxyPtr(_result, false);
}

SAFEARRAY * IAgStkGraphicsProjectionRasterStreamPluginActivator::GetAvailableDisplayNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetAvailableDisplayNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory wrapper method implementations
//

IAgStkGraphicsProjectionRasterStreamPluginActivatorPtr IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory::Initialize ( ) {
    struct IAgStkGraphicsProjectionRasterStreamPluginActivator * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionRasterStreamPluginActivatorPtr(_result, false);
}

//
// interface IAgStkGraphicsRasterFactory wrapper method implementations
//

IAgStkGraphicsRasterPtr IAgStkGraphicsRasterFactory::InitializeWithStringUri ( _bstr_t Uri ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUri(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRasterPtr IAgStkGraphicsRasterFactory::InitializeWithStringUriXYWidthAndHeight ( _bstr_t Uri, int X, int Y, int Width, int Height ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUriXYWidthAndHeight(Uri, X, Y, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRasterPtr IAgStkGraphicsRasterFactory::InitializeWithRaster ( struct IAgStkGraphicsRaster * Raster ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_InitializeWithRaster(Raster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

//
// interface IAgStkGraphicsRasterAttributesFactory wrapper method implementations
//

IAgStkGraphicsRasterAttributesPtr IAgStkGraphicsRasterAttributesFactory::InitializeWithFormat ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormat(Width, Height, RasterFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr IAgStkGraphicsRasterAttributesFactory::InitializeWithFormatAndType ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat, enum AgEStkGraphicsRasterType RasterType ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormatAndType(Width, Height, RasterFormat, RasterType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr IAgStkGraphicsRasterAttributesFactory::InitializeWithFormatTypeAndOrientation ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat, enum AgEStkGraphicsRasterType RasterType, enum AgEStkGraphicsRasterOrientation RasterOrientation ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormatTypeAndOrientation(Width, Height, RasterFormat, RasterType, RasterOrientation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr IAgStkGraphicsRasterAttributesFactory::InitializeWithFormatTypeOrientationAndAlignment ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat, enum AgEStkGraphicsRasterType RasterType, enum AgEStkGraphicsRasterOrientation RasterOrientation, int RowAlignment ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormatTypeOrientationAndAlignment(Width, Height, RasterFormat, RasterType, RasterOrientation, RowAlignment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr IAgStkGraphicsRasterAttributesFactory::InitializeWithFormatTypeOrientationAlignmentAndRatio ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat, enum AgEStkGraphicsRasterType RasterType, enum AgEStkGraphicsRasterOrientation RasterOrientation, int RowAlignment, double PixelAspectRatio ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormatTypeOrientationAlignmentAndRatio(Width, Height, RasterFormat, RasterType, RasterOrientation, RowAlignment, PixelAspectRatio, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr IAgStkGraphicsRasterAttributesFactory::InitializeWithRaster ( struct IAgStkGraphicsRaster * Raster ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithRaster(Raster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

//
// interface IAgStkGraphicsRotateFilter wrapper method implementations
//

double IAgStkGraphicsRotateFilter::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsRotateFilter::PutAngle ( double pRetVal ) {
    HRESULT _hr = put_Angle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsRotateFilterFactory wrapper method implementations
//

IAgStkGraphicsRotateFilterPtr IAgStkGraphicsRotateFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsRotateFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRotateFilterPtr(_result, false);
}

IAgStkGraphicsRotateFilterPtr IAgStkGraphicsRotateFilterFactory::InitializeWithAngle ( double RotateAngle ) {
    struct IAgStkGraphicsRotateFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithAngle(RotateAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRotateFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsSequenceFilter wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsSequenceFilter::GetContinueOnFailure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContinueOnFailure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSequenceFilter::PutContinueOnFailure ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ContinueOnFailure(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgStkGraphicsSequenceFilter::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsSequenceFilter::Add ( struct IAgStkGraphicsRasterFilter * Filter ) {
    HRESULT _hr = raw_Add(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsSequenceFilter::Remove ( struct IAgStkGraphicsRasterFilter * Filter ) {
    HRESULT _hr = raw_Remove(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsSequenceFilter::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsSequenceFilter::Contains ( struct IAgStkGraphicsRasterFilter * Filter ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsSequenceFilterFactory wrapper method implementations
//

IAgStkGraphicsSequenceFilterPtr IAgStkGraphicsSequenceFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsSequenceFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSequenceFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsSharpenFilter wrapper method implementations
//

enum AgEStkGraphicsSharpenMethod IAgStkGraphicsSharpenFilter::GetMethod ( ) {
    enum AgEStkGraphicsSharpenMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSharpenFilter::PutMethod ( enum AgEStkGraphicsSharpenMethod pRetVal ) {
    HRESULT _hr = put_Method(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsSharpenFilterFactory wrapper method implementations
//

IAgStkGraphicsSharpenFilterPtr IAgStkGraphicsSharpenFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsSharpenFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSharpenFilterPtr(_result, false);
}

IAgStkGraphicsSharpenFilterPtr IAgStkGraphicsSharpenFilterFactory::InitializeWithMethod ( enum AgEStkGraphicsSharpenMethod Method ) {
    struct IAgStkGraphicsSharpenFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithMethod(Method, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSharpenFilterPtr(_result, false);
}

//
// interface IAgStkGraphicsVideoStream wrapper method implementations
//

_bstr_t IAgStkGraphicsVideoStream::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEStkGraphicsVideoPlayback IAgStkGraphicsVideoStream::GetPlayback ( ) {
    enum AgEStkGraphicsVideoPlayback _result;
    HRESULT _hr = get_Playback(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutPlayback ( enum AgEStkGraphicsVideoPlayback pRetVal ) {
    HRESULT _hr = put_Playback(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsVideoStream::GetFrameRate ( ) {
    double _result = 0;
    HRESULT _hr = get_FrameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutFrameRate ( double pRetVal ) {
    HRESULT _hr = put_FrameRate(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDatePtr IAgStkGraphicsVideoStream::GetIntervalStartTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_IntervalStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

void IAgStkGraphicsVideoStream::PutIntervalStartTime ( struct STKUtil::IAgDate * ppRetVal ) {
    HRESULT _hr = put_IntervalStartTime(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDatePtr IAgStkGraphicsVideoStream::GetIntervalEndTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_IntervalEndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

void IAgStkGraphicsVideoStream::PutIntervalEndTime ( struct STKUtil::IAgDate * ppRetVal ) {
    HRESULT _hr = put_IntervalEndTime(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsVideoStream::GetStartTime ( ) {
    double _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutStartTime ( double pRetVal ) {
    HRESULT _hr = put_StartTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsVideoStream::GetEndTime ( ) {
    double _result = 0;
    HRESULT _hr = get_EndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutEndTime ( double pRetVal ) {
    HRESULT _hr = put_EndTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgStkGraphicsVideoStream::GetStartFrame ( ) {
    int _result = 0;
    HRESULT _hr = get_StartFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutStartFrame ( int pRetVal ) {
    HRESULT _hr = put_StartFrame(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgStkGraphicsVideoStream::GetEndFrame ( ) {
    int _result = 0;
    HRESULT _hr = get_EndFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutEndFrame ( int pRetVal ) {
    HRESULT _hr = put_EndFrame(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsVideoStream::GetLoop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Loop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutLoop ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Loop(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsVideoStream::GetIsPlaying ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlaying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsVideoStream::GetPacketAcquirementYieldTime ( ) {
    int _result = 0;
    HRESULT _hr = get_PacketAcquirementYieldTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutPacketAcquirementYieldTime ( int pRetVal ) {
    HRESULT _hr = put_PacketAcquirementYieldTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgStkGraphicsVideoStream::GetPacketBufferLimit ( ) {
    int _result = 0;
    HRESULT _hr = get_PacketBufferLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutPacketBufferLimit ( int pRetVal ) {
    HRESULT _hr = put_PacketBufferLimit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsVideoStream::GetAllowFrameDrop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowFrameDrop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsVideoStream::PutAllowFrameDrop ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AllowFrameDrop(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsVideoStream::ReinitializeWithStringUri ( _bstr_t Uri ) {
    HRESULT _hr = raw_ReinitializeWithStringUri(Uri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsVideoStream::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsVideoStream::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsVideoStream::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsVideoStream::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsVideoStream::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsVideoStreamFactory wrapper method implementations
//

IAgStkGraphicsVideoStreamPtr IAgStkGraphicsVideoStreamFactory::InitializeWithStringUri ( _bstr_t Uri ) {
    struct IAgStkGraphicsVideoStream * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUri(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsVideoStreamPtr(_result, false);
}

//
// interface IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters wrapper method implementations
//

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetTextures ( SAFEARRAY * * Textures ) {
    HRESULT _hr = raw_SetTextures(Textures);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetSizes ( SAFEARRAY * * Sizes ) {
    HRESULT _hr = raw_SetSizes(Sizes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetColors ( SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetColors(Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetOrigins ( SAFEARRAY * * Origins ) {
    HRESULT _hr = raw_SetOrigins(Origins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetPixelOffsets ( SAFEARRAY * * PixelOffsets ) {
    HRESULT _hr = raw_SetPixelOffsets(PixelOffsets);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetEyeOffsets ( SAFEARRAY * * EyeOffsets ) {
    HRESULT _hr = raw_SetEyeOffsets(EyeOffsets);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetRotations ( SAFEARRAY * * RotationAngles ) {
    HRESULT _hr = raw_SetRotations(RotationAngles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetTextureCoordinates ( SAFEARRAY * * TextureCoordinates ) {
    HRESULT _hr = raw_SetTextureCoordinates(TextureCoordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetTimeIntervalDisplayConditions ( SAFEARRAY * * TimeIntervals ) {
    HRESULT _hr = raw_SetTimeIntervalDisplayConditions(TimeIntervals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetDisplays ( SAFEARRAY * * Displays ) {
    HRESULT _hr = raw_SetDisplays(Displays);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsMarkerBatchPrimitive wrapper method implementations
//

enum AgEStkGraphicsMarkerBatchSizeSource IAgStkGraphicsMarkerBatchPrimitive::GetSizeSource ( ) {
    enum AgEStkGraphicsMarkerBatchSizeSource _result;
    HRESULT _hr = get_SizeSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMarkerBatchSortOrder IAgStkGraphicsMarkerBatchPrimitive::GetSortOrder ( ) {
    enum AgEStkGraphicsMarkerBatchSortOrder _result;
    HRESULT _hr = get_SortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsSetHint IAgStkGraphicsMarkerBatchPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMarkerBatchRenderingMethod IAgStkGraphicsMarkerBatchPrimitive::GetRenderingMethod ( ) {
    enum AgEStkGraphicsMarkerBatchRenderingMethod _result;
    HRESULT _hr = get_RenderingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMarkerBatchRenderPass IAgStkGraphicsMarkerBatchPrimitive::GetRenderPass ( ) {
    enum AgEStkGraphicsMarkerBatchRenderPass _result;
    HRESULT _hr = get_RenderPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutRenderPass ( enum AgEStkGraphicsMarkerBatchRenderPass pRetVal ) {
    HRESULT _hr = put_RenderPass(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsMarkerBatchPrimitive::GetBoundingSphereScale ( ) {
    double _result = 0;
    HRESULT _hr = get_BoundingSphereScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutBoundingSphereScale ( double pRetVal ) {
    HRESULT _hr = put_BoundingSphereScale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDistanceDisplayConditionPtr IAgStkGraphicsMarkerBatchPrimitive::GetDistanceDisplayConditionPerMarker ( ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = get_DistanceDisplayConditionPerMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

void IAgStkGraphicsMarkerBatchPrimitive::PutDistanceDisplayConditionPerMarker ( struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DistanceDisplayConditionPerMarker(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsRendererTexture2DPtr IAgStkGraphicsMarkerBatchPrimitive::GetTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = get_Texture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

void IAgStkGraphicsMarkerBatchPrimitive::PutTexture ( struct IAgStkGraphicsRendererTexture2D * ppRetVal ) {
    HRESULT _hr = put_Texture(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsMarkerBatchUnit IAgStkGraphicsMarkerBatchPrimitive::GetSizeUnit ( ) {
    enum AgEStkGraphicsMarkerBatchUnit _result;
    HRESULT _hr = get_SizeUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutSizeUnit ( enum AgEStkGraphicsMarkerBatchUnit pRetVal ) {
    HRESULT _hr = put_SizeUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsMarkerBatchPrimitive::GetSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Size(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsOrigin IAgStkGraphicsMarkerBatchPrimitive::GetOrigin ( ) {
    enum AgEStkGraphicsOrigin _result;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutOrigin ( enum AgEStkGraphicsOrigin pRetVal ) {
    HRESULT _hr = put_Origin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsMarkerBatchPrimitive::GetPixelOffset ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PixelOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutPixelOffset ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_PixelOffset(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsMarkerBatchPrimitive::GetEyeOffset ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_EyeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutEyeOffset ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_EyeOffset(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsMarkerBatchPrimitive::GetRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutRotation ( double pRetVal ) {
    HRESULT _hr = put_Rotation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsMarkerBatchPrimitive::GetTextureCoordinate ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TextureCoordinate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutTextureCoordinate ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_TextureCoordinate(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsMarkerBatchPrimitive::GetAlignToPixel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlignToPixel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutAlignToPixel ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AlignToPixel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsMarkerBatchPrimitive::GetWireframe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Wireframe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutWireframe ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Wireframe(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsMarkerBatchPrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsMarkerBatchPrimitive::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void IAgStkGraphicsMarkerBatchPrimitive::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::Set ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_Set(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetWithOptionalParameters ( SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetWithOptionalParameters(Positions, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetWithOptionalParametersAndRenderPassHint ( SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetWithOptionalParametersAndRenderPassHint(Positions, OptionalParameters, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_SetCartographic(CentralBody, Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetCartographicWithOptionalParameters ( _bstr_t CentralBody, SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetCartographicWithOptionalParameters(CentralBody, Positions, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetCartographicWithOptionalParametersAndRenderPassHint ( _bstr_t CentralBody, SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetCartographicWithOptionalParametersAndRenderPassHint(CentralBody, Positions, OptionalParameters, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetPartial ( SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartial(Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetPartialWithIndicesOrder ( SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialWithIndicesOrder(Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetPartialWithOptionalParameters ( SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialWithOptionalParameters(Positions, OptionalParameters, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetPartialWithOptionalParametersIndicesOrderAndRenderPass ( SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialWithOptionalParametersIndicesOrderAndRenderPass(Positions, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetPartialCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographic(CentralBody, Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetPartialCartographicWithIndicesOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithIndicesOrder(CentralBody, Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetPartialCartographicWithOptionalParameters ( _bstr_t CentralBody, SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographicWithOptionalParameters(CentralBody, Positions, OptionalParameters, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(CentralBody, Positions, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsMarkerBatchPrimitive::Supported ( enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Supported(RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsMarkerBatchPrimitive::GetClampToPixel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClampToPixel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutClampToPixel ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ClampToPixel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsMarkerBatchPrimitive::GetCentralBodyClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentralBodyClipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMarkerBatchPrimitive::PutCentralBodyClipped ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CentralBodyClipped(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::AlignToScreen ( ) {
    HRESULT _hr = raw_AlignToScreen();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::AlignToNorth ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_AlignToNorth(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsMarkerBatchPrimitive::AlignToAxis ( _bstr_t CentralBody, SAFEARRAY * * Axis ) {
    HRESULT _hr = raw_AlignToAxis(CentralBody, Axis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsMarkerBatchPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsMarkerBatchPrimitivePtr IAgStkGraphicsMarkerBatchPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeWithSetHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeWithSizeSource ( enum AgEStkGraphicsMarkerBatchSizeSource SizeSource ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSizeSource(SizeSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeWithSizeSourceAndSortOrder ( enum AgEStkGraphicsMarkerBatchSizeSource SizeSource, enum AgEStkGraphicsMarkerBatchSortOrder SortOrder ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSizeSourceAndSortOrder(SizeSource, SortOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeSizeSourceSortOrderAndSetHint ( enum AgEStkGraphicsMarkerBatchSizeSource SizeSource, enum AgEStkGraphicsMarkerBatchSortOrder SortOrder, enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeSizeSourceSortOrderAndSetHint(SizeSource, SortOrder, SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeSizeSourceSortOrderSetHintAndRenderingMethod ( enum AgEStkGraphicsMarkerBatchSizeSource SizeSource, enum AgEStkGraphicsMarkerBatchSortOrder SortOrder, enum AgEStkGraphicsSetHint SetHint, enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeSizeSourceSortOrderSetHintAndRenderingMethod(SizeSource, SortOrder, SetHint, RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsMarkerBatchPrimitiveFactory::Supported ( enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Supported(RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory wrapper method implementations
//

IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersPtr IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory::Initialize ( ) {
    struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersPtr(_result, false);
}

//
// interface IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy wrapper method implementations
//

int IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy::GetMaximumCount ( ) {
    int _result = 0;
    HRESULT _hr = get_MaximumCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy::PutMaximumCount ( int pRetVal ) {
    HRESULT _hr = put_MaximumCount(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsPathPrimitiveRemoveLocation IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy::GetRemoveLocation ( ) {
    enum AgEStkGraphicsPathPrimitiveRemoveLocation _result;
    HRESULT _hr = get_RemoveLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy::PutRemoveLocation ( enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal ) {
    HRESULT _hr = put_RemoveLocation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory wrapper method implementations
//

IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory::Initialize ( ) {
    struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr(_result, false);
}

IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory::InitializeWithParameters ( int MaximumCount, enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation ) {
    struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = raw_InitializeWithParameters(MaximumCount, RemoveLocation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr(_result, false);
}

//
// interface IAgStkGraphicsModelTransformation wrapper method implementations
//

double IAgStkGraphicsModelTransformation::GetCurrentValue ( ) {
    double _result = 0;
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsModelTransformation::PutCurrentValue ( double pRetVal ) {
    HRESULT _hr = put_CurrentValue(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsModelTransformation::GetMinimumValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsModelTransformation::GetMaximumValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsModelTransformation::GetDefaultValue ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsModelTransformation::GetRange ( ) {
    double _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgStkGraphicsModelTransformation::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEStkGraphicsModelTransformationType IAgStkGraphicsModelTransformation::GetType ( ) {
    enum AgEStkGraphicsModelTransformationType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsModelArticulation wrapper method implementations
//

_bstr_t IAgStkGraphicsModelArticulation::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

int IAgStkGraphicsModelArticulation::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsModelTransformationPtr IAgStkGraphicsModelArticulation::GetItem ( int Index ) {
    struct IAgStkGraphicsModelTransformation * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelTransformationPtr(_result, false);
}

IAgStkGraphicsModelTransformationPtr IAgStkGraphicsModelArticulation::GetItemByString ( _bstr_t Name ) {
    struct IAgStkGraphicsModelTransformation * _result = 0;
    HRESULT _hr = raw_GetItemByString(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelTransformationPtr(_result, false);
}

IAgStkGraphicsModelTransformationPtr IAgStkGraphicsModelArticulation::GetByName ( _bstr_t Name ) {
    struct IAgStkGraphicsModelTransformation * _result = 0;
    HRESULT _hr = raw_GetByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelTransformationPtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsModelArticulation::Contains ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgStkGraphicsModelArticulation::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsModelArticulationCollection wrapper method implementations
//

int IAgStkGraphicsModelArticulationCollection::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsModelArticulationPtr IAgStkGraphicsModelArticulationCollection::GetItem ( int Index ) {
    struct IAgStkGraphicsModelArticulation * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelArticulationPtr(_result, false);
}

IAgStkGraphicsModelArticulationPtr IAgStkGraphicsModelArticulationCollection::GetItemByString ( _bstr_t Name ) {
    struct IAgStkGraphicsModelArticulation * _result = 0;
    HRESULT _hr = raw_GetItemByString(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelArticulationPtr(_result, false);
}

IAgStkGraphicsModelArticulationPtr IAgStkGraphicsModelArticulationCollection::GetByName ( _bstr_t Name ) {
    struct IAgStkGraphicsModelArticulation * _result = 0;
    HRESULT _hr = raw_GetByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelArticulationPtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsModelArticulationCollection::Contains ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IAgStkGraphicsModelArticulationCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsModelPrimitive wrapper method implementations
//

_bstr_t IAgStkGraphicsModelPrimitive::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double IAgStkGraphicsModelPrimitive::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsModelPrimitive::PutScale ( double pRetVal ) {
    HRESULT _hr = put_Scale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsModelPrimitive::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsModelPrimitive::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr IAgStkGraphicsModelPrimitive::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

void IAgStkGraphicsModelPrimitive::PutOrientation ( struct STKUtil::IAgOrientation * ppRetVal ) {
    HRESULT _hr = put_Orientation(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsModelArticulationCollectionPtr IAgStkGraphicsModelPrimitive::GetArticulations ( ) {
    struct IAgStkGraphicsModelArticulationCollection * _result = 0;
    HRESULT _hr = get_Articulations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelArticulationCollectionPtr(_result, false);
}

HRESULT IAgStkGraphicsModelPrimitive::LoadWithStringUri ( _bstr_t Uri ) {
    HRESULT _hr = raw_LoadWithStringUri(Uri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsModelPrimitive::LoadWithStringUriAndUpAxis ( _bstr_t Uri, enum AgEStkGraphicsModelUpAxis UpAxis ) {
    HRESULT _hr = raw_LoadWithStringUriAndUpAxis(Uri, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsModelPrimitive::SetPositionCartographic ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    HRESULT _hr = raw_SetPositionCartographic(CentralBody, Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsModelPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsModelPrimitivePtr IAgStkGraphicsModelPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsModelPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelPrimitivePtr(_result, false);
}

IAgStkGraphicsModelPrimitivePtr IAgStkGraphicsModelPrimitiveFactory::InitializeWithStringUri ( _bstr_t Uri ) {
    struct IAgStkGraphicsModelPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUri(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelPrimitivePtr(_result, false);
}

IAgStkGraphicsModelPrimitivePtr IAgStkGraphicsModelPrimitiveFactory::InitializeWithStringUriAndUpAxis ( _bstr_t Uri, enum AgEStkGraphicsModelUpAxis UpAxis ) {
    struct IAgStkGraphicsModelPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUriAndUpAxis(Uri, UpAxis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelPrimitivePtr(_result, false);
}

//
// interface IAgStkGraphicsPixelSizeDisplayCondition wrapper method implementations
//

int IAgStkGraphicsPixelSizeDisplayCondition::GetMinimumPixelSize ( ) {
    int _result = 0;
    HRESULT _hr = get_MinimumPixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPixelSizeDisplayCondition::PutMinimumPixelSize ( int pRetVal ) {
    HRESULT _hr = put_MinimumPixelSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgStkGraphicsPixelSizeDisplayCondition::GetMaximumPixelSize ( ) {
    int _result = 0;
    HRESULT _hr = get_MaximumPixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPixelSizeDisplayCondition::PutMaximumPixelSize ( int pRetVal ) {
    HRESULT _hr = put_MaximumPixelSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsPixelSizeDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsPixelSizeDisplayConditionPtr IAgStkGraphicsPixelSizeDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsPixelSizeDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPixelSizeDisplayConditionPtr(_result, false);
}

IAgStkGraphicsPixelSizeDisplayConditionPtr IAgStkGraphicsPixelSizeDisplayConditionFactory::InitializeWithPixelSizes ( int MinimumPixelSize, int MaximumPixelSize ) {
    struct IAgStkGraphicsPixelSizeDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithPixelSizes(MinimumPixelSize, MaximumPixelSize, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPixelSizeDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsPointBatchPrimitive wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsPointBatchPrimitive::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPointBatchPrimitive::PutDisplayOutline ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayOutline(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsPointBatchPrimitive::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPointBatchPrimitive::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPointBatchPrimitive::GetOutlineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPointBatchPrimitive::PutOutlineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPointBatchPrimitive::GetOutlineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPointBatchPrimitive::PutOutlineWidth ( float pRetVal ) {
    HRESULT _hr = put_OutlineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPointBatchPrimitive::GetPixelSize ( ) {
    float _result = 0;
    HRESULT _hr = get_PixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPointBatchPrimitive::PutPixelSize ( float pRetVal ) {
    HRESULT _hr = put_PixelSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPointBatchPrimitive::GetMinimumPixelSizeSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumPixelSizeSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsPointBatchPrimitive::GetMaximumPixelSizeSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumPixelSizeSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDistanceDisplayConditionPtr IAgStkGraphicsPointBatchPrimitive::GetDistanceDisplayConditionPerPoint ( ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = get_DistanceDisplayConditionPerPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

void IAgStkGraphicsPointBatchPrimitive::PutDistanceDisplayConditionPerPoint ( struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DistanceDisplayConditionPerPoint(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsSetHint IAgStkGraphicsPointBatchPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsPointBatchPrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPointBatchPrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsPointBatchPrimitive::Set ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_Set(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetWithColors ( SAFEARRAY * * Positions, SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetWithColors(Positions, Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetWithColorsAndRenderPass ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetWithColorsAndRenderPass(Positions, Colors, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_SetCartographic(CentralBody, Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetCartographicWithColors ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetCartographicWithColors(CentralBody, Positions, Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetCartographicWithColorsAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetCartographicWithColorsAndRenderPass(CentralBody, Positions, Colors, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetPartial ( SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartial(Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetPartialWithIndicesOrder ( SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialWithIndicesOrder(Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetPartialWithColors ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialWithColors(Positions, Colors, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetPartialWithColorsIndicesOrderAndRenderPass ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialWithColorsIndicesOrderAndRenderPass(Positions, Colors, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetPartialCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographic(CentralBody, Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetPartialCartographicWithIndicesOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithIndicesOrder(CentralBody, Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetPartialCartographicWithColors ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographicWithColors(CentralBody, Positions, Colors, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPointBatchPrimitive::SetPartialCartographicWithColorsIndicesOrderAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithColorsIndicesOrderAndRenderPass(CentralBody, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsPointBatchPrimitive::GetCentralBodyClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentralBodyClipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPointBatchPrimitive::PutCentralBodyClipped ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CentralBodyClipped(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsPointBatchPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsPointBatchPrimitivePtr IAgStkGraphicsPointBatchPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsPointBatchPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPointBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsPointBatchPrimitivePtr IAgStkGraphicsPointBatchPrimitiveFactory::InitializeWithSetHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsPointBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPointBatchPrimitivePtr(_result, false);
}

float IAgStkGraphicsPointBatchPrimitiveFactory::GetMinimumPixelSizeSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumPixelSizeSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsPointBatchPrimitiveFactory::GetMaximumPixelSizeSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumPixelSizeSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsPositionInterpolator wrapper method implementations
//

enum AgEStkGraphicsPolylineType IAgStkGraphicsPositionInterpolator::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsPositionInterpolator::Interpolate ( SAFEARRAY * * Positions ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Interpolate(Positions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsPolylinePrimitive wrapper method implementations
//

float IAgStkGraphicsPolylinePrimitive::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPolylinePrimitive::PutWidth ( float pRetVal ) {
    HRESULT _hr = put_Width(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPolylinePrimitive::GetMinimumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsPolylinePrimitive::GetMaximumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPositionInterpolatorPtr IAgStkGraphicsPolylinePrimitive::GetPositionInterpolator ( ) {
    struct IAgStkGraphicsPositionInterpolator * _result = 0;
    HRESULT _hr = get_PositionInterpolator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPositionInterpolatorPtr(_result, false);
}

enum AgEStkGraphicsPolylineType IAgStkGraphicsPolylinePrimitive::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsSetHint IAgStkGraphicsPolylinePrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsPolylinePrimitive::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPolylinePrimitive::PutDisplayOutline ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayOutline(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsPolylinePrimitive::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPolylinePrimitive::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPolylinePrimitive::GetOutlineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPolylinePrimitive::PutOutlineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPolylinePrimitive::GetOutlineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPolylinePrimitive::PutOutlineWidth ( float pRetVal ) {
    HRESULT _hr = put_OutlineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsPolylinePrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPolylinePrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsPolylinePrimitive::Set ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_Set(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetWithColors ( SAFEARRAY * * Positions, SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetWithColors(Positions, Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetWithColorsAndHint ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetWithColorsAndHint(Positions, Colors, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetWithSurfaceShapesResult ( struct IAgStkGraphicsSurfaceShapesResult * SurfaceShapesResult ) {
    HRESULT _hr = raw_SetWithSurfaceShapesResult(SurfaceShapesResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetWithSurfaceTriangulatorResult ( struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulatorResult ) {
    HRESULT _hr = raw_SetWithSurfaceTriangulatorResult(SurfaceTriangulatorResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetWithSolidTriangulatorResult ( struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult ) {
    HRESULT _hr = raw_SetWithSolidTriangulatorResult(SolidTriangulatorResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_SetCartographic(CentralBody, Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetCartographicWithColors ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetCartographicWithColors(CentralBody, Positions, Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetCartographicWithColorsAndHint ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetCartographicWithColorsAndHint(CentralBody, Positions, Colors, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetSubset ( SAFEARRAY * * Positions, int Index, int Count ) {
    HRESULT _hr = raw_SetSubset(Positions, Index, Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetSubsetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, int Index, int Count ) {
    HRESULT _hr = raw_SetSubsetCartographic(CentralBody, Positions, Index, Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetPartial ( SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartial(Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetPartialWithIndicesOrder ( SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialWithIndicesOrder(Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetPartialWithColors ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialWithColors(Positions, Colors, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetPartialWithColorsIndicesOrderAndRenderPassHint ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialWithColorsIndicesOrderAndRenderPassHint(Positions, Colors, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetPartialCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographic(CentralBody, Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetPartialCartographicWithIndicesOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithIndicesOrder(CentralBody, Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetPartialCartographicWithColors ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographicWithColors(CentralBody, Positions, Colors, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPolylinePrimitive::SetPartialCartographicWithColorsIndicesOrderAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithColorsIndicesOrderAndRenderPass(CentralBody, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsPolylinePrimitive::GetCentralBodyClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentralBodyClipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPolylinePrimitive::PutCentralBodyClipped ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CentralBodyClipped(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsPolylinePrimitiveFactory wrapper method implementations
//

IAgStkGraphicsPolylinePrimitivePtr IAgStkGraphicsPolylinePrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithInterpolatorAndSetHint ( struct IAgStkGraphicsPositionInterpolator * Interpolator, enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithInterpolatorAndSetHint(Interpolator, SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithTypeAndHint ( enum AgEStkGraphicsPolylineType PolylineType, enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithTypeAndHint(PolylineType, SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithInterpolator ( struct IAgStkGraphicsPositionInterpolator * Interpolator ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithInterpolator(Interpolator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithType ( enum AgEStkGraphicsPolylineType PolylineType ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithType(PolylineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

float IAgStkGraphicsPolylinePrimitiveFactory::GetMinimumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsPolylinePrimitiveFactory::GetMaximumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsRasterImageGlobeOverlay wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsRasterImageGlobeOverlay::GetUseTransparentColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsRasterImageGlobeOverlay::PutUseTransparentColor ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseTransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsRasterImageGlobeOverlay::GetTransparentColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsRasterImageGlobeOverlay::PutTransparentColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_TransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsRasterImageGlobeOverlayFactory wrapper method implementations
//

IAgStkGraphicsRasterImageGlobeOverlayPtr IAgStkGraphicsRasterImageGlobeOverlayFactory::InitializeWithString ( _bstr_t Uri, SAFEARRAY * * Extent ) {
    struct IAgStkGraphicsRasterImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, Extent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterImageGlobeOverlayPtr(_result, false);
}

IAgStkGraphicsRasterImageGlobeOverlayPtr IAgStkGraphicsRasterImageGlobeOverlayFactory::InitializeWithColor ( OLE_COLOR Color, SAFEARRAY * * Extent ) {
    struct IAgStkGraphicsRasterImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithColor(Color, Extent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterImageGlobeOverlayPtr(_result, false);
}

IAgStkGraphicsRasterImageGlobeOverlayPtr IAgStkGraphicsRasterImageGlobeOverlayFactory::InitializeWithRaster ( struct IAgStkGraphicsRaster * Raster, SAFEARRAY * * Extent ) {
    struct IAgStkGraphicsRasterImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithRaster(Raster, Extent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterImageGlobeOverlayPtr(_result, false);
}

//
// interface IAgStkGraphicsRhumbLineInterpolator wrapper method implementations
//

_bstr_t IAgStkGraphicsRhumbLineInterpolator::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgStkGraphicsRhumbLineInterpolator::PutCentralBody ( _bstr_t pRetVal ) {
    HRESULT _hr = put_CentralBody(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsRhumbLineInterpolator::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsRhumbLineInterpolator::PutGranularity ( double pRetVal ) {
    HRESULT _hr = put_Granularity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsRhumbLineInterpolatorFactory wrapper method implementations
//

IAgStkGraphicsRhumbLineInterpolatorPtr IAgStkGraphicsRhumbLineInterpolatorFactory::Initialize ( ) {
    struct IAgStkGraphicsRhumbLineInterpolator * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRhumbLineInterpolatorPtr(_result, false);
}

IAgStkGraphicsRhumbLineInterpolatorPtr IAgStkGraphicsRhumbLineInterpolatorFactory::InitializeWithCentralBody ( _bstr_t CentralBody ) {
    struct IAgStkGraphicsRhumbLineInterpolator * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBody(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRhumbLineInterpolatorPtr(_result, false);
}

IAgStkGraphicsRhumbLineInterpolatorPtr IAgStkGraphicsRhumbLineInterpolatorFactory::InitializeWithCentralBodyAndGranularity ( _bstr_t CentralBody, double Granularity ) {
    struct IAgStkGraphicsRhumbLineInterpolator * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBodyAndGranularity(CentralBody, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRhumbLineInterpolatorPtr(_result, false);
}

//
// interface IAgStkGraphicsSceneDisplayCondition wrapper method implementations
//

HRESULT IAgStkGraphicsSceneDisplayCondition::SetDisplayInScene ( struct IAgStkGraphicsScene * Scene, VARIANT_BOOL On ) {
    HRESULT _hr = raw_SetDisplayInScene(Scene, On);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsSceneDisplayCondition::GetDisplayInScene ( struct IAgStkGraphicsScene * Scene ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDisplayInScene(Scene, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsSceneDisplayCondition::DisplayOnlyInScene ( struct IAgStkGraphicsScene * Scene ) {
    HRESULT _hr = raw_DisplayOnlyInScene(Scene);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsSceneDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsSceneDisplayConditionPtr IAgStkGraphicsSceneDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsSceneDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsPrimitiveManager wrapper method implementations
//

int IAgStkGraphicsPrimitiveManager::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsPrimitiveManager::GetPrecisionExponent ( ) {
    int _result = 0;
    HRESULT _hr = get_PrecisionExponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPrimitiveManager::PutPrecisionExponent ( int pRetVal ) {
    HRESULT _hr = put_PrecisionExponent(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsPrimitivesSortOrder IAgStkGraphicsPrimitiveManager::GetTranslucentPrimitivesSortOrder ( ) {
    enum AgEStkGraphicsPrimitivesSortOrder _result;
    HRESULT _hr = get_TranslucentPrimitivesSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPrimitiveManager::PutTranslucentPrimitivesSortOrder ( enum AgEStkGraphicsPrimitivesSortOrder pRetVal ) {
    HRESULT _hr = put_TranslucentPrimitivesSortOrder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsPrimitiveManager::Add ( struct IAgStkGraphicsPrimitive * Primitive ) {
    HRESULT _hr = raw_Add(Primitive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPrimitiveManager::Remove ( struct IAgStkGraphicsPrimitive * Primitive ) {
    HRESULT _hr = raw_Remove(Primitive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsPrimitiveManager::Contains ( struct IAgStkGraphicsPrimitive * Primitive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Primitive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsPrimitiveManager::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr IAgStkGraphicsPrimitiveManager::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAgStkGraphicsScreenOverlayManager wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsScreenOverlayManager::GetBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayCollectionPtr IAgStkGraphicsScreenOverlayManager::GetOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayCollection * _result = 0;
    HRESULT _hr = get_Overlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayCollectionPtr(_result, false);
}

SAFEARRAY * IAgStkGraphicsScreenOverlayManager::GetPadding ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Padding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsScreenOverlayManager::PutPadding ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Padding(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsScreenOverlayManager::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsScreenOverlayManager::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsTexture2DFactory wrapper method implementations
//

IAgStkGraphicsRendererTexture2DPtr IAgStkGraphicsTexture2DFactory::LoadFromStringUri ( _bstr_t Uri ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = raw_LoadFromStringUri(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

IAgStkGraphicsRendererTexture2DPtr IAgStkGraphicsTexture2DFactory::FromRaster ( struct IAgStkGraphicsRaster * Raster ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = raw_FromRaster(Raster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

//
// interface IAgStkGraphicsGlobeOverlaySettings wrapper method implementations
//

int IAgStkGraphicsGlobeOverlaySettings::GetTerrainCacheSize ( ) {
    int _result = 0;
    HRESULT _hr = get_TerrainCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeOverlaySettings::PutTerrainCacheSize ( int pRetVal ) {
    HRESULT _hr = put_TerrainCacheSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgStkGraphicsGlobeOverlaySettings::GetImageryCacheSize ( ) {
    int _result = 0;
    HRESULT _hr = get_ImageryCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeOverlaySettings::PutImageryCacheSize ( int pRetVal ) {
    HRESULT _hr = put_ImageryCacheSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsGlobeOverlaySettings::GetUsePerPixelLighting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePerPixelLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeOverlaySettings::PutUsePerPixelLighting ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UsePerPixelLighting(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsGlobeOverlaySettings::GetPreloadTerrainAndImagery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreloadTerrainAndImagery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsGlobeOverlaySettings::PutPreloadTerrainAndImagery ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PreloadTerrainAndImagery(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsSceneManagerInitializer wrapper method implementations
//

IAgStkGraphicsPrimitiveManagerPtr IAgStkGraphicsSceneManagerInitializer::GetPrimitives ( ) {
    struct IAgStkGraphicsPrimitiveManager * _result = 0;
    HRESULT _hr = get_Primitives(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPrimitiveManagerPtr(_result, false);
}

IAgStkGraphicsScreenOverlayManagerPtr IAgStkGraphicsSceneManagerInitializer::GetScreenOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayManager * _result = 0;
    HRESULT _hr = get_ScreenOverlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayManagerPtr(_result, false);
}

IAgStkGraphicsTexture2DFactoryPtr IAgStkGraphicsSceneManagerInitializer::GetTextures ( ) {
    struct IAgStkGraphicsTexture2DFactory * _result = 0;
    HRESULT _hr = get_Textures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTexture2DFactoryPtr(_result, false);
}

IAgStkGraphicsGlobeOverlaySettingsPtr IAgStkGraphicsSceneManagerInitializer::GetGlobeOverlaySettings ( ) {
    struct IAgStkGraphicsGlobeOverlaySettings * _result = 0;
    HRESULT _hr = get_GlobeOverlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeOverlaySettingsPtr(_result, false);
}

IAgStkGraphicsSceneCollectionPtr IAgStkGraphicsSceneManagerInitializer::GetScenes ( ) {
    struct IAgStkGraphicsSceneCollection * _result = 0;
    HRESULT _hr = get_Scenes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneCollectionPtr(_result, false);
}

HRESULT IAgStkGraphicsSceneManagerInitializer::Render ( ) {
    HRESULT _hr = raw_Render();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsScreenOverlayFactory wrapper method implementations
//

IAgStkGraphicsScreenOverlayPtr IAgStkGraphicsScreenOverlayFactory::Initialize ( double XPixels, double YPixels, double WidthPixels, double HeightPixels ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = raw_Initialize(XPixels, YPixels, WidthPixels, HeightPixels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

IAgStkGraphicsScreenOverlayPtr IAgStkGraphicsScreenOverlayFactory::InitializeWithPosAndSize ( SAFEARRAY * * Position, SAFEARRAY * * Size ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithPosAndSize(Position, Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

//
// interface IAgStkGraphicsSolidPrimitive wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsSolidPrimitive::GetAffectedByLighting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AffectedByLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutAffectedByLighting ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AffectedByLighting(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsSolidPrimitive::GetDisplayFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutDisplayFill ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayFill(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsSolidPrimitive::GetDisplaySilhouette ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplaySilhouette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutDisplaySilhouette ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplaySilhouette(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsSolidPrimitive::GetSilhouetteColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_SilhouetteColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutSilhouetteColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_SilhouetteColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsSolidPrimitive::GetSilhouetteTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_SilhouetteTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutSilhouetteTranslucency ( float pRetVal ) {
    HRESULT _hr = put_SilhouetteTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsSolidPrimitive::GetSilhouetteWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_SilhouetteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutSilhouetteWidth ( float pRetVal ) {
    HRESULT _hr = put_SilhouetteWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsSolidPrimitive::GetMinimumSilhouetteWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumSilhouetteWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsSolidPrimitive::GetMaximumSilhouetteWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumSilhouetteWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsSolidPrimitive::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutDisplayOutline ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayOutline(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsSolidPrimitive::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsSolidPrimitive::GetOutlineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutOutlineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsSolidPrimitive::GetOutlineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutOutlineWidth ( float pRetVal ) {
    HRESULT _hr = put_OutlineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsOutlineAppearance IAgStkGraphicsSolidPrimitive::GetOutlineAppearance ( ) {
    enum AgEStkGraphicsOutlineAppearance _result;
    HRESULT _hr = get_OutlineAppearance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutOutlineAppearance ( enum AgEStkGraphicsOutlineAppearance pRetVal ) {
    HRESULT _hr = put_OutlineAppearance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsSolidPrimitive::GetBackLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutBackLineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BackLineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsSolidPrimitive::GetBackLineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_BackLineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutBackLineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_BackLineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsSolidPrimitive::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr IAgStkGraphicsSolidPrimitive::GetRotation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

void IAgStkGraphicsSolidPrimitive::PutRotation ( struct STKUtil::IAgOrientation * ppRetVal ) {
    HRESULT _hr = put_Rotation(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsSolidPrimitive::GetScale ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutScale ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Scale(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsSolidPrimitive::GetBackLineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BackLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSolidPrimitive::PutBackLineWidth ( float pRetVal ) {
    HRESULT _hr = put_BackLineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsSetHint IAgStkGraphicsSolidPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsSolidPrimitive::SetWithResult ( struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult ) {
    HRESULT _hr = raw_SetWithResult(SolidTriangulatorResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsSolidPrimitive::Set ( SAFEARRAY * * Positions, SAFEARRAY * * Normals, SAFEARRAY * * Indices, SAFEARRAY * * OutlineIndices, enum AgEStkGraphicsWindingOrder WindingOrder, struct IAgStkGraphicsBoundingSphere * BoundingSphere, VARIANT_BOOL Closed ) {
    HRESULT _hr = raw_Set(Positions, Normals, Indices, OutlineIndices, WindingOrder, BoundingSphere, Closed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsSolidPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsSolidPrimitivePtr IAgStkGraphicsSolidPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsSolidPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidPrimitivePtr(_result, false);
}

IAgStkGraphicsSolidPrimitivePtr IAgStkGraphicsSolidPrimitiveFactory::InitializeWithHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsSolidPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidPrimitivePtr(_result, false);
}

float IAgStkGraphicsSolidPrimitiveFactory::GetMinimumSilhouetteWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumSilhouetteWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsSolidPrimitiveFactory::GetMaximumSilhouetteWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumSilhouetteWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsTextureMatrix wrapper method implementations
//

float IAgStkGraphicsTextureMatrix::GetM11 ( ) {
    float _result = 0;
    HRESULT _hr = get_M11(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM12 ( ) {
    float _result = 0;
    HRESULT _hr = get_M12(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM13 ( ) {
    float _result = 0;
    HRESULT _hr = get_M13(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM14 ( ) {
    float _result = 0;
    HRESULT _hr = get_M14(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM21 ( ) {
    float _result = 0;
    HRESULT _hr = get_M21(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM22 ( ) {
    float _result = 0;
    HRESULT _hr = get_M22(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM23 ( ) {
    float _result = 0;
    HRESULT _hr = get_M23(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM24 ( ) {
    float _result = 0;
    HRESULT _hr = get_M24(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM31 ( ) {
    float _result = 0;
    HRESULT _hr = get_M31(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM32 ( ) {
    float _result = 0;
    HRESULT _hr = get_M32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM33 ( ) {
    float _result = 0;
    HRESULT _hr = get_M33(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM34 ( ) {
    float _result = 0;
    HRESULT _hr = get_M34(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM41 ( ) {
    float _result = 0;
    HRESULT _hr = get_M41(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM42 ( ) {
    float _result = 0;
    HRESULT _hr = get_M42(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM43 ( ) {
    float _result = 0;
    HRESULT _hr = get_M43(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsTextureMatrix::GetM44 ( ) {
    float _result = 0;
    HRESULT _hr = get_M44(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsSurfaceMeshPrimitive wrapper method implementations
//

IAgStkGraphicsRendererTexture2DPtr IAgStkGraphicsSurfaceMeshPrimitive::GetTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = get_Texture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

void IAgStkGraphicsSurfaceMeshPrimitive::PutTexture ( struct IAgStkGraphicsRendererTexture2D * ppRetVal ) {
    HRESULT _hr = put_Texture(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsSurfaceMeshPrimitive::GetWireframe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Wireframe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSurfaceMeshPrimitive::PutWireframe ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Wireframe(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsWindingOrder IAgStkGraphicsSurfaceMeshPrimitive::GetTriangleWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_TriangleWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsSetHint IAgStkGraphicsSurfaceMeshPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsSurfaceMeshRenderingMethod IAgStkGraphicsSurfaceMeshPrimitive::GetRenderingMethod ( ) {
    enum AgEStkGraphicsSurfaceMeshRenderingMethod _result;
    HRESULT _hr = get_RenderingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsSurfaceMeshPrimitive::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void IAgStkGraphicsSurfaceMeshPrimitive::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureMatrixPtr IAgStkGraphicsSurfaceMeshPrimitive::GetTextureMatrix ( ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = get_TextureMatrix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

void IAgStkGraphicsSurfaceMeshPrimitive::PutTextureMatrix ( struct IAgStkGraphicsTextureMatrix * ppRetVal ) {
    HRESULT _hr = put_TextureMatrix(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsSurfaceMeshPrimitive::GetTransparentTextureBorder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransparentTextureBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsSurfaceMeshPrimitive::PutTransparentTextureBorder ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_TransparentTextureBorder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsSurfaceMeshPrimitive::Set ( struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator ) {
    HRESULT _hr = raw_Set(SurfaceTriangulator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsSurfaceMeshPrimitive::SetWithoutTexturing ( struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator ) {
    HRESULT _hr = raw_SetWithoutTexturing(SurfaceTriangulator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsSurfaceMeshPrimitive::Supported ( enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Supported(RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsSurfaceMeshPrimitive::SupportedWithDefaultRenderingMethod ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SupportedWithDefaultRenderingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsSurfaceMeshPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsSurfaceMeshPrimitivePtr IAgStkGraphicsSurfaceMeshPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsSurfaceMeshPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceMeshPrimitivePtr(_result, false);
}

IAgStkGraphicsSurfaceMeshPrimitivePtr IAgStkGraphicsSurfaceMeshPrimitiveFactory::InitializeWithSetHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsSurfaceMeshPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceMeshPrimitivePtr(_result, false);
}

IAgStkGraphicsSurfaceMeshPrimitivePtr IAgStkGraphicsSurfaceMeshPrimitiveFactory::InitializeWithSetHintAndRenderingMethod ( enum AgEStkGraphicsSetHint SetHint, enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod ) {
    struct IAgStkGraphicsSurfaceMeshPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHintAndRenderingMethod(SetHint, RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceMeshPrimitivePtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsSurfaceMeshPrimitiveFactory::Supported ( enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Supported(RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsSurfaceMeshPrimitiveFactory::SupportedWithDefaultRenderingMethod ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SupportedWithDefaultRenderingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsTerrainOverlayInitializer wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsTerrainOverlayInitializer::GetSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsTextBatchPrimitiveOptionalParameters wrapper method implementations
//

enum AgEStkGraphicsOrigin IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetOrigin ( ) {
    enum AgEStkGraphicsOrigin _result;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutOrigin ( enum AgEStkGraphicsOrigin pRetVal ) {
    HRESULT _hr = put_Origin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetEyeOffset ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_EyeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutEyeOffset ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_EyeOffset(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetPixelOffset ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PixelOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutPixelOffset ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_PixelOffset(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetMaximumStringLength ( ) {
    int _result = 0;
    HRESULT _hr = get_MaximumStringLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutMaximumStringLength ( int pRetVal ) {
    HRESULT _hr = put_MaximumStringLength(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsTextBatchPrimitiveOptionalParameters::SetOrigins ( SAFEARRAY * * Origins ) {
    HRESULT _hr = raw_SetOrigins(Origins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitiveOptionalParameters::SetEyeOffsets ( SAFEARRAY * * EyeOffsets ) {
    HRESULT _hr = raw_SetEyeOffsets(EyeOffsets);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitiveOptionalParameters::SetPixelOffsets ( SAFEARRAY * * PixelOffsets ) {
    HRESULT _hr = raw_SetPixelOffsets(PixelOffsets);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitiveOptionalParameters::SetColors ( SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetColors(Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetScreenSpaceRendering ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScreenSpaceRendering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutScreenSpaceRendering ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ScreenSpaceRendering(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsTextBatchPrimitive wrapper method implementations
//

enum AgEStkGraphicsSetHint IAgStkGraphicsTextBatchPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IAgStkGraphicsTextBatchPrimitive::GetBoundingSphereScale ( ) {
    double _result = 0;
    HRESULT _hr = get_BoundingSphereScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitive::PutBoundingSphereScale ( double pRetVal ) {
    HRESULT _hr = put_BoundingSphereScale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGraphicsFontPtr IAgStkGraphicsTextBatchPrimitive::GetFont ( ) {
    struct IAgStkGraphicsGraphicsFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontPtr(_result, false);
}

OLE_COLOR IAgStkGraphicsTextBatchPrimitive::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitive::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsTextBatchPrimitive::GetOutlineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitive::PutOutlineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsTextBatchPrimitive::GetAlignToPixel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlignToPixel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitive::PutAlignToPixel ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AlignToPixel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDistanceDisplayConditionPtr IAgStkGraphicsTextBatchPrimitive::GetDistanceDisplayConditionPerString ( ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = get_DistanceDisplayConditionPerString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

void IAgStkGraphicsTextBatchPrimitive::PutDistanceDisplayConditionPerString ( struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DistanceDisplayConditionPerString(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsTextBatchPrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextBatchPrimitive::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void IAgStkGraphicsTextBatchPrimitive::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsTextBatchPrimitive::Set ( SAFEARRAY * * Positions, SAFEARRAY * * Text ) {
    HRESULT _hr = raw_Set(Positions, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetWithOptionalParameters ( SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetWithOptionalParameters(Positions, Text, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetWithOptionalParametersAndRenderPass ( SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetWithOptionalParametersAndRenderPass(Positions, Text, OptionalParameters, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text ) {
    HRESULT _hr = raw_SetCartographic(CentralBody, Positions, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetCartographicWithOptionalParameters ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetCartographicWithOptionalParameters(CentralBody, Positions, Text, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetCartographicWithOptionalParametersAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetCartographicWithOptionalParametersAndRenderPass(CentralBody, Positions, Text, OptionalParameters, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetPartial ( SAFEARRAY * * Positions, SAFEARRAY * * Text, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartial(Positions, Text, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetPartialWithIndicesOrder ( SAFEARRAY * * Positions, SAFEARRAY * * Text, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialWithIndicesOrder(Positions, Text, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetPartialWithOptionalParameters ( SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialWithOptionalParameters(Positions, Text, OptionalParameters, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetPartialWithOptionalParametersIndicesOrderAndRenderPass ( SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialWithOptionalParametersIndicesOrderAndRenderPass(Positions, Text, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetPartialCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographic(CentralBody, Positions, Text, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetPartialCartographicWithIndicesOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithIndicesOrder(CentralBody, Positions, Text, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetPartialCartographicWithOptionalParameters ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographicWithOptionalParameters(CentralBody, Positions, Text, OptionalParameters, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTextBatchPrimitive::SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(CentralBody, Positions, Text, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsTextBatchPrimitive::GetRenderInScreenSpace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RenderInScreenSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextBatchPrimitive::PutRenderInScreenSpace ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_RenderInScreenSpace(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsTextBatchPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsTextBatchPrimitivePtr IAgStkGraphicsTextBatchPrimitiveFactory::InitializeWithGraphicsFont ( struct IAgStkGraphicsGraphicsFont * Font ) {
    struct IAgStkGraphicsTextBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithGraphicsFont(Font, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsTextBatchPrimitivePtr IAgStkGraphicsTextBatchPrimitiveFactory::InitializeWithGraphicsFontAndSetHint ( struct IAgStkGraphicsGraphicsFont * Font, enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsTextBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithGraphicsFontAndSetHint(Font, SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsTextBatchPrimitivePtr IAgStkGraphicsTextBatchPrimitiveFactory::InitializeWithGraphicsFontAndSetHint2d ( struct IAgStkGraphicsGraphicsFont * Font, enum AgEStkGraphicsSetHint SetHint, VARIANT_BOOL RenderInScreenSpace ) {
    struct IAgStkGraphicsTextBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithGraphicsFontAndSetHint2d(Font, SetHint, RenderInScreenSpace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitivePtr(_result, false);
}

//
// interface IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory wrapper method implementations
//

IAgStkGraphicsTextBatchPrimitiveOptionalParametersPtr IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory::Initialize ( ) {
    struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitiveOptionalParametersPtr(_result, false);
}

//
// interface IAgStkGraphicsTextureMatrixFactory wrapper method implementations
//

IAgStkGraphicsTextureMatrixPtr IAgStkGraphicsTextureMatrixFactory::Initialize ( ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

IAgStkGraphicsTextureMatrixPtr IAgStkGraphicsTextureMatrixFactory::InitializeByValues ( float M11, float M12, float M13, float M14, float M21, float M22, float M23, float M24, float M31, float M32, float M33, float M34, float M41, float M42, float M43, float M44 ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = raw_InitializeByValues(M11, M12, M13, M14, M21, M22, M23, M24, M31, M32, M33, M34, M41, M42, M43, M44, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

IAgStkGraphicsTextureMatrixPtr IAgStkGraphicsTextureMatrixFactory::InitializeWithAffineTransform ( SAFEARRAY * * Matrix ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = raw_InitializeWithAffineTransform(Matrix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

IAgStkGraphicsTextureMatrixPtr IAgStkGraphicsTextureMatrixFactory::InitializeWithRectangles ( SAFEARRAY * * Corner0, SAFEARRAY * * Corner1, SAFEARRAY * * Corner2, SAFEARRAY * * Corner3 ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = raw_InitializeWithRectangles(Corner0, Corner1, Corner2, Corner3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

//
// interface IAgStkGraphicsTextureScreenOverlay wrapper method implementations
//

IAgStkGraphicsRendererTexture2DPtr IAgStkGraphicsTextureScreenOverlay::GetTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = get_Texture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

void IAgStkGraphicsTextureScreenOverlay::PutTexture ( struct IAgStkGraphicsRendererTexture2D * ppRetVal ) {
    HRESULT _hr = put_Texture(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTextureScreenOverlay::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void IAgStkGraphicsTextureScreenOverlay::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsMaintainAspectRatio IAgStkGraphicsTextureScreenOverlay::GetMaintainAspectRatio ( ) {
    enum AgEStkGraphicsMaintainAspectRatio _result;
    HRESULT _hr = get_MaintainAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextureScreenOverlay::PutMaintainAspectRatio ( enum AgEStkGraphicsMaintainAspectRatio pRetVal ) {
    HRESULT _hr = put_MaintainAspectRatio(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsTextureScreenOverlayFactory wrapper method implementations
//

IAgStkGraphicsTextureScreenOverlayPtr IAgStkGraphicsTextureScreenOverlayFactory::Initialize ( ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayPtr IAgStkGraphicsTextureScreenOverlayFactory::InitializeWithXYWidthHeight ( double XPixels, double YPixels, double WidthPixels, double HeightPixels ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithXYWidthHeight(XPixels, YPixels, WidthPixels, HeightPixels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayPtr IAgStkGraphicsTextureScreenOverlayFactory::InitializeWithPositionSize ( SAFEARRAY * * Position, SAFEARRAY * * Size ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithPositionSize(Position, Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayPtr IAgStkGraphicsTextureScreenOverlayFactory::InitializeWithXYTexture ( double XPixels, double YPixels, struct IAgStkGraphicsRendererTexture2D * Texture ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithXYTexture(XPixels, YPixels, Texture, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayPtr IAgStkGraphicsTextureScreenOverlayFactory::InitializeWithPositionTexture ( SAFEARRAY * * Position, struct IAgStkGraphicsRendererTexture2D * Texture ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithPositionTexture(Position, Texture, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

//
// interface IAgStkGraphicsTimeIntervalDisplayCondition wrapper method implementations
//

STKUtil::IAgDatePtr IAgStkGraphicsTimeIntervalDisplayCondition::GetMinimumTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_MinimumTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

void IAgStkGraphicsTimeIntervalDisplayCondition::PutMinimumTime ( struct STKUtil::IAgDate * ppRetVal ) {
    HRESULT _hr = put_MinimumTime(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDatePtr IAgStkGraphicsTimeIntervalDisplayCondition::GetMaximumTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_MaximumTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

void IAgStkGraphicsTimeIntervalDisplayCondition::PutMaximumTime ( struct STKUtil::IAgDate * ppRetVal ) {
    HRESULT _hr = put_MaximumTime(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsTimeIntervalDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsTimeIntervalDisplayConditionPtr IAgStkGraphicsTimeIntervalDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsTimeIntervalDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTimeIntervalDisplayConditionPtr(_result, false);
}

IAgStkGraphicsTimeIntervalDisplayConditionPtr IAgStkGraphicsTimeIntervalDisplayConditionFactory::InitializeWithTimes ( struct STKUtil::IAgDate * MinimumTime, struct STKUtil::IAgDate * MaximumTime ) {
    struct IAgStkGraphicsTimeIntervalDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithTimes(MinimumTime, MaximumTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTimeIntervalDisplayConditionPtr(_result, false);
}

IAgStkGraphicsTimeIntervalDisplayConditionPtr IAgStkGraphicsTimeIntervalDisplayConditionFactory::InitializeWithTimeInterval ( SAFEARRAY * * TimeInterval ) {
    struct IAgStkGraphicsTimeIntervalDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithTimeInterval(TimeInterval, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTimeIntervalDisplayConditionPtr(_result, false);
}

//
// interface IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters wrapper method implementations
//

HRESULT IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters::SetTextureCoordinates ( SAFEARRAY * * TextureCoordinates ) {
    HRESULT _hr = raw_SetTextureCoordinates(TextureCoordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters::SetPerVertexColors ( SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetPerVertexColors(Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsTriangulatorResult wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsTriangulatorResult::GetPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsTriangulatorResult::GetNormals ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Normals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsTriangulatorResult::GetIndices ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Indices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder IAgStkGraphicsTriangulatorResult::GetTriangleWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_TriangleWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsBoundingSpherePtr IAgStkGraphicsTriangulatorResult::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

//
// interface IAgStkGraphicsTriangleMeshPrimitive wrapper method implementations
//

VARIANT_BOOL IAgStkGraphicsTriangleMeshPrimitive::GetWireframe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Wireframe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTriangleMeshPrimitive::PutWireframe ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Wireframe(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsTriangleMeshPrimitive::GetRenderBackThenFrontFaces ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RenderBackThenFrontFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTriangleMeshPrimitive::PutRenderBackThenFrontFaces ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_RenderBackThenFrontFaces(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsTriangleMeshPrimitive::GetLighting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTriangleMeshPrimitive::PutLighting ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Lighting(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsWindingOrder IAgStkGraphicsTriangleMeshPrimitive::GetTriangleWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_TriangleWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTriangleMeshPrimitive::PutTriangleWindingOrder ( enum AgEStkGraphicsWindingOrder pRetVal ) {
    HRESULT _hr = put_TriangleWindingOrder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsCullFace IAgStkGraphicsTriangleMeshPrimitive::GetCullFace ( ) {
    enum AgEStkGraphicsCullFace _result;
    HRESULT _hr = get_CullFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTriangleMeshPrimitive::PutCullFace ( enum AgEStkGraphicsCullFace pRetVal ) {
    HRESULT _hr = put_CullFace(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsRendererShadeModel IAgStkGraphicsTriangleMeshPrimitive::GetShadeModel ( ) {
    enum AgEStkGraphicsRendererShadeModel _result;
    HRESULT _hr = get_ShadeModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTriangleMeshPrimitive::PutShadeModel ( enum AgEStkGraphicsRendererShadeModel pRetVal ) {
    HRESULT _hr = put_ShadeModel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsRendererTexture2DPtr IAgStkGraphicsTriangleMeshPrimitive::GetTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = get_Texture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

void IAgStkGraphicsTriangleMeshPrimitive::PutTexture ( struct IAgStkGraphicsRendererTexture2D * ppRetVal ) {
    HRESULT _hr = put_Texture(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureFilter2DPtr IAgStkGraphicsTriangleMeshPrimitive::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void IAgStkGraphicsTriangleMeshPrimitive::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsSetHint IAgStkGraphicsTriangleMeshPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsTriangleMeshPrimitive::Set ( SAFEARRAY * * Positions, SAFEARRAY * * Normals, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_Set(Positions, Normals, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTriangleMeshPrimitive::SetWithOptionalParameters ( SAFEARRAY * * Positions, SAFEARRAY * * Normals, SAFEARRAY * * Indices, struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetWithOptionalParameters(Positions, Normals, Indices, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsTriangleMeshPrimitive::SetTriangulator ( struct IAgStkGraphicsTriangulatorResult * Triangulator ) {
    HRESULT _hr = raw_SetTriangulator(Triangulator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IAgStkGraphicsTriangleMeshPrimitive::GetCentralBodyClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentralBodyClipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTriangleMeshPrimitive::PutCentralBodyClipped ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CentralBodyClipped(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsTriangleMeshPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsTriangleMeshPrimitivePtr IAgStkGraphicsTriangleMeshPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsTriangleMeshPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitivePtr(_result, false);
}

IAgStkGraphicsTriangleMeshPrimitivePtr IAgStkGraphicsTriangleMeshPrimitiveFactory::InitializeWithSetHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsTriangleMeshPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitivePtr(_result, false);
}

//
// interface IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory wrapper method implementations
//

IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersPtr IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory::Initialize ( ) {
    struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersPtr(_result, false);
}

//
// interface IAgStkGraphicsTextOverlay wrapper method implementations
//

_bstr_t IAgStkGraphicsTextOverlay::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IAgStkGraphicsTextOverlay::PutText ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Text(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsTextOverlay::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsTextOverlay::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGraphicsFontPtr IAgStkGraphicsTextOverlay::GetFont ( ) {
    struct IAgStkGraphicsGraphicsFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontPtr(_result, false);
}

void IAgStkGraphicsTextOverlay::PutFont ( struct IAgStkGraphicsGraphicsFont * ppRetVal ) {
    HRESULT _hr = put_Font(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsTextOverlayFactory wrapper method implementations
//

IAgStkGraphicsTextOverlayPtr IAgStkGraphicsTextOverlayFactory::Initialize ( struct IAgStkGraphicsGraphicsFont * Font ) {
    struct IAgStkGraphicsTextOverlay * _result = 0;
    HRESULT _hr = raw_Initialize(Font, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayPtr(_result, false);
}

IAgStkGraphicsTextOverlayPtr IAgStkGraphicsTextOverlayFactory::InitializeWithXYWidthHeight ( struct IAgStkGraphicsGraphicsFont * Font, double XPixels, double YPixels, double WidthPixels, double HeightPixels ) {
    struct IAgStkGraphicsTextOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithXYWidthHeight(Font, XPixels, YPixels, WidthPixels, HeightPixels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayPtr(_result, false);
}

IAgStkGraphicsTextOverlayPtr IAgStkGraphicsTextOverlayFactory::InitializeWithPositionSize ( struct IAgStkGraphicsGraphicsFont * Font, SAFEARRAY * * Position, SAFEARRAY * * Size ) {
    struct IAgStkGraphicsTextOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithPositionSize(Font, Position, Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayPtr(_result, false);
}

IAgStkGraphicsTextOverlayPtr IAgStkGraphicsTextOverlayFactory::InitializeWithWidthHeightUnits ( struct IAgStkGraphicsGraphicsFont * Font, double WidthValue, enum AgEStkGraphicsScreenOverlayUnit WidthUnit, double HeightValue, enum AgEStkGraphicsScreenOverlayUnit HeightUnit ) {
    struct IAgStkGraphicsTextOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithWidthHeightUnits(Font, WidthValue, WidthUnit, HeightValue, HeightUnit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsExtrudedPolylineTriangulatorResult wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetNormals ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Normals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetIndices ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Indices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder _IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetTriangleWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_TriangleWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

SAFEARRAY * _IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetTopBoundaryPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TopBoundaryPositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetBottomBoundaryPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_BottomBoundaryPositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder _IAgStkGraphicsExtrudedPolylineTriangulatorResult::GetBoundaryPositionsWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_BoundaryPositionsWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsSolidTriangulatorResult wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsSolidTriangulatorResult::GetPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsSolidTriangulatorResult::GetNormals ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Normals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsSolidTriangulatorResult::GetIndices ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Indices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder _IAgStkGraphicsSolidTriangulatorResult::GetTriangleWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_TriangleWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsSolidTriangulatorResult::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

SAFEARRAY * _IAgStkGraphicsSolidTriangulatorResult::GetOutlineIndices ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_OutlineIndices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsSolidTriangulatorResult::GetOutlinePositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_OutlinePositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsPolylineType _IAgStkGraphicsSolidTriangulatorResult::GetOutlinePolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_OutlinePolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsSolidTriangulatorResult::GetClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsSurfaceShapesResult wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsSurfaceShapesResult::GetPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder _IAgStkGraphicsSurfaceShapesResult::GetPositionsWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_PositionsWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsPolylineType _IAgStkGraphicsSurfaceShapesResult::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsSurfaceTriangulatorResult wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsSurfaceTriangulatorResult::GetPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsSurfaceTriangulatorResult::GetNormals ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Normals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsSurfaceTriangulatorResult::GetIndices ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Indices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder _IAgStkGraphicsSurfaceTriangulatorResult::GetTriangleWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_TriangleWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsSurfaceTriangulatorResult::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

double _IAgStkGraphicsSurfaceTriangulatorResult::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsSurfaceTriangulatorResult::GetBoundaryIndices ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_BoundaryIndices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsSurfaceTriangulatorResult::GetBoundaryPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_BoundaryPositions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder _IAgStkGraphicsSurfaceTriangulatorResult::GetBoundaryPositionsWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_BoundaryPositionsWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsPolylineType _IAgStkGraphicsSurfaceTriangulatorResult::GetBoundaryPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_BoundaryPolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsTriangulatorResult wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsTriangulatorResult::GetPositions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Positions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsTriangulatorResult::GetNormals ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Normals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsTriangulatorResult::GetIndices ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Indices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsWindingOrder _IAgStkGraphicsTriangulatorResult::GetTriangleWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_TriangleWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsTriangulatorResult::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

//
// interface _IAgStkGraphicsAGIProcessedImageGlobeOverlay wrapper method implementations
//

float _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIProcessedImageGlobeOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetUseAltitudeBasedTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAltitudeBasedTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIProcessedImageGlobeOverlay::PutUseAltitudeBasedTranslucency ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAltitudeBasedTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIProcessedImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIProcessedImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIProcessedImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIProcessedImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsAGIProcessedImageGlobeOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsAGIProcessedImageGlobeOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsAGIProcessedTerrainOverlay wrapper method implementations
//

double _IAgStkGraphicsAGIProcessedTerrainOverlay::GetAltitudeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIProcessedTerrainOverlay::PutAltitudeOffset ( double pRetVal ) {
    HRESULT _hr = put_AltitudeOffset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsAGIProcessedTerrainOverlay::GetAltitudeScale ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIProcessedTerrainOverlay::PutAltitudeScale ( double pRetVal ) {
    HRESULT _hr = put_AltitudeScale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsAGIProcessedTerrainOverlay::GetSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsAGIProcessedTerrainOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsAGIProcessedTerrainOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsAGIProcessedTerrainOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsAGIProcessedTerrainOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsAGIProcessedTerrainOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsAGIProcessedTerrainOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsAGIProcessedTerrainOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsAGIRoamImageGlobeOverlay wrapper method implementations
//

float _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIRoamImageGlobeOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetUseAltitudeBasedTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAltitudeBasedTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIRoamImageGlobeOverlay::PutUseAltitudeBasedTranslucency ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAltitudeBasedTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIRoamImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIRoamImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIRoamImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAGIRoamImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsAGIRoamImageGlobeOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsAGIRoamImageGlobeOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsCameraSnapshot wrapper method implementations
//

HRESULT _IAgStkGraphicsCameraSnapshot::SaveToFile ( _bstr_t Filename, enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat ) {
    HRESULT _hr = raw_SaveToFile(Filename, CameraSnapshotFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCameraSnapshot::SaveToFileWithWidthAndDPI ( _bstr_t Filename, enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFormat, double WidthInInches, double DotsPerInch ) {
    HRESULT _hr = raw_SaveToFileWithWidthAndDPI(Filename, CameraSnapshotFormat, WidthInInches, DotsPerInch);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCameraSnapshot::SaveToClipboard ( ) {
    HRESULT _hr = raw_SaveToClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsCameraSnapshot::SaveToRaster ( ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_SaveToRaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRendererTexture2DPtr _IAgStkGraphicsCameraSnapshot::SaveToTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = raw_SaveToTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

//
// interface _IAgStkGraphicsCameraVideoRecording wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsCameraVideoRecording::GetIsRecording ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsCameraVideoRecording::StartRecording ( _bstr_t WmvFilename, int VideoBitRate, int VideoFrameRate ) {
    HRESULT _hr = raw_StartRecording(WmvFilename, VideoBitRate, VideoFrameRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCameraVideoRecording::StartRecordingFrameStack ( _bstr_t FileDirectory, _bstr_t FilePrefix, enum AgEStkGraphicsCameraSnapshotFileFormat CameraSnapshotFileFormat, int StartingFrameNumber, int NumberOfFrameDigits ) {
    HRESULT _hr = raw_StartRecordingFrameStack(FileDirectory, FilePrefix, CameraSnapshotFileFormat, StartingFrameNumber, NumberOfFrameDigits);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCameraVideoRecording::StopRecording ( ) {
    HRESULT _hr = raw_StopRecording();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsCentralBodyGraphicsIndexer wrapper method implementations
//

IAgStkGraphicsCentralBodyGraphicsPtr _IAgStkGraphicsCentralBodyGraphicsIndexer::GetEarth ( ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = get_Earth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

IAgStkGraphicsCentralBodyGraphicsPtr _IAgStkGraphicsCentralBodyGraphicsIndexer::GetMoon ( ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = get_Moon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

IAgStkGraphicsCentralBodyGraphicsPtr _IAgStkGraphicsCentralBodyGraphicsIndexer::GetSun ( ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = get_Sun(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

IAgStkGraphicsCentralBodyGraphicsPtr _IAgStkGraphicsCentralBodyGraphicsIndexer::GetItem ( _bstr_t CentralBody ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = get_Item(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

IAgStkGraphicsCentralBodyGraphicsPtr _IAgStkGraphicsCentralBodyGraphicsIndexer::GetByName ( _bstr_t Name ) {
    struct IAgStkGraphicsCentralBodyGraphics * _result = 0;
    HRESULT _hr = raw_GetByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsPtr(_result, false);
}

//
// interface _IAgStkGraphicsCustomImageGlobeOverlay wrapper method implementations
//

float _IAgStkGraphicsCustomImageGlobeOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCustomImageGlobeOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCustomImageGlobeOverlay::GetUseAltitudeBasedTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAltitudeBasedTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCustomImageGlobeOverlay::PutUseAltitudeBasedTranslucency ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAltitudeBasedTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsCustomImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCustomImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsCustomImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCustomImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCustomImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCustomImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCustomImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCustomImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCustomImageGlobeOverlay::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsCustomImageGlobeOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsCustomImageGlobeOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsCustomImageGlobeOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsCustomImageGlobeOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsCustomImageGlobeOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsCustomImageGlobeOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsCustomImageGlobeOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCustomImageGlobeOverlay::GetIsTranslucent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTranslucent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsCustomImageGlobeOverlay::GetMaximumMetersPerPixel ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumMetersPerPixel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMapProjection _IAgStkGraphicsCustomImageGlobeOverlay::GetProjection ( ) {
    enum AgEStkGraphicsMapProjection _result;
    HRESULT _hr = get_Projection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsCustomImageGlobeOverlay::StartUp ( struct IAgStkGraphicsScene * Scene ) {
    HRESULT _hr = raw_StartUp(Scene);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCustomImageGlobeOverlay::ShutDown ( struct IAgStkGraphicsScene * Scene ) {
    HRESULT _hr = raw_ShutDown(Scene);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCustomImageGlobeOverlay::ClearCache ( ) {
    HRESULT _hr = raw_ClearCache();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCustomImageGlobeOverlay::Reload ( ) {
    HRESULT _hr = raw_Reload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsCustomImageGlobeOverlay::Read ( SAFEARRAY * * Extent, const _variant_t & UserTileData, IPictureDisp * Image ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Read(Extent, UserTileData, Image, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsCustomImageGlobeOverlayPluginActivator wrapper method implementations
//

IAgStkGraphicsCustomImageGlobeOverlayPluginProxyPtr _IAgStkGraphicsCustomImageGlobeOverlayPluginActivator::CreateFromDisplayName ( _bstr_t DisplayName ) {
    struct IAgStkGraphicsCustomImageGlobeOverlayPluginProxy * _result = 0;
    HRESULT _hr = raw_CreateFromDisplayName(DisplayName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCustomImageGlobeOverlayPluginProxyPtr(_result, false);
}

SAFEARRAY * _IAgStkGraphicsCustomImageGlobeOverlayPluginActivator::GetAvailableDisplayNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetAvailableDisplayNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsCustomImageGlobeOverlayPluginProxy wrapper method implementations
//

IAgStkGraphicsCustomImageGlobeOverlayPtr _IAgStkGraphicsCustomImageGlobeOverlayPluginProxy::GetCustomImageGlobeOverlay ( ) {
    struct IAgStkGraphicsCustomImageGlobeOverlay * _result = 0;
    HRESULT _hr = get_CustomImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCustomImageGlobeOverlayPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsCustomImageGlobeOverlayPluginProxy::GetIsCustomImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCustomImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr _IAgStkGraphicsCustomImageGlobeOverlayPluginProxy::GetRealPluginObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RealPluginObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgStkGraphicsGeospatialImageGlobeOverlay wrapper method implementations
//

float _IAgStkGraphicsGeospatialImageGlobeOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGeospatialImageGlobeOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsGeospatialImageGlobeOverlay::GetUseAltitudeBasedTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAltitudeBasedTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGeospatialImageGlobeOverlay::PutUseAltitudeBasedTranslucency ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAltitudeBasedTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsGeospatialImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGeospatialImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsGeospatialImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGeospatialImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsGeospatialImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGeospatialImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsGeospatialImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGeospatialImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsGeospatialImageGlobeOverlay::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsGeospatialImageGlobeOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsGeospatialImageGlobeOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsGeospatialImageGlobeOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsGeospatialImageGlobeOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsGeospatialImageGlobeOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsGeospatialImageGlobeOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsGeospatialImageGlobeOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsGeospatialImageGlobeOverlay::GetUseTransparentColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGeospatialImageGlobeOverlay::PutUseTransparentColor ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseTransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsGeospatialImageGlobeOverlay::GetTransparentColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGeospatialImageGlobeOverlay::PutTransparentColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_TransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsGlobeOverlay wrapper method implementations
//

_bstr_t _IAgStkGraphicsGlobeOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsGlobeOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsGlobeOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsGlobeOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsGlobeOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsGlobeOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsGlobeOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsGlobeOverlaySettings wrapper method implementations
//

int _IAgStkGraphicsGlobeOverlaySettings::GetTerrainCacheSize ( ) {
    int _result = 0;
    HRESULT _hr = get_TerrainCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeOverlaySettings::PutTerrainCacheSize ( int pRetVal ) {
    HRESULT _hr = put_TerrainCacheSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsGlobeOverlaySettings::GetImageryCacheSize ( ) {
    int _result = 0;
    HRESULT _hr = get_ImageryCacheSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeOverlaySettings::PutImageryCacheSize ( int pRetVal ) {
    HRESULT _hr = put_ImageryCacheSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsGlobeOverlaySettings::GetUsePerPixelLighting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePerPixelLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeOverlaySettings::PutUsePerPixelLighting ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UsePerPixelLighting(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsGlobeOverlaySettings::GetPreloadTerrainAndImagery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PreloadTerrainAndImagery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeOverlaySettings::PutPreloadTerrainAndImagery ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PreloadTerrainAndImagery(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsLighting wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsLighting::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsLighting::PutEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Enabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsLighting::GetAmbientIntensity ( ) {
    float _result = 0;
    HRESULT _hr = get_AmbientIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsLighting::PutAmbientIntensity ( float pRetVal ) {
    HRESULT _hr = put_AmbientIntensity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsLighting::GetDiffuseIntensity ( ) {
    float _result = 0;
    HRESULT _hr = get_DiffuseIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsLighting::PutDiffuseIntensity ( float pRetVal ) {
    HRESULT _hr = put_DiffuseIntensity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsLighting::GetNightLightsIntensity ( ) {
    float _result = 0;
    HRESULT _hr = get_NightLightsIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsLighting::PutNightLightsIntensity ( float pRetVal ) {
    HRESULT _hr = put_NightLightsIntensity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsProjectedRasterOverlay wrapper method implementations
//

float _IAgStkGraphicsProjectedRasterOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsProjectedRasterOverlay::GetUseAltitudeBasedTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAltitudeBasedTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutUseAltitudeBasedTranslucency ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAltitudeBasedTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsProjectedRasterOverlay::GetAltitudeBasedTranslucencyLowerTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutAltitudeBasedTranslucencyLowerTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsProjectedRasterOverlay::GetAltitudeBasedTranslucencyUpperTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutAltitudeBasedTranslucencyUpperTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjectedRasterOverlay::GetAltitudeBasedTranslucencyLowerAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutAltitudeBasedTranslucencyLowerAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjectedRasterOverlay::GetAltitudeBasedTranslucencyUpperAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutAltitudeBasedTranslucencyUpperAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsProjectedRasterOverlay::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsProjectedRasterOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsProjectedRasterOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsProjectedRasterOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsProjectedRasterOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsProjectedRasterOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsProjectedRasterOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsProjectedRasterOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsProjectedRasterOverlay::GetRaster ( ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = get_Raster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

void _IAgStkGraphicsProjectedRasterOverlay::PutRaster ( struct IAgStkGraphicsRaster * ppRetVal ) {
    HRESULT _hr = put_Raster(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsProjectionPtr _IAgStkGraphicsProjectedRasterOverlay::GetProjection ( ) {
    struct IAgStkGraphicsProjection * _result = 0;
    HRESULT _hr = get_Projection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionPtr(_result, false);
}

void _IAgStkGraphicsProjectedRasterOverlay::PutProjection ( struct IAgStkGraphicsProjection * ppRetVal ) {
    HRESULT _hr = put_Projection(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsProjectedRasterOverlay::GetShowShadows ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowShadows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutShowShadows ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowShadows(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsProjectedRasterOverlay::GetShowFrustum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFrustum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutShowFrustum ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowFrustum(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsProjectedRasterOverlay::GetShowFarPlane ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFarPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutShowFarPlane ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowFarPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsProjectedRasterOverlay::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsProjectedRasterOverlay::GetFrustumColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FrustumColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutFrustumColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_FrustumColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsProjectedRasterOverlay::GetFarPlaneColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FarPlaneColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutFarPlaneColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_FarPlaneColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsProjectedRasterOverlay::GetShadowColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ShadowColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutShadowColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_ShadowColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsProjectedRasterOverlay::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutBorderColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BorderColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsProjectedRasterOverlay::GetBorderWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BorderWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutBorderWidth ( float pRetVal ) {
    HRESULT _hr = put_BorderWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsProjectedRasterOverlay::GetFrustumTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_FrustumTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutFrustumTranslucency ( float pRetVal ) {
    HRESULT _hr = put_FrustumTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsProjectedRasterOverlay::GetFarPlaneTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_FarPlaneTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutFarPlaneTranslucency ( float pRetVal ) {
    HRESULT _hr = put_FarPlaneTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsProjectedRasterOverlay::GetShadowTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_ShadowTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutShadowTranslucency ( float pRetVal ) {
    HRESULT _hr = put_ShadowTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsProjectedRasterOverlay::GetBorderTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_BorderTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutBorderTranslucency ( float pRetVal ) {
    HRESULT _hr = put_BorderTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsProjectedRasterOverlay::GetUseTransparentColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutUseTransparentColor ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseTransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsProjectedRasterOverlay::GetTransparentColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectedRasterOverlay::PutTransparentColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_TransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsProjectedRasterOverlay::GetDirections ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Directions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsProjectedRasterOverlay::GetSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsProjection wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsProjection::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjection::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr _IAgStkGraphicsProjection::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

void _IAgStkGraphicsProjection::PutOrientation ( struct STKUtil::IAgOrientation * ppRetVal ) {
    HRESULT _hr = put_Orientation(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjection::GetFieldOfViewHorizontal ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldOfViewHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjection::PutFieldOfViewHorizontal ( double pRetVal ) {
    HRESULT _hr = put_FieldOfViewHorizontal(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjection::GetFieldOfViewVertical ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldOfViewVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjection::PutFieldOfViewVertical ( double pRetVal ) {
    HRESULT _hr = put_FieldOfViewVertical(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjection::GetNearPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_NearPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjection::PutNearPlane ( double pRetVal ) {
    HRESULT _hr = put_NearPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjection::GetFarPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_FarPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjection::PutFarPlane ( double pRetVal ) {
    HRESULT _hr = put_FarPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsProjectionStream wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsProjectionStream::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectionStream::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr _IAgStkGraphicsProjectionStream::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

void _IAgStkGraphicsProjectionStream::PutOrientation ( struct STKUtil::IAgOrientation * ppRetVal ) {
    HRESULT _hr = put_Orientation(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjectionStream::GetFieldOfViewHorizontal ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldOfViewHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectionStream::PutFieldOfViewHorizontal ( double pRetVal ) {
    HRESULT _hr = put_FieldOfViewHorizontal(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjectionStream::GetFieldOfViewVertical ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldOfViewVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectionStream::PutFieldOfViewVertical ( double pRetVal ) {
    HRESULT _hr = put_FieldOfViewVertical(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjectionStream::GetNearPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_NearPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectionStream::PutNearPlane ( double pRetVal ) {
    HRESULT _hr = put_NearPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjectionStream::GetFarPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_FarPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectionStream::PutFarPlane ( double pRetVal ) {
    HRESULT _hr = put_FarPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsProjectionStream::GetUpdateDelta ( ) {
    double _result = 0;
    HRESULT _hr = get_UpdateDelta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsProjectionStream::PutUpdateDelta ( double pRetVal ) {
    HRESULT _hr = put_UpdateDelta(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsProjectionStream::Update ( struct STKUtil::IAgDate * Time, struct STKUtil::IAgDate * NextTime ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(Time, NextTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsSceneGlobeOverlaySettings wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsSceneGlobeOverlaySettings::GetAntiAliasImagery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AntiAliasImagery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSceneGlobeOverlaySettings::PutAntiAliasImagery ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AntiAliasImagery(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsSceneGlobeOverlaySettings::GetTerrainMeshPixelError ( ) {
    double _result = 0;
    HRESULT _hr = get_TerrainMeshPixelError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSceneGlobeOverlaySettings::PutTerrainMeshPixelError ( double pRetVal ) {
    HRESULT _hr = put_TerrainMeshPixelError(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsSceneGlobeOverlaySettings::GetImageryPixelError ( ) {
    double _result = 0;
    HRESULT _hr = get_ImageryPixelError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSceneGlobeOverlaySettings::PutImageryPixelError ( double pRetVal ) {
    HRESULT _hr = put_ImageryPixelError(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSceneGlobeOverlaySettings::GetProjectedRasterModelProjection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProjectedRasterModelProjection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSceneGlobeOverlaySettings::PutProjectedRasterModelProjection ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ProjectedRasterModelProjection(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsScreenOverlayCollectionBase wrapper method implementations
//

int IAgStkGraphicsScreenOverlayCollectionBase::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsScreenOverlayCollectionBase::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayPtr IAgStkGraphicsScreenOverlayCollectionBase::GetItem ( int Index ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

IUnknownPtr IAgStkGraphicsScreenOverlayCollectionBase::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL IAgStkGraphicsScreenOverlayCollectionBase::Contains ( struct IAgStkGraphicsScreenOverlay * Item ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsScreenOverlayCollectionBase::Remove ( struct IAgStkGraphicsScreenOverlay * Item ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IAgStkGraphicsScreenOverlayCollectionBase::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsScreenOverlayCollectionBase::Add ( struct IAgStkGraphicsScreenOverlay * Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsScreenOverlayCollectionBase wrapper method implementations
//

int _IAgStkGraphicsScreenOverlayCollectionBase::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayCollectionBase::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayPtr _IAgStkGraphicsScreenOverlayCollectionBase::GetItem ( int Index ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsScreenOverlayCollectionBase::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayCollectionBase::Contains ( struct IAgStkGraphicsScreenOverlay * Item ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayCollectionBase::Remove ( struct IAgStkGraphicsScreenOverlay * Item ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsScreenOverlayCollectionBase::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsScreenOverlayCollectionBase::Add ( struct IAgStkGraphicsScreenOverlay * Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsTexture2DFactory wrapper method implementations
//

IAgStkGraphicsRendererTexture2DPtr _IAgStkGraphicsTexture2DFactory::LoadFromStringUri ( _bstr_t Uri ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = raw_LoadFromStringUri(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

IAgStkGraphicsRendererTexture2DPtr _IAgStkGraphicsTexture2DFactory::FromRaster ( struct IAgStkGraphicsRaster * Raster ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = raw_FromRaster(Raster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

//
// interface _IAgStkGraphicsAltitudeDisplayCondition wrapper method implementations
//

double _IAgStkGraphicsAltitudeDisplayCondition::GetMinimumAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAltitudeDisplayCondition::PutMinimumAltitude ( double pRetVal ) {
    HRESULT _hr = put_MinimumAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsAltitudeDisplayCondition::GetMaximumAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsAltitudeDisplayCondition::PutMaximumAltitude ( double pRetVal ) {
    HRESULT _hr = put_MaximumAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkGraphicsAltitudeDisplayCondition::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkGraphicsAltitudeDisplayCondition::PutCentralBody ( _bstr_t pRetVal ) {
    HRESULT _hr = put_CentralBody(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsCamera wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsCamera::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsCamera::GetReferencePoint ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ReferencePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutReferencePoint ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_ReferencePoint(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsCamera::GetDirection ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutDirection ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Direction(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsCamera::GetUpVector ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_UpVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutUpVector ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_UpVector(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCamera::GetDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_Distance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutDistance ( double pRetVal ) {
    HRESULT _hr = put_Distance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

AgSTKVgtLib::IAgCrdnAxesPtr _IAgStkGraphicsCamera::GetAxes ( ) {
    struct AgSTKVgtLib::IAgCrdnAxes * _result = 0;
    HRESULT _hr = get_Axes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnAxesPtr(_result, false);
}

void _IAgStkGraphicsCamera::PutAxes ( struct AgSTKVgtLib::IAgCrdnAxes * ppRetVal ) {
    HRESULT _hr = put_Axes(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsConstrainedUpAxis _IAgStkGraphicsCamera::GetConstrainedUpAxis ( ) {
    enum AgEStkGraphicsConstrainedUpAxis _result;
    HRESULT _hr = get_ConstrainedUpAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutConstrainedUpAxis ( enum AgEStkGraphicsConstrainedUpAxis pRetVal ) {
    HRESULT _hr = put_ConstrainedUpAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCamera::GetAllowRotationOverConstrainedUpAxis ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowRotationOverConstrainedUpAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutAllowRotationOverConstrainedUpAxis ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AllowRotationOverConstrainedUpAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCamera::GetLockViewDirection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockViewDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutLockViewDirection ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_LockViewDirection(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCamera::GetFieldOfView ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutFieldOfView ( double pRetVal ) {
    HRESULT _hr = put_FieldOfView(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCamera::GetHorizontalFieldOfView ( ) {
    double _result = 0;
    HRESULT _hr = get_HorizontalFieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsCamera::GetVerticalFieldOfView ( ) {
    double _result = 0;
    HRESULT _hr = get_VerticalFieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsCamera::GetNearPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_NearPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutNearPlane ( double pRetVal ) {
    HRESULT _hr = put_NearPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCamera::GetFarPlane ( ) {
    double _result = 0;
    HRESULT _hr = get_FarPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutFarPlane ( double pRetVal ) {
    HRESULT _hr = put_FarPlane(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCamera::GetFarNearPlaneRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_FarNearPlaneRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCamera::PutFarNearPlaneRatio ( double pRetVal ) {
    HRESULT _hr = put_FarNearPlaneRatio(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCamera::GetDistancePerRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_DistancePerRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsCameraSnapshotPtr _IAgStkGraphicsCamera::GetSnapshot ( ) {
    struct IAgStkGraphicsCameraSnapshot * _result = 0;
    HRESULT _hr = get_Snapshot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCameraSnapshotPtr(_result, false);
}

IAgStkGraphicsCameraVideoRecordingPtr _IAgStkGraphicsCamera::GetVideoRecording ( ) {
    struct IAgStkGraphicsCameraVideoRecording * _result = 0;
    HRESULT _hr = get_VideoRecording(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCameraVideoRecordingPtr(_result, false);
}

double _IAgStkGraphicsCamera::GetPixelSizePerDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_PixelSizePerDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsCamera::GetPositionReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_PositionReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsCamera::GetReferencePointReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferencePointReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

enum AgEStkGraphicsVisibility _IAgStkGraphicsCamera::VisibilityTest ( struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame, struct IAgStkGraphicsBoundingSphere * Sphere ) {
    enum AgEStkGraphicsVisibility _result;
    HRESULT _hr = raw_VisibilityTest(ReferenceFrame, Sphere, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsCamera::CartographicToWindow ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_CartographicToWindow(CentralBody, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsCamera::TryCartographicToWindow ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_TryCartographicToWindow(CentralBody, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsCamera::WindowToCartographic ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_WindowToCartographic(CentralBody, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsCamera::TryWindowToCartographic ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_TryWindowToCartographic(CentralBody, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsCamera::ViewCentralBody ( _bstr_t CentralBody, struct AgSTKVgtLib::IAgCrdnAxes * Axes ) {
    HRESULT _hr = raw_ViewCentralBody(CentralBody, Axes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::ViewExtent ( _bstr_t CentralBody, SAFEARRAY * * Extent ) {
    HRESULT _hr = raw_ViewExtent(CentralBody, Extent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::ViewRectangularExtent ( _bstr_t CentralBody, double West, double South, double East, double North ) {
    HRESULT _hr = raw_ViewRectangularExtent(CentralBody, West, South, East, North);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::ViewWithUpAxis ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, SAFEARRAY * * UpAxis ) {
    HRESULT _hr = raw_ViewWithUpAxis(Axes, CameraPosition, ReferencePoint, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::View ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint ) {
    HRESULT _hr = raw_View(Axes, CameraPosition, ReferencePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::ViewDirectionWithUpAxis ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition, struct AgSTKVgtLib::IAgCrdnVector * Direction, SAFEARRAY * * UpAxis ) {
    HRESULT _hr = raw_ViewDirectionWithUpAxis(Axes, CameraPosition, Direction, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::ViewDirection ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * CameraPosition, struct AgSTKVgtLib::IAgCrdnVector * Direction ) {
    HRESULT _hr = raw_ViewDirection(Axes, CameraPosition, Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::ViewOffsetWithUpAxis ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, SAFEARRAY * * Offset, SAFEARRAY * * UpAxis ) {
    HRESULT _hr = raw_ViewOffsetWithUpAxis(Axes, ReferencePoint, Offset, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::ViewOffset ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, SAFEARRAY * * Offset ) {
    HRESULT _hr = raw_ViewOffset(Axes, ReferencePoint, Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::ViewOffsetDirectionWithUpAxis ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, struct AgSTKVgtLib::IAgCrdnVector * Direction, SAFEARRAY * * UpAxis ) {
    HRESULT _hr = raw_ViewOffsetDirectionWithUpAxis(Axes, ReferencePoint, Direction, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCamera::ViewOffsetDirection ( struct AgSTKVgtLib::IAgCrdnAxes * Axes, struct AgSTKVgtLib::IAgCrdnPoint * ReferencePoint, struct AgSTKVgtLib::IAgCrdnVector * Direction ) {
    HRESULT _hr = raw_ViewOffsetDirection(Axes, ReferencePoint, Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsCentralBodyGraphics wrapper method implementations
//

OLE_COLOR _IAgStkGraphicsCentralBodyGraphics::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCentralBodyGraphics::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsCentralBodyGraphics::GetSpecularColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_SpecularColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCentralBodyGraphics::PutSpecularColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_SpecularColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCentralBodyGraphics::GetShininess ( ) {
    double _result = 0;
    HRESULT _hr = get_Shininess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCentralBodyGraphics::PutShininess ( double pRetVal ) {
    HRESULT _hr = put_Shininess(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCentralBodyGraphics::GetShowImagery ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowImagery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCentralBodyGraphics::PutShowImagery ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowImagery(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCentralBodyGraphics::GetShow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCentralBodyGraphics::PutShow ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Show(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCentralBodyGraphics::GetShowLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCentralBodyGraphics::PutShowLabel ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowLabel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsCentralBodyGraphics::GetAltitudeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCentralBodyGraphics::PutAltitudeOffset ( double pRetVal ) {
    HRESULT _hr = put_AltitudeOffset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGlobeImageOverlayPtr _IAgStkGraphicsCentralBodyGraphics::GetBaseOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_BaseOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

void _IAgStkGraphicsCentralBodyGraphics::PutBaseOverlay ( struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) {
    HRESULT _hr = put_BaseOverlay(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGlobeImageOverlayPtr _IAgStkGraphicsCentralBodyGraphics::GetNightOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_NightOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

void _IAgStkGraphicsCentralBodyGraphics::PutNightOverlay ( struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) {
    HRESULT _hr = put_NightOverlay(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGlobeImageOverlayPtr _IAgStkGraphicsCentralBodyGraphics::GetSpecularOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_SpecularOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

void _IAgStkGraphicsCentralBodyGraphics::PutSpecularOverlay ( struct IAgStkGraphicsGlobeImageOverlay * ppRetVal ) {
    HRESULT _hr = put_SpecularOverlay(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTerrainCollectionPtr _IAgStkGraphicsCentralBodyGraphics::GetTerrain ( ) {
    struct IAgStkGraphicsTerrainCollection * _result = 0;
    HRESULT _hr = get_Terrain(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainCollectionPtr(_result, false);
}

IAgStkGraphicsImageCollectionPtr _IAgStkGraphicsCentralBodyGraphics::GetImagery ( ) {
    struct IAgStkGraphicsImageCollection * _result = 0;
    HRESULT _hr = get_Imagery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsImageCollectionPtr(_result, false);
}

IAgStkGraphicsKmlGraphicsPtr _IAgStkGraphicsCentralBodyGraphics::GetKml ( ) {
    struct IAgStkGraphicsKmlGraphics * _result = 0;
    HRESULT _hr = get_Kml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlGraphicsPtr(_result, false);
}

//
// interface _IAgStkGraphicsCompositeDisplayCondition wrapper method implementations
//

int _IAgStkGraphicsCompositeDisplayCondition::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsCompositeDisplayCondition::GetCapacity ( ) {
    int _result = 0;
    HRESULT _hr = get_Capacity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsBinaryLogicOperation _IAgStkGraphicsCompositeDisplayCondition::GetLogicOperation ( ) {
    enum AgEStkGraphicsBinaryLogicOperation _result;
    HRESULT _hr = get_LogicOperation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCompositeDisplayCondition::PutLogicOperation ( enum AgEStkGraphicsBinaryLogicOperation pRetVal ) {
    HRESULT _hr = put_LogicOperation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsCompositeDisplayCondition::GetItem ( int Index ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsCompositeDisplayCondition::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::Reserve ( int Count ) {
    HRESULT _hr = raw_Reserve(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::AddWithNegate ( struct IAgStkGraphicsDisplayCondition * DisplayCondition, VARIANT_BOOL Negate ) {
    HRESULT _hr = raw_AddWithNegate(DisplayCondition, Negate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::Add ( struct IAgStkGraphicsDisplayCondition * DisplayCondition ) {
    HRESULT _hr = raw_Add(DisplayCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::InsertWithNegate ( int Index, struct IAgStkGraphicsDisplayCondition * DisplayCondition, VARIANT_BOOL Negate ) {
    HRESULT _hr = raw_InsertWithNegate(Index, DisplayCondition, Negate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::Insert ( int Index, struct IAgStkGraphicsDisplayCondition * DisplayCondition ) {
    HRESULT _hr = raw_Insert(Index, DisplayCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::Remove ( struct IAgStkGraphicsDisplayCondition * DisplayCondition ) {
    HRESULT _hr = raw_Remove(DisplayCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::RemoveAt ( int Index ) {
    HRESULT _hr = raw_RemoveAt(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsCompositeDisplayCondition::GetNegate ( struct IAgStkGraphicsDisplayCondition * DisplayCondition ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNegate(DisplayCondition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::SetNegate ( struct IAgStkGraphicsDisplayCondition * DisplayCondition, VARIANT_BOOL Negate ) {
    HRESULT _hr = raw_SetNegate(DisplayCondition, Negate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsCompositeDisplayCondition::GetNegateAt ( int Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetNegateAt(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsCompositeDisplayCondition::SetNegateAt ( int Index, VARIANT_BOOL Negate ) {
    HRESULT _hr = raw_SetNegateAt(Index, Negate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsCompositePrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsCompositePrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsCompositePrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsCompositePrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsCompositePrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCompositePrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCompositePrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsCompositePrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsCompositePrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsCompositePrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCompositePrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsCompositePrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCompositePrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsCompositePrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCompositePrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsCompositePrimitive::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsPrimitivesSortOrder _IAgStkGraphicsCompositePrimitive::GetTranslucentPrimitivesSortOrder ( ) {
    enum AgEStkGraphicsPrimitivesSortOrder _result;
    HRESULT _hr = get_TranslucentPrimitivesSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsCompositePrimitive::PutTranslucentPrimitivesSortOrder ( enum AgEStkGraphicsPrimitivesSortOrder pRetVal ) {
    HRESULT _hr = put_TranslucentPrimitivesSortOrder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsCompositePrimitive::Add ( struct IAgStkGraphicsPrimitive * Primitive ) {
    HRESULT _hr = raw_Add(Primitive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsCompositePrimitive::Remove ( struct IAgStkGraphicsPrimitive * Primitive ) {
    HRESULT _hr = raw_Remove(Primitive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsCompositePrimitive::Contains ( struct IAgStkGraphicsPrimitive * Primitive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Primitive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsCompositePrimitive::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr _IAgStkGraphicsCompositePrimitive::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

_variant_t _IAgStkGraphicsCompositePrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsCompositePrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsConstantDisplayCondition wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsConstantDisplayCondition::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsConstantDisplayCondition::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsDistanceDisplayCondition wrapper method implementations
//

double _IAgStkGraphicsDistanceDisplayCondition::GetMinimumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDistanceDisplayCondition::PutMinimumDistance ( double pRetVal ) {
    HRESULT _hr = put_MinimumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceDisplayCondition::GetMaximumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDistanceDisplayCondition::PutMaximumDistance ( double pRetVal ) {
    HRESULT _hr = put_MaximumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceDisplayCondition::GetMinimumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsDistanceDisplayCondition::GetMaximumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition wrapper method implementations
//

IAgStkGraphicsGlobeOverlayPtr _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetGlobeOverlay ( ) {
    struct IAgStkGraphicsGlobeOverlay * _result = 0;
    HRESULT _hr = get_GlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeOverlayPtr(_result, false);
}

void _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::PutGlobeOverlay ( struct IAgStkGraphicsGlobeOverlay * ppRetVal ) {
    HRESULT _hr = put_GlobeOverlay(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetMinimumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::PutMinimumDistance ( double pRetVal ) {
    HRESULT _hr = put_MinimumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetMinimumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetMaximumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::PutMaximumDistance ( double pRetVal ) {
    HRESULT _hr = put_MaximumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition::GetMaximumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsDistanceToPositionDisplayCondition wrapper method implementations
//

double _IAgStkGraphicsDistanceToPositionDisplayCondition::GetMinimumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDistanceToPositionDisplayCondition::PutMinimumDistance ( double pRetVal ) {
    HRESULT _hr = put_MinimumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceToPositionDisplayCondition::GetMinimumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsDistanceToPositionDisplayCondition::GetMaximumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDistanceToPositionDisplayCondition::PutMaximumDistance ( double pRetVal ) {
    HRESULT _hr = put_MaximumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceToPositionDisplayCondition::GetMaximumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsDistanceToPositionDisplayCondition::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDistanceToPositionDisplayCondition::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsDistanceToPositionDisplayCondition::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsDistanceToPositionDisplayCondition::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsDistanceToPrimitiveDisplayCondition wrapper method implementations
//

IAgStkGraphicsPrimitivePtr _IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetPrimitive ( ) {
    struct IAgStkGraphicsPrimitive * _result = 0;
    HRESULT _hr = get_Primitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPrimitivePtr(_result, false);
}

void _IAgStkGraphicsDistanceToPrimitiveDisplayCondition::PutPrimitive ( struct IAgStkGraphicsPrimitive * ppRetVal ) {
    HRESULT _hr = put_Primitive(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetMinimumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDistanceToPrimitiveDisplayCondition::PutMinimumDistance ( double pRetVal ) {
    HRESULT _hr = put_MinimumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetMinimumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetMaximumDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDistanceToPrimitiveDisplayCondition::PutMaximumDistance ( double pRetVal ) {
    HRESULT _hr = put_MaximumDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsDistanceToPrimitiveDisplayCondition::GetMaximumDistanceSquared ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumDistanceSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsGlobeImageOverlay wrapper method implementations
//

_bstr_t _IAgStkGraphicsGlobeImageOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsGlobeImageOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsGlobeImageOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsGlobeImageOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsGlobeImageOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsGlobeImageOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsGlobeImageOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsGlobeImageOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeImageOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsGlobeImageOverlay::GetUseAltitudeBasedTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAltitudeBasedTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeImageOverlay::PutUseAltitudeBasedTranslucency ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAltitudeBasedTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsGlobeImageOverlay::GetAltitudeBasedTranslucencyLowerTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeImageOverlay::PutAltitudeBasedTranslucencyLowerTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsGlobeImageOverlay::GetAltitudeBasedTranslucencyUpperTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeImageOverlay::PutAltitudeBasedTranslucencyUpperTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsGlobeImageOverlay::GetAltitudeBasedTranslucencyLowerAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeImageOverlay::PutAltitudeBasedTranslucencyLowerAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsGlobeImageOverlay::GetAltitudeBasedTranslucencyUpperAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGlobeImageOverlay::PutAltitudeBasedTranslucencyUpperAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsGlobeImageOverlay::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsGraphicsFont wrapper method implementations
//

_bstr_t _IAgStkGraphicsGraphicsFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

int _IAgStkGraphicsGraphicsFont::GetSize ( ) {
    int _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsGraphicsFont::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsGraphicsFont::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsGraphicsFont::GetUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsGraphicsFont::GetStrikeout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Strikeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsGraphicsFont::GetOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Outline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsFontStyle _IAgStkGraphicsGraphicsFont::GetStyle ( ) {
    enum AgEStkGraphicsFontStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsGraphicsFont::GetAntialias ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Antialias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsGreatArcInterpolator wrapper method implementations
//

enum AgEStkGraphicsPolylineType _IAgStkGraphicsGreatArcInterpolator::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsGreatArcInterpolator::Interpolate ( SAFEARRAY * * Positions ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Interpolate(Positions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsGreatArcInterpolator::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkGraphicsGreatArcInterpolator::PutCentralBody ( _bstr_t pRetVal ) {
    HRESULT _hr = put_CentralBody(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsGreatArcInterpolator::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGreatArcInterpolator::PutGranularity ( double pRetVal ) {
    HRESULT _hr = put_Granularity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsImageCollection wrapper method implementations
//

int _IAgStkGraphicsImageCollection::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsImageCollection::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsGlobeImageOverlayPtr _IAgStkGraphicsImageCollection::GetItem ( int Index ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsImageCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsImageCollection::Contains ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(ImageryOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsImageCollection::ContainsUriString ( _bstr_t StringUri ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsUriString(StringUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsImageCollection::Remove ( struct IAgStkGraphicsGlobeImageOverlay * GlobeOverlay ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(GlobeOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsImageCollection::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsImageCollection::Add ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    HRESULT _hr = raw_Add(ImageryOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsImageCollection::AddAsync ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    HRESULT _hr = raw_AddAsync(ImageryOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int _IAgStkGraphicsImageCollection::IndexOf ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    int _result = 0;
    HRESULT _hr = raw_IndexOf(ImageryOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsImageCollection::IndexOfUriString ( _bstr_t StringUri ) {
    int _result = 0;
    HRESULT _hr = raw_IndexOfUriString(StringUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsGlobeImageOverlayPtr _IAgStkGraphicsImageCollection::AddUriString ( _bstr_t Uri ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = raw_AddUriString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

IAgStkGraphicsGlobeImageOverlayPtr _IAgStkGraphicsImageCollection::AddAsyncUriString ( _bstr_t Uri ) {
    struct IAgStkGraphicsGlobeImageOverlay * _result = 0;
    HRESULT _hr = raw_AddAsyncUriString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayPtr(_result, false);
}

HRESULT _IAgStkGraphicsImageCollection::Swap ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay1, struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay2 ) {
    HRESULT _hr = raw_Swap(ImageryOverlay1, ImageryOverlay2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsImageCollection::SwapByIndex ( int Index1, int Index2 ) {
    HRESULT _hr = raw_SwapByIndex(Index1, Index2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsImageCollection::Move ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay, int NewPosition ) {
    HRESULT _hr = raw_Move(ImageryOverlay, NewPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsImageCollection::MoveByIndex ( int Index, int NewPosition ) {
    HRESULT _hr = raw_MoveByIndex(Index, NewPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsImageCollection::BringToFront ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    HRESULT _hr = raw_BringToFront(ImageryOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsImageCollection::SendToBack ( struct IAgStkGraphicsGlobeImageOverlay * ImageryOverlay ) {
    HRESULT _hr = raw_SendToBack(ImageryOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsAlphaFromRasterFilter wrapper method implementations
//

IAgStkGraphicsRasterPtr _IAgStkGraphicsAlphaFromRasterFilter::GetRaster ( ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = get_Raster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

void _IAgStkGraphicsAlphaFromRasterFilter::PutRaster ( struct IAgStkGraphicsRaster * ppRetVal ) {
    HRESULT _hr = put_Raster(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsBandExtractFilter wrapper method implementations
//

enum AgEStkGraphicsRasterFormat _IAgStkGraphicsBandExtractFilter::GetExtractFormat ( ) {
    enum AgEStkGraphicsRasterFormat _result;
    HRESULT _hr = get_ExtractFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsBandExtractFilter::PutExtractFormat ( enum AgEStkGraphicsRasterFormat pRetVal ) {
    HRESULT _hr = put_ExtractFormat(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsBandOrderFilter wrapper method implementations
//

enum AgEStkGraphicsRasterFormat _IAgStkGraphicsBandOrderFilter::GetBandOrder ( ) {
    enum AgEStkGraphicsRasterFormat _result;
    HRESULT _hr = get_BandOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsBandOrderFilter::PutBandOrder ( enum AgEStkGraphicsRasterFormat pRetVal ) {
    HRESULT _hr = put_BandOrder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsBandOrderFilter::GetMaintainRasterFormat ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaintainRasterFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsBandOrderFilter::PutMaintainRasterFormat ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_MaintainRasterFormat(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsBlurFilter wrapper method implementations
//

double _IAgStkGraphicsBlurFilter::GetDivisor ( ) {
    double _result = 0;
    HRESULT _hr = get_Divisor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsBlurFilter::PutDivisor ( double pRetVal ) {
    HRESULT _hr = put_Divisor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsBlurFilter::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsBlurFilter::PutOffset ( double pRetVal ) {
    HRESULT _hr = put_Offset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsBlurFilter::GetKernel ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Kernel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsBlurFilter::PutKernel ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Kernel(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsBlurMethod _IAgStkGraphicsBlurFilter::GetMethod ( ) {
    enum AgEStkGraphicsBlurMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsBlurFilter::PutMethod ( enum AgEStkGraphicsBlurMethod pRetVal ) {
    HRESULT _hr = put_Method(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsBrightnessFilter wrapper method implementations
//

double _IAgStkGraphicsBrightnessFilter::GetAdjustment ( ) {
    double _result = 0;
    HRESULT _hr = get_Adjustment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsBrightnessFilter::PutAdjustment ( double pRetVal ) {
    HRESULT _hr = put_Adjustment(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsContrastFilter wrapper method implementations
//

double _IAgStkGraphicsContrastFilter::GetAdjustment ( ) {
    double _result = 0;
    HRESULT _hr = get_Adjustment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsContrastFilter::PutAdjustment ( double pRetVal ) {
    HRESULT _hr = put_Adjustment(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsConvolutionFilter wrapper method implementations
//

double _IAgStkGraphicsConvolutionFilter::GetDivisor ( ) {
    double _result = 0;
    HRESULT _hr = get_Divisor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsConvolutionFilter::PutDivisor ( double pRetVal ) {
    HRESULT _hr = put_Divisor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsConvolutionFilter::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsConvolutionFilter::PutOffset ( double pRetVal ) {
    HRESULT _hr = put_Offset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsConvolutionFilter::GetKernel ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Kernel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsConvolutionFilter::PutKernel ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Kernel(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsEdgeDetectFilter wrapper method implementations
//

double _IAgStkGraphicsEdgeDetectFilter::GetDivisor ( ) {
    double _result = 0;
    HRESULT _hr = get_Divisor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsEdgeDetectFilter::PutDivisor ( double pRetVal ) {
    HRESULT _hr = put_Divisor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsEdgeDetectFilter::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsEdgeDetectFilter::PutOffset ( double pRetVal ) {
    HRESULT _hr = put_Offset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsEdgeDetectFilter::GetKernel ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Kernel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsEdgeDetectFilter::PutKernel ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Kernel(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsEdgeDetectMethod _IAgStkGraphicsEdgeDetectFilter::GetMethod ( ) {
    enum AgEStkGraphicsEdgeDetectMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsEdgeDetectFilter::PutMethod ( enum AgEStkGraphicsEdgeDetectMethod pRetVal ) {
    HRESULT _hr = put_Method(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsFilteringRasterStream wrapper method implementations
//

double _IAgStkGraphicsFilteringRasterStream::GetUpdateDelta ( ) {
    double _result = 0;
    HRESULT _hr = get_UpdateDelta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsFilteringRasterStream::PutUpdateDelta ( double pRetVal ) {
    HRESULT _hr = put_UpdateDelta(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsFilteringRasterStream::Update ( struct STKUtil::IAgDate * Time, struct STKUtil::IAgDate * NextTime ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(Time, NextTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsFilteringRasterStream::GetAttributes ( ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

int _IAgStkGraphicsFilteringRasterStream::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsFilteringRasterStream::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsFilteringRasterStream::Flip ( enum AgEStkGraphicsFlipAxis Axis ) {
    HRESULT _hr = raw_Flip(Axis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsFilteringRasterStream::Rotate ( double Angle ) {
    HRESULT _hr = raw_Rotate(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsFilteringRasterStream::Apply ( struct IAgStkGraphicsRasterFilter * Filter ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_Apply(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT _IAgStkGraphicsFilteringRasterStream::ApplyInPlace ( struct IAgStkGraphicsRasterFilter * Filter ) {
    HRESULT _hr = raw_ApplyInPlace(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsFilteringRasterStream::ExtractBand ( enum AgEStkGraphicsRasterBand Band ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBand(Band, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsFilteringRasterStream::ExtractBandFromRasterFormat ( enum AgEStkGraphicsRasterFormat Format ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBandFromRasterFormat(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT _IAgStkGraphicsFilteringRasterStream::CopyFromRaster ( struct IAgStkGraphicsRaster * Raster ) {
    HRESULT _hr = raw_CopyFromRaster(Raster);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterFilterPtr _IAgStkGraphicsFilteringRasterStream::GetFilter ( ) {
    struct IAgStkGraphicsRasterFilter * _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterFilterPtr(_result, false);
}

IAgStkGraphicsRasterStreamPtr _IAgStkGraphicsFilteringRasterStream::GetStream ( ) {
    struct IAgStkGraphicsRasterStream * _result = 0;
    HRESULT _hr = get_Stream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterStreamPtr(_result, false);
}

//
// interface _IAgStkGraphicsFlipFilter wrapper method implementations
//

enum AgEStkGraphicsFlipAxis _IAgStkGraphicsFlipFilter::GetFlipAxis ( ) {
    enum AgEStkGraphicsFlipAxis _result;
    HRESULT _hr = get_FlipAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsFlipFilter::PutFlipAxis ( enum AgEStkGraphicsFlipAxis pRetVal ) {
    HRESULT _hr = put_FlipAxis(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsGammaCorrectionFilter wrapper method implementations
//

double _IAgStkGraphicsGammaCorrectionFilter::GetGamma ( ) {
    double _result = 0;
    HRESULT _hr = get_Gamma(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGammaCorrectionFilter::PutGamma ( double pRetVal ) {
    HRESULT _hr = put_Gamma(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsGaussianBlurFilter wrapper method implementations
//

double _IAgStkGraphicsGaussianBlurFilter::GetDivisor ( ) {
    double _result = 0;
    HRESULT _hr = get_Divisor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGaussianBlurFilter::PutDivisor ( double pRetVal ) {
    HRESULT _hr = put_Divisor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsGaussianBlurFilter::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGaussianBlurFilter::PutOffset ( double pRetVal ) {
    HRESULT _hr = put_Offset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsGaussianBlurFilter::GetKernel ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Kernel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGaussianBlurFilter::PutKernel ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Kernel(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsGradientDetectFilter wrapper method implementations
//

double _IAgStkGraphicsGradientDetectFilter::GetDivisor ( ) {
    double _result = 0;
    HRESULT _hr = get_Divisor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGradientDetectFilter::PutDivisor ( double pRetVal ) {
    HRESULT _hr = put_Divisor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsGradientDetectFilter::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGradientDetectFilter::PutOffset ( double pRetVal ) {
    HRESULT _hr = put_Offset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsGradientDetectFilter::GetKernel ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Kernel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGradientDetectFilter::PutKernel ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Kernel(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsGradientDetectMethod _IAgStkGraphicsGradientDetectFilter::GetMethod ( ) {
    enum AgEStkGraphicsGradientDetectMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsGradientDetectFilter::PutMethod ( enum AgEStkGraphicsGradientDetectMethod pRetVal ) {
    HRESULT _hr = put_Method(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsLevelsFilter wrapper method implementations
//

HRESULT _IAgStkGraphicsLevelsFilter::SetLevelAdjustment ( enum AgEStkGraphicsRasterBand Band, int Adjustment ) {
    HRESULT _hr = raw_SetLevelAdjustment(Band, Adjustment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsLevelsFilter::ClearAdjustments ( ) {
    HRESULT _hr = raw_ClearAdjustments();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsProjectionRasterStreamPluginActivator wrapper method implementations
//

IAgStkGraphicsProjectionRasterStreamPluginProxyPtr _IAgStkGraphicsProjectionRasterStreamPluginActivator::CreateFromDisplayName ( _bstr_t DisplayName ) {
    struct IAgStkGraphicsProjectionRasterStreamPluginProxy * _result = 0;
    HRESULT _hr = raw_CreateFromDisplayName(DisplayName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionRasterStreamPluginProxyPtr(_result, false);
}

SAFEARRAY * _IAgStkGraphicsProjectionRasterStreamPluginActivator::GetAvailableDisplayNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetAvailableDisplayNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsProjectionRasterStreamPluginProxy wrapper method implementations
//

IAgStkGraphicsRasterStreamPtr _IAgStkGraphicsProjectionRasterStreamPluginProxy::GetRasterStream ( ) {
    struct IAgStkGraphicsRasterStream * _result = 0;
    HRESULT _hr = get_RasterStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterStreamPtr(_result, false);
}

IAgStkGraphicsProjectionStreamPtr _IAgStkGraphicsProjectionRasterStreamPluginProxy::GetProjectionStream ( ) {
    struct IAgStkGraphicsProjectionStream * _result = 0;
    HRESULT _hr = get_ProjectionStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionStreamPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsProjectionRasterStreamPluginProxy::GetIsRasterStreamSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRasterStreamSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsProjectionRasterStreamPluginProxy::GetIsProjectionStreamSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsProjectionStreamSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr _IAgStkGraphicsProjectionRasterStreamPluginProxy::GetRealPluginObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RealPluginObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgStkGraphicsRaster wrapper method implementations
//

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsRaster::GetAttributes ( ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

int _IAgStkGraphicsRaster::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRaster::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsRaster::Flip ( enum AgEStkGraphicsFlipAxis Axis ) {
    HRESULT _hr = raw_Flip(Axis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsRaster::Rotate ( double Angle ) {
    HRESULT _hr = raw_Rotate(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsRaster::Apply ( struct IAgStkGraphicsRasterFilter * Filter ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_Apply(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT _IAgStkGraphicsRaster::ApplyInPlace ( struct IAgStkGraphicsRasterFilter * Filter ) {
    HRESULT _hr = raw_ApplyInPlace(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsRaster::ExtractBand ( enum AgEStkGraphicsRasterBand Band ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBand(Band, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsRaster::ExtractBandFromRasterFormat ( enum AgEStkGraphicsRasterFormat Format ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBandFromRasterFormat(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT _IAgStkGraphicsRaster::CopyFromRaster ( struct IAgStkGraphicsRaster * Raster ) {
    HRESULT _hr = raw_CopyFromRaster(Raster);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsRasterAttributes wrapper method implementations
//

enum AgEStkGraphicsRasterFormat _IAgStkGraphicsRasterAttributes::GetFormat ( ) {
    enum AgEStkGraphicsRasterFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsRasterType _IAgStkGraphicsRasterAttributes::GetType ( ) {
    enum AgEStkGraphicsRasterType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsRasterOrientation _IAgStkGraphicsRasterAttributes::GetOrientation ( ) {
    enum AgEStkGraphicsRasterOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRasterAttributes::GetByteLength ( ) {
    int _result = 0;
    HRESULT _hr = get_ByteLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRasterAttributes::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRasterAttributes::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsRasterAttributes::GetPixelAspectRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_PixelAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRasterAttributes::GetRowAlignment ( ) {
    int _result = 0;
    HRESULT _hr = get_RowAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRasterAttributes::GetNumberOfBands ( ) {
    int _result = 0;
    HRESULT _hr = get_NumberOfBands(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRasterAttributes::GetRowStride ( ) {
    int _result = 0;
    HRESULT _hr = get_RowStride(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsRasterAttributes::HasBand ( enum AgEStkGraphicsRasterBand Band ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasBand(Band, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsRasterStream wrapper method implementations
//

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsRasterStream::GetAttributes ( ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

int _IAgStkGraphicsRasterStream::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsRasterStream::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsRasterStream::Flip ( enum AgEStkGraphicsFlipAxis Axis ) {
    HRESULT _hr = raw_Flip(Axis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsRasterStream::Rotate ( double Angle ) {
    HRESULT _hr = raw_Rotate(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsRasterStream::Apply ( struct IAgStkGraphicsRasterFilter * Filter ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_Apply(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT _IAgStkGraphicsRasterStream::ApplyInPlace ( struct IAgStkGraphicsRasterFilter * Filter ) {
    HRESULT _hr = raw_ApplyInPlace(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsRasterStream::ExtractBand ( enum AgEStkGraphicsRasterBand Band ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBand(Band, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsRasterStream::ExtractBandFromRasterFormat ( enum AgEStkGraphicsRasterFormat Format ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBandFromRasterFormat(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT _IAgStkGraphicsRasterStream::CopyFromRaster ( struct IAgStkGraphicsRaster * Raster ) {
    HRESULT _hr = raw_CopyFromRaster(Raster);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

double _IAgStkGraphicsRasterStream::GetUpdateDelta ( ) {
    double _result = 0;
    HRESULT _hr = get_UpdateDelta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRasterStream::PutUpdateDelta ( double pRetVal ) {
    HRESULT _hr = put_UpdateDelta(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsRasterStream::Update ( struct STKUtil::IAgDate * Time, struct STKUtil::IAgDate * NextTime ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(Time, NextTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsRotateFilter wrapper method implementations
//

double _IAgStkGraphicsRotateFilter::GetAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRotateFilter::PutAngle ( double pRetVal ) {
    HRESULT _hr = put_Angle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsSequenceFilter wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsSequenceFilter::GetContinueOnFailure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContinueOnFailure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSequenceFilter::PutContinueOnFailure ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ContinueOnFailure(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsSequenceFilter::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsSequenceFilter::Add ( struct IAgStkGraphicsRasterFilter * Filter ) {
    HRESULT _hr = raw_Add(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsSequenceFilter::Remove ( struct IAgStkGraphicsRasterFilter * Filter ) {
    HRESULT _hr = raw_Remove(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsSequenceFilter::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsSequenceFilter::Contains ( struct IAgStkGraphicsRasterFilter * Filter ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsSharpenFilter wrapper method implementations
//

double _IAgStkGraphicsSharpenFilter::GetDivisor ( ) {
    double _result = 0;
    HRESULT _hr = get_Divisor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSharpenFilter::PutDivisor ( double pRetVal ) {
    HRESULT _hr = put_Divisor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsSharpenFilter::GetOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSharpenFilter::PutOffset ( double pRetVal ) {
    HRESULT _hr = put_Offset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsSharpenFilter::GetKernel ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Kernel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSharpenFilter::PutKernel ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Kernel(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsSharpenMethod _IAgStkGraphicsSharpenFilter::GetMethod ( ) {
    enum AgEStkGraphicsSharpenMethod _result;
    HRESULT _hr = get_Method(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSharpenFilter::PutMethod ( enum AgEStkGraphicsSharpenMethod pRetVal ) {
    HRESULT _hr = put_Method(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsVideoStream wrapper method implementations
//

double _IAgStkGraphicsVideoStream::GetUpdateDelta ( ) {
    double _result = 0;
    HRESULT _hr = get_UpdateDelta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutUpdateDelta ( double pRetVal ) {
    HRESULT _hr = put_UpdateDelta(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsVideoStream::Update ( struct STKUtil::IAgDate * Time, struct STKUtil::IAgDate * NextTime ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Update(Time, NextTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsVideoStream::GetAttributes ( ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

int _IAgStkGraphicsVideoStream::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsVideoStream::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsVideoStream::Flip ( enum AgEStkGraphicsFlipAxis Axis ) {
    HRESULT _hr = raw_Flip(Axis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsVideoStream::Rotate ( double Angle ) {
    HRESULT _hr = raw_Rotate(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsVideoStream::Apply ( struct IAgStkGraphicsRasterFilter * Filter ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_Apply(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT _IAgStkGraphicsVideoStream::ApplyInPlace ( struct IAgStkGraphicsRasterFilter * Filter ) {
    HRESULT _hr = raw_ApplyInPlace(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsVideoStream::ExtractBand ( enum AgEStkGraphicsRasterBand Band ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBand(Band, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsVideoStream::ExtractBandFromRasterFormat ( enum AgEStkGraphicsRasterFormat Format ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_ExtractBandFromRasterFormat(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

HRESULT _IAgStkGraphicsVideoStream::CopyFromRaster ( struct IAgStkGraphicsRaster * Raster ) {
    HRESULT _hr = raw_CopyFromRaster(Raster);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t _IAgStkGraphicsVideoStream::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEStkGraphicsVideoPlayback _IAgStkGraphicsVideoStream::GetPlayback ( ) {
    enum AgEStkGraphicsVideoPlayback _result;
    HRESULT _hr = get_Playback(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutPlayback ( enum AgEStkGraphicsVideoPlayback pRetVal ) {
    HRESULT _hr = put_Playback(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsVideoStream::GetFrameRate ( ) {
    double _result = 0;
    HRESULT _hr = get_FrameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutFrameRate ( double pRetVal ) {
    HRESULT _hr = put_FrameRate(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDatePtr _IAgStkGraphicsVideoStream::GetIntervalStartTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_IntervalStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

void _IAgStkGraphicsVideoStream::PutIntervalStartTime ( struct STKUtil::IAgDate * ppRetVal ) {
    HRESULT _hr = put_IntervalStartTime(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDatePtr _IAgStkGraphicsVideoStream::GetIntervalEndTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_IntervalEndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

void _IAgStkGraphicsVideoStream::PutIntervalEndTime ( struct STKUtil::IAgDate * ppRetVal ) {
    HRESULT _hr = put_IntervalEndTime(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsVideoStream::GetStartTime ( ) {
    double _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutStartTime ( double pRetVal ) {
    HRESULT _hr = put_StartTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsVideoStream::GetEndTime ( ) {
    double _result = 0;
    HRESULT _hr = get_EndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutEndTime ( double pRetVal ) {
    HRESULT _hr = put_EndTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsVideoStream::GetStartFrame ( ) {
    int _result = 0;
    HRESULT _hr = get_StartFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutStartFrame ( int pRetVal ) {
    HRESULT _hr = put_StartFrame(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsVideoStream::GetEndFrame ( ) {
    int _result = 0;
    HRESULT _hr = get_EndFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutEndFrame ( int pRetVal ) {
    HRESULT _hr = put_EndFrame(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsVideoStream::GetLoop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Loop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutLoop ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Loop(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsVideoStream::GetIsPlaying ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlaying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsVideoStream::GetPacketAcquirementYieldTime ( ) {
    int _result = 0;
    HRESULT _hr = get_PacketAcquirementYieldTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutPacketAcquirementYieldTime ( int pRetVal ) {
    HRESULT _hr = put_PacketAcquirementYieldTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsVideoStream::GetPacketBufferLimit ( ) {
    int _result = 0;
    HRESULT _hr = get_PacketBufferLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutPacketBufferLimit ( int pRetVal ) {
    HRESULT _hr = put_PacketBufferLimit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsVideoStream::GetAllowFrameDrop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowFrameDrop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsVideoStream::PutAllowFrameDrop ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AllowFrameDrop(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsVideoStream::ReinitializeWithStringUri ( _bstr_t Uri ) {
    HRESULT _hr = raw_ReinitializeWithStringUri(Uri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsVideoStream::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsVideoStream::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsVideoStream::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsVideoStream::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsVideoStream::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsKmlContainer wrapper method implementations
//

IAgStkGraphicsKmlFeatureCollectionPtr IAgStkGraphicsKmlContainer::GetChildren ( ) {
    struct IAgStkGraphicsKmlFeatureCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlFeatureCollectionPtr(_result, false);
}

//
// interface _IAgStkGraphicsKmlContainer wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsKmlContainer::GetIsLoaded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsKmlContainer::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlContainer::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkGraphicsKmlContainer::GetContent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Content(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlContainer::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlContainer::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlContainer::GetSnippet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Snippet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsKmlContainer::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

HRESULT _IAgStkGraphicsKmlContainer::FlyTo ( ) {
    HRESULT _hr = raw_FlyTo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsKmlFeatureCollectionPtr _IAgStkGraphicsKmlContainer::GetChildren ( ) {
    struct IAgStkGraphicsKmlFeatureCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlFeatureCollectionPtr(_result, false);
}

//
// interface _IAgStkGraphicsKmlDocument wrapper method implementations
//

IAgStkGraphicsKmlFeatureCollectionPtr _IAgStkGraphicsKmlDocument::GetChildren ( ) {
    struct IAgStkGraphicsKmlFeatureCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlFeatureCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsKmlDocument::GetIsLoaded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsKmlDocument::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlDocument::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkGraphicsKmlDocument::GetContent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Content(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlDocument::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlDocument::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlDocument::GetSnippet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Snippet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsKmlDocument::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

HRESULT _IAgStkGraphicsKmlDocument::FlyTo ( ) {
    HRESULT _hr = raw_FlyTo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t _IAgStkGraphicsKmlDocument::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _IAgStkGraphicsKmlFeature wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsKmlFeature::GetIsLoaded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsKmlFeature::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlFeature::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkGraphicsKmlFeature::GetContent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Content(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlFeature::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlFeature::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlFeature::GetSnippet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Snippet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsKmlFeature::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

HRESULT _IAgStkGraphicsKmlFeature::FlyTo ( ) {
    HRESULT _hr = raw_FlyTo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsKmlFolder wrapper method implementations
//

IAgStkGraphicsKmlFeatureCollectionPtr _IAgStkGraphicsKmlFolder::GetChildren ( ) {
    struct IAgStkGraphicsKmlFeatureCollection * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlFeatureCollectionPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsKmlFolder::GetIsLoaded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsKmlFolder::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlFolder::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkGraphicsKmlFolder::GetContent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Content(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlFolder::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlFolder::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlFolder::GetSnippet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Snippet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsKmlFolder::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

HRESULT _IAgStkGraphicsKmlFolder::FlyTo ( ) {
    HRESULT _hr = raw_FlyTo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsKmlGraphics wrapper method implementations
//

IAgStkGraphicsKmlDocumentCollectionPtr _IAgStkGraphicsKmlGraphics::GetDocuments ( ) {
    struct IAgStkGraphicsKmlDocumentCollection * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentCollectionPtr(_result, false);
}

IAgStkGraphicsKmlDocumentPtr _IAgStkGraphicsKmlGraphics::LoadDocument ( _bstr_t KmlUri ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = raw_LoadDocument(KmlUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

IAgStkGraphicsKmlDocumentPtr _IAgStkGraphicsKmlGraphics::LoadDocumentString ( _bstr_t KmlUri ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = raw_LoadDocumentString(KmlUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

IAgStkGraphicsKmlDocumentPtr _IAgStkGraphicsKmlGraphics::Load ( _bstr_t KmlDocument ) {
    struct IAgStkGraphicsKmlDocument * _result = 0;
    HRESULT _hr = raw_Load(KmlDocument, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsKmlDocumentPtr(_result, false);
}

HRESULT _IAgStkGraphicsKmlGraphics::LoadDocumentAsync ( _bstr_t KmlUri ) {
    HRESULT _hr = raw_LoadDocumentAsync(KmlUri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsKmlGraphics::LoadDocumentAsyncString ( _bstr_t KmlUri ) {
    HRESULT _hr = raw_LoadDocumentAsyncString(KmlUri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsKmlGraphics::LoadAsync ( _bstr_t KmlDocument ) {
    HRESULT _hr = raw_LoadAsync(KmlDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsKmlGraphics::Unload ( struct IAgStkGraphicsKmlDocument * KmlDocument ) {
    HRESULT _hr = raw_Unload(KmlDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsKmlGraphics::UnloadAll ( ) {
    HRESULT _hr = raw_UnloadAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsKmlNetworkLink wrapper method implementations
//

_bstr_t IAgStkGraphicsKmlNetworkLink::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEStkGraphicsKmlNetworkLinkRefreshMode IAgStkGraphicsKmlNetworkLink::GetRefreshMode ( ) {
    enum AgEStkGraphicsKmlNetworkLinkRefreshMode _result;
    HRESULT _hr = get_RefreshMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsKmlNetworkLink::PutRefreshMode ( enum AgEStkGraphicsKmlNetworkLinkRefreshMode pRetVal ) {
    HRESULT _hr = put_RefreshMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsKmlNetworkLink::GetRefreshInterval ( ) {
    double _result = 0;
    HRESULT _hr = get_RefreshInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsKmlNetworkLink::PutRefreshInterval ( double pRetVal ) {
    HRESULT _hr = put_RefreshInterval(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode IAgStkGraphicsKmlNetworkLink::GetViewRefreshMode ( ) {
    enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode _result;
    HRESULT _hr = get_ViewRefreshMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsKmlNetworkLink::PutViewRefreshMode ( enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode pRetVal ) {
    HRESULT _hr = put_ViewRefreshMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsKmlNetworkLink::GetViewRefreshTime ( ) {
    double _result = 0;
    HRESULT _hr = get_ViewRefreshTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsKmlNetworkLink::PutViewRefreshTime ( double pRetVal ) {
    HRESULT _hr = put_ViewRefreshTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsKmlNetworkLink::GetViewBoundScale ( ) {
    double _result = 0;
    HRESULT _hr = get_ViewBoundScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsKmlNetworkLink::PutViewBoundScale ( double pRetVal ) {
    HRESULT _hr = put_ViewBoundScale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsKmlNetworkLink::GetMinimumRefreshPeriod ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumRefreshPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAgStkGraphicsKmlNetworkLink::GetCookie ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Cookie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgStkGraphicsKmlNetworkLink::GetMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgStkGraphicsKmlNetworkLink::GetLinkSnippet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkSnippet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAgStkGraphicsKmlNetworkLink::GetExpires ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Expires(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IAgStkGraphicsKmlNetworkLink::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsKmlNetworkLink wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsKmlNetworkLink::GetIsLoaded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLoaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsKmlNetworkLink::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlNetworkLink::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkGraphicsKmlNetworkLink::GetContent ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Content(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlNetworkLink::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlNetworkLink::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlNetworkLink::GetSnippet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Snippet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsKmlNetworkLink::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

HRESULT _IAgStkGraphicsKmlNetworkLink::FlyTo ( ) {
    HRESULT _hr = raw_FlyTo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t _IAgStkGraphicsKmlNetworkLink::GetUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Uri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEStkGraphicsKmlNetworkLinkRefreshMode _IAgStkGraphicsKmlNetworkLink::GetRefreshMode ( ) {
    enum AgEStkGraphicsKmlNetworkLinkRefreshMode _result;
    HRESULT _hr = get_RefreshMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlNetworkLink::PutRefreshMode ( enum AgEStkGraphicsKmlNetworkLinkRefreshMode pRetVal ) {
    HRESULT _hr = put_RefreshMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsKmlNetworkLink::GetRefreshInterval ( ) {
    double _result = 0;
    HRESULT _hr = get_RefreshInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlNetworkLink::PutRefreshInterval ( double pRetVal ) {
    HRESULT _hr = put_RefreshInterval(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode _IAgStkGraphicsKmlNetworkLink::GetViewRefreshMode ( ) {
    enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode _result;
    HRESULT _hr = get_ViewRefreshMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlNetworkLink::PutViewRefreshMode ( enum AgEStkGraphicsKmlNetworkLinkViewRefreshMode pRetVal ) {
    HRESULT _hr = put_ViewRefreshMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsKmlNetworkLink::GetViewRefreshTime ( ) {
    double _result = 0;
    HRESULT _hr = get_ViewRefreshTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlNetworkLink::PutViewRefreshTime ( double pRetVal ) {
    HRESULT _hr = put_ViewRefreshTime(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsKmlNetworkLink::GetViewBoundScale ( ) {
    double _result = 0;
    HRESULT _hr = get_ViewBoundScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsKmlNetworkLink::PutViewBoundScale ( double pRetVal ) {
    HRESULT _hr = put_ViewBoundScale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsKmlNetworkLink::GetMinimumRefreshPeriod ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumRefreshPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsKmlNetworkLink::GetCookie ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Cookie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlNetworkLink::GetMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlNetworkLink::GetLinkSnippet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkSnippet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _IAgStkGraphicsKmlNetworkLink::GetExpires ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Expires(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT _IAgStkGraphicsKmlNetworkLink::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsMarkerBatchPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsMarkerBatchPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsMarkerBatchPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsMarkerBatchPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsMarkerBatchPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsMarkerBatchPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsMarkerBatchPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsMarkerBatchPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsMarkerBatchSizeSource _IAgStkGraphicsMarkerBatchPrimitive::GetSizeSource ( ) {
    enum AgEStkGraphicsMarkerBatchSizeSource _result;
    HRESULT _hr = get_SizeSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMarkerBatchSortOrder _IAgStkGraphicsMarkerBatchPrimitive::GetSortOrder ( ) {
    enum AgEStkGraphicsMarkerBatchSortOrder _result;
    HRESULT _hr = get_SortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsSetHint _IAgStkGraphicsMarkerBatchPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMarkerBatchRenderingMethod _IAgStkGraphicsMarkerBatchPrimitive::GetRenderingMethod ( ) {
    enum AgEStkGraphicsMarkerBatchRenderingMethod _result;
    HRESULT _hr = get_RenderingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsMarkerBatchRenderPass _IAgStkGraphicsMarkerBatchPrimitive::GetRenderPass ( ) {
    enum AgEStkGraphicsMarkerBatchRenderPass _result;
    HRESULT _hr = get_RenderPass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutRenderPass ( enum AgEStkGraphicsMarkerBatchRenderPass pRetVal ) {
    HRESULT _hr = put_RenderPass(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsMarkerBatchPrimitive::GetBoundingSphereScale ( ) {
    double _result = 0;
    HRESULT _hr = get_BoundingSphereScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutBoundingSphereScale ( double pRetVal ) {
    HRESULT _hr = put_BoundingSphereScale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDistanceDisplayConditionPtr _IAgStkGraphicsMarkerBatchPrimitive::GetDistanceDisplayConditionPerMarker ( ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = get_DistanceDisplayConditionPerMarker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutDistanceDisplayConditionPerMarker ( struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DistanceDisplayConditionPerMarker(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsRendererTexture2DPtr _IAgStkGraphicsMarkerBatchPrimitive::GetTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = get_Texture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutTexture ( struct IAgStkGraphicsRendererTexture2D * ppRetVal ) {
    HRESULT _hr = put_Texture(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsMarkerBatchUnit _IAgStkGraphicsMarkerBatchPrimitive::GetSizeUnit ( ) {
    enum AgEStkGraphicsMarkerBatchUnit _result;
    HRESULT _hr = get_SizeUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutSizeUnit ( enum AgEStkGraphicsMarkerBatchUnit pRetVal ) {
    HRESULT _hr = put_SizeUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsMarkerBatchPrimitive::GetSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Size(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsOrigin _IAgStkGraphicsMarkerBatchPrimitive::GetOrigin ( ) {
    enum AgEStkGraphicsOrigin _result;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutOrigin ( enum AgEStkGraphicsOrigin pRetVal ) {
    HRESULT _hr = put_Origin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsMarkerBatchPrimitive::GetPixelOffset ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PixelOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutPixelOffset ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_PixelOffset(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsMarkerBatchPrimitive::GetEyeOffset ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_EyeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutEyeOffset ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_EyeOffset(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsMarkerBatchPrimitive::GetRotation ( ) {
    double _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutRotation ( double pRetVal ) {
    HRESULT _hr = put_Rotation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsMarkerBatchPrimitive::GetTextureCoordinate ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TextureCoordinate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutTextureCoordinate ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_TextureCoordinate(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsMarkerBatchPrimitive::GetAlignToPixel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlignToPixel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutAlignToPixel ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AlignToPixel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsMarkerBatchPrimitive::GetWireframe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Wireframe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutWireframe ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Wireframe(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsMarkerBatchPrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsMarkerBatchPrimitive::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::Set ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_Set(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetWithOptionalParameters ( SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetWithOptionalParameters(Positions, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetWithOptionalParametersAndRenderPassHint ( SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetWithOptionalParametersAndRenderPassHint(Positions, OptionalParameters, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_SetCartographic(CentralBody, Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetCartographicWithOptionalParameters ( _bstr_t CentralBody, SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetCartographicWithOptionalParameters(CentralBody, Positions, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetCartographicWithOptionalParametersAndRenderPassHint ( _bstr_t CentralBody, SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetCartographicWithOptionalParametersAndRenderPassHint(CentralBody, Positions, OptionalParameters, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetPartial ( SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartial(Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetPartialWithIndicesOrder ( SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialWithIndicesOrder(Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetPartialWithOptionalParameters ( SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialWithOptionalParameters(Positions, OptionalParameters, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetPartialWithOptionalParametersIndicesOrderAndRenderPass ( SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialWithOptionalParametersIndicesOrderAndRenderPass(Positions, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetPartialCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographic(CentralBody, Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetPartialCartographicWithIndicesOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithIndicesOrder(CentralBody, Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetPartialCartographicWithOptionalParameters ( _bstr_t CentralBody, SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographicWithOptionalParameters(CentralBody, Positions, OptionalParameters, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(CentralBody, Positions, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsMarkerBatchPrimitive::Supported ( enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Supported(RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgStkGraphicsMarkerBatchPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsMarkerBatchPrimitive::GetClampToPixel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClampToPixel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutClampToPixel ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ClampToPixel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsMarkerBatchPrimitive::GetCentralBodyClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentralBodyClipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMarkerBatchPrimitive::PutCentralBodyClipped ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CentralBodyClipped(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::AlignToScreen ( ) {
    HRESULT _hr = raw_AlignToScreen();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::AlignToNorth ( _bstr_t CentralBody ) {
    HRESULT _hr = raw_AlignToNorth(CentralBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitive::AlignToAxis ( _bstr_t CentralBody, SAFEARRAY * * Axis ) {
    HRESULT _hr = raw_AlignToAxis(CentralBody, Axis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters wrapper method implementations
//

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetTextures ( SAFEARRAY * * Textures ) {
    HRESULT _hr = raw_SetTextures(Textures);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetSizes ( SAFEARRAY * * Sizes ) {
    HRESULT _hr = raw_SetSizes(Sizes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetColors ( SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetColors(Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetOrigins ( SAFEARRAY * * Origins ) {
    HRESULT _hr = raw_SetOrigins(Origins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetPixelOffsets ( SAFEARRAY * * PixelOffsets ) {
    HRESULT _hr = raw_SetPixelOffsets(PixelOffsets);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetEyeOffsets ( SAFEARRAY * * EyeOffsets ) {
    HRESULT _hr = raw_SetEyeOffsets(EyeOffsets);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetRotations ( SAFEARRAY * * RotationAngles ) {
    HRESULT _hr = raw_SetRotations(RotationAngles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetTextureCoordinates ( SAFEARRAY * * TextureCoordinates ) {
    HRESULT _hr = raw_SetTextureCoordinates(TextureCoordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetTimeIntervalDisplayConditions ( SAFEARRAY * * TimeIntervals ) {
    HRESULT _hr = raw_SetTimeIntervalDisplayConditions(TimeIntervals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters::SetDisplays ( SAFEARRAY * * Displays ) {
    HRESULT _hr = raw_SetDisplays(Displays);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsModelArticulation wrapper method implementations
//

_bstr_t _IAgStkGraphicsModelArticulation::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

int _IAgStkGraphicsModelArticulation::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsModelTransformationPtr _IAgStkGraphicsModelArticulation::GetItem ( int Index ) {
    struct IAgStkGraphicsModelTransformation * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelTransformationPtr(_result, false);
}

IAgStkGraphicsModelTransformationPtr _IAgStkGraphicsModelArticulation::GetItemByString ( _bstr_t Name ) {
    struct IAgStkGraphicsModelTransformation * _result = 0;
    HRESULT _hr = raw_GetItemByString(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelTransformationPtr(_result, false);
}

IAgStkGraphicsModelTransformationPtr _IAgStkGraphicsModelArticulation::GetByName ( _bstr_t Name ) {
    struct IAgStkGraphicsModelTransformation * _result = 0;
    HRESULT _hr = raw_GetByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelTransformationPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsModelArticulation::Contains ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr _IAgStkGraphicsModelArticulation::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgStkGraphicsModelArticulationCollection wrapper method implementations
//

int _IAgStkGraphicsModelArticulationCollection::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsModelArticulationPtr _IAgStkGraphicsModelArticulationCollection::GetItem ( int Index ) {
    struct IAgStkGraphicsModelArticulation * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelArticulationPtr(_result, false);
}

IAgStkGraphicsModelArticulationPtr _IAgStkGraphicsModelArticulationCollection::GetItemByString ( _bstr_t Name ) {
    struct IAgStkGraphicsModelArticulation * _result = 0;
    HRESULT _hr = raw_GetItemByString(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelArticulationPtr(_result, false);
}

IAgStkGraphicsModelArticulationPtr _IAgStkGraphicsModelArticulationCollection::GetByName ( _bstr_t Name ) {
    struct IAgStkGraphicsModelArticulation * _result = 0;
    HRESULT _hr = raw_GetByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelArticulationPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsModelArticulationCollection::Contains ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr _IAgStkGraphicsModelArticulationCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgStkGraphicsModelPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsModelPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsModelPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsModelPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsModelPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsModelPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsModelPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsModelPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsModelPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsModelPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsModelPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsModelPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsModelPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsModelPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsModelPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _IAgStkGraphicsModelPrimitive::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double _IAgStkGraphicsModelPrimitive::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsModelPrimitive::PutScale ( double pRetVal ) {
    HRESULT _hr = put_Scale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsModelPrimitive::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsModelPrimitive::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr _IAgStkGraphicsModelPrimitive::GetOrientation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

void _IAgStkGraphicsModelPrimitive::PutOrientation ( struct STKUtil::IAgOrientation * ppRetVal ) {
    HRESULT _hr = put_Orientation(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsModelArticulationCollectionPtr _IAgStkGraphicsModelPrimitive::GetArticulations ( ) {
    struct IAgStkGraphicsModelArticulationCollection * _result = 0;
    HRESULT _hr = get_Articulations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelArticulationCollectionPtr(_result, false);
}

HRESULT _IAgStkGraphicsModelPrimitive::LoadWithStringUri ( _bstr_t Uri ) {
    HRESULT _hr = raw_LoadWithStringUri(Uri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsModelPrimitive::LoadWithStringUriAndUpAxis ( _bstr_t Uri, enum AgEStkGraphicsModelUpAxis UpAxis ) {
    HRESULT _hr = raw_LoadWithStringUriAndUpAxis(Uri, UpAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsModelPrimitive::SetPositionCartographic ( _bstr_t CentralBody, SAFEARRAY * * Position ) {
    HRESULT _hr = raw_SetPositionCartographic(CentralBody, Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgStkGraphicsModelPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsModelPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsModelTransformation wrapper method implementations
//

double _IAgStkGraphicsModelTransformation::GetCurrentValue ( ) {
    double _result = 0;
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsModelTransformation::PutCurrentValue ( double pRetVal ) {
    HRESULT _hr = put_CurrentValue(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsModelTransformation::GetMinimumValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsModelTransformation::GetMaximumValue ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsModelTransformation::GetDefaultValue ( ) {
    double _result = 0;
    HRESULT _hr = get_DefaultValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsModelTransformation::GetRange ( ) {
    double _result = 0;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsModelTransformation::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum AgEStkGraphicsModelTransformationType _IAgStkGraphicsModelTransformation::GetType ( ) {
    enum AgEStkGraphicsModelTransformationType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAgStkGraphicsOverlay wrapper method implementations
//

SAFEARRAY * IAgStkGraphicsOverlay::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsOverlay::GetPinningPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PinningPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutPinningPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_PinningPosition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsOverlay::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutX ( double pRetVal ) {
    HRESULT _hr = put_X(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit IAgStkGraphicsOverlay::GetXUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_XUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutXUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_XUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsOverlay::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutY ( double pRetVal ) {
    HRESULT _hr = put_Y(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit IAgStkGraphicsOverlay::GetYUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_YUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutYUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_YUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsOverlay::GetSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Size(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsOverlay::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutWidth ( double pRetVal ) {
    HRESULT _hr = put_Width(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit IAgStkGraphicsOverlay::GetWidthUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_WidthUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutWidthUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_WidthUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsOverlay::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutHeight ( double pRetVal ) {
    HRESULT _hr = put_Height(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit IAgStkGraphicsOverlay::GetHeightUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_HeightUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutHeightUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_HeightUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsOverlay::GetMinimumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MinimumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutMinimumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MinimumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsOverlay::GetMaximumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MaximumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutMaximumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MaximumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsOverlay::GetBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_COLOR IAgStkGraphicsOverlay::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutBorderColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BorderColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IAgStkGraphicsOverlay::GetBorderSize ( ) {
    int _result = 0;
    HRESULT _hr = get_BorderSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutBorderSize ( int pRetVal ) {
    HRESULT _hr = put_BorderSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsOverlay::GetBorderTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_BorderTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutBorderTranslucency ( float pRetVal ) {
    HRESULT _hr = put_BorderTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsOverlay::GetTranslationX ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutTranslationX ( double pRetVal ) {
    HRESULT _hr = put_TranslationX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsOverlay::GetTranslationY ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutTranslationY ( double pRetVal ) {
    HRESULT _hr = put_TranslationY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsOverlay::GetRotationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutRotationAngle ( double pRetVal ) {
    HRESULT _hr = put_RotationAngle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsOverlay::GetRotationPoint ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RotationPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutRotationPoint ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_RotationPoint(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsOverlay::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutScale ( double pRetVal ) {
    HRESULT _hr = put_Scale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsOverlay::GetFlipX ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutFlipX ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsOverlay::GetFlipY ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutFlipY ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayOrigin IAgStkGraphicsOverlay::GetOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayOrigin _result;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutOrigin ( enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) {
    HRESULT _hr = put_Origin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayPinningOrigin IAgStkGraphicsOverlay::GetPinningOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayPinningOrigin _result;
    HRESULT _hr = get_PinningOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutPinningOrigin ( enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) {
    HRESULT _hr = put_PinningOrigin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayContainerPtr IAgStkGraphicsOverlay::GetParent ( ) {
    struct IAgStkGraphicsScreenOverlayContainer * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayContainerPtr(_result, false);
}

float IAgStkGraphicsOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR IAgStkGraphicsOverlay::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsOverlay::GetPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsOverlay::GetClipToParent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipToParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutClipToParent ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ClipToParent(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsOverlay::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * IAgStkGraphicsOverlay::GetControlPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsOverlay::GetControlSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsOverlay::GetControlBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr IAgStkGraphicsOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void IAgStkGraphicsOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayCollectionPtr IAgStkGraphicsOverlay::GetOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayCollection * _result = 0;
    HRESULT _hr = get_Overlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayCollectionPtr(_result, false);
}

SAFEARRAY * IAgStkGraphicsOverlay::GetPadding ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Padding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsOverlay::PutPadding ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Padding(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IAgStkGraphicsOverlay::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsOverlay::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * IAgStkGraphicsOverlay::OverlayToControl ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_OverlayToControl(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * IAgStkGraphicsOverlay::ControlToOverlay ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ControlToOverlay(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IAgStkGraphicsOverlay::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IAgStkGraphicsOverlay::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsOverlay wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsOverlay::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetPinningPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PinningPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutPinningPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_PinningPosition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsOverlay::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutX ( double pRetVal ) {
    HRESULT _hr = put_X(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsOverlay::GetXUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_XUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutXUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_XUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsOverlay::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutY ( double pRetVal ) {
    HRESULT _hr = put_Y(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsOverlay::GetYUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_YUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutYUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_YUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Size(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsOverlay::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutWidth ( double pRetVal ) {
    HRESULT _hr = put_Width(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsOverlay::GetWidthUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_WidthUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutWidthUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_WidthUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsOverlay::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutHeight ( double pRetVal ) {
    HRESULT _hr = put_Height(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsOverlay::GetHeightUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_HeightUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutHeightUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_HeightUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetMinimumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MinimumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutMinimumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MinimumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetMaximumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MaximumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutMaximumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MaximumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_COLOR _IAgStkGraphicsOverlay::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutBorderColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BorderColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsOverlay::GetBorderSize ( ) {
    int _result = 0;
    HRESULT _hr = get_BorderSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutBorderSize ( int pRetVal ) {
    HRESULT _hr = put_BorderSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsOverlay::GetBorderTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_BorderTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutBorderTranslucency ( float pRetVal ) {
    HRESULT _hr = put_BorderTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsOverlay::GetTranslationX ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutTranslationX ( double pRetVal ) {
    HRESULT _hr = put_TranslationX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsOverlay::GetTranslationY ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutTranslationY ( double pRetVal ) {
    HRESULT _hr = put_TranslationY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsOverlay::GetRotationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutRotationAngle ( double pRetVal ) {
    HRESULT _hr = put_RotationAngle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetRotationPoint ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RotationPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutRotationPoint ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_RotationPoint(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsOverlay::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutScale ( double pRetVal ) {
    HRESULT _hr = put_Scale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsOverlay::GetFlipX ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutFlipX ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsOverlay::GetFlipY ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutFlipY ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayOrigin _IAgStkGraphicsOverlay::GetOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayOrigin _result;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutOrigin ( enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) {
    HRESULT _hr = put_Origin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayPinningOrigin _IAgStkGraphicsOverlay::GetPinningOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayPinningOrigin _result;
    HRESULT _hr = get_PinningOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutPinningOrigin ( enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) {
    HRESULT _hr = put_PinningOrigin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayContainerPtr _IAgStkGraphicsOverlay::GetParent ( ) {
    struct IAgStkGraphicsScreenOverlayContainer * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayContainerPtr(_result, false);
}

float _IAgStkGraphicsOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsOverlay::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsOverlay::GetPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsOverlay::GetClipToParent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipToParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutClipToParent ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ClipToParent(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsOverlay::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetControlPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetControlSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetControlBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayCollectionPtr _IAgStkGraphicsOverlay::GetOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayCollection * _result = 0;
    HRESULT _hr = get_Overlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayCollectionPtr(_result, false);
}

SAFEARRAY * _IAgStkGraphicsOverlay::GetPadding ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Padding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsOverlay::PutPadding ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Padding(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsOverlay::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsOverlay::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgStkGraphicsOverlay::OverlayToControl ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_OverlayToControl(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsOverlay::ControlToOverlay ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ControlToOverlay(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgStkGraphicsOverlay::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsOverlay::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsPickResult wrapper method implementations
//

IAgStkGraphicsObjectCollectionPtr _IAgStkGraphicsPickResult::GetObjects ( ) {
    struct IAgStkGraphicsObjectCollection * _result = 0;
    HRESULT _hr = get_Objects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsObjectCollectionPtr(_result, false);
}

float _IAgStkGraphicsPickResult::GetDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsPickResult::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsPixelSizeDisplayCondition wrapper method implementations
//

int _IAgStkGraphicsPixelSizeDisplayCondition::GetMinimumPixelSize ( ) {
    int _result = 0;
    HRESULT _hr = get_MinimumPixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPixelSizeDisplayCondition::PutMinimumPixelSize ( int pRetVal ) {
    HRESULT _hr = put_MinimumPixelSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsPixelSizeDisplayCondition::GetMaximumPixelSize ( ) {
    int _result = 0;
    HRESULT _hr = get_MaximumPixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPixelSizeDisplayCondition::PutMaximumPixelSize ( int pRetVal ) {
    HRESULT _hr = put_MaximumPixelSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsPointBatchPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsPointBatchPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsPointBatchPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsPointBatchPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsPointBatchPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPointBatchPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsPointBatchPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsPointBatchPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPointBatchPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsPointBatchPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPointBatchPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPointBatchPrimitive::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutDisplayOutline ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayOutline(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsPointBatchPrimitive::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPointBatchPrimitive::GetOutlineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutOutlineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPointBatchPrimitive::GetOutlineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutOutlineWidth ( float pRetVal ) {
    HRESULT _hr = put_OutlineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPointBatchPrimitive::GetPixelSize ( ) {
    float _result = 0;
    HRESULT _hr = get_PixelSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutPixelSize ( float pRetVal ) {
    HRESULT _hr = put_PixelSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPointBatchPrimitive::GetMinimumPixelSizeSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumPixelSizeSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsPointBatchPrimitive::GetMaximumPixelSizeSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumPixelSizeSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDistanceDisplayConditionPtr _IAgStkGraphicsPointBatchPrimitive::GetDistanceDisplayConditionPerPoint ( ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = get_DistanceDisplayConditionPerPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsPointBatchPrimitive::PutDistanceDisplayConditionPerPoint ( struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DistanceDisplayConditionPerPoint(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsSetHint _IAgStkGraphicsPointBatchPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsPointBatchPrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::Set ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_Set(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetWithColors ( SAFEARRAY * * Positions, SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetWithColors(Positions, Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetWithColorsAndRenderPass ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetWithColorsAndRenderPass(Positions, Colors, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_SetCartographic(CentralBody, Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetCartographicWithColors ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetCartographicWithColors(CentralBody, Positions, Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetCartographicWithColorsAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetCartographicWithColorsAndRenderPass(CentralBody, Positions, Colors, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetPartial ( SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartial(Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetPartialWithIndicesOrder ( SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialWithIndicesOrder(Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetPartialWithColors ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialWithColors(Positions, Colors, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetPartialWithColorsIndicesOrderAndRenderPass ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialWithColorsIndicesOrderAndRenderPass(Positions, Colors, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetPartialCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographic(CentralBody, Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetPartialCartographicWithIndicesOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithIndicesOrder(CentralBody, Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetPartialCartographicWithColors ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographicWithColors(CentralBody, Positions, Colors, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPointBatchPrimitive::SetPartialCartographicWithColorsIndicesOrderAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithColorsIndicesOrderAndRenderPass(CentralBody, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgStkGraphicsPointBatchPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsPointBatchPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPointBatchPrimitive::GetCentralBodyClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentralBodyClipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPointBatchPrimitive::PutCentralBodyClipped ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CentralBodyClipped(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsPolylinePrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsPolylinePrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsPolylinePrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsPolylinePrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsPolylinePrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPolylinePrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsPolylinePrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsPolylinePrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPolylinePrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsPolylinePrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPolylinePrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPolylinePrimitive::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutWidth ( float pRetVal ) {
    HRESULT _hr = put_Width(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPolylinePrimitive::GetMinimumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsPolylinePrimitive::GetMaximumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPositionInterpolatorPtr _IAgStkGraphicsPolylinePrimitive::GetPositionInterpolator ( ) {
    struct IAgStkGraphicsPositionInterpolator * _result = 0;
    HRESULT _hr = get_PositionInterpolator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPositionInterpolatorPtr(_result, false);
}

enum AgEStkGraphicsPolylineType _IAgStkGraphicsPolylinePrimitive::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsSetHint _IAgStkGraphicsPolylinePrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsPolylinePrimitive::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutDisplayOutline ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayOutline(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsPolylinePrimitive::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPolylinePrimitive::GetOutlineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutOutlineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPolylinePrimitive::GetOutlineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutOutlineWidth ( float pRetVal ) {
    HRESULT _hr = put_OutlineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPolylinePrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsPolylinePrimitive::Set ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_Set(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetWithColors ( SAFEARRAY * * Positions, SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetWithColors(Positions, Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetWithColorsAndHint ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetWithColorsAndHint(Positions, Colors, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetWithSurfaceShapesResult ( struct IAgStkGraphicsSurfaceShapesResult * SurfaceShapesResult ) {
    HRESULT _hr = raw_SetWithSurfaceShapesResult(SurfaceShapesResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetWithSurfaceTriangulatorResult ( struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulatorResult ) {
    HRESULT _hr = raw_SetWithSurfaceTriangulatorResult(SurfaceTriangulatorResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetWithSolidTriangulatorResult ( struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult ) {
    HRESULT _hr = raw_SetWithSolidTriangulatorResult(SolidTriangulatorResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_SetCartographic(CentralBody, Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetCartographicWithColors ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetCartographicWithColors(CentralBody, Positions, Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetCartographicWithColorsAndHint ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetCartographicWithColorsAndHint(CentralBody, Positions, Colors, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetSubset ( SAFEARRAY * * Positions, int Index, int Count ) {
    HRESULT _hr = raw_SetSubset(Positions, Index, Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetSubsetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, int Index, int Count ) {
    HRESULT _hr = raw_SetSubsetCartographic(CentralBody, Positions, Index, Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetPartial ( SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartial(Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetPartialWithIndicesOrder ( SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialWithIndicesOrder(Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetPartialWithColors ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialWithColors(Positions, Colors, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetPartialWithColorsIndicesOrderAndRenderPassHint ( SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialWithColorsIndicesOrderAndRenderPassHint(Positions, Colors, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetPartialCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographic(CentralBody, Positions, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetPartialCartographicWithIndicesOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithIndicesOrder(CentralBody, Positions, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetPartialCartographicWithColors ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographicWithColors(CentralBody, Positions, Colors, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPolylinePrimitive::SetPartialCartographicWithColorsIndicesOrderAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Colors, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithColorsIndicesOrderAndRenderPass(CentralBody, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgStkGraphicsPolylinePrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsPolylinePrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPolylinePrimitive::GetCentralBodyClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentralBodyClipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPolylinePrimitive::PutCentralBodyClipped ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CentralBodyClipped(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsPositionInterpolator wrapper method implementations
//

enum AgEStkGraphicsPolylineType _IAgStkGraphicsPositionInterpolator::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsPositionInterpolator::Interpolate ( SAFEARRAY * * Positions ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Interpolate(Positions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgStkGraphicsPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsPrimitiveManager wrapper method implementations
//

int _IAgStkGraphicsPrimitiveManager::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsPrimitiveManager::GetPrecisionExponent ( ) {
    int _result = 0;
    HRESULT _hr = get_PrecisionExponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPrimitiveManager::PutPrecisionExponent ( int pRetVal ) {
    HRESULT _hr = put_PrecisionExponent(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsPrimitivesSortOrder _IAgStkGraphicsPrimitiveManager::GetTranslucentPrimitivesSortOrder ( ) {
    enum AgEStkGraphicsPrimitivesSortOrder _result;
    HRESULT _hr = get_TranslucentPrimitivesSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPrimitiveManager::PutTranslucentPrimitivesSortOrder ( enum AgEStkGraphicsPrimitivesSortOrder pRetVal ) {
    HRESULT _hr = put_TranslucentPrimitivesSortOrder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsPrimitiveManager::Add ( struct IAgStkGraphicsPrimitive * Primitive ) {
    HRESULT _hr = raw_Add(Primitive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPrimitiveManager::Remove ( struct IAgStkGraphicsPrimitive * Primitive ) {
    HRESULT _hr = raw_Remove(Primitive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsPrimitiveManager::Contains ( struct IAgStkGraphicsPrimitive * Primitive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Primitive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsPrimitiveManager::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr _IAgStkGraphicsPrimitiveManager::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _IAgStkGraphicsRasterImageGlobeOverlay wrapper method implementations
//

float _IAgStkGraphicsRasterImageGlobeOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRasterImageGlobeOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsRasterImageGlobeOverlay::GetUseAltitudeBasedTranslucency ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseAltitudeBasedTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRasterImageGlobeOverlay::PutUseAltitudeBasedTranslucency ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseAltitudeBasedTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsRasterImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRasterImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsRasterImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRasterImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperTranslucency ( float pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsRasterImageGlobeOverlay::GetAltitudeBasedTranslucencyLowerAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyLowerAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRasterImageGlobeOverlay::PutAltitudeBasedTranslucencyLowerAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyLowerAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsRasterImageGlobeOverlay::GetAltitudeBasedTranslucencyUpperAltitude ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeBasedTranslucencyUpperAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRasterImageGlobeOverlay::PutAltitudeBasedTranslucencyUpperAltitude ( double pRetVal ) {
    HRESULT _hr = put_AltitudeBasedTranslucencyUpperAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsRasterImageGlobeOverlay::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsRasterImageGlobeOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsRasterImageGlobeOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsRasterImageGlobeOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsRasterImageGlobeOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsRasterImageGlobeOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsRasterImageGlobeOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsRasterImageGlobeOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsRasterImageGlobeOverlay::GetUseTransparentColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRasterImageGlobeOverlay::PutUseTransparentColor ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseTransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsRasterImageGlobeOverlay::GetTransparentColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TransparentColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRasterImageGlobeOverlay::PutTransparentColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_TransparentColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsRhumbLineInterpolator wrapper method implementations
//

enum AgEStkGraphicsPolylineType _IAgStkGraphicsRhumbLineInterpolator::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsRhumbLineInterpolator::Interpolate ( SAFEARRAY * * Positions ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Interpolate(Positions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsRhumbLineInterpolator::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkGraphicsRhumbLineInterpolator::PutCentralBody ( _bstr_t pRetVal ) {
    HRESULT _hr = put_CentralBody(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsRhumbLineInterpolator::GetGranularity ( ) {
    double _result = 0;
    HRESULT _hr = get_Granularity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsRhumbLineInterpolator::PutGranularity ( double pRetVal ) {
    HRESULT _hr = put_Granularity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsScene wrapper method implementations
//

IAgStkGraphicsCameraPtr _IAgStkGraphicsScene::GetCamera ( ) {
    struct IAgStkGraphicsCamera * _result = 0;
    HRESULT _hr = get_Camera(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCameraPtr(_result, false);
}

IAgStkGraphicsLightingPtr _IAgStkGraphicsScene::GetLighting ( ) {
    struct IAgStkGraphicsLighting * _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsLightingPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsScene::GetShowSunshine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSunshine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScene::PutShowSunshine ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowSunshine(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsCentralBodyGraphicsIndexerPtr _IAgStkGraphicsScene::GetCentralBodies ( ) {
    struct IAgStkGraphicsCentralBodyGraphicsIndexer * _result = 0;
    HRESULT _hr = get_CentralBodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCentralBodyGraphicsIndexerPtr(_result, false);
}

OLE_COLOR _IAgStkGraphicsScene::GetBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScene::PutBackgroundColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BackgroundColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsScene::GetShadeSkyBasedOnAltitude ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShadeSkyBasedOnAltitude(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScene::PutShadeSkyBasedOnAltitude ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShadeSkyBasedOnAltitude(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsScene::GetShowStars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowStars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScene::PutShowStars ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowStars(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsSceneGlobeOverlaySettingsPtr _IAgStkGraphicsScene::GetGlobeOverlaySettings ( ) {
    struct IAgStkGraphicsSceneGlobeOverlaySettings * _result = 0;
    HRESULT _hr = get_GlobeOverlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneGlobeOverlaySettingsPtr(_result, false);
}

HRESULT _IAgStkGraphicsScene::Render ( ) {
    HRESULT _hr = raw_Render();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsPickResultCollectionPtr _IAgStkGraphicsScene::Pick ( int X, int Y ) {
    struct IAgStkGraphicsPickResultCollection * _result = 0;
    HRESULT _hr = raw_Pick(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPickResultCollectionPtr(_result, false);
}

IAgStkGraphicsPickResultCollectionPtr _IAgStkGraphicsScene::PickRectangular ( int Left, int Bottom, int Right, int Top ) {
    struct IAgStkGraphicsPickResultCollection * _result = 0;
    HRESULT _hr = raw_PickRectangular(Left, Bottom, Right, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPickResultCollectionPtr(_result, false);
}

IAgStkGraphicsScreenOverlayPickResultCollectionPtr _IAgStkGraphicsScene::PickScreenOverlays ( int X, int Y ) {
    struct IAgStkGraphicsScreenOverlayPickResultCollection * _result = 0;
    HRESULT _hr = raw_PickScreenOverlays(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPickResultCollectionPtr(_result, false);
}

int _IAgStkGraphicsScene::GetSceneID ( ) {
    int _result = 0;
    HRESULT _hr = get_SceneID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsScene::GetShowWaterSurface ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowWaterSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScene::PutShowWaterSurface ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ShowWaterSurface(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsSceneDisplayCondition wrapper method implementations
//

HRESULT _IAgStkGraphicsSceneDisplayCondition::SetDisplayInScene ( struct IAgStkGraphicsScene * Scene, VARIANT_BOOL On ) {
    HRESULT _hr = raw_SetDisplayInScene(Scene, On);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsSceneDisplayCondition::GetDisplayInScene ( struct IAgStkGraphicsScene * Scene ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetDisplayInScene(Scene, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsSceneDisplayCondition::DisplayOnlyInScene ( struct IAgStkGraphicsScene * Scene ) {
    HRESULT _hr = raw_DisplayOnlyInScene(Scene);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsScreenOverlay wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetPinningPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PinningPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutPinningPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_PinningPosition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsScreenOverlay::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutX ( double pRetVal ) {
    HRESULT _hr = put_X(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsScreenOverlay::GetXUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_XUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutXUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_XUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsScreenOverlay::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutY ( double pRetVal ) {
    HRESULT _hr = put_Y(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsScreenOverlay::GetYUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_YUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutYUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_YUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Size(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsScreenOverlay::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutWidth ( double pRetVal ) {
    HRESULT _hr = put_Width(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsScreenOverlay::GetWidthUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_WidthUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutWidthUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_WidthUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsScreenOverlay::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutHeight ( double pRetVal ) {
    HRESULT _hr = put_Height(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsScreenOverlay::GetHeightUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_HeightUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutHeightUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_HeightUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetMinimumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MinimumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutMinimumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MinimumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetMaximumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MaximumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutMaximumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MaximumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_COLOR _IAgStkGraphicsScreenOverlay::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutBorderColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BorderColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsScreenOverlay::GetBorderSize ( ) {
    int _result = 0;
    HRESULT _hr = get_BorderSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutBorderSize ( int pRetVal ) {
    HRESULT _hr = put_BorderSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsScreenOverlay::GetBorderTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_BorderTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutBorderTranslucency ( float pRetVal ) {
    HRESULT _hr = put_BorderTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsScreenOverlay::GetTranslationX ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutTranslationX ( double pRetVal ) {
    HRESULT _hr = put_TranslationX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsScreenOverlay::GetTranslationY ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutTranslationY ( double pRetVal ) {
    HRESULT _hr = put_TranslationY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsScreenOverlay::GetRotationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutRotationAngle ( double pRetVal ) {
    HRESULT _hr = put_RotationAngle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetRotationPoint ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RotationPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutRotationPoint ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_RotationPoint(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsScreenOverlay::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutScale ( double pRetVal ) {
    HRESULT _hr = put_Scale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlay::GetFlipX ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutFlipX ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlay::GetFlipY ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutFlipY ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayOrigin _IAgStkGraphicsScreenOverlay::GetOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayOrigin _result;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutOrigin ( enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) {
    HRESULT _hr = put_Origin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayPinningOrigin _IAgStkGraphicsScreenOverlay::GetPinningOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayPinningOrigin _result;
    HRESULT _hr = get_PinningOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutPinningOrigin ( enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) {
    HRESULT _hr = put_PinningOrigin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayContainerPtr _IAgStkGraphicsScreenOverlay::GetParent ( ) {
    struct IAgStkGraphicsScreenOverlayContainer * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayContainerPtr(_result, false);
}

float _IAgStkGraphicsScreenOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsScreenOverlay::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlay::GetPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlay::GetClipToParent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipToParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutClipToParent ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ClipToParent(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlay::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetControlPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetControlSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetControlBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsScreenOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsScreenOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayCollectionPtr _IAgStkGraphicsScreenOverlay::GetOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayCollection * _result = 0;
    HRESULT _hr = get_Overlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayCollectionPtr(_result, false);
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::GetPadding ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Padding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlay::PutPadding ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Padding(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsScreenOverlay::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsScreenOverlay::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::OverlayToControl ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_OverlayToControl(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsScreenOverlay::ControlToOverlay ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ControlToOverlay(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgStkGraphicsScreenOverlay::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsScreenOverlay::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsScreenOverlayCollection wrapper method implementations
//

int _IAgStkGraphicsScreenOverlayCollection::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayCollection::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayPtr _IAgStkGraphicsScreenOverlayCollection::GetItem ( int Index ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsScreenOverlayCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayCollection::Contains ( struct IAgStkGraphicsScreenOverlay * Item ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayCollection::Remove ( struct IAgStkGraphicsScreenOverlay * Item ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsScreenOverlayCollection::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsScreenOverlayCollection::Add ( struct IAgStkGraphicsScreenOverlay * Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsScreenOverlayManager wrapper method implementations
//

int _IAgStkGraphicsScreenOverlayManager::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayManager::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayPtr _IAgStkGraphicsScreenOverlayManager::GetItem ( int Index ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsScreenOverlayManager::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayManager::Contains ( struct IAgStkGraphicsScreenOverlay * Item ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayManager::Remove ( struct IAgStkGraphicsScreenOverlay * Item ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsScreenOverlayManager::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsScreenOverlayManager::Add ( struct IAgStkGraphicsScreenOverlay * Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgStkGraphicsScreenOverlayManager::GetBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayCollectionPtr _IAgStkGraphicsScreenOverlayManager::GetOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayCollection * _result = 0;
    HRESULT _hr = get_Overlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayCollectionPtr(_result, false);
}

SAFEARRAY * _IAgStkGraphicsScreenOverlayManager::GetPadding ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Padding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlayManager::PutPadding ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Padding(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsScreenOverlayManager::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsScreenOverlayManager::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsScreenOverlayPickResult wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsScreenOverlayPickResult::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsScreenOverlayPickResult::GetControlPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsScreenOverlayPtr _IAgStkGraphicsScreenOverlayPickResult::GetOverlay ( ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = get_Overlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsSolidPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsSolidPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsSolidPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsSolidPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsSolidPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSolidPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsSolidPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsSolidPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSolidPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsSolidPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsSolidPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSolidPrimitive::GetAffectedByLighting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AffectedByLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutAffectedByLighting ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AffectedByLighting(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSolidPrimitive::GetDisplayFill ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutDisplayFill ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayFill(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSolidPrimitive::GetDisplaySilhouette ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplaySilhouette(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutDisplaySilhouette ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplaySilhouette(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsSolidPrimitive::GetSilhouetteColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_SilhouetteColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutSilhouetteColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_SilhouetteColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsSolidPrimitive::GetSilhouetteTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_SilhouetteTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutSilhouetteTranslucency ( float pRetVal ) {
    HRESULT _hr = put_SilhouetteTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsSolidPrimitive::GetSilhouetteWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_SilhouetteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutSilhouetteWidth ( float pRetVal ) {
    HRESULT _hr = put_SilhouetteWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsSolidPrimitive::GetMinimumSilhouetteWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumSilhouetteWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsSolidPrimitive::GetMaximumSilhouetteWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumSilhouetteWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsSolidPrimitive::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutDisplayOutline ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayOutline(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsSolidPrimitive::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsSolidPrimitive::GetOutlineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutOutlineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsSolidPrimitive::GetOutlineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutOutlineWidth ( float pRetVal ) {
    HRESULT _hr = put_OutlineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsOutlineAppearance _IAgStkGraphicsSolidPrimitive::GetOutlineAppearance ( ) {
    enum AgEStkGraphicsOutlineAppearance _result;
    HRESULT _hr = get_OutlineAppearance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutOutlineAppearance ( enum AgEStkGraphicsOutlineAppearance pRetVal ) {
    HRESULT _hr = put_OutlineAppearance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsSolidPrimitive::GetBackLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackLineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutBackLineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BackLineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsSolidPrimitive::GetBackLineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_BackLineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutBackLineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_BackLineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsSolidPrimitive::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgOrientationPtr _IAgStkGraphicsSolidPrimitive::GetRotation ( ) {
    struct STKUtil::IAgOrientation * _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgOrientationPtr(_result, false);
}

void _IAgStkGraphicsSolidPrimitive::PutRotation ( struct STKUtil::IAgOrientation * ppRetVal ) {
    HRESULT _hr = put_Rotation(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsSolidPrimitive::GetScale ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutScale ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Scale(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsSolidPrimitive::GetBackLineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BackLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSolidPrimitive::PutBackLineWidth ( float pRetVal ) {
    HRESULT _hr = put_BackLineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsSetHint _IAgStkGraphicsSolidPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsSolidPrimitive::SetWithResult ( struct IAgStkGraphicsSolidTriangulatorResult * SolidTriangulatorResult ) {
    HRESULT _hr = raw_SetWithResult(SolidTriangulatorResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsSolidPrimitive::Set ( SAFEARRAY * * Positions, SAFEARRAY * * Normals, SAFEARRAY * * Indices, SAFEARRAY * * OutlineIndices, enum AgEStkGraphicsWindingOrder WindingOrder, struct IAgStkGraphicsBoundingSphere * BoundingSphere, VARIANT_BOOL Closed ) {
    HRESULT _hr = raw_Set(Positions, Normals, Indices, OutlineIndices, WindingOrder, BoundingSphere, Closed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgStkGraphicsSolidPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsSolidPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAgStkGraphicsStereoscopic wrapper method implementations
//

enum AgEStkGraphicsStereoscopicDisplayMode IAgStkGraphicsStereoscopic::GetDisplayMode ( ) {
    enum AgEStkGraphicsStereoscopicDisplayMode _result;
    HRESULT _hr = get_DisplayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsStereoscopic::PutDisplayMode ( enum AgEStkGraphicsStereoscopicDisplayMode pRetVal ) {
    HRESULT _hr = put_DisplayMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsStereoscopic::GetAutomaticallyComputeProjectionDistance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeProjectionDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsStereoscopic::PutAutomaticallyComputeProjectionDistance ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeProjectionDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsStereoscopic::GetProjectionDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_ProjectionDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsStereoscopic::PutProjectionDistance ( double pRetVal ) {
    HRESULT _hr = put_ProjectionDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IAgStkGraphicsStereoscopic::GetEyeSeparationFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_EyeSeparationFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsStereoscopic::PutEyeSeparationFactor ( double pRetVal ) {
    HRESULT _hr = put_EyeSeparationFactor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsStereoscopic wrapper method implementations
//

enum AgEStkGraphicsStereoscopicDisplayMode _IAgStkGraphicsStereoscopic::GetDisplayMode ( ) {
    enum AgEStkGraphicsStereoscopicDisplayMode _result;
    HRESULT _hr = get_DisplayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsStereoscopic::PutDisplayMode ( enum AgEStkGraphicsStereoscopicDisplayMode pRetVal ) {
    HRESULT _hr = put_DisplayMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsStereoscopic::GetAutomaticallyComputeProjectionDistance ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeProjectionDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsStereoscopic::PutAutomaticallyComputeProjectionDistance ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeProjectionDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsStereoscopic::GetProjectionDistance ( ) {
    double _result = 0;
    HRESULT _hr = get_ProjectionDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsStereoscopic::PutProjectionDistance ( double pRetVal ) {
    HRESULT _hr = put_ProjectionDistance(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsStereoscopic::GetEyeSeparationFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_EyeSeparationFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsStereoscopic::PutEyeSeparationFactor ( double pRetVal ) {
    HRESULT _hr = put_EyeSeparationFactor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsSurfaceMeshPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsSurfaceMeshPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsSurfaceMeshPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSurfaceMeshPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsSurfaceMeshPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSurfaceMeshPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsSurfaceMeshPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsSurfaceMeshPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsRendererTexture2DPtr _IAgStkGraphicsSurfaceMeshPrimitive::GetTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = get_Texture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutTexture ( struct IAgStkGraphicsRendererTexture2D * ppRetVal ) {
    HRESULT _hr = put_Texture(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSurfaceMeshPrimitive::GetWireframe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Wireframe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutWireframe ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Wireframe(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsWindingOrder _IAgStkGraphicsSurfaceMeshPrimitive::GetTriangleWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_TriangleWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsSetHint _IAgStkGraphicsSurfaceMeshPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsSurfaceMeshRenderingMethod _IAgStkGraphicsSurfaceMeshPrimitive::GetRenderingMethod ( ) {
    enum AgEStkGraphicsSurfaceMeshRenderingMethod _result;
    HRESULT _hr = get_RenderingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsSurfaceMeshPrimitive::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureMatrixPtr _IAgStkGraphicsSurfaceMeshPrimitive::GetTextureMatrix ( ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = get_TextureMatrix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutTextureMatrix ( struct IAgStkGraphicsTextureMatrix * ppRetVal ) {
    HRESULT _hr = put_TextureMatrix(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsSurfaceMeshPrimitive::GetTransparentTextureBorder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransparentTextureBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutTransparentTextureBorder ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_TransparentTextureBorder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsSurfaceMeshPrimitive::Set ( struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator ) {
    HRESULT _hr = raw_Set(SurfaceTriangulator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsSurfaceMeshPrimitive::SetWithoutTexturing ( struct IAgStkGraphicsSurfaceTriangulatorResult * SurfaceTriangulator ) {
    HRESULT _hr = raw_SetWithoutTexturing(SurfaceTriangulator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsSurfaceMeshPrimitive::Supported ( enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Supported(RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsSurfaceMeshPrimitive::SupportedWithDefaultRenderingMethod ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SupportedWithDefaultRenderingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t _IAgStkGraphicsSurfaceMeshPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsSurfaceMeshPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsTerrainCollection wrapper method implementations
//

int _IAgStkGraphicsTerrainCollection::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsTerrainCollection::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsTerrainOverlayPtr _IAgStkGraphicsTerrainCollection::GetItem ( int Index ) {
    struct IAgStkGraphicsTerrainOverlay * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsTerrainCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsTerrainCollection::Contains ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(TerrainOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsTerrainCollection::ContainsUriString ( _bstr_t StringUri ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsUriString(StringUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsTerrainCollection::Remove ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(TerrainOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsTerrainCollection::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTerrainCollection::Add ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    HRESULT _hr = raw_Add(TerrainOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTerrainCollection::AddAsync ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    HRESULT _hr = raw_AddAsync(TerrainOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int _IAgStkGraphicsTerrainCollection::IndexOf ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    int _result = 0;
    HRESULT _hr = raw_IndexOf(TerrainOverlay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsTerrainCollection::IndexOfUriString ( _bstr_t StringUri ) {
    int _result = 0;
    HRESULT _hr = raw_IndexOfUriString(StringUri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsTerrainOverlayPtr _IAgStkGraphicsTerrainCollection::AddUriString ( _bstr_t Uri ) {
    struct IAgStkGraphicsTerrainOverlay * _result = 0;
    HRESULT _hr = raw_AddUriString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayPtr(_result, false);
}

IAgStkGraphicsTerrainOverlayPtr _IAgStkGraphicsTerrainCollection::AddAsyncUriString ( _bstr_t Uri ) {
    struct IAgStkGraphicsTerrainOverlay * _result = 0;
    HRESULT _hr = raw_AddAsyncUriString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayPtr(_result, false);
}

HRESULT _IAgStkGraphicsTerrainCollection::Swap ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay1, struct IAgStkGraphicsTerrainOverlay * TerrainOverlay2 ) {
    HRESULT _hr = raw_Swap(TerrainOverlay1, TerrainOverlay2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTerrainCollection::SwapByIndex ( int Index1, int Index2 ) {
    HRESULT _hr = raw_SwapByIndex(Index1, Index2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTerrainCollection::Move ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay, int NewPosition ) {
    HRESULT _hr = raw_Move(TerrainOverlay, NewPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTerrainCollection::MoveByIndex ( int Index, int NewPosition ) {
    HRESULT _hr = raw_MoveByIndex(Index, NewPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTerrainCollection::BringToFront ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    HRESULT _hr = raw_BringToFront(TerrainOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTerrainCollection::SendToBack ( struct IAgStkGraphicsTerrainOverlay * TerrainOverlay ) {
    HRESULT _hr = raw_SendToBack(TerrainOverlay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsTerrainOverlay wrapper method implementations
//

_bstr_t _IAgStkGraphicsTerrainOverlay::GetCentralBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CentralBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

SAFEARRAY * _IAgStkGraphicsTerrainOverlay::GetExtent ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum AgEStkGraphicsGlobeOverlayRole _IAgStkGraphicsTerrainOverlay::GetRole ( ) {
    enum AgEStkGraphicsGlobeOverlayRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsTerrainOverlay::GetUriAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UriAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsTerrainOverlay::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsTerrainOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsTerrainOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTerrainOverlay::GetAltitudeOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTerrainOverlay::PutAltitudeOffset ( double pRetVal ) {
    HRESULT _hr = put_AltitudeOffset(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTerrainOverlay::GetAltitudeScale ( ) {
    double _result = 0;
    HRESULT _hr = get_AltitudeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTerrainOverlay::PutAltitudeScale ( double pRetVal ) {
    HRESULT _hr = put_AltitudeScale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTerrainOverlay::GetSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsTextBatchPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsTextBatchPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsTextBatchPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsTextBatchPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsTextBatchPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextBatchPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsTextBatchPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsTextBatchPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextBatchPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsTextBatchPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsTextBatchPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsSetHint _IAgStkGraphicsTextBatchPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double _IAgStkGraphicsTextBatchPrimitive::GetBoundingSphereScale ( ) {
    double _result = 0;
    HRESULT _hr = get_BoundingSphereScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutBoundingSphereScale ( double pRetVal ) {
    HRESULT _hr = put_BoundingSphereScale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGraphicsFontPtr _IAgStkGraphicsTextBatchPrimitive::GetFont ( ) {
    struct IAgStkGraphicsGraphicsFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontPtr(_result, false);
}

OLE_COLOR _IAgStkGraphicsTextBatchPrimitive::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsTextBatchPrimitive::GetOutlineTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutOutlineTranslucency ( float pRetVal ) {
    HRESULT _hr = put_OutlineTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextBatchPrimitive::GetAlignToPixel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlignToPixel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutAlignToPixel ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AlignToPixel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDistanceDisplayConditionPtr _IAgStkGraphicsTextBatchPrimitive::GetDistanceDisplayConditionPerString ( ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = get_DistanceDisplayConditionPerString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsTextBatchPrimitive::PutDistanceDisplayConditionPerString ( struct IAgStkGraphicsDistanceDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DistanceDisplayConditionPerString(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextBatchPrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextBatchPrimitive::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void _IAgStkGraphicsTextBatchPrimitive::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::Set ( SAFEARRAY * * Positions, SAFEARRAY * * Text ) {
    HRESULT _hr = raw_Set(Positions, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetWithOptionalParameters ( SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetWithOptionalParameters(Positions, Text, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetWithOptionalParametersAndRenderPass ( SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetWithOptionalParametersAndRenderPass(Positions, Text, OptionalParameters, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text ) {
    HRESULT _hr = raw_SetCartographic(CentralBody, Positions, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetCartographicWithOptionalParameters ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetCartographicWithOptionalParameters(CentralBody, Positions, Text, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetCartographicWithOptionalParametersAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetCartographicWithOptionalParametersAndRenderPass(CentralBody, Positions, Text, OptionalParameters, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetPartial ( SAFEARRAY * * Positions, SAFEARRAY * * Text, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartial(Positions, Text, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetPartialWithIndicesOrder ( SAFEARRAY * * Positions, SAFEARRAY * * Text, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialWithIndicesOrder(Positions, Text, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetPartialWithOptionalParameters ( SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialWithOptionalParameters(Positions, Text, OptionalParameters, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetPartialWithOptionalParametersIndicesOrderAndRenderPass ( SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialWithOptionalParametersIndicesOrderAndRenderPass(Positions, Text, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetPartialCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographic(CentralBody, Positions, Text, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetPartialCartographicWithIndicesOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithIndicesOrder(CentralBody, Positions, Text, Indices, IndicesOrderHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetPartialCartographicWithOptionalParameters ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_SetPartialCartographicWithOptionalParameters(CentralBody, Positions, Text, OptionalParameters, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitive::SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * Text, struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * OptionalParameters, SAFEARRAY * * Indices, enum AgEStkGraphicsIndicesOrderHint IndicesOrderHint, enum AgEStkGraphicsRenderPassHint RenderPassHint ) {
    HRESULT _hr = raw_SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(CentralBody, Positions, Text, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgStkGraphicsTextBatchPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsTextBatchPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextBatchPrimitive::GetRenderInScreenSpace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RenderInScreenSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitive::PutRenderInScreenSpace ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_RenderInScreenSpace(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsTextBatchPrimitiveOptionalParameters wrapper method implementations
//

enum AgEStkGraphicsOrigin _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetOrigin ( ) {
    enum AgEStkGraphicsOrigin _result;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutOrigin ( enum AgEStkGraphicsOrigin pRetVal ) {
    HRESULT _hr = put_Origin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetEyeOffset ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_EyeOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutEyeOffset ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_EyeOffset(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetPixelOffset ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PixelOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutPixelOffset ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_PixelOffset(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetMaximumStringLength ( ) {
    int _result = 0;
    HRESULT _hr = get_MaximumStringLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutMaximumStringLength ( int pRetVal ) {
    HRESULT _hr = put_MaximumStringLength(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::SetOrigins ( SAFEARRAY * * Origins ) {
    HRESULT _hr = raw_SetOrigins(Origins);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::SetEyeOffsets ( SAFEARRAY * * EyeOffsets ) {
    HRESULT _hr = raw_SetEyeOffsets(EyeOffsets);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::SetPixelOffsets ( SAFEARRAY * * PixelOffsets ) {
    HRESULT _hr = raw_SetPixelOffsets(PixelOffsets);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::SetColors ( SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetColors(Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::GetScreenSpaceRendering ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScreenSpaceRendering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextBatchPrimitiveOptionalParameters::PutScreenSpaceRendering ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ScreenSpaceRendering(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsTextOverlay wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetPinningPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PinningPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutPinningPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_PinningPosition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextOverlay::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutX ( double pRetVal ) {
    HRESULT _hr = put_X(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsTextOverlay::GetXUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_XUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutXUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_XUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextOverlay::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutY ( double pRetVal ) {
    HRESULT _hr = put_Y(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsTextOverlay::GetYUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_YUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutYUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_YUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Size(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextOverlay::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutWidth ( double pRetVal ) {
    HRESULT _hr = put_Width(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsTextOverlay::GetWidthUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_WidthUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutWidthUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_WidthUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextOverlay::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutHeight ( double pRetVal ) {
    HRESULT _hr = put_Height(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsTextOverlay::GetHeightUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_HeightUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutHeightUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_HeightUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetMinimumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MinimumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutMinimumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MinimumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetMaximumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MaximumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutMaximumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MaximumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_COLOR _IAgStkGraphicsTextOverlay::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutBorderColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BorderColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsTextOverlay::GetBorderSize ( ) {
    int _result = 0;
    HRESULT _hr = get_BorderSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutBorderSize ( int pRetVal ) {
    HRESULT _hr = put_BorderSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsTextOverlay::GetBorderTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_BorderTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutBorderTranslucency ( float pRetVal ) {
    HRESULT _hr = put_BorderTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextOverlay::GetTranslationX ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutTranslationX ( double pRetVal ) {
    HRESULT _hr = put_TranslationX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextOverlay::GetTranslationY ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutTranslationY ( double pRetVal ) {
    HRESULT _hr = put_TranslationY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextOverlay::GetRotationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutRotationAngle ( double pRetVal ) {
    HRESULT _hr = put_RotationAngle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetRotationPoint ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RotationPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutRotationPoint ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_RotationPoint(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextOverlay::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutScale ( double pRetVal ) {
    HRESULT _hr = put_Scale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextOverlay::GetFlipX ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutFlipX ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextOverlay::GetFlipY ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutFlipY ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayOrigin _IAgStkGraphicsTextOverlay::GetOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayOrigin _result;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutOrigin ( enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) {
    HRESULT _hr = put_Origin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayPinningOrigin _IAgStkGraphicsTextOverlay::GetPinningOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayPinningOrigin _result;
    HRESULT _hr = get_PinningOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutPinningOrigin ( enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) {
    HRESULT _hr = put_PinningOrigin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayContainerPtr _IAgStkGraphicsTextOverlay::GetParent ( ) {
    struct IAgStkGraphicsScreenOverlayContainer * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayContainerPtr(_result, false);
}

float _IAgStkGraphicsTextOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsTextOverlay::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextOverlay::GetPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextOverlay::GetClipToParent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipToParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutClipToParent ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ClipToParent(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextOverlay::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetControlPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetControlSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetControlBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsTextOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsTextOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayCollectionPtr _IAgStkGraphicsTextOverlay::GetOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayCollection * _result = 0;
    HRESULT _hr = get_Overlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayCollectionPtr(_result, false);
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::GetPadding ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Padding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutPadding ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Padding(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsTextOverlay::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextOverlay::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::OverlayToControl ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_OverlayToControl(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsTextOverlay::ControlToOverlay ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ControlToOverlay(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _IAgStkGraphicsTextOverlay::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _IAgStkGraphicsTextOverlay::PutText ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Text(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsTextOverlay::GetOutlineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_OutlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextOverlay::PutOutlineColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_OutlineColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsGraphicsFontPtr _IAgStkGraphicsTextOverlay::GetFont ( ) {
    struct IAgStkGraphicsGraphicsFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontPtr(_result, false);
}

void _IAgStkGraphicsTextOverlay::PutFont ( struct IAgStkGraphicsGraphicsFont * ppRetVal ) {
    HRESULT _hr = put_Font(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgStkGraphicsTextOverlay::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsTextOverlay::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsTextureMatrix wrapper method implementations
//

float _IAgStkGraphicsTextureMatrix::GetM11 ( ) {
    float _result = 0;
    HRESULT _hr = get_M11(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM12 ( ) {
    float _result = 0;
    HRESULT _hr = get_M12(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM13 ( ) {
    float _result = 0;
    HRESULT _hr = get_M13(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM14 ( ) {
    float _result = 0;
    HRESULT _hr = get_M14(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM21 ( ) {
    float _result = 0;
    HRESULT _hr = get_M21(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM22 ( ) {
    float _result = 0;
    HRESULT _hr = get_M22(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM23 ( ) {
    float _result = 0;
    HRESULT _hr = get_M23(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM24 ( ) {
    float _result = 0;
    HRESULT _hr = get_M24(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM31 ( ) {
    float _result = 0;
    HRESULT _hr = get_M31(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM32 ( ) {
    float _result = 0;
    HRESULT _hr = get_M32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM33 ( ) {
    float _result = 0;
    HRESULT _hr = get_M33(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM34 ( ) {
    float _result = 0;
    HRESULT _hr = get_M34(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM41 ( ) {
    float _result = 0;
    HRESULT _hr = get_M41(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM42 ( ) {
    float _result = 0;
    HRESULT _hr = get_M42(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM43 ( ) {
    float _result = 0;
    HRESULT _hr = get_M43(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsTextureMatrix::GetM44 ( ) {
    float _result = 0;
    HRESULT _hr = get_M44(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsTextureScreenOverlay wrapper method implementations
//

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Position(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetPinningPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_PinningPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutPinningPosition ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_PinningPosition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextureScreenOverlay::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutX ( double pRetVal ) {
    HRESULT _hr = put_X(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsTextureScreenOverlay::GetXUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_XUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutXUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_XUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextureScreenOverlay::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutY ( double pRetVal ) {
    HRESULT _hr = put_Y(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsTextureScreenOverlay::GetYUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_YUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutYUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_YUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Size(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextureScreenOverlay::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutWidth ( double pRetVal ) {
    HRESULT _hr = put_Width(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsTextureScreenOverlay::GetWidthUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_WidthUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutWidthUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_WidthUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextureScreenOverlay::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutHeight ( double pRetVal ) {
    HRESULT _hr = put_Height(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayUnit _IAgStkGraphicsTextureScreenOverlay::GetHeightUnit ( ) {
    enum AgEStkGraphicsScreenOverlayUnit _result;
    HRESULT _hr = get_HeightUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutHeightUnit ( enum AgEStkGraphicsScreenOverlayUnit pRetVal ) {
    HRESULT _hr = put_HeightUnit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetMinimumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MinimumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutMinimumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MinimumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetMaximumSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MaximumSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutMaximumSize ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_MaximumSize(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Bounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

OLE_COLOR _IAgStkGraphicsTextureScreenOverlay::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutBorderColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_BorderColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsTextureScreenOverlay::GetBorderSize ( ) {
    int _result = 0;
    HRESULT _hr = get_BorderSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutBorderSize ( int pRetVal ) {
    HRESULT _hr = put_BorderSize(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsTextureScreenOverlay::GetBorderTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_BorderTranslucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutBorderTranslucency ( float pRetVal ) {
    HRESULT _hr = put_BorderTranslucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextureScreenOverlay::GetTranslationX ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutTranslationX ( double pRetVal ) {
    HRESULT _hr = put_TranslationX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextureScreenOverlay::GetTranslationY ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutTranslationY ( double pRetVal ) {
    HRESULT _hr = put_TranslationY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextureScreenOverlay::GetRotationAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_RotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutRotationAngle ( double pRetVal ) {
    HRESULT _hr = put_RotationAngle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetRotationPoint ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RotationPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutRotationPoint ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_RotationPoint(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double _IAgStkGraphicsTextureScreenOverlay::GetScale ( ) {
    double _result = 0;
    HRESULT _hr = get_Scale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutScale ( double pRetVal ) {
    HRESULT _hr = put_Scale(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextureScreenOverlay::GetFlipX ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutFlipX ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextureScreenOverlay::GetFlipY ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FlipY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutFlipY ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_FlipY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayOrigin _IAgStkGraphicsTextureScreenOverlay::GetOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayOrigin _result;
    HRESULT _hr = get_Origin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutOrigin ( enum AgEStkGraphicsScreenOverlayOrigin pRetVal ) {
    HRESULT _hr = put_Origin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsScreenOverlayPinningOrigin _IAgStkGraphicsTextureScreenOverlay::GetPinningOrigin ( ) {
    enum AgEStkGraphicsScreenOverlayPinningOrigin _result;
    HRESULT _hr = get_PinningOrigin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutPinningOrigin ( enum AgEStkGraphicsScreenOverlayPinningOrigin pRetVal ) {
    HRESULT _hr = put_PinningOrigin(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayContainerPtr _IAgStkGraphicsTextureScreenOverlay::GetParent ( ) {
    struct IAgStkGraphicsScreenOverlayContainer * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayContainerPtr(_result, false);
}

float _IAgStkGraphicsTextureScreenOverlay::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsTextureScreenOverlay::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextureScreenOverlay::GetPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextureScreenOverlay::GetClipToParent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ClipToParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutClipToParent ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ClipToParent(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTextureScreenOverlay::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetControlPosition ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetControlSize ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetControlBounds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ControlBounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsTextureScreenOverlay::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsTextureScreenOverlay::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsScreenOverlayCollectionPtr _IAgStkGraphicsTextureScreenOverlay::GetOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayCollection * _result = 0;
    HRESULT _hr = get_Overlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayCollectionPtr(_result, false);
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::GetPadding ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Padding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutPadding ( SAFEARRAY * ppRetVal ) {
    HRESULT _hr = put_Padding(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _IAgStkGraphicsTextureScreenOverlay::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTextureScreenOverlay::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::OverlayToControl ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_OverlayToControl(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SAFEARRAY * _IAgStkGraphicsTextureScreenOverlay::ControlToOverlay ( double X, double Y ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ControlToOverlay(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsRendererTexture2DPtr _IAgStkGraphicsTextureScreenOverlay::GetTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = get_Texture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

void _IAgStkGraphicsTextureScreenOverlay::PutTexture ( struct IAgStkGraphicsRendererTexture2D * ppRetVal ) {
    HRESULT _hr = put_Texture(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTextureScreenOverlay::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void _IAgStkGraphicsTextureScreenOverlay::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsMaintainAspectRatio _IAgStkGraphicsTextureScreenOverlay::GetMaintainAspectRatio ( ) {
    enum AgEStkGraphicsMaintainAspectRatio _result;
    HRESULT _hr = get_MaintainAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTextureScreenOverlay::PutMaintainAspectRatio ( enum AgEStkGraphicsMaintainAspectRatio pRetVal ) {
    HRESULT _hr = put_MaintainAspectRatio(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _IAgStkGraphicsTextureScreenOverlay::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsTextureScreenOverlay::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsTimeIntervalDisplayCondition wrapper method implementations
//

STKUtil::IAgDatePtr _IAgStkGraphicsTimeIntervalDisplayCondition::GetMinimumTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_MinimumTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

void _IAgStkGraphicsTimeIntervalDisplayCondition::PutMinimumTime ( struct STKUtil::IAgDate * ppRetVal ) {
    HRESULT _hr = put_MinimumTime(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

STKUtil::IAgDatePtr _IAgStkGraphicsTimeIntervalDisplayCondition::GetMaximumTime ( ) {
    struct STKUtil::IAgDate * _result = 0;
    HRESULT _hr = get_MaximumTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return STKUtil::IAgDatePtr(_result, false);
}

void _IAgStkGraphicsTimeIntervalDisplayCondition::PutMaximumTime ( struct STKUtil::IAgDate * ppRetVal ) {
    HRESULT _hr = put_MaximumTime(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsTriangleMeshPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsTriangleMeshPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsTriangleMeshPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTriangleMeshPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsTriangleMeshPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTriangleMeshPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsTriangleMeshPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsTriangleMeshPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTriangleMeshPrimitive::GetWireframe ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Wireframe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutWireframe ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Wireframe(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTriangleMeshPrimitive::GetRenderBackThenFrontFaces ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RenderBackThenFrontFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutRenderBackThenFrontFaces ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_RenderBackThenFrontFaces(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTriangleMeshPrimitive::GetLighting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Lighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutLighting ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Lighting(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsWindingOrder _IAgStkGraphicsTriangleMeshPrimitive::GetTriangleWindingOrder ( ) {
    enum AgEStkGraphicsWindingOrder _result;
    HRESULT _hr = get_TriangleWindingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutTriangleWindingOrder ( enum AgEStkGraphicsWindingOrder pRetVal ) {
    HRESULT _hr = put_TriangleWindingOrder(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsCullFace _IAgStkGraphicsTriangleMeshPrimitive::GetCullFace ( ) {
    enum AgEStkGraphicsCullFace _result;
    HRESULT _hr = get_CullFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutCullFace ( enum AgEStkGraphicsCullFace pRetVal ) {
    HRESULT _hr = put_CullFace(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsRendererShadeModel _IAgStkGraphicsTriangleMeshPrimitive::GetShadeModel ( ) {
    enum AgEStkGraphicsRendererShadeModel _result;
    HRESULT _hr = get_ShadeModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutShadeModel ( enum AgEStkGraphicsRendererShadeModel pRetVal ) {
    HRESULT _hr = put_ShadeModel(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsRendererTexture2DPtr _IAgStkGraphicsTriangleMeshPrimitive::GetTexture ( ) {
    struct IAgStkGraphicsRendererTexture2D * _result = 0;
    HRESULT _hr = get_Texture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRendererTexture2DPtr(_result, false);
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutTexture ( struct IAgStkGraphicsRendererTexture2D * ppRetVal ) {
    HRESULT _hr = put_Texture(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsTextureFilter2DPtr _IAgStkGraphicsTriangleMeshPrimitive::GetTextureFilter ( ) {
    struct IAgStkGraphicsTextureFilter2D * _result = 0;
    HRESULT _hr = get_TextureFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DPtr(_result, false);
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutTextureFilter ( struct IAgStkGraphicsTextureFilter2D * ppRetVal ) {
    HRESULT _hr = put_TextureFilter(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsSetHint _IAgStkGraphicsTriangleMeshPrimitive::GetSetHint ( ) {
    enum AgEStkGraphicsSetHint _result;
    HRESULT _hr = get_SetHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _IAgStkGraphicsTriangleMeshPrimitive::Set ( SAFEARRAY * * Positions, SAFEARRAY * * Normals, SAFEARRAY * * Indices ) {
    HRESULT _hr = raw_Set(Positions, Normals, Indices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTriangleMeshPrimitive::SetWithOptionalParameters ( SAFEARRAY * * Positions, SAFEARRAY * * Normals, SAFEARRAY * * Indices, struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * OptionalParameters ) {
    HRESULT _hr = raw_SetWithOptionalParameters(Positions, Normals, Indices, OptionalParameters);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTriangleMeshPrimitive::SetTriangulator ( struct IAgStkGraphicsTriangulatorResult * Triangulator ) {
    HRESULT _hr = raw_SetTriangulator(Triangulator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgStkGraphicsTriangleMeshPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsTriangleMeshPrimitive::GetCentralBodyClipped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CentralBodyClipped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsTriangleMeshPrimitive::PutCentralBodyClipped ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CentralBodyClipped(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters wrapper method implementations
//

HRESULT _IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters::SetTextureCoordinates ( SAFEARRAY * * TextureCoordinates ) {
    HRESULT _hr = raw_SetTextureCoordinates(TextureCoordinates);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters::SetPerVertexColors ( SAFEARRAY * * Colors ) {
    HRESULT _hr = raw_SetPerVertexColors(Colors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsBoxTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSolidTriangulatorResultPtr _IAgStkGraphicsBoxTriangulatorInitializer::Compute ( SAFEARRAY * * Size ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

//
// interface _IAgStkGraphicsCylinderTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSolidTriangulatorResultPtr _IAgStkGraphicsCylinderTriangulatorInitializer::CreateSimple ( double Length, double Radius ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_CreateSimple(Length, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSolidTriangulatorResultPtr _IAgStkGraphicsCylinderTriangulatorInitializer::Compute ( double Length, double BottomRadius, double TopRadius, int Slices, enum AgEStkGraphicsCylinderFill CylinderFill ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(Length, BottomRadius, TopRadius, Slices, CylinderFill, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

//
// interface _IAgStkGraphicsEllipsoidTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSolidTriangulatorResultPtr _IAgStkGraphicsEllipsoidTriangulatorInitializer::ComputeSimple ( SAFEARRAY * * Radii ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSimple(Radii, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSolidTriangulatorResultPtr _IAgStkGraphicsEllipsoidTriangulatorInitializer::Compute ( SAFEARRAY * * Radii, int Slices, int Stacks ) {
    struct IAgStkGraphicsSolidTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(Radii, Slices, Stacks, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidTriangulatorResultPtr(_result, false);
}

//
// interface _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::Compute ( _bstr_t CentralBody, SAFEARRAY * * BottomPositions, SAFEARRAY * * TopPositions ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(CentralBody, BottomPositions, TopPositions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeWithWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * BottomPositions, SAFEARRAY * * TopPositions, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithWindingOrder(CentralBody, BottomPositions, TopPositions, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeCartographic ( _bstr_t CentralBody, SAFEARRAY * * BottomPositions, SAFEARRAY * * TopPositions ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographic(CentralBody, BottomPositions, TopPositions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeCartographicWithWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * BottomPositions, SAFEARRAY * * TopPositions, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographicWithWindingOrder(CentralBody, BottomPositions, TopPositions, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeWithAltitudes ( _bstr_t CentralBody, SAFEARRAY * * Positions, double BottomAltitude, double TopAltitude ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithAltitudes(CentralBody, Positions, BottomAltitude, TopAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeWithAltitudesAndWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, double BottomAltitude, double TopAltitude, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithAltitudesAndWindingOrder(CentralBody, Positions, BottomAltitude, TopAltitude, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeCartographicWithAltitudes ( _bstr_t CentralBody, SAFEARRAY * * Positions, double BottomAltitude, double TopAltitude ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographicWithAltitudes(CentralBody, Positions, BottomAltitude, TopAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeCartographicWithAltitudesAndWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, double BottomAltitude, double TopAltitude, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographicWithAltitudesAndWindingOrder(CentralBody, Positions, BottomAltitude, TopAltitude, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeSingleConstantAltitude ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSingleConstantAltitude(CentralBody, Positions, Altitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeSingleConstantAltitudeWithWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSingleConstantAltitudeWithWindingOrder(CentralBody, Positions, Altitude, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeSingleConstantAltitudeCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSingleConstantAltitudeCartographic(CentralBody, Positions, Altitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer::ComputeSingleConstantAltitudeCartographicWithWindingOrder ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSingleConstantAltitudeCartographicWithWindingOrder(CentralBody, Positions, Altitude, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorResultPtr(_result, false);
}

//
// interface _IAgStkGraphicsSurfaceExtentTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSurfaceTriangulatorResultPtr _IAgStkGraphicsSurfaceExtentTriangulatorInitializer::ComputeSimple ( _bstr_t CentralBody, SAFEARRAY * * Extent ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeSimple(CentralBody, Extent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr _IAgStkGraphicsSurfaceExtentTriangulatorInitializer::Compute ( _bstr_t CentralBody, SAFEARRAY * * Extent, double Altitude, double Granularity ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(CentralBody, Extent, Altitude, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

//
// interface _IAgStkGraphicsSurfacePolygonTriangulatorInitializer wrapper method implementations
//

IAgStkGraphicsSurfaceTriangulatorResultPtr _IAgStkGraphicsSurfacePolygonTriangulatorInitializer::Compute ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_Compute(CentralBody, Positions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr _IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeCartographic ( _bstr_t CentralBody, SAFEARRAY * * Positions ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographic(CentralBody, Positions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr _IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeWithHole ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * HolePositions ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithHole(CentralBody, Positions, HolePositions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr _IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeWithHoleAltitudeAndGranularity ( _bstr_t CentralBody, SAFEARRAY * * Positions, SAFEARRAY * * HolePositions, double Altitude, double Granularity ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithHoleAltitudeAndGranularity(CentralBody, Positions, HolePositions, Altitude, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr _IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeWithAltitudeAndGranularity ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude, double Granularity, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeWithAltitudeAndGranularity(CentralBody, Positions, Altitude, Granularity, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

IAgStkGraphicsSurfaceTriangulatorResultPtr _IAgStkGraphicsSurfacePolygonTriangulatorInitializer::ComputeCartographicWithAltitudeAndGranularity ( _bstr_t CentralBody, SAFEARRAY * * Positions, double Altitude, double Granularity, enum AgEStkGraphicsWindingOrder PositionsWindingOrder ) {
    struct IAgStkGraphicsSurfaceTriangulatorResult * _result = 0;
    HRESULT _hr = raw_ComputeCartographicWithAltitudeAndGranularity(CentralBody, Positions, Altitude, Granularity, PositionsWindingOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceTriangulatorResultPtr(_result, false);
}

//
// interface _IAgStkGraphicsSurfaceShapesInitializer wrapper method implementations
//

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeCircleWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double Radius, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeCircleWithGranularity(CentralBody, Center, Radius, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeCircle ( _bstr_t CentralBody, SAFEARRAY * * Center, double Radius ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeCircle(CentralBody, Center, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeCircleCartographicWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double Radius, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeCircleCartographicWithGranularity(CentralBody, Center, Radius, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeCircleCartographic ( _bstr_t CentralBody, SAFEARRAY * * Center, double Radius ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeCircleCartographic(CentralBody, Center, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeEllipseWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double MajorAxisRadius, double MinorAxisRadius, double Bearing, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeEllipseWithGranularity(CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeEllipse ( _bstr_t CentralBody, SAFEARRAY * * Center, double MajorAxisRadius, double MinorAxisRadius, double Bearing ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeEllipse(CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeEllipseCartographicWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double MajorAxisRadius, double MinorAxisRadius, double Bearing, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeEllipseCartographicWithGranularity(CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeEllipseCartographic ( _bstr_t CentralBody, SAFEARRAY * * Center, double MajorAxisRadius, double MinorAxisRadius, double Bearing ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeEllipseCartographic(CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeSectorWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double InnerRadius, double OuterRadius, double StartBearing, double EndBearing, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeSectorWithGranularity(CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeSector ( _bstr_t CentralBody, SAFEARRAY * * Center, double InnerRadius, double OuterRadius, double StartBearing, double EndBearing ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeSector(CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeSectorCartographicWithGranularity ( _bstr_t CentralBody, SAFEARRAY * * Center, double InnerRadius, double OuterRadius, double StartBearing, double EndBearing, double Granularity ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeSectorCartographicWithGranularity(CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesResultPtr _IAgStkGraphicsSurfaceShapesInitializer::ComputeSectorCartographic ( _bstr_t CentralBody, SAFEARRAY * * Center, double InnerRadius, double OuterRadius, double StartBearing, double EndBearing ) {
    struct IAgStkGraphicsSurfaceShapesResult * _result = 0;
    HRESULT _hr = raw_ComputeSectorCartographic(CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesResultPtr(_result, false);
}

//
// interface _IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory wrapper method implementations
//

IAgStkGraphicsAGIProcessedImageGlobeOverlayPtr _IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory::InitializeWithString ( _bstr_t Uri ) {
    struct IAgStkGraphicsAGIProcessedImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIProcessedImageGlobeOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsAGIProcessedTerrainOverlayFactory wrapper method implementations
//

IAgStkGraphicsAGIProcessedTerrainOverlayPtr _IAgStkGraphicsAGIProcessedTerrainOverlayFactory::InitializeWithString ( _bstr_t Uri ) {
    struct IAgStkGraphicsAGIProcessedTerrainOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIProcessedTerrainOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsAGIRoamImageGlobeOverlayFactory wrapper method implementations
//

IAgStkGraphicsAGIRoamImageGlobeOverlayPtr _IAgStkGraphicsAGIRoamImageGlobeOverlayFactory::InitializeWithString ( _bstr_t Uri ) {
    struct IAgStkGraphicsAGIRoamImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIRoamImageGlobeOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory wrapper method implementations
//

IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorPtr _IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory::Initialize ( ) {
    struct IAgStkGraphicsCustomImageGlobeOverlayPluginActivator * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorPtr(_result, false);
}

//
// interface _IAgStkGraphicsGeospatialImageGlobeOverlayFactory wrapper method implementations
//

IAgStkGraphicsGeospatialImageGlobeOverlayPtr _IAgStkGraphicsGeospatialImageGlobeOverlayFactory::InitializeWithString ( _bstr_t Uri ) {
    struct IAgStkGraphicsGeospatialImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGeospatialImageGlobeOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsProjectedRasterOverlayFactory wrapper method implementations
//

IAgStkGraphicsProjectedRasterOverlayPtr _IAgStkGraphicsProjectedRasterOverlayFactory::Initialize ( struct IAgStkGraphicsRaster * Raster, struct IAgStkGraphicsProjection * Projection ) {
    struct IAgStkGraphicsProjectedRasterOverlay * _result = 0;
    HRESULT _hr = raw_Initialize(Raster, Projection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectedRasterOverlayPtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsProjectedRasterOverlayFactory::GetSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsProjectionFactory wrapper method implementations
//

IAgStkGraphicsProjectionPtr _IAgStkGraphicsProjectionFactory::Initialize ( ) {
    struct IAgStkGraphicsProjection * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionPtr(_result, false);
}

IAgStkGraphicsProjectionPtr _IAgStkGraphicsProjectionFactory::InitializeWithData ( SAFEARRAY * * Position, struct STKUtil::IAgOrientation * Orientation, double FieldOfViewHorizontal, double FieldOfViewVertical, double NearPlane, double FarPlane ) {
    struct IAgStkGraphicsProjection * _result = 0;
    HRESULT _hr = raw_InitializeWithData(Position, Orientation, FieldOfViewHorizontal, FieldOfViewVertical, NearPlane, FarPlane, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionPtr(_result, false);
}

IAgStkGraphicsProjectionPtr _IAgStkGraphicsProjectionFactory::InitializeFromProjection ( struct IAgStkGraphicsProjection * Projection ) {
    struct IAgStkGraphicsProjection * _result = 0;
    HRESULT _hr = raw_InitializeFromProjection(Projection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionPtr(_result, false);
}

//
// interface _IAgStkGraphicsAltitudeDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsAltitudeDisplayConditionPtr _IAgStkGraphicsAltitudeDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsAltitudeDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAltitudeDisplayConditionPtr(_result, false);
}

IAgStkGraphicsAltitudeDisplayConditionPtr _IAgStkGraphicsAltitudeDisplayConditionFactory::InitializeWithAltitudes ( double MinimumAltitude, double MaximumAltitude ) {
    struct IAgStkGraphicsAltitudeDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithAltitudes(MinimumAltitude, MaximumAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAltitudeDisplayConditionPtr(_result, false);
}

IAgStkGraphicsAltitudeDisplayConditionPtr _IAgStkGraphicsAltitudeDisplayConditionFactory::InitializeWithCentralBodyAndAltitudes ( _bstr_t CentralBody, double MinimumAltitude, double MaximumAltitude ) {
    struct IAgStkGraphicsAltitudeDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBodyAndAltitudes(CentralBody, MinimumAltitude, MaximumAltitude, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAltitudeDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsCompositeDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsCompositeDisplayConditionPtr _IAgStkGraphicsCompositeDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsCompositeDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCompositeDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsCompositePrimitiveFactory wrapper method implementations
//

IAgStkGraphicsCompositePrimitivePtr _IAgStkGraphicsCompositePrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsCompositePrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCompositePrimitivePtr(_result, false);
}

//
// interface _IAgStkGraphicsConstantDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsConstantDisplayConditionPtr _IAgStkGraphicsConstantDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsConstantDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConstantDisplayConditionPtr(_result, false);
}

IAgStkGraphicsConstantDisplayConditionPtr _IAgStkGraphicsConstantDisplayConditionFactory::InitializeDisplay ( VARIANT_BOOL Display ) {
    struct IAgStkGraphicsConstantDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeDisplay(Display, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConstantDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsDistanceDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsDistanceDisplayConditionPtr _IAgStkGraphicsDistanceDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceDisplayConditionPtr _IAgStkGraphicsDistanceDisplayConditionFactory::InitializeWithDistances ( double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithDistances(MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr _IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr _IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory::InitializeWithDistances ( struct IAgStkGraphicsGlobeOverlay * GlobeOverlay, double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithDistances(GlobeOverlay, MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsDistanceToPositionDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsDistanceToPositionDisplayConditionPtr _IAgStkGraphicsDistanceToPositionDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsDistanceToPositionDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPositionDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceToPositionDisplayConditionPtr _IAgStkGraphicsDistanceToPositionDisplayConditionFactory::InitializeWithDistances ( SAFEARRAY * * Position, double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceToPositionDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithDistances(Position, MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPositionDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceToPositionDisplayConditionPtr _IAgStkGraphicsDistanceToPositionDisplayConditionFactory::InitializeWithReferenceFrameAndDistances ( struct AgSTKVgtLib::IAgCrdnSystem * ReferenceFrame, SAFEARRAY * * Position, double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceToPositionDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithReferenceFrameAndDistances(ReferenceFrame, Position, MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPositionDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr _IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsDistanceToPrimitiveDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr(_result, false);
}

IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr _IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory::InitializeWithDistances ( struct IAgStkGraphicsPrimitive * Primitive, double MinimumDistance, double MaximumDistance ) {
    struct IAgStkGraphicsDistanceToPrimitiveDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithDistances(Primitive, MinimumDistance, MaximumDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPrimitiveDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory wrapper method implementations
//

IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr _IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory::Initialize ( ) {
    struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr(_result, false);
}

IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr _IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory::InitializeWithParameters ( double Duration, enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation ) {
    struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = raw_InitializeWithParameters(Duration, RemoveLocation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDurationPathPrimitiveUpdatePolicyPtr(_result, false);
}

//
// interface _IAgStkGraphicsGlobeImageOverlayInitializer wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsGlobeImageOverlayInitializer::GetMoreThanOneImageGlobeOverlaySupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoreThanOneImageGlobeOverlaySupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsGraphicsFontFactory wrapper method implementations
//

IAgStkGraphicsGraphicsFontPtr _IAgStkGraphicsGraphicsFontFactory::InitializeWithNameSizeFontStyleOutline ( _bstr_t Name, int Size, enum AgEStkGraphicsFontStyle FontStyle, VARIANT_BOOL Outline ) {
    struct IAgStkGraphicsGraphicsFont * _result = 0;
    HRESULT _hr = raw_InitializeWithNameSizeFontStyleOutline(Name, Size, FontStyle, Outline, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontPtr(_result, false);
}

IAgStkGraphicsGraphicsFontPtr _IAgStkGraphicsGraphicsFontFactory::InitializeWithNameSize ( _bstr_t Name, int Size ) {
    struct IAgStkGraphicsGraphicsFont * _result = 0;
    HRESULT _hr = raw_InitializeWithNameSize(Name, Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontPtr(_result, false);
}

//
// interface _IAgStkGraphicsGreatArcInterpolatorFactory wrapper method implementations
//

IAgStkGraphicsGreatArcInterpolatorPtr _IAgStkGraphicsGreatArcInterpolatorFactory::Initialize ( ) {
    struct IAgStkGraphicsGreatArcInterpolator * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGreatArcInterpolatorPtr(_result, false);
}

IAgStkGraphicsGreatArcInterpolatorPtr _IAgStkGraphicsGreatArcInterpolatorFactory::InitializeWithCentralBody ( _bstr_t CentralBody ) {
    struct IAgStkGraphicsGreatArcInterpolator * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBody(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGreatArcInterpolatorPtr(_result, false);
}

IAgStkGraphicsGreatArcInterpolatorPtr _IAgStkGraphicsGreatArcInterpolatorFactory::InitializeWithCentralBodyAndGranularity ( _bstr_t CentralBody, double Granularity ) {
    struct IAgStkGraphicsGreatArcInterpolator * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBodyAndGranularity(CentralBody, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGreatArcInterpolatorPtr(_result, false);
}

//
// interface _IAgStkGraphicsAlphaFromLuminanceFilterFactory wrapper method implementations
//

IAgStkGraphicsAlphaFromLuminanceFilterPtr _IAgStkGraphicsAlphaFromLuminanceFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsAlphaFromLuminanceFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromLuminanceFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsAlphaFromPixelFilterFactory wrapper method implementations
//

IAgStkGraphicsAlphaFromPixelFilterPtr _IAgStkGraphicsAlphaFromPixelFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsAlphaFromPixelFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromPixelFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsAlphaFromRasterFilterFactory wrapper method implementations
//

IAgStkGraphicsAlphaFromRasterFilterPtr _IAgStkGraphicsAlphaFromRasterFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsAlphaFromRasterFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromRasterFilterPtr(_result, false);
}

IAgStkGraphicsAlphaFromRasterFilterPtr _IAgStkGraphicsAlphaFromRasterFilterFactory::InitializeWithRaster ( struct IAgStkGraphicsRaster * Raster ) {
    struct IAgStkGraphicsAlphaFromRasterFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithRaster(Raster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromRasterFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsBandExtractFilterFactory wrapper method implementations
//

IAgStkGraphicsBandExtractFilterPtr _IAgStkGraphicsBandExtractFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsBandExtractFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandExtractFilterPtr(_result, false);
}

IAgStkGraphicsBandExtractFilterPtr _IAgStkGraphicsBandExtractFilterFactory::InitializeWithBand ( enum AgEStkGraphicsRasterBand RasterBand ) {
    struct IAgStkGraphicsBandExtractFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithBand(RasterBand, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandExtractFilterPtr(_result, false);
}

IAgStkGraphicsBandExtractFilterPtr _IAgStkGraphicsBandExtractFilterFactory::InitializeWithFormat ( enum AgEStkGraphicsRasterFormat RasterFormat ) {
    struct IAgStkGraphicsBandExtractFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithFormat(RasterFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandExtractFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsBandOrderFilterFactory wrapper method implementations
//

IAgStkGraphicsBandOrderFilterPtr _IAgStkGraphicsBandOrderFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsBandOrderFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandOrderFilterPtr(_result, false);
}

IAgStkGraphicsBandOrderFilterPtr _IAgStkGraphicsBandOrderFilterFactory::InitializeWithOrder ( enum AgEStkGraphicsRasterFormat BandOrder ) {
    struct IAgStkGraphicsBandOrderFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithOrder(BandOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandOrderFilterPtr(_result, false);
}

IAgStkGraphicsBandOrderFilterPtr _IAgStkGraphicsBandOrderFilterFactory::InitializeWithOrderAndBool ( enum AgEStkGraphicsRasterFormat BandOrder, VARIANT_BOOL MaintainImageFormat ) {
    struct IAgStkGraphicsBandOrderFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithOrderAndBool(BandOrder, MaintainImageFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandOrderFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsBlurFilterFactory wrapper method implementations
//

IAgStkGraphicsBlurFilterPtr _IAgStkGraphicsBlurFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsBlurFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBlurFilterPtr(_result, false);
}

IAgStkGraphicsBlurFilterPtr _IAgStkGraphicsBlurFilterFactory::InitializeWithMethod ( enum AgEStkGraphicsBlurMethod Method ) {
    struct IAgStkGraphicsBlurFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithMethod(Method, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBlurFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsBrightnessFilterFactory wrapper method implementations
//

IAgStkGraphicsBrightnessFilterPtr _IAgStkGraphicsBrightnessFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsBrightnessFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBrightnessFilterPtr(_result, false);
}

IAgStkGraphicsBrightnessFilterPtr _IAgStkGraphicsBrightnessFilterFactory::InitializeWithAdjustment ( double Adjustment ) {
    struct IAgStkGraphicsBrightnessFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithAdjustment(Adjustment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBrightnessFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsColorToLuminanceFilterFactory wrapper method implementations
//

IAgStkGraphicsColorToLuminanceFilterPtr _IAgStkGraphicsColorToLuminanceFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsColorToLuminanceFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsColorToLuminanceFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsContrastFilterFactory wrapper method implementations
//

IAgStkGraphicsContrastFilterPtr _IAgStkGraphicsContrastFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsContrastFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsContrastFilterPtr(_result, false);
}

IAgStkGraphicsContrastFilterPtr _IAgStkGraphicsContrastFilterFactory::InitializeWithAdjustment ( double Adjustment ) {
    struct IAgStkGraphicsContrastFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithAdjustment(Adjustment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsContrastFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsConvolutionFilterFactory wrapper method implementations
//

IAgStkGraphicsConvolutionFilterPtr _IAgStkGraphicsConvolutionFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsConvolutionFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterPtr(_result, false);
}

IAgStkGraphicsConvolutionFilterPtr _IAgStkGraphicsConvolutionFilterFactory::InitializeWithKernel ( SAFEARRAY * * Kernel ) {
    struct IAgStkGraphicsConvolutionFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithKernel(Kernel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterPtr(_result, false);
}

IAgStkGraphicsConvolutionFilterPtr _IAgStkGraphicsConvolutionFilterFactory::InitializeWithKernelAndDivisor ( SAFEARRAY * * Kernel, double Divisor ) {
    struct IAgStkGraphicsConvolutionFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithKernelAndDivisor(Kernel, Divisor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterPtr(_result, false);
}

IAgStkGraphicsConvolutionFilterPtr _IAgStkGraphicsConvolutionFilterFactory::InitializeWithKernelDivisorAndOffset ( SAFEARRAY * * Kernel, double Divisor, double Offset ) {
    struct IAgStkGraphicsConvolutionFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithKernelDivisorAndOffset(Kernel, Divisor, Offset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsEdgeDetectFilterFactory wrapper method implementations
//

IAgStkGraphicsEdgeDetectFilterPtr _IAgStkGraphicsEdgeDetectFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsEdgeDetectFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsEdgeDetectFilterPtr(_result, false);
}

IAgStkGraphicsEdgeDetectFilterPtr _IAgStkGraphicsEdgeDetectFilterFactory::InitializeWithMethod ( enum AgEStkGraphicsEdgeDetectMethod Method ) {
    struct IAgStkGraphicsEdgeDetectFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithMethod(Method, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsEdgeDetectFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsFilteringRasterStreamFactory wrapper method implementations
//

IAgStkGraphicsFilteringRasterStreamPtr _IAgStkGraphicsFilteringRasterStreamFactory::Initialize ( struct IAgStkGraphicsRasterStream * RasterStream, struct IAgStkGraphicsRasterFilter * Filter ) {
    struct IAgStkGraphicsFilteringRasterStream * _result = 0;
    HRESULT _hr = raw_Initialize(RasterStream, Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFilteringRasterStreamPtr(_result, false);
}

//
// interface _IAgStkGraphicsFlipFilterFactory wrapper method implementations
//

IAgStkGraphicsFlipFilterPtr _IAgStkGraphicsFlipFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsFlipFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFlipFilterPtr(_result, false);
}

IAgStkGraphicsFlipFilterPtr _IAgStkGraphicsFlipFilterFactory::InitializeWithFlipAxis ( enum AgEStkGraphicsFlipAxis FlipAxis ) {
    struct IAgStkGraphicsFlipFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithFlipAxis(FlipAxis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFlipFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsGammaCorrectionFilterFactory wrapper method implementations
//

IAgStkGraphicsGammaCorrectionFilterPtr _IAgStkGraphicsGammaCorrectionFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsGammaCorrectionFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGammaCorrectionFilterPtr(_result, false);
}

IAgStkGraphicsGammaCorrectionFilterPtr _IAgStkGraphicsGammaCorrectionFilterFactory::InitializeWithGamma ( double Gamma ) {
    struct IAgStkGraphicsGammaCorrectionFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithGamma(Gamma, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGammaCorrectionFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsGaussianBlurFilterFactory wrapper method implementations
//

IAgStkGraphicsGaussianBlurFilterPtr _IAgStkGraphicsGaussianBlurFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsGaussianBlurFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGaussianBlurFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsGradientDetectFilterFactory wrapper method implementations
//

IAgStkGraphicsGradientDetectFilterPtr _IAgStkGraphicsGradientDetectFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsGradientDetectFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGradientDetectFilterPtr(_result, false);
}

IAgStkGraphicsGradientDetectFilterPtr _IAgStkGraphicsGradientDetectFilterFactory::InitializeWithMethod ( enum AgEStkGraphicsGradientDetectMethod Method ) {
    struct IAgStkGraphicsGradientDetectFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithMethod(Method, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGradientDetectFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsJpeg2000WriterInitializer wrapper method implementations
//

HRESULT _IAgStkGraphicsJpeg2000WriterInitializer::WriteString ( _bstr_t ImageUri, enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile, int CompressionRate, _bstr_t Jpeg2000Uri, VARIANT_BOOL OverwriteExistingFile ) {
    HRESULT _hr = raw_WriteString(ImageUri, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsJpeg2000WriterInitializer::WriteExtentString ( _bstr_t ImageUri, SAFEARRAY * * Extent, enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile, int CompressionRate, _bstr_t Jpeg2000Uri, VARIANT_BOOL OverwriteExistingFile ) {
    HRESULT _hr = raw_WriteExtentString(ImageUri, Extent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsJpeg2000WriterInitializer::WriteExtentAndSubExtentString ( _bstr_t ImageUri, SAFEARRAY * * Extent, SAFEARRAY * * SubExtent, enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile, int CompressionRate, _bstr_t Jpeg2000Uri, VARIANT_BOOL OverwriteExistingFile ) {
    HRESULT _hr = raw_WriteExtentAndSubExtentString(ImageUri, Extent, SubExtent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsJpeg2000WriterInitializer::WriteExtentAndSubExtentTransparentColorString ( _bstr_t ImageUri, SAFEARRAY * * Extent, SAFEARRAY * * SubExtent, enum AgEStkGraphicsJpeg2000CompressionProfile CompressionProfile, int CompressionRate, _bstr_t Jpeg2000Uri, VARIANT_BOOL OverwriteExistingFile, OLE_COLOR TransparentColor ) {
    HRESULT _hr = raw_WriteExtentAndSubExtentTransparentColorString(ImageUri, Extent, SubExtent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile, TransparentColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsLevelsFilterFactory wrapper method implementations
//

IAgStkGraphicsLevelsFilterPtr _IAgStkGraphicsLevelsFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsLevelsFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsLevelsFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory wrapper method implementations
//

IAgStkGraphicsProjectionRasterStreamPluginActivatorPtr _IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory::Initialize ( ) {
    struct IAgStkGraphicsProjectionRasterStreamPluginActivator * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionRasterStreamPluginActivatorPtr(_result, false);
}

//
// interface _IAgStkGraphicsRasterFactory wrapper method implementations
//

IAgStkGraphicsRasterPtr _IAgStkGraphicsRasterFactory::InitializeWithStringUri ( _bstr_t Uri ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUri(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsRasterFactory::InitializeWithStringUriXYWidthAndHeight ( _bstr_t Uri, int X, int Y, int Width, int Height ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUriXYWidthAndHeight(Uri, X, Y, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

IAgStkGraphicsRasterPtr _IAgStkGraphicsRasterFactory::InitializeWithRaster ( struct IAgStkGraphicsRaster * Raster ) {
    struct IAgStkGraphicsRaster * _result = 0;
    HRESULT _hr = raw_InitializeWithRaster(Raster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterPtr(_result, false);
}

//
// interface _IAgStkGraphicsRasterAttributesFactory wrapper method implementations
//

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsRasterAttributesFactory::InitializeWithFormat ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormat(Width, Height, RasterFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsRasterAttributesFactory::InitializeWithFormatAndType ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat, enum AgEStkGraphicsRasterType RasterType ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormatAndType(Width, Height, RasterFormat, RasterType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsRasterAttributesFactory::InitializeWithFormatTypeAndOrientation ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat, enum AgEStkGraphicsRasterType RasterType, enum AgEStkGraphicsRasterOrientation RasterOrientation ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormatTypeAndOrientation(Width, Height, RasterFormat, RasterType, RasterOrientation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsRasterAttributesFactory::InitializeWithFormatTypeOrientationAndAlignment ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat, enum AgEStkGraphicsRasterType RasterType, enum AgEStkGraphicsRasterOrientation RasterOrientation, int RowAlignment ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormatTypeOrientationAndAlignment(Width, Height, RasterFormat, RasterType, RasterOrientation, RowAlignment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsRasterAttributesFactory::InitializeWithFormatTypeOrientationAlignmentAndRatio ( int Width, int Height, enum AgEStkGraphicsRasterFormat RasterFormat, enum AgEStkGraphicsRasterType RasterType, enum AgEStkGraphicsRasterOrientation RasterOrientation, int RowAlignment, double PixelAspectRatio ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithFormatTypeOrientationAlignmentAndRatio(Width, Height, RasterFormat, RasterType, RasterOrientation, RowAlignment, PixelAspectRatio, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

IAgStkGraphicsRasterAttributesPtr _IAgStkGraphicsRasterAttributesFactory::InitializeWithRaster ( struct IAgStkGraphicsRaster * Raster ) {
    struct IAgStkGraphicsRasterAttributes * _result = 0;
    HRESULT _hr = raw_InitializeWithRaster(Raster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesPtr(_result, false);
}

//
// interface _IAgStkGraphicsRotateFilterFactory wrapper method implementations
//

IAgStkGraphicsRotateFilterPtr _IAgStkGraphicsRotateFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsRotateFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRotateFilterPtr(_result, false);
}

IAgStkGraphicsRotateFilterPtr _IAgStkGraphicsRotateFilterFactory::InitializeWithAngle ( double RotateAngle ) {
    struct IAgStkGraphicsRotateFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithAngle(RotateAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRotateFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsSequenceFilterFactory wrapper method implementations
//

IAgStkGraphicsSequenceFilterPtr _IAgStkGraphicsSequenceFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsSequenceFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSequenceFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsSharpenFilterFactory wrapper method implementations
//

IAgStkGraphicsSharpenFilterPtr _IAgStkGraphicsSharpenFilterFactory::Initialize ( ) {
    struct IAgStkGraphicsSharpenFilter * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSharpenFilterPtr(_result, false);
}

IAgStkGraphicsSharpenFilterPtr _IAgStkGraphicsSharpenFilterFactory::InitializeWithMethod ( enum AgEStkGraphicsSharpenMethod Method ) {
    struct IAgStkGraphicsSharpenFilter * _result = 0;
    HRESULT _hr = raw_InitializeWithMethod(Method, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSharpenFilterPtr(_result, false);
}

//
// interface _IAgStkGraphicsVideoStreamFactory wrapper method implementations
//

IAgStkGraphicsVideoStreamPtr _IAgStkGraphicsVideoStreamFactory::InitializeWithStringUri ( _bstr_t Uri ) {
    struct IAgStkGraphicsVideoStream * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUri(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsVideoStreamPtr(_result, false);
}

//
// interface _IAgStkGraphicsMarkerBatchPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsMarkerBatchPrimitivePtr _IAgStkGraphicsMarkerBatchPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr _IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeWithSetHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr _IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeWithSizeSource ( enum AgEStkGraphicsMarkerBatchSizeSource SizeSource ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSizeSource(SizeSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr _IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeWithSizeSourceAndSortOrder ( enum AgEStkGraphicsMarkerBatchSizeSource SizeSource, enum AgEStkGraphicsMarkerBatchSortOrder SortOrder ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSizeSourceAndSortOrder(SizeSource, SortOrder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr _IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeSizeSourceSortOrderAndSetHint ( enum AgEStkGraphicsMarkerBatchSizeSource SizeSource, enum AgEStkGraphicsMarkerBatchSortOrder SortOrder, enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeSizeSourceSortOrderAndSetHint(SizeSource, SortOrder, SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitivePtr _IAgStkGraphicsMarkerBatchPrimitiveFactory::InitializeSizeSourceSortOrderSetHintAndRenderingMethod ( enum AgEStkGraphicsMarkerBatchSizeSource SizeSource, enum AgEStkGraphicsMarkerBatchSortOrder SortOrder, enum AgEStkGraphicsSetHint SetHint, enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod ) {
    struct IAgStkGraphicsMarkerBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeSizeSourceSortOrderSetHintAndRenderingMethod(SizeSource, SortOrder, SetHint, RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitivePtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsMarkerBatchPrimitiveFactory::Supported ( enum AgEStkGraphicsMarkerBatchRenderingMethod RenderingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Supported(RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory wrapper method implementations
//

IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersPtr _IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory::Initialize ( ) {
    struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersPtr(_result, false);
}

//
// interface _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory wrapper method implementations
//

IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory::Initialize ( ) {
    struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr(_result, false);
}

IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory::InitializeWithParameters ( int MaximumCount, enum AgEStkGraphicsPathPrimitiveRemoveLocation RemoveLocation ) {
    struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = raw_InitializeWithParameters(MaximumCount, RemoveLocation, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyPtr(_result, false);
}

//
// interface _IAgStkGraphicsModelPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsModelPrimitivePtr _IAgStkGraphicsModelPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsModelPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelPrimitivePtr(_result, false);
}

IAgStkGraphicsModelPrimitivePtr _IAgStkGraphicsModelPrimitiveFactory::InitializeWithStringUri ( _bstr_t Uri ) {
    struct IAgStkGraphicsModelPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUri(Uri, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelPrimitivePtr(_result, false);
}

IAgStkGraphicsModelPrimitivePtr _IAgStkGraphicsModelPrimitiveFactory::InitializeWithStringUriAndUpAxis ( _bstr_t Uri, enum AgEStkGraphicsModelUpAxis UpAxis ) {
    struct IAgStkGraphicsModelPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithStringUriAndUpAxis(Uri, UpAxis, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelPrimitivePtr(_result, false);
}

//
// interface _IAgStkGraphicsPixelSizeDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsPixelSizeDisplayConditionPtr _IAgStkGraphicsPixelSizeDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsPixelSizeDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPixelSizeDisplayConditionPtr(_result, false);
}

IAgStkGraphicsPixelSizeDisplayConditionPtr _IAgStkGraphicsPixelSizeDisplayConditionFactory::InitializeWithPixelSizes ( int MinimumPixelSize, int MaximumPixelSize ) {
    struct IAgStkGraphicsPixelSizeDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithPixelSizes(MinimumPixelSize, MaximumPixelSize, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPixelSizeDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsPointBatchPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsPointBatchPrimitivePtr _IAgStkGraphicsPointBatchPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsPointBatchPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPointBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsPointBatchPrimitivePtr _IAgStkGraphicsPointBatchPrimitiveFactory::InitializeWithSetHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsPointBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPointBatchPrimitivePtr(_result, false);
}

float _IAgStkGraphicsPointBatchPrimitiveFactory::GetMinimumPixelSizeSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumPixelSizeSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsPointBatchPrimitiveFactory::GetMaximumPixelSizeSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumPixelSizeSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsPolylinePrimitiveFactory wrapper method implementations
//

IAgStkGraphicsPolylinePrimitivePtr _IAgStkGraphicsPolylinePrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr _IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithInterpolatorAndSetHint ( struct IAgStkGraphicsPositionInterpolator * Interpolator, enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithInterpolatorAndSetHint(Interpolator, SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr _IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithTypeAndHint ( enum AgEStkGraphicsPolylineType PolylineType, enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithTypeAndHint(PolylineType, SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr _IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithInterpolator ( struct IAgStkGraphicsPositionInterpolator * Interpolator ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithInterpolator(Interpolator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr _IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

IAgStkGraphicsPolylinePrimitivePtr _IAgStkGraphicsPolylinePrimitiveFactory::InitializeWithType ( enum AgEStkGraphicsPolylineType PolylineType ) {
    struct IAgStkGraphicsPolylinePrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithType(PolylineType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitivePtr(_result, false);
}

float _IAgStkGraphicsPolylinePrimitiveFactory::GetMinimumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsPolylinePrimitiveFactory::GetMaximumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsRasterImageGlobeOverlayFactory wrapper method implementations
//

IAgStkGraphicsRasterImageGlobeOverlayPtr _IAgStkGraphicsRasterImageGlobeOverlayFactory::InitializeWithString ( _bstr_t Uri, SAFEARRAY * * Extent ) {
    struct IAgStkGraphicsRasterImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithString(Uri, Extent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterImageGlobeOverlayPtr(_result, false);
}

IAgStkGraphicsRasterImageGlobeOverlayPtr _IAgStkGraphicsRasterImageGlobeOverlayFactory::InitializeWithColor ( OLE_COLOR Color, SAFEARRAY * * Extent ) {
    struct IAgStkGraphicsRasterImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithColor(Color, Extent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterImageGlobeOverlayPtr(_result, false);
}

IAgStkGraphicsRasterImageGlobeOverlayPtr _IAgStkGraphicsRasterImageGlobeOverlayFactory::InitializeWithRaster ( struct IAgStkGraphicsRaster * Raster, SAFEARRAY * * Extent ) {
    struct IAgStkGraphicsRasterImageGlobeOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithRaster(Raster, Extent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterImageGlobeOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsRhumbLineInterpolatorFactory wrapper method implementations
//

IAgStkGraphicsRhumbLineInterpolatorPtr _IAgStkGraphicsRhumbLineInterpolatorFactory::Initialize ( ) {
    struct IAgStkGraphicsRhumbLineInterpolator * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRhumbLineInterpolatorPtr(_result, false);
}

IAgStkGraphicsRhumbLineInterpolatorPtr _IAgStkGraphicsRhumbLineInterpolatorFactory::InitializeWithCentralBody ( _bstr_t CentralBody ) {
    struct IAgStkGraphicsRhumbLineInterpolator * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBody(CentralBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRhumbLineInterpolatorPtr(_result, false);
}

IAgStkGraphicsRhumbLineInterpolatorPtr _IAgStkGraphicsRhumbLineInterpolatorFactory::InitializeWithCentralBodyAndGranularity ( _bstr_t CentralBody, double Granularity ) {
    struct IAgStkGraphicsRhumbLineInterpolator * _result = 0;
    HRESULT _hr = raw_InitializeWithCentralBodyAndGranularity(CentralBody, Granularity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRhumbLineInterpolatorPtr(_result, false);
}

//
// interface _IAgStkGraphicsSceneDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsSceneDisplayConditionPtr _IAgStkGraphicsSceneDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsSceneDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsSceneManagerInitializer wrapper method implementations
//

IAgStkGraphicsPrimitiveManagerPtr _IAgStkGraphicsSceneManagerInitializer::GetPrimitives ( ) {
    struct IAgStkGraphicsPrimitiveManager * _result = 0;
    HRESULT _hr = get_Primitives(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPrimitiveManagerPtr(_result, false);
}

IAgStkGraphicsScreenOverlayManagerPtr _IAgStkGraphicsSceneManagerInitializer::GetScreenOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayManager * _result = 0;
    HRESULT _hr = get_ScreenOverlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayManagerPtr(_result, false);
}

IAgStkGraphicsTexture2DFactoryPtr _IAgStkGraphicsSceneManagerInitializer::GetTextures ( ) {
    struct IAgStkGraphicsTexture2DFactory * _result = 0;
    HRESULT _hr = get_Textures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTexture2DFactoryPtr(_result, false);
}

IAgStkGraphicsGlobeOverlaySettingsPtr _IAgStkGraphicsSceneManagerInitializer::GetGlobeOverlaySettings ( ) {
    struct IAgStkGraphicsGlobeOverlaySettings * _result = 0;
    HRESULT _hr = get_GlobeOverlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeOverlaySettingsPtr(_result, false);
}

IAgStkGraphicsSceneCollectionPtr _IAgStkGraphicsSceneManagerInitializer::GetScenes ( ) {
    struct IAgStkGraphicsSceneCollection * _result = 0;
    HRESULT _hr = get_Scenes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneCollectionPtr(_result, false);
}

HRESULT _IAgStkGraphicsSceneManagerInitializer::Render ( ) {
    HRESULT _hr = raw_Render();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsScreenOverlayFactory wrapper method implementations
//

IAgStkGraphicsScreenOverlayPtr _IAgStkGraphicsScreenOverlayFactory::Initialize ( double XPixels, double YPixels, double WidthPixels, double HeightPixels ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = raw_Initialize(XPixels, YPixels, WidthPixels, HeightPixels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

IAgStkGraphicsScreenOverlayPtr _IAgStkGraphicsScreenOverlayFactory::InitializeWithPosAndSize ( SAFEARRAY * * Position, SAFEARRAY * * Size ) {
    struct IAgStkGraphicsScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithPosAndSize(Position, Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsSolidPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsSolidPrimitivePtr _IAgStkGraphicsSolidPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsSolidPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidPrimitivePtr(_result, false);
}

IAgStkGraphicsSolidPrimitivePtr _IAgStkGraphicsSolidPrimitiveFactory::InitializeWithHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsSolidPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidPrimitivePtr(_result, false);
}

float _IAgStkGraphicsSolidPrimitiveFactory::GetMinimumSilhouetteWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumSilhouetteWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsSolidPrimitiveFactory::GetMaximumSilhouetteWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumSilhouetteWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsSurfaceMeshPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsSurfaceMeshPrimitivePtr _IAgStkGraphicsSurfaceMeshPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsSurfaceMeshPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceMeshPrimitivePtr(_result, false);
}

IAgStkGraphicsSurfaceMeshPrimitivePtr _IAgStkGraphicsSurfaceMeshPrimitiveFactory::InitializeWithSetHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsSurfaceMeshPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceMeshPrimitivePtr(_result, false);
}

IAgStkGraphicsSurfaceMeshPrimitivePtr _IAgStkGraphicsSurfaceMeshPrimitiveFactory::InitializeWithSetHintAndRenderingMethod ( enum AgEStkGraphicsSetHint SetHint, enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod ) {
    struct IAgStkGraphicsSurfaceMeshPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHintAndRenderingMethod(SetHint, RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceMeshPrimitivePtr(_result, false);
}

VARIANT_BOOL _IAgStkGraphicsSurfaceMeshPrimitiveFactory::Supported ( enum AgEStkGraphicsSurfaceMeshRenderingMethod RenderingMethod ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Supported(RenderingMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsSurfaceMeshPrimitiveFactory::SupportedWithDefaultRenderingMethod ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SupportedWithDefaultRenderingMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsTerrainOverlayInitializer wrapper method implementations
//

VARIANT_BOOL _IAgStkGraphicsTerrainOverlayInitializer::GetSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Supported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsTextBatchPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsTextBatchPrimitivePtr _IAgStkGraphicsTextBatchPrimitiveFactory::InitializeWithGraphicsFont ( struct IAgStkGraphicsGraphicsFont * Font ) {
    struct IAgStkGraphicsTextBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithGraphicsFont(Font, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsTextBatchPrimitivePtr _IAgStkGraphicsTextBatchPrimitiveFactory::InitializeWithGraphicsFontAndSetHint ( struct IAgStkGraphicsGraphicsFont * Font, enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsTextBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithGraphicsFontAndSetHint(Font, SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitivePtr(_result, false);
}

IAgStkGraphicsTextBatchPrimitivePtr _IAgStkGraphicsTextBatchPrimitiveFactory::InitializeWithGraphicsFontAndSetHint2d ( struct IAgStkGraphicsGraphicsFont * Font, enum AgEStkGraphicsSetHint SetHint, VARIANT_BOOL RenderInScreenSpace ) {
    struct IAgStkGraphicsTextBatchPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithGraphicsFontAndSetHint2d(Font, SetHint, RenderInScreenSpace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitivePtr(_result, false);
}

//
// interface _IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory wrapper method implementations
//

IAgStkGraphicsTextBatchPrimitiveOptionalParametersPtr _IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory::Initialize ( ) {
    struct IAgStkGraphicsTextBatchPrimitiveOptionalParameters * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitiveOptionalParametersPtr(_result, false);
}

//
// interface _IAgStkGraphicsTextOverlayFactory wrapper method implementations
//

IAgStkGraphicsTextOverlayPtr _IAgStkGraphicsTextOverlayFactory::Initialize ( struct IAgStkGraphicsGraphicsFont * Font ) {
    struct IAgStkGraphicsTextOverlay * _result = 0;
    HRESULT _hr = raw_Initialize(Font, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayPtr(_result, false);
}

IAgStkGraphicsTextOverlayPtr _IAgStkGraphicsTextOverlayFactory::InitializeWithXYWidthHeight ( struct IAgStkGraphicsGraphicsFont * Font, double XPixels, double YPixels, double WidthPixels, double HeightPixels ) {
    struct IAgStkGraphicsTextOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithXYWidthHeight(Font, XPixels, YPixels, WidthPixels, HeightPixels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayPtr(_result, false);
}

IAgStkGraphicsTextOverlayPtr _IAgStkGraphicsTextOverlayFactory::InitializeWithPositionSize ( struct IAgStkGraphicsGraphicsFont * Font, SAFEARRAY * * Position, SAFEARRAY * * Size ) {
    struct IAgStkGraphicsTextOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithPositionSize(Font, Position, Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayPtr(_result, false);
}

IAgStkGraphicsTextOverlayPtr _IAgStkGraphicsTextOverlayFactory::InitializeWithWidthHeightUnits ( struct IAgStkGraphicsGraphicsFont * Font, double WidthValue, enum AgEStkGraphicsScreenOverlayUnit WidthUnit, double HeightValue, enum AgEStkGraphicsScreenOverlayUnit HeightUnit ) {
    struct IAgStkGraphicsTextOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithWidthHeightUnits(Font, WidthValue, WidthUnit, HeightValue, HeightUnit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsTextureMatrixFactory wrapper method implementations
//

IAgStkGraphicsTextureMatrixPtr _IAgStkGraphicsTextureMatrixFactory::Initialize ( ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

IAgStkGraphicsTextureMatrixPtr _IAgStkGraphicsTextureMatrixFactory::InitializeByValues ( float M11, float M12, float M13, float M14, float M21, float M22, float M23, float M24, float M31, float M32, float M33, float M34, float M41, float M42, float M43, float M44 ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = raw_InitializeByValues(M11, M12, M13, M14, M21, M22, M23, M24, M31, M32, M33, M34, M41, M42, M43, M44, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

IAgStkGraphicsTextureMatrixPtr _IAgStkGraphicsTextureMatrixFactory::InitializeWithAffineTransform ( SAFEARRAY * * Matrix ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = raw_InitializeWithAffineTransform(Matrix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

IAgStkGraphicsTextureMatrixPtr _IAgStkGraphicsTextureMatrixFactory::InitializeWithRectangles ( SAFEARRAY * * Corner0, SAFEARRAY * * Corner1, SAFEARRAY * * Corner2, SAFEARRAY * * Corner3 ) {
    struct IAgStkGraphicsTextureMatrix * _result = 0;
    HRESULT _hr = raw_InitializeWithRectangles(Corner0, Corner1, Corner2, Corner3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixPtr(_result, false);
}

//
// interface _IAgStkGraphicsTextureScreenOverlayFactory wrapper method implementations
//

IAgStkGraphicsTextureScreenOverlayPtr _IAgStkGraphicsTextureScreenOverlayFactory::Initialize ( ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayPtr _IAgStkGraphicsTextureScreenOverlayFactory::InitializeWithXYWidthHeight ( double XPixels, double YPixels, double WidthPixels, double HeightPixels ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithXYWidthHeight(XPixels, YPixels, WidthPixels, HeightPixels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayPtr _IAgStkGraphicsTextureScreenOverlayFactory::InitializeWithPositionSize ( SAFEARRAY * * Position, SAFEARRAY * * Size ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithPositionSize(Position, Size, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayPtr _IAgStkGraphicsTextureScreenOverlayFactory::InitializeWithXYTexture ( double XPixels, double YPixels, struct IAgStkGraphicsRendererTexture2D * Texture ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithXYTexture(XPixels, YPixels, Texture, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayPtr _IAgStkGraphicsTextureScreenOverlayFactory::InitializeWithPositionTexture ( SAFEARRAY * * Position, struct IAgStkGraphicsRendererTexture2D * Texture ) {
    struct IAgStkGraphicsTextureScreenOverlay * _result = 0;
    HRESULT _hr = raw_InitializeWithPositionTexture(Position, Texture, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayPtr(_result, false);
}

//
// interface _IAgStkGraphicsTimeIntervalDisplayConditionFactory wrapper method implementations
//

IAgStkGraphicsTimeIntervalDisplayConditionPtr _IAgStkGraphicsTimeIntervalDisplayConditionFactory::Initialize ( ) {
    struct IAgStkGraphicsTimeIntervalDisplayCondition * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTimeIntervalDisplayConditionPtr(_result, false);
}

IAgStkGraphicsTimeIntervalDisplayConditionPtr _IAgStkGraphicsTimeIntervalDisplayConditionFactory::InitializeWithTimes ( struct STKUtil::IAgDate * MinimumTime, struct STKUtil::IAgDate * MaximumTime ) {
    struct IAgStkGraphicsTimeIntervalDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithTimes(MinimumTime, MaximumTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTimeIntervalDisplayConditionPtr(_result, false);
}

IAgStkGraphicsTimeIntervalDisplayConditionPtr _IAgStkGraphicsTimeIntervalDisplayConditionFactory::InitializeWithTimeInterval ( SAFEARRAY * * TimeInterval ) {
    struct IAgStkGraphicsTimeIntervalDisplayCondition * _result = 0;
    HRESULT _hr = raw_InitializeWithTimeInterval(TimeInterval, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTimeIntervalDisplayConditionPtr(_result, false);
}

//
// interface _IAgStkGraphicsTriangleMeshPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsTriangleMeshPrimitivePtr _IAgStkGraphicsTriangleMeshPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsTriangleMeshPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitivePtr(_result, false);
}

IAgStkGraphicsTriangleMeshPrimitivePtr _IAgStkGraphicsTriangleMeshPrimitiveFactory::InitializeWithSetHint ( enum AgEStkGraphicsSetHint SetHint ) {
    struct IAgStkGraphicsTriangleMeshPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithSetHint(SetHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitivePtr(_result, false);
}

//
// interface _IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory wrapper method implementations
//

IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersPtr _IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory::Initialize ( ) {
    struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersPtr(_result, false);
}

//
// dispinterface IAgStkGraphicsImageCollectionEvents wrapper method implementations
//

HRESULT IAgStkGraphicsImageCollectionEvents::AddComplete ( const _variant_t & Sender, struct IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs * Args ) {
    return _com_dispatch_method(this, 0x33f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c\x000d", &Sender, Args);
}

//
// dispinterface IAgStkGraphicsKmlGraphicsEvents wrapper method implementations
//

HRESULT IAgStkGraphicsKmlGraphicsEvents::DocumentLoaded ( const _variant_t & Sender, struct IAgStkGraphicsKmlDocumentLoadedEventArgs * Args ) {
    return _com_dispatch_method(this, 0x69dd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c\x000d", &Sender, Args);
}

//
// dispinterface IAgStkGraphicsSceneEvents wrapper method implementations
//

HRESULT IAgStkGraphicsSceneEvents::Rendering ( const _variant_t & Sender, struct IAgStkGraphicsRenderingEventArgs * Args ) {
    return _com_dispatch_method(this, 0x364d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c\x000d", &Sender, Args);
}

//
// dispinterface IAgStkGraphicsSceneManagerEvents wrapper method implementations
//

HRESULT IAgStkGraphicsSceneManagerEvents::Rendering ( const _variant_t & Sender, struct IAgStkGraphicsRenderingEventArgs * Args ) {
    return _com_dispatch_method(this, 0x3c8d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c\x000d", &Sender, Args);
}

//
// dispinterface IAgStkGraphicsTerrainCollectionEvents wrapper method implementations
//

HRESULT IAgStkGraphicsTerrainCollectionEvents::AddComplete ( const _variant_t & Sender, struct IAgStkGraphicsTerrainOverlayAddCompleteEventArgs * Args ) {
    return _com_dispatch_method(this, 0x3459, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c\x000d", &Sender, Args);
}

//
// interface IAgStkGraphicsFactoryAndInitializers wrapper method implementations
//

IAgStkGraphicsBoxTriangulatorInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetBoxTriangulator ( ) {
    struct IAgStkGraphicsBoxTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_BoxTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoxTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsCylinderTriangulatorInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetCylinderTriangulator ( ) {
    struct IAgStkGraphicsCylinderTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_CylinderTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCylinderTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsEllipsoidTriangulatorInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetEllipsoidTriangulator ( ) {
    struct IAgStkGraphicsEllipsoidTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_EllipsoidTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsEllipsoidTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetExtrudedPolylineTriangulator ( ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_ExtrudedPolylineTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsSurfaceExtentTriangulatorInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetSurfaceExtentTriangulator ( ) {
    struct IAgStkGraphicsSurfaceExtentTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_SurfaceExtentTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceExtentTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsSurfacePolygonTriangulatorInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetSurfacePolygonTriangulator ( ) {
    struct IAgStkGraphicsSurfacePolygonTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_SurfacePolygonTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfacePolygonTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetSurfaceShapes ( ) {
    struct IAgStkGraphicsSurfaceShapesInitializer * _result = 0;
    HRESULT _hr = get_SurfaceShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesInitializerPtr(_result, false);
}

IAgStkGraphicsAGIProcessedImageGlobeOverlayFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetAGIProcessedImageGlobeOverlay ( ) {
    struct IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory * _result = 0;
    HRESULT _hr = get_AGIProcessedImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIProcessedImageGlobeOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsAGIProcessedTerrainOverlayFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetAGIProcessedTerrainOverlay ( ) {
    struct IAgStkGraphicsAGIProcessedTerrainOverlayFactory * _result = 0;
    HRESULT _hr = get_AGIProcessedTerrainOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIProcessedTerrainOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsAGIRoamImageGlobeOverlayFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetAGIRoamImageGlobeOverlay ( ) {
    struct IAgStkGraphicsAGIRoamImageGlobeOverlayFactory * _result = 0;
    HRESULT _hr = get_AGIRoamImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIRoamImageGlobeOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetCustomImageGlobeOverlayPluginActivator ( ) {
    struct IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory * _result = 0;
    HRESULT _hr = get_CustomImageGlobeOverlayPluginActivator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactoryPtr(_result, false);
}

IAgStkGraphicsGeospatialImageGlobeOverlayFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetGeospatialImageGlobeOverlay ( ) {
    struct IAgStkGraphicsGeospatialImageGlobeOverlayFactory * _result = 0;
    HRESULT _hr = get_GeospatialImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGeospatialImageGlobeOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsProjectedRasterOverlayFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetProjectedRasterOverlay ( ) {
    struct IAgStkGraphicsProjectedRasterOverlayFactory * _result = 0;
    HRESULT _hr = get_ProjectedRasterOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectedRasterOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsProjectionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetProjection ( ) {
    struct IAgStkGraphicsProjectionFactory * _result = 0;
    HRESULT _hr = get_Projection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionFactoryPtr(_result, false);
}

IAgStkGraphicsAltitudeDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetAltitudeDisplayCondition ( ) {
    struct IAgStkGraphicsAltitudeDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_AltitudeDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAltitudeDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsCompositeDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetCompositeDisplayCondition ( ) {
    struct IAgStkGraphicsCompositeDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_CompositeDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCompositeDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsCompositePrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetCompositePrimitive ( ) {
    struct IAgStkGraphicsCompositePrimitiveFactory * _result = 0;
    HRESULT _hr = get_CompositePrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCompositePrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsConstantDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetConstantDisplayCondition ( ) {
    struct IAgStkGraphicsConstantDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_ConstantDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConstantDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDistanceDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetDistanceDisplayCondition ( ) {
    struct IAgStkGraphicsDistanceDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_DistanceDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetDistanceToGlobeOverlayDisplayCondition ( ) {
    struct IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_DistanceToGlobeOverlayDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDistanceToPositionDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetDistanceToPositionDisplayCondition ( ) {
    struct IAgStkGraphicsDistanceToPositionDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_DistanceToPositionDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPositionDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetDistanceToPrimitiveDisplayCondition ( ) {
    struct IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_DistanceToPrimitiveDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetDurationPathPrimitiveUpdatePolicy ( ) {
    struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory * _result = 0;
    HRESULT _hr = get_DurationPathPrimitiveUpdatePolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactoryPtr(_result, false);
}

IAgStkGraphicsGlobeImageOverlayInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetGlobeImageOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlayInitializer * _result = 0;
    HRESULT _hr = get_GlobeImageOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayInitializerPtr(_result, false);
}

IAgStkGraphicsGraphicsFontFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetGraphicsFont ( ) {
    struct IAgStkGraphicsGraphicsFontFactory * _result = 0;
    HRESULT _hr = get_GraphicsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontFactoryPtr(_result, false);
}

IAgStkGraphicsGreatArcInterpolatorFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetGreatArcInterpolator ( ) {
    struct IAgStkGraphicsGreatArcInterpolatorFactory * _result = 0;
    HRESULT _hr = get_GreatArcInterpolator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGreatArcInterpolatorFactoryPtr(_result, false);
}

IAgStkGraphicsAlphaFromLuminanceFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetAlphaFromLuminanceFilter ( ) {
    struct IAgStkGraphicsAlphaFromLuminanceFilterFactory * _result = 0;
    HRESULT _hr = get_AlphaFromLuminanceFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromLuminanceFilterFactoryPtr(_result, false);
}

IAgStkGraphicsAlphaFromPixelFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetAlphaFromPixelFilter ( ) {
    struct IAgStkGraphicsAlphaFromPixelFilterFactory * _result = 0;
    HRESULT _hr = get_AlphaFromPixelFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromPixelFilterFactoryPtr(_result, false);
}

IAgStkGraphicsAlphaFromRasterFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetAlphaFromRasterFilter ( ) {
    struct IAgStkGraphicsAlphaFromRasterFilterFactory * _result = 0;
    HRESULT _hr = get_AlphaFromRasterFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromRasterFilterFactoryPtr(_result, false);
}

IAgStkGraphicsBandExtractFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetBandExtractFilter ( ) {
    struct IAgStkGraphicsBandExtractFilterFactory * _result = 0;
    HRESULT _hr = get_BandExtractFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandExtractFilterFactoryPtr(_result, false);
}

IAgStkGraphicsBandOrderFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetBandOrderFilter ( ) {
    struct IAgStkGraphicsBandOrderFilterFactory * _result = 0;
    HRESULT _hr = get_BandOrderFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandOrderFilterFactoryPtr(_result, false);
}

IAgStkGraphicsBlurFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetBlurFilter ( ) {
    struct IAgStkGraphicsBlurFilterFactory * _result = 0;
    HRESULT _hr = get_BlurFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBlurFilterFactoryPtr(_result, false);
}

IAgStkGraphicsBrightnessFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetBrightnessFilter ( ) {
    struct IAgStkGraphicsBrightnessFilterFactory * _result = 0;
    HRESULT _hr = get_BrightnessFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBrightnessFilterFactoryPtr(_result, false);
}

IAgStkGraphicsColorToLuminanceFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetColorToLuminanceFilter ( ) {
    struct IAgStkGraphicsColorToLuminanceFilterFactory * _result = 0;
    HRESULT _hr = get_ColorToLuminanceFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsColorToLuminanceFilterFactoryPtr(_result, false);
}

IAgStkGraphicsContrastFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetContrastFilter ( ) {
    struct IAgStkGraphicsContrastFilterFactory * _result = 0;
    HRESULT _hr = get_ContrastFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsContrastFilterFactoryPtr(_result, false);
}

IAgStkGraphicsConvolutionFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetConvolutionFilter ( ) {
    struct IAgStkGraphicsConvolutionFilterFactory * _result = 0;
    HRESULT _hr = get_ConvolutionFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterFactoryPtr(_result, false);
}

IAgStkGraphicsEdgeDetectFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetEdgeDetectFilter ( ) {
    struct IAgStkGraphicsEdgeDetectFilterFactory * _result = 0;
    HRESULT _hr = get_EdgeDetectFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsEdgeDetectFilterFactoryPtr(_result, false);
}

IAgStkGraphicsFilteringRasterStreamFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetFilteringRasterStream ( ) {
    struct IAgStkGraphicsFilteringRasterStreamFactory * _result = 0;
    HRESULT _hr = get_FilteringRasterStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFilteringRasterStreamFactoryPtr(_result, false);
}

IAgStkGraphicsFlipFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetFlipFilter ( ) {
    struct IAgStkGraphicsFlipFilterFactory * _result = 0;
    HRESULT _hr = get_FlipFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFlipFilterFactoryPtr(_result, false);
}

IAgStkGraphicsGammaCorrectionFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetGammaCorrectionFilter ( ) {
    struct IAgStkGraphicsGammaCorrectionFilterFactory * _result = 0;
    HRESULT _hr = get_GammaCorrectionFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGammaCorrectionFilterFactoryPtr(_result, false);
}

IAgStkGraphicsGaussianBlurFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetGaussianBlurFilter ( ) {
    struct IAgStkGraphicsGaussianBlurFilterFactory * _result = 0;
    HRESULT _hr = get_GaussianBlurFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGaussianBlurFilterFactoryPtr(_result, false);
}

IAgStkGraphicsGradientDetectFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetGradientDetectFilter ( ) {
    struct IAgStkGraphicsGradientDetectFilterFactory * _result = 0;
    HRESULT _hr = get_GradientDetectFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGradientDetectFilterFactoryPtr(_result, false);
}

IAgStkGraphicsJpeg2000WriterInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetJpeg2000Writer ( ) {
    struct IAgStkGraphicsJpeg2000WriterInitializer * _result = 0;
    HRESULT _hr = get_Jpeg2000Writer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsJpeg2000WriterInitializerPtr(_result, false);
}

IAgStkGraphicsLevelsFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetLevelsFilter ( ) {
    struct IAgStkGraphicsLevelsFilterFactory * _result = 0;
    HRESULT _hr = get_LevelsFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsLevelsFilterFactoryPtr(_result, false);
}

IAgStkGraphicsProjectionRasterStreamPluginActivatorFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetProjectionRasterStreamPluginActivator ( ) {
    struct IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory * _result = 0;
    HRESULT _hr = get_ProjectionRasterStreamPluginActivator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionRasterStreamPluginActivatorFactoryPtr(_result, false);
}

IAgStkGraphicsRasterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetRaster ( ) {
    struct IAgStkGraphicsRasterFactory * _result = 0;
    HRESULT _hr = get_Raster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterFactoryPtr(_result, false);
}

IAgStkGraphicsRasterAttributesFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetRasterAttributes ( ) {
    struct IAgStkGraphicsRasterAttributesFactory * _result = 0;
    HRESULT _hr = get_RasterAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesFactoryPtr(_result, false);
}

IAgStkGraphicsRotateFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetRotateFilter ( ) {
    struct IAgStkGraphicsRotateFilterFactory * _result = 0;
    HRESULT _hr = get_RotateFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRotateFilterFactoryPtr(_result, false);
}

IAgStkGraphicsSequenceFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetSequenceFilter ( ) {
    struct IAgStkGraphicsSequenceFilterFactory * _result = 0;
    HRESULT _hr = get_SequenceFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSequenceFilterFactoryPtr(_result, false);
}

IAgStkGraphicsSharpenFilterFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetSharpenFilter ( ) {
    struct IAgStkGraphicsSharpenFilterFactory * _result = 0;
    HRESULT _hr = get_SharpenFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSharpenFilterFactoryPtr(_result, false);
}

IAgStkGraphicsVideoStreamFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetVideoStream ( ) {
    struct IAgStkGraphicsVideoStreamFactory * _result = 0;
    HRESULT _hr = get_VideoStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsVideoStreamFactoryPtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetMarkerBatchPrimitive ( ) {
    struct IAgStkGraphicsMarkerBatchPrimitiveFactory * _result = 0;
    HRESULT _hr = get_MarkerBatchPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetMarkerBatchPrimitiveOptionalParameters ( ) {
    struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory * _result = 0;
    HRESULT _hr = get_MarkerBatchPrimitiveOptionalParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactoryPtr(_result, false);
}

IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetMaximumCountPathPrimitiveUpdatePolicy ( ) {
    struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory * _result = 0;
    HRESULT _hr = get_MaximumCountPathPrimitiveUpdatePolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactoryPtr(_result, false);
}

IAgStkGraphicsModelPrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetModelPrimitive ( ) {
    struct IAgStkGraphicsModelPrimitiveFactory * _result = 0;
    HRESULT _hr = get_ModelPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsPathPrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetPathPrimitive ( ) {
    struct IAgStkGraphicsPathPrimitiveFactory * _result = 0;
    HRESULT _hr = get_PathPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsPixelSizeDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetPixelSizeDisplayCondition ( ) {
    struct IAgStkGraphicsPixelSizeDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_PixelSizeDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPixelSizeDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsPointBatchPrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetPointBatchPrimitive ( ) {
    struct IAgStkGraphicsPointBatchPrimitiveFactory * _result = 0;
    HRESULT _hr = get_PointBatchPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPointBatchPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsPolylinePrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetPolylinePrimitive ( ) {
    struct IAgStkGraphicsPolylinePrimitiveFactory * _result = 0;
    HRESULT _hr = get_PolylinePrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsRasterImageGlobeOverlayFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetRasterImageGlobeOverlay ( ) {
    struct IAgStkGraphicsRasterImageGlobeOverlayFactory * _result = 0;
    HRESULT _hr = get_RasterImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterImageGlobeOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsRhumbLineInterpolatorFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetRhumbLineInterpolator ( ) {
    struct IAgStkGraphicsRhumbLineInterpolatorFactory * _result = 0;
    HRESULT _hr = get_RhumbLineInterpolator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRhumbLineInterpolatorFactoryPtr(_result, false);
}

IAgStkGraphicsSceneDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetSceneDisplayCondition ( ) {
    struct IAgStkGraphicsSceneDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_SceneDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsSceneManagerInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetSceneManager ( ) {
    struct IAgStkGraphicsSceneManagerInitializer * _result = 0;
    HRESULT _hr = get_SceneManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneManagerInitializerPtr(_result, false);
}

IAgStkGraphicsScreenOverlayFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetScreenOverlay ( ) {
    struct IAgStkGraphicsScreenOverlayFactory * _result = 0;
    HRESULT _hr = get_ScreenOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsSolidPrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetSolidPrimitive ( ) {
    struct IAgStkGraphicsSolidPrimitiveFactory * _result = 0;
    HRESULT _hr = get_SolidPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsSurfaceMeshPrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetSurfaceMeshPrimitive ( ) {
    struct IAgStkGraphicsSurfaceMeshPrimitiveFactory * _result = 0;
    HRESULT _hr = get_SurfaceMeshPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceMeshPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsTerrainOverlayInitializerPtr IAgStkGraphicsFactoryAndInitializers::GetTerrainOverlay ( ) {
    struct IAgStkGraphicsTerrainOverlayInitializer * _result = 0;
    HRESULT _hr = get_TerrainOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayInitializerPtr(_result, false);
}

IAgStkGraphicsTextBatchPrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetTextBatchPrimitive ( ) {
    struct IAgStkGraphicsTextBatchPrimitiveFactory * _result = 0;
    HRESULT _hr = get_TextBatchPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetTextBatchPrimitiveOptionalParameters ( ) {
    struct IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory * _result = 0;
    HRESULT _hr = get_TextBatchPrimitiveOptionalParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactoryPtr(_result, false);
}

IAgStkGraphicsTextureMatrixFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetTextureMatrix ( ) {
    struct IAgStkGraphicsTextureMatrixFactory * _result = 0;
    HRESULT _hr = get_TextureMatrix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixFactoryPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetTextureScreenOverlay ( ) {
    struct IAgStkGraphicsTextureScreenOverlayFactory * _result = 0;
    HRESULT _hr = get_TextureScreenOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsTimeIntervalDisplayConditionFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetTimeIntervalDisplayCondition ( ) {
    struct IAgStkGraphicsTimeIntervalDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_TimeIntervalDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTimeIntervalDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsTriangleMeshPrimitiveFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetTriangleMeshPrimitive ( ) {
    struct IAgStkGraphicsTriangleMeshPrimitiveFactory * _result = 0;
    HRESULT _hr = get_TriangleMeshPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetTriangleMeshPrimitiveOptionalParameters ( ) {
    struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory * _result = 0;
    HRESULT _hr = get_TriangleMeshPrimitiveOptionalParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactoryPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetTextureFilter2D ( ) {
    struct IAgStkGraphicsTextureFilter2DFactory * _result = 0;
    HRESULT _hr = get_TextureFilter2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DFactoryPtr(_result, false);
}

IAgStkGraphicsBoundingSphereFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphereFactory * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSphereFactoryPtr(_result, false);
}

IAgStkGraphicsPathPointFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetPathPoint ( ) {
    struct IAgStkGraphicsPathPointFactory * _result = 0;
    HRESULT _hr = get_PathPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointFactoryPtr(_result, false);
}

IAgStkGraphicsTextOverlayFactoryPtr IAgStkGraphicsFactoryAndInitializers::GetTextOverlay ( ) {
    struct IAgStkGraphicsTextOverlayFactory * _result = 0;
    HRESULT _hr = get_TextOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayFactoryPtr(_result, false);
}

//
// interface IAgStkGraphicsSceneManager wrapper method implementations
//

IAgStkGraphicsPrimitiveManagerPtr IAgStkGraphicsSceneManager::GetPrimitives ( ) {
    struct IAgStkGraphicsPrimitiveManager * _result = 0;
    HRESULT _hr = get_Primitives(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPrimitiveManagerPtr(_result, false);
}

IAgStkGraphicsScreenOverlayManagerPtr IAgStkGraphicsSceneManager::GetScreenOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayManager * _result = 0;
    HRESULT _hr = get_ScreenOverlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayManagerPtr(_result, false);
}

IAgStkGraphicsTexture2DFactoryPtr IAgStkGraphicsSceneManager::GetTextures ( ) {
    struct IAgStkGraphicsTexture2DFactory * _result = 0;
    HRESULT _hr = get_Textures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTexture2DFactoryPtr(_result, false);
}

IAgStkGraphicsGlobeOverlaySettingsPtr IAgStkGraphicsSceneManager::GetGlobeOverlaySettings ( ) {
    struct IAgStkGraphicsGlobeOverlaySettings * _result = 0;
    HRESULT _hr = get_GlobeOverlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeOverlaySettingsPtr(_result, false);
}

IAgStkGraphicsSceneCollectionPtr IAgStkGraphicsSceneManager::GetScenes ( ) {
    struct IAgStkGraphicsSceneCollection * _result = 0;
    HRESULT _hr = get_Scenes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneCollectionPtr(_result, false);
}

HRESULT IAgStkGraphicsSceneManager::Render ( ) {
    HRESULT _hr = raw_Render();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsFactoryAndInitializersPtr IAgStkGraphicsSceneManager::GetInitializers ( ) {
    struct IAgStkGraphicsFactoryAndInitializers * _result = 0;
    HRESULT _hr = get_Initializers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFactoryAndInitializersPtr(_result, false);
}

//
// interface _IAgStkGraphicsSceneManager wrapper method implementations
//

IAgStkGraphicsPrimitiveManagerPtr _IAgStkGraphicsSceneManager::GetPrimitives ( ) {
    struct IAgStkGraphicsPrimitiveManager * _result = 0;
    HRESULT _hr = get_Primitives(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPrimitiveManagerPtr(_result, false);
}

IAgStkGraphicsScreenOverlayManagerPtr _IAgStkGraphicsSceneManager::GetScreenOverlays ( ) {
    struct IAgStkGraphicsScreenOverlayManager * _result = 0;
    HRESULT _hr = get_ScreenOverlays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayManagerPtr(_result, false);
}

IAgStkGraphicsTexture2DFactoryPtr _IAgStkGraphicsSceneManager::GetTextures ( ) {
    struct IAgStkGraphicsTexture2DFactory * _result = 0;
    HRESULT _hr = get_Textures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTexture2DFactoryPtr(_result, false);
}

IAgStkGraphicsGlobeOverlaySettingsPtr _IAgStkGraphicsSceneManager::GetGlobeOverlaySettings ( ) {
    struct IAgStkGraphicsGlobeOverlaySettings * _result = 0;
    HRESULT _hr = get_GlobeOverlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeOverlaySettingsPtr(_result, false);
}

IAgStkGraphicsSceneCollectionPtr _IAgStkGraphicsSceneManager::GetScenes ( ) {
    struct IAgStkGraphicsSceneCollection * _result = 0;
    HRESULT _hr = get_Scenes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneCollectionPtr(_result, false);
}

HRESULT _IAgStkGraphicsSceneManager::Render ( ) {
    HRESULT _hr = raw_Render();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsFactoryAndInitializersPtr _IAgStkGraphicsSceneManager::GetInitializers ( ) {
    struct IAgStkGraphicsFactoryAndInitializers * _result = 0;
    HRESULT _hr = get_Initializers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFactoryAndInitializersPtr(_result, false);
}

//
// interface IAgStkGraphicsPathPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsPathPrimitivePtr IAgStkGraphicsPathPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsPathPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPrimitivePtr(_result, false);
}

IAgStkGraphicsPathPrimitivePtr IAgStkGraphicsPathPrimitiveFactory::InitializeWithCapacity ( int Capacity ) {
    struct IAgStkGraphicsPathPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithCapacity(Capacity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPrimitivePtr(_result, false);
}

float IAgStkGraphicsPathPrimitiveFactory::GetMinimumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsPathPrimitiveFactory::GetMaximumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IAgStkGraphicsFactoryAndInitializers wrapper method implementations
//

IAgStkGraphicsBoxTriangulatorInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetBoxTriangulator ( ) {
    struct IAgStkGraphicsBoxTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_BoxTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoxTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsCylinderTriangulatorInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetCylinderTriangulator ( ) {
    struct IAgStkGraphicsCylinderTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_CylinderTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCylinderTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsEllipsoidTriangulatorInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetEllipsoidTriangulator ( ) {
    struct IAgStkGraphicsEllipsoidTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_EllipsoidTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsEllipsoidTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsExtrudedPolylineTriangulatorInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetExtrudedPolylineTriangulator ( ) {
    struct IAgStkGraphicsExtrudedPolylineTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_ExtrudedPolylineTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsExtrudedPolylineTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsSurfaceExtentTriangulatorInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetSurfaceExtentTriangulator ( ) {
    struct IAgStkGraphicsSurfaceExtentTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_SurfaceExtentTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceExtentTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsSurfacePolygonTriangulatorInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetSurfacePolygonTriangulator ( ) {
    struct IAgStkGraphicsSurfacePolygonTriangulatorInitializer * _result = 0;
    HRESULT _hr = get_SurfacePolygonTriangulator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfacePolygonTriangulatorInitializerPtr(_result, false);
}

IAgStkGraphicsSurfaceShapesInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetSurfaceShapes ( ) {
    struct IAgStkGraphicsSurfaceShapesInitializer * _result = 0;
    HRESULT _hr = get_SurfaceShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceShapesInitializerPtr(_result, false);
}

IAgStkGraphicsAGIProcessedImageGlobeOverlayFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetAGIProcessedImageGlobeOverlay ( ) {
    struct IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory * _result = 0;
    HRESULT _hr = get_AGIProcessedImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIProcessedImageGlobeOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsAGIProcessedTerrainOverlayFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetAGIProcessedTerrainOverlay ( ) {
    struct IAgStkGraphicsAGIProcessedTerrainOverlayFactory * _result = 0;
    HRESULT _hr = get_AGIProcessedTerrainOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIProcessedTerrainOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsAGIRoamImageGlobeOverlayFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetAGIRoamImageGlobeOverlay ( ) {
    struct IAgStkGraphicsAGIRoamImageGlobeOverlayFactory * _result = 0;
    HRESULT _hr = get_AGIRoamImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAGIRoamImageGlobeOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetCustomImageGlobeOverlayPluginActivator ( ) {
    struct IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory * _result = 0;
    HRESULT _hr = get_CustomImageGlobeOverlayPluginActivator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactoryPtr(_result, false);
}

IAgStkGraphicsGeospatialImageGlobeOverlayFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetGeospatialImageGlobeOverlay ( ) {
    struct IAgStkGraphicsGeospatialImageGlobeOverlayFactory * _result = 0;
    HRESULT _hr = get_GeospatialImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGeospatialImageGlobeOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsProjectedRasterOverlayFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetProjectedRasterOverlay ( ) {
    struct IAgStkGraphicsProjectedRasterOverlayFactory * _result = 0;
    HRESULT _hr = get_ProjectedRasterOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectedRasterOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsProjectionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetProjection ( ) {
    struct IAgStkGraphicsProjectionFactory * _result = 0;
    HRESULT _hr = get_Projection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionFactoryPtr(_result, false);
}

IAgStkGraphicsAltitudeDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetAltitudeDisplayCondition ( ) {
    struct IAgStkGraphicsAltitudeDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_AltitudeDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAltitudeDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsCompositeDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetCompositeDisplayCondition ( ) {
    struct IAgStkGraphicsCompositeDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_CompositeDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCompositeDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsCompositePrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetCompositePrimitive ( ) {
    struct IAgStkGraphicsCompositePrimitiveFactory * _result = 0;
    HRESULT _hr = get_CompositePrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsCompositePrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsConstantDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetConstantDisplayCondition ( ) {
    struct IAgStkGraphicsConstantDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_ConstantDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConstantDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDistanceDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetDistanceDisplayCondition ( ) {
    struct IAgStkGraphicsDistanceDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_DistanceDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetDistanceToGlobeOverlayDisplayCondition ( ) {
    struct IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_DistanceToGlobeOverlayDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDistanceToPositionDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetDistanceToPositionDisplayCondition ( ) {
    struct IAgStkGraphicsDistanceToPositionDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_DistanceToPositionDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPositionDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetDistanceToPrimitiveDisplayCondition ( ) {
    struct IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_DistanceToPrimitiveDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetDurationPathPrimitiveUpdatePolicy ( ) {
    struct IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory * _result = 0;
    HRESULT _hr = get_DurationPathPrimitiveUpdatePolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactoryPtr(_result, false);
}

IAgStkGraphicsGlobeImageOverlayInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetGlobeImageOverlay ( ) {
    struct IAgStkGraphicsGlobeImageOverlayInitializer * _result = 0;
    HRESULT _hr = get_GlobeImageOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGlobeImageOverlayInitializerPtr(_result, false);
}

IAgStkGraphicsGraphicsFontFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetGraphicsFont ( ) {
    struct IAgStkGraphicsGraphicsFontFactory * _result = 0;
    HRESULT _hr = get_GraphicsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGraphicsFontFactoryPtr(_result, false);
}

IAgStkGraphicsGreatArcInterpolatorFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetGreatArcInterpolator ( ) {
    struct IAgStkGraphicsGreatArcInterpolatorFactory * _result = 0;
    HRESULT _hr = get_GreatArcInterpolator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGreatArcInterpolatorFactoryPtr(_result, false);
}

IAgStkGraphicsAlphaFromLuminanceFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetAlphaFromLuminanceFilter ( ) {
    struct IAgStkGraphicsAlphaFromLuminanceFilterFactory * _result = 0;
    HRESULT _hr = get_AlphaFromLuminanceFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromLuminanceFilterFactoryPtr(_result, false);
}

IAgStkGraphicsAlphaFromPixelFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetAlphaFromPixelFilter ( ) {
    struct IAgStkGraphicsAlphaFromPixelFilterFactory * _result = 0;
    HRESULT _hr = get_AlphaFromPixelFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromPixelFilterFactoryPtr(_result, false);
}

IAgStkGraphicsAlphaFromRasterFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetAlphaFromRasterFilter ( ) {
    struct IAgStkGraphicsAlphaFromRasterFilterFactory * _result = 0;
    HRESULT _hr = get_AlphaFromRasterFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsAlphaFromRasterFilterFactoryPtr(_result, false);
}

IAgStkGraphicsBandExtractFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetBandExtractFilter ( ) {
    struct IAgStkGraphicsBandExtractFilterFactory * _result = 0;
    HRESULT _hr = get_BandExtractFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandExtractFilterFactoryPtr(_result, false);
}

IAgStkGraphicsBandOrderFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetBandOrderFilter ( ) {
    struct IAgStkGraphicsBandOrderFilterFactory * _result = 0;
    HRESULT _hr = get_BandOrderFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBandOrderFilterFactoryPtr(_result, false);
}

IAgStkGraphicsBlurFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetBlurFilter ( ) {
    struct IAgStkGraphicsBlurFilterFactory * _result = 0;
    HRESULT _hr = get_BlurFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBlurFilterFactoryPtr(_result, false);
}

IAgStkGraphicsBrightnessFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetBrightnessFilter ( ) {
    struct IAgStkGraphicsBrightnessFilterFactory * _result = 0;
    HRESULT _hr = get_BrightnessFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBrightnessFilterFactoryPtr(_result, false);
}

IAgStkGraphicsColorToLuminanceFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetColorToLuminanceFilter ( ) {
    struct IAgStkGraphicsColorToLuminanceFilterFactory * _result = 0;
    HRESULT _hr = get_ColorToLuminanceFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsColorToLuminanceFilterFactoryPtr(_result, false);
}

IAgStkGraphicsContrastFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetContrastFilter ( ) {
    struct IAgStkGraphicsContrastFilterFactory * _result = 0;
    HRESULT _hr = get_ContrastFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsContrastFilterFactoryPtr(_result, false);
}

IAgStkGraphicsConvolutionFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetConvolutionFilter ( ) {
    struct IAgStkGraphicsConvolutionFilterFactory * _result = 0;
    HRESULT _hr = get_ConvolutionFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsConvolutionFilterFactoryPtr(_result, false);
}

IAgStkGraphicsEdgeDetectFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetEdgeDetectFilter ( ) {
    struct IAgStkGraphicsEdgeDetectFilterFactory * _result = 0;
    HRESULT _hr = get_EdgeDetectFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsEdgeDetectFilterFactoryPtr(_result, false);
}

IAgStkGraphicsFilteringRasterStreamFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetFilteringRasterStream ( ) {
    struct IAgStkGraphicsFilteringRasterStreamFactory * _result = 0;
    HRESULT _hr = get_FilteringRasterStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFilteringRasterStreamFactoryPtr(_result, false);
}

IAgStkGraphicsFlipFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetFlipFilter ( ) {
    struct IAgStkGraphicsFlipFilterFactory * _result = 0;
    HRESULT _hr = get_FlipFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsFlipFilterFactoryPtr(_result, false);
}

IAgStkGraphicsGammaCorrectionFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetGammaCorrectionFilter ( ) {
    struct IAgStkGraphicsGammaCorrectionFilterFactory * _result = 0;
    HRESULT _hr = get_GammaCorrectionFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGammaCorrectionFilterFactoryPtr(_result, false);
}

IAgStkGraphicsGaussianBlurFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetGaussianBlurFilter ( ) {
    struct IAgStkGraphicsGaussianBlurFilterFactory * _result = 0;
    HRESULT _hr = get_GaussianBlurFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGaussianBlurFilterFactoryPtr(_result, false);
}

IAgStkGraphicsGradientDetectFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetGradientDetectFilter ( ) {
    struct IAgStkGraphicsGradientDetectFilterFactory * _result = 0;
    HRESULT _hr = get_GradientDetectFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsGradientDetectFilterFactoryPtr(_result, false);
}

IAgStkGraphicsJpeg2000WriterInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetJpeg2000Writer ( ) {
    struct IAgStkGraphicsJpeg2000WriterInitializer * _result = 0;
    HRESULT _hr = get_Jpeg2000Writer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsJpeg2000WriterInitializerPtr(_result, false);
}

IAgStkGraphicsLevelsFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetLevelsFilter ( ) {
    struct IAgStkGraphicsLevelsFilterFactory * _result = 0;
    HRESULT _hr = get_LevelsFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsLevelsFilterFactoryPtr(_result, false);
}

IAgStkGraphicsProjectionRasterStreamPluginActivatorFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetProjectionRasterStreamPluginActivator ( ) {
    struct IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory * _result = 0;
    HRESULT _hr = get_ProjectionRasterStreamPluginActivator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsProjectionRasterStreamPluginActivatorFactoryPtr(_result, false);
}

IAgStkGraphicsRasterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetRaster ( ) {
    struct IAgStkGraphicsRasterFactory * _result = 0;
    HRESULT _hr = get_Raster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterFactoryPtr(_result, false);
}

IAgStkGraphicsRasterAttributesFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetRasterAttributes ( ) {
    struct IAgStkGraphicsRasterAttributesFactory * _result = 0;
    HRESULT _hr = get_RasterAttributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterAttributesFactoryPtr(_result, false);
}

IAgStkGraphicsRotateFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetRotateFilter ( ) {
    struct IAgStkGraphicsRotateFilterFactory * _result = 0;
    HRESULT _hr = get_RotateFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRotateFilterFactoryPtr(_result, false);
}

IAgStkGraphicsSequenceFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetSequenceFilter ( ) {
    struct IAgStkGraphicsSequenceFilterFactory * _result = 0;
    HRESULT _hr = get_SequenceFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSequenceFilterFactoryPtr(_result, false);
}

IAgStkGraphicsSharpenFilterFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetSharpenFilter ( ) {
    struct IAgStkGraphicsSharpenFilterFactory * _result = 0;
    HRESULT _hr = get_SharpenFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSharpenFilterFactoryPtr(_result, false);
}

IAgStkGraphicsVideoStreamFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetVideoStream ( ) {
    struct IAgStkGraphicsVideoStreamFactory * _result = 0;
    HRESULT _hr = get_VideoStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsVideoStreamFactoryPtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetMarkerBatchPrimitive ( ) {
    struct IAgStkGraphicsMarkerBatchPrimitiveFactory * _result = 0;
    HRESULT _hr = get_MarkerBatchPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetMarkerBatchPrimitiveOptionalParameters ( ) {
    struct IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory * _result = 0;
    HRESULT _hr = get_MarkerBatchPrimitiveOptionalParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactoryPtr(_result, false);
}

IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetMaximumCountPathPrimitiveUpdatePolicy ( ) {
    struct IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory * _result = 0;
    HRESULT _hr = get_MaximumCountPathPrimitiveUpdatePolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactoryPtr(_result, false);
}

IAgStkGraphicsModelPrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetModelPrimitive ( ) {
    struct IAgStkGraphicsModelPrimitiveFactory * _result = 0;
    HRESULT _hr = get_ModelPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsModelPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsPathPrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetPathPrimitive ( ) {
    struct IAgStkGraphicsPathPrimitiveFactory * _result = 0;
    HRESULT _hr = get_PathPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsPixelSizeDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetPixelSizeDisplayCondition ( ) {
    struct IAgStkGraphicsPixelSizeDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_PixelSizeDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPixelSizeDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsPointBatchPrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetPointBatchPrimitive ( ) {
    struct IAgStkGraphicsPointBatchPrimitiveFactory * _result = 0;
    HRESULT _hr = get_PointBatchPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPointBatchPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsPolylinePrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetPolylinePrimitive ( ) {
    struct IAgStkGraphicsPolylinePrimitiveFactory * _result = 0;
    HRESULT _hr = get_PolylinePrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPolylinePrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsRasterImageGlobeOverlayFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetRasterImageGlobeOverlay ( ) {
    struct IAgStkGraphicsRasterImageGlobeOverlayFactory * _result = 0;
    HRESULT _hr = get_RasterImageGlobeOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRasterImageGlobeOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsRhumbLineInterpolatorFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetRhumbLineInterpolator ( ) {
    struct IAgStkGraphicsRhumbLineInterpolatorFactory * _result = 0;
    HRESULT _hr = get_RhumbLineInterpolator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsRhumbLineInterpolatorFactoryPtr(_result, false);
}

IAgStkGraphicsSceneDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetSceneDisplayCondition ( ) {
    struct IAgStkGraphicsSceneDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_SceneDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsSceneManagerInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetSceneManager ( ) {
    struct IAgStkGraphicsSceneManagerInitializer * _result = 0;
    HRESULT _hr = get_SceneManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSceneManagerInitializerPtr(_result, false);
}

IAgStkGraphicsScreenOverlayFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetScreenOverlay ( ) {
    struct IAgStkGraphicsScreenOverlayFactory * _result = 0;
    HRESULT _hr = get_ScreenOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsScreenOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsSolidPrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetSolidPrimitive ( ) {
    struct IAgStkGraphicsSolidPrimitiveFactory * _result = 0;
    HRESULT _hr = get_SolidPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSolidPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsSurfaceMeshPrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetSurfaceMeshPrimitive ( ) {
    struct IAgStkGraphicsSurfaceMeshPrimitiveFactory * _result = 0;
    HRESULT _hr = get_SurfaceMeshPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsSurfaceMeshPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsTerrainOverlayInitializerPtr _IAgStkGraphicsFactoryAndInitializers::GetTerrainOverlay ( ) {
    struct IAgStkGraphicsTerrainOverlayInitializer * _result = 0;
    HRESULT _hr = get_TerrainOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTerrainOverlayInitializerPtr(_result, false);
}

IAgStkGraphicsTextBatchPrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetTextBatchPrimitive ( ) {
    struct IAgStkGraphicsTextBatchPrimitiveFactory * _result = 0;
    HRESULT _hr = get_TextBatchPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetTextBatchPrimitiveOptionalParameters ( ) {
    struct IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory * _result = 0;
    HRESULT _hr = get_TextBatchPrimitiveOptionalParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactoryPtr(_result, false);
}

IAgStkGraphicsTextureMatrixFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetTextureMatrix ( ) {
    struct IAgStkGraphicsTextureMatrixFactory * _result = 0;
    HRESULT _hr = get_TextureMatrix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureMatrixFactoryPtr(_result, false);
}

IAgStkGraphicsTextureScreenOverlayFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetTextureScreenOverlay ( ) {
    struct IAgStkGraphicsTextureScreenOverlayFactory * _result = 0;
    HRESULT _hr = get_TextureScreenOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureScreenOverlayFactoryPtr(_result, false);
}

IAgStkGraphicsTimeIntervalDisplayConditionFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetTimeIntervalDisplayCondition ( ) {
    struct IAgStkGraphicsTimeIntervalDisplayConditionFactory * _result = 0;
    HRESULT _hr = get_TimeIntervalDisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTimeIntervalDisplayConditionFactoryPtr(_result, false);
}

IAgStkGraphicsTriangleMeshPrimitiveFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetTriangleMeshPrimitive ( ) {
    struct IAgStkGraphicsTriangleMeshPrimitiveFactory * _result = 0;
    HRESULT _hr = get_TriangleMeshPrimitive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitiveFactoryPtr(_result, false);
}

IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetTriangleMeshPrimitiveOptionalParameters ( ) {
    struct IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory * _result = 0;
    HRESULT _hr = get_TriangleMeshPrimitiveOptionalParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactoryPtr(_result, false);
}

IAgStkGraphicsTextureFilter2DFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetTextureFilter2D ( ) {
    struct IAgStkGraphicsTextureFilter2DFactory * _result = 0;
    HRESULT _hr = get_TextureFilter2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextureFilter2DFactoryPtr(_result, false);
}

IAgStkGraphicsBoundingSphereFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphereFactory * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSphereFactoryPtr(_result, false);
}

IAgStkGraphicsPathPointFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetPathPoint ( ) {
    struct IAgStkGraphicsPathPointFactory * _result = 0;
    HRESULT _hr = get_PathPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointFactoryPtr(_result, false);
}

IAgStkGraphicsTextOverlayFactoryPtr _IAgStkGraphicsFactoryAndInitializers::GetTextOverlay ( ) {
    struct IAgStkGraphicsTextOverlayFactory * _result = 0;
    HRESULT _hr = get_TextOverlay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsTextOverlayFactoryPtr(_result, false);
}

//
// interface IAgStkGraphicsPathPrimitive wrapper method implementations
//

int IAgStkGraphicsPathPrimitive::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IAgStkGraphicsPathPrimitive::GetCapacity ( ) {
    int _result = 0;
    HRESULT _hr = get_Capacity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPathPrimitiveUpdatePolicyPtr IAgStkGraphicsPathPrimitive::GetUpdatePolicy ( ) {
    struct IAgStkGraphicsPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = get_UpdatePolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPrimitiveUpdatePolicyPtr(_result, false);
}

void IAgStkGraphicsPathPrimitive::PutUpdatePolicy ( struct IAgStkGraphicsPathPrimitiveUpdatePolicy * ppRetVal ) {
    HRESULT _hr = put_UpdatePolicy(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsPolylineType IAgStkGraphicsPathPrimitive::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPrimitive::PutPolylineType ( enum AgEStkGraphicsPolylineType pRetVal ) {
    HRESULT _hr = put_PolylineType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPathPrimitive::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPrimitive::PutWidth ( float pRetVal ) {
    HRESULT _hr = put_Width(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPathPrimitive::GetMinimumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float IAgStkGraphicsPathPrimitive::GetMaximumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IAgStkGraphicsPathPrimitive::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPrimitive::PutDisplayOutline ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayOutline(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float IAgStkGraphicsPathPrimitive::GetOutlineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPrimitive::PutOutlineWidth ( float pRetVal ) {
    HRESULT _hr = put_OutlineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IAgStkGraphicsPathPrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IAgStkGraphicsPathPrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsPathPointPtr IAgStkGraphicsPathPrimitive::GetItem ( int Index ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IUnknownPtr IAgStkGraphicsPathPrimitive::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT IAgStkGraphicsPathPrimitive::AddFront ( struct IAgStkGraphicsPathPoint * PathPoint ) {
    HRESULT _hr = raw_AddFront(PathPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPathPrimitive::AddRangeToFront ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_AddRangeToFront(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPathPrimitive::AddBack ( struct IAgStkGraphicsPathPoint * PathPoint ) {
    HRESULT _hr = raw_AddBack(PathPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPathPrimitive::AddRangeToBack ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_AddRangeToBack(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPathPrimitive::RemoveFront ( ) {
    HRESULT _hr = raw_RemoveFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPathPrimitive::RemoveAllBefore ( int Index ) {
    HRESULT _hr = raw_RemoveAllBefore(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPathPrimitive::RemoveBack ( ) {
    HRESULT _hr = raw_RemoveBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAgStkGraphicsPathPrimitive::RemoveAllAfter ( int Index ) {
    HRESULT _hr = raw_RemoveAllAfter(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsPathPointPtr IAgStkGraphicsPathPrimitive::Front ( ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_Front(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr IAgStkGraphicsPathPrimitive::Back ( ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_Back(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

HRESULT IAgStkGraphicsPathPrimitive::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAgStkGraphicsPathPrimitiveUpdatePolicy wrapper method implementations
//

HRESULT IAgStkGraphicsPathPrimitiveUpdatePolicy::Update ( struct IAgStkGraphicsPathPrimitive * PathPrimitive, struct STKUtil::IAgDate * Date ) {
    HRESULT _hr = raw_Update(PathPrimitive, Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsPathPrimitiveUpdatePolicy wrapper method implementations
//

HRESULT _IAgStkGraphicsPathPrimitiveUpdatePolicy::Update ( struct IAgStkGraphicsPathPrimitive * PathPrimitive, struct STKUtil::IAgDate * Date ) {
    HRESULT _hr = raw_Update(PathPrimitive, Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy wrapper method implementations
//

HRESULT _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy::Update ( struct IAgStkGraphicsPathPrimitive * PathPrimitive, struct STKUtil::IAgDate * Date ) {
    HRESULT _hr = raw_Update(PathPrimitive, Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

double _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy::GetDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy::PutDuration ( double pRetVal ) {
    HRESULT _hr = put_Duration(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsPathPrimitiveRemoveLocation _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy::GetRemoveLocation ( ) {
    enum AgEStkGraphicsPathPrimitiveRemoveLocation _result;
    HRESULT _hr = get_RemoveLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy::PutRemoveLocation ( enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal ) {
    HRESULT _hr = put_RemoveLocation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy wrapper method implementations
//

HRESULT _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy::Update ( struct IAgStkGraphicsPathPrimitive * PathPrimitive, struct STKUtil::IAgDate * Date ) {
    HRESULT _hr = raw_Update(PathPrimitive, Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy::GetMaximumCount ( ) {
    int _result = 0;
    HRESULT _hr = get_MaximumCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy::PutMaximumCount ( int pRetVal ) {
    HRESULT _hr = put_MaximumCount(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsPathPrimitiveRemoveLocation _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy::GetRemoveLocation ( ) {
    enum AgEStkGraphicsPathPrimitiveRemoveLocation _result;
    HRESULT _hr = get_RemoveLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy::PutRemoveLocation ( enum AgEStkGraphicsPathPrimitiveRemoveLocation pRetVal ) {
    HRESULT _hr = put_RemoveLocation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsPathPrimitive wrapper method implementations
//

AgSTKVgtLib::IAgCrdnSystemPtr _IAgStkGraphicsPathPrimitive::GetReferenceFrame ( ) {
    struct AgSTKVgtLib::IAgCrdnSystem * _result = 0;
    HRESULT _hr = get_ReferenceFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AgSTKVgtLib::IAgCrdnSystemPtr(_result, false);
}

void _IAgStkGraphicsPathPrimitive::PutReferenceFrame ( struct AgSTKVgtLib::IAgCrdnSystem * ppRetVal ) {
    HRESULT _hr = put_ReferenceFrame(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsBoundingSpherePtr _IAgStkGraphicsPathPrimitive::GetBoundingSphere ( ) {
    struct IAgStkGraphicsBoundingSphere * _result = 0;
    HRESULT _hr = get_BoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsBoundingSpherePtr(_result, false);
}

void _IAgStkGraphicsPathPrimitive::PutBoundingSphere ( struct IAgStkGraphicsBoundingSphere * ppRetVal ) {
    HRESULT _hr = put_BoundingSphere(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPathPrimitive::GetAutomaticallyComputeBoundingSphere ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticallyComputeBoundingSphere(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPrimitive::PutAutomaticallyComputeBoundingSphere ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutomaticallyComputeBoundingSphere(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsDisplayConditionPtr _IAgStkGraphicsPathPrimitive::GetDisplayCondition ( ) {
    struct IAgStkGraphicsDisplayCondition * _result = 0;
    HRESULT _hr = get_DisplayCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsDisplayConditionPtr(_result, false);
}

void _IAgStkGraphicsPathPrimitive::PutDisplayCondition ( struct IAgStkGraphicsDisplayCondition * ppRetVal ) {
    HRESULT _hr = put_DisplayCondition(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPathPrimitive::GetDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPrimitive::PutDisplay ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Display(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

OLE_COLOR _IAgStkGraphicsPathPrimitive::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPrimitive::PutColor ( OLE_COLOR pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPathPrimitive::GetTranslucency ( ) {
    float _result = 0;
    HRESULT _hr = get_Translucency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPrimitive::PutTranslucency ( float pRetVal ) {
    HRESULT _hr = put_Translucency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _IAgStkGraphicsPathPrimitive::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _IAgStkGraphicsPathPrimitive::GetCapacity ( ) {
    int _result = 0;
    HRESULT _hr = get_Capacity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IAgStkGraphicsPathPrimitiveUpdatePolicyPtr _IAgStkGraphicsPathPrimitive::GetUpdatePolicy ( ) {
    struct IAgStkGraphicsPathPrimitiveUpdatePolicy * _result = 0;
    HRESULT _hr = get_UpdatePolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPrimitiveUpdatePolicyPtr(_result, false);
}

void _IAgStkGraphicsPathPrimitive::PutUpdatePolicy ( struct IAgStkGraphicsPathPrimitiveUpdatePolicy * ppRetVal ) {
    HRESULT _hr = put_UpdatePolicy(ppRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum AgEStkGraphicsPolylineType _IAgStkGraphicsPathPrimitive::GetPolylineType ( ) {
    enum AgEStkGraphicsPolylineType _result;
    HRESULT _hr = get_PolylineType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPrimitive::PutPolylineType ( enum AgEStkGraphicsPolylineType pRetVal ) {
    HRESULT _hr = put_PolylineType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPathPrimitive::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPrimitive::PutWidth ( float pRetVal ) {
    HRESULT _hr = put_Width(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPathPrimitive::GetMinimumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsPathPrimitive::GetMaximumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _IAgStkGraphicsPathPrimitive::GetDisplayOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPrimitive::PutDisplayOutline ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DisplayOutline(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float _IAgStkGraphicsPathPrimitive::GetOutlineWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_OutlineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPrimitive::PutOutlineWidth ( float pRetVal ) {
    HRESULT _hr = put_OutlineWidth(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _IAgStkGraphicsPathPrimitive::GetPerItemPickingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PerItemPickingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _IAgStkGraphicsPathPrimitive::PutPerItemPickingEnabled ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_PerItemPickingEnabled(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IAgStkGraphicsPathPointPtr _IAgStkGraphicsPathPrimitive::GetItem ( int Index ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IUnknownPtr _IAgStkGraphicsPathPrimitive::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT _IAgStkGraphicsPathPrimitive::AddFront ( struct IAgStkGraphicsPathPoint * PathPoint ) {
    HRESULT _hr = raw_AddFront(PathPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPathPrimitive::AddRangeToFront ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_AddRangeToFront(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPathPrimitive::AddBack ( struct IAgStkGraphicsPathPoint * PathPoint ) {
    HRESULT _hr = raw_AddBack(PathPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPathPrimitive::AddRangeToBack ( SAFEARRAY * * Positions ) {
    HRESULT _hr = raw_AddRangeToBack(Positions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPathPrimitive::RemoveFront ( ) {
    HRESULT _hr = raw_RemoveFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPathPrimitive::RemoveAllBefore ( int Index ) {
    HRESULT _hr = raw_RemoveAllBefore(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPathPrimitive::RemoveBack ( ) {
    HRESULT _hr = raw_RemoveBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _IAgStkGraphicsPathPrimitive::RemoveAllAfter ( int Index ) {
    HRESULT _hr = raw_RemoveAllAfter(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IAgStkGraphicsPathPointPtr _IAgStkGraphicsPathPrimitive::Front ( ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_Front(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

IAgStkGraphicsPathPointPtr _IAgStkGraphicsPathPrimitive::Back ( ) {
    struct IAgStkGraphicsPathPoint * _result = 0;
    HRESULT _hr = raw_Back(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPointPtr(_result, false);
}

HRESULT _IAgStkGraphicsPathPrimitive::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t _IAgStkGraphicsPathPrimitive::GetTag ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void _IAgStkGraphicsPathPrimitive::PutTag ( const _variant_t & pRetVal ) {
    HRESULT _hr = put_Tag(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IAgStkGraphicsPathPrimitiveFactory wrapper method implementations
//

IAgStkGraphicsPathPrimitivePtr _IAgStkGraphicsPathPrimitiveFactory::Initialize ( ) {
    struct IAgStkGraphicsPathPrimitive * _result = 0;
    HRESULT _hr = raw_Initialize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPrimitivePtr(_result, false);
}

IAgStkGraphicsPathPrimitivePtr _IAgStkGraphicsPathPrimitiveFactory::InitializeWithCapacity ( int Capacity ) {
    struct IAgStkGraphicsPathPrimitive * _result = 0;
    HRESULT _hr = raw_InitializeWithCapacity(Capacity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAgStkGraphicsPathPrimitivePtr(_result, false);
}

float _IAgStkGraphicsPathPrimitiveFactory::GetMinimumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MinimumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float _IAgStkGraphicsPathPrimitiveFactory::GetMaximumWidthSupported ( ) {
    float _result = 0;
    HRESULT _hr = get_MaximumWidthSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

} // namespace AgSTKGraphicsLib
