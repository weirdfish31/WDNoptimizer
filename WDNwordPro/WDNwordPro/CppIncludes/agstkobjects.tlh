// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (87bd1d35).
//
// c:\r_stk_v9.2.x\source\lib\release.net\tlhbuilder\agstkobjects.tlh
//
// C++ source equivalent of Win32 type library AgStkObjects.tlb
// compiler-generated file created 11/23/11 at 05:29:05 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace STKObjects {

//
// Forward references and typedefs
//

struct __declspec(uuid("36a4edb3-b021-4d44-a0aa-d1c897dc333d"))
/* LIBID */ __STKObjects;
struct __declspec(uuid("bc6991d0-b9a8-49a4-9a1b-e7154b844e07"))
/* dispinterface */ IAgStkObjectRootEvents;
enum AgEAnimationActions;
enum AgEAnimationDirections;
struct __declspec(uuid("f6cfa2d2-229e-4995-b917-c0795de30ad7"))
/* dual interface */ IAgScenarioBeforeSaveEventArgs;
struct __declspec(uuid("1fdccdbd-1c90-407a-ba87-9ed38d17fc79"))
/* dual interface */ IAgPctCmpltEventArgs;
struct __declspec(uuid("aacd8906-43cb-4071-a882-875770a22fb5"))
/* dual interface */ IAgStkObjectChangedEventArgs;
struct /* coclass */ AgStkObject;
struct __declspec(uuid("14a88dff-bc33-4b0d-a420-1d112f6878e5"))
/* dual interface */ _IAgStkObject;
struct __declspec(uuid("c57de75f-c558-4373-b225-246f754ac84a"))
/* interface */ IAgStkObject;
enum AgESTKObjectType;
struct __declspec(uuid("d6fb04c2-b5c0-4f6e-924d-a7a50e6f16f2"))
/* dual interface */ IAgStkObjectCollection;
struct __declspec(uuid("7486e7ef-03c4-449a-bdd2-160bc1b1af74"))
/* dual interface */ IAgStkObjectElementCollection;
struct __declspec(uuid("270e54ec-d27f-4cae-85e8-77f423ff55b2"))
/* interface */ IAgStkObjectRoot;
struct __declspec(uuid("a8933ffe-b9ad-4a8c-9ef1-228982b21279"))
/* interface */ IAgStdMil2525bSymbols;
struct __declspec(uuid("61a88d23-e0af-4d30-830d-627d4832198e"))
/* interface */ IAgAvailableFeatures;
enum AgEVePropagatorType;
struct __declspec(uuid("e490ccb1-6ebb-42a7-8729-9f5ae15623ee"))
/* dual interface */ IAgStkCentralBodyCollection;
struct __declspec(uuid("2d1f07ca-3398-4e8b-b58a-ec9b5ac3dce0"))
/* interface */ IAgStkCentralBody;
struct __declspec(uuid("f6e08959-2132-43b4-8bf7-89abad09ba08"))
/* interface */ IAgStkCentralBodyEllipsoid;
struct __declspec(uuid("547aafaf-0672-41fe-af74-2374b38892f7"))
/* dual interface */ IAgDataProviderCollection;
struct __declspec(uuid("b1059251-8787-4ddc-a2bc-0c572eb8b161"))
/* interface */ IAgDataProviderInfo;
enum AgEDataProviderType;
struct __declspec(uuid("0ecec640-964b-4949-9315-b6eb70fbf536"))
/* interface */ IAgDataPrvTimeVar;
struct __declspec(uuid("41779e83-e8fd-4122-bea3-25f25df32591"))
/* interface */ IAgDrResult;
enum AgEDrCategories;
struct __declspec(uuid("9bacc62b-fed2-49e2-b784-cd1ac16e1546"))
/* dual interface */ IAgDrSubSectionCollection;
struct __declspec(uuid("78c4cc9c-c9b6-4234-ba73-8d90d7b5996f"))
/* interface */ IAgDrSubSection;
struct __declspec(uuid("34211a29-e338-43af-92d2-54f693b9bec3"))
/* dual interface */ IAgDrIntervalCollection;
struct __declspec(uuid("f51f42d1-70d1-48e2-8f32-b84ffd01ba95"))
/* interface */ IAgDrInterval;
struct __declspec(uuid("28d2419a-15ca-4df5-9e62-5fd84785fdb6"))
/* dual interface */ IAgDrDataSetCollection;
struct __declspec(uuid("0a0dc9a4-587e-46cd-80f1-2873bc663bd9"))
/* interface */ IAgDrDataSet;
struct __declspec(uuid("82ca24eb-b64d-4d56-9f22-67950fa5268c"))
/* dual interface */ IAgDrTextMessage;
struct __declspec(uuid("8d12f436-5aa8-4d4c-a727-adb43dcd9dc8"))
/* interface */ IAgDrTimeArrayElements;
struct __declspec(uuid("6afaadc6-b69c-4b31-953b-7409a54df614"))
/* interface */ IAgDataPrvInterval;
struct __declspec(uuid("04123baa-bd39-41d8-b8ea-abffc8d366e4"))
/* interface */ IAgDataPrvFixed;
struct __declspec(uuid("8cee8a12-3880-4fc6-a53b-29b647004bb6"))
/* interface */ IAgStkObjectCoverage;
struct __declspec(uuid("06fc011e-64e7-4d63-85d4-3be6f7d448b2"))
/* dual interface */ IAgCvAssetListCollection;
struct __declspec(uuid("5e64b103-0d87-41c6-8dd8-a3cbf39f8b5e"))
/* interface */ IAgCvAssetListElement;
enum AgECvAssetStatus;
enum AgECvAssetGrouping;
struct __declspec(uuid("8d490c3c-a8d9-4db6-bea9-93e354716af3"))
/* interface */ IAgObjectCoverageFOM;
enum AgEFmDefinitionType;
struct __declspec(uuid("ee6249be-7493-41ce-9b0b-cb4fa996ba17"))
/* interface */ IAgFmDefinition;
struct __declspec(uuid("42e00645-e4ca-4881-937b-cf4edb29f01f"))
/* interface */ IAgFmSatisfaction;
enum AgEFmSatisfactionType;
enum AgEFmConstraintName;
struct __declspec(uuid("0791276a-9c8c-42df-b79f-26911d6a9bd8"))
/* interface */ IAgFmDefAccessConstraint;
struct __declspec(uuid("828a6a72-6913-4807-85cb-2ef2b8ff740d"))
/* interface */ IAgFmDefCompute;
enum AgEFmCompute;
struct __declspec(uuid("11257a67-ebfe-4c34-858d-b270eb18a1e0"))
/* interface */ IAgFmDefinitionData;
enum AgEFmAcrossAssets;
struct __declspec(uuid("f6ed000d-e121-4197-979d-f0206d16a106"))
/* interface */ IAgFmGraphics;
struct __declspec(uuid("456031ab-9105-4be7-8f79-6508497cd24c"))
/* interface */ IAgFmGfxAttributes;
struct __declspec(uuid("4ea8efef-5e9c-4183-873b-926c98e0bd33"))
/* interface */ IAgFmGfxContours;
enum AgEFmGfxContourType;
enum AgEFmGfxColorMethod;
struct __declspec(uuid("97c2d831-61bf-4353-b0ab-f0024aa93704"))
/* interface */ IAgFmGfxRampColor;
struct __declspec(uuid("9852bed2-7a91-4fc0-9eb7-2b0244a859eb"))
/* dual interface */ IAgFmGfxLevelAttributesCollection;
struct __declspec(uuid("58368736-1ce1-4933-a1fb-5e684ec5a9eb"))
/* interface */ IAgFmGfxLevelAttributesElement;
struct __declspec(uuid("529f814a-c5d1-4e68-ba3a-7cac4070f5fa"))
/* interface */ IAgFmGfxLegend;
struct __declspec(uuid("b7af521b-759c-43f9-9031-5cdb13600c5a"))
/* interface */ IAgFmGfxColorOptions;
struct __declspec(uuid("456d8f3b-5bf3-4ceb-9bf6-c0154879f6fa"))
/* interface */ IAgFmGfxTextOptions;
enum AgEFmGfxFloatingPointFormat;
struct __declspec(uuid("ad4d9d4e-cb03-485f-95d2-cacb69a6311e"))
/* interface */ IAgFmGfxRangeColorOptions;
enum AgEFmGfxDirection;
struct __declspec(uuid("8d5fbad6-0121-4b33-bf0b-dcdbe8d8b3c2"))
/* interface */ IAgFmGfxLegendWindow;
struct __declspec(uuid("4310fe1e-9b07-41e2-9548-536a88be4e1f"))
/* interface */ IAgFmGfxPositionOnMap;
struct __declspec(uuid("e7382589-af67-4f98-8007-8dd7dff9b116"))
/* interface */ IAgFmVOLegendWindow;
struct __declspec(uuid("ba003916-3fa4-4ae5-813e-9d7d93414fd2"))
/* interface */ IAgFmGfxAttributesAnimation;
enum AgEFmGfxAccumulation;
struct __declspec(uuid("573906b3-af1d-4d9d-98b2-3ac21d76d185"))
/* interface */ IAgStkAccess;
enum AgEAccessTimeType;
struct __declspec(uuid("5d3701db-fc04-4dfe-b35d-b26c170813ee"))
/* interface */ IAgStkAccessGraphics;
struct __declspec(uuid("ca82b728-ce59-448c-b9b5-0bfe68b1e59e"))
/* interface */ IAgStkAccessAdvanced;
enum AgEAberrationType;
enum AgEIvClockHost;
enum AgEIvTimeSense;
struct __declspec(uuid("a170f055-32b2-4605-927b-b0fbfb775f5d"))
/* dual interface */ IAgVODataDisplayCollection;
struct __declspec(uuid("d76f04b1-27e7-49b6-8f42-c9496593c343"))
/* interface */ IAgVODataDisplayElement;
enum AgEVOLocation;
enum AgEVOXOrigin;
enum AgEVOYOrigin;
enum AgEVOFontSize;
enum AgEVOFormat;
struct __declspec(uuid("6405b308-3c8a-4c82-9e01-c220c0a97753"))
/* dual interface */ IAgIntervalCollection;
struct __declspec(uuid("4e219215-adf0-4fb0-8107-53b968af3ef8"))
/* interface */ IAgAccessInterval;
struct __declspec(uuid("3cbc27e5-af8b-4956-9853-ab26fe991de8"))
/* dual interface */ IAgAccessConstraintCollection;
struct __declspec(uuid("1cb55445-ecd0-40a6-a2ee-4bac8a261233"))
/* interface */ IAgAccessConstraint;
enum AgEAccessConstraints;
struct __declspec(uuid("169b73b9-c430-4796-870f-556f49361231"))
/* interface */ IAgOnePtAccess;
struct __declspec(uuid("d20e3559-ae79-4ab2-8e44-3665c6ed9206"))
/* dual interface */ IAgOnePtAccessResultCollection;
struct __declspec(uuid("27de7a24-aead-48b3-96e8-f43c8eb19d76"))
/* interface */ IAgOnePtAccessResult;
struct __declspec(uuid("8d23ba70-2d68-4501-866c-62b9b95142de"))
/* dual interface */ IAgOnePtAccessConstraintCollection;
struct __declspec(uuid("ed50c3b7-68d9-4d43-a939-290f1e6f3991"))
/* interface */ IAgOnePtAccessConstraint;
enum AgEOnePtAccessStatus;
enum AgEOnePtAccessSummary;
struct __declspec(uuid("6cd1ed29-ca0b-411e-9cbb-adf58d56e05b"))
/* interface */ IAgLifetimeInformation;
struct /* coclass */ AgStkObjectRoot;
struct __declspec(uuid("ea1a32f6-ff8e-4edd-9872-3d6d64c52146"))
/* dual interface */ _IAgStkObjectRoot;
enum AgEAnimationModes;
enum AgEAnimationOptions;
struct __declspec(uuid("9eed83d9-8c56-4045-a547-808f5a439ada"))
/* interface */ IAgAnimation;
struct /* coclass */ AgLevelAttribute;
struct __declspec(uuid("d0becf69-cf32-45ac-83d1-fb916ed315a1"))
/* dual interface */ _IAgLevelAttribute;
enum AgELineWidth;
struct __declspec(uuid("18b6ce65-6581-432e-a7a8-910424fa1b57"))
/* interface */ IAgLevelAttribute;
struct /* coclass */ AgLevelAttributeCollection;
struct __declspec(uuid("1aa5a85d-f24f-42f2-8f67-b731281aeb06"))
/* dual interface */ IAgLevelAttributeCollection;
struct /* coclass */ AgBasicAzElMask;
struct __declspec(uuid("044579f9-353c-4c20-ab48-3db6f1b1c682"))
/* dual interface */ _IAgBasicAzElMask;
struct __declspec(uuid("2305979b-f736-481d-9576-d970d831ccac"))
/* interface */ IAgBasicAzElMask;
struct /* coclass */ AgFaGraphics;
struct __declspec(uuid("e6464981-390d-47aa-bfa6-5dcad5fc0b7c"))
/* dual interface */ _IAgFaGraphics;
struct __declspec(uuid("351a21c7-4f9c-451a-a958-04a54fa1194e"))
/* interface */ IAgGfxRangeContours;
struct __declspec(uuid("937ce022-a1c2-4cb0-a474-22aa492b10f0"))
/* dual interface */ IAgLabelNoteCollection;
struct __declspec(uuid("963ce5f5-94c6-4ff7-91d0-68a6d7c8ae96"))
/* interface */ IAgLabelNote;
enum AgENoteShowType;
struct __declspec(uuid("f19c7a62-9c2d-4730-bb4f-cfffd3fe80b7"))
/* interface */ IAgFaGraphics;
struct /* coclass */ AgGfxRangeContours;
struct __declspec(uuid("f7a7cb83-b7ab-44c4-8ac0-a8daf9c322a1"))
/* dual interface */ _IAgGfxRangeContours;
struct /* coclass */ AgAccessConstraint;
struct __declspec(uuid("19abb9e1-8c35-4e62-a918-72468b8e4455"))
/* dual interface */ _IAgAccessConstraint;
struct __declspec(uuid("b88aa9dd-7799-48b6-b8b1-f22c3aa95e58"))
/* interface */ IAgAccessConstraint2;
struct /* coclass */ AgAccessConstraintCollection;
struct /* coclass */ AgVORangeContours;
struct __declspec(uuid("cedc17fd-479a-4150-adb7-bc0c3950bbec"))
/* dual interface */ _IAgVORangeContours;
struct __declspec(uuid("32db9d85-5e13-4b0d-9bb5-4ce769ab9a57"))
/* interface */ IAgVOBorderWall;
enum AgEBorderWallUpperLowerEdgeAltRef;
struct __declspec(uuid("403adedc-3969-4f0e-b543-1cfac3f9b613"))
/* interface */ IAgVOLabelSwapDistance;
enum AgEVOLabelSwapDistance;
struct __declspec(uuid("7417e3e1-be1c-46a0-95a9-70b60ee47393"))
/* interface */ IAgVORangeContours;
struct /* coclass */ AgVOOffsetRotate;
struct __declspec(uuid("cddb861e-9bc0-4c5b-9ac5-51b06dd91249"))
/* dual interface */ _IAgVOOffsetRotate;
struct __declspec(uuid("5af865f7-bea8-4410-9e93-e10b05636eaf"))
/* interface */ IAgVOOffsetRotate;
struct /* coclass */ AgVOOffsetTrans;
struct __declspec(uuid("6398df65-a7e6-4b2b-9095-329bf27aa33a"))
/* dual interface */ _IAgVOOffsetTrans;
struct __declspec(uuid("ca2c409d-6f99-4be2-9a26-364949514ddc"))
/* interface */ IAgVOOffsetTrans;
struct /* coclass */ AgVOOffsetAttach;
struct __declspec(uuid("b69afe67-87ad-428e-8ee8-d3075008ae40"))
/* dual interface */ _IAgVOOffsetAttach;
struct __declspec(uuid("9a324a77-73fa-4b8d-b328-7e001b895986"))
/* interface */ IAgVOOffsetAttach;
struct /* coclass */ AgVOOffsetLabel;
struct __declspec(uuid("12972bb2-a44e-405d-a405-9004a3134b55"))
/* dual interface */ _IAgVOOffsetLabel;
enum AgEOffsetFrameType;
struct __declspec(uuid("592a718d-aad5-4fb3-b25d-04c82f7ffa2f"))
/* interface */ IAgVOOffsetLabel;
struct /* coclass */ AgVOOffset;
struct __declspec(uuid("5bffdcfa-9515-4ba3-9bac-552b4b0205ed"))
/* dual interface */ _IAgVOOffset;
struct __declspec(uuid("afb5066c-4b39-4468-9d06-96960251891e"))
/* interface */ IAgVOOffset;
struct /* coclass */ AgVOMarkerShape;
struct __declspec(uuid("49275adb-1aba-42c3-ad4b-a6a217b0d125"))
/* dual interface */ _IAgVOMarkerShape;
enum AgE3dMarkerShape;
struct __declspec(uuid("677bf130-013f-49ab-b4d0-74df33fe63af"))
/* interface */ IAgVOMarkerData;
struct __declspec(uuid("2f779e6c-5656-44c0-aeed-90079196d08b"))
/* interface */ IAgVOMarkerShape;
struct /* coclass */ AgVOMarkerFile;
struct __declspec(uuid("345ab476-de42-4ebc-9cac-fe3e936ca1b2"))
/* dual interface */ _IAgVOMarkerFile;
struct __declspec(uuid("d741993c-7865-46ed-981e-8f7ca6f9eff0"))
/* interface */ IAgVOMarkerFile;
struct /* coclass */ AgVOMarker;
struct __declspec(uuid("ca2c5ea7-ea74-4d13-a861-fb0d2ded73fd"))
/* dual interface */ _IAgVOMarker;
enum AgEMarkerType;
enum AgEVOMarkerOriginType;
enum AgEVOMarkerOrientation;
struct __declspec(uuid("0f3ae239-4d94-48a6-91ec-174f0bd87d35"))
/* interface */ IAgVOMarker;
struct /* coclass */ AgVODetailThreshold;
struct __declspec(uuid("9f88f6f4-ea0d-4507-9728-593860a10582"))
/* dual interface */ _IAgVODetailThreshold;
struct __declspec(uuid("f9b5a162-98dc-4b92-bcf4-1831eced23ed"))
/* interface */ IAgVODetailThreshold;
struct /* coclass */ AgVOModelItem;
struct __declspec(uuid("3bd22bfa-fe91-4957-9fd1-15853d19c32f"))
/* dual interface */ _IAgVOModelItem;
struct __declspec(uuid("9a3224fe-b046-45ef-942e-3656755a86c7"))
/* interface */ IAgVOModelItem;
struct /* coclass */ AgVOModelCollection;
struct __declspec(uuid("93769f1a-d1df-460e-b227-b97b6fefc880"))
/* interface */ IAgVOModelData;
struct __declspec(uuid("d8058970-9fbb-4285-b9d5-e41fa1873756"))
/* dual interface */ IAgVOModelCollection;
struct /* coclass */ AgLabelNote;
struct __declspec(uuid("a9c5e906-5fca-40a5-b540-fcc77d33ec8d"))
/* dual interface */ _IAgLabelNote;
struct /* coclass */ AgLabelNoteCollection;
struct /* coclass */ AgVOVector;
struct __declspec(uuid("2f8f42f9-231f-4c2a-ae9e-bdd1e76772a9"))
/* dual interface */ _IAgVOVector;
struct __declspec(uuid("4a79401e-f564-49c4-9ca2-8a58d51d47af"))
/* dual interface */ IAgVORefCrdnCollection;
struct __declspec(uuid("88097d07-90ef-447f-92da-870d7d02312a"))
/* interface */ IAgVORefCrdn;
enum AgEGeometricElemType;
struct __declspec(uuid("17135f30-6574-49d1-89e0-938269e71c1b"))
/* interface */ IAgVOVector;
struct /* coclass */ AgFaVO;
struct __declspec(uuid("08add911-808c-4575-b725-3b52d6de70bb"))
/* dual interface */ _IAgFaVO;
struct __declspec(uuid("a16d4ef7-6be5-4845-8448-96f337a2b6b0"))
/* interface */ IAgPtTargetVOModel;
struct __declspec(uuid("f96b935d-c04d-41e2-8754-c108613c254f"))
/* interface */ IAgVOModel;
enum AgEModelType;
struct __declspec(uuid("e43fe529-270f-4186-a162-a89025993706"))
/* interface */ IAgVOModelArtic;
struct __declspec(uuid("0a42871e-82c9-4a93-ba48-c088b6935212"))
/* dual interface */ IAgVOModelTransCollection;
struct __declspec(uuid("eacaed86-95c2-4631-a3b9-d61cf189a59b"))
/* interface */ IAgVOModelTrans;
struct __declspec(uuid("874d4e7f-b4e6-4c34-8bd0-be525098a8bf"))
/* interface */ IAgVOAzElMask;
struct __declspec(uuid("add7d1a3-3d29-48a9-8731-c28da6dfe5a1"))
/* interface */ IAgVOModelPointing;
struct __declspec(uuid("2ceb50d1-3f18-4762-8e62-58ec3fbeffbc"))
/* dual interface */ IAgVOPointableElementsCollection;
struct __declspec(uuid("75d38c0c-3792-4995-aabf-5b1959df44af"))
/* interface */ IAgVOPointableElementsElement;
struct __declspec(uuid("5f10ae33-c3c3-4eb9-8c7a-c343b8747517"))
/* interface */ IAgLinkToObject;
struct __declspec(uuid("fc74d837-49c1-4559-91b1-e2c905de94ec"))
/* interface */ IAgVOVaporTrail;
struct __declspec(uuid("8d8e61ed-5478-4d12-9f19-5239a98440ef"))
/* interface */ IAgFaVO;
struct /* coclass */ AgTerrainNormSlopeAzimuth;
struct __declspec(uuid("51f16581-7248-40d4-a84e-428db32ed9d4"))
/* dual interface */ _IAgTerrainNormSlopeAzimuth;
struct __declspec(uuid("ab61e628-a852-47eb-ac17-0fd8d44fff7a"))
/* interface */ IAgTerrainNormData;
struct __declspec(uuid("15b306f9-81f2-4580-83f6-139839402e9c"))
/* interface */ IAgTerrainNormSlopeAzimuth;
struct /* coclass */ AgIntervalCollection;
struct __declspec(uuid("1f4027b1-05b3-41b7-b804-5941f569c587"))
/* interface */ IAgDisplayTimesData;
struct /* coclass */ AgDuringAccess;
struct __declspec(uuid("384208a6-48fd-405e-85ab-cb3f2c39e298"))
/* dual interface */ _IAgDuringAccess;
struct __declspec(uuid("efd90dad-f665-4d96-9982-18d770f5064c"))
/* dual interface */ IAgObjectLinkCollection;
struct __declspec(uuid("0c72764d-d15a-4d7d-82d9-7da92d57af5d"))
/* interface */ IAgObjectLink;
struct __declspec(uuid("42e2aa07-06ab-4cb7-a066-5334af20f38e"))
/* interface */ IAgDuringAccess;
struct /* coclass */ AgStVO;
struct __declspec(uuid("46b996a1-187a-4015-a975-5c897aacc9d8"))
/* dual interface */ _IAgStVO;
struct __declspec(uuid("379512ed-907c-4020-a031-89bcb7931275"))
/* interface */ IAgStVO;
struct /* coclass */ AgStGraphics;
struct __declspec(uuid("68186701-b6c1-40b7-8969-1fbe1da5a525"))
/* dual interface */ _IAgStGraphics;
struct __declspec(uuid("9fec4181-0828-4695-8473-105409b886fc"))
/* interface */ IAgStGraphics;
struct /* coclass */ AgPlVO;
struct __declspec(uuid("fa15e09f-c8d4-441e-9e26-f3aebacb2541"))
/* dual interface */ _IAgPlVO;
struct __declspec(uuid("1124c62f-7203-448c-868a-610a62d97d45"))
/* interface */ IAgPlVO;
struct /* coclass */ AgPlGraphics;
struct __declspec(uuid("c11e1a81-fc4c-410c-bce2-03a05b375655"))
/* dual interface */ _IAgPlGraphics;
enum AgEPlOrbitDisplayType;
struct __declspec(uuid("41709e9b-f9b4-4df6-b291-f9e965460ee6"))
/* interface */ IAgOrbitDisplayData;
struct __declspec(uuid("9850d6ad-d336-47b6-a719-9a9fd9107fda"))
/* interface */ IAgPlGraphics;
struct /* coclass */ AgAreaTypePattern;
struct __declspec(uuid("a578e56a-c9fa-45d4-a8b8-a67f3c1b92f2"))
/* dual interface */ _IAgAreaTypePattern;
struct __declspec(uuid("6a725e1b-2835-43df-a843-22f7779ae935"))
/* interface */ IAgAreaTypePattern;
struct /* coclass */ AgAreaTypePatternCollection;
struct __declspec(uuid("db7ce2ad-491d-412b-b2c3-6b47362ae5dc"))
/* interface */ IAgAreaTypeData;
struct __declspec(uuid("fc52516b-0be1-40d8-8c51-8b4d4a48333f"))
/* dual interface */ IAgAreaTypePatternCollection;
struct /* coclass */ AgAreaTypeEllipse;
struct __declspec(uuid("2ead1580-1960-4868-9d42-8af788840063"))
/* dual interface */ _IAgAreaTypeEllipse;
struct __declspec(uuid("eca445f2-9093-4de1-a687-0c06225e2902"))
/* interface */ IAgAreaTypeEllipse;
struct /* coclass */ AgATVO;
struct __declspec(uuid("7d461fc0-8c3e-4b51-a4d5-5538f078837f"))
/* dual interface */ _IAgATVO;
struct __declspec(uuid("73430bdd-ba82-4d89-b3e2-5ff85b64002d"))
/* interface */ IAgATVO;
struct /* coclass */ AgATGraphics;
struct __declspec(uuid("034bc7d5-5493-4386-b466-cfa05de94ed6"))
/* dual interface */ _IAgATGraphics;
struct __declspec(uuid("3dde858f-d8ef-400e-981e-cc90bbe808eb"))
/* interface */ IAgATGraphics;
struct /* coclass */ AgVOAzElMask;
struct __declspec(uuid("72e45e0b-f5e8-445e-ac24-ec573df93d4e"))
/* dual interface */ _IAgVOAzElMask;
struct /* coclass */ AgVOModelArtic;
struct __declspec(uuid("5ef45dd4-9a43-428e-bf82-b842cd38640b"))
/* dual interface */ _IAgVOModelArtic;
struct /* coclass */ AgVOModelTransCollection;
struct /* coclass */ AgVOModelTrans;
struct __declspec(uuid("3b9bb10c-76fc-4142-8cc9-435399a90890"))
/* dual interface */ _IAgVOModelTrans;
struct /* coclass */ AgVOModelFile;
struct __declspec(uuid("fc9be036-1582-4bc9-ab24-0b60b0ab010f"))
/* dual interface */ _IAgVOModelFile;
struct __declspec(uuid("857f0ff7-16be-4e75-b364-9eefe7b10425"))
/* interface */ IAgVOModelFile;
struct /* coclass */ AgPlPosFile;
struct __declspec(uuid("bc42fdb6-19e3-4cc5-b644-05e74aec4fe5"))
/* dual interface */ _IAgPlPosFile;
struct __declspec(uuid("95977602-5d8e-44e5-9d62-38e9e6ebd4ea"))
/* interface */ IAgPositionSourceData;
struct __declspec(uuid("7831e783-0e7f-41a1-ba00-c215ed52fac2"))
/* interface */ IAgPlPosFile;
struct /* coclass */ AgPlPosCentralBody;
struct __declspec(uuid("5c3e425d-b767-4a0d-8b1d-4e4d82469b68"))
/* dual interface */ _IAgPlPosCentralBody;
enum AgEEphemSourceType;
struct __declspec(uuid("f9f792f7-0884-45bc-bb5a-5fca26fee3df"))
/* interface */ IAgPlPosCentralBody;
struct /* coclass */ AgPlOrbitDisplayTime;
struct __declspec(uuid("86d09d70-f553-424f-9650-d2a22d5a50e1"))
/* dual interface */ _IAgPlOrbitDisplayTime;
struct __declspec(uuid("179c31b6-3991-490d-90e9-5f54881c9ff3"))
/* interface */ IAgPlOrbitDisplayTime;
struct /* coclass */ AgScenario;
struct __declspec(uuid("3caf34e8-6d57-47c7-8180-72f387364116"))
/* dual interface */ _IAgScenario;
struct __declspec(uuid("909db3cc-4cf2-4ac4-b621-8f6259d70967"))
/* interface */ IAgScAnimation;
enum AgEScEndLoopType;
enum AgEScRefreshDeltaType;
enum AgEScTimeStepType;
struct __declspec(uuid("61aae8c4-8f7a-41e5-bd65-5a1cb96c35f8"))
/* interface */ IAgScAnimationTimePeriod;
struct __declspec(uuid("00435d0c-66b5-42c2-8b90-61a4060690db"))
/* interface */ IAgTimePeriodValue;
enum AgETimePeriodValueType;
struct __declspec(uuid("b3d4b0b5-ed59-45e6-88ff-74fc6354443d"))
/* interface */ IAgScEarthData;
struct __declspec(uuid("63e4fe9a-cfb2-4c18-b0f7-937104f14402"))
/* interface */ IAgScGraphics;
enum AgETextOutlineStyle;
struct __declspec(uuid("09c8c395-4b6b-4664-b338-1f238d154405"))
/* dual interface */ IAgTerrainCollection;
struct __declspec(uuid("ae8fe356-4977-4ca3-9b0a-3b9d03c1e72f"))
/* interface */ IAgTerrain;
enum AgETerrainFileType;
struct __declspec(uuid("f42b2818-692a-49b1-a62e-3117e3efdf71"))
/* dual interface */ IAgScGenDbCollection;
struct __declspec(uuid("98844d68-b251-4f0b-838a-c5370ad5402e"))
/* interface */ IAgScGenDb;
struct __declspec(uuid("e1b22d12-2077-419a-a309-ca0533c54131"))
/* interface */ IAgScVO;
struct __declspec(uuid("ad15b083-3a7e-4fae-8f6d-fef90fb416d6"))
/* dual interface */ IAgScGlobeServersCollection;
struct __declspec(uuid("308ce523-824e-4452-a3fe-50b71ae7eda3"))
/* interface */ IAgScGlobeServerConfigData;
struct __declspec(uuid("c6fa4072-784c-44f2-92dd-58b667cea049"))
/* interface */ IAgSc3dFont;
enum AgESc3dPtSize;
enum AgESurfaceReference;
enum AgEAcWGS84WarningType;
struct __declspec(uuid("5647c4ac-3ac5-475e-96f7-dc1b4a4d31f5"))
/* dual interface */ IAgCentralBodyTerrainCollection;
struct __declspec(uuid("74b1f5cc-508a-45db-af7d-e5ef35fcd62a"))
/* interface */ IAgCentralBodyTerrainCollectionElement;
struct __declspec(uuid("4ef1949e-82ae-42c8-8349-22ec82a17cd9"))
/* interface */ IAgTimePeriod;
struct __declspec(uuid("2033e1cc-f808-4839-8c13-60c0b59be4e7"))
/* interface */ IAgSpEnvScenSpaceEnvironment;
struct __declspec(uuid("012e725b-02d4-45bf-80df-a06191b48c69"))
/* interface */ IAgSpEnvRadiationEnvironment;
enum AgESpEnvCrresProtonActivity;
enum AgESpEnvCrresRadiationActivity;
struct __declspec(uuid("eaf12d23-e447-4edf-8c01-2551e844455a"))
/* interface */ IAgSpEnvRadEnergyValues;
struct __declspec(uuid("3f65b0b7-abd2-4b45-9abf-3a73a4d1273c"))
/* interface */ IAgSpEnvRadEnergyMethodSpecify;
enum AgESpEnvNasaModelsActivity;
struct __declspec(uuid("fcb20754-c8ed-4fa7-b38a-7c070327902e"))
/* interface */ IAgSpEnvScenExtVO;
struct __declspec(uuid("54f90d51-5621-41e0-8cb3-d35e08d06bcd"))
/* interface */ IAgSpEnvMagFieldGfx;
enum AgESpEnvMagFieldColorMode;
enum AgESpEnvMagFieldColorScale;
enum AgESpEnvMagFieldLineMode;
enum AgESpEnvMagneticMainField;
enum AgESpEnvMagneticExternalField;
enum AgESpEnvSAAChannel;
struct __declspec(uuid("20935363-8def-488e-8c45-8622b9913e6a"))
/* interface */ IAgScenario;
struct /* coclass */ AgScAnimation;
struct __declspec(uuid("177bf49a-148b-49f2-ac67-18adffaf6f4c"))
/* dual interface */ _IAgScAnimation;
struct /* coclass */ AgScEarthData;
struct __declspec(uuid("7cc1715c-8000-474e-bc69-052321a8d04d"))
/* dual interface */ _IAgScEarthData;
struct /* coclass */ AgScGraphics;
struct __declspec(uuid("fe5f4701-d02e-4bd7-a127-98ab12d0590c"))
/* dual interface */ _IAgScGraphics;
struct /* coclass */ AgTerrainCollection;
struct /* coclass */ AgTerrain;
struct __declspec(uuid("94d228ae-cf9e-4b51-9a33-44402b927313"))
/* dual interface */ _IAgTerrain;
struct /* coclass */ AgScGenDbCollection;
struct /* coclass */ AgScGenDb;
struct __declspec(uuid("3b87cf5c-34b8-468d-83b3-6d9232035c83"))
/* dual interface */ _IAgScGenDb;
struct /* coclass */ AgScVO;
struct __declspec(uuid("4d3b328e-003d-49f6-82a9-a87a6c86023b"))
/* dual interface */ _IAgScVO;
struct /* coclass */ AgSnComplexConicPattern;
struct __declspec(uuid("eecf71c2-c611-4f11-af83-9ec753f7a62e"))
/* dual interface */ _IAgSnComplexConicPattern;
struct __declspec(uuid("64992e2d-0edf-4711-86f5-4cb5328a2617"))
/* interface */ IAgSnPattern;
struct __declspec(uuid("559cefe7-bb5e-413f-b966-3af3c719ebea"))
/* interface */ IAgSnComplexConicPattern;
struct /* coclass */ AgSnCustomPattern;
struct __declspec(uuid("5b5c3d14-7651-40bb-bb1f-34684a6d220c"))
/* dual interface */ _IAgSnCustomPattern;
struct __declspec(uuid("cc2219ce-a329-40c0-9952-9f169bd7844b"))
/* interface */ IAgSnCustomPattern;
struct /* coclass */ AgSnHalfPowerPattern;
struct __declspec(uuid("521fd05b-b496-48be-80e0-89fd057ae357"))
/* dual interface */ _IAgSnHalfPowerPattern;
struct __declspec(uuid("361deed5-28e9-41a5-9b2c-8c53884d24ee"))
/* interface */ IAgSnHalfPowerPattern;
struct /* coclass */ AgSnRectangularPattern;
struct __declspec(uuid("a5f9beec-e137-41a7-8d51-57159b9b08a6"))
/* dual interface */ _IAgSnRectangularPattern;
struct __declspec(uuid("bcbcb85e-bde2-486b-a1a0-0e30b1953946"))
/* interface */ IAgSnRectangularPattern;
struct /* coclass */ AgSnSARPattern;
struct __declspec(uuid("9ded3a2d-8572-40bc-92f6-6ff7161c4f10"))
/* dual interface */ _IAgSnSARPattern;
struct __declspec(uuid("e9b3b227-1907-4e4c-97bf-221bfaa7b52d"))
/* interface */ IAgSnSARPattern;
struct /* coclass */ AgSnSimpleConicPattern;
struct __declspec(uuid("000ed307-1882-47ec-8f60-223bcfb85803"))
/* dual interface */ _IAgSnSimpleConicPattern;
struct __declspec(uuid("d4cc9d68-2c2f-4702-9a37-830d798dedf7"))
/* interface */ IAgSnSimpleConicPattern;
struct /* coclass */ AgSnPtFixed;
struct __declspec(uuid("83edeb60-34f5-4144-a7d2-b28b2a518135"))
/* dual interface */ _IAgSnPtFixed;
struct __declspec(uuid("12bbf9ab-727d-4c86-91af-8e5f64adcada"))
/* interface */ IAgSnPointing;
struct __declspec(uuid("7e0d3621-a59d-4c41-99a2-2f76b224a573"))
/* interface */ IAgSnPtFixed;
struct /* coclass */ AgSnPtFixedAxes;
struct __declspec(uuid("bf13ed12-18f2-40d9-aa6b-920ede9a07e1"))
/* dual interface */ _IAgSnPtFixedAxes;
struct __declspec(uuid("d8c63861-6d06-49a8-bb82-6e45a2b68e31"))
/* interface */ IAgSnPtFixedAxes;
struct /* coclass */ AgSnPt3DModel;
struct __declspec(uuid("94066029-ad3f-4161-ba46-15f8dd046528"))
/* dual interface */ _IAgSnPt3DModel;
struct __declspec(uuid("a072c2c4-48b5-49ca-9f4a-08ced9dc5d91"))
/* interface */ IAgSnPt3DModel;
struct /* coclass */ AgSnPtSpinning;
struct __declspec(uuid("58bc17b7-c808-49b1-b6eb-2178a3d1ee17"))
/* dual interface */ _IAgSnPtSpinning;
enum AgESnScanMode;
struct __declspec(uuid("3ecdf021-e0e3-4fa0-a4a6-1a321b259fd7"))
/* interface */ IAgSnPtSpinning;
struct /* coclass */ AgSnPtTargeted;
struct __declspec(uuid("338fb9bc-82eb-4432-aa38-258725801900"))
/* dual interface */ _IAgSnPtTargeted;
enum AgESnPtTrgtBsightType;
struct __declspec(uuid("c4c6092f-8175-4059-bec0-46036193f187"))
/* interface */ IAgSnPtTrgtBsight;
struct __declspec(uuid("a82fc44e-09c0-4c90-adeb-5f501082f196"))
/* dual interface */ IAgAccessTimeCollection;
struct __declspec(uuid("66be9559-5a69-4ef0-9bed-d09d954b12da"))
/* interface */ IAgAccessTime;
struct __declspec(uuid("9330afa9-99f7-428b-bf12-8c8640e7bc5b"))
/* dual interface */ IAgScheduleTimeCollection;
struct __declspec(uuid("aa5fb6f6-6cde-42b7-9f37-fa3d1b1bc257"))
/* interface */ IAgScheduleTime;
struct __declspec(uuid("aad7f1b4-f51d-49d8-99aa-99e559bfe630"))
/* dual interface */ IAgSnTargetCollection;
struct __declspec(uuid("773e93dc-bd46-4f45-87a8-5df021633423"))
/* interface */ IAgSnTarget;
struct __declspec(uuid("6074fa10-2ea9-4d24-885f-40c98b7f1f70"))
/* interface */ IAgSnAccessAdvanced;
struct __declspec(uuid("9aee1c5d-3493-44b3-a612-15658570b432"))
/* interface */ IAgAccessAdvanced;
struct __declspec(uuid("c9e809d2-0e9a-49ee-887f-074863db0e56"))
/* interface */ IAgAccessEventDetection;
enum AgEEventDetection;
struct __declspec(uuid("ea9c9980-a91c-4d3f-be54-8dda3d951175"))
/* interface */ IAgEventDetectionStrategy;
struct __declspec(uuid("5279bd98-84e6-448c-b63c-9cb345711588"))
/* interface */ IAgAccessSampling;
enum AgESamplingMethod;
struct __declspec(uuid("2e961d4d-192d-4167-8421-6a33ecfd22df"))
/* interface */ IAgSamplingMethodStrategy;
struct __declspec(uuid("2350ad66-7b61-45b4-9df7-e8206aaaa5e1"))
/* interface */ IAgSnPtTargeted;
struct /* coclass */ AgSnPtExternal;
struct __declspec(uuid("30632d11-d818-4470-846c-1a1f915ac78b"))
/* dual interface */ _IAgSnPtExternal;
struct __declspec(uuid("b99c2a9b-e615-48db-b681-b550bf3bded5"))
/* interface */ IAgSnPtExternal;
struct /* coclass */ AgSnPtTrgtBsightTrack;
struct __declspec(uuid("e503d4ad-3fb8-40e8-9e90-e7ef8113a71e"))
/* dual interface */ _IAgSnPtTrgtBsightTrack;
enum AgEBoresightType;
enum AgETrackModeType;
struct __declspec(uuid("015b0fdd-d5ae-4244-96b4-fcc6039fbee5"))
/* interface */ IAgSnPtTrgtBsightTrack;
struct /* coclass */ AgSnPtTrgtBsightFixed;
struct __declspec(uuid("24fbd2b8-751e-4f58-84e9-03c33ef1b52e"))
/* dual interface */ _IAgSnPtTrgtBsightFixed;
struct __declspec(uuid("bb24b197-56f9-48d2-bc13-e1c50f88bae2"))
/* interface */ IAgSnPtTrgtBsightFixed;
struct /* coclass */ AgSnTargetCollection;
struct /* coclass */ AgSnTarget;
struct __declspec(uuid("b7cb1d72-c532-4521-8e08-f38929526173"))
/* dual interface */ _IAgSnTarget;
struct /* coclass */ AgAccessTime;
struct __declspec(uuid("ff24a4fe-af56-4f3d-9ad0-33699a67d399"))
/* dual interface */ _IAgAccessTime;
struct /* coclass */ AgScheduleTime;
struct __declspec(uuid("5b321dc2-5bbf-4e1d-8421-e76740eb1069"))
/* dual interface */ _IAgScheduleTime;
struct /* coclass */ AgSnAzElMaskFile;
struct __declspec(uuid("6a2b42aa-8254-44df-a50e-2f8417ca7ef9"))
/* dual interface */ _IAgSnAzElMaskFile;
enum AgESnAzElBsightAxisType;
struct __declspec(uuid("eb7dd530-8b2a-4633-8ca6-3b8f532e1443"))
/* interface */ IAgAzElMaskData;
struct __declspec(uuid("dd64a6ac-ee5c-474a-9c78-b701451150d9"))
/* interface */ IAgSnAzElMaskFile;
struct /* coclass */ AgSnGraphics;
struct __declspec(uuid("4d4c1eab-8c8c-4a20-90f8-477ff63792d7"))
/* dual interface */ _IAgSnGraphics;
struct __declspec(uuid("cfb12e49-fd1b-4c67-af55-1f77e5204b8a"))
/* interface */ IAgSnProjection;
enum AgEIntersectionType;
enum AgESnProjectionDistanceType;
struct __declspec(uuid("19ab9f70-d185-47bf-bb3a-04116d1214ec"))
/* interface */ IAgDisplayDistance;
enum AgEGraphicsFillStyle;
struct __declspec(uuid("5910fc8b-8026-4a90-99db-d2addae61829"))
/* interface */ IAgSnGraphics;
struct /* coclass */ AgSnProjection;
struct __declspec(uuid("efd204da-5ebb-4ab4-a3fb-ab317ffb4efe"))
/* dual interface */ _IAgSnProjection;
struct /* coclass */ AgSnProjDisplayDistance;
struct __declspec(uuid("50cd607d-a143-4e70-8e42-3d570b73d658"))
/* dual interface */ _IAgSnProjDisplayDistance;
enum AgESnAltCrossingSides;
enum AgESnAltCrossingDirection;
struct __declspec(uuid("9d16fc7e-2efd-4443-b3a1-647c9ef9ebe8"))
/* interface */ IAgSnProjDisplayDistance;
struct /* coclass */ AgSnVO;
struct __declspec(uuid("b35a781b-5657-4402-b9a1-b4fdbed337ee"))
/* dual interface */ _IAgSnVO;
enum AgESnVOProjectionType;
struct __declspec(uuid("d00e467e-2df9-41a2-8167-3afd0fbfd6bc"))
/* interface */ IAgSnVOPulse;
enum AgESnVOPulseStyle;
enum AgESnVOPulseFrequencyPreset;
struct __declspec(uuid("cfa8546f-ecab-4d7d-98ff-f4770250bc29"))
/* interface */ IAgSnVOOffset;
enum AgEAxisOffset;
enum AgESnVOInheritFrom2D;
enum AgESnVOVisualAppearance;
enum AgESnVOTimeDependency;
struct __declspec(uuid("7355eae2-87e3-4c8e-a712-61594a450eb8"))
/* dual interface */ IAgSnVOSpaceProjectionCollection;
struct __declspec(uuid("da4304bd-818f-4279-a84f-8b95cf9197b1"))
/* interface */ IAgSnVOProjectionElement;
struct __declspec(uuid("124318b6-b57d-48b4-915d-3956b4d64aed"))
/* dual interface */ IAgSnVOTargetProjectionCollection;
struct __declspec(uuid("a615c3aa-48ea-4694-95b8-ffc8242d660a"))
/* interface */ IAgSnVO;
struct /* coclass */ AgSnVOPulse;
struct __declspec(uuid("8bf001cd-0c75-473a-bd08-2f340805ccd6"))
/* dual interface */ _IAgSnVOPulse;
struct /* coclass */ AgSnVOOffset;
struct __declspec(uuid("cd66e232-b46b-463a-bd19-2da339a31a72"))
/* dual interface */ _IAgSnVOOffset;
struct /* coclass */ AgAccessCnstrTimeSlipRange;
struct __declspec(uuid("9bd723d1-33e1-46ee-8e0a-ced732ba98a9"))
/* dual interface */ _IAgAccessCnstrTimeSlipRange;
struct __declspec(uuid("f169ff65-c2bf-45d3-b905-ac8943e1891e"))
/* interface */ IAgAccessCnstrTimeSlipRange;
struct /* coclass */ AgAccessCnstrBackground;
struct __declspec(uuid("bc4b872e-62d1-40e8-bb60-6bdfc09408fb"))
/* dual interface */ _IAgAccessCnstrBackground;
enum AgECnstrBackground;
struct __declspec(uuid("2cb4b1e0-0df7-4c8c-af1e-5e510e0ccf5c"))
/* interface */ IAgAccessCnstrBackground;
struct /* coclass */ AgAccessCnstrGroundTrack;
struct __declspec(uuid("b9ca2bf2-af4b-4b0a-aee7-238eaa205173"))
/* dual interface */ _IAgAccessCnstrGroundTrack;
enum AgECnstrGroundTrack;
struct __declspec(uuid("f59f924f-9231-4ec4-9657-95b845f9e873"))
/* interface */ IAgAccessCnstrGroundTrack;
struct /* coclass */ AgAccessCnstrMinMax;
struct __declspec(uuid("82587921-377a-4785-8a2e-e1c4101618e6"))
/* dual interface */ _IAgAccessCnstrMinMax;
struct __declspec(uuid("dbaaec1b-7a16-45bf-8fc5-0b32286a7752"))
/* interface */ IAgAccessCnstrMinMax;
struct /* coclass */ AgAccessCnstrCrdnCn;
struct __declspec(uuid("2216b491-9a3e-492a-ae04-e98d8ad123d3"))
/* dual interface */ _IAgAccessCnstrCrdnCn;
struct __declspec(uuid("d1914474-8362-4253-98a3-709cb2790827"))
/* interface */ IAgAccessCnstrCrdnCn;
struct /* coclass */ AgAccessCnstrCbObstruction;
struct __declspec(uuid("852f496c-26c0-462e-8cac-39f0664b001b"))
/* dual interface */ _IAgAccessCnstrCbObstruction;
struct __declspec(uuid("24606221-94df-46cd-9351-0e2ddc8a40ec"))
/* interface */ IAgAccessCnstrCbObstruction;
struct /* coclass */ AgAccessCnstrAngle;
struct __declspec(uuid("05150291-0530-423d-8367-27439edb9b6d"))
/* dual interface */ _IAgAccessCnstrAngle;
struct __declspec(uuid("865d8c36-af45-45a8-aa4f-b1cb374c4d0d"))
/* interface */ IAgAccessCnstrAngle;
struct /* coclass */ AgAccessCnstrCondition;
struct __declspec(uuid("e369ddb9-83b7-400c-8d62-955bccf672b6"))
/* dual interface */ _IAgAccessCnstrCondition;
enum AgECnstrLighting;
struct __declspec(uuid("0e631e39-9397-4702-bb37-34cbab30f81d"))
/* interface */ IAgAccessCnstrCondition;
struct /* coclass */ AgAccessTimeCollection;
struct /* coclass */ AgScheduleTimeCollection;
struct /* coclass */ AgAccessCnstrIntervals;
struct __declspec(uuid("b56399c0-4f9a-4f5e-bd3a-b56f7f5d33be"))
/* dual interface */ _IAgAccessCnstrIntervals;
enum AgEActionType;
struct __declspec(uuid("ee53cecb-360d-4389-bd88-840ca7949111"))
/* interface */ IAgAccessCnstrIntervals;
struct /* coclass */ AgAccessCnstrObjExAngle;
struct __declspec(uuid("aa1e067a-051f-425e-b06b-55dd0e9407d9"))
/* dual interface */ _IAgAccessCnstrObjExAngle;
struct __declspec(uuid("3a3b188d-ed41-4d42-be41-ab3021e9548c"))
/* interface */ IAgAccessCnstrObjExAngle;
struct /* coclass */ AgAccessCnstrZone;
struct __declspec(uuid("01a17452-a61b-46dd-9a5d-eddb82f727f3"))
/* dual interface */ _IAgAccessCnstrZone;
struct __declspec(uuid("fbcf8209-fc85-4a78-baa7-020119e97ac4"))
/* interface */ IAgAccessCnstrZone;
struct /* coclass */ AgAccessCnstrThirdBody;
struct __declspec(uuid("47c44b9a-22d8-445f-95c8-da926923469c"))
/* dual interface */ _IAgAccessCnstrThirdBody;
struct __declspec(uuid("9d671a23-44d0-4005-b430-0486eda23ecc"))
/* interface */ IAgAccessCnstrThirdBody;
struct /* coclass */ AgAccessCnstrExclZonesCollection;
struct __declspec(uuid("11816d9f-bec4-44dc-9832-225c580d6377"))
/* dual interface */ IAgAccessCnstrExclZonesCollection;
struct /* coclass */ AgSnPtGrazingAlt;
struct __declspec(uuid("bad00cb0-f49e-470f-9e54-028ef16284cd"))
/* dual interface */ _IAgSnPtGrazingAlt;
struct __declspec(uuid("5b8eaf06-a0fa-4236-aaa2-eadca2a8a66a"))
/* interface */ IAgSnPtGrazingAlt;
struct /* coclass */ AgAreaTarget;
struct __declspec(uuid("a8c96ccf-afe9-4491-b72c-f619d842fab3"))
/* dual interface */ _IAgAreaTarget;
enum AgEAreaType;
enum AgEDisplayTimesType;
struct __declspec(uuid("758f6477-171e-4d0f-944b-0e994bd80479"))
/* interface */ IAgATCommonTasks;
struct __declspec(uuid("16e9da44-239d-4698-a88a-171357b4277d"))
/* interface */ IAgAreaTarget;
struct __declspec(uuid("c308fb60-f1cd-40a4-ab1a-2a360a215a41"))
/* interface */ IAgDisplayTm;
struct /* coclass */ AgFacility;
struct __declspec(uuid("a810704c-b46f-4214-997b-b9eeba0a2ba9"))
/* dual interface */ _IAgFacility;
enum AgEAzElMaskType;
enum AgETerrainNormType;
enum AgEAltRefType;
struct __declspec(uuid("105aec86-e282-4c74-9a3e-a1ccc8c6b4f0"))
/* interface */ IAgFacility;
struct /* coclass */ AgTarget;
struct __declspec(uuid("0e3b3b8f-77dd-4373-8d63-94a606298a11"))
/* dual interface */ _IAgTarget;
struct __declspec(uuid("ed762481-7bf4-43ef-982e-9905c67f7ab4"))
/* interface */ IAgTargetGraphics;
struct __declspec(uuid("dc7c1977-01e0-4678-8212-5b71a97e16f9"))
/* interface */ IAgTargetVO;
struct __declspec(uuid("72776a8a-abf2-46a1-96c9-a5b4449136d0"))
/* interface */ IAgTarget;
struct /* coclass */ AgPlanet;
struct __declspec(uuid("50152239-d8a7-4f68-b8cc-f41d6439d351"))
/* dual interface */ _IAgPlanet;
enum AgEPlPositionSourceType;
struct __declspec(uuid("a8947990-5145-41bd-9b17-9c2cfc944fbd"))
/* interface */ IAgPlCommonTasks;
struct __declspec(uuid("23610bab-af8a-443c-8411-338ee57bfaeb"))
/* interface */ IAgPlanet;
struct /* coclass */ AgSensor;
struct __declspec(uuid("9074fe9c-cbff-478a-a589-dbc74a02be30"))
/* dual interface */ _IAgSensor;
enum AgESnPattern;
enum AgESnPointing;
enum AgESnRefractionType;
enum AgESnLocation;
struct __declspec(uuid("468b5231-ef56-4e76-8b05-a43b581d70cc"))
/* interface */ IAgSwath;
struct __declspec(uuid("d2205ade-75d6-4620-a100-486c0d056540"))
/* interface */ IAgRfModelBase;
struct __declspec(uuid("df075a8e-cd6d-48ce-983e-29dc93f47395"))
/* interface */ IAgSnCommonTasks;
struct __declspec(uuid("c05b88f2-7d34-4bdd-818d-885b50069084"))
/* dual interface */ IAgCelestialBodyCollection;
struct __declspec(uuid("05cc84fb-f0e5-4bcf-8a67-8a7f5e450a6c"))
/* interface */ IAgCelestialBodyInfo;
struct __declspec(uuid("7cb80496-4c21-4c72-9422-8bffbc6d92e2"))
/* interface */ IAgVeSpatialInfo;
struct __declspec(uuid("84172c0e-d203-42c5-afb7-9a6d817d6845"))
/* interface */ IAgSpatialState;
struct __declspec(uuid("7db89546-cec7-48d3-bacc-747a2e30870d"))
/* interface */ IAgSensor;
struct __declspec(uuid("9e71011a-c346-41b1-8e0a-58d92273f4fd"))
/* interface */ IAgProvideSpatialInfo;
struct /* coclass */ AgSnCommonTasks;
struct __declspec(uuid("9e8b076c-4f30-45c3-82b5-8ae20fab55c5"))
/* dual interface */ _IAgSnCommonTasks;
struct /* coclass */ AgATCommonTasks;
struct __declspec(uuid("592faab5-9457-4f1b-9f71-78481fc7efe8"))
/* dual interface */ _IAgATCommonTasks;
struct /* coclass */ AgPlCommonTasks;
struct __declspec(uuid("2e032bbf-93b8-48bb-95be-69aa25dda6a0"))
/* dual interface */ _IAgPlCommonTasks;
struct /* coclass */ AgSwath;
struct __declspec(uuid("dbe96583-d3b4-4e05-8556-bba8e89bd988"))
/* dual interface */ _IAgSwath;
struct /* coclass */ AgStar;
struct __declspec(uuid("772c0c26-fd37-4abb-a43f-f1c1ec4a644e"))
/* dual interface */ _IAgStar;
enum AgEStarReferenceFrame;
struct __declspec(uuid("fabcea16-b172-409e-aecb-d8fa8d21aa3b"))
/* interface */ IAgStar;
struct /* coclass */ AgDataProviderCollection;
struct /* coclass */ AgDrTimeArrayElements;
struct __declspec(uuid("ad69a917-19f9-4923-b6ae-0e436abb17e9"))
/* dual interface */ _IAgDrTimeArrayElements;
struct /* coclass */ AgDrResult;
struct __declspec(uuid("0225f854-301b-41e2-9aaa-437bf4453263"))
/* dual interface */ _IAgDrResult;
struct /* coclass */ AgDrSubSectionCollection;
struct /* coclass */ AgDrSubSection;
struct __declspec(uuid("273564f5-c4ea-4653-afdd-91378987db00"))
/* dual interface */ _IAgDrSubSection;
struct /* coclass */ AgDrIntervalCollection;
struct /* coclass */ AgDrInterval;
struct __declspec(uuid("8d76302b-5888-4bc1-a028-b4575468a348"))
/* dual interface */ _IAgDrInterval;
struct /* coclass */ AgDrDataSetCollection;
struct /* coclass */ AgDrDataSet;
struct __declspec(uuid("e0adf78a-4f1c-4d68-b164-54fcf2868f44"))
/* dual interface */ _IAgDrDataSet;
struct /* coclass */ AgDataPrvFixed;
struct __declspec(uuid("e016de70-1894-459e-b2c9-e4ae915b8073"))
/* dual interface */ _IAgDataPrvFixed;
struct __declspec(uuid("54f1a93d-9492-40b8-852d-bb864dc5f842"))
/* dual interface */ IAgDataPrvElements;
struct __declspec(uuid("d2532d52-2998-440f-8c68-3c3ad553b10a"))
/* interface */ IAgDataPrvElement;
enum AgEDataPrvElementType;
struct __declspec(uuid("1b366dd3-0bac-47e5-95b2-e2425347b839"))
/* interface */ IAgDataProvider;
struct /* coclass */ AgDataPrvTimeVar;
struct __declspec(uuid("227a1b54-a414-46c1-8f30-6cc4de3456e2"))
/* dual interface */ _IAgDataPrvTimeVar;
struct /* coclass */ AgDataPrvInterval;
struct __declspec(uuid("86f0f208-bf06-4946-b15a-41d3a11cbfae"))
/* dual interface */ _IAgDataPrvInterval;
struct /* coclass */ AgDrTextMessage;
struct /* coclass */ AgDataProviderGroup;
struct __declspec(uuid("20a8f4cf-e17a-44ad-933a-8dbbcb56f52d"))
/* dual interface */ _IAgDataProviderGroup;
struct __declspec(uuid("75639cdc-3a89-43be-b540-c447a18caf46"))
/* dual interface */ IAgDataProviders;
struct __declspec(uuid("79aff5e4-5a85-4917-9544-552132054a4c"))
/* interface */ IAgDataProviderGroup;
struct /* coclass */ AgDataPrvElements;
struct /* coclass */ AgDataPrvElement;
struct __declspec(uuid("a628b83e-6f24-4989-a847-cf9d750d832e"))
/* dual interface */ _IAgDataPrvElement;
struct /* coclass */ AgDataProviders;
struct /* coclass */ AgStkAccess;
struct __declspec(uuid("2234ae61-a69e-46e0-a37a-d94203839cb6"))
/* dual interface */ _IAgStkAccess;
struct /* coclass */ AgStkAccessGraphics;
struct __declspec(uuid("f49a6d92-c843-40da-a184-74a5cf997aaa"))
/* dual interface */ _IAgStkAccessGraphics;
struct /* coclass */ AgStkAccessAdvanced;
struct __declspec(uuid("67427225-62c4-45ec-9836-a3eec365efcd"))
/* dual interface */ _IAgStkAccessAdvanced;
struct /* coclass */ AgStkObjectCoverage;
struct __declspec(uuid("3d089208-3ea8-4dd6-83a2-90361c376133"))
/* dual interface */ _IAgStkObjectCoverage;
struct /* coclass */ AgObjectCoverageFOM;
struct __declspec(uuid("7e3e9640-a96f-4595-9beb-22843b05f501"))
/* dual interface */ _IAgObjectCoverageFOM;
struct /* coclass */ AgScGlobeServerConfigData;
struct __declspec(uuid("34f142dc-023f-4613-95dc-6c62cd20966b"))
/* dual interface */ _IAgScGlobeServerConfigData;
struct /* coclass */ AgScGlobeServersCollection;
struct /* coclass */ AgSc3dFont;
struct __declspec(uuid("18e80a64-e635-45c6-8f87-e4bacba9ad09"))
/* dual interface */ _IAgSc3dFont;
struct /* coclass */ AgVOBorderWall;
struct __declspec(uuid("c43f9fd8-0b98-4a7e-9388-f9508168f2b0"))
/* dual interface */ _IAgVOBorderWall;
struct /* coclass */ AgVORefCrdnCollection;
struct /* coclass */ AgVORefCrdnVector;
struct __declspec(uuid("e114061d-52df-4a2a-aa73-7977db75f770"))
/* dual interface */ _IAgVORefCrdnVector;
enum AgEArrowType;
enum AgEVectorAxesConnectType;
struct __declspec(uuid("94e670a0-5195-43af-9594-b4eec1558db0"))
/* interface */ IAgVORefCrdnVector;
struct /* coclass */ AgVORefCrdnAxes;
struct __declspec(uuid("4eda1e22-6f1e-4af6-882b-5ac35a66fdfa"))
/* dual interface */ _IAgVORefCrdnAxes;
struct __declspec(uuid("70edd9c4-a208-4a93-a851-55fdfc75cb48"))
/* interface */ IAgVORefCrdnAxes;
struct /* coclass */ AgVORefCrdnAngle;
struct __declspec(uuid("bb03099c-b5ee-43bb-af43-979d0b39a50e"))
/* dual interface */ _IAgVORefCrdnAngle;
struct __declspec(uuid("90c98391-5cde-48a9-9402-2e50521129b1"))
/* interface */ IAgVORefCrdnAngle;
struct /* coclass */ AgVORefCrdnPlane;
struct __declspec(uuid("67dd5121-1ae7-4bdc-acdd-c1a88a6f5071"))
/* dual interface */ _IAgVORefCrdnPlane;
struct __declspec(uuid("fda57b54-fcfa-4267-83a7-3fbf98fe570b"))
/* interface */ IAgVORefCrdnPlane;
struct /* coclass */ AgVORefCrdnPoint;
struct __declspec(uuid("8cf77c4f-0037-44ad-bb9d-b0b7ee12f909"))
/* dual interface */ _IAgVORefCrdnPoint;
enum AgETrajectoryType;
struct __declspec(uuid("42cfce04-a8b8-4d11-8f33-c7545d68c327"))
/* interface */ IAgVORefCrdnPoint;
struct /* coclass */ AgTargetGraphics;
struct __declspec(uuid("73ca01ce-9eda-4ce3-a765-4021198c5efb"))
/* dual interface */ _IAgTargetGraphics;
struct /* coclass */ AgTargetVO;
struct __declspec(uuid("111f5dbf-4431-431d-b0b6-888c28ebcc92"))
/* dual interface */ _IAgTargetVO;
struct /* coclass */ AgPtTargetVOModel;
struct __declspec(uuid("d5495592-d564-4dbc-8cd5-c5361ee3c6fc"))
/* dual interface */ _IAgPtTargetVOModel;
struct /* coclass */ AgObjectLinkCollection;
struct /* coclass */ AgObjectLink;
struct __declspec(uuid("6c54ee38-3c5f-42a7-b7d2-05f05c386ae8"))
/* dual interface */ _IAgObjectLink;
struct /* coclass */ AgLinkToObject;
struct __declspec(uuid("8cf1afed-ce17-447b-ac07-2db542dc18d6"))
/* dual interface */ _IAgLinkToObject;
struct /* coclass */ AgLLAPosition;
struct __declspec(uuid("77062b31-68eb-4b1f-bfe0-25cf1ae400e2"))
/* dual interface */ _IAgLLAPosition;
enum AgELLAPositionType;
struct __declspec(uuid("a383901a-37db-4c00-aa28-b87f77263967"))
/* interface */ IAgLLAPosition;
struct /* coclass */ AgVODataDisplayElement;
struct __declspec(uuid("09fce126-8d0e-4dbd-be31-d976b8e7e497"))
/* dual interface */ _IAgVODataDisplayElement;
struct /* coclass */ AgVODataDisplayCollection;
struct /* coclass */ AgVeInitialState;
struct __declspec(uuid("6b719c03-20cd-48ba-96d7-024d8342edb8"))
/* dual interface */ _IAgVeInitialState;
enum AgEVePropagationFrame;
struct __declspec(uuid("0dd12496-ba1c-41c4-ab63-d26de22e9e28"))
/* interface */ IAgVeInitialState;
struct /* coclass */ AgVeHPOPCentralBodyGravity;
struct __declspec(uuid("0fb1e785-5969-47d5-9fd3-12c3e34cff1d"))
/* dual interface */ _IAgVeHPOPCentralBodyGravity;
enum AgESolidTide;
struct __declspec(uuid("d2b0312c-903f-43df-9537-45864c565445"))
/* interface */ IAgVeHPOPCentralBodyGravity;
struct /* coclass */ AgVeRadiationPressure;
struct __declspec(uuid("003cb95e-e942-4ebc-a2fc-7dce0e5f8bf3"))
/* dual interface */ _IAgVeRadiationPressure;
struct __declspec(uuid("8ceff1b3-831f-4c4e-b487-b6dc6a5d8b62"))
/* interface */ IAgVeRadiationPressure;
struct /* coclass */ AgVeHPOPSolarRadiationPressure;
struct __declspec(uuid("5da32133-f3e2-4727-9b71-ad91cb32c164"))
/* dual interface */ _IAgVeHPOPSolarRadiationPressure;
enum AgEShadowModel;
struct __declspec(uuid("38578bac-0864-4ee1-af25-a05d16294a24"))
/* interface */ IAgVeHPOPSRPModel;
enum AgESRPModel;
struct __declspec(uuid("aeb3bd0b-2cef-44c0-8d34-a130c56bd4d5"))
/* interface */ IAgSRPModelBase;
struct __declspec(uuid("c9dc067a-390b-4a0b-b4de-9d3ceec37cc8"))
/* interface */ IAgVeHPOPSolarRadiationPressure;
struct /* coclass */ AgVeSolarFluxGeoMagEnterManually;
struct __declspec(uuid("165eb206-64ee-4f1f-b2b5-2801e7eb2f98"))
/* dual interface */ _IAgVeSolarFluxGeoMagEnterManually;
struct __declspec(uuid("a0d6e1aa-287d-412b-a03c-d9d137955daf"))
/* interface */ IAgVeSolarFluxGeoMag;
struct __declspec(uuid("7213c285-6021-4c79-a441-87c1b87a18a6"))
/* interface */ IAgVeSolarFluxGeoMagEnterManually;
struct /* coclass */ AgVeSolarFluxGeoMagUseFile;
struct __declspec(uuid("e03411df-ce25-4ad4-9dc1-77559decf827"))
/* dual interface */ _IAgVeSolarFluxGeoMagUseFile;
enum AgEVeGeomagFluxUpdateRate;
enum AgEVeGeomagFluxSrc;
struct __declspec(uuid("201a9cb5-94ba-42a3-9dcb-81dc0976ee01"))
/* interface */ IAgVeSolarFluxGeoMagUseFile;
struct /* coclass */ AgVeHPOPForceModelDrag;
struct __declspec(uuid("cb617007-61f5-4dfa-9322-a7af2ef8a3c4"))
/* dual interface */ _IAgVeHPOPForceModelDrag;
enum AgEAtmosphericDensityModel;
enum AgEVeSolarFluxGeoMag;
struct __declspec(uuid("8629acde-2c60-4ee6-a893-b3afda8f6157"))
/* interface */ IAgVeHPOPForceModelDrag;
struct /* coclass */ AgVeHPOPForceModelDragOptions;
struct __declspec(uuid("73f1e50d-eed5-4dae-b989-434b256d2549"))
/* dual interface */ _IAgVeHPOPForceModelDragOptions;
struct __declspec(uuid("d6df0e42-db90-46a1-bb30-390237dfe664"))
/* interface */ IAgVeHPOPForceModelDragOptions;
struct /* coclass */ AgVeHPOPSolarRadiationPressureOptions;
struct __declspec(uuid("aa2b24ad-e168-45e1-847e-c95795ecd6f6"))
/* dual interface */ _IAgVeHPOPSolarRadiationPressureOptions;
enum AgEMethodToComputeSunPosition;
struct __declspec(uuid("dceb5dc2-fb56-45d7-afbc-50d346dbccdc"))
/* interface */ IAgVeHPOPSolarRadiationPressureOptions;
struct /* coclass */ AgVeStatic;
struct __declspec(uuid("04da6e18-281b-4542-b3c8-6ea9e6e8b5f3"))
/* dual interface */ _IAgVeStatic;
struct __declspec(uuid("048267ee-0b6f-4a8d-8d18-f0aa308a16c8"))
/* interface */ IAgVeStatic;
struct /* coclass */ AgVeSolidTides;
struct __declspec(uuid("941680de-e696-4ad0-8011-104e25159ddb"))
/* dual interface */ _IAgVeSolidTides;
struct __declspec(uuid("9eb715c7-1de6-4c89-b660-da64bc890a51"))
/* interface */ IAgVeSolidTides;
struct /* coclass */ AgVeOceanTides;
struct __declspec(uuid("f5823cc6-52e3-414d-9c23-76ba0c8a7bf9"))
/* dual interface */ _IAgVeOceanTides;
struct __declspec(uuid("53216ff5-f3b1-4daa-98d4-0244dac9426b"))
/* interface */ IAgVeOceanTides;
struct /* coclass */ AgVePluginSettings;
struct __declspec(uuid("7708ce63-b8e5-4691-b77f-6eadab903d83"))
/* dual interface */ _IAgVePluginSettings;
struct __declspec(uuid("7cf32833-3a75-432b-882e-f944ece12e32"))
/* interface */ IAgVePluginSettings;
struct /* coclass */ AgVePluginPropagator;
struct __declspec(uuid("d28780b2-67e9-4e89-9c0b-3601fbe3cf4b"))
/* dual interface */ _IAgVePluginPropagator;
struct __declspec(uuid("e687775c-23c9-41f9-a728-d7a0bfd4f6b9"))
/* interface */ IAgVePluginPropagator;
struct /* coclass */ AgVeHPOPForceModelMoreOptions;
struct __declspec(uuid("00b92ad5-bcce-4c12-8db7-25f960c73e97"))
/* dual interface */ _IAgVeHPOPForceModelMoreOptions;
struct __declspec(uuid("ccaf39a4-e44e-4cb2-9522-612ac50722d5"))
/* interface */ IAgVeHPOPForceModelMoreOptions;
struct /* coclass */ AgVeHPOPForceModel;
struct __declspec(uuid("beb409b0-8c36-4564-89ee-0bd385e6fdac"))
/* dual interface */ _IAgVeHPOPForceModel;
struct __declspec(uuid("8d8a8c0b-e0fb-45e0-bb97-790ae0d775bf"))
/* dual interface */ IAgVeThirdBodyGravityCollection;
struct __declspec(uuid("0eaac80a-ef77-4e5a-9763-6aa4f03e65a7"))
/* interface */ IAgVeThirdBodyGravityElement;
enum AgEThirdBodyGravity;
enum AgEThirdBodyGravSourceType;
struct __declspec(uuid("486adafc-15ef-4b16-871b-113adc973bec"))
/* interface */ IAgVeEclipsingBodies;
struct __declspec(uuid("8d5a37dc-8e0d-49ba-9c7c-17e489a95751"))
/* interface */ IAgVeHPOPForceModel;
struct /* coclass */ AgVeStepSizeControl;
struct __declspec(uuid("10a06358-7340-48e5-b508-0dffc6886910"))
/* dual interface */ _IAgVeStepSizeControl;
enum AgEVeMethod;
struct __declspec(uuid("23be192b-a81e-4da4-94dc-ea03062b7895"))
/* interface */ IAgVeStepSizeControl;
struct /* coclass */ AgVeTimeRegularization;
struct __declspec(uuid("d6896503-da70-408d-9206-8de7b573947e"))
/* dual interface */ _IAgVeTimeRegularization;
struct __declspec(uuid("d15f4b2f-4fd0-4b61-84e7-967d70274acc"))
/* interface */ IAgVeTimeRegularization;
struct /* coclass */ AgVeInterpolation;
struct __declspec(uuid("3c94a0b4-3cb4-4fb3-9bea-d33048d8c602"))
/* dual interface */ _IAgVeInterpolation;
enum AgEVeInterpolationMethod;
struct __declspec(uuid("e8df2122-8e38-470a-8b77-49dc37a498a5"))
/* interface */ IAgVeInterpolation;
struct /* coclass */ AgVeIntegrator;
struct __declspec(uuid("252768a3-0007-4abc-8dba-18e03d0ea65d"))
/* dual interface */ _IAgVeIntegrator;
enum AgEVeIntegrationModel;
enum AgEVePredictorCorrectorScheme;
struct __declspec(uuid("9fd74182-6788-40c5-b6cf-b41fde9ea215"))
/* interface */ IAgVeIntegrator;
struct /* coclass */ AgVeGravity;
struct __declspec(uuid("cb6d2939-999d-42bd-ac68-f09e80cfdaed"))
/* dual interface */ _IAgVeGravity;
struct __declspec(uuid("e195147a-2483-4352-98dd-23f5bf31ae3f"))
/* interface */ IAgVeGravity;
struct /* coclass */ AgVePositionVelocityElement;
struct __declspec(uuid("d4ca8ce7-0dcd-4184-9336-646cb57d5722"))
/* dual interface */ _IAgVePositionVelocityElement;
struct __declspec(uuid("1e85cf6d-fc5a-4f1e-8ac5-9ea45023281c"))
/* interface */ IAgVePositionVelocityElement;
struct /* coclass */ AgVePositionVelocityCollection;
struct __declspec(uuid("231528e6-adf6-4916-ad6a-fb3c98b04bd5"))
/* dual interface */ IAgVePositionVelocityCollection;
struct /* coclass */ AgVeCorrelationListCollection;
struct __declspec(uuid("d260c246-64b3-433c-81cd-d0653da48a51"))
/* dual interface */ IAgVeCorrelationListCollection;
struct __declspec(uuid("b1f8d550-faa5-496b-a767-85b68787d061"))
/* interface */ IAgVeCorrelationListElement;
enum AgEVeCorrelationListType;
struct /* coclass */ AgVeCorrelationListElement;
struct __declspec(uuid("5ed9d8d9-b12d-473f-9ee7-ce58c3f15d48"))
/* dual interface */ _IAgVeCorrelationListElement;
struct /* coclass */ AgVeCovariance;
struct __declspec(uuid("52297e85-8ea4-4685-91ba-145f26153254"))
/* dual interface */ _IAgVeCovariance;
enum AgEVeFrame;
struct __declspec(uuid("2fa383a3-3fa4-4c70-a96f-b822d8d7e5d5"))
/* dual interface */ IAgVeConsiderAnalysisCollection;
struct __declspec(uuid("fe41b994-86ff-409c-8f0a-5e5976d02233"))
/* interface */ IAgVeConsiderAnalysisCollectionElement;
enum AgEVeConsiderAnalysisType;
struct __declspec(uuid("2c1cd585-c774-4f04-a1aa-c396f61bef78"))
/* interface */ IAgVeCovariance;
struct /* coclass */ AgVeJxInitialState;
struct __declspec(uuid("dfcb1b4f-dfa1-4ce6-8344-50459ee27471"))
/* dual interface */ _IAgVeJxInitialState;
enum AgEVeEllipseOptions;
struct __declspec(uuid("7a0ad245-1720-4c4a-aa2f-8d9d1490c833"))
/* interface */ IAgVeJxInitialState;
struct /* coclass */ AgVeLOPCentralBodyGravity;
struct __declspec(uuid("a43a2e61-e430-4a46-8994-951edb3dd4f6"))
/* dual interface */ _IAgVeLOPCentralBodyGravity;
struct __declspec(uuid("ee5e1d2d-11b6-42a4-bb93-2ee56c06a208"))
/* interface */ IAgVeLOPCentralBodyGravity;
struct /* coclass */ AgVeThirdBodyGravityElement;
struct __declspec(uuid("7a132349-0f4c-469b-bee6-02764824de72"))
/* dual interface */ _IAgVeThirdBodyGravityElement;
struct /* coclass */ AgVeThirdBodyGravityCollection;
struct /* coclass */ AgVeExpDensModelParams;
struct __declspec(uuid("85c990ba-552a-4fda-8373-2d83a6d5d7e6"))
/* dual interface */ _IAgVeExpDensModelParams;
struct __declspec(uuid("352b44e5-700a-4820-b3da-899a2801472f"))
/* interface */ IAgVeExpDensModelParams;
struct /* coclass */ AgVeAdvanced;
struct __declspec(uuid("2c83e6b8-f0b6-4ed9-9af1-7146eeae750e"))
/* dual interface */ _IAgVeAdvanced;
struct __declspec(uuid("e12ece8d-cfa4-4105-b537-0d8077e421e5"))
/* interface */ IAgVeAdvanced;
struct /* coclass */ AgVeLOPForceModelDrag;
struct __declspec(uuid("f3c2e73d-98ff-40b6-8aa3-ea3c0d7ffa14"))
/* dual interface */ _IAgVeLOPForceModelDrag;
struct __declspec(uuid("05db8fb3-47d7-4678-815d-37cca78d19b3"))
/* interface */ IAgVeLOPForceModelDrag;
struct /* coclass */ AgVeLOPSolarRadiationPressure;
struct __declspec(uuid("51ad7210-24bf-4dd7-a77c-9746791e5353"))
/* dual interface */ _IAgVeLOPSolarRadiationPressure;
struct __declspec(uuid("a5fd33f9-8ac3-48df-8115-aaf64e1a26a5"))
/* interface */ IAgVeLOPSolarRadiationPressure;
struct /* coclass */ AgVePhysicalData;
struct __declspec(uuid("e2637fde-4c1f-4636-a37a-2602e1bbaa97"))
/* dual interface */ _IAgVePhysicalData;
struct __declspec(uuid("5d107330-e028-4aa4-aced-8df01b74d870"))
/* interface */ IAgVePhysicalData;
struct /* coclass */ AgVeLOPForceModel;
struct __declspec(uuid("84030200-14a5-492b-b1da-47dca7954002"))
/* dual interface */ _IAgVeLOPForceModel;
struct __declspec(uuid("3781ddee-97ca-48e3-a762-f7e431700f3f"))
/* interface */ IAgVeThirdBodyGravity;
struct __declspec(uuid("513d8ac1-1f26-4cc9-83f9-cecfd99e2418"))
/* interface */ IAgVeLOPForceModel;
struct /* coclass */ AgVeSegmentsCollection;
struct __declspec(uuid("c816e47e-6b33-4e0d-9b17-e1d2ddae4e96"))
/* dual interface */ IAgVeSegmentsCollection;
struct __declspec(uuid("95bdb877-21df-44ef-847d-6b3639e755fe"))
/* interface */ IAgVeSPICESegment;
struct /* coclass */ AgVePropagatorHPOP;
struct __declspec(uuid("07aec809-c378-4d09-b70a-f78ace0681e4"))
/* dual interface */ _IAgVePropagatorHPOP;
struct __declspec(uuid("4e5418d1-d0e0-44dc-bdb4-8131a770dbb0"))
/* interface */ IAgVePropagatorHPOP;
struct __declspec(uuid("4035a774-7405-44fa-9593-cf9937fdab36"))
/* interface */ IAgVePropagator;
struct /* coclass */ AgVePropagatorJ2Perturbation;
struct __declspec(uuid("9e7bb02a-2a59-4f7e-b21a-68252df8138d"))
/* dual interface */ _IAgVePropagatorJ2Perturbation;
struct __declspec(uuid("829a568b-5e43-47c5-9348-e2fcc4593b52"))
/* interface */ IAgVePropagatorJ2Perturbation;
struct /* coclass */ AgVePropagatorJ4Perturbation;
struct __declspec(uuid("85f28c22-f32f-4b18-8409-3935249be36d"))
/* dual interface */ _IAgVePropagatorJ4Perturbation;
struct __declspec(uuid("bcf5890b-9146-46de-b70d-5d12c6cb4809"))
/* interface */ IAgVePropagatorJ4Perturbation;
struct /* coclass */ AgVePropagatorLOP;
struct __declspec(uuid("80419740-398d-4834-a1c3-bd74b6ddab13"))
/* dual interface */ _IAgVePropagatorLOP;
struct __declspec(uuid("085cefc0-e19c-42f4-975b-e4c164ebf499"))
/* interface */ IAgVePropagatorLOP;
struct /* coclass */ AgVePropagatorSGP4;
struct __declspec(uuid("9154e429-ac48-4d48-a31f-2dd564071845"))
/* dual interface */ _IAgVePropagatorSGP4;
struct __declspec(uuid("72e5350b-e519-4ff8-a16f-e8535c0c8f85"))
/* dual interface */ IAgVeSGP4SegmentCollection;
struct __declspec(uuid("45d20e2c-e997-4ec0-b8bf-b0cd317ae2ea"))
/* interface */ IAgVeSGP4Segment;
enum AgEVeSGP4SwitchMethod;
enum AgELoadMethodType;
struct __declspec(uuid("49eb0af3-6582-4b32-bf90-d7c135933761"))
/* interface */ IAgVeSGP4LoadData;
struct __declspec(uuid("0f10e16c-bdfc-4b52-a6c2-7defd5e531ab"))
/* interface */ IAgVeSGP4AutoUpdate;
enum AgEVeSGP4AutoUpdateSource;
struct __declspec(uuid("5b9cde54-a69b-4ae1-9b2f-5b62ff5447a4"))
/* interface */ IAgVeSGP4AutoUpdateProperties;
enum AgEVeSGP4TLESelection;
struct __declspec(uuid("34a8a72c-1aa6-441f-b629-55cac04f2d62"))
/* interface */ IAgVeSGP4AutoUpdateFileSource;
struct __declspec(uuid("299fa75e-eaf8-4392-b9a7-521c78746ca5"))
/* interface */ IAgVeSGP4AutoUpdateOnlineSource;
struct __declspec(uuid("66f121dc-bcd3-454c-9abb-e0b58ff48677"))
/* interface */ IAgVePropagatorSGP4CommonTasks;
struct __declspec(uuid("bb318184-7d0f-4e1a-9b36-b28a7f9b470e"))
/* interface */ IAgVeSGP4PropagatorSettings;
struct __declspec(uuid("aed0f414-2b25-4059-9715-5bf302c0aebd"))
/* interface */ IAgVePropagatorSGP4;
struct /* coclass */ AgVePropagatorSPICE;
struct __declspec(uuid("ceeae086-2758-4f6e-964e-c737f47c320d"))
/* dual interface */ _IAgVePropagatorSPICE;
struct __declspec(uuid("28261c96-c179-460c-8c9f-adccf3038703"))
/* interface */ IAgVePropagatorSPICE;
struct /* coclass */ AgVePropagatorStkExternal;
struct __declspec(uuid("70458a02-728e-4e64-9156-fb1e896b1152"))
/* dual interface */ _IAgVePropagatorStkExternal;
enum AgEStkExternalEphemerisFormat;
struct __declspec(uuid("d7306142-6d5f-4c4b-9b24-19d7220c785f"))
/* interface */ IAgVePropagatorStkExternal;
struct /* coclass */ AgVePropagatorTwoBody;
struct __declspec(uuid("7ec777d6-8785-4b83-b90b-addf3d4a502e"))
/* dual interface */ _IAgVePropagatorTwoBody;
struct __declspec(uuid("2b4854ee-6114-4ba9-aafb-30502c0d42ba"))
/* interface */ IAgVePropagatorTwoBody;
struct /* coclass */ AgVePropagatorUserExternal;
struct __declspec(uuid("85bcfbbd-768f-4655-931e-f86fec979ba6"))
/* dual interface */ _IAgVePropagatorUserExternal;
struct __declspec(uuid("a5414dd6-bf6d-4e97-a8d1-d817803fb4e3"))
/* interface */ IAgVePropagatorUserExternal;
struct /* coclass */ AgVeLvInitialState;
struct __declspec(uuid("a372fe47-6567-44e9-8d6c-fdc310fab20c"))
/* dual interface */ _IAgVeLvInitialState;
struct __declspec(uuid("babd44bf-e6b9-42b7-826e-1eb755984975"))
/* interface */ IAgVeLvInitialState;
struct /* coclass */ AgVePropagatorSimpleAscent;
struct __declspec(uuid("38307277-10e8-4285-a174-55781dd0ec2f"))
/* dual interface */ _IAgVePropagatorSimpleAscent;
struct __declspec(uuid("57dc2f29-2a33-4438-8f8c-e27a7c57912d"))
/* interface */ IAgVePropagatorSimpleAscent;
struct /* coclass */ AgVeWaypointsElement;
struct __declspec(uuid("27e5d557-cf61-4f73-af6e-4055d16ee7d3"))
/* dual interface */ _IAgVeWaypointsElement;
struct __declspec(uuid("0c12ec24-bb33-4f5d-84c6-f70eb9c5da76"))
/* interface */ IAgVeWaypointsElement;
struct /* coclass */ AgVeWaypointsCollection;
struct __declspec(uuid("cd6ab7fc-fed3-48cc-b68d-fc1f9d49633d"))
/* dual interface */ IAgVeWaypointsCollection;
struct /* coclass */ AgVeLaunchLLA;
struct __declspec(uuid("2d35768d-147a-4ce3-a5ad-c7adedbc2d07"))
/* dual interface */ _IAgVeLaunchLLA;
struct __declspec(uuid("5ae68050-c01b-42fb-b00c-13c37de88b65"))
/* interface */ IAgVeLaunch;
struct __declspec(uuid("318c2803-78c9-4699-9a06-4f06d8073e53"))
/* interface */ IAgVeLaunchLLA;
struct /* coclass */ AgVeLaunchLLR;
struct __declspec(uuid("73e939e0-5b94-4cf3-9f48-5b36d2fda214"))
/* dual interface */ _IAgVeLaunchLLR;
struct __declspec(uuid("135f1bd8-f072-4ef5-b7b3-66c1f3a424a3"))
/* interface */ IAgVeLaunchLLR;
struct /* coclass */ AgVeImpactLLA;
struct __declspec(uuid("fa515a27-0142-4195-a206-87f2b740b2b4"))
/* dual interface */ _IAgVeImpactLLA;
struct __declspec(uuid("0ea54715-e6f8-4b6f-9e45-28f1ec85bd58"))
/* interface */ IAgVeImpact;
struct __declspec(uuid("613b6a1f-06c9-40eb-8383-05fcd8772b67"))
/* interface */ IAgVeImpactLLA;
struct /* coclass */ AgVeImpactLLR;
struct __declspec(uuid("869ae1a0-096c-4b92-a4be-83667ad014a0"))
/* dual interface */ _IAgVeImpactLLR;
struct __declspec(uuid("5e810dcd-0e10-4f2c-bf4e-bdf4a57df59a"))
/* interface */ IAgVeImpactLLR;
struct /* coclass */ AgVeLaunchControlFixedApogeeAlt;
struct __declspec(uuid("f3af69b1-e630-43dc-b3d3-6ca455082e04"))
/* dual interface */ _IAgVeLaunchControlFixedApogeeAlt;
struct __declspec(uuid("2f268b18-4a73-4578-b90d-29611480a36d"))
/* interface */ IAgVeLaunchControl;
struct __declspec(uuid("f2dfb52b-fe9e-4c37-9c6b-5f4f2d6be1e8"))
/* interface */ IAgVeLaunchControlFixedApogeeAlt;
struct /* coclass */ AgVeLaunchControlFixedDeltaV;
struct __declspec(uuid("c77f120a-a30f-4a9a-bba3-7e87eebc9343"))
/* dual interface */ _IAgVeLaunchControlFixedDeltaV;
struct __declspec(uuid("86271b63-bbd8-4252-abe0-b8739aae9f37"))
/* interface */ IAgVeLaunchControlFixedDeltaV;
struct /* coclass */ AgVeLaunchControlFixedDeltaVMinEcc;
struct __declspec(uuid("9ed5c24d-3067-4a4b-9558-cd92c28018f3"))
/* dual interface */ _IAgVeLaunchControlFixedDeltaVMinEcc;
struct __declspec(uuid("669cdffc-c012-4720-bba7-c255d577e7d1"))
/* interface */ IAgVeLaunchControlFixedDeltaVMinEcc;
struct /* coclass */ AgVeLaunchControlFixedTimeOfFlight;
struct __declspec(uuid("49065d0d-6e1b-4f10-b17e-7a4a0ac8d1c0"))
/* dual interface */ _IAgVeLaunchControlFixedTimeOfFlight;
struct __declspec(uuid("e502245d-6db4-4e45-aee7-285604524081"))
/* interface */ IAgVeLaunchControlFixedTimeOfFlight;
struct /* coclass */ AgVeImpactLocationLaunchAzEl;
struct __declspec(uuid("6b6171e8-7214-4f2c-a645-1e9bb97367c6"))
/* dual interface */ _IAgVeImpactLocationLaunchAzEl;
struct __declspec(uuid("d261264f-dc9e-48b5-b91f-7cf37313f596"))
/* interface */ IAgVeImpactLocation;
struct __declspec(uuid("f54a03d9-b39b-4a3c-8529-ce90d7ab50f6"))
/* interface */ IAgVeImpactLocationLaunchAzEl;
struct /* coclass */ AgVeImpactLocationPoint;
struct __declspec(uuid("e00a2360-7a11-4f91-ab7b-efc202989b85"))
/* dual interface */ _IAgVeImpactLocationPoint;
enum AgEVeImpact;
enum AgEVeLaunchControl;
struct __declspec(uuid("ab1b3393-7fa4-4916-a1bc-46dec29d61a9"))
/* interface */ IAgVeImpactLocationPoint;
struct /* coclass */ AgVePropagatorBallistic;
struct __declspec(uuid("11bb88d5-35b8-4aba-9585-61bae814cd48"))
/* dual interface */ _IAgVePropagatorBallistic;
enum AgEVeLaunch;
enum AgEVeImpactLocation;
struct __declspec(uuid("ae269705-82ef-49e1-9f8b-1117b03b4000"))
/* interface */ IAgVePropagatorBallistic;
struct /* coclass */ AgVePropagatorGreatArc;
struct __declspec(uuid("78ea1165-8a12-4e8f-8a9f-8d9670ebddc3"))
/* dual interface */ _IAgVePropagatorGreatArc;
enum AgEVeWayPtCompMethod;
enum AgEVeAltitudeRef;
struct __declspec(uuid("d5527e91-ddb6-4775-86f1-947ed80fc572"))
/* interface */ IAgVeWayPtAltitudeRef;
struct __declspec(uuid("681365a0-1a18-443e-93a0-5d26e5ac2177"))
/* interface */ IAgVePropagatorGreatArc;
struct /* coclass */ AgVeSGP4SegmentCollection;
struct /* coclass */ AgVeSGP4Segment;
struct __declspec(uuid("9a665111-83a4-492f-8a70-62696d0fd38e"))
/* dual interface */ _IAgVeSGP4Segment;
struct /* coclass */ AgVeThirdBodyGravity;
struct __declspec(uuid("ffcb104f-9811-43a9-96bb-36d37849fc55"))
/* dual interface */ _IAgVeThirdBodyGravity;
struct /* coclass */ AgVeConsiderAnalysisCollectionElement;
struct __declspec(uuid("b5635bf2-48e1-46c1-8a31-889a084e4540"))
/* dual interface */ _IAgVeConsiderAnalysisCollectionElement;
struct /* coclass */ AgVeConsiderAnalysisCollection;
struct /* coclass */ AgVeSPICESegment;
struct __declspec(uuid("c8830507-afdb-4137-9f2a-3b9c823ca7a2"))
/* dual interface */ _IAgVeSPICESegment;
struct /* coclass */ AgVeWayPtAltitudeRefTerrain;
struct __declspec(uuid("3d7cdba4-8e39-4702-8f52-e0e4ec904230"))
/* dual interface */ _IAgVeWayPtAltitudeRefTerrain;
enum AgEVeWayPtInterpMethod;
struct __declspec(uuid("b440e501-7507-4a9b-8156-f9800af68e2b"))
/* interface */ IAgVeWayPtAltitudeRefTerrain;
struct /* coclass */ AgVeWayPtAltitudeRef;
struct __declspec(uuid("b555f24b-8bb5-496b-aca7-cc5f2506d7a2"))
/* dual interface */ _IAgVeWayPtAltitudeRef;
struct /* coclass */ AgVeSGP4LoadFile;
struct __declspec(uuid("8c29de1f-86f3-4ef5-9283-6431f518f45a"))
/* dual interface */ _IAgVeSGP4LoadFile;
struct __declspec(uuid("e7149664-c193-4dce-bbc6-4ad01fc29539"))
/* interface */ IAgVeSGP4LoadFile;
struct /* coclass */ AgVeSGP4OnlineLoad;
struct __declspec(uuid("6bd2a7ab-9f0c-40f7-b364-6e8f4ac2d29c"))
/* dual interface */ _IAgVeSGP4OnlineLoad;
struct __declspec(uuid("3e44c9a4-da99-45af-80e8-8d25997aec19"))
/* interface */ IAgVeSGP4OnlineLoad;
struct /* coclass */ AgVeSGP4OnlineAutoLoad;
struct __declspec(uuid("d5e2f1d2-0116-4055-aa19-79194faaf516"))
/* dual interface */ _IAgVeSGP4OnlineAutoLoad;
struct __declspec(uuid("883794a8-16b7-4734-bdc8-f563962d0e2d"))
/* interface */ IAgVeSGP4OnlineAutoLoad;
struct /* coclass */ AgVeSGP4SpaceTrackLoad;
struct __declspec(uuid("a5c8adf1-df91-47f7-99ca-06c67d157353"))
/* dual interface */ _IAgVeSGP4SpaceTrackLoad;
struct __declspec(uuid("2bcc1cd9-e1a0-4350-b059-ea1e6c9cd739"))
/* interface */ IAgVeSGP4SpaceTrackLoad;
struct /* coclass */ AgVeGroundEllipsesCollection;
struct __declspec(uuid("f2609256-9bfa-4734-8815-095aba4f68d9"))
/* dual interface */ IAgVeGroundEllipsesCollection;
struct __declspec(uuid("a35b070f-9669-48be-a89d-667fd0e24a3b"))
/* interface */ IAgVeGroundEllipseElement;
struct __declspec(uuid("62c2e59d-2796-4207-be86-ac18b502861f"))
/* dual interface */ IAgVeEllipseDataCollection;
struct __declspec(uuid("df47e8ea-7a3e-4257-9c45-b4e12b8ad57a"))
/* interface */ IAgVeEllipseDataElement;
struct /* coclass */ AgSatellite;
struct __declspec(uuid("419bfd84-2c2b-47e7-b74c-f9dcb7430299"))
/* dual interface */ _IAgSatellite;
enum AgEVeAttitude;
struct __declspec(uuid("1b1a846d-a093-40f0-a9b6-7730b1e621ed"))
/* interface */ IAgVeAttitude;
struct __declspec(uuid("95b323ba-d55c-4459-a0dd-552ed6a77841"))
/* interface */ IAgVeMassProperties;
struct __declspec(uuid("b0af54fa-04fa-4d9a-b4a0-71bb2b7f3a60"))
/* interface */ IAgVeInertia;
struct __declspec(uuid("c73a748b-9774-456e-a7bb-1c80613ea594"))
/* interface */ IAgVePassBreak;
struct __declspec(uuid("4730eee8-367e-4e60-b25b-671742f48db2"))
/* interface */ IAgVeDefinition;
enum AgEVeBreakAngleType;
struct __declspec(uuid("f539c10d-aef3-431a-bf33-aeb01ec4cb26"))
/* interface */ IAgVeBreakAngle;
enum AgEVeDirection;
enum AgEVePartialPassMeasurement;
enum AgEVeCoordinateSystem;
struct __declspec(uuid("3081f59f-9f6d-4ae9-9109-4d3ea58af284"))
/* interface */ IAgVeRepeatGroundTrackNumbering;
enum AgEVePassNumbering;
struct __declspec(uuid("d6bf2c61-2ab2-413f-8d08-13475e68de28"))
/* interface */ IAgVePassNumbering;
struct __declspec(uuid("35440693-185a-4bf4-bb97-ae6fec7c8322"))
/* interface */ IAgSaGraphics;
enum AgEVeGfxAttributes;
struct __declspec(uuid("618b384d-6c98-462f-be85-eab19111870b"))
/* interface */ IAgVeGfxAttributes;
struct __declspec(uuid("58364000-5a7e-4f2b-9e60-6ac85565e042"))
/* dual interface */ IAgVeGfxTimeEventsCollection;
struct __declspec(uuid("65f1c611-05cc-4619-8b84-36faaafeb6f6"))
/* interface */ IAgVeGfxTimeEventsElement;
enum AgEVeGfxTimeEventType;
struct __declspec(uuid("3e0b3090-b638-4837-bf3d-4d3563259736"))
/* interface */ IAgVeGfxTimeEventType;
struct __declspec(uuid("660c954a-74cc-48db-8b33-a9863617404b"))
/* interface */ IAgVeGfxPasses;
enum AgEVeGfxPass;
struct __declspec(uuid("b22a928b-0ea9-4c70-a201-47eddca2ead2"))
/* interface */ IAgVeGfxPass;
enum AgEVeGfxVisibleSides;
struct __declspec(uuid("53072337-9017-4b6f-a09a-2cf9198bde7f"))
/* interface */ IAgVeGfxOrbitPassData;
struct __declspec(uuid("41d2e6ee-904b-4bf3-ab3e-e05fa0014fb0"))
/* interface */ IAgVeGfxLeadTrailData;
enum AgELeadTrailData;
struct __declspec(uuid("f6d26c63-5567-44ea-a16f-2ae4bfe63cb5"))
/* interface */ IAgVeLeadTrailData;
struct __declspec(uuid("0c82546d-1425-43d2-b769-ca6de1b9bcf6"))
/* interface */ IAgVeGfxPassResolution;
struct __declspec(uuid("ce568c20-7bf8-4660-9b3f-a3322a182d5e"))
/* interface */ IAgVeGfxElevContours;
struct __declspec(uuid("4a2f20ba-916f-4273-a830-691d73c87a5c"))
/* dual interface */ IAgVeGfxElevationsCollection;
struct __declspec(uuid("ef476143-12b7-48bd-9294-d67e0e4435ae"))
/* interface */ IAgVeGfxElevationsElement;
struct __declspec(uuid("e83a1d53-0d66-41cb-bd08-5bb8163bd482"))
/* interface */ IAgVeGfxSAA;
struct __declspec(uuid("a1941ee0-5368-4dbe-bb4e-99f851ec258d"))
/* interface */ IAgVeGfxLighting;
struct __declspec(uuid("030f22bc-5fd3-4a38-8b06-77a0978add76"))
/* interface */ IAgVeGfxLightingElement;
struct __declspec(uuid("2f0bb2cf-1be9-4f0c-8984-9b2167f8dea8"))
/* interface */ IAgVeGfxSwath;
enum AgEVeGfxElevation;
struct __declspec(uuid("8efcdbd9-2a86-45c9-bf50-4e1b5f7f292b"))
/* interface */ IAgVeGfxElevation;
enum AgEVeGfxOptions;
struct __declspec(uuid("812ace65-2fab-480c-8617-cd46e16afb0d"))
/* dual interface */ IAgVeGfxGroundEllipsesCollection;
struct __declspec(uuid("4b5231eb-62b5-4db3-a7c4-c3ef81ae3c5f"))
/* interface */ IAgVeGfxGroundEllipsesElement;
struct __declspec(uuid("dc14cf44-e93a-4af9-acca-06666cc85c36"))
/* interface */ IAgVeCentralBodies;
struct __declspec(uuid("1c34d19a-1205-475f-a769-4b4c04ca55ed"))
/* interface */ IAgSaVO;
struct __declspec(uuid("97d94b30-6094-4aac-9bed-149a2a17d399"))
/* interface */ IAgSaVOModel;
struct __declspec(uuid("75c0adc1-a312-479b-ac37-17fe6479fc33"))
/* dual interface */ IAgVeVOSystemsCollection;
struct __declspec(uuid("0618ca5e-25bd-4a96-924b-7bfad829c5cb"))
/* interface */ IAgVeVOSystemsElement;
struct __declspec(uuid("04356b86-868c-4c1a-9255-d657d20713c6"))
/* interface */ IAgVeVOSystemsElementBase;
struct __declspec(uuid("15c09c0b-f671-4246-b6dd-3093b24c88f9"))
/* interface */ IAgVeVOSystemsSpecialElement;
struct __declspec(uuid("c10062b6-ccb9-4755-8211-37e0aee1ca42"))
/* interface */ IAgVeVOOrbitProximity;
struct __declspec(uuid("dfd171a4-3383-40d6-9196-97f337e91c26"))
/* interface */ IAgVeVOProximity;
struct __declspec(uuid("8333980a-3863-4f00-b665-83cbc5ffa94f"))
/* interface */ IAgVeVOGeoBox;
struct __declspec(uuid("3742ccc4-814c-4097-aeb0-2d9fa3f94308"))
/* interface */ IAgVeVOControlBox;
struct __declspec(uuid("7a22f43b-0331-485f-acb3-da72e936f29c"))
/* interface */ IAgVeVOProximityAreaObject;
struct __declspec(uuid("475886b3-46b1-4f63-af83-5d7f54229455"))
/* interface */ IAgVeVOBearingBox;
struct __declspec(uuid("ca243aba-4554-4125-93c7-c932f3cd951b"))
/* interface */ IAgVeVOBearingEllipse;
struct __declspec(uuid("40872552-965a-4e75-b4b1-7c70ee1cc006"))
/* interface */ IAgVeVOLineOfBearing;
struct __declspec(uuid("b68ac16c-1a26-4085-837b-0487f409deba"))
/* interface */ IAgVeVOElevContours;
struct __declspec(uuid("be5eaa93-5468-495b-a5e9-658139423792"))
/* interface */ IAgVeVOSAA;
struct __declspec(uuid("5e1cf8c4-24da-4569-b920-e89b744fd5fe"))
/* interface */ IAgVeVOCovariancePointingContour;
enum AgEVeVOSigmaScale;
struct __declspec(uuid("0ebb4868-6df5-4966-aa3c-3223e96e0801"))
/* interface */ IAgVeVOSigmaScale;
enum AgEVeVOAttributes;
struct __declspec(uuid("3388e507-8a99-4a39-94f8-89d863a40dde"))
/* interface */ IAgVeVOAttributes;
struct __declspec(uuid("8637f04f-b133-4b38-9215-def32fe1dfd0"))
/* interface */ IAgVeVOSize;
struct __declspec(uuid("f41b4087-f4eb-42fa-b9ae-f4d4f16b79a6"))
/* interface */ IAgVeVOPass;
struct __declspec(uuid("3cc77e57-69bd-4cd3-829b-070c96c192a1"))
/* interface */ IAgVeVOOrbitTrackData;
struct __declspec(uuid("93af5a9a-243e-4dbd-92f8-3915fdc5fff4"))
/* interface */ IAgVeVOOrbitPassData;
struct __declspec(uuid("3013b511-14f1-4fa2-afb3-3f27eeb10bf2"))
/* interface */ IAgVeVOLeadTrailData;
struct __declspec(uuid("4575a39b-1082-4dcd-90cf-1313ff32bb9b"))
/* interface */ IAgVeVOOrbitTickMarks;
struct __declspec(uuid("a5d57702-9cf2-44d0-9dd6-c69f6350fc21"))
/* interface */ IAgVeVOPathTickMarks;
enum AgETickData;
struct __declspec(uuid("3fd985f8-ba8b-4e31-a86f-86a858af71da"))
/* interface */ IAgVeVOTickData;
struct __declspec(uuid("137b5414-404e-47a8-a284-eb144cca5226"))
/* interface */ IAgVeVOCovariance;
struct __declspec(uuid("9ebaa44a-8749-4e37-9ec0-f74cbeafd9e4"))
/* interface */ IAgVeVOOrbitDropLines;
struct __declspec(uuid("bad03142-f09d-44ca-a6ec-5c9527536886"))
/* dual interface */ IAgVeVODropLinePosItemCollection;
struct __declspec(uuid("498d933f-d7d7-4acb-9b5f-d3e149202b36"))
/* interface */ IAgVeVODropLinePosItem;
enum AgEVeVODropLineType;
struct __declspec(uuid("a316a867-f824-4813-bd31-5c99f05a3196"))
/* dual interface */ IAgVeVODropLinePathItemCollection;
struct __declspec(uuid("7cb02958-87b9-483c-86ff-ec6081e10e29"))
/* interface */ IAgVeVODropLinePathItem;
struct __declspec(uuid("727f6f43-5571-47a7-b97b-e2837b3e5f52"))
/* interface */ IAgVeVOBPlanes;
struct __declspec(uuid("1b5b94e3-2109-4363-8337-8653738784f9"))
/* dual interface */ IAgVeVOBPlaneTemplatesCollection;
struct __declspec(uuid("409c7dbc-62e2-4c37-8c73-1cf47f3a71df"))
/* interface */ IAgVeVOBPlaneTemplate;
struct __declspec(uuid("93e4e123-4224-4a6f-8234-26c6fad500f6"))
/* dual interface */ IAgVeVOBPlaneTemplateDisplayCollection;
struct __declspec(uuid("c42a7451-2566-4a05-8f73-21a1f5e95c93"))
/* interface */ IAgVeVOBPlaneTemplateDisplayElement;
struct __declspec(uuid("7cd6e188-207d-4bb2-9add-e926f78a7f47"))
/* dual interface */ IAgVeVOBPlaneInstancesCollection;
struct __declspec(uuid("efd7cef3-61ee-43ad-9f7c-cda6ecc477c0"))
/* interface */ IAgVeVOBPlaneInstance;
struct __declspec(uuid("74b89978-22c9-408e-b2b8-a2a9618a1c78"))
/* interface */ IAgVeVOBPlaneEvent;
struct __declspec(uuid("6751d323-34f1-40d0-8926-0b670e1537d4"))
/* interface */ IAgVeVOBPlaneTargetPoint;
enum AgEVeVOBPlaneTargetPointPosition;
struct __declspec(uuid("b7ef65b4-52cf-40f1-a89f-9415d5310c33"))
/* interface */ IAgVeVOBPlaneTargetPointPosition;
struct __declspec(uuid("f7a0fd3f-599b-46d0-aa66-7cf10a038e83"))
/* dual interface */ IAgVeVOBPlanePointCollection;
struct __declspec(uuid("b9214d79-96cc-4438-8e28-3153e45a835b"))
/* interface */ IAgVeVOBPlanePoint;
struct __declspec(uuid("d98367d4-e574-4c2e-a368-dc2d12581883"))
/* interface */ IAgVeEclipseBodies;
struct __declspec(uuid("2d408a4f-3410-46a1-bb93-2ccd6e4b3e8f"))
/* interface */ IAgSaExportTools;
struct __declspec(uuid("c3d448db-02a0-4c51-bfe8-9bd5356a2401"))
/* interface */ IAgVeEphemerisCCSDSExportTool;
enum AgECCSDSReferenceFrame;
enum AgECCSDSDateFormat;
enum AgECCSDSEphemFormat;
struct __declspec(uuid("548f1ef5-9aca-47e7-8d20-2ab94ab8d287"))
/* interface */ IAgExportToolStepSize;
enum AgEExportToolStepSize;
struct __declspec(uuid("6688c563-0af7-4cbd-a964-38239d382868"))
/* interface */ IAgExportToolTimePeriod;
enum AgEExportToolTimePeriod;
struct __declspec(uuid("e573401b-ff2e-4c6d-9e07-9f3690c226fd"))
/* interface */ IAgVeEphemerisStkExportTool;
enum AgEStkEphemCoordinateSystem;
enum AgEExportToolVersionFormat;
enum AgEStkEphemCovarianceType;
struct __declspec(uuid("57033cc5-a19e-402f-9e4e-14194ee77c69"))
/* interface */ IAgVeEphemerisSpiceExportTool;
enum AgESpiceInterpolation;
struct __declspec(uuid("7e7bc892-34fc-4aaa-8041-87b821de3284"))
/* interface */ IAgVeEphemerisCode500ExportTool;
struct __declspec(uuid("1465c8a4-8239-43f5-a4ec-90360a767787"))
/* interface */ IAgVePropDefExportTool;
struct __declspec(uuid("48caf1e2-bf5d-4e09-95de-dec09d5a4687"))
/* interface */ IAgVeAttitudeExportTool;
enum AgEAttCoordinateAxes;
struct __declspec(uuid("49759cb1-79e3-4d74-be04-e550d0b934ee"))
/* interface */ IAgVeCoordinateAxes;
enum AgEAttInclude;
struct __declspec(uuid("be44a05e-7ee1-4c74-a970-9f2558390eb7"))
/* interface */ IAgVeSpEnvSpaceEnvironment;
struct __declspec(uuid("c955f92b-bbfe-4b6b-8a3b-27d052a0f65b"))
/* interface */ IAgSpEnvSAAContour;
enum AgESpEnvSAAFluxLevel;
struct __declspec(uuid("5ffb8471-a253-4784-ac63-4a3074abd91b"))
/* interface */ IAgVeSpEnvMagneticField;
struct __declspec(uuid("26f9627d-5526-4557-be3e-ee51910bbd0c"))
/* interface */ IAgVeSpEnvVehTemperature;
enum AgEVeSpEnvShapeModel;
struct __declspec(uuid("b1198ea7-ad06-4c29-a8b9-82c37c2d8d38"))
/* interface */ IAgVeSpEnvParticleFlux;
enum AgEVeSpEnvF10p7Source;
enum AgEVeSpEnvMaterial;
struct __declspec(uuid("e487caa4-9582-4091-a6f4-4f75503047b7"))
/* interface */ IAgVeSpEnvRadiation;
enum AgEVeSpEnvComputationMode;
enum AgEVeSpEnvDoseChannel;
enum AgEVeSpEnvDetectorType;
enum AgEVeSpEnvApSource;
struct __declspec(uuid("5cf80768-7701-4fe6-81d7-b2df074cd13a"))
/* dual interface */ IAgVeSpEnvRadDoseRateCollection;
struct __declspec(uuid("59b0d7ba-4547-4e55-8538-145d72322a7b"))
/* interface */ IAgVeSpEnvRadDoseRateElement;
enum AgEVeSpEnvDetectorGeometry;
struct __declspec(uuid("8861997e-5c85-42bd-9627-47ba192b891f"))
/* interface */ IAgVeSpEnvGraphics;
struct __declspec(uuid("b6fc6079-c653-4956-9a37-8bc9ed24aa86"))
/* interface */ IAgVeSpEnvMagFieldLine;
struct __declspec(uuid("fb080709-1112-411c-bc55-733b2656c589"))
/* interface */ IAgSatellite;
struct /* coclass */ AgVeInertia;
struct __declspec(uuid("cd1046b6-36f9-4e99-ac51-0e6203ad61f2"))
/* dual interface */ _IAgVeInertia;
struct /* coclass */ AgVeMassProperties;
struct __declspec(uuid("4769f8b0-2dbb-4f06-b36b-471db0a69fb6"))
/* dual interface */ _IAgVeMassProperties;
struct /* coclass */ AgVeBreakAngleBreakByLatitude;
struct __declspec(uuid("0fa6bddd-bde1-4287-aeee-2adc953d1363"))
/* dual interface */ _IAgVeBreakAngleBreakByLatitude;
struct __declspec(uuid("5020789b-1c8c-4e92-91d3-ca60d4e7418a"))
/* interface */ IAgVeBreakAngleBreakByLatitude;
struct /* coclass */ AgVeBreakAngleBreakByLongitude;
struct __declspec(uuid("0f216f05-6f97-449b-8894-8ef83e9a67bb"))
/* dual interface */ _IAgVeBreakAngleBreakByLongitude;
struct __declspec(uuid("7146b7b0-908d-4e64-8b3a-112865342976"))
/* interface */ IAgVeBreakAngleBreakByLongitude;
struct /* coclass */ AgVeDefinition;
struct __declspec(uuid("872689c8-0fc2-46d5-9c45-97cae3b6fd3f"))
/* dual interface */ _IAgVeDefinition;
struct /* coclass */ AgVeRepeatGroundTrackNumbering;
struct __declspec(uuid("87045b18-6a86-4d5c-9dee-a1560a171a92"))
/* dual interface */ _IAgVeRepeatGroundTrackNumbering;
struct /* coclass */ AgVePassNumberingDateOfFirstPass;
struct __declspec(uuid("fca1a7a0-5fad-4b80-86d5-87d394736f1f"))
/* dual interface */ _IAgVePassNumberingDateOfFirstPass;
struct __declspec(uuid("aabe7b3b-27e8-43df-a8db-d0ee1b313fb3"))
/* interface */ IAgVePassNumberingDateOfFirstPass;
struct /* coclass */ AgVePassNumberingFirstPassNum;
struct __declspec(uuid("2b244e56-2ae8-405b-918a-6a68d54e86b6"))
/* dual interface */ _IAgVePassNumberingFirstPassNum;
struct __declspec(uuid("94d629fb-3c5b-4fd0-9611-06dd36348023"))
/* interface */ IAgVePassNumberingFirstPassNum;
struct /* coclass */ AgVePassBreak;
struct __declspec(uuid("c8765378-1e26-47ad-86bf-3d25ed0c41cf"))
/* dual interface */ _IAgVePassBreak;
struct /* coclass */ AgVeCentralBodies;
struct __declspec(uuid("e34da831-98ae-4e1a-8027-ae739074eabc"))
/* dual interface */ _IAgVeCentralBodies;
struct /* coclass */ AgSaGraphics;
struct __declspec(uuid("4901ac71-7d14-42d9-84c0-a4d21eb31b58"))
/* dual interface */ _IAgSaGraphics;
struct /* coclass */ AgSaVO;
struct __declspec(uuid("02b6f3b4-d972-4781-a93b-5f4c534d954f"))
/* dual interface */ _IAgSaVO;
struct /* coclass */ AgVeEllipseDataElement;
struct __declspec(uuid("337cf074-a2e1-49e4-9a4f-39e0a257051b"))
/* dual interface */ _IAgVeEllipseDataElement;
struct /* coclass */ AgVeEllipseDataCollection;
struct /* coclass */ AgVeGroundEllipseElement;
struct __declspec(uuid("47443d32-e0dd-4c01-bc64-ddb7fa1e94d8"))
/* dual interface */ _IAgVeGroundEllipseElement;
struct /* coclass */ AgSaVOModel;
struct __declspec(uuid("d7f73772-28ca-44fb-b0ad-747e66d3f92f"))
/* dual interface */ _IAgSaVOModel;
struct /* coclass */ AgVeEclipseBodies;
struct __declspec(uuid("333638bf-e4e8-496f-8634-8eccef4703a6"))
/* dual interface */ _IAgVeEclipseBodies;
struct /* coclass */ AgVeVector;
struct __declspec(uuid("c346b45c-986a-4048-a50b-f7b7ad8d84c1"))
/* dual interface */ _IAgVeVector;
struct __declspec(uuid("29c3272f-3f37-45b3-97a8-d391d7b2e08b"))
/* interface */ IAgVeVector;
struct /* coclass */ AgVeRateOffset;
struct __declspec(uuid("0783f3a6-41d4-4fc7-ad84-40b73c092a5a"))
/* dual interface */ _IAgVeRateOffset;
struct __declspec(uuid("7df8af73-2fd6-4a84-8834-9ca72dd9d143"))
/* interface */ IAgVeRateOffset;
struct /* coclass */ AgVeProfileAlignedAndConstrained;
struct __declspec(uuid("e47f535e-acf2-4d3e-9832-960299fd349c"))
/* dual interface */ _IAgVeProfileAlignedAndConstrained;
struct __declspec(uuid("a60965bf-9f59-4836-aee7-d324234790a7"))
/* interface */ IAgVeProfileAlignedAndConstrained;
struct __declspec(uuid("11f84bf2-f54e-47af-83a8-15deb421b23f"))
/* interface */ IAgVeAttProfile;
struct /* coclass */ AgVeProfileInertial;
struct __declspec(uuid("7099045f-7923-4d53-817b-8c5d210b71c6"))
/* dual interface */ _IAgVeProfileInertial;
struct __declspec(uuid("be442ae1-405c-476a-82c7-86b76e4e03df"))
/* interface */ IAgVeProfileInertial;
struct /* coclass */ AgVeProfileConstraintOffset;
struct __declspec(uuid("9c51d19c-fffe-465e-be64-8aa3d5767f7c"))
/* dual interface */ _IAgVeProfileConstraintOffset;
struct __declspec(uuid("d682e3bc-c4ba-4156-b324-ca889d9e961b"))
/* interface */ IAgVeProfileConstraintOffset;
struct /* coclass */ AgVeProfileFixedInAxes;
struct __declspec(uuid("990e48ed-95f7-4b74-9ffb-9b6791cb5f0a"))
/* dual interface */ _IAgVeProfileFixedInAxes;
struct __declspec(uuid("0dfa7e9f-cf04-4022-ad58-b663eaf60481"))
/* interface */ IAgVeProfileFixedInAxes;
struct /* coclass */ AgVeProfilePrecessingSpin;
struct __declspec(uuid("6783a70d-b389-4a96-bb2e-b27678c6db95"))
/* dual interface */ _IAgVeProfilePrecessingSpin;
struct __declspec(uuid("07134e39-80e5-43d0-95ff-822e3f36fd3f"))
/* interface */ IAgVeProfilePrecessingSpin;
struct /* coclass */ AgVeProfileSpinAligned;
struct __declspec(uuid("b12a6026-8fc2-4bc9-a92e-3176dd7a7e08"))
/* dual interface */ _IAgVeProfileSpinAligned;
struct __declspec(uuid("97d8b598-d4ee-47e2-bb3b-a688a7149e27"))
/* interface */ IAgVeProfileSpinAligned;
struct /* coclass */ AgVeProfileSpinAboutXXX;
struct __declspec(uuid("94a8c15d-1ed6-446e-9d3b-467b8c98da46"))
/* dual interface */ _IAgVeProfileSpinAboutXXX;
struct __declspec(uuid("f0cb1966-0b55-489c-9fed-9f06db24bff3"))
/* interface */ IAgVeProfileSpinAboutXXX;
struct /* coclass */ AgVeProfileSpinning;
struct __declspec(uuid("03b948a9-163b-403f-ad2e-830e72fb1729"))
/* dual interface */ _IAgVeProfileSpinning;
struct __declspec(uuid("9d60fe05-01a2-4f28-be17-c2cc41d7d09a"))
/* interface */ IAgVeProfileSpinning;
struct /* coclass */ AgVeProfileAlignmentOffset;
struct __declspec(uuid("16aef0b3-416d-4bd2-8e6c-515bd97f0544"))
/* dual interface */ _IAgVeProfileAlignmentOffset;
struct __declspec(uuid("e5746a09-b6f8-4c79-8ed4-f7df49410b25"))
/* interface */ IAgVeProfileAlignmentOffset;
struct /* coclass */ AgVeScheduleTimesCollection;
struct __declspec(uuid("aa36e1b7-0c11-4730-863a-cf895c1d9dc4"))
/* dual interface */ IAgVeScheduleTimesCollection;
struct __declspec(uuid("35276915-f4d6-4d31-86fd-e86a3a5bf1c4"))
/* interface */ IAgVeScheduleTimesElement;
struct /* coclass */ AgVeTargetTimes;
struct __declspec(uuid("f6269a71-bc7d-4b4f-93ea-ba3e9262b7fb"))
/* dual interface */ _IAgVeTargetTimes;
struct __declspec(uuid("30e37d46-15ca-482e-bb92-aa8071e185f4"))
/* interface */ IAgVeTargetTimes;
struct /* coclass */ AgVeAttPointing;
struct __declspec(uuid("63da06e2-07c4-42b7-b7cf-66fd1edf8917"))
/* dual interface */ _IAgVeAttPointing;
struct __declspec(uuid("4fa5b15a-0b31-4503-b4e6-fc92fced3bf7"))
/* dual interface */ IAgVeTargetPointingCollection;
struct __declspec(uuid("70019dd9-3355-4044-80b9-2edeb8d8b018"))
/* interface */ IAgVeTargetPointingElement;
struct __declspec(uuid("79020c7d-0c28-4746-a972-7dbb78a2f9e8"))
/* dual interface */ IAgVeTargetPointingIntervalCollection;
struct __declspec(uuid("d88716e1-e7be-4660-b4bd-79e4ea52d5b6"))
/* interface */ IAgVeAccessAdvanced;
struct __declspec(uuid("f6ae8e74-4ff0-4d18-aefb-15590988b7a0"))
/* interface */ IAgVePointing;
struct __declspec(uuid("25881a4f-fde3-4fe3-832b-a35951c44dce"))
/* interface */ IAgVeAttPointing;
struct /* coclass */ AgVeDuration;
struct __declspec(uuid("f3ad8921-d05c-4344-8a1c-376351c4e4eb"))
/* dual interface */ _IAgVeDuration;
struct __declspec(uuid("8d64554f-f432-4ef5-9b45-24584b3b83bd"))
/* interface */ IAgVeDuration;
struct /* coclass */ AgVeStandardBasic;
struct __declspec(uuid("d744da5d-137a-46a2-9bff-6ef09792f02a"))
/* dual interface */ _IAgVeStandardBasic;
enum AgEVeProfile;
struct __declspec(uuid("a6d34789-6d90-47d4-8cde-7d237471945a"))
/* interface */ IAgVeStandardBasic;
struct /* coclass */ AgVeAttExternal;
struct __declspec(uuid("78519329-f95a-4352-b0c1-150fc62ec41e"))
/* dual interface */ _IAgVeAttExternal;
struct __declspec(uuid("41a88efa-a312-4e01-b87a-d7bc8358fe5f"))
/* interface */ IAgVeAttExternal;
struct /* coclass */ AgVeAttitudeRealTime;
struct __declspec(uuid("90e3154a-0ab9-445e-8912-e8c05e93ac2a"))
/* dual interface */ _IAgVeAttitudeRealTime;
enum AgEVeLookAheadMethod;
struct __declspec(uuid("5a9d8357-9d9d-4cdc-b497-f7d3c12f04ab"))
/* interface */ IAgVeAttitudeRealTimeDataReference;
struct __declspec(uuid("520d27e6-464c-4b01-8036-4f6fa043a5ed"))
/* interface */ IAgVeAttitudeRealTime;
struct /* coclass */ AgVeProfileCoordinatedTurn;
struct __declspec(uuid("c55f7d06-2aca-4ea9-a0c1-7cf5348ecdc8"))
/* dual interface */ _IAgVeProfileCoordinatedTurn;
struct __declspec(uuid("c3012f1e-730c-47fe-a05e-8f86b915849a"))
/* interface */ IAgVeProfileCoordinatedTurn;
struct /* coclass */ AgVeProfileYawToNadir;
struct __declspec(uuid("4dbf4b00-e9ed-44e6-8b41-8b533b8dd33b"))
/* dual interface */ _IAgVeProfileYawToNadir;
struct __declspec(uuid("af1b714a-c897-4dcc-b7b5-08dbd44b1b47"))
/* interface */ IAgVeProfileYawToNadir;
struct /* coclass */ AgVeTargetPointingElement;
struct __declspec(uuid("b0418850-6516-4335-8aeb-ed5ad72149c2"))
/* dual interface */ _IAgVeTargetPointingElement;
struct /* coclass */ AgVeTargetPointingCollection;
struct /* coclass */ AgVeTorque;
struct __declspec(uuid("e9fc0a76-b29a-4bc9-b72e-79c32acf2951"))
/* dual interface */ _IAgVeTorque;
struct __declspec(uuid("54f5503e-caff-479c-965a-08f418cdc017"))
/* interface */ IAgVeTorque;
struct /* coclass */ AgVeIntegratedAttitude;
struct __declspec(uuid("6ce11664-ff3c-4465-a8af-102644ac8b22"))
/* dual interface */ _IAgVeIntegratedAttitude;
struct __declspec(uuid("f65df3bf-3c53-4598-9896-4b9748e134e0"))
/* interface */ IAgVeIntegratedAttitude;
struct /* coclass */ AgVeScheduleTimesElement;
struct __declspec(uuid("c72875d9-ddaa-464e-86b0-9664119f5ab7"))
/* dual interface */ _IAgVeScheduleTimesElement;
struct /* coclass */ AgVeTrajectoryAttitudeStandard;
struct __declspec(uuid("1fd910c8-2d92-4897-9d78-2764ea5aecd2"))
/* dual interface */ _IAgVeTrajectoryAttitudeStandard;
enum AgEAttitudeStandardType;
struct __declspec(uuid("7f819559-f815-4f8c-bfe8-fa9848b564f5"))
/* interface */ IAgVeAttitudeStandard;
struct __declspec(uuid("d49e2f30-7b7f-489d-b17e-949e79ac9d97"))
/* interface */ IAgVeTrajectoryAttitudeStandard;
struct /* coclass */ AgVeOrbitAttitudeStandard;
struct __declspec(uuid("b6865dff-51ea-4a88-ab99-a2c85d90b413"))
/* dual interface */ _IAgVeOrbitAttitudeStandard;
struct __declspec(uuid("fc83c6b7-0b9a-4fd6-98ef-8582f4ae0f52"))
/* interface */ IAgVeOrbitAttitudeStandard;
struct /* coclass */ AgVeRouteAttitudeStandard;
struct __declspec(uuid("22673c34-177d-4dbb-b974-52b08c49b904"))
/* dual interface */ _IAgVeRouteAttitudeStandard;
struct __declspec(uuid("1a4696a0-b711-47f3-ac12-1385edeb1d8f"))
/* interface */ IAgVeRouteAttitudeStandard;
struct /* coclass */ AgVeGfxLine;
struct __declspec(uuid("ccb3b4fe-26cf-4f47-9be6-df3221622b23"))
/* dual interface */ _IAgVeGfxLine;
struct __declspec(uuid("d668bdde-339e-4c43-afba-9a53abdc1c3d"))
/* interface */ IAgVeGfxLine;
struct /* coclass */ AgVeGfxIntervalsCollection;
struct __declspec(uuid("cba0d720-ea68-41db-97a1-0506c88519f8"))
/* dual interface */ IAgVeGfxIntervalsCollection;
struct __declspec(uuid("7886d953-223a-4186-8aee-f4ee950a31de"))
/* interface */ IAgVeGfxInterval;
struct __declspec(uuid("16f58aab-fa7a-4b10-b068-78087c609f73"))
/* interface */ IAgVeGfxAttributesBasic;
struct /* coclass */ AgVeGfxAttributesAccess;
struct __declspec(uuid("09ba87f6-ed6b-4fe2-afb9-5a3ec5115e43"))
/* dual interface */ _IAgVeGfxAttributesAccess;
struct __declspec(uuid("1174f603-620c-45ae-bfb8-783eb533a1ed"))
/* interface */ IAgVeGfxAttributesAccess;
struct /* coclass */ AgVeGfxAttributesCustom;
struct __declspec(uuid("db069e03-76a8-4b81-810a-d6afdf3103d0"))
/* dual interface */ _IAgVeGfxAttributesCustom;
struct __declspec(uuid("4809cd73-ed66-49a0-a9b8-9f0b5b62a946"))
/* interface */ IAgVeGfxAttributesCustom;
struct /* coclass */ AgVeGfxAttributesRealtime;
struct __declspec(uuid("34559303-7460-47aa-bcbf-a1ada51bd83e"))
/* dual interface */ _IAgVeGfxAttributesRealtime;
struct __declspec(uuid("50c2fa32-211e-46ee-a031-5ff477fd7dec"))
/* interface */ IAgVeGfxAttributesRealtime;
struct /* coclass */ AgVeGfxLightingElement;
struct __declspec(uuid("aab22d40-8c26-4e67-bf6b-36fa785e9b93"))
/* dual interface */ _IAgVeGfxLightingElement;
struct /* coclass */ AgVeGfxLighting;
struct __declspec(uuid("e96613f5-b9cd-4d76-8212-0595eef70efc"))
/* dual interface */ _IAgVeGfxLighting;
struct /* coclass */ AgVeGfxElevationGroundElevation;
struct __declspec(uuid("6597de69-fde0-4c02-b508-db544603c659"))
/* dual interface */ _IAgVeGfxElevationGroundElevation;
struct __declspec(uuid("124ed0e1-627b-49f8-9868-6b9ad9e21ca0"))
/* interface */ IAgVeGfxElevationGroundElevation;
struct /* coclass */ AgVeGfxElevationSwathHalfWidth;
struct __declspec(uuid("f7f53177-763f-4fd5-bff6-196f4b744952"))
/* dual interface */ _IAgVeGfxElevationSwathHalfWidth;
struct __declspec(uuid("2dad0db2-2ff6-479d-bd9a-306bfd5c3623"))
/* interface */ IAgVeGfxElevationSwathHalfWidth;
struct /* coclass */ AgVeGfxElevationVehicleHalfAngle;
struct __declspec(uuid("f6f2f6c1-fc13-4e40-ad3e-defec710a4d9"))
/* dual interface */ _IAgVeGfxElevationVehicleHalfAngle;
struct __declspec(uuid("a2d0f0b5-72d4-48d7-8f38-2aff318ae709"))
/* interface */ IAgVeGfxElevationVehicleHalfAngle;
struct /* coclass */ AgVeGfxSwath;
struct __declspec(uuid("2a6ac502-b515-4e31-8d88-ff4f81fb7881"))
/* dual interface */ _IAgVeGfxSwath;
struct /* coclass */ AgVeGfxLeadDataFraction;
struct __declspec(uuid("70efa0c3-74fc-49f2-a6bd-d719ec5cce7b"))
/* dual interface */ _IAgVeGfxLeadDataFraction;
struct __declspec(uuid("37e569f4-2518-4fab-8566-21aeb35b9e0b"))
/* interface */ IAgVeGfxLeadDataFraction;
struct /* coclass */ AgVeGfxLeadDataTime;
struct __declspec(uuid("79de8f7a-123a-46ca-8d30-3fb9b25270ac"))
/* dual interface */ _IAgVeGfxLeadDataTime;
struct __declspec(uuid("05081669-2a8c-408e-9bce-a2309da638f0"))
/* interface */ IAgVeGfxLeadDataTime;
struct /* coclass */ AgVeGfxTrailDataFraction;
struct __declspec(uuid("5a0d93a7-2723-44ed-9723-25fe20bdeafb"))
/* dual interface */ _IAgVeGfxTrailDataFraction;
struct __declspec(uuid("c470ff3b-1e89-4117-8349-2947870b4e03"))
/* interface */ IAgVeGfxTrailDataFraction;
struct /* coclass */ AgVeGfxTrailDataTime;
struct __declspec(uuid("3d208d44-b936-4f43-9639-2b0a7b2ab557"))
/* dual interface */ _IAgVeGfxTrailDataTime;
struct __declspec(uuid("02b1a355-50d7-4cf7-9d26-ccae40e3f085"))
/* interface */ IAgVeGfxTrailDataTime;
struct /* coclass */ AgVeGfxRoutePassData;
struct __declspec(uuid("00f1d3ba-8350-41dd-a0c1-67f93573ae0f"))
/* dual interface */ _IAgVeGfxRoutePassData;
struct __declspec(uuid("de4f2900-66e5-4cda-b083-13027f6e4e02"))
/* interface */ IAgVeGfxRoutePassData;
struct /* coclass */ AgVeGfxLeadTrailData;
struct __declspec(uuid("5714a85f-1f40-464b-8a1e-63611f3bbc6b"))
/* dual interface */ _IAgVeGfxLeadTrailData;
struct /* coclass */ AgVeGfxOrbitPassData;
struct __declspec(uuid("15ee84c7-f033-4b2b-9f02-08f81a8516cc"))
/* dual interface */ _IAgVeGfxOrbitPassData;
struct /* coclass */ AgVeGfxTrajectoryPassData;
struct __declspec(uuid("b8a8f620-1ef5-40fb-be57-ddd85a6217c9"))
/* dual interface */ _IAgVeGfxTrajectoryPassData;
struct __declspec(uuid("e593cc12-f47c-42d5-97ef-c082428fb7b3"))
/* interface */ IAgVeGfxTrajectoryPassData;
struct /* coclass */ AgVeGfxTrajectoryResolution;
struct __declspec(uuid("8c568179-190a-4a48-ac51-c059ac9d25c3"))
/* dual interface */ _IAgVeGfxTrajectoryResolution;
struct __declspec(uuid("e61be5ce-af5a-48b4-b660-f6735d353523"))
/* interface */ IAgVeGfxTrajectoryResolution;
struct /* coclass */ AgVeGfxGroundEllipsesCollection;
struct /* coclass */ AgVeGfxTimeEventTypeLine;
struct __declspec(uuid("cc915bdc-0a06-49d5-899e-48cf04bdcd35"))
/* dual interface */ _IAgVeGfxTimeEventTypeLine;
enum AgEVeGfxOffset;
struct __declspec(uuid("dfe5bfe5-695c-4419-a6b5-790fceab9551"))
/* interface */ IAgVeGfxTimeEventTypeLine;
struct /* coclass */ AgVeGfxTimeEventTypeMarker;
struct __declspec(uuid("54cd4642-7c6c-49ba-b66e-c3a6bbce0b41"))
/* dual interface */ _IAgVeGfxTimeEventTypeMarker;
struct __declspec(uuid("c6f1fd8d-ad5b-4d95-9f95-ba5927dfb2c0"))
/* interface */ IAgVeGfxTimeEventTypeMarker;
struct /* coclass */ AgVeGfxTimeEventTypeText;
struct __declspec(uuid("f3f5459e-b122-4223-8b97-3ca1c6d796e6"))
/* dual interface */ _IAgVeGfxTimeEventTypeText;
struct __declspec(uuid("06cb253e-cb7d-44da-94fc-8d4eaa847554"))
/* interface */ IAgVeGfxTimeEventTypeText;
struct /* coclass */ AgVeGfxTimeEventsElement;
struct __declspec(uuid("39dc01b7-3243-4a4a-9a12-6c60a441e3a3"))
/* dual interface */ _IAgVeGfxTimeEventsElement;
struct /* coclass */ AgVeGfxTimeEventsCollection;
struct /* coclass */ AgVeGfxPassShowPasses;
struct __declspec(uuid("19621556-d15d-4ed5-a294-6b48b9a2bb1a"))
/* dual interface */ _IAgVeGfxPassShowPasses;
struct __declspec(uuid("12a5ceec-ef30-4ed4-aa28-c38bba83bfa1"))
/* interface */ IAgVeGfxPassShowPasses;
struct /* coclass */ AgVeGfxPasses;
struct __declspec(uuid("e3edac55-0eb5-43a6-94c6-b583f316f8b1"))
/* dual interface */ _IAgVeGfxPasses;
struct /* coclass */ AgVeGfxSAA;
struct __declspec(uuid("b916a134-d36f-44e3-8fac-a4f46c29df24"))
/* dual interface */ _IAgVeGfxSAA;
struct /* coclass */ AgVeGfxElevationsElement;
struct __declspec(uuid("bff6d6ed-6ed5-40a3-8a9b-6cf0ba905c7a"))
/* dual interface */ _IAgVeGfxElevationsElement;
struct /* coclass */ AgVeGfxElevationsCollection;
struct /* coclass */ AgVeGfxElevContours;
struct __declspec(uuid("fb441fc5-ff1a-4746-ab2e-46969e60b8df"))
/* dual interface */ _IAgVeGfxElevContours;
struct /* coclass */ AgVeGfxRouteResolution;
struct __declspec(uuid("ad68fdec-b250-4d2f-a242-571e2631901d"))
/* dual interface */ _IAgVeGfxRouteResolution;
struct __declspec(uuid("7108a5d8-8e50-4457-ab2f-edc54fbf4b50"))
/* interface */ IAgVeGfxRouteResolution;
struct /* coclass */ AgVeGfxWaypointMarkersElement;
struct __declspec(uuid("b5857ec7-24b0-4d57-92d0-eb69e8a85d02"))
/* dual interface */ _IAgVeGfxWaypointMarkersElement;
struct __declspec(uuid("a229a60c-d631-4ad4-872e-58a4782d7ecd"))
/* interface */ IAgVeGfxWaypointMarkersElement;
struct /* coclass */ AgVeGfxWaypointMarkersCollection;
struct __declspec(uuid("85f8c50d-bc87-4b3a-8157-9118843331dd"))
/* dual interface */ IAgVeGfxWaypointMarkersCollection;
struct /* coclass */ AgVeGfxWaypointMarker;
struct __declspec(uuid("2fb8e0f9-4b4d-4942-933e-3fc363e1b259"))
/* dual interface */ _IAgVeGfxWaypointMarker;
struct __declspec(uuid("d154d018-0f76-42e4-a956-f5fe620658e9"))
/* interface */ IAgVeGfxWaypointMarker;
struct /* coclass */ AgVeGfxInterval;
struct __declspec(uuid("2d0d01f1-2658-408b-af2e-1f469f2f9bfb"))
/* dual interface */ _IAgVeGfxInterval;
struct /* coclass */ AgVeGfxPassResolution;
struct __declspec(uuid("57ae70ff-72ad-4b0e-9b04-bfe6e4b032b6"))
/* dual interface */ _IAgVeGfxPassResolution;
struct /* coclass */ AgVeGfxGroundEllipsesElement;
struct __declspec(uuid("7dbc86a7-e30a-434a-8b46-3d6f4d7f5c0b"))
/* dual interface */ _IAgVeGfxGroundEllipsesElement;
struct /* coclass */ AgVeGfxAttributesRoute;
struct __declspec(uuid("960562ea-b483-4bbc-8cb0-61e96d203e56"))
/* dual interface */ _IAgVeGfxAttributesRoute;
struct __declspec(uuid("2443cef4-f4d5-4c1e-b889-b5637a63a42f"))
/* interface */ IAgVeGfxAttributesRoute;
struct /* coclass */ AgVeGfxAttributesTrajectory;
struct __declspec(uuid("4a3923c3-2932-43fc-86e0-433bc24f5e64"))
/* dual interface */ _IAgVeGfxAttributesTrajectory;
struct __declspec(uuid("1980c727-9856-4940-97d0-751f809f986c"))
/* interface */ IAgVeGfxAttributesTrajectory;
struct /* coclass */ AgVeGfxAttributesOrbit;
struct __declspec(uuid("5f20a919-05c2-4bf2-a63a-37b80f29abc7"))
/* dual interface */ _IAgVeGfxAttributesOrbit;
struct __declspec(uuid("3eb64a12-3ffe-4602-99f6-56c6d10cfeae"))
/* interface */ IAgVeGfxAttributesOrbit;
struct /* coclass */ AgVOPointableElementsElement;
struct __declspec(uuid("67d75dc6-7730-447d-a7e2-cd6384b1d91e"))
/* dual interface */ _IAgVOPointableElementsElement;
struct /* coclass */ AgVOPointableElementsCollection;
struct /* coclass */ AgVeVOSystemsElement;
struct __declspec(uuid("f7e6ab74-55e3-4e2c-b4c1-2c2df01d0c45"))
/* dual interface */ _IAgVeVOSystemsElement;
struct /* coclass */ AgVeVOSystemsSpecialElement;
struct __declspec(uuid("d073d53c-2c73-46e8-b121-ca1b2018f8b4"))
/* dual interface */ _IAgVeVOSystemsSpecialElement;
struct /* coclass */ AgVeVOSystemsCollection;
struct /* coclass */ AgVeVOControlBox;
struct __declspec(uuid("f580bd8c-b9ef-4410-b8b1-2ce7c1506b2e"))
/* dual interface */ _IAgVeVOControlBox;
struct /* coclass */ AgVeVOBearingBox;
struct __declspec(uuid("7bd6e1c9-2ff2-4c89-833e-8620e7396613"))
/* dual interface */ _IAgVeVOBearingBox;
struct /* coclass */ AgVeVOBearingEllipse;
struct __declspec(uuid("dd0306ac-4995-4a91-a814-9a33e177b5a7"))
/* dual interface */ _IAgVeVOBearingEllipse;
struct /* coclass */ AgVeVOLineOfBearing;
struct __declspec(uuid("bc476e13-8ad2-44f3-b6ec-9502aa22a61f"))
/* dual interface */ _IAgVeVOLineOfBearing;
struct /* coclass */ AgVeVOGeoBox;
struct __declspec(uuid("61a302ce-9bd4-4497-89a6-88df7203110d"))
/* dual interface */ _IAgVeVOGeoBox;
struct /* coclass */ AgVeVORouteProximity;
struct __declspec(uuid("a5287f12-da93-4a56-883b-d3785b09d42c"))
/* dual interface */ _IAgVeVORouteProximity;
struct __declspec(uuid("654ee75b-f5c4-4717-b181-7ed012f35dce"))
/* interface */ IAgVeVORouteProximity;
struct /* coclass */ AgVeVOOrbitProximity;
struct __declspec(uuid("f711f107-abff-4a64-be05-d493034aa750"))
/* dual interface */ _IAgVeVOOrbitProximity;
struct /* coclass */ AgVeVOElevContours;
struct __declspec(uuid("0a9ad7cb-f889-4ddc-bd0a-a50109bcff96"))
/* dual interface */ _IAgVeVOElevContours;
struct /* coclass */ AgVeVOSAA;
struct __declspec(uuid("66c57e5b-6470-47a5-a5b4-c6dac9726a9b"))
/* dual interface */ _IAgVeVOSAA;
struct /* coclass */ AgVeVOSigmaScaleProbability;
struct __declspec(uuid("bd387ef3-d992-43df-8024-7d8becb8601b"))
/* dual interface */ _IAgVeVOSigmaScaleProbability;
struct __declspec(uuid("28f9219a-a414-4b43-938e-e742572b4043"))
/* interface */ IAgVeVOSigmaScaleProbability;
struct /* coclass */ AgVeVOSigmaScaleScale;
struct __declspec(uuid("ce406066-d20f-4480-8d63-96932f378d1c"))
/* dual interface */ _IAgVeVOSigmaScaleScale;
struct __declspec(uuid("94877b45-cb73-471d-aa1c-04f594f94b6c"))
/* interface */ IAgVeVOSigmaScaleScale;
struct /* coclass */ AgVeVODefaultAttributes;
struct __declspec(uuid("1bade691-fe64-47aa-b95f-c89a74fd8565"))
/* dual interface */ _IAgVeVODefaultAttributes;
struct __declspec(uuid("a045b122-d0fc-47a8-98c9-bbad264b2a39"))
/* interface */ IAgVeVODefaultAttributes;
struct /* coclass */ AgVeVOIntervalsElement;
struct __declspec(uuid("a4de3e44-5cde-4022-b724-75b39b1fba99"))
/* dual interface */ _IAgVeVOIntervalsElement;
struct __declspec(uuid("825e2f1e-2df1-426d-9c56-a20a2ede3be4"))
/* interface */ IAgVeVOIntervalsElement;
struct /* coclass */ AgVeVOIntervalsCollection;
struct __declspec(uuid("a9dbed44-4a7a-4f26-9064-c88857b7d9e7"))
/* dual interface */ IAgVeVOIntervalsCollection;
struct /* coclass */ AgVeVOAttributesBasic;
struct __declspec(uuid("f027c43f-ea60-441a-8c5c-7f5a563c4969"))
/* dual interface */ _IAgVeVOAttributesBasic;
struct __declspec(uuid("0a073acb-2aa8-4237-ac40-dad6ffee88f2"))
/* interface */ IAgVeVOAttributesBasic;
struct /* coclass */ AgVeVOAttributesIntervals;
struct __declspec(uuid("ec093d20-1f45-4812-8a18-9e94f06fa181"))
/* dual interface */ _IAgVeVOAttributesIntervals;
struct __declspec(uuid("b613cdd4-ab9c-4962-bce8-2abef18248c9"))
/* interface */ IAgVeVOAttributesIntervals;
struct /* coclass */ AgVeVOSize;
struct __declspec(uuid("ebb70ecd-0bb5-4e3c-8968-d8a34220dc6a"))
/* dual interface */ _IAgVeVOSize;
struct /* coclass */ AgVeVOCovariancePointingContour;
struct __declspec(uuid("6f0f9512-a315-4d51-bf52-ac536055f8cb"))
/* dual interface */ _IAgVeVOCovariancePointingContour;
struct /* coclass */ AgVeVODataFraction;
struct __declspec(uuid("43d264e9-26d3-4db6-90e0-dce80e9f2801"))
/* dual interface */ _IAgVeVODataFraction;
struct __declspec(uuid("d2af3e25-9a0e-476e-9f05-e8e0c9d7de29"))
/* interface */ IAgVeVODataFraction;
struct /* coclass */ AgVeVODataTime;
struct __declspec(uuid("73f2ce05-3589-4340-841d-c51f51cd7959"))
/* dual interface */ _IAgVeVODataTime;
struct __declspec(uuid("f95bf531-8e3d-404a-af6b-925dfc8795d6"))
/* interface */ IAgVeVODataTime;
struct /* coclass */ AgVeVOOrbitPassData;
struct __declspec(uuid("3a3d9ad8-5124-4b36-9912-7abc04bb6cc6"))
/* dual interface */ _IAgVeVOOrbitPassData;
struct /* coclass */ AgVeVOOrbitTrackData;
struct __declspec(uuid("10533def-97a7-44f1-9f06-dca2a537f7ea"))
/* dual interface */ _IAgVeVOOrbitTrackData;
struct /* coclass */ AgVeVOTickDataLine;
struct __declspec(uuid("9ed132d8-b243-4501-b00b-9a3a554bcb45"))
/* dual interface */ _IAgVeVOTickDataLine;
struct __declspec(uuid("532ed1a7-7f22-4797-b4b5-76b4ded15a3c"))
/* interface */ IAgVeVOTickDataLine;
struct /* coclass */ AgVeVOTickDataPoint;
struct __declspec(uuid("c0880d89-6283-4bc5-872e-bd11ffb95e61"))
/* dual interface */ _IAgVeVOTickDataPoint;
struct __declspec(uuid("6da9f471-71f6-4b75-93d6-18682276ac06"))
/* interface */ IAgVeVOTickDataPoint;
struct /* coclass */ AgVeVOOrbitTickMarks;
struct __declspec(uuid("64e07dab-d1a4-44c4-b17f-63a966f48f5f"))
/* dual interface */ _IAgVeVOOrbitTickMarks;
struct /* coclass */ AgVeVOPass;
struct __declspec(uuid("1cde745f-2372-4592-9b0a-dbdb509cf7bd"))
/* dual interface */ _IAgVeVOPass;
struct /* coclass */ AgVeVOCovariance;
struct __declspec(uuid("25c7df69-ea21-454d-9e59-edbf720d8aca"))
/* dual interface */ _IAgVeVOCovariance;
struct /* coclass */ AgVeVOTrajectoryProximity;
struct __declspec(uuid("2585071e-4535-4990-ae69-ac5cd4e7ddeb"))
/* dual interface */ _IAgVeVOTrajectoryProximity;
struct __declspec(uuid("7ddac3f5-9cb8-499b-9e8f-9e3762acd4a6"))
/* interface */ IAgVeVOTrajectoryProximity;
struct /* coclass */ AgVeVOTrajectory;
struct __declspec(uuid("66b406ff-7650-4cd4-8d57-f0c7eddacc17"))
/* dual interface */ _IAgVeVOTrajectory;
struct __declspec(uuid("a95dc662-5c05-43ac-a109-feaa93224fea"))
/* interface */ IAgVeVOTrajectoryTrackData;
struct __declspec(uuid("315a033c-9d5b-40e0-8e7a-523a27c21dc8"))
/* interface */ IAgVeVOTrajectoryPassData;
struct __declspec(uuid("763d6a4d-fd39-4241-8387-22df8b330c23"))
/* interface */ IAgVeVOTrajectoryTickMarks;
struct __declspec(uuid("763b30cd-11a8-4027-a949-dc583d58f04b"))
/* interface */ IAgVeVOTrajectory;
struct /* coclass */ AgVeVOTrajectoryTrackData;
struct __declspec(uuid("6b2707f0-bfa4-45f6-83cb-7d0f6a7a6b0c"))
/* dual interface */ _IAgVeVOTrajectoryTrackData;
struct /* coclass */ AgVeVOTrajectoryPassData;
struct __declspec(uuid("86ead523-ecd1-432f-a3a4-0e3299b1b601"))
/* dual interface */ _IAgVeVOTrajectoryPassData;
struct /* coclass */ AgVeVOLeadTrailData;
struct __declspec(uuid("afacca9f-2662-45dd-81fd-4cd83d6a5c84"))
/* dual interface */ _IAgVeVOLeadTrailData;
struct /* coclass */ AgVeVOTrajectoryTickMarks;
struct __declspec(uuid("40bd3e1d-f6c9-414c-90b9-2e22f7091f79"))
/* dual interface */ _IAgVeVOTrajectoryTickMarks;
struct /* coclass */ AgVeVOPathTickMarks;
struct __declspec(uuid("1feef209-0ed1-4baa-b85e-91b6941f04f6"))
/* dual interface */ _IAgVeVOPathTickMarks;
struct /* coclass */ AgVeVOWaypointMarkersElement;
struct __declspec(uuid("86e85c1a-fc27-4a5c-ad95-e0e4a05442d1"))
/* dual interface */ _IAgVeVOWaypointMarkersElement;
enum AgERouteVOMarkerType;
struct __declspec(uuid("ba6b5c10-2f7d-4304-b012-8133bc611b3e"))
/* interface */ IAgVeVOWaypointMarkersElement;
struct /* coclass */ AgVeVOWaypointMarkersCollection;
struct __declspec(uuid("d976a7a7-ca48-4b4e-a2da-d7b39536047c"))
/* dual interface */ IAgVeVOWaypointMarkersCollection;
struct /* coclass */ AgVeVORoute;
struct __declspec(uuid("101d06c3-d284-4faf-92c0-dec35a517665"))
/* dual interface */ _IAgVeVORoute;
struct __declspec(uuid("ca90ee32-03aa-49d5-981c-a290235dd039"))
/* interface */ IAgVeVORoute;
struct /* coclass */ AgVOModelPointing;
struct __declspec(uuid("ad4a6356-7af7-4deb-9831-030d8659a3fc"))
/* dual interface */ _IAgVOModelPointing;
struct /* coclass */ AgVOLabelSwapDistance;
struct __declspec(uuid("cb952592-0b0a-4f2b-94e9-7afbf86159d2"))
/* dual interface */ _IAgVOLabelSwapDistance;
struct /* coclass */ AgVeVODropLinePosItem;
struct __declspec(uuid("217061bd-eafc-424c-93ad-356a1f825a66"))
/* dual interface */ _IAgVeVODropLinePosItem;
struct /* coclass */ AgVeVODropLinePosItemCollection;
struct /* coclass */ AgVeVODropLinePathItem;
struct __declspec(uuid("68e0e290-0d28-4a76-9376-5a675e4f5019"))
/* dual interface */ _IAgVeVODropLinePathItem;
struct /* coclass */ AgVeVODropLinePathItemCollection;
struct /* coclass */ AgVeVOOrbitDropLines;
struct __declspec(uuid("d6ce9486-cdcf-469d-b669-db4ee8e29d51"))
/* dual interface */ _IAgVeVOOrbitDropLines;
struct /* coclass */ AgVeVORouteDropLines;
struct __declspec(uuid("303e60e1-5452-43ab-b789-d1f589b0956c"))
/* dual interface */ _IAgVeVORouteDropLines;
struct __declspec(uuid("d9e31106-9825-4068-87d5-cd4acf8c5ee6"))
/* interface */ IAgVeVORouteDropLines;
struct /* coclass */ AgVeVOTrajectoryDropLines;
struct __declspec(uuid("d44bff82-8915-47b1-bb1e-4d43dc075a3a"))
/* dual interface */ _IAgVeVOTrajectoryDropLines;
struct __declspec(uuid("ba371c59-b933-43ae-b3f8-bd945b90bfdf"))
/* interface */ IAgVeVOTrajectoryDropLines;
struct /* coclass */ AgVeTrajectoryVOModel;
struct __declspec(uuid("accd879b-01f3-4fd8-9ecf-01b2bcfcaa25"))
/* dual interface */ _IAgVeTrajectoryVOModel;
struct __declspec(uuid("f4578160-45ca-4401-ab63-19b047b715c3"))
/* interface */ IAgVeTrajectoryVOModel;
struct /* coclass */ AgVeRouteVOModel;
struct __declspec(uuid("0d911d18-138f-4f61-b46d-d86bf5b0b1d5"))
/* dual interface */ _IAgVeRouteVOModel;
struct __declspec(uuid("56345edb-1a42-4994-b86a-f6802f531bf7"))
/* interface */ IAgVeRouteVOModel;
struct /* coclass */ AgVeVOBPlaneTemplateDisplayElement;
struct __declspec(uuid("ccf67c79-b73a-4e28-9640-29cf1ae80e66"))
/* dual interface */ _IAgVeVOBPlaneTemplateDisplayElement;
struct /* coclass */ AgVeVOBPlaneTemplateDisplayCollection;
struct /* coclass */ AgVeVOBPlaneTemplate;
struct __declspec(uuid("226f8e63-c3ca-423a-b718-f8c6c2662ef4"))
/* dual interface */ _IAgVeVOBPlaneTemplate;
struct /* coclass */ AgVeVOBPlaneTemplatesCollection;
struct /* coclass */ AgVeVOBPlaneEvent;
struct __declspec(uuid("8a6f0f67-b6a9-47dc-90fa-cb86ceaf255a"))
/* dual interface */ _IAgVeVOBPlaneEvent;
struct /* coclass */ AgVeVOBPlanePoint;
struct __declspec(uuid("1463b899-7366-4845-a686-144545692e4d"))
/* dual interface */ _IAgVeVOBPlanePoint;
struct /* coclass */ AgVeVOBPlaneTargetPointPositionCartesian;
struct __declspec(uuid("3ad07070-b8ca-4edc-9df3-471ee96f54d3"))
/* dual interface */ _IAgVeVOBPlaneTargetPointPositionCartesian;
struct __declspec(uuid("943659d7-1c86-4645-af76-4bc1d6376036"))
/* interface */ IAgVeVOBPlaneTargetPointPositionCartesian;
struct /* coclass */ AgVeVOBPlaneTargetPointPositionPolar;
struct __declspec(uuid("d658f9a9-674b-4f90-83d5-b6c880f37bbf"))
/* dual interface */ _IAgVeVOBPlaneTargetPointPositionPolar;
struct __declspec(uuid("a15274e6-e775-4150-8272-f40fcbb75d16"))
/* interface */ IAgVeVOBPlaneTargetPointPositionPolar;
struct /* coclass */ AgVeVOBPlaneTargetPoint;
struct __declspec(uuid("f933731e-ee25-4101-8d17-87cec99eda67"))
/* dual interface */ _IAgVeVOBPlaneTargetPoint;
struct /* coclass */ AgVeVOBPlaneInstance;
struct __declspec(uuid("040906ae-c858-4f1d-8535-a2e72bb725de"))
/* dual interface */ _IAgVeVOBPlaneInstance;
struct /* coclass */ AgVeVOBPlaneInstancesCollection;
struct /* coclass */ AgVeVOBPlanePointCollection;
struct /* coclass */ AgVeVOBPlanes;
struct __declspec(uuid("c402de11-df87-4b19-b323-5a3a6c976881"))
/* dual interface */ _IAgVeVOBPlanes;
struct /* coclass */ AgLaunchVehicle;
struct __declspec(uuid("5e4b6390-ad77-4e9d-ab30-c7646b43314f"))
/* dual interface */ _IAgLaunchVehicle;
struct __declspec(uuid("6b3bc28f-dfbf-4819-b879-ae71370346a0"))
/* interface */ IAgLvGraphics;
struct __declspec(uuid("fd219bdc-2f2d-49e6-a51b-da8c7db67fce"))
/* interface */ IAgLvVO;
struct __declspec(uuid("1f63cd9c-69bf-48a4-ac73-26b8d29cb15e"))
/* interface */ IAgLvExportTools;
struct __declspec(uuid("00b78a1a-506f-4915-8364-96935dada2ad"))
/* interface */ IAgLaunchVehicle;
struct /* coclass */ AgLvGraphics;
struct __declspec(uuid("b43ed712-ac12-4e3a-ba3e-82c18f7e8f2b"))
/* dual interface */ _IAgLvGraphics;
struct /* coclass */ AgLvVO;
struct __declspec(uuid("7096aedb-dd74-462e-ae15-cd79d19b8886"))
/* dual interface */ _IAgLvVO;
struct /* coclass */ AgGroundVehicle;
struct __declspec(uuid("36638b1a-97d3-4fff-acae-eb577e23547e"))
/* dual interface */ _IAgGroundVehicle;
struct __declspec(uuid("16fc038e-f0da-4a71-8603-9ccec7e4085b"))
/* interface */ IAgGvGraphics;
struct __declspec(uuid("eeff8bd1-f93d-4dec-86d6-bccd52cb7bb4"))
/* interface */ IAgGreatArcGraphics;
struct __declspec(uuid("41081ca6-e4f4-49eb-a435-0b3311fb6e73"))
/* interface */ IAgGvVO;
struct __declspec(uuid("191eabc9-5a4a-43df-8a72-f9b76ec8b423"))
/* interface */ IAgGreatArcVO;
struct __declspec(uuid("07d6ce34-851f-4fa1-a102-34924e378ad9"))
/* interface */ IAgGvExportTools;
struct __declspec(uuid("0b5ab294-682a-438a-8229-981c8518d5bd"))
/* interface */ IAgGroundVehicle;
struct __declspec(uuid("3055d65a-e378-463a-949e-cb2383279246"))
/* interface */ IAgGreatArcVehicle;
struct /* coclass */ AgGvGraphics;
struct __declspec(uuid("a2d5a811-d799-40b3-8329-58a1d0d92c12"))
/* dual interface */ _IAgGvGraphics;
struct /* coclass */ AgGvVO;
struct __declspec(uuid("68d7e90c-38ca-4367-8fa6-db8318af5717"))
/* dual interface */ _IAgGvVO;
struct /* coclass */ AgMissile;
struct __declspec(uuid("37c7375e-f63c-4fb1-839f-3b3169508692"))
/* dual interface */ _IAgMissile;
struct __declspec(uuid("d8ad9573-a523-428b-979c-ee7d2f48a67d"))
/* interface */ IAgMsGraphics;
struct __declspec(uuid("1c64c4b8-1e49-4b85-8d48-7434b4d3678d"))
/* interface */ IAgMsVO;
struct __declspec(uuid("812694fc-feb0-4499-be7d-38614ddcc1ca"))
/* interface */ IAgMsExportTools;
struct __declspec(uuid("ab1497c4-1b6f-4934-bb50-ffb9150af8c2"))
/* interface */ IAgMissile;
struct /* coclass */ AgMsGraphics;
struct __declspec(uuid("72c871b7-626a-4a24-81d9-c22fb98101f2"))
/* dual interface */ _IAgMsGraphics;
struct /* coclass */ AgMsVO;
struct __declspec(uuid("9fb5c04a-b0a0-4028-a372-3bac2a1a98e1"))
/* dual interface */ _IAgMsVO;
struct /* coclass */ AgAircraft;
struct __declspec(uuid("ddb83ff3-533b-4fa4-a4f0-47bd39542627"))
/* dual interface */ _IAgAircraft;
struct __declspec(uuid("1651076a-f474-42ae-a80e-4717b1e61aa4"))
/* interface */ IAgAcGraphics;
struct __declspec(uuid("da267f2e-b425-4c62-ac0a-223f6d67901f"))
/* interface */ IAgAcVO;
struct __declspec(uuid("89567918-5e70-4e30-861f-728589fa3f2b"))
/* interface */ IAgAcExportTools;
struct __declspec(uuid("caaad203-3678-4bac-a299-c295427c9a98"))
/* interface */ IAgAircraft;
struct /* coclass */ AgAcGraphics;
struct __declspec(uuid("6ce94e00-deb5-4df9-9374-575fccafa2e3"))
/* dual interface */ _IAgAcGraphics;
struct /* coclass */ AgAcVO;
struct __declspec(uuid("6c81d650-dc68-48bc-b956-febc1a54adf3"))
/* dual interface */ _IAgAcVO;
struct /* coclass */ AgShip;
struct __declspec(uuid("191e16e1-ba7c-49c4-973e-d073aa0e5014"))
/* dual interface */ _IAgShip;
struct __declspec(uuid("9de26f27-6d9b-4655-ac7b-e4e8b6bbbd79"))
/* interface */ IAgShGraphics;
struct __declspec(uuid("8cd27399-6fb9-421d-af50-623d726d1bd4"))
/* interface */ IAgShVO;
struct __declspec(uuid("70e2dc4f-09f1-4dc5-a827-719fa7259f09"))
/* interface */ IAgShExportTools;
struct __declspec(uuid("a855ba99-3e04-4310-b7a1-4018d407b870"))
/* interface */ IAgShip;
struct /* coclass */ AgShGraphics;
struct __declspec(uuid("27d9b125-dd59-4e0d-9865-5182f08ec786"))
/* dual interface */ _IAgShGraphics;
struct /* coclass */ AgShVO;
struct __declspec(uuid("aa7ed31a-a2c0-4b1c-8ddc-124e1c74db9c"))
/* dual interface */ _IAgShVO;
struct /* coclass */ AgMtoTrackPoint;
struct __declspec(uuid("7a19ad2d-f9aa-473c-830e-e35429b07b96"))
/* dual interface */ _IAgMtoTrackPoint;
struct __declspec(uuid("b118ad0e-a0ca-4b34-9e67-3bf0a340d838"))
/* interface */ IAgMtoTrackPoint;
struct /* coclass */ AgMtoTrackPointCollection;
struct __declspec(uuid("2a6833f3-27a9-46e5-a17d-b9435dd7b3a5"))
/* dual interface */ IAgMtoTrackPointCollection;
struct /* coclass */ AgMtoTrack;
struct __declspec(uuid("dbe4c885-947e-420d-ac6d-816542ea9631"))
/* dual interface */ _IAgMtoTrack;
struct __declspec(uuid("ec9d89cf-249b-4c3b-9ec5-d5d76ada77a5"))
/* interface */ IAgMtoTrack;
struct /* coclass */ AgMtoTrackCollection;
struct __declspec(uuid("7ab1ea72-418c-47c0-a9d7-c35ca232e45c"))
/* dual interface */ IAgMtoTrackCollection;
struct /* coclass */ AgMtoDefaultTrack;
struct __declspec(uuid("d9050b91-941f-49f5-a2c2-7e37e0b1c64c"))
/* dual interface */ _IAgMtoDefaultTrack;
struct __declspec(uuid("4adfa743-3377-47fb-a67e-6d7a805e015e"))
/* interface */ IAgMtoDefaultTrack;
struct /* coclass */ AgMtoGlobalTrackOptions;
struct __declspec(uuid("858e5d0b-bcca-451c-8da1-a01c0adc3b3b"))
/* dual interface */ _IAgMtoGlobalTrackOptions;
struct __declspec(uuid("c800c7eb-5866-49cb-b7d1-a3dbe1e6ab6a"))
/* interface */ IAgMtoGlobalTrackOptions;
struct /* coclass */ AgMto;
struct __declspec(uuid("b37af49f-fa76-4bb3-afcf-c7bac7fba628"))
/* dual interface */ _IAgMto;
struct __declspec(uuid("b13944e9-a5cb-4d6a-9a14-ec4faeea59be"))
/* interface */ IAgMtoGraphics;
struct __declspec(uuid("5adb2e98-3337-4c6f-9cfd-efd6056c3def"))
/* dual interface */ IAgMtoGfxTrackCollection;
struct __declspec(uuid("d3472cc2-d6e4-4ca9-b7ba-de26d08e7204"))
/* interface */ IAgMtoGfxTrack;
struct __declspec(uuid("ecff35da-293e-4581-b8ff-26e0e17816e9"))
/* interface */ IAgMtoGfxMarker;
struct __declspec(uuid("729ea6c9-4ad5-4c30-a490-71cc956fd4cb"))
/* interface */ IAgMtoGfxLine;
struct __declspec(uuid("c7255fc8-d634-4309-a2a7-ea76e2d45c04"))
/* interface */ IAgMtoGfxFadeTimes;
struct __declspec(uuid("84fc01eb-0f9e-407b-8739-395ec18d36de"))
/* interface */ IAgMtoGfxLeadTrailTimes;
struct __declspec(uuid("c9d2adde-d51a-423c-8941-6d86e793422a"))
/* interface */ IAgMtoDefaultGfxTrack;
struct __declspec(uuid("fe211b8f-20a9-46d7-bb9e-45957c741577"))
/* interface */ IAgMtoGfxGlobalTrackOptions;
struct __declspec(uuid("bb49c310-78ee-4440-9b01-fdf36bad1cd6"))
/* interface */ IAgMtoVO;
struct __declspec(uuid("6ca2610c-a0b5-49c0-8719-b26ddc844593"))
/* dual interface */ IAgMtoVOTrackCollection;
struct __declspec(uuid("68265a0e-991d-4d66-8022-28418509924d"))
/* interface */ IAgMtoVOTrack;
struct __declspec(uuid("4203caa6-012b-4232-b603-383933e9fe4b"))
/* interface */ IAgMtoVOMarker;
struct __declspec(uuid("4eb9ef07-280f-4857-bf8d-5956ee3d8c7f"))
/* interface */ IAgMtoVOPoint;
struct __declspec(uuid("3f60ad45-9306-43b2-88fd-6e8603a01ed3"))
/* interface */ IAgMtoVOModel;
struct __declspec(uuid("7c8e14e4-0499-4daa-8e6c-d458c340223c"))
/* interface */ IAgMtoVOSwapDistances;
struct __declspec(uuid("be2f04ce-8c88-48ec-ad94-d13c5c4d1144"))
/* interface */ IAgMtoVODropLines;
struct __declspec(uuid("61aa7092-51c9-406d-bf1f-2e46664a4676"))
/* interface */ IAgMtoDefaultVOTrack;
struct __declspec(uuid("3f37bf9d-19ee-4d47-9e8a-f988e4967385"))
/* interface */ IAgMtoVOGlobalTrackOptions;
struct __declspec(uuid("3da02586-63d0-4f27-91f3-1c577ace22b3"))
/* interface */ IAgMtoAnalysis;
struct __declspec(uuid("e33b6720-53d7-4291-90bf-82657c8db4cf"))
/* interface */ IAgMtoAnalysisPosition;
struct __declspec(uuid("9e955910-a010-4391-a75b-5a982b7b1b2c"))
/* interface */ IAgMtoAnalysisRange;
enum AgEMtoObjectInterval;
enum AgEMtoRangeMode;
enum AgEMtoEntirety;
enum AgEMtoTrackEval;
struct __declspec(uuid("ce8bee27-9a07-458a-9047-773e6fd43209"))
/* interface */ IAgMtoAnalysisFieldOfView;
enum AgEMtoVisibilityMode;
struct __declspec(uuid("2530b726-5c3f-4051-98df-87d89e2461c2"))
/* interface */ IAgMtoAnalysisVisibility;
struct __declspec(uuid("e8922ccb-ecb9-4451-ac85-1bc9f21c15fd"))
/* interface */ IAgMto;
struct /* coclass */ AgMtoGfxMarker;
struct __declspec(uuid("9bfcac44-14d3-460c-8133-d7d13530dfef"))
/* dual interface */ _IAgMtoGfxMarker;
struct /* coclass */ AgMtoGfxLine;
struct __declspec(uuid("28f04d3c-035b-4c9f-a2da-28126ad5218b"))
/* dual interface */ _IAgMtoGfxLine;
struct /* coclass */ AgMtoGfxFadeTimes;
struct __declspec(uuid("b0b399bf-f777-4947-adc3-81ef2a1bbfeb"))
/* dual interface */ _IAgMtoGfxFadeTimes;
struct /* coclass */ AgMtoGfxLeadTrailTimes;
struct __declspec(uuid("aa14691f-8bff-4eef-b7ea-04b2774da5eb"))
/* dual interface */ _IAgMtoGfxLeadTrailTimes;
struct /* coclass */ AgMtoGfxTrack;
struct __declspec(uuid("9c97f102-1c88-4581-ad69-73507b420f21"))
/* dual interface */ _IAgMtoGfxTrack;
struct /* coclass */ AgMtoGfxTrackCollection;
struct /* coclass */ AgMtoDefaultGfxTrack;
struct __declspec(uuid("491f3a4a-4f9c-4b05-b73c-07fcacd8e1de"))
/* dual interface */ _IAgMtoDefaultGfxTrack;
struct /* coclass */ AgMtoGfxGlobalTrackOptions;
struct __declspec(uuid("26844fd7-8104-4513-9121-6edcdaef8213"))
/* dual interface */ _IAgMtoGfxGlobalTrackOptions;
struct /* coclass */ AgMtoGraphics;
struct __declspec(uuid("15d768f3-1f00-4e09-8c0e-2dbc5bb33473"))
/* dual interface */ _IAgMtoGraphics;
struct /* coclass */ AgMtoVOMarker;
struct __declspec(uuid("485faf01-713a-4bf0-ab6b-c43218adde5d"))
/* dual interface */ _IAgMtoVOMarker;
struct /* coclass */ AgMtoVOPoint;
struct __declspec(uuid("0c0be173-f385-47bd-af11-678ae6d3e54e"))
/* dual interface */ _IAgMtoVOPoint;
struct /* coclass */ AgMtoVOModel;
struct __declspec(uuid("b0d2a3e7-a95b-496c-b443-05a031494556"))
/* dual interface */ _IAgMtoVOModel;
struct /* coclass */ AgMtoVOSwapDistances;
struct __declspec(uuid("de98f942-158f-4d27-b14d-8f0cb4b94673"))
/* dual interface */ _IAgMtoVOSwapDistances;
struct /* coclass */ AgMtoVODropLines;
struct __declspec(uuid("559bddd2-3e67-46b8-896c-8240fbbe4694"))
/* dual interface */ _IAgMtoVODropLines;
struct /* coclass */ AgMtoVOTrack;
struct __declspec(uuid("4e6174ed-0f68-4cd9-9d68-ed6f54c4eb92"))
/* dual interface */ _IAgMtoVOTrack;
struct /* coclass */ AgMtoVOTrackCollection;
struct /* coclass */ AgMtoDefaultVOTrack;
struct __declspec(uuid("7dce94c2-b54e-493f-89ee-3c803d99485f"))
/* dual interface */ _IAgMtoDefaultVOTrack;
struct /* coclass */ AgMtoVOGlobalTrackOptions;
struct __declspec(uuid("7cb1a6f2-1736-4471-bf3e-d094665be2b6"))
/* dual interface */ _IAgMtoVOGlobalTrackOptions;
struct /* coclass */ AgMtoVO;
struct __declspec(uuid("6b6a8998-c669-4afe-9d67-f1c34f066382"))
/* dual interface */ _IAgMtoVO;
struct /* coclass */ AgLLAGeocentric;
struct __declspec(uuid("2a65a82e-f30b-4c8e-ba18-e6c6aadaaaff"))
/* dual interface */ _IAgLLAGeocentric;
struct __declspec(uuid("43ac4fe6-c8f7-482f-a1b9-9326bf3aa97b"))
/* interface */ IAgLLAGeocentric;
struct /* coclass */ AgLLAGeodetic;
struct __declspec(uuid("67c36044-e9c9-4a3f-84b1-9aacb7d6f8e0"))
/* dual interface */ _IAgLLAGeodetic;
struct __declspec(uuid("f29e9d78-1e82-429e-a1be-a087f804d421"))
/* interface */ IAgLLAGeodetic;
struct /* coclass */ AgLtPoint;
struct __declspec(uuid("221dc5ef-651b-4737-9d08-1f188931d41f"))
/* dual interface */ _IAgLtPoint;
struct __declspec(uuid("a028ea94-fcfb-44f4-aad0-df0dfb3fd5d4"))
/* interface */ IAgLtPoint;
struct /* coclass */ AgLtPointCollection;
struct __declspec(uuid("46a41db5-e117-4b9f-9ab3-f5263fea9155"))
/* dual interface */ IAgLtPointCollection;
struct /* coclass */ AgLineTarget;
struct __declspec(uuid("329bdbac-0f0a-48a5-ba25-92c2d9dd660a"))
/* dual interface */ _IAgLineTarget;
struct __declspec(uuid("bb00f3a3-20e5-4d7e-aaa2-564cd820143a"))
/* interface */ IAgLtGraphics;
struct __declspec(uuid("7275941e-fcc3-4005-a5bd-e15447930ca6"))
/* interface */ IAgLtVO;
struct __declspec(uuid("d4f5bae3-01c5-4288-9c61-b1f3328edf08"))
/* interface */ IAgLineTarget;
struct /* coclass */ AgLtGraphics;
struct __declspec(uuid("8883477e-573d-4f20-b87b-50506071cb5a"))
/* dual interface */ _IAgLtGraphics;
struct /* coclass */ AgLtVO;
struct __declspec(uuid("b401d386-09fd-4f80-a2ef-16f66c93a85c"))
/* dual interface */ _IAgLtVO;
struct /* coclass */ AgCoverageDefinition;
struct __declspec(uuid("ef43e921-5cb4-4070-a0ee-b130d2f65710"))
/* dual interface */ _IAgCoverageDefinition;
struct __declspec(uuid("b0547d0b-5a35-46ff-b4dc-637958e54800"))
/* interface */ IAgCvGrid;
enum AgECvBounds;
struct __declspec(uuid("bbc0169f-0249-4a4c-9c88-7f1a34e926a0"))
/* interface */ IAgCvBounds;
enum AgECvResolution;
struct __declspec(uuid("5272fabe-a397-4c64-84ed-2041f2dde9b6"))
/* interface */ IAgCvResolution;
struct __declspec(uuid("1e183dc2-ae65-4496-ab1e-812fad599129"))
/* interface */ IAgCvPointDefinition;
enum AgECvPointLocMethod;
struct __declspec(uuid("0ea41f51-4ba0-434a-a367-0d718aa2495d"))
/* dual interface */ IAgCvPointFileListCollection;
enum AgECvGridClass;
enum AgECvAltitudeMethod;
enum AgECvGroundAltitudeMethod;
struct __declspec(uuid("dc75a606-a3d8-4439-aa69-42bbd4615faf"))
/* interface */ IAgCvAdvanced;
enum AgECvDataRetention;
enum AgEDataSaveMode;
enum AgECvRegionAccessAccel;
enum AgECvSatisfactionType;
struct __declspec(uuid("ec52a477-585b-40d5-a3e0-f65bae8cffb3"))
/* interface */ IAgCvInterval;
struct __declspec(uuid("c410b828-6c0c-4a60-93f3-721a6b689655"))
/* interface */ IAgCvGraphics;
struct __declspec(uuid("990a71cf-5b4b-400e-bf0b-f54d6392b8ae"))
/* interface */ IAgCvGfxStatic;
struct __declspec(uuid("f09016a7-0bcc-4a58-ac5a-fc7315a5b070"))
/* interface */ IAgCvGfxAnimation;
struct __declspec(uuid("2d513808-d69b-4285-b197-ca504395ff3d"))
/* interface */ IAgCvGfxProgress;
struct __declspec(uuid("acc567c7-d832-451b-b066-75227881f5a9"))
/* interface */ IAgCvVO;
struct __declspec(uuid("ebae1a74-67e0-4a38-a7c2-e5e92404e808"))
/* interface */ IAgCvVOAttributes;
struct __declspec(uuid("5d256dcc-b473-4b54-93b9-88b32d0513d6"))
/* interface */ IAgCvGridInspector;
struct __declspec(uuid("8c454bbc-a6c6-4804-9001-d5696cb4eb7d"))
/* dual interface */ IAgCvGridPointSelection;
struct __declspec(uuid("437415d2-b850-4df1-bb30-0314f82085ce"))
/* interface */ IAgCoverageDefinition;
struct /* coclass */ AgCvBoundsCustomRegions;
struct __declspec(uuid("21c05dd1-f8a1-459c-a17a-ecbb50ec33d6"))
/* dual interface */ _IAgCvBoundsCustomRegions;
struct __declspec(uuid("e5d3ea59-01af-4f33-9503-b8fd0e8ab5ff"))
/* dual interface */ IAgCvRegionFilesCollection;
struct __declspec(uuid("2351e374-877b-489f-9fdc-009a29302c23"))
/* dual interface */ IAgCvAreaTargetsCollection;
enum AgECvCustomRegionAlgorithm;
struct __declspec(uuid("1e050e10-b37e-4256-89a0-3766044ddd9f"))
/* interface */ IAgCvBoundsCustomRegions;
struct /* coclass */ AgCvBoundsCustomBoundary;
struct __declspec(uuid("2a0db561-91da-4139-b881-593be96071ea"))
/* dual interface */ _IAgCvBoundsCustomBoundary;
struct __declspec(uuid("ca20bcc8-6f5e-436d-96cb-c9193c89c746"))
/* interface */ IAgCvBoundsCustomBoundary;
struct /* coclass */ AgCvBoundsGlobal;
struct __declspec(uuid("419b697c-b699-433c-9c48-dcc099daee06"))
/* dual interface */ _IAgCvBoundsGlobal;
struct __declspec(uuid("6bf266b2-794d-4b38-9165-110d9fbb90a8"))
/* interface */ IAgCvBoundsGlobal;
struct /* coclass */ AgCvBoundsLat;
struct __declspec(uuid("28d35dae-f2af-4e91-acc9-3986dd0b8351"))
/* dual interface */ _IAgCvBoundsLat;
struct __declspec(uuid("f0453000-8fe5-4928-8ac3-870189dd46c8"))
/* interface */ IAgCvBoundsLat;
struct /* coclass */ AgCvBoundsLatLine;
struct __declspec(uuid("ac49c928-81bc-4fc4-8c20-ed05cd754974"))
/* dual interface */ _IAgCvBoundsLatLine;
struct __declspec(uuid("ac13708e-568d-4ed0-a558-3a7833907a49"))
/* interface */ IAgCvBoundsLatLine;
struct /* coclass */ AgCvBoundsLonLine;
struct __declspec(uuid("3f5dac31-1cb8-490d-b3b7-bf9da36528e0"))
/* dual interface */ _IAgCvBoundsLonLine;
struct __declspec(uuid("4c5f1218-6e1e-4c45-ae4c-68cf077a98b0"))
/* interface */ IAgCvBoundsLonLine;
struct /* coclass */ AgCvGrid;
struct __declspec(uuid("5d9b2ced-8ff8-493c-8833-88fc0d071302"))
/* dual interface */ _IAgCvGrid;
struct /* coclass */ AgCvAssetListElement;
struct __declspec(uuid("9f9e20f7-e8ff-4782-86de-d312bd75e128"))
/* dual interface */ _IAgCvAssetListElement;
struct /* coclass */ AgCvAssetListCollection;
struct /* coclass */ AgCvRegionFilesCollection;
struct /* coclass */ AgCvAreaTargetsCollection;
struct /* coclass */ AgCvPointDefinition;
struct __declspec(uuid("1d6f650a-8b57-4c61-b5c8-72cf1d764d3e"))
/* dual interface */ _IAgCvPointDefinition;
struct /* coclass */ AgCvPointFileListCollection;
struct /* coclass */ AgCvAdvanced;
struct __declspec(uuid("2927cd20-8840-45c8-a2ff-266b5c228d98"))
/* dual interface */ _IAgCvAdvanced;
struct /* coclass */ AgCvInterval;
struct __declspec(uuid("837547fb-b543-41be-b46f-c11d39eef7e5"))
/* dual interface */ _IAgCvInterval;
struct /* coclass */ AgCvResolutionArea;
struct __declspec(uuid("f663e8a3-c42e-4e3d-bb92-28e41461a3aa"))
/* dual interface */ _IAgCvResolutionArea;
struct __declspec(uuid("e7f6f309-5fcb-4513-ab98-b3a571e5bcdc"))
/* interface */ IAgCvResolutionArea;
struct /* coclass */ AgCvResolutionDistance;
struct __declspec(uuid("0b665f2b-2d52-45a3-bb7b-74272841378f"))
/* dual interface */ _IAgCvResolutionDistance;
struct __declspec(uuid("60cfff03-645e-4494-9a06-8f7c6cc74912"))
/* interface */ IAgCvResolutionDistance;
struct /* coclass */ AgCvResolutionLatLon;
struct __declspec(uuid("2b96b9f5-0461-41b7-956b-899c6521f7c7"))
/* dual interface */ _IAgCvResolutionLatLon;
struct __declspec(uuid("277b42a3-fd4d-42de-828a-d35320007524"))
/* interface */ IAgCvResolutionLatLon;
struct /* coclass */ AgCvGfxStatic;
struct __declspec(uuid("d2e63b1b-cb65-409c-b2e3-71aca40e32c5"))
/* dual interface */ _IAgCvGfxStatic;
struct /* coclass */ AgCvGfxAnimation;
struct __declspec(uuid("7a10cba1-b1c9-416e-a8ff-1286bd7574ee"))
/* dual interface */ _IAgCvGfxAnimation;
struct /* coclass */ AgCvGfxProgress;
struct __declspec(uuid("fd999025-7e77-43a7-908f-1a570a54848b"))
/* dual interface */ _IAgCvGfxProgress;
struct /* coclass */ AgCvGraphics;
struct __declspec(uuid("2e4f382f-860a-44d8-abde-70dcee9ef30c"))
/* dual interface */ _IAgCvGraphics;
struct /* coclass */ AgCvVO;
struct __declspec(uuid("ec6c1108-29e7-4c44-9263-3728a6a07dcb"))
/* dual interface */ _IAgCvVO;
struct /* coclass */ AgCvVOAttributes;
struct __declspec(uuid("0d349b54-f1d8-4d75-adde-0a8f3a1e7b7b"))
/* dual interface */ _IAgCvVOAttributes;
struct /* coclass */ AgChTimePeriodBase;
struct __declspec(uuid("90ba38b3-ae7d-43bb-ac7c-3ddfd38d4d29"))
/* dual interface */ _IAgChTimePeriodBase;
enum AgEChTimePeriodType;
struct __declspec(uuid("85fcba60-68f8-4486-8a58-aa8906903d59"))
/* interface */ IAgChTimePeriodBase;
struct /* coclass */ AgChUserSpecifiedTimePeriod;
struct __declspec(uuid("3090de50-ab05-46af-bf5c-226641e7a355"))
/* dual interface */ _IAgChUserSpecifiedTimePeriod;
struct __declspec(uuid("beda885e-8338-4acc-b425-683f4fbbf6eb"))
/* interface */ IAgChUserSpecifiedTimePeriod;
struct /* coclass */ AgChConstraints;
struct __declspec(uuid("f21a0bf2-caf8-4b88-a735-52136407b79d"))
/* dual interface */ _IAgChConstraints;
struct __declspec(uuid("2e590d0e-1b71-40fa-b9cc-b771372d540f"))
/* interface */ IAgChConstraints;
struct /* coclass */ AgChain;
struct __declspec(uuid("30d1d89a-e37b-4fda-a336-4aae57f995c0"))
/* dual interface */ _IAgChain;
struct __declspec(uuid("77e1f748-c8b0-404a-bbda-7d5ad72d1cdf"))
/* interface */ IAgChGraphics;
struct __declspec(uuid("d73522bc-3aba-4168-b6a2-68ec5391ba74"))
/* interface */ IAgChGfxStatic;
struct __declspec(uuid("ceb487fd-90f5-4e8e-9360-31efd5bd0840"))
/* interface */ IAgChGfxAnimation;
struct __declspec(uuid("a8a24d96-802d-487a-9278-f878f200ff37"))
/* interface */ IAgChVO;
struct __declspec(uuid("04477568-802e-4ffc-9dd4-1c588f1811ea"))
/* interface */ IAgChain;
struct /* coclass */ AgChGfxStatic;
struct __declspec(uuid("97f716b7-19f2-485f-8d91-f920c4f5092d"))
/* dual interface */ _IAgChGfxStatic;
struct /* coclass */ AgChGfxAnimation;
struct __declspec(uuid("38fa5998-dc9f-4b8d-9015-b44a241d9635"))
/* dual interface */ _IAgChGfxAnimation;
struct /* coclass */ AgChGraphics;
struct __declspec(uuid("29dfd9b5-09da-4e6e-8579-14c9d1109324"))
/* dual interface */ _IAgChGraphics;
struct /* coclass */ AgChVO;
struct __declspec(uuid("7d3bfcd8-bda8-4223-a031-7134fb310c0e"))
/* dual interface */ _IAgChVO;
struct /* coclass */ AgRfCoefficients;
struct __declspec(uuid("8012c442-555d-4df7-9bf6-943d1f0c5247"))
/* dual interface */ _IAgRfCoefficients;
struct __declspec(uuid("d6934a35-ede7-446a-a1ad-87eb832097bc"))
/* interface */ IAgRfCoefficients;
struct /* coclass */ AgRfModelEffectiveRadiusMethod;
struct __declspec(uuid("e8b5063e-33ea-4fcc-bb3d-34225d354624"))
/* dual interface */ _IAgRfModelEffectiveRadiusMethod;
struct __declspec(uuid("52cac135-3ebe-4d10-b75d-b81313861c18"))
/* interface */ IAgRfModelEffectiveRadiusMethod;
struct /* coclass */ AgRfModelITURP8344;
struct __declspec(uuid("431ba762-f73e-4262-91df-a6e9564625da"))
/* dual interface */ _IAgRfModelITURP8344;
struct __declspec(uuid("e73a63dc-5a90-48de-a370-6b2fe1eeebd9"))
/* interface */ IAgRfModelITURP8344;
struct /* coclass */ AgRfModelSCFMethod;
struct __declspec(uuid("a6ae0ca0-2705-4fed-9b79-f00e2bace40f"))
/* dual interface */ _IAgRfModelSCFMethod;
struct __declspec(uuid("6a26c0e8-af06-45e2-81bf-40ce4604985c"))
/* interface */ IAgRfModelSCFMethod;
struct /* coclass */ AgFmDefCompute;
struct __declspec(uuid("167a2117-2aa4-40b4-8076-759489920d88"))
/* dual interface */ _IAgFmDefCompute;
struct /* coclass */ AgFmDefDataMinMax;
struct __declspec(uuid("be7c4bdb-4fba-40b5-ae63-feb866e26323"))
/* dual interface */ _IAgFmDefDataMinMax;
struct __declspec(uuid("4b0426e4-9108-4227-b6ff-fab340b74967"))
/* interface */ IAgFmDefDataMinMax;
struct /* coclass */ AgFmDefDataMinAssets;
struct __declspec(uuid("ecfc392b-15c4-462b-922a-973a2fb0e0a2"))
/* dual interface */ _IAgFmDefDataMinAssets;
struct __declspec(uuid("c558678f-a8e6-4f33-bf72-a8ed5d17ffd6"))
/* interface */ IAgFmDefDataMinAssets;
struct /* coclass */ AgFmDefDataPercentLevel;
struct __declspec(uuid("eaab9fd7-fa8e-457f-8733-6dc7a087a7c4"))
/* dual interface */ _IAgFmDefDataPercentLevel;
struct __declspec(uuid("93dd0cf2-416d-4ef9-acea-1a54704ba068"))
/* interface */ IAgFmDefDataPercentLevel;
struct /* coclass */ AgFmDefDataBestN;
struct __declspec(uuid("b7b4940c-5e53-462b-88b5-42e19f0693ba"))
/* dual interface */ _IAgFmDefDataBestN;
struct __declspec(uuid("da4eddf9-59a5-4601-a9cf-c3d69702981f"))
/* interface */ IAgFmDefDataBestN;
struct /* coclass */ AgFmDefAccessConstraint;
struct __declspec(uuid("4201d359-b8b3-4437-9149-c6f05a6193c5"))
/* dual interface */ _IAgFmDefAccessConstraint;
struct /* coclass */ AgFmSatisfaction;
struct __declspec(uuid("4fdb88ff-54fe-413d-995a-013d35a987b2"))
/* dual interface */ _IAgFmSatisfaction;
struct /* coclass */ AgFigureOfMerit;
struct __declspec(uuid("9412b217-797b-4acd-9ab3-1e7d1ed42796"))
/* dual interface */ _IAgFigureOfMerit;
struct __declspec(uuid("b3b90e8c-6d72-4e22-89f9-75ae7bf76f68"))
/* interface */ IAgFmVO;
struct __declspec(uuid("2a510243-dc8c-49f1-8434-6f207ee086d2"))
/* interface */ IAgFmVOAttributes;
struct __declspec(uuid("64e13cd1-0b17-4725-a10d-2aa1f565e2a2"))
/* interface */ IAgFmGridInspector;
struct __declspec(uuid("1e0f1617-8f51-43c4-952a-7547741b4fa0"))
/* interface */ IAgFigureOfMerit;
struct /* coclass */ AgFmDefAccessSeparation;
struct __declspec(uuid("6684fe68-e2e4-4654-bd36-4d2dccdc80f0"))
/* dual interface */ _IAgFmDefAccessSeparation;
struct __declspec(uuid("388d109c-14e4-41df-b1dc-4eb46affe3ab"))
/* interface */ IAgFmDefAccessSeparation;
struct /* coclass */ AgFmDefDilutionOfPrecision;
struct __declspec(uuid("9947d749-6b23-41ed-8c48-031978242569"))
/* dual interface */ _IAgFmDefDilutionOfPrecision;
enum AgEFmMethod;
enum AgEFmComputeType;
struct __declspec(uuid("b52d7505-dce5-4d6a-9da2-8a03eacb3afd"))
/* interface */ IAgFmDefDilutionOfPrecision;
struct /* coclass */ AgFmDefNavigationAccuracy;
struct __declspec(uuid("07dd1b61-82db-415b-b56e-f0ee3be91c8e"))
/* dual interface */ _IAgFmDefNavigationAccuracy;
struct __declspec(uuid("5e74186c-b597-4d28-9ff2-95c020df4cde"))
/* interface */ IAgFmUncertainties;
struct __declspec(uuid("8e3e3b16-8e8b-49e7-a427-4135a56777a1"))
/* dual interface */ IAgFmAssetListCollection;
struct __declspec(uuid("59c14c15-c3c8-4448-a47d-c39141f2cd1f"))
/* interface */ IAgFmAssetListElement;
enum AgEFmNAMethodType;
struct __declspec(uuid("126d0c5b-8a16-4989-ad54-f19dc7b28514"))
/* interface */ IAgFmNAMethod;
struct __declspec(uuid("f44fa6fc-b12e-425e-a435-d3b84355e082"))
/* interface */ IAgFmDefNavigationAccuracy;
struct /* coclass */ AgFmAssetListElement;
struct __declspec(uuid("c1976f5b-fd43-4b33-a849-8127232e4754"))
/* dual interface */ _IAgFmAssetListElement;
struct /* coclass */ AgFmAssetListCollection;
struct /* coclass */ AgFmUncertainties;
struct __declspec(uuid("902e2267-dff9-4c9d-9b1d-faa73924c828"))
/* dual interface */ _IAgFmUncertainties;
struct /* coclass */ AgFmDefResponseTime;
struct __declspec(uuid("72853088-0dc6-4484-99d2-289321df8d23"))
/* dual interface */ _IAgFmDefResponseTime;
struct __declspec(uuid("57ae8274-b0a2-4cdb-ae57-d4e36132de3b"))
/* interface */ IAgFmDefResponseTime;
struct /* coclass */ AgFmDefRevisitTime;
struct __declspec(uuid("0a981da3-66ec-45cb-8f49-31eaf1e595e6"))
/* dual interface */ _IAgFmDefRevisitTime;
enum AgEFmEndGapOption;
struct __declspec(uuid("9270cfcc-d550-4f26-9396-43fb8f40b335"))
/* interface */ IAgFmDefRevisitTime;
struct /* coclass */ AgFmDefSimpleCoverage;
struct __declspec(uuid("a2c1bbce-ae48-4ec2-8c1e-29b7aa8d0669"))
/* dual interface */ _IAgFmDefSimpleCoverage;
struct __declspec(uuid("54ca993b-af7f-4963-a483-5c1e84674677"))
/* interface */ IAgFmDefSimpleCoverage;
struct /* coclass */ AgFmDefTimeAverageGap;
struct __declspec(uuid("3263c4c7-847e-40e7-8cc4-7e9a8f7acab6"))
/* dual interface */ _IAgFmDefTimeAverageGap;
struct __declspec(uuid("be96e90c-3db6-403f-9332-ddb80d752118"))
/* interface */ IAgFmDefTimeAverageGap;
struct /* coclass */ AgFmGfxContours;
struct __declspec(uuid("698ed292-69da-4d29-84c2-520943745f26"))
/* dual interface */ _IAgFmGfxContours;
struct /* coclass */ AgFmGfxAttributes;
struct __declspec(uuid("07b2e68c-032d-4a80-a798-065ac52f01a4"))
/* dual interface */ _IAgFmGfxAttributes;
struct /* coclass */ AgFmGfxContoursAnimation;
struct __declspec(uuid("110870e3-5387-4502-9a12-e7373f402773"))
/* dual interface */ _IAgFmGfxContoursAnimation;
struct __declspec(uuid("60be82e9-624a-4ac9-a6e4-a8955cc141bb"))
/* interface */ IAgFmGfxContoursAnimation;
struct /* coclass */ AgFmGfxAttributesAnimation;
struct __declspec(uuid("5c02221e-2bbf-4b9c-8c83-574f57316111"))
/* dual interface */ _IAgFmGfxAttributesAnimation;
struct /* coclass */ AgFmGraphics;
struct __declspec(uuid("09fe2ba7-2f0a-4084-bdaa-d978fd5dfd10"))
/* dual interface */ _IAgFmGraphics;
struct /* coclass */ AgFmGfxRampColor;
struct __declspec(uuid("ceb64f65-96b6-4851-97ce-2d8da0a013f9"))
/* dual interface */ _IAgFmGfxRampColor;
struct /* coclass */ AgFmGfxLevelAttributesElement;
struct __declspec(uuid("549b83ea-2434-4a32-87d9-d347a3fcb01d"))
/* dual interface */ _IAgFmGfxLevelAttributesElement;
struct /* coclass */ AgFmGfxLevelAttributesCollection;
struct /* coclass */ AgFmGfxPositionOnMap;
struct __declspec(uuid("5a3cf168-c210-4fd3-a8b2-188500a81d7b"))
/* dual interface */ _IAgFmGfxPositionOnMap;
struct /* coclass */ AgFmGfxColorOptions;
struct __declspec(uuid("53250992-4308-46e4-960f-dc926aeb15e8"))
/* dual interface */ _IAgFmGfxColorOptions;
struct /* coclass */ AgFmGfxLegendWindow;
struct __declspec(uuid("025eb5a3-e794-4968-a7d8-00c1de588ac6"))
/* dual interface */ _IAgFmGfxLegendWindow;
struct /* coclass */ AgFmVOLegendWindow;
struct __declspec(uuid("60bb0477-fd77-4e84-bd65-679490cd5182"))
/* dual interface */ _IAgFmVOLegendWindow;
struct /* coclass */ AgFmGfxTextOptions;
struct __declspec(uuid("5f50fecb-3e0c-424c-b9bd-e788358be611"))
/* dual interface */ _IAgFmGfxTextOptions;
struct /* coclass */ AgFmGfxRangeColorOptions;
struct __declspec(uuid("53fff61d-c8b8-4e07-8242-b9afd6ba60f2"))
/* dual interface */ _IAgFmGfxRangeColorOptions;
struct /* coclass */ AgFmGfxLegend;
struct __declspec(uuid("ff6733a2-d54b-4382-9a6e-79926560824a"))
/* dual interface */ _IAgFmGfxLegend;
struct /* coclass */ AgFmNAMethodElevationAngle;
struct __declspec(uuid("037743ed-1403-4871-9edf-a3338b99e202"))
/* dual interface */ _IAgFmNAMethodElevationAngle;
struct __declspec(uuid("2d83403e-29f7-44ff-ad2e-c0bc18f2e792"))
/* interface */ IAgFmNAMethodElevationAngle;
struct /* coclass */ AgFmNAMethodConstant;
struct __declspec(uuid("9854d629-9c8c-47d9-abd9-68fac1871fb9"))
/* dual interface */ _IAgFmNAMethodConstant;
struct __declspec(uuid("cbe9a566-2dbd-4ff4-bcc2-c3447aa4fda6"))
/* interface */ IAgFmNAMethodConstant;
struct /* coclass */ AgFmVOAttributes;
struct __declspec(uuid("caa93b70-e207-4bed-acc5-e797bb3232e5"))
/* dual interface */ _IAgFmVOAttributes;
struct /* coclass */ AgFmVO;
struct __declspec(uuid("f113508b-8916-438c-919d-3e22381f178c"))
/* dual interface */ _IAgFmVO;
struct /* coclass */ AgVeProfileGPS;
struct __declspec(uuid("56376c53-bf03-4a42-a059-a29920e5e151"))
/* dual interface */ _IAgVeProfileGPS;
enum AgEGPSAttModelType;
struct __declspec(uuid("0a8f2591-e19a-4188-9372-9f51f1f12387"))
/* interface */ IAgVeProfileGPS;
struct /* coclass */ AgStkObjectModelContext;
struct __declspec(uuid("f3082bec-42a9-44c6-ae6f-842131fb3b80"))
/* dual interface */ _IAgStkObjectModelContext;
struct __declspec(uuid("8f8583f2-b047-4078-8147-bf86bc457ae3"))
/* interface */ IAgStkObjectModelContext;
struct /* coclass */ AgStdMil2525bSymbols;
struct __declspec(uuid("babe0878-c4e4-48ff-9c49-6dcdcaad7c75"))
/* dual interface */ _IAgStdMil2525bSymbols;
struct /* coclass */ AgCvGridInspector;
struct __declspec(uuid("85311d85-9c8f-4d05-bab5-11208ab94970"))
/* dual interface */ _IAgCvGridInspector;
struct /* coclass */ AgFmGridInspector;
struct __declspec(uuid("30d4354e-43c2-45d2-903c-f160bfed07bd"))
/* dual interface */ _IAgFmGridInspector;
struct /* coclass */ AgVOVaporTrail;
struct __declspec(uuid("5f73214a-4d66-4e13-a5bc-181793ac9b1b"))
/* dual interface */ _IAgVOVaporTrail;
struct /* coclass */ AgVeTargetPointingIntervalCollection;
struct /* coclass */ AgAccessCnstrPluginMinMax;
struct __declspec(uuid("df1372fe-f13c-46c9-b35a-6831ef05e91f"))
/* dual interface */ _IAgAccessCnstrPluginMinMax;
struct __declspec(uuid("a05d4294-2a89-4fc7-ace3-ef4ddc32d064"))
/* interface */ IAgAccessCnstrPluginMinMax;
struct /* coclass */ AgCnConstraints;
struct __declspec(uuid("c704d39e-edde-4d76-a56c-4e971df7e4d9"))
/* dual interface */ _IAgCnConstraints;
enum AgECnCnstrRestriction;
struct __declspec(uuid("54a60bbc-1c06-4b8f-a42a-2f1acb3ed83a"))
/* interface */ IAgCnCnstrRestriction;
struct __declspec(uuid("c5ca5fd7-1a27-4b69-9582-40d32b3efb3e"))
/* interface */ IAgCnConstraints;
struct /* coclass */ AgCnCnstrObjectRestriction;
struct __declspec(uuid("71a4cf0f-4d55-49ac-a65d-a8b82daff4be"))
/* dual interface */ _IAgCnCnstrObjectRestriction;
struct __declspec(uuid("8cfd9a95-a08e-45e1-b1c2-472d117176a9"))
/* interface */ IAgCnCnstrObjectRestriction;
struct /* coclass */ AgCnCnstrRestriction;
struct __declspec(uuid("3532c303-117e-4acb-a441-9b956073dbde"))
/* dual interface */ _IAgCnCnstrRestriction;
struct /* coclass */ AgConstellation;
struct __declspec(uuid("78a97816-87d0-469b-8a3a-afd321d64b5f"))
/* dual interface */ _IAgConstellation;
struct __declspec(uuid("dbe4dec2-1609-4944-8f98-f132ce5282cc"))
/* interface */ IAgCnGraphics;
struct __declspec(uuid("e4e31c27-2a4e-43e7-b545-c49740f5a80b"))
/* interface */ IAgConstellation;
struct /* coclass */ AgCnGraphics;
struct __declspec(uuid("692bae20-1e32-4e6c-9703-27e679f28da3"))
/* dual interface */ _IAgCnGraphics;
struct /* coclass */ AgEventDetectionNoSubSampling;
struct __declspec(uuid("3c736f86-4d50-41ee-8774-53a7874e5290"))
/* dual interface */ _IAgEventDetectionNoSubSampling;
struct __declspec(uuid("5f6acdf8-c37b-4318-8d95-8c684665c857"))
/* interface */ IAgEventDetectionNoSubSampling;
struct /* coclass */ AgEventDetectionSubSampling;
struct __declspec(uuid("063f0876-9f4e-4480-b7e7-19679b3f95ea"))
/* dual interface */ _IAgEventDetectionSubSampling;
struct __declspec(uuid("b9e2addb-d8b4-4ab4-a359-6a76ded7d0b3"))
/* interface */ IAgEventDetectionSubSampling;
struct /* coclass */ AgSamplingMethodAdaptive;
struct __declspec(uuid("61e4bb9b-8d25-4cd0-9046-f678aeb90273"))
/* dual interface */ _IAgSamplingMethodAdaptive;
struct __declspec(uuid("4d59435e-d926-42c7-9d76-6f8261ff99be"))
/* interface */ IAgSamplingMethodAdaptive;
struct /* coclass */ AgSamplingMethodFixedStep;
struct __declspec(uuid("aec04325-154e-414f-99f5-3120d54d1d28"))
/* dual interface */ _IAgSamplingMethodFixedStep;
struct __declspec(uuid("4783a350-ff4e-4d95-9d0a-75ba2453e7c4"))
/* interface */ IAgSamplingMethodFixedStep;
struct /* coclass */ AgSnAccessAdvanced;
struct __declspec(uuid("829c836e-a58d-4737-8973-53c4b8d1223f"))
/* dual interface */ _IAgSnAccessAdvanced;
struct /* coclass */ AgVeAccessAdvanced;
struct __declspec(uuid("46db3a5b-c329-4e59-8b51-1d2e2242e47a"))
/* dual interface */ _IAgVeAccessAdvanced;
struct /* coclass */ AgAccessSampling;
struct __declspec(uuid("5830581f-d211-42b5-ac45-fe8b50552056"))
/* dual interface */ _IAgAccessSampling;
struct /* coclass */ AgAccessEventDetection;
struct __declspec(uuid("32d46889-36ad-4cc8-bfc8-d3539cb99813"))
/* dual interface */ _IAgAccessEventDetection;
struct /* coclass */ AgSnVOProjectionElement;
struct __declspec(uuid("31a5db47-79bc-46e3-a30c-d5e3f1041ffc"))
/* dual interface */ _IAgSnVOProjectionElement;
struct /* coclass */ AgSnVOSpaceProjectionCollection;
struct /* coclass */ AgSnVOTargetProjectionCollection;
struct /* coclass */ AgCentralBodyTerrainCollectionElement;
struct __declspec(uuid("8443274f-0d59-49f8-a998-c81d99b5f26b"))
/* dual interface */ _IAgCentralBodyTerrainCollectionElement;
struct /* coclass */ AgCentralBodyTerrainCollection;
struct /* coclass */ AgSaExportTools;
struct __declspec(uuid("1111ab08-3423-492d-ba5a-5d1da3e17a47"))
/* dual interface */ _IAgSaExportTools;
struct /* coclass */ AgLvExportTools;
struct __declspec(uuid("f2beb8ce-25ad-40f5-b02a-73e2e8a75057"))
/* dual interface */ _IAgLvExportTools;
struct /* coclass */ AgGvExportTools;
struct __declspec(uuid("6a53d198-1e9b-47cc-8fc2-94c81e407682"))
/* dual interface */ _IAgGvExportTools;
struct /* coclass */ AgMsExportTools;
struct __declspec(uuid("ccfcb05a-1aa9-48dc-ad56-ea2ddeeb953b"))
/* dual interface */ _IAgMsExportTools;
struct /* coclass */ AgAcExportTools;
struct __declspec(uuid("5c3e5c9b-71c2-478e-a5aa-8d9d843d8385"))
/* dual interface */ _IAgAcExportTools;
struct /* coclass */ AgShExportTools;
struct __declspec(uuid("a0cabf5b-ff92-4106-a50c-8f61ffca8cd2"))
/* dual interface */ _IAgShExportTools;
struct /* coclass */ AgVeEphemerisCode500ExportTool;
struct __declspec(uuid("9535c25e-faad-4a7a-b53d-ced25f74fddd"))
/* dual interface */ _IAgVeEphemerisCode500ExportTool;
struct /* coclass */ AgVeEphemerisCCSDSExportTool;
struct __declspec(uuid("49d6ff95-a2ad-4dad-825a-a2d9906cddb8"))
/* dual interface */ _IAgVeEphemerisCCSDSExportTool;
struct /* coclass */ AgVeEphemerisStkExportTool;
struct __declspec(uuid("00d51bea-7896-4961-be90-f2aa94137bb6"))
/* dual interface */ _IAgVeEphemerisStkExportTool;
struct /* coclass */ AgVeEphemerisSpiceExportTool;
struct __declspec(uuid("d84cbe45-e299-4bc0-8e30-56aca67b49fc"))
/* dual interface */ _IAgVeEphemerisSpiceExportTool;
struct /* coclass */ AgExportToolTimePeriod;
struct __declspec(uuid("aa8d6635-8317-4a19-b96c-e084b7938033"))
/* dual interface */ _IAgExportToolTimePeriod;
struct /* coclass */ AgVeAttitudeExportTool;
struct __declspec(uuid("f699210c-61d7-46a7-b9a5-70e475ae6397"))
/* dual interface */ _IAgVeAttitudeExportTool;
struct /* coclass */ AgVePropDefExportTool;
struct __declspec(uuid("069c9cb5-276b-4bc2-ac5a-90124f90fa24"))
/* dual interface */ _IAgVePropDefExportTool;
struct /* coclass */ AgVeCoordinateAxesCustom;
struct __declspec(uuid("1643e57e-349b-4298-b009-dd56f04206c6"))
/* dual interface */ _IAgVeCoordinateAxesCustom;
struct __declspec(uuid("b6538a5b-9aa2-443c-a2d8-7e8b7c3b5478"))
/* interface */ IAgVeCoordinateAxesCustom;
struct /* coclass */ AgExportToolStepSize;
struct __declspec(uuid("3391b201-2295-4572-a5f3-0fbb027b141c"))
/* dual interface */ _IAgExportToolStepSize;
struct /* coclass */ AgPctCmpltEventArgs;
struct /* coclass */ AgStkObjectChangedEventArgs;
struct /* coclass */ AgVeEclipsingBodies;
struct __declspec(uuid("1032e9a5-037b-4c3e-a803-dc254239bacc"))
/* dual interface */ _IAgVeEclipsingBodies;
struct /* coclass */ AgLocationCrdnPoint;
struct __declspec(uuid("07d1dc94-f4de-4777-9d66-433058fff209"))
/* dual interface */ _IAgLocationCrdnPoint;
struct __declspec(uuid("74751379-c7cb-4597-addf-d570371000be"))
/* interface */ IAgLocationCrdnPoint;
struct /* coclass */ AgTimePeriod;
struct __declspec(uuid("97a874ca-7ae1-499c-9591-6757ec250e2f"))
/* dual interface */ _IAgTimePeriod;
struct /* coclass */ AgTimePeriodValue;
struct __declspec(uuid("dc2837b3-c46e-4616-8d91-580f1662d6e8"))
/* dual interface */ _IAgTimePeriodValue;
struct /* coclass */ AgSpatialState;
struct __declspec(uuid("7c760637-679d-4705-abe1-9b91abfcf77b"))
/* dual interface */ _IAgSpatialState;
struct /* coclass */ AgVeSpatialInfo;
struct __declspec(uuid("f67955c9-7b8e-4fc5-b76e-9939712a5ad3"))
/* dual interface */ _IAgVeSpatialInfo;
struct /* coclass */ AgOnePtAccess;
struct __declspec(uuid("5c105373-706b-4b34-981f-5f96a3f1a23c"))
/* dual interface */ _IAgOnePtAccess;
struct /* coclass */ AgOnePtAccessResultCollection;
struct /* coclass */ AgOnePtAccessResult;
struct __declspec(uuid("3bfe3f96-2059-494f-a062-2474570d1317"))
/* dual interface */ _IAgOnePtAccessResult;
struct /* coclass */ AgOnePtAccessConstraintCollection;
struct /* coclass */ AgOnePtAccessConstraint;
struct __declspec(uuid("2b3232fc-ea75-42d1-9ca0-ce449f07096d"))
/* dual interface */ _IAgOnePtAccessConstraint;
struct /* coclass */ AgVePropagatorRealtime;
struct __declspec(uuid("00ec60b1-e36d-4a51-9480-887825d3abc4"))
/* dual interface */ _IAgVePropagatorRealtime;
enum AgELookAheadPropagator;
struct __declspec(uuid("b225af15-24e1-41df-9c56-a1b724a88844"))
/* interface */ IAgVeRealtimePointBuilder;
struct __declspec(uuid("4696526e-a5e1-407c-b522-9a163d7da2ff"))
/* interface */ IAgVeRealtimeCartesianPoints;
struct __declspec(uuid("e82ff7d0-4ee6-470b-9d3d-7b5ead5f3f67"))
/* interface */ IAgVeRealtimeLLAHPSPoints;
struct __declspec(uuid("61b6d1c1-0e77-4a3b-a921-13b1934aafb8"))
/* interface */ IAgVeRealtimeLLAPoints;
struct __declspec(uuid("4594a54f-e23e-48f9-8a82-58d9b19f77c4"))
/* interface */ IAgVeRealtimeUTMPoints;
struct __declspec(uuid("88e9b13d-21df-4153-86dc-9936bed49ed7"))
/* interface */ IAgVePropagatorRealtime;
struct /* coclass */ AgVeRealtimePointBuilder;
struct __declspec(uuid("1eae264b-fdaa-4fd1-9b4e-8f5953ee46d8"))
/* dual interface */ _IAgVeRealtimePointBuilder;
struct /* coclass */ AgVeRealtimeCartesianPoints;
struct __declspec(uuid("44b0991d-dd37-49a6-a764-59ee4c4ce205"))
/* dual interface */ _IAgVeRealtimeCartesianPoints;
struct /* coclass */ AgVeRealtimeLLAHPSPoints;
struct __declspec(uuid("18640077-5d73-4e23-b52b-272b9d728033"))
/* dual interface */ _IAgVeRealtimeLLAHPSPoints;
struct /* coclass */ AgVeRealtimeLLAPoints;
struct __declspec(uuid("3b2cefff-13f8-4470-8cf8-ab6420641931"))
/* dual interface */ _IAgVeRealtimeLLAPoints;
struct /* coclass */ AgVeRealtimeUTMPoints;
struct __declspec(uuid("853f0c62-e016-4500-8457-ac0f147c2f39"))
/* dual interface */ _IAgVeRealtimeUTMPoints;
struct /* coclass */ AgSRPModelGPS;
struct __declspec(uuid("a2e0fd34-69fe-4734-ac9d-a561cc0df4b4"))
/* dual interface */ _IAgSRPModelGPS;
struct __declspec(uuid("b9f84681-abdf-40f3-bcd4-f8b456eab6c5"))
/* interface */ IAgSRPModelGPS;
struct /* coclass */ AgSRPModelSpherical;
struct __declspec(uuid("7404b2e9-157f-460c-bc15-a001318267fc"))
/* dual interface */ _IAgSRPModelSpherical;
struct __declspec(uuid("f6f17b90-ba94-4066-b7f4-775f4697b431"))
/* interface */ IAgSRPModelSpherical;
struct /* coclass */ AgVeHPOPSRPModel;
struct __declspec(uuid("4a13c42d-091e-456e-a401-fcd17ac927ac"))
/* dual interface */ _IAgVeHPOPSRPModel;
struct /* coclass */ AgScAnimationTimePeriod;
struct __declspec(uuid("5b098de6-8c89-4326-ab12-8f9949e6c5aa"))
/* dual interface */ _IAgScAnimationTimePeriod;
struct /* coclass */ AgSnProjConstantAlt;
struct __declspec(uuid("6907881d-010d-4c9b-aa6a-e313ac80bda0"))
/* dual interface */ _IAgSnProjConstantAlt;
struct __declspec(uuid("783a2e5c-b8cf-446c-b672-ca64855b7e2a"))
/* interface */ IAgSnProjConstantAlt;
struct /* coclass */ AgSnProjObjectAlt;
struct __declspec(uuid("b695b606-717a-4b3a-8015-c648895e488c"))
/* dual interface */ _IAgSnProjObjectAlt;
struct __declspec(uuid("4f999505-180c-49a8-ae37-65ee84a6058b"))
/* interface */ IAgSnProjObjectAlt;
struct /* coclass */ AgVeAttitudeRealTimeDataReference;
struct __declspec(uuid("fc7d5d21-08d8-4fcb-a97a-ede25e704b55"))
/* dual interface */ _IAgVeAttitudeRealTimeDataReference;
struct /* coclass */ AgMtoAnalysis;
struct __declspec(uuid("af708873-e0b1-489c-ad15-aa1ca07cbe80"))
/* dual interface */ _IAgMtoAnalysis;
struct /* coclass */ AgMtoAnalysisPosition;
struct __declspec(uuid("04587c7e-f1d6-4f23-87a6-84127b2ccb28"))
/* dual interface */ _IAgMtoAnalysisPosition;
struct /* coclass */ AgMtoAnalysisRange;
struct __declspec(uuid("ec2ceffb-9c4f-47f5-b2ea-b1657b333570"))
/* dual interface */ _IAgMtoAnalysisRange;
struct /* coclass */ AgMtoAnalysisFieldOfView;
struct __declspec(uuid("47dda338-147b-4853-941a-f499ec42e05d"))
/* dual interface */ _IAgMtoAnalysisFieldOfView;
struct /* coclass */ AgMtoAnalysisVisibility;
struct __declspec(uuid("ff3c43de-a09a-4c4b-8711-0c08d6d5d814"))
/* dual interface */ _IAgMtoAnalysisVisibility;
struct /* coclass */ AgVePropagatorGPS;
struct __declspec(uuid("c19af26f-cfc7-4ed6-873c-d29d23dfe8bd"))
/* dual interface */ _IAgVePropagatorGPS;
struct __declspec(uuid("7dc57460-9e35-4207-899c-456195d9ecfa"))
/* interface */ IAgVeGPSAutoUpdate;
enum AgEVeGPSAutoUpdateSource;
struct __declspec(uuid("cecd30c7-3ae7-4041-9a5b-a3d8c175e78e"))
/* interface */ IAgVeGPSAutoUpdateProperties;
enum AgEVeGPSElemSelection;
enum AgEVeGPSSwitchMethod;
struct __declspec(uuid("a239f97c-74bb-44f2-a54e-9419ad4ec356"))
/* interface */ IAgVeGPSAutoUpdateFileSource;
struct __declspec(uuid("85dc5f0c-cbd4-401a-8928-0285a361ef99"))
/* dual interface */ IAgVeGPSElementCollection;
struct __declspec(uuid("ecfe9a05-f1fb-49c3-bcea-7b6f39821923"))
/* interface */ IAgVeGPSElement;
struct __declspec(uuid("06972649-9d15-4860-a235-31abbc94ada0"))
/* interface */ IAgVeGPSAutoUpdateOnlineSource;
struct __declspec(uuid("3614fef7-9c0a-4a49-b664-fa6d9e4cd90e"))
/* interface */ IAgVeGPSSpecifyAlmanac;
struct __declspec(uuid("a3daf704-902b-44ff-8fa7-ffa445abd33a"))
/* interface */ IAgVeGPSAlmanacProperties;
enum AgEVeGPSAlmanacType;
struct __declspec(uuid("c85b8367-0a1b-43c1-8b63-0336fac66bb6"))
/* interface */ IAgVePropagatorGPS;
struct /* coclass */ AgAvailableFeatures;
struct __declspec(uuid("027112d3-b6f8-434d-a3f0-e6e96b9d465a"))
/* dual interface */ _IAgAvailableFeatures;
struct /* coclass */ AgScenarioBeforeSaveEventArgs;
struct /* coclass */ AgVePropagatorSGP4CommonTasks;
struct __declspec(uuid("9bd8775c-1d65-4298-aa6b-471004331659"))
/* dual interface */ _IAgVePropagatorSGP4CommonTasks;
struct /* coclass */ AgVeSGP4AutoUpdateProperties;
struct __declspec(uuid("fe8d8423-70d1-46b0-baf5-162ef349f37a"))
/* dual interface */ _IAgVeSGP4AutoUpdateProperties;
struct /* coclass */ AgVeSGP4AutoUpdateFileSource;
struct __declspec(uuid("9a908183-693f-4404-8b51-a0f28dade14b"))
/* dual interface */ _IAgVeSGP4AutoUpdateFileSource;
struct /* coclass */ AgVeSGP4AutoUpdateOnlineSource;
struct __declspec(uuid("e71efc91-75a5-4d1e-a783-1a5e39889f4a"))
/* dual interface */ _IAgVeSGP4AutoUpdateOnlineSource;
struct /* coclass */ AgVeSGP4AutoUpdate;
struct __declspec(uuid("49ffd624-fb03-40e4-8ee8-ecfc27fb6929"))
/* dual interface */ _IAgVeSGP4AutoUpdate;
struct /* coclass */ AgVeSGP4PropagatorSettings;
struct __declspec(uuid("a68c3be6-4fc0-4df1-8b42-ce179e6c41d2"))
/* dual interface */ _IAgVeSGP4PropagatorSettings;
struct /* coclass */ AgVeGPSAutoUpdateProperties;
struct __declspec(uuid("e6449e6a-85b9-4366-b8e4-e0ccfe615f44"))
/* dual interface */ _IAgVeGPSAutoUpdateProperties;
struct /* coclass */ AgVeGPSAutoUpdateFileSource;
struct __declspec(uuid("626a7d17-2403-4551-982f-ddcfdb7ffd22"))
/* dual interface */ _IAgVeGPSAutoUpdateFileSource;
struct /* coclass */ AgVeGPSAutoUpdateOnlineSource;
struct __declspec(uuid("c8527496-f519-41f7-8474-9ea13e451732"))
/* dual interface */ _IAgVeGPSAutoUpdateOnlineSource;
struct /* coclass */ AgVeGPSAutoUpdate;
struct __declspec(uuid("5bfd7814-b98a-4af6-8835-025cc95c4585"))
/* dual interface */ _IAgVeGPSAutoUpdate;
struct /* coclass */ AgVeGPSSpecifyAlmanac;
struct __declspec(uuid("7371698f-eb65-4f0b-bcfd-54dcde4d44fb"))
/* dual interface */ _IAgVeGPSSpecifyAlmanac;
struct /* coclass */ AgVeGPSAlmanacProperties;
struct __declspec(uuid("982074c9-242d-48ad-ad27-11b7a9044d43"))
/* dual interface */ _IAgVeGPSAlmanacProperties;
struct /* coclass */ AgVeGPSAlmanacPropertiesSEM;
struct __declspec(uuid("3d43acb7-cc7e-4a98-a45a-e8d22a02b213"))
/* dual interface */ _IAgVeGPSAlmanacPropertiesSEM;
enum AgEGPSReferenceWeek;
struct __declspec(uuid("55f5ac58-273f-4598-8c27-2bdc3e6d5f05"))
/* interface */ IAgVeGPSAlmanacPropertiesSEM;
struct /* coclass */ AgVeGPSAlmanacPropertiesYUMA;
struct __declspec(uuid("c4dd5ab1-f681-421f-9d99-de71bd1103a5"))
/* dual interface */ _IAgVeGPSAlmanacPropertiesYUMA;
struct __declspec(uuid("b1a6205f-d7cc-421a-a609-4e16ac3c43d5"))
/* interface */ IAgVeGPSAlmanacPropertiesYUMA;
struct /* coclass */ AgVeGPSAlmanacPropertiesSP3;
struct __declspec(uuid("7526d268-fc5e-46ef-bb34-7bd24641088d"))
/* dual interface */ _IAgVeGPSAlmanacPropertiesSP3;
struct __declspec(uuid("f417479b-a8ea-49b4-aeb7-8acfea74a70c"))
/* interface */ IAgVeGPSAlmanacPropertiesSP3;
struct /* coclass */ AgVeGPSElementCollection;
struct /* coclass */ AgVeGPSElement;
struct __declspec(uuid("5d50e790-55f8-417e-b4d2-1416a5985f54"))
/* dual interface */ _IAgVeGPSElement;
struct /* coclass */ AgSpEnvRadEnergyMethodSpecify;
struct __declspec(uuid("796ae958-add1-4798-b3ed-e8c2d066e6b3"))
/* dual interface */ _IAgSpEnvRadEnergyMethodSpecify;
struct /* coclass */ AgSpEnvRadEnergyValues;
struct __declspec(uuid("289aaa6b-95bf-48b5-9804-93f7c7f9b2e6"))
/* dual interface */ _IAgSpEnvRadEnergyValues;
struct /* coclass */ AgSpEnvRadiationEnvironment;
struct __declspec(uuid("6f9452f3-2b85-40ec-bd3f-3bf0db802192"))
/* dual interface */ _IAgSpEnvRadiationEnvironment;
struct /* coclass */ AgSpEnvMagFieldGfx;
struct __declspec(uuid("a28d943f-c68b-4a16-9e5a-cc2f25ca5d77"))
/* dual interface */ _IAgSpEnvMagFieldGfx;
struct /* coclass */ AgSpEnvScenExtVO;
struct __declspec(uuid("79cbe81c-d8d4-49c9-8d0f-e906ac88c8de"))
/* dual interface */ _IAgSpEnvScenExtVO;
struct /* coclass */ AgSpEnvScenSpaceEnvironment;
struct __declspec(uuid("146df1ea-915c-41ae-9c51-0096e430d336"))
/* dual interface */ _IAgSpEnvScenSpaceEnvironment;
struct /* coclass */ AgVeSpEnvRadDoseRateElement;
struct __declspec(uuid("aa1fcb59-a56c-414f-83ee-af6f4f3731b2"))
/* dual interface */ _IAgVeSpEnvRadDoseRateElement;
struct /* coclass */ AgVeSpEnvRadDoseRateCollection;
struct /* coclass */ AgSpEnvSAAContour;
struct __declspec(uuid("0c706d48-4ce5-4ac8-b72a-739f0b4cbe3e"))
/* dual interface */ _IAgSpEnvSAAContour;
struct /* coclass */ AgVeSpEnvVehTemperature;
struct __declspec(uuid("ab40efae-2a1f-4a0e-a9e0-cbb70a146863"))
/* dual interface */ _IAgVeSpEnvVehTemperature;
struct /* coclass */ AgVeSpEnvParticleFlux;
struct __declspec(uuid("7fcb6826-2ab8-4b86-b102-85f7ebcc2f3d"))
/* dual interface */ _IAgVeSpEnvParticleFlux;
struct /* coclass */ AgVeSpEnvMagneticField;
struct __declspec(uuid("d50eed58-47a7-4dfc-9d91-f095f431f8db"))
/* dual interface */ _IAgVeSpEnvMagneticField;
struct /* coclass */ AgVeSpEnvRadiation;
struct __declspec(uuid("0399471a-f233-4ae9-9179-94ddb3989844"))
/* dual interface */ _IAgVeSpEnvRadiation;
struct /* coclass */ AgVeSpEnvMagFieldLine;
struct __declspec(uuid("eee2754f-4857-43d6-b2dd-0615b531b3e8"))
/* dual interface */ _IAgVeSpEnvMagFieldLine;
struct /* coclass */ AgVeSpEnvGraphics;
struct __declspec(uuid("3a1d8a69-c98b-438c-8b17-e7eae9cc1ae0"))
/* dual interface */ _IAgVeSpEnvGraphics;
struct /* coclass */ AgVeSpEnvSpaceEnvironment;
struct __declspec(uuid("1d2022d8-bc6d-4d6d-855b-b361715e17b1"))
/* dual interface */ _IAgVeSpEnvSpaceEnvironment;
struct /* coclass */ AgCvSelectedGridPoint;
struct __declspec(uuid("f87afcbe-c1bd-44d7-8046-890d5a6b1c6a"))
/* dual interface */ _IAgCvSelectedGridPoint;
struct __declspec(uuid("ccdc3769-15ac-4077-b96f-1c352cb53256"))
/* interface */ IAgCvSelectedGridPoint;
struct /* coclass */ AgCvGridPointSelection;
struct /* coclass */ AgCelestialBodyCollection;
struct /* coclass */ AgCelestialBodyInfo;
struct __declspec(uuid("33614137-1a4c-4a7c-9dcc-1a2773fa9c00"))
/* dual interface */ _IAgCelestialBodyInfo;
struct /* coclass */ AgStkCentralBodyEllipsoid;
struct __declspec(uuid("5bf7ff56-2708-429e-be14-c2b3e46ae07e"))
/* dual interface */ _IAgStkCentralBodyEllipsoid;
struct /* coclass */ AgStkCentralBody;
struct __declspec(uuid("fca3e943-ab8f-467d-802d-8bc5171257ce"))
/* dual interface */ _IAgStkCentralBody;
struct /* coclass */ AgStkCentralBodyCollection;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAgStkObjectRootEvents, __uuidof(IAgStkObjectRootEvents));
_COM_SMARTPTR_TYPEDEF(IAgScenarioBeforeSaveEventArgs, __uuidof(IAgScenarioBeforeSaveEventArgs));
_COM_SMARTPTR_TYPEDEF(IAgPctCmpltEventArgs, __uuidof(IAgPctCmpltEventArgs));
_COM_SMARTPTR_TYPEDEF(IAgStkObjectChangedEventArgs, __uuidof(IAgStkObjectChangedEventArgs));
_COM_SMARTPTR_TYPEDEF(IAgStdMil2525bSymbols, __uuidof(IAgStdMil2525bSymbols));
_COM_SMARTPTR_TYPEDEF(IAgAvailableFeatures, __uuidof(IAgAvailableFeatures));
_COM_SMARTPTR_TYPEDEF(IAgStkCentralBodyEllipsoid, __uuidof(IAgStkCentralBodyEllipsoid));
_COM_SMARTPTR_TYPEDEF(IAgStkCentralBody, __uuidof(IAgStkCentralBody));
_COM_SMARTPTR_TYPEDEF(IAgStkCentralBodyCollection, __uuidof(IAgStkCentralBodyCollection));
_COM_SMARTPTR_TYPEDEF(IAgDataProviderInfo, __uuidof(IAgDataProviderInfo));
_COM_SMARTPTR_TYPEDEF(IAgDrDataSet, __uuidof(IAgDrDataSet));
_COM_SMARTPTR_TYPEDEF(IAgDrDataSetCollection, __uuidof(IAgDrDataSetCollection));
_COM_SMARTPTR_TYPEDEF(IAgDrInterval, __uuidof(IAgDrInterval));
_COM_SMARTPTR_TYPEDEF(IAgDrIntervalCollection, __uuidof(IAgDrIntervalCollection));
_COM_SMARTPTR_TYPEDEF(IAgDrSubSection, __uuidof(IAgDrSubSection));
_COM_SMARTPTR_TYPEDEF(IAgDrSubSectionCollection, __uuidof(IAgDrSubSectionCollection));
_COM_SMARTPTR_TYPEDEF(IAgDrTextMessage, __uuidof(IAgDrTextMessage));
_COM_SMARTPTR_TYPEDEF(IAgDrResult, __uuidof(IAgDrResult));
_COM_SMARTPTR_TYPEDEF(IAgDrTimeArrayElements, __uuidof(IAgDrTimeArrayElements));
_COM_SMARTPTR_TYPEDEF(IAgDataPrvTimeVar, __uuidof(IAgDataPrvTimeVar));
_COM_SMARTPTR_TYPEDEF(IAgDataPrvInterval, __uuidof(IAgDataPrvInterval));
_COM_SMARTPTR_TYPEDEF(IAgDataPrvFixed, __uuidof(IAgDataPrvFixed));
_COM_SMARTPTR_TYPEDEF(IAgDataProviderCollection, __uuidof(IAgDataProviderCollection));
_COM_SMARTPTR_TYPEDEF(IAgFmSatisfaction, __uuidof(IAgFmSatisfaction));
_COM_SMARTPTR_TYPEDEF(IAgFmDefinition, __uuidof(IAgFmDefinition));
_COM_SMARTPTR_TYPEDEF(IAgFmDefinitionData, __uuidof(IAgFmDefinitionData));
_COM_SMARTPTR_TYPEDEF(IAgFmDefCompute, __uuidof(IAgFmDefCompute));
_COM_SMARTPTR_TYPEDEF(IAgFmDefAccessConstraint, __uuidof(IAgFmDefAccessConstraint));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxRampColor, __uuidof(IAgFmGfxRampColor));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxLevelAttributesElement, __uuidof(IAgFmGfxLevelAttributesElement));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxLevelAttributesCollection, __uuidof(IAgFmGfxLevelAttributesCollection));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxColorOptions, __uuidof(IAgFmGfxColorOptions));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxTextOptions, __uuidof(IAgFmGfxTextOptions));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxRangeColorOptions, __uuidof(IAgFmGfxRangeColorOptions));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxPositionOnMap, __uuidof(IAgFmGfxPositionOnMap));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxLegendWindow, __uuidof(IAgFmGfxLegendWindow));
_COM_SMARTPTR_TYPEDEF(IAgFmVOLegendWindow, __uuidof(IAgFmVOLegendWindow));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxLegend, __uuidof(IAgFmGfxLegend));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxContours, __uuidof(IAgFmGfxContours));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxAttributes, __uuidof(IAgFmGfxAttributes));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxAttributesAnimation, __uuidof(IAgFmGfxAttributesAnimation));
_COM_SMARTPTR_TYPEDEF(IAgFmGraphics, __uuidof(IAgFmGraphics));
_COM_SMARTPTR_TYPEDEF(IAgObjectCoverageFOM, __uuidof(IAgObjectCoverageFOM));
_COM_SMARTPTR_TYPEDEF(IAgStkAccessGraphics, __uuidof(IAgStkAccessGraphics));
_COM_SMARTPTR_TYPEDEF(IAgStkAccessAdvanced, __uuidof(IAgStkAccessAdvanced));
_COM_SMARTPTR_TYPEDEF(IAgVODataDisplayElement, __uuidof(IAgVODataDisplayElement));
_COM_SMARTPTR_TYPEDEF(IAgVODataDisplayCollection, __uuidof(IAgVODataDisplayCollection));
_COM_SMARTPTR_TYPEDEF(IAgIntervalCollection, __uuidof(IAgIntervalCollection));
_COM_SMARTPTR_TYPEDEF(IAgAccessInterval, __uuidof(IAgAccessInterval));
_COM_SMARTPTR_TYPEDEF(IAgStkAccess, __uuidof(IAgStkAccess));
_COM_SMARTPTR_TYPEDEF(IAgAccessConstraint, __uuidof(IAgAccessConstraint));
_COM_SMARTPTR_TYPEDEF(IAgAccessConstraintCollection, __uuidof(IAgAccessConstraintCollection));
_COM_SMARTPTR_TYPEDEF(IAgOnePtAccessConstraint, __uuidof(IAgOnePtAccessConstraint));
_COM_SMARTPTR_TYPEDEF(IAgOnePtAccessConstraintCollection, __uuidof(IAgOnePtAccessConstraintCollection));
_COM_SMARTPTR_TYPEDEF(IAgOnePtAccessResult, __uuidof(IAgOnePtAccessResult));
_COM_SMARTPTR_TYPEDEF(IAgOnePtAccessResultCollection, __uuidof(IAgOnePtAccessResultCollection));
_COM_SMARTPTR_TYPEDEF(IAgOnePtAccess, __uuidof(IAgOnePtAccess));
_COM_SMARTPTR_TYPEDEF(IAgLifetimeInformation, __uuidof(IAgLifetimeInformation));
_COM_SMARTPTR_TYPEDEF(IAgAnimation, __uuidof(IAgAnimation));
_COM_SMARTPTR_TYPEDEF(_IAgLevelAttribute, __uuidof(_IAgLevelAttribute));
_COM_SMARTPTR_TYPEDEF(IAgLevelAttribute, __uuidof(IAgLevelAttribute));
_COM_SMARTPTR_TYPEDEF(IAgLevelAttributeCollection, __uuidof(IAgLevelAttributeCollection));
_COM_SMARTPTR_TYPEDEF(_IAgBasicAzElMask, __uuidof(_IAgBasicAzElMask));
_COM_SMARTPTR_TYPEDEF(IAgBasicAzElMask, __uuidof(IAgBasicAzElMask));
_COM_SMARTPTR_TYPEDEF(IAgGfxRangeContours, __uuidof(IAgGfxRangeContours));
_COM_SMARTPTR_TYPEDEF(IAgLabelNote, __uuidof(IAgLabelNote));
_COM_SMARTPTR_TYPEDEF(IAgLabelNoteCollection, __uuidof(IAgLabelNoteCollection));
_COM_SMARTPTR_TYPEDEF(_IAgFaGraphics, __uuidof(_IAgFaGraphics));
_COM_SMARTPTR_TYPEDEF(IAgFaGraphics, __uuidof(IAgFaGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgGfxRangeContours, __uuidof(_IAgGfxRangeContours));
_COM_SMARTPTR_TYPEDEF(_IAgAccessConstraint, __uuidof(_IAgAccessConstraint));
_COM_SMARTPTR_TYPEDEF(IAgAccessConstraint2, __uuidof(IAgAccessConstraint2));
_COM_SMARTPTR_TYPEDEF(IAgVOBorderWall, __uuidof(IAgVOBorderWall));
_COM_SMARTPTR_TYPEDEF(IAgVOLabelSwapDistance, __uuidof(IAgVOLabelSwapDistance));
_COM_SMARTPTR_TYPEDEF(_IAgVORangeContours, __uuidof(_IAgVORangeContours));
_COM_SMARTPTR_TYPEDEF(IAgVORangeContours, __uuidof(IAgVORangeContours));
_COM_SMARTPTR_TYPEDEF(_IAgVOOffsetRotate, __uuidof(_IAgVOOffsetRotate));
_COM_SMARTPTR_TYPEDEF(IAgVOOffsetRotate, __uuidof(IAgVOOffsetRotate));
_COM_SMARTPTR_TYPEDEF(_IAgVOOffsetTrans, __uuidof(_IAgVOOffsetTrans));
_COM_SMARTPTR_TYPEDEF(IAgVOOffsetTrans, __uuidof(IAgVOOffsetTrans));
_COM_SMARTPTR_TYPEDEF(_IAgVOOffsetAttach, __uuidof(_IAgVOOffsetAttach));
_COM_SMARTPTR_TYPEDEF(IAgVOOffsetAttach, __uuidof(IAgVOOffsetAttach));
_COM_SMARTPTR_TYPEDEF(_IAgVOOffsetLabel, __uuidof(_IAgVOOffsetLabel));
_COM_SMARTPTR_TYPEDEF(IAgVOOffsetLabel, __uuidof(IAgVOOffsetLabel));
_COM_SMARTPTR_TYPEDEF(_IAgVOOffset, __uuidof(_IAgVOOffset));
_COM_SMARTPTR_TYPEDEF(IAgVOOffset, __uuidof(IAgVOOffset));
_COM_SMARTPTR_TYPEDEF(_IAgVOMarkerShape, __uuidof(_IAgVOMarkerShape));
_COM_SMARTPTR_TYPEDEF(IAgVOMarkerData, __uuidof(IAgVOMarkerData));
_COM_SMARTPTR_TYPEDEF(IAgVOMarkerShape, __uuidof(IAgVOMarkerShape));
_COM_SMARTPTR_TYPEDEF(_IAgVOMarkerFile, __uuidof(_IAgVOMarkerFile));
_COM_SMARTPTR_TYPEDEF(IAgVOMarkerFile, __uuidof(IAgVOMarkerFile));
_COM_SMARTPTR_TYPEDEF(_IAgVOMarker, __uuidof(_IAgVOMarker));
_COM_SMARTPTR_TYPEDEF(IAgVOMarker, __uuidof(IAgVOMarker));
_COM_SMARTPTR_TYPEDEF(_IAgVODetailThreshold, __uuidof(_IAgVODetailThreshold));
_COM_SMARTPTR_TYPEDEF(IAgVODetailThreshold, __uuidof(IAgVODetailThreshold));
_COM_SMARTPTR_TYPEDEF(_IAgVOModelItem, __uuidof(_IAgVOModelItem));
_COM_SMARTPTR_TYPEDEF(IAgVOModelItem, __uuidof(IAgVOModelItem));
_COM_SMARTPTR_TYPEDEF(IAgVOModelData, __uuidof(IAgVOModelData));
_COM_SMARTPTR_TYPEDEF(IAgVOModelCollection, __uuidof(IAgVOModelCollection));
_COM_SMARTPTR_TYPEDEF(_IAgLabelNote, __uuidof(_IAgLabelNote));
_COM_SMARTPTR_TYPEDEF(IAgVORefCrdn, __uuidof(IAgVORefCrdn));
_COM_SMARTPTR_TYPEDEF(IAgVORefCrdnCollection, __uuidof(IAgVORefCrdnCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVOVector, __uuidof(_IAgVOVector));
_COM_SMARTPTR_TYPEDEF(IAgVOVector, __uuidof(IAgVOVector));
_COM_SMARTPTR_TYPEDEF(IAgVOModelTrans, __uuidof(IAgVOModelTrans));
_COM_SMARTPTR_TYPEDEF(IAgVOModelTransCollection, __uuidof(IAgVOModelTransCollection));
_COM_SMARTPTR_TYPEDEF(IAgVOModelArtic, __uuidof(IAgVOModelArtic));
_COM_SMARTPTR_TYPEDEF(IAgVOModel, __uuidof(IAgVOModel));
_COM_SMARTPTR_TYPEDEF(IAgPtTargetVOModel, __uuidof(IAgPtTargetVOModel));
_COM_SMARTPTR_TYPEDEF(IAgVOAzElMask, __uuidof(IAgVOAzElMask));
_COM_SMARTPTR_TYPEDEF(IAgVOVaporTrail, __uuidof(IAgVOVaporTrail));
_COM_SMARTPTR_TYPEDEF(_IAgTerrainNormSlopeAzimuth, __uuidof(_IAgTerrainNormSlopeAzimuth));
_COM_SMARTPTR_TYPEDEF(IAgTerrainNormData, __uuidof(IAgTerrainNormData));
_COM_SMARTPTR_TYPEDEF(IAgTerrainNormSlopeAzimuth, __uuidof(IAgTerrainNormSlopeAzimuth));
_COM_SMARTPTR_TYPEDEF(IAgDisplayTimesData, __uuidof(IAgDisplayTimesData));
_COM_SMARTPTR_TYPEDEF(_IAgStVO, __uuidof(_IAgStVO));
_COM_SMARTPTR_TYPEDEF(IAgStVO, __uuidof(IAgStVO));
_COM_SMARTPTR_TYPEDEF(_IAgStGraphics, __uuidof(_IAgStGraphics));
_COM_SMARTPTR_TYPEDEF(IAgStGraphics, __uuidof(IAgStGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgPlVO, __uuidof(_IAgPlVO));
_COM_SMARTPTR_TYPEDEF(IAgPlVO, __uuidof(IAgPlVO));
_COM_SMARTPTR_TYPEDEF(IAgOrbitDisplayData, __uuidof(IAgOrbitDisplayData));
_COM_SMARTPTR_TYPEDEF(_IAgPlGraphics, __uuidof(_IAgPlGraphics));
_COM_SMARTPTR_TYPEDEF(IAgPlGraphics, __uuidof(IAgPlGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgAreaTypePattern, __uuidof(_IAgAreaTypePattern));
_COM_SMARTPTR_TYPEDEF(IAgAreaTypePattern, __uuidof(IAgAreaTypePattern));
_COM_SMARTPTR_TYPEDEF(IAgAreaTypeData, __uuidof(IAgAreaTypeData));
_COM_SMARTPTR_TYPEDEF(IAgAreaTypePatternCollection, __uuidof(IAgAreaTypePatternCollection));
_COM_SMARTPTR_TYPEDEF(_IAgAreaTypeEllipse, __uuidof(_IAgAreaTypeEllipse));
_COM_SMARTPTR_TYPEDEF(IAgAreaTypeEllipse, __uuidof(IAgAreaTypeEllipse));
_COM_SMARTPTR_TYPEDEF(_IAgATVO, __uuidof(_IAgATVO));
_COM_SMARTPTR_TYPEDEF(IAgATVO, __uuidof(IAgATVO));
_COM_SMARTPTR_TYPEDEF(_IAgATGraphics, __uuidof(_IAgATGraphics));
_COM_SMARTPTR_TYPEDEF(IAgATGraphics, __uuidof(IAgATGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgVOAzElMask, __uuidof(_IAgVOAzElMask));
_COM_SMARTPTR_TYPEDEF(_IAgVOModelArtic, __uuidof(_IAgVOModelArtic));
_COM_SMARTPTR_TYPEDEF(_IAgVOModelTrans, __uuidof(_IAgVOModelTrans));
_COM_SMARTPTR_TYPEDEF(_IAgVOModelFile, __uuidof(_IAgVOModelFile));
_COM_SMARTPTR_TYPEDEF(IAgVOModelFile, __uuidof(IAgVOModelFile));
_COM_SMARTPTR_TYPEDEF(_IAgPlPosFile, __uuidof(_IAgPlPosFile));
_COM_SMARTPTR_TYPEDEF(IAgPositionSourceData, __uuidof(IAgPositionSourceData));
_COM_SMARTPTR_TYPEDEF(IAgPlPosFile, __uuidof(IAgPlPosFile));
_COM_SMARTPTR_TYPEDEF(_IAgPlPosCentralBody, __uuidof(_IAgPlPosCentralBody));
_COM_SMARTPTR_TYPEDEF(IAgPlPosCentralBody, __uuidof(IAgPlPosCentralBody));
_COM_SMARTPTR_TYPEDEF(_IAgPlOrbitDisplayTime, __uuidof(_IAgPlOrbitDisplayTime));
_COM_SMARTPTR_TYPEDEF(IAgPlOrbitDisplayTime, __uuidof(IAgPlOrbitDisplayTime));
_COM_SMARTPTR_TYPEDEF(IAgTimePeriodValue, __uuidof(IAgTimePeriodValue));
_COM_SMARTPTR_TYPEDEF(IAgScAnimationTimePeriod, __uuidof(IAgScAnimationTimePeriod));
_COM_SMARTPTR_TYPEDEF(IAgScAnimation, __uuidof(IAgScAnimation));
_COM_SMARTPTR_TYPEDEF(IAgScEarthData, __uuidof(IAgScEarthData));
_COM_SMARTPTR_TYPEDEF(IAgScGraphics, __uuidof(IAgScGraphics));
_COM_SMARTPTR_TYPEDEF(IAgTerrain, __uuidof(IAgTerrain));
_COM_SMARTPTR_TYPEDEF(IAgTerrainCollection, __uuidof(IAgTerrainCollection));
_COM_SMARTPTR_TYPEDEF(IAgScGenDb, __uuidof(IAgScGenDb));
_COM_SMARTPTR_TYPEDEF(IAgScGenDbCollection, __uuidof(IAgScGenDbCollection));
_COM_SMARTPTR_TYPEDEF(IAgScGlobeServerConfigData, __uuidof(IAgScGlobeServerConfigData));
_COM_SMARTPTR_TYPEDEF(IAgScGlobeServersCollection, __uuidof(IAgScGlobeServersCollection));
_COM_SMARTPTR_TYPEDEF(IAgSc3dFont, __uuidof(IAgSc3dFont));
_COM_SMARTPTR_TYPEDEF(IAgScVO, __uuidof(IAgScVO));
_COM_SMARTPTR_TYPEDEF(IAgCentralBodyTerrainCollectionElement, __uuidof(IAgCentralBodyTerrainCollectionElement));
_COM_SMARTPTR_TYPEDEF(IAgCentralBodyTerrainCollection, __uuidof(IAgCentralBodyTerrainCollection));
_COM_SMARTPTR_TYPEDEF(IAgTimePeriod, __uuidof(IAgTimePeriod));
_COM_SMARTPTR_TYPEDEF(IAgSpEnvRadEnergyMethodSpecify, __uuidof(IAgSpEnvRadEnergyMethodSpecify));
_COM_SMARTPTR_TYPEDEF(IAgSpEnvRadEnergyValues, __uuidof(IAgSpEnvRadEnergyValues));
_COM_SMARTPTR_TYPEDEF(IAgSpEnvRadiationEnvironment, __uuidof(IAgSpEnvRadiationEnvironment));
_COM_SMARTPTR_TYPEDEF(IAgSpEnvMagFieldGfx, __uuidof(IAgSpEnvMagFieldGfx));
_COM_SMARTPTR_TYPEDEF(IAgSpEnvScenExtVO, __uuidof(IAgSpEnvScenExtVO));
_COM_SMARTPTR_TYPEDEF(IAgSpEnvScenSpaceEnvironment, __uuidof(IAgSpEnvScenSpaceEnvironment));
_COM_SMARTPTR_TYPEDEF(IAgScenario, __uuidof(IAgScenario));
_COM_SMARTPTR_TYPEDEF(_IAgScAnimation, __uuidof(_IAgScAnimation));
_COM_SMARTPTR_TYPEDEF(_IAgScEarthData, __uuidof(_IAgScEarthData));
_COM_SMARTPTR_TYPEDEF(_IAgScGraphics, __uuidof(_IAgScGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgTerrain, __uuidof(_IAgTerrain));
_COM_SMARTPTR_TYPEDEF(_IAgScGenDb, __uuidof(_IAgScGenDb));
_COM_SMARTPTR_TYPEDEF(_IAgScVO, __uuidof(_IAgScVO));
_COM_SMARTPTR_TYPEDEF(_IAgSnComplexConicPattern, __uuidof(_IAgSnComplexConicPattern));
_COM_SMARTPTR_TYPEDEF(IAgSnPattern, __uuidof(IAgSnPattern));
_COM_SMARTPTR_TYPEDEF(IAgSnComplexConicPattern, __uuidof(IAgSnComplexConicPattern));
_COM_SMARTPTR_TYPEDEF(_IAgSnCustomPattern, __uuidof(_IAgSnCustomPattern));
_COM_SMARTPTR_TYPEDEF(IAgSnCustomPattern, __uuidof(IAgSnCustomPattern));
_COM_SMARTPTR_TYPEDEF(_IAgSnHalfPowerPattern, __uuidof(_IAgSnHalfPowerPattern));
_COM_SMARTPTR_TYPEDEF(IAgSnHalfPowerPattern, __uuidof(IAgSnHalfPowerPattern));
_COM_SMARTPTR_TYPEDEF(_IAgSnRectangularPattern, __uuidof(_IAgSnRectangularPattern));
_COM_SMARTPTR_TYPEDEF(IAgSnRectangularPattern, __uuidof(IAgSnRectangularPattern));
_COM_SMARTPTR_TYPEDEF(_IAgSnSARPattern, __uuidof(_IAgSnSARPattern));
_COM_SMARTPTR_TYPEDEF(IAgSnSARPattern, __uuidof(IAgSnSARPattern));
_COM_SMARTPTR_TYPEDEF(_IAgSnSimpleConicPattern, __uuidof(_IAgSnSimpleConicPattern));
_COM_SMARTPTR_TYPEDEF(IAgSnSimpleConicPattern, __uuidof(IAgSnSimpleConicPattern));
_COM_SMARTPTR_TYPEDEF(_IAgSnPtFixed, __uuidof(_IAgSnPtFixed));
_COM_SMARTPTR_TYPEDEF(IAgSnPointing, __uuidof(IAgSnPointing));
_COM_SMARTPTR_TYPEDEF(IAgSnPtFixed, __uuidof(IAgSnPtFixed));
_COM_SMARTPTR_TYPEDEF(_IAgSnPtFixedAxes, __uuidof(_IAgSnPtFixedAxes));
_COM_SMARTPTR_TYPEDEF(IAgSnPtFixedAxes, __uuidof(IAgSnPtFixedAxes));
_COM_SMARTPTR_TYPEDEF(_IAgSnPt3DModel, __uuidof(_IAgSnPt3DModel));
_COM_SMARTPTR_TYPEDEF(IAgSnPt3DModel, __uuidof(IAgSnPt3DModel));
_COM_SMARTPTR_TYPEDEF(_IAgSnPtSpinning, __uuidof(_IAgSnPtSpinning));
_COM_SMARTPTR_TYPEDEF(IAgSnPtSpinning, __uuidof(IAgSnPtSpinning));
_COM_SMARTPTR_TYPEDEF(IAgSnPtTrgtBsight, __uuidof(IAgSnPtTrgtBsight));
_COM_SMARTPTR_TYPEDEF(IAgAccessTime, __uuidof(IAgAccessTime));
_COM_SMARTPTR_TYPEDEF(IAgAccessTimeCollection, __uuidof(IAgAccessTimeCollection));
_COM_SMARTPTR_TYPEDEF(IAgScheduleTime, __uuidof(IAgScheduleTime));
_COM_SMARTPTR_TYPEDEF(IAgScheduleTimeCollection, __uuidof(IAgScheduleTimeCollection));
_COM_SMARTPTR_TYPEDEF(IAgSnTarget, __uuidof(IAgSnTarget));
_COM_SMARTPTR_TYPEDEF(IAgEventDetectionStrategy, __uuidof(IAgEventDetectionStrategy));
_COM_SMARTPTR_TYPEDEF(IAgAccessEventDetection, __uuidof(IAgAccessEventDetection));
_COM_SMARTPTR_TYPEDEF(IAgSamplingMethodStrategy, __uuidof(IAgSamplingMethodStrategy));
_COM_SMARTPTR_TYPEDEF(IAgAccessSampling, __uuidof(IAgAccessSampling));
_COM_SMARTPTR_TYPEDEF(IAgAccessAdvanced, __uuidof(IAgAccessAdvanced));
_COM_SMARTPTR_TYPEDEF(IAgSnAccessAdvanced, __uuidof(IAgSnAccessAdvanced));
_COM_SMARTPTR_TYPEDEF(_IAgSnPtExternal, __uuidof(_IAgSnPtExternal));
_COM_SMARTPTR_TYPEDEF(IAgSnPtExternal, __uuidof(IAgSnPtExternal));
_COM_SMARTPTR_TYPEDEF(_IAgSnPtTrgtBsightTrack, __uuidof(_IAgSnPtTrgtBsightTrack));
_COM_SMARTPTR_TYPEDEF(IAgSnPtTrgtBsightTrack, __uuidof(IAgSnPtTrgtBsightTrack));
_COM_SMARTPTR_TYPEDEF(_IAgSnPtTrgtBsightFixed, __uuidof(_IAgSnPtTrgtBsightFixed));
_COM_SMARTPTR_TYPEDEF(IAgSnPtTrgtBsightFixed, __uuidof(IAgSnPtTrgtBsightFixed));
_COM_SMARTPTR_TYPEDEF(_IAgSnTarget, __uuidof(_IAgSnTarget));
_COM_SMARTPTR_TYPEDEF(_IAgAccessTime, __uuidof(_IAgAccessTime));
_COM_SMARTPTR_TYPEDEF(_IAgScheduleTime, __uuidof(_IAgScheduleTime));
_COM_SMARTPTR_TYPEDEF(_IAgSnAzElMaskFile, __uuidof(_IAgSnAzElMaskFile));
_COM_SMARTPTR_TYPEDEF(IAgAzElMaskData, __uuidof(IAgAzElMaskData));
_COM_SMARTPTR_TYPEDEF(IAgSnAzElMaskFile, __uuidof(IAgSnAzElMaskFile));
_COM_SMARTPTR_TYPEDEF(IAgDisplayDistance, __uuidof(IAgDisplayDistance));
_COM_SMARTPTR_TYPEDEF(IAgSnProjection, __uuidof(IAgSnProjection));
_COM_SMARTPTR_TYPEDEF(_IAgSnGraphics, __uuidof(_IAgSnGraphics));
_COM_SMARTPTR_TYPEDEF(IAgSnGraphics, __uuidof(IAgSnGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgSnProjection, __uuidof(_IAgSnProjection));
_COM_SMARTPTR_TYPEDEF(_IAgSnProjDisplayDistance, __uuidof(_IAgSnProjDisplayDistance));
_COM_SMARTPTR_TYPEDEF(IAgSnProjDisplayDistance, __uuidof(IAgSnProjDisplayDistance));
_COM_SMARTPTR_TYPEDEF(IAgSnVOPulse, __uuidof(IAgSnVOPulse));
_COM_SMARTPTR_TYPEDEF(IAgSnVOOffset, __uuidof(IAgSnVOOffset));
_COM_SMARTPTR_TYPEDEF(IAgSnVOProjectionElement, __uuidof(IAgSnVOProjectionElement));
_COM_SMARTPTR_TYPEDEF(IAgSnVOSpaceProjectionCollection, __uuidof(IAgSnVOSpaceProjectionCollection));
_COM_SMARTPTR_TYPEDEF(IAgSnVOTargetProjectionCollection, __uuidof(IAgSnVOTargetProjectionCollection));
_COM_SMARTPTR_TYPEDEF(_IAgSnVO, __uuidof(_IAgSnVO));
_COM_SMARTPTR_TYPEDEF(IAgSnVO, __uuidof(IAgSnVO));
_COM_SMARTPTR_TYPEDEF(_IAgSnVOPulse, __uuidof(_IAgSnVOPulse));
_COM_SMARTPTR_TYPEDEF(_IAgSnVOOffset, __uuidof(_IAgSnVOOffset));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrTimeSlipRange, __uuidof(_IAgAccessCnstrTimeSlipRange));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrTimeSlipRange, __uuidof(IAgAccessCnstrTimeSlipRange));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrBackground, __uuidof(_IAgAccessCnstrBackground));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrBackground, __uuidof(IAgAccessCnstrBackground));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrGroundTrack, __uuidof(_IAgAccessCnstrGroundTrack));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrGroundTrack, __uuidof(IAgAccessCnstrGroundTrack));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrMinMax, __uuidof(_IAgAccessCnstrMinMax));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrMinMax, __uuidof(IAgAccessCnstrMinMax));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrCrdnCn, __uuidof(_IAgAccessCnstrCrdnCn));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrCrdnCn, __uuidof(IAgAccessCnstrCrdnCn));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrCbObstruction, __uuidof(_IAgAccessCnstrCbObstruction));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrCbObstruction, __uuidof(IAgAccessCnstrCbObstruction));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrAngle, __uuidof(_IAgAccessCnstrAngle));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrAngle, __uuidof(IAgAccessCnstrAngle));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrCondition, __uuidof(_IAgAccessCnstrCondition));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrCondition, __uuidof(IAgAccessCnstrCondition));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrIntervals, __uuidof(_IAgAccessCnstrIntervals));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrIntervals, __uuidof(IAgAccessCnstrIntervals));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrObjExAngle, __uuidof(_IAgAccessCnstrObjExAngle));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrObjExAngle, __uuidof(IAgAccessCnstrObjExAngle));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrZone, __uuidof(_IAgAccessCnstrZone));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrZone, __uuidof(IAgAccessCnstrZone));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrThirdBody, __uuidof(_IAgAccessCnstrThirdBody));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrThirdBody, __uuidof(IAgAccessCnstrThirdBody));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrExclZonesCollection, __uuidof(IAgAccessCnstrExclZonesCollection));
_COM_SMARTPTR_TYPEDEF(_IAgSnPtGrazingAlt, __uuidof(_IAgSnPtGrazingAlt));
_COM_SMARTPTR_TYPEDEF(IAgSnPtGrazingAlt, __uuidof(IAgSnPtGrazingAlt));
_COM_SMARTPTR_TYPEDEF(IAgATCommonTasks, __uuidof(IAgATCommonTasks));
_COM_SMARTPTR_TYPEDEF(IAgAreaTarget, __uuidof(IAgAreaTarget));
_COM_SMARTPTR_TYPEDEF(IAgDisplayTm, __uuidof(IAgDisplayTm));
_COM_SMARTPTR_TYPEDEF(IAgTargetGraphics, __uuidof(IAgTargetGraphics));
_COM_SMARTPTR_TYPEDEF(IAgPlCommonTasks, __uuidof(IAgPlCommonTasks));
_COM_SMARTPTR_TYPEDEF(IAgPlanet, __uuidof(IAgPlanet));
_COM_SMARTPTR_TYPEDEF(IAgSwath, __uuidof(IAgSwath));
_COM_SMARTPTR_TYPEDEF(IAgRfModelBase, __uuidof(IAgRfModelBase));
_COM_SMARTPTR_TYPEDEF(IAgCelestialBodyInfo, __uuidof(IAgCelestialBodyInfo));
_COM_SMARTPTR_TYPEDEF(IAgCelestialBodyCollection, __uuidof(IAgCelestialBodyCollection));
_COM_SMARTPTR_TYPEDEF(IAgSpatialState, __uuidof(IAgSpatialState));
_COM_SMARTPTR_TYPEDEF(IAgVeSpatialInfo, __uuidof(IAgVeSpatialInfo));
_COM_SMARTPTR_TYPEDEF(IAgProvideSpatialInfo, __uuidof(IAgProvideSpatialInfo));
_COM_SMARTPTR_TYPEDEF(_IAgATCommonTasks, __uuidof(_IAgATCommonTasks));
_COM_SMARTPTR_TYPEDEF(_IAgPlCommonTasks, __uuidof(_IAgPlCommonTasks));
_COM_SMARTPTR_TYPEDEF(_IAgSwath, __uuidof(_IAgSwath));
_COM_SMARTPTR_TYPEDEF(IAgStar, __uuidof(IAgStar));
_COM_SMARTPTR_TYPEDEF(_IAgDrTimeArrayElements, __uuidof(_IAgDrTimeArrayElements));
_COM_SMARTPTR_TYPEDEF(_IAgDrResult, __uuidof(_IAgDrResult));
_COM_SMARTPTR_TYPEDEF(_IAgDrSubSection, __uuidof(_IAgDrSubSection));
_COM_SMARTPTR_TYPEDEF(_IAgDrInterval, __uuidof(_IAgDrInterval));
_COM_SMARTPTR_TYPEDEF(_IAgDrDataSet, __uuidof(_IAgDrDataSet));
_COM_SMARTPTR_TYPEDEF(IAgDataPrvElement, __uuidof(IAgDataPrvElement));
_COM_SMARTPTR_TYPEDEF(IAgDataPrvElements, __uuidof(IAgDataPrvElements));
_COM_SMARTPTR_TYPEDEF(_IAgDataPrvFixed, __uuidof(_IAgDataPrvFixed));
_COM_SMARTPTR_TYPEDEF(IAgDataProvider, __uuidof(IAgDataProvider));
_COM_SMARTPTR_TYPEDEF(_IAgDataPrvTimeVar, __uuidof(_IAgDataPrvTimeVar));
_COM_SMARTPTR_TYPEDEF(_IAgDataPrvInterval, __uuidof(_IAgDataPrvInterval));
_COM_SMARTPTR_TYPEDEF(IAgDataProviders, __uuidof(IAgDataProviders));
_COM_SMARTPTR_TYPEDEF(_IAgDataProviderGroup, __uuidof(_IAgDataProviderGroup));
_COM_SMARTPTR_TYPEDEF(IAgDataProviderGroup, __uuidof(IAgDataProviderGroup));
_COM_SMARTPTR_TYPEDEF(_IAgDataPrvElement, __uuidof(_IAgDataPrvElement));
_COM_SMARTPTR_TYPEDEF(_IAgStkAccess, __uuidof(_IAgStkAccess));
_COM_SMARTPTR_TYPEDEF(_IAgStkAccessGraphics, __uuidof(_IAgStkAccessGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgStkAccessAdvanced, __uuidof(_IAgStkAccessAdvanced));
_COM_SMARTPTR_TYPEDEF(_IAgObjectCoverageFOM, __uuidof(_IAgObjectCoverageFOM));
_COM_SMARTPTR_TYPEDEF(_IAgScGlobeServerConfigData, __uuidof(_IAgScGlobeServerConfigData));
_COM_SMARTPTR_TYPEDEF(_IAgSc3dFont, __uuidof(_IAgSc3dFont));
_COM_SMARTPTR_TYPEDEF(_IAgVOBorderWall, __uuidof(_IAgVOBorderWall));
_COM_SMARTPTR_TYPEDEF(_IAgVORefCrdnVector, __uuidof(_IAgVORefCrdnVector));
_COM_SMARTPTR_TYPEDEF(IAgVORefCrdnVector, __uuidof(IAgVORefCrdnVector));
_COM_SMARTPTR_TYPEDEF(_IAgVORefCrdnAxes, __uuidof(_IAgVORefCrdnAxes));
_COM_SMARTPTR_TYPEDEF(IAgVORefCrdnAxes, __uuidof(IAgVORefCrdnAxes));
_COM_SMARTPTR_TYPEDEF(_IAgVORefCrdnAngle, __uuidof(_IAgVORefCrdnAngle));
_COM_SMARTPTR_TYPEDEF(IAgVORefCrdnAngle, __uuidof(IAgVORefCrdnAngle));
_COM_SMARTPTR_TYPEDEF(_IAgVORefCrdnPlane, __uuidof(_IAgVORefCrdnPlane));
_COM_SMARTPTR_TYPEDEF(IAgVORefCrdnPlane, __uuidof(IAgVORefCrdnPlane));
_COM_SMARTPTR_TYPEDEF(_IAgVORefCrdnPoint, __uuidof(_IAgVORefCrdnPoint));
_COM_SMARTPTR_TYPEDEF(IAgVORefCrdnPoint, __uuidof(IAgVORefCrdnPoint));
_COM_SMARTPTR_TYPEDEF(_IAgTargetGraphics, __uuidof(_IAgTargetGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgPtTargetVOModel, __uuidof(_IAgPtTargetVOModel));
_COM_SMARTPTR_TYPEDEF(IAgLLAPosition, __uuidof(IAgLLAPosition));
_COM_SMARTPTR_TYPEDEF(_IAgLLAPosition, __uuidof(_IAgLLAPosition));
_COM_SMARTPTR_TYPEDEF(_IAgVODataDisplayElement, __uuidof(_IAgVODataDisplayElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeInitialState, __uuidof(_IAgVeInitialState));
_COM_SMARTPTR_TYPEDEF(IAgVeInitialState, __uuidof(IAgVeInitialState));
_COM_SMARTPTR_TYPEDEF(_IAgVeHPOPCentralBodyGravity, __uuidof(_IAgVeHPOPCentralBodyGravity));
_COM_SMARTPTR_TYPEDEF(IAgVeHPOPCentralBodyGravity, __uuidof(IAgVeHPOPCentralBodyGravity));
_COM_SMARTPTR_TYPEDEF(_IAgVeRadiationPressure, __uuidof(_IAgVeRadiationPressure));
_COM_SMARTPTR_TYPEDEF(IAgVeRadiationPressure, __uuidof(IAgVeRadiationPressure));
_COM_SMARTPTR_TYPEDEF(IAgSRPModelBase, __uuidof(IAgSRPModelBase));
_COM_SMARTPTR_TYPEDEF(IAgVeHPOPSRPModel, __uuidof(IAgVeHPOPSRPModel));
_COM_SMARTPTR_TYPEDEF(_IAgVeHPOPSolarRadiationPressure, __uuidof(_IAgVeHPOPSolarRadiationPressure));
_COM_SMARTPTR_TYPEDEF(IAgVeHPOPSolarRadiationPressure, __uuidof(IAgVeHPOPSolarRadiationPressure));
_COM_SMARTPTR_TYPEDEF(_IAgVeSolarFluxGeoMagEnterManually, __uuidof(_IAgVeSolarFluxGeoMagEnterManually));
_COM_SMARTPTR_TYPEDEF(IAgVeSolarFluxGeoMag, __uuidof(IAgVeSolarFluxGeoMag));
_COM_SMARTPTR_TYPEDEF(IAgVeSolarFluxGeoMagEnterManually, __uuidof(IAgVeSolarFluxGeoMagEnterManually));
_COM_SMARTPTR_TYPEDEF(_IAgVeSolarFluxGeoMagUseFile, __uuidof(_IAgVeSolarFluxGeoMagUseFile));
_COM_SMARTPTR_TYPEDEF(IAgVeSolarFluxGeoMagUseFile, __uuidof(IAgVeSolarFluxGeoMagUseFile));
_COM_SMARTPTR_TYPEDEF(_IAgVeHPOPForceModelDrag, __uuidof(_IAgVeHPOPForceModelDrag));
_COM_SMARTPTR_TYPEDEF(IAgVeHPOPForceModelDrag, __uuidof(IAgVeHPOPForceModelDrag));
_COM_SMARTPTR_TYPEDEF(_IAgVeHPOPForceModelDragOptions, __uuidof(_IAgVeHPOPForceModelDragOptions));
_COM_SMARTPTR_TYPEDEF(IAgVeHPOPForceModelDragOptions, __uuidof(IAgVeHPOPForceModelDragOptions));
_COM_SMARTPTR_TYPEDEF(_IAgVeHPOPSolarRadiationPressureOptions, __uuidof(_IAgVeHPOPSolarRadiationPressureOptions));
_COM_SMARTPTR_TYPEDEF(IAgVeHPOPSolarRadiationPressureOptions, __uuidof(IAgVeHPOPSolarRadiationPressureOptions));
_COM_SMARTPTR_TYPEDEF(_IAgVeStatic, __uuidof(_IAgVeStatic));
_COM_SMARTPTR_TYPEDEF(IAgVeStatic, __uuidof(IAgVeStatic));
_COM_SMARTPTR_TYPEDEF(_IAgVeSolidTides, __uuidof(_IAgVeSolidTides));
_COM_SMARTPTR_TYPEDEF(IAgVeSolidTides, __uuidof(IAgVeSolidTides));
_COM_SMARTPTR_TYPEDEF(_IAgVeOceanTides, __uuidof(_IAgVeOceanTides));
_COM_SMARTPTR_TYPEDEF(IAgVeOceanTides, __uuidof(IAgVeOceanTides));
_COM_SMARTPTR_TYPEDEF(_IAgVePluginSettings, __uuidof(_IAgVePluginSettings));
_COM_SMARTPTR_TYPEDEF(IAgVePluginSettings, __uuidof(IAgVePluginSettings));
_COM_SMARTPTR_TYPEDEF(_IAgVePluginPropagator, __uuidof(_IAgVePluginPropagator));
_COM_SMARTPTR_TYPEDEF(IAgVePluginPropagator, __uuidof(IAgVePluginPropagator));
_COM_SMARTPTR_TYPEDEF(_IAgVeHPOPForceModelMoreOptions, __uuidof(_IAgVeHPOPForceModelMoreOptions));
_COM_SMARTPTR_TYPEDEF(IAgVeHPOPForceModelMoreOptions, __uuidof(IAgVeHPOPForceModelMoreOptions));
_COM_SMARTPTR_TYPEDEF(IAgVeThirdBodyGravityElement, __uuidof(IAgVeThirdBodyGravityElement));
_COM_SMARTPTR_TYPEDEF(IAgVeThirdBodyGravityCollection, __uuidof(IAgVeThirdBodyGravityCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeEclipsingBodies, __uuidof(IAgVeEclipsingBodies));
_COM_SMARTPTR_TYPEDEF(_IAgVeHPOPForceModel, __uuidof(_IAgVeHPOPForceModel));
_COM_SMARTPTR_TYPEDEF(IAgVeHPOPForceModel, __uuidof(IAgVeHPOPForceModel));
_COM_SMARTPTR_TYPEDEF(_IAgVeStepSizeControl, __uuidof(_IAgVeStepSizeControl));
_COM_SMARTPTR_TYPEDEF(IAgVeStepSizeControl, __uuidof(IAgVeStepSizeControl));
_COM_SMARTPTR_TYPEDEF(_IAgVeTimeRegularization, __uuidof(_IAgVeTimeRegularization));
_COM_SMARTPTR_TYPEDEF(IAgVeTimeRegularization, __uuidof(IAgVeTimeRegularization));
_COM_SMARTPTR_TYPEDEF(_IAgVeInterpolation, __uuidof(_IAgVeInterpolation));
_COM_SMARTPTR_TYPEDEF(IAgVeInterpolation, __uuidof(IAgVeInterpolation));
_COM_SMARTPTR_TYPEDEF(_IAgVeIntegrator, __uuidof(_IAgVeIntegrator));
_COM_SMARTPTR_TYPEDEF(IAgVeIntegrator, __uuidof(IAgVeIntegrator));
_COM_SMARTPTR_TYPEDEF(_IAgVeGravity, __uuidof(_IAgVeGravity));
_COM_SMARTPTR_TYPEDEF(IAgVeGravity, __uuidof(IAgVeGravity));
_COM_SMARTPTR_TYPEDEF(_IAgVePositionVelocityElement, __uuidof(_IAgVePositionVelocityElement));
_COM_SMARTPTR_TYPEDEF(IAgVePositionVelocityElement, __uuidof(IAgVePositionVelocityElement));
_COM_SMARTPTR_TYPEDEF(IAgVePositionVelocityCollection, __uuidof(IAgVePositionVelocityCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeCorrelationListElement, __uuidof(IAgVeCorrelationListElement));
_COM_SMARTPTR_TYPEDEF(IAgVeCorrelationListCollection, __uuidof(IAgVeCorrelationListCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVeCorrelationListElement, __uuidof(_IAgVeCorrelationListElement));
_COM_SMARTPTR_TYPEDEF(IAgVeConsiderAnalysisCollectionElement, __uuidof(IAgVeConsiderAnalysisCollectionElement));
_COM_SMARTPTR_TYPEDEF(IAgVeConsiderAnalysisCollection, __uuidof(IAgVeConsiderAnalysisCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVeCovariance, __uuidof(_IAgVeCovariance));
_COM_SMARTPTR_TYPEDEF(IAgVeCovariance, __uuidof(IAgVeCovariance));
_COM_SMARTPTR_TYPEDEF(_IAgVeJxInitialState, __uuidof(_IAgVeJxInitialState));
_COM_SMARTPTR_TYPEDEF(IAgVeJxInitialState, __uuidof(IAgVeJxInitialState));
_COM_SMARTPTR_TYPEDEF(_IAgVeLOPCentralBodyGravity, __uuidof(_IAgVeLOPCentralBodyGravity));
_COM_SMARTPTR_TYPEDEF(IAgVeLOPCentralBodyGravity, __uuidof(IAgVeLOPCentralBodyGravity));
_COM_SMARTPTR_TYPEDEF(_IAgVeThirdBodyGravityElement, __uuidof(_IAgVeThirdBodyGravityElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeExpDensModelParams, __uuidof(_IAgVeExpDensModelParams));
_COM_SMARTPTR_TYPEDEF(IAgVeExpDensModelParams, __uuidof(IAgVeExpDensModelParams));
_COM_SMARTPTR_TYPEDEF(_IAgVeAdvanced, __uuidof(_IAgVeAdvanced));
_COM_SMARTPTR_TYPEDEF(IAgVeAdvanced, __uuidof(IAgVeAdvanced));
_COM_SMARTPTR_TYPEDEF(_IAgVeLOPForceModelDrag, __uuidof(_IAgVeLOPForceModelDrag));
_COM_SMARTPTR_TYPEDEF(IAgVeLOPForceModelDrag, __uuidof(IAgVeLOPForceModelDrag));
_COM_SMARTPTR_TYPEDEF(_IAgVeLOPSolarRadiationPressure, __uuidof(_IAgVeLOPSolarRadiationPressure));
_COM_SMARTPTR_TYPEDEF(IAgVeLOPSolarRadiationPressure, __uuidof(IAgVeLOPSolarRadiationPressure));
_COM_SMARTPTR_TYPEDEF(_IAgVePhysicalData, __uuidof(_IAgVePhysicalData));
_COM_SMARTPTR_TYPEDEF(IAgVePhysicalData, __uuidof(IAgVePhysicalData));
_COM_SMARTPTR_TYPEDEF(IAgVeThirdBodyGravity, __uuidof(IAgVeThirdBodyGravity));
_COM_SMARTPTR_TYPEDEF(_IAgVeLOPForceModel, __uuidof(_IAgVeLOPForceModel));
_COM_SMARTPTR_TYPEDEF(IAgVeLOPForceModel, __uuidof(IAgVeLOPForceModel));
_COM_SMARTPTR_TYPEDEF(IAgVeSPICESegment, __uuidof(IAgVeSPICESegment));
_COM_SMARTPTR_TYPEDEF(IAgVeSegmentsCollection, __uuidof(IAgVeSegmentsCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorHPOP, __uuidof(_IAgVePropagatorHPOP));
_COM_SMARTPTR_TYPEDEF(IAgVePropagator, __uuidof(IAgVePropagator));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorHPOP, __uuidof(IAgVePropagatorHPOP));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorJ2Perturbation, __uuidof(_IAgVePropagatorJ2Perturbation));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorJ2Perturbation, __uuidof(IAgVePropagatorJ2Perturbation));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorJ4Perturbation, __uuidof(_IAgVePropagatorJ4Perturbation));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorJ4Perturbation, __uuidof(IAgVePropagatorJ4Perturbation));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorLOP, __uuidof(_IAgVePropagatorLOP));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorLOP, __uuidof(IAgVePropagatorLOP));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4Segment, __uuidof(IAgVeSGP4Segment));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4LoadData, __uuidof(IAgVeSGP4LoadData));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4SegmentCollection, __uuidof(IAgVeSGP4SegmentCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4AutoUpdateProperties, __uuidof(IAgVeSGP4AutoUpdateProperties));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4AutoUpdateFileSource, __uuidof(IAgVeSGP4AutoUpdateFileSource));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4AutoUpdateOnlineSource, __uuidof(IAgVeSGP4AutoUpdateOnlineSource));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4AutoUpdate, __uuidof(IAgVeSGP4AutoUpdate));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorSGP4CommonTasks, __uuidof(IAgVePropagatorSGP4CommonTasks));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4PropagatorSettings, __uuidof(IAgVeSGP4PropagatorSettings));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorSGP4, __uuidof(_IAgVePropagatorSGP4));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorSGP4, __uuidof(IAgVePropagatorSGP4));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorSPICE, __uuidof(_IAgVePropagatorSPICE));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorSPICE, __uuidof(IAgVePropagatorSPICE));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorStkExternal, __uuidof(_IAgVePropagatorStkExternal));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorStkExternal, __uuidof(IAgVePropagatorStkExternal));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorTwoBody, __uuidof(_IAgVePropagatorTwoBody));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorTwoBody, __uuidof(IAgVePropagatorTwoBody));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorUserExternal, __uuidof(_IAgVePropagatorUserExternal));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorUserExternal, __uuidof(IAgVePropagatorUserExternal));
_COM_SMARTPTR_TYPEDEF(_IAgVeLvInitialState, __uuidof(_IAgVeLvInitialState));
_COM_SMARTPTR_TYPEDEF(IAgVeLvInitialState, __uuidof(IAgVeLvInitialState));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorSimpleAscent, __uuidof(_IAgVePropagatorSimpleAscent));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorSimpleAscent, __uuidof(IAgVePropagatorSimpleAscent));
_COM_SMARTPTR_TYPEDEF(_IAgVeWaypointsElement, __uuidof(_IAgVeWaypointsElement));
_COM_SMARTPTR_TYPEDEF(IAgVeWaypointsElement, __uuidof(IAgVeWaypointsElement));
_COM_SMARTPTR_TYPEDEF(IAgVeWaypointsCollection, __uuidof(IAgVeWaypointsCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVeLaunchLLA, __uuidof(_IAgVeLaunchLLA));
_COM_SMARTPTR_TYPEDEF(IAgVeLaunch, __uuidof(IAgVeLaunch));
_COM_SMARTPTR_TYPEDEF(IAgVeLaunchLLA, __uuidof(IAgVeLaunchLLA));
_COM_SMARTPTR_TYPEDEF(_IAgVeLaunchLLR, __uuidof(_IAgVeLaunchLLR));
_COM_SMARTPTR_TYPEDEF(IAgVeLaunchLLR, __uuidof(IAgVeLaunchLLR));
_COM_SMARTPTR_TYPEDEF(_IAgVeImpactLLA, __uuidof(_IAgVeImpactLLA));
_COM_SMARTPTR_TYPEDEF(IAgVeImpact, __uuidof(IAgVeImpact));
_COM_SMARTPTR_TYPEDEF(IAgVeImpactLLA, __uuidof(IAgVeImpactLLA));
_COM_SMARTPTR_TYPEDEF(_IAgVeImpactLLR, __uuidof(_IAgVeImpactLLR));
_COM_SMARTPTR_TYPEDEF(IAgVeImpactLLR, __uuidof(IAgVeImpactLLR));
_COM_SMARTPTR_TYPEDEF(_IAgVeLaunchControlFixedApogeeAlt, __uuidof(_IAgVeLaunchControlFixedApogeeAlt));
_COM_SMARTPTR_TYPEDEF(IAgVeLaunchControl, __uuidof(IAgVeLaunchControl));
_COM_SMARTPTR_TYPEDEF(IAgVeLaunchControlFixedApogeeAlt, __uuidof(IAgVeLaunchControlFixedApogeeAlt));
_COM_SMARTPTR_TYPEDEF(_IAgVeLaunchControlFixedDeltaV, __uuidof(_IAgVeLaunchControlFixedDeltaV));
_COM_SMARTPTR_TYPEDEF(IAgVeLaunchControlFixedDeltaV, __uuidof(IAgVeLaunchControlFixedDeltaV));
_COM_SMARTPTR_TYPEDEF(_IAgVeLaunchControlFixedDeltaVMinEcc, __uuidof(_IAgVeLaunchControlFixedDeltaVMinEcc));
_COM_SMARTPTR_TYPEDEF(IAgVeLaunchControlFixedDeltaVMinEcc, __uuidof(IAgVeLaunchControlFixedDeltaVMinEcc));
_COM_SMARTPTR_TYPEDEF(_IAgVeLaunchControlFixedTimeOfFlight, __uuidof(_IAgVeLaunchControlFixedTimeOfFlight));
_COM_SMARTPTR_TYPEDEF(IAgVeLaunchControlFixedTimeOfFlight, __uuidof(IAgVeLaunchControlFixedTimeOfFlight));
_COM_SMARTPTR_TYPEDEF(_IAgVeImpactLocationLaunchAzEl, __uuidof(_IAgVeImpactLocationLaunchAzEl));
_COM_SMARTPTR_TYPEDEF(IAgVeImpactLocation, __uuidof(IAgVeImpactLocation));
_COM_SMARTPTR_TYPEDEF(IAgVeImpactLocationLaunchAzEl, __uuidof(IAgVeImpactLocationLaunchAzEl));
_COM_SMARTPTR_TYPEDEF(_IAgVeImpactLocationPoint, __uuidof(_IAgVeImpactLocationPoint));
_COM_SMARTPTR_TYPEDEF(IAgVeImpactLocationPoint, __uuidof(IAgVeImpactLocationPoint));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorBallistic, __uuidof(_IAgVePropagatorBallistic));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorBallistic, __uuidof(IAgVePropagatorBallistic));
_COM_SMARTPTR_TYPEDEF(IAgVeWayPtAltitudeRef, __uuidof(IAgVeWayPtAltitudeRef));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorGreatArc, __uuidof(_IAgVePropagatorGreatArc));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorGreatArc, __uuidof(IAgVePropagatorGreatArc));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4Segment, __uuidof(_IAgVeSGP4Segment));
_COM_SMARTPTR_TYPEDEF(_IAgVeThirdBodyGravity, __uuidof(_IAgVeThirdBodyGravity));
_COM_SMARTPTR_TYPEDEF(_IAgVeConsiderAnalysisCollectionElement, __uuidof(_IAgVeConsiderAnalysisCollectionElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeSPICESegment, __uuidof(_IAgVeSPICESegment));
_COM_SMARTPTR_TYPEDEF(_IAgVeWayPtAltitudeRefTerrain, __uuidof(_IAgVeWayPtAltitudeRefTerrain));
_COM_SMARTPTR_TYPEDEF(IAgVeWayPtAltitudeRefTerrain, __uuidof(IAgVeWayPtAltitudeRefTerrain));
_COM_SMARTPTR_TYPEDEF(_IAgVeWayPtAltitudeRef, __uuidof(_IAgVeWayPtAltitudeRef));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4LoadFile, __uuidof(_IAgVeSGP4LoadFile));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4LoadFile, __uuidof(IAgVeSGP4LoadFile));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4OnlineLoad, __uuidof(_IAgVeSGP4OnlineLoad));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4OnlineLoad, __uuidof(IAgVeSGP4OnlineLoad));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4OnlineAutoLoad, __uuidof(_IAgVeSGP4OnlineAutoLoad));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4OnlineAutoLoad, __uuidof(IAgVeSGP4OnlineAutoLoad));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4SpaceTrackLoad, __uuidof(_IAgVeSGP4SpaceTrackLoad));
_COM_SMARTPTR_TYPEDEF(IAgVeSGP4SpaceTrackLoad, __uuidof(IAgVeSGP4SpaceTrackLoad));
_COM_SMARTPTR_TYPEDEF(IAgVeEllipseDataElement, __uuidof(IAgVeEllipseDataElement));
_COM_SMARTPTR_TYPEDEF(IAgVeEllipseDataCollection, __uuidof(IAgVeEllipseDataCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeGroundEllipseElement, __uuidof(IAgVeGroundEllipseElement));
_COM_SMARTPTR_TYPEDEF(IAgVeGroundEllipsesCollection, __uuidof(IAgVeGroundEllipsesCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeAttitude, __uuidof(IAgVeAttitude));
_COM_SMARTPTR_TYPEDEF(IAgVeInertia, __uuidof(IAgVeInertia));
_COM_SMARTPTR_TYPEDEF(IAgVeMassProperties, __uuidof(IAgVeMassProperties));
_COM_SMARTPTR_TYPEDEF(IAgVeBreakAngle, __uuidof(IAgVeBreakAngle));
_COM_SMARTPTR_TYPEDEF(IAgVeDefinition, __uuidof(IAgVeDefinition));
_COM_SMARTPTR_TYPEDEF(IAgVeRepeatGroundTrackNumbering, __uuidof(IAgVeRepeatGroundTrackNumbering));
_COM_SMARTPTR_TYPEDEF(IAgVePassNumbering, __uuidof(IAgVePassNumbering));
_COM_SMARTPTR_TYPEDEF(IAgVePassBreak, __uuidof(IAgVePassBreak));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxAttributes, __uuidof(IAgVeGfxAttributes));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTimeEventType, __uuidof(IAgVeGfxTimeEventType));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTimeEventsElement, __uuidof(IAgVeGfxTimeEventsElement));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTimeEventsCollection, __uuidof(IAgVeGfxTimeEventsCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxPass, __uuidof(IAgVeGfxPass));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxPasses, __uuidof(IAgVeGfxPasses));
_COM_SMARTPTR_TYPEDEF(IAgVeLeadTrailData, __uuidof(IAgVeLeadTrailData));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxLeadTrailData, __uuidof(IAgVeGfxLeadTrailData));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxOrbitPassData, __uuidof(IAgVeGfxOrbitPassData));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxPassResolution, __uuidof(IAgVeGfxPassResolution));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxElevationsElement, __uuidof(IAgVeGfxElevationsElement));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxElevationsCollection, __uuidof(IAgVeGfxElevationsCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxElevContours, __uuidof(IAgVeGfxElevContours));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxSAA, __uuidof(IAgVeGfxSAA));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxLightingElement, __uuidof(IAgVeGfxLightingElement));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxLighting, __uuidof(IAgVeGfxLighting));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxElevation, __uuidof(IAgVeGfxElevation));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxSwath, __uuidof(IAgVeGfxSwath));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxGroundEllipsesElement, __uuidof(IAgVeGfxGroundEllipsesElement));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxGroundEllipsesCollection, __uuidof(IAgVeGfxGroundEllipsesCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeCentralBodies, __uuidof(IAgVeCentralBodies));
_COM_SMARTPTR_TYPEDEF(IAgSaGraphics, __uuidof(IAgSaGraphics));
_COM_SMARTPTR_TYPEDEF(IAgSaVOModel, __uuidof(IAgSaVOModel));
_COM_SMARTPTR_TYPEDEF(IAgVeVOSystemsElementBase, __uuidof(IAgVeVOSystemsElementBase));
_COM_SMARTPTR_TYPEDEF(IAgVeVOSystemsElement, __uuidof(IAgVeVOSystemsElement));
_COM_SMARTPTR_TYPEDEF(IAgVeVOSystemsSpecialElement, __uuidof(IAgVeVOSystemsSpecialElement));
_COM_SMARTPTR_TYPEDEF(IAgVeVOSystemsCollection, __uuidof(IAgVeVOSystemsCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeVOProximity, __uuidof(IAgVeVOProximity));
_COM_SMARTPTR_TYPEDEF(IAgVeVOGeoBox, __uuidof(IAgVeVOGeoBox));
_COM_SMARTPTR_TYPEDEF(IAgVeVOProximityAreaObject, __uuidof(IAgVeVOProximityAreaObject));
_COM_SMARTPTR_TYPEDEF(IAgVeVOControlBox, __uuidof(IAgVeVOControlBox));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBearingBox, __uuidof(IAgVeVOBearingBox));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBearingEllipse, __uuidof(IAgVeVOBearingEllipse));
_COM_SMARTPTR_TYPEDEF(IAgVeVOLineOfBearing, __uuidof(IAgVeVOLineOfBearing));
_COM_SMARTPTR_TYPEDEF(IAgVeVOOrbitProximity, __uuidof(IAgVeVOOrbitProximity));
_COM_SMARTPTR_TYPEDEF(IAgVeVOElevContours, __uuidof(IAgVeVOElevContours));
_COM_SMARTPTR_TYPEDEF(IAgVeVOSAA, __uuidof(IAgVeVOSAA));
_COM_SMARTPTR_TYPEDEF(IAgVeVOSigmaScale, __uuidof(IAgVeVOSigmaScale));
_COM_SMARTPTR_TYPEDEF(IAgVeVOAttributes, __uuidof(IAgVeVOAttributes));
_COM_SMARTPTR_TYPEDEF(IAgVeVOSize, __uuidof(IAgVeVOSize));
_COM_SMARTPTR_TYPEDEF(IAgVeVOLeadTrailData, __uuidof(IAgVeVOLeadTrailData));
_COM_SMARTPTR_TYPEDEF(IAgVeVOOrbitPassData, __uuidof(IAgVeVOOrbitPassData));
_COM_SMARTPTR_TYPEDEF(IAgVeVOOrbitTrackData, __uuidof(IAgVeVOOrbitTrackData));
_COM_SMARTPTR_TYPEDEF(IAgVeVOTickData, __uuidof(IAgVeVOTickData));
_COM_SMARTPTR_TYPEDEF(IAgVeVOPathTickMarks, __uuidof(IAgVeVOPathTickMarks));
_COM_SMARTPTR_TYPEDEF(IAgVeVOOrbitTickMarks, __uuidof(IAgVeVOOrbitTickMarks));
_COM_SMARTPTR_TYPEDEF(IAgVeVOPass, __uuidof(IAgVeVOPass));
_COM_SMARTPTR_TYPEDEF(IAgVeVOCovariance, __uuidof(IAgVeVOCovariance));
_COM_SMARTPTR_TYPEDEF(IAgVeVODropLinePosItem, __uuidof(IAgVeVODropLinePosItem));
_COM_SMARTPTR_TYPEDEF(IAgVeVODropLinePosItemCollection, __uuidof(IAgVeVODropLinePosItemCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeVODropLinePathItem, __uuidof(IAgVeVODropLinePathItem));
_COM_SMARTPTR_TYPEDEF(IAgVeVODropLinePathItemCollection, __uuidof(IAgVeVODropLinePathItemCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeVOOrbitDropLines, __uuidof(IAgVeVOOrbitDropLines));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneTemplateDisplayElement, __uuidof(IAgVeVOBPlaneTemplateDisplayElement));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneTemplateDisplayCollection, __uuidof(IAgVeVOBPlaneTemplateDisplayCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneTemplate, __uuidof(IAgVeVOBPlaneTemplate));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneTemplatesCollection, __uuidof(IAgVeVOBPlaneTemplatesCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneEvent, __uuidof(IAgVeVOBPlaneEvent));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneTargetPointPosition, __uuidof(IAgVeVOBPlaneTargetPointPosition));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneTargetPoint, __uuidof(IAgVeVOBPlaneTargetPoint));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlanePoint, __uuidof(IAgVeVOBPlanePoint));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlanePointCollection, __uuidof(IAgVeVOBPlanePointCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneInstance, __uuidof(IAgVeVOBPlaneInstance));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneInstancesCollection, __uuidof(IAgVeVOBPlaneInstancesCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlanes, __uuidof(IAgVeVOBPlanes));
_COM_SMARTPTR_TYPEDEF(IAgVeEclipseBodies, __uuidof(IAgVeEclipseBodies));
_COM_SMARTPTR_TYPEDEF(IAgExportToolStepSize, __uuidof(IAgExportToolStepSize));
_COM_SMARTPTR_TYPEDEF(IAgExportToolTimePeriod, __uuidof(IAgExportToolTimePeriod));
_COM_SMARTPTR_TYPEDEF(IAgVeEphemerisCCSDSExportTool, __uuidof(IAgVeEphemerisCCSDSExportTool));
_COM_SMARTPTR_TYPEDEF(IAgVeEphemerisStkExportTool, __uuidof(IAgVeEphemerisStkExportTool));
_COM_SMARTPTR_TYPEDEF(IAgVeEphemerisSpiceExportTool, __uuidof(IAgVeEphemerisSpiceExportTool));
_COM_SMARTPTR_TYPEDEF(IAgVeEphemerisCode500ExportTool, __uuidof(IAgVeEphemerisCode500ExportTool));
_COM_SMARTPTR_TYPEDEF(IAgVePropDefExportTool, __uuidof(IAgVePropDefExportTool));
_COM_SMARTPTR_TYPEDEF(IAgVeCoordinateAxes, __uuidof(IAgVeCoordinateAxes));
_COM_SMARTPTR_TYPEDEF(IAgVeAttitudeExportTool, __uuidof(IAgVeAttitudeExportTool));
_COM_SMARTPTR_TYPEDEF(IAgSaExportTools, __uuidof(IAgSaExportTools));
_COM_SMARTPTR_TYPEDEF(IAgSpEnvSAAContour, __uuidof(IAgSpEnvSAAContour));
_COM_SMARTPTR_TYPEDEF(IAgVeSpEnvMagneticField, __uuidof(IAgVeSpEnvMagneticField));
_COM_SMARTPTR_TYPEDEF(IAgVeSpEnvVehTemperature, __uuidof(IAgVeSpEnvVehTemperature));
_COM_SMARTPTR_TYPEDEF(IAgVeSpEnvParticleFlux, __uuidof(IAgVeSpEnvParticleFlux));
_COM_SMARTPTR_TYPEDEF(IAgVeSpEnvRadDoseRateElement, __uuidof(IAgVeSpEnvRadDoseRateElement));
_COM_SMARTPTR_TYPEDEF(IAgVeSpEnvRadDoseRateCollection, __uuidof(IAgVeSpEnvRadDoseRateCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeSpEnvRadiation, __uuidof(IAgVeSpEnvRadiation));
_COM_SMARTPTR_TYPEDEF(IAgVeSpEnvMagFieldLine, __uuidof(IAgVeSpEnvMagFieldLine));
_COM_SMARTPTR_TYPEDEF(IAgVeSpEnvGraphics, __uuidof(IAgVeSpEnvGraphics));
_COM_SMARTPTR_TYPEDEF(IAgVeSpEnvSpaceEnvironment, __uuidof(IAgVeSpEnvSpaceEnvironment));
_COM_SMARTPTR_TYPEDEF(_IAgVeInertia, __uuidof(_IAgVeInertia));
_COM_SMARTPTR_TYPEDEF(_IAgVeMassProperties, __uuidof(_IAgVeMassProperties));
_COM_SMARTPTR_TYPEDEF(_IAgVeBreakAngleBreakByLatitude, __uuidof(_IAgVeBreakAngleBreakByLatitude));
_COM_SMARTPTR_TYPEDEF(IAgVeBreakAngleBreakByLatitude, __uuidof(IAgVeBreakAngleBreakByLatitude));
_COM_SMARTPTR_TYPEDEF(_IAgVeBreakAngleBreakByLongitude, __uuidof(_IAgVeBreakAngleBreakByLongitude));
_COM_SMARTPTR_TYPEDEF(IAgVeBreakAngleBreakByLongitude, __uuidof(IAgVeBreakAngleBreakByLongitude));
_COM_SMARTPTR_TYPEDEF(_IAgVeDefinition, __uuidof(_IAgVeDefinition));
_COM_SMARTPTR_TYPEDEF(_IAgVeRepeatGroundTrackNumbering, __uuidof(_IAgVeRepeatGroundTrackNumbering));
_COM_SMARTPTR_TYPEDEF(_IAgVePassNumberingDateOfFirstPass, __uuidof(_IAgVePassNumberingDateOfFirstPass));
_COM_SMARTPTR_TYPEDEF(IAgVePassNumberingDateOfFirstPass, __uuidof(IAgVePassNumberingDateOfFirstPass));
_COM_SMARTPTR_TYPEDEF(_IAgVePassNumberingFirstPassNum, __uuidof(_IAgVePassNumberingFirstPassNum));
_COM_SMARTPTR_TYPEDEF(IAgVePassNumberingFirstPassNum, __uuidof(IAgVePassNumberingFirstPassNum));
_COM_SMARTPTR_TYPEDEF(_IAgVePassBreak, __uuidof(_IAgVePassBreak));
_COM_SMARTPTR_TYPEDEF(_IAgVeCentralBodies, __uuidof(_IAgVeCentralBodies));
_COM_SMARTPTR_TYPEDEF(_IAgSaGraphics, __uuidof(_IAgSaGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgVeEllipseDataElement, __uuidof(_IAgVeEllipseDataElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeGroundEllipseElement, __uuidof(_IAgVeGroundEllipseElement));
_COM_SMARTPTR_TYPEDEF(_IAgSaVOModel, __uuidof(_IAgSaVOModel));
_COM_SMARTPTR_TYPEDEF(_IAgVeEclipseBodies, __uuidof(_IAgVeEclipseBodies));
_COM_SMARTPTR_TYPEDEF(_IAgVeVector, __uuidof(_IAgVeVector));
_COM_SMARTPTR_TYPEDEF(IAgVeVector, __uuidof(IAgVeVector));
_COM_SMARTPTR_TYPEDEF(_IAgVeRateOffset, __uuidof(_IAgVeRateOffset));
_COM_SMARTPTR_TYPEDEF(IAgVeRateOffset, __uuidof(IAgVeRateOffset));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileAlignedAndConstrained, __uuidof(_IAgVeProfileAlignedAndConstrained));
_COM_SMARTPTR_TYPEDEF(IAgVeAttProfile, __uuidof(IAgVeAttProfile));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileAlignedAndConstrained, __uuidof(IAgVeProfileAlignedAndConstrained));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileInertial, __uuidof(_IAgVeProfileInertial));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileInertial, __uuidof(IAgVeProfileInertial));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileConstraintOffset, __uuidof(_IAgVeProfileConstraintOffset));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileConstraintOffset, __uuidof(IAgVeProfileConstraintOffset));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileFixedInAxes, __uuidof(_IAgVeProfileFixedInAxes));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileFixedInAxes, __uuidof(IAgVeProfileFixedInAxes));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfilePrecessingSpin, __uuidof(_IAgVeProfilePrecessingSpin));
_COM_SMARTPTR_TYPEDEF(IAgVeProfilePrecessingSpin, __uuidof(IAgVeProfilePrecessingSpin));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileSpinAligned, __uuidof(_IAgVeProfileSpinAligned));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileSpinAligned, __uuidof(IAgVeProfileSpinAligned));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileSpinAboutXXX, __uuidof(_IAgVeProfileSpinAboutXXX));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileSpinAboutXXX, __uuidof(IAgVeProfileSpinAboutXXX));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileSpinning, __uuidof(_IAgVeProfileSpinning));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileSpinning, __uuidof(IAgVeProfileSpinning));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileAlignmentOffset, __uuidof(_IAgVeProfileAlignmentOffset));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileAlignmentOffset, __uuidof(IAgVeProfileAlignmentOffset));
_COM_SMARTPTR_TYPEDEF(IAgVeAccessAdvanced, __uuidof(IAgVeAccessAdvanced));
_COM_SMARTPTR_TYPEDEF(_IAgVeDuration, __uuidof(_IAgVeDuration));
_COM_SMARTPTR_TYPEDEF(IAgVeDuration, __uuidof(IAgVeDuration));
_COM_SMARTPTR_TYPEDEF(_IAgVeStandardBasic, __uuidof(_IAgVeStandardBasic));
_COM_SMARTPTR_TYPEDEF(IAgVeStandardBasic, __uuidof(IAgVeStandardBasic));
_COM_SMARTPTR_TYPEDEF(_IAgVeAttExternal, __uuidof(_IAgVeAttExternal));
_COM_SMARTPTR_TYPEDEF(IAgVeAttExternal, __uuidof(IAgVeAttExternal));
_COM_SMARTPTR_TYPEDEF(IAgVeAttitudeRealTimeDataReference, __uuidof(IAgVeAttitudeRealTimeDataReference));
_COM_SMARTPTR_TYPEDEF(_IAgVeAttitudeRealTime, __uuidof(_IAgVeAttitudeRealTime));
_COM_SMARTPTR_TYPEDEF(IAgVeAttitudeRealTime, __uuidof(IAgVeAttitudeRealTime));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileCoordinatedTurn, __uuidof(_IAgVeProfileCoordinatedTurn));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileCoordinatedTurn, __uuidof(IAgVeProfileCoordinatedTurn));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileYawToNadir, __uuidof(_IAgVeProfileYawToNadir));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileYawToNadir, __uuidof(IAgVeProfileYawToNadir));
_COM_SMARTPTR_TYPEDEF(_IAgVeTorque, __uuidof(_IAgVeTorque));
_COM_SMARTPTR_TYPEDEF(IAgVeTorque, __uuidof(IAgVeTorque));
_COM_SMARTPTR_TYPEDEF(_IAgVeIntegratedAttitude, __uuidof(_IAgVeIntegratedAttitude));
_COM_SMARTPTR_TYPEDEF(IAgVeIntegratedAttitude, __uuidof(IAgVeIntegratedAttitude));
_COM_SMARTPTR_TYPEDEF(IAgVeAttitudeStandard, __uuidof(IAgVeAttitudeStandard));
_COM_SMARTPTR_TYPEDEF(_IAgVeRouteAttitudeStandard, __uuidof(_IAgVeRouteAttitudeStandard));
_COM_SMARTPTR_TYPEDEF(IAgVeRouteAttitudeStandard, __uuidof(IAgVeRouteAttitudeStandard));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxLine, __uuidof(_IAgVeGfxLine));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxLine, __uuidof(IAgVeGfxLine));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxAttributesBasic, __uuidof(IAgVeGfxAttributesBasic));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxInterval, __uuidof(IAgVeGfxInterval));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxIntervalsCollection, __uuidof(IAgVeGfxIntervalsCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxAttributesCustom, __uuidof(_IAgVeGfxAttributesCustom));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxAttributesCustom, __uuidof(IAgVeGfxAttributesCustom));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxAttributesRealtime, __uuidof(_IAgVeGfxAttributesRealtime));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxAttributesRealtime, __uuidof(IAgVeGfxAttributesRealtime));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxLightingElement, __uuidof(_IAgVeGfxLightingElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxLighting, __uuidof(_IAgVeGfxLighting));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxElevationGroundElevation, __uuidof(_IAgVeGfxElevationGroundElevation));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxElevationGroundElevation, __uuidof(IAgVeGfxElevationGroundElevation));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxElevationSwathHalfWidth, __uuidof(_IAgVeGfxElevationSwathHalfWidth));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxElevationSwathHalfWidth, __uuidof(IAgVeGfxElevationSwathHalfWidth));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxElevationVehicleHalfAngle, __uuidof(_IAgVeGfxElevationVehicleHalfAngle));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxElevationVehicleHalfAngle, __uuidof(IAgVeGfxElevationVehicleHalfAngle));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxSwath, __uuidof(_IAgVeGfxSwath));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxLeadDataFraction, __uuidof(_IAgVeGfxLeadDataFraction));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxLeadDataFraction, __uuidof(IAgVeGfxLeadDataFraction));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxLeadDataTime, __uuidof(_IAgVeGfxLeadDataTime));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxLeadDataTime, __uuidof(IAgVeGfxLeadDataTime));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxTrailDataFraction, __uuidof(_IAgVeGfxTrailDataFraction));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTrailDataFraction, __uuidof(IAgVeGfxTrailDataFraction));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxTrailDataTime, __uuidof(_IAgVeGfxTrailDataTime));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTrailDataTime, __uuidof(IAgVeGfxTrailDataTime));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxRoutePassData, __uuidof(_IAgVeGfxRoutePassData));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxRoutePassData, __uuidof(IAgVeGfxRoutePassData));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxLeadTrailData, __uuidof(_IAgVeGfxLeadTrailData));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxOrbitPassData, __uuidof(_IAgVeGfxOrbitPassData));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxTrajectoryPassData, __uuidof(_IAgVeGfxTrajectoryPassData));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTrajectoryPassData, __uuidof(IAgVeGfxTrajectoryPassData));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxTrajectoryResolution, __uuidof(_IAgVeGfxTrajectoryResolution));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTrajectoryResolution, __uuidof(IAgVeGfxTrajectoryResolution));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxTimeEventTypeLine, __uuidof(_IAgVeGfxTimeEventTypeLine));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTimeEventTypeLine, __uuidof(IAgVeGfxTimeEventTypeLine));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxTimeEventTypeMarker, __uuidof(_IAgVeGfxTimeEventTypeMarker));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTimeEventTypeMarker, __uuidof(IAgVeGfxTimeEventTypeMarker));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxTimeEventTypeText, __uuidof(_IAgVeGfxTimeEventTypeText));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxTimeEventTypeText, __uuidof(IAgVeGfxTimeEventTypeText));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxTimeEventsElement, __uuidof(_IAgVeGfxTimeEventsElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxPassShowPasses, __uuidof(_IAgVeGfxPassShowPasses));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxPassShowPasses, __uuidof(IAgVeGfxPassShowPasses));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxPasses, __uuidof(_IAgVeGfxPasses));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxSAA, __uuidof(_IAgVeGfxSAA));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxElevationsElement, __uuidof(_IAgVeGfxElevationsElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxElevContours, __uuidof(_IAgVeGfxElevContours));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxRouteResolution, __uuidof(_IAgVeGfxRouteResolution));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxRouteResolution, __uuidof(IAgVeGfxRouteResolution));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxWaypointMarkersElement, __uuidof(_IAgVeGfxWaypointMarkersElement));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxWaypointMarkersElement, __uuidof(IAgVeGfxWaypointMarkersElement));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxWaypointMarkersCollection, __uuidof(IAgVeGfxWaypointMarkersCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxWaypointMarker, __uuidof(_IAgVeGfxWaypointMarker));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxWaypointMarker, __uuidof(IAgVeGfxWaypointMarker));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxInterval, __uuidof(_IAgVeGfxInterval));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxPassResolution, __uuidof(_IAgVeGfxPassResolution));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxGroundEllipsesElement, __uuidof(_IAgVeGfxGroundEllipsesElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxAttributesRoute, __uuidof(_IAgVeGfxAttributesRoute));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxAttributesRoute, __uuidof(IAgVeGfxAttributesRoute));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxAttributesTrajectory, __uuidof(_IAgVeGfxAttributesTrajectory));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxAttributesTrajectory, __uuidof(IAgVeGfxAttributesTrajectory));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxAttributesOrbit, __uuidof(_IAgVeGfxAttributesOrbit));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxAttributesOrbit, __uuidof(IAgVeGfxAttributesOrbit));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOSystemsElement, __uuidof(_IAgVeVOSystemsElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOSystemsSpecialElement, __uuidof(_IAgVeVOSystemsSpecialElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOControlBox, __uuidof(_IAgVeVOControlBox));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBearingBox, __uuidof(_IAgVeVOBearingBox));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBearingEllipse, __uuidof(_IAgVeVOBearingEllipse));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOLineOfBearing, __uuidof(_IAgVeVOLineOfBearing));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOGeoBox, __uuidof(_IAgVeVOGeoBox));
_COM_SMARTPTR_TYPEDEF(_IAgVeVORouteProximity, __uuidof(_IAgVeVORouteProximity));
_COM_SMARTPTR_TYPEDEF(IAgVeVORouteProximity, __uuidof(IAgVeVORouteProximity));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOOrbitProximity, __uuidof(_IAgVeVOOrbitProximity));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOElevContours, __uuidof(_IAgVeVOElevContours));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOSAA, __uuidof(_IAgVeVOSAA));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOSigmaScaleProbability, __uuidof(_IAgVeVOSigmaScaleProbability));
_COM_SMARTPTR_TYPEDEF(IAgVeVOSigmaScaleProbability, __uuidof(IAgVeVOSigmaScaleProbability));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOSigmaScaleScale, __uuidof(_IAgVeVOSigmaScaleScale));
_COM_SMARTPTR_TYPEDEF(IAgVeVOSigmaScaleScale, __uuidof(IAgVeVOSigmaScaleScale));
_COM_SMARTPTR_TYPEDEF(_IAgVeVODefaultAttributes, __uuidof(_IAgVeVODefaultAttributes));
_COM_SMARTPTR_TYPEDEF(IAgVeVODefaultAttributes, __uuidof(IAgVeVODefaultAttributes));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOIntervalsElement, __uuidof(_IAgVeVOIntervalsElement));
_COM_SMARTPTR_TYPEDEF(IAgVeVOIntervalsElement, __uuidof(IAgVeVOIntervalsElement));
_COM_SMARTPTR_TYPEDEF(IAgVeVOIntervalsCollection, __uuidof(IAgVeVOIntervalsCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOAttributesBasic, __uuidof(_IAgVeVOAttributesBasic));
_COM_SMARTPTR_TYPEDEF(IAgVeVOAttributesBasic, __uuidof(IAgVeVOAttributesBasic));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOAttributesIntervals, __uuidof(_IAgVeVOAttributesIntervals));
_COM_SMARTPTR_TYPEDEF(IAgVeVOAttributesIntervals, __uuidof(IAgVeVOAttributesIntervals));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOSize, __uuidof(_IAgVeVOSize));
_COM_SMARTPTR_TYPEDEF(_IAgVeVODataFraction, __uuidof(_IAgVeVODataFraction));
_COM_SMARTPTR_TYPEDEF(IAgVeVODataFraction, __uuidof(IAgVeVODataFraction));
_COM_SMARTPTR_TYPEDEF(_IAgVeVODataTime, __uuidof(_IAgVeVODataTime));
_COM_SMARTPTR_TYPEDEF(IAgVeVODataTime, __uuidof(IAgVeVODataTime));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOOrbitPassData, __uuidof(_IAgVeVOOrbitPassData));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOOrbitTrackData, __uuidof(_IAgVeVOOrbitTrackData));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOTickDataLine, __uuidof(_IAgVeVOTickDataLine));
_COM_SMARTPTR_TYPEDEF(IAgVeVOTickDataLine, __uuidof(IAgVeVOTickDataLine));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOTickDataPoint, __uuidof(_IAgVeVOTickDataPoint));
_COM_SMARTPTR_TYPEDEF(IAgVeVOTickDataPoint, __uuidof(IAgVeVOTickDataPoint));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOOrbitTickMarks, __uuidof(_IAgVeVOOrbitTickMarks));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOPass, __uuidof(_IAgVeVOPass));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOCovariance, __uuidof(_IAgVeVOCovariance));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOTrajectoryProximity, __uuidof(_IAgVeVOTrajectoryProximity));
_COM_SMARTPTR_TYPEDEF(IAgVeVOTrajectoryProximity, __uuidof(IAgVeVOTrajectoryProximity));
_COM_SMARTPTR_TYPEDEF(IAgVeVOTrajectoryPassData, __uuidof(IAgVeVOTrajectoryPassData));
_COM_SMARTPTR_TYPEDEF(IAgVeVOTrajectoryTrackData, __uuidof(IAgVeVOTrajectoryTrackData));
_COM_SMARTPTR_TYPEDEF(IAgVeVOTrajectoryTickMarks, __uuidof(IAgVeVOTrajectoryTickMarks));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOTrajectory, __uuidof(_IAgVeVOTrajectory));
_COM_SMARTPTR_TYPEDEF(IAgVeVOTrajectory, __uuidof(IAgVeVOTrajectory));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOTrajectoryTrackData, __uuidof(_IAgVeVOTrajectoryTrackData));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOTrajectoryPassData, __uuidof(_IAgVeVOTrajectoryPassData));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOLeadTrailData, __uuidof(_IAgVeVOLeadTrailData));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOTrajectoryTickMarks, __uuidof(_IAgVeVOTrajectoryTickMarks));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOPathTickMarks, __uuidof(_IAgVeVOPathTickMarks));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOWaypointMarkersElement, __uuidof(_IAgVeVOWaypointMarkersElement));
_COM_SMARTPTR_TYPEDEF(IAgVeVOWaypointMarkersElement, __uuidof(IAgVeVOWaypointMarkersElement));
_COM_SMARTPTR_TYPEDEF(IAgVeVOWaypointMarkersCollection, __uuidof(IAgVeVOWaypointMarkersCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVeVORoute, __uuidof(_IAgVeVORoute));
_COM_SMARTPTR_TYPEDEF(IAgVeVORoute, __uuidof(IAgVeVORoute));
_COM_SMARTPTR_TYPEDEF(_IAgVOLabelSwapDistance, __uuidof(_IAgVOLabelSwapDistance));
_COM_SMARTPTR_TYPEDEF(_IAgVeVODropLinePosItem, __uuidof(_IAgVeVODropLinePosItem));
_COM_SMARTPTR_TYPEDEF(_IAgVeVODropLinePathItem, __uuidof(_IAgVeVODropLinePathItem));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOOrbitDropLines, __uuidof(_IAgVeVOOrbitDropLines));
_COM_SMARTPTR_TYPEDEF(_IAgVeVORouteDropLines, __uuidof(_IAgVeVORouteDropLines));
_COM_SMARTPTR_TYPEDEF(IAgVeVORouteDropLines, __uuidof(IAgVeVORouteDropLines));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOTrajectoryDropLines, __uuidof(_IAgVeVOTrajectoryDropLines));
_COM_SMARTPTR_TYPEDEF(IAgVeVOTrajectoryDropLines, __uuidof(IAgVeVOTrajectoryDropLines));
_COM_SMARTPTR_TYPEDEF(_IAgVeTrajectoryVOModel, __uuidof(_IAgVeTrajectoryVOModel));
_COM_SMARTPTR_TYPEDEF(IAgVeTrajectoryVOModel, __uuidof(IAgVeTrajectoryVOModel));
_COM_SMARTPTR_TYPEDEF(_IAgVeRouteVOModel, __uuidof(_IAgVeRouteVOModel));
_COM_SMARTPTR_TYPEDEF(IAgVeRouteVOModel, __uuidof(IAgVeRouteVOModel));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBPlaneTemplateDisplayElement, __uuidof(_IAgVeVOBPlaneTemplateDisplayElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBPlaneTemplate, __uuidof(_IAgVeVOBPlaneTemplate));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBPlaneEvent, __uuidof(_IAgVeVOBPlaneEvent));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBPlanePoint, __uuidof(_IAgVeVOBPlanePoint));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBPlaneTargetPointPositionCartesian, __uuidof(_IAgVeVOBPlaneTargetPointPositionCartesian));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneTargetPointPositionCartesian, __uuidof(IAgVeVOBPlaneTargetPointPositionCartesian));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBPlaneTargetPointPositionPolar, __uuidof(_IAgVeVOBPlaneTargetPointPositionPolar));
_COM_SMARTPTR_TYPEDEF(IAgVeVOBPlaneTargetPointPositionPolar, __uuidof(IAgVeVOBPlaneTargetPointPositionPolar));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBPlaneTargetPoint, __uuidof(_IAgVeVOBPlaneTargetPoint));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBPlaneInstance, __uuidof(_IAgVeVOBPlaneInstance));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOBPlanes, __uuidof(_IAgVeVOBPlanes));
_COM_SMARTPTR_TYPEDEF(IAgLvGraphics, __uuidof(IAgLvGraphics));
_COM_SMARTPTR_TYPEDEF(IAgLvExportTools, __uuidof(IAgLvExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgLvGraphics, __uuidof(_IAgLvGraphics));
_COM_SMARTPTR_TYPEDEF(IAgGreatArcGraphics, __uuidof(IAgGreatArcGraphics));
_COM_SMARTPTR_TYPEDEF(IAgGvGraphics, __uuidof(IAgGvGraphics));
_COM_SMARTPTR_TYPEDEF(IAgGvExportTools, __uuidof(IAgGvExportTools));
_COM_SMARTPTR_TYPEDEF(IAgGreatArcVehicle, __uuidof(IAgGreatArcVehicle));
_COM_SMARTPTR_TYPEDEF(_IAgGvGraphics, __uuidof(_IAgGvGraphics));
_COM_SMARTPTR_TYPEDEF(IAgMsGraphics, __uuidof(IAgMsGraphics));
_COM_SMARTPTR_TYPEDEF(IAgMsExportTools, __uuidof(IAgMsExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgMsGraphics, __uuidof(_IAgMsGraphics));
_COM_SMARTPTR_TYPEDEF(IAgAcGraphics, __uuidof(IAgAcGraphics));
_COM_SMARTPTR_TYPEDEF(IAgAcExportTools, __uuidof(IAgAcExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgAcGraphics, __uuidof(_IAgAcGraphics));
_COM_SMARTPTR_TYPEDEF(IAgShGraphics, __uuidof(IAgShGraphics));
_COM_SMARTPTR_TYPEDEF(IAgShExportTools, __uuidof(IAgShExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgShGraphics, __uuidof(_IAgShGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgMtoTrackPoint, __uuidof(_IAgMtoTrackPoint));
_COM_SMARTPTR_TYPEDEF(IAgMtoTrackPoint, __uuidof(IAgMtoTrackPoint));
_COM_SMARTPTR_TYPEDEF(IAgMtoTrackPointCollection, __uuidof(IAgMtoTrackPointCollection));
_COM_SMARTPTR_TYPEDEF(_IAgMtoTrack, __uuidof(_IAgMtoTrack));
_COM_SMARTPTR_TYPEDEF(IAgMtoTrack, __uuidof(IAgMtoTrack));
_COM_SMARTPTR_TYPEDEF(IAgMtoTrackCollection, __uuidof(IAgMtoTrackCollection));
_COM_SMARTPTR_TYPEDEF(_IAgMtoDefaultTrack, __uuidof(_IAgMtoDefaultTrack));
_COM_SMARTPTR_TYPEDEF(IAgMtoDefaultTrack, __uuidof(IAgMtoDefaultTrack));
_COM_SMARTPTR_TYPEDEF(_IAgMtoGlobalTrackOptions, __uuidof(_IAgMtoGlobalTrackOptions));
_COM_SMARTPTR_TYPEDEF(IAgMtoGlobalTrackOptions, __uuidof(IAgMtoGlobalTrackOptions));
_COM_SMARTPTR_TYPEDEF(IAgMtoGfxMarker, __uuidof(IAgMtoGfxMarker));
_COM_SMARTPTR_TYPEDEF(IAgMtoGfxLine, __uuidof(IAgMtoGfxLine));
_COM_SMARTPTR_TYPEDEF(IAgMtoGfxFadeTimes, __uuidof(IAgMtoGfxFadeTimes));
_COM_SMARTPTR_TYPEDEF(IAgMtoGfxLeadTrailTimes, __uuidof(IAgMtoGfxLeadTrailTimes));
_COM_SMARTPTR_TYPEDEF(IAgMtoGfxTrack, __uuidof(IAgMtoGfxTrack));
_COM_SMARTPTR_TYPEDEF(IAgMtoGfxTrackCollection, __uuidof(IAgMtoGfxTrackCollection));
_COM_SMARTPTR_TYPEDEF(IAgMtoDefaultGfxTrack, __uuidof(IAgMtoDefaultGfxTrack));
_COM_SMARTPTR_TYPEDEF(IAgMtoGfxGlobalTrackOptions, __uuidof(IAgMtoGfxGlobalTrackOptions));
_COM_SMARTPTR_TYPEDEF(IAgMtoGraphics, __uuidof(IAgMtoGraphics));
_COM_SMARTPTR_TYPEDEF(IAgMtoVOMarker, __uuidof(IAgMtoVOMarker));
_COM_SMARTPTR_TYPEDEF(IAgMtoVOPoint, __uuidof(IAgMtoVOPoint));
_COM_SMARTPTR_TYPEDEF(IAgMtoVOModel, __uuidof(IAgMtoVOModel));
_COM_SMARTPTR_TYPEDEF(IAgMtoVOSwapDistances, __uuidof(IAgMtoVOSwapDistances));
_COM_SMARTPTR_TYPEDEF(IAgMtoVODropLines, __uuidof(IAgMtoVODropLines));
_COM_SMARTPTR_TYPEDEF(IAgMtoVOTrack, __uuidof(IAgMtoVOTrack));
_COM_SMARTPTR_TYPEDEF(IAgMtoVOTrackCollection, __uuidof(IAgMtoVOTrackCollection));
_COM_SMARTPTR_TYPEDEF(IAgMtoDefaultVOTrack, __uuidof(IAgMtoDefaultVOTrack));
_COM_SMARTPTR_TYPEDEF(IAgMtoVOGlobalTrackOptions, __uuidof(IAgMtoVOGlobalTrackOptions));
_COM_SMARTPTR_TYPEDEF(IAgMtoVO, __uuidof(IAgMtoVO));
_COM_SMARTPTR_TYPEDEF(IAgMtoAnalysisPosition, __uuidof(IAgMtoAnalysisPosition));
_COM_SMARTPTR_TYPEDEF(IAgMtoAnalysisRange, __uuidof(IAgMtoAnalysisRange));
_COM_SMARTPTR_TYPEDEF(IAgMtoAnalysisFieldOfView, __uuidof(IAgMtoAnalysisFieldOfView));
_COM_SMARTPTR_TYPEDEF(IAgMtoAnalysisVisibility, __uuidof(IAgMtoAnalysisVisibility));
_COM_SMARTPTR_TYPEDEF(IAgMtoAnalysis, __uuidof(IAgMtoAnalysis));
_COM_SMARTPTR_TYPEDEF(IAgMto, __uuidof(IAgMto));
_COM_SMARTPTR_TYPEDEF(_IAgMtoGfxMarker, __uuidof(_IAgMtoGfxMarker));
_COM_SMARTPTR_TYPEDEF(_IAgMtoGfxLine, __uuidof(_IAgMtoGfxLine));
_COM_SMARTPTR_TYPEDEF(_IAgMtoGfxFadeTimes, __uuidof(_IAgMtoGfxFadeTimes));
_COM_SMARTPTR_TYPEDEF(_IAgMtoGfxLeadTrailTimes, __uuidof(_IAgMtoGfxLeadTrailTimes));
_COM_SMARTPTR_TYPEDEF(_IAgMtoGfxTrack, __uuidof(_IAgMtoGfxTrack));
_COM_SMARTPTR_TYPEDEF(_IAgMtoDefaultGfxTrack, __uuidof(_IAgMtoDefaultGfxTrack));
_COM_SMARTPTR_TYPEDEF(_IAgMtoGfxGlobalTrackOptions, __uuidof(_IAgMtoGfxGlobalTrackOptions));
_COM_SMARTPTR_TYPEDEF(_IAgMtoGraphics, __uuidof(_IAgMtoGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgMtoVOMarker, __uuidof(_IAgMtoVOMarker));
_COM_SMARTPTR_TYPEDEF(_IAgMtoVOPoint, __uuidof(_IAgMtoVOPoint));
_COM_SMARTPTR_TYPEDEF(_IAgMtoVOModel, __uuidof(_IAgMtoVOModel));
_COM_SMARTPTR_TYPEDEF(_IAgMtoVOSwapDistances, __uuidof(_IAgMtoVOSwapDistances));
_COM_SMARTPTR_TYPEDEF(_IAgMtoVODropLines, __uuidof(_IAgMtoVODropLines));
_COM_SMARTPTR_TYPEDEF(_IAgMtoVOTrack, __uuidof(_IAgMtoVOTrack));
_COM_SMARTPTR_TYPEDEF(_IAgMtoDefaultVOTrack, __uuidof(_IAgMtoDefaultVOTrack));
_COM_SMARTPTR_TYPEDEF(_IAgMtoVOGlobalTrackOptions, __uuidof(_IAgMtoVOGlobalTrackOptions));
_COM_SMARTPTR_TYPEDEF(_IAgMtoVO, __uuidof(_IAgMtoVO));
_COM_SMARTPTR_TYPEDEF(_IAgLLAGeocentric, __uuidof(_IAgLLAGeocentric));
_COM_SMARTPTR_TYPEDEF(IAgLLAGeocentric, __uuidof(IAgLLAGeocentric));
_COM_SMARTPTR_TYPEDEF(_IAgLLAGeodetic, __uuidof(_IAgLLAGeodetic));
_COM_SMARTPTR_TYPEDEF(IAgLLAGeodetic, __uuidof(IAgLLAGeodetic));
_COM_SMARTPTR_TYPEDEF(_IAgLtPoint, __uuidof(_IAgLtPoint));
_COM_SMARTPTR_TYPEDEF(IAgLtPoint, __uuidof(IAgLtPoint));
_COM_SMARTPTR_TYPEDEF(IAgLtPointCollection, __uuidof(IAgLtPointCollection));
_COM_SMARTPTR_TYPEDEF(IAgLtGraphics, __uuidof(IAgLtGraphics));
_COM_SMARTPTR_TYPEDEF(IAgLtVO, __uuidof(IAgLtVO));
_COM_SMARTPTR_TYPEDEF(IAgLineTarget, __uuidof(IAgLineTarget));
_COM_SMARTPTR_TYPEDEF(_IAgLtGraphics, __uuidof(_IAgLtGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgLtVO, __uuidof(_IAgLtVO));
_COM_SMARTPTR_TYPEDEF(IAgCvBounds, __uuidof(IAgCvBounds));
_COM_SMARTPTR_TYPEDEF(IAgCvResolution, __uuidof(IAgCvResolution));
_COM_SMARTPTR_TYPEDEF(IAgCvGrid, __uuidof(IAgCvGrid));
_COM_SMARTPTR_TYPEDEF(IAgCvPointFileListCollection, __uuidof(IAgCvPointFileListCollection));
_COM_SMARTPTR_TYPEDEF(IAgCvPointDefinition, __uuidof(IAgCvPointDefinition));
_COM_SMARTPTR_TYPEDEF(IAgCvAdvanced, __uuidof(IAgCvAdvanced));
_COM_SMARTPTR_TYPEDEF(IAgCvInterval, __uuidof(IAgCvInterval));
_COM_SMARTPTR_TYPEDEF(IAgCvGfxStatic, __uuidof(IAgCvGfxStatic));
_COM_SMARTPTR_TYPEDEF(IAgCvGfxAnimation, __uuidof(IAgCvGfxAnimation));
_COM_SMARTPTR_TYPEDEF(IAgCvGfxProgress, __uuidof(IAgCvGfxProgress));
_COM_SMARTPTR_TYPEDEF(IAgCvGraphics, __uuidof(IAgCvGraphics));
_COM_SMARTPTR_TYPEDEF(IAgCvVOAttributes, __uuidof(IAgCvVOAttributes));
_COM_SMARTPTR_TYPEDEF(IAgCvVO, __uuidof(IAgCvVO));
_COM_SMARTPTR_TYPEDEF(IAgCvGridPointSelection, __uuidof(IAgCvGridPointSelection));
_COM_SMARTPTR_TYPEDEF(IAgCvGridInspector, __uuidof(IAgCvGridInspector));
_COM_SMARTPTR_TYPEDEF(IAgCvRegionFilesCollection, __uuidof(IAgCvRegionFilesCollection));
_COM_SMARTPTR_TYPEDEF(IAgCvAreaTargetsCollection, __uuidof(IAgCvAreaTargetsCollection));
_COM_SMARTPTR_TYPEDEF(_IAgCvBoundsCustomRegions, __uuidof(_IAgCvBoundsCustomRegions));
_COM_SMARTPTR_TYPEDEF(IAgCvBoundsCustomRegions, __uuidof(IAgCvBoundsCustomRegions));
_COM_SMARTPTR_TYPEDEF(_IAgCvBoundsGlobal, __uuidof(_IAgCvBoundsGlobal));
_COM_SMARTPTR_TYPEDEF(IAgCvBoundsGlobal, __uuidof(IAgCvBoundsGlobal));
_COM_SMARTPTR_TYPEDEF(_IAgCvBoundsLat, __uuidof(_IAgCvBoundsLat));
_COM_SMARTPTR_TYPEDEF(IAgCvBoundsLat, __uuidof(IAgCvBoundsLat));
_COM_SMARTPTR_TYPEDEF(_IAgCvBoundsLatLine, __uuidof(_IAgCvBoundsLatLine));
_COM_SMARTPTR_TYPEDEF(IAgCvBoundsLatLine, __uuidof(IAgCvBoundsLatLine));
_COM_SMARTPTR_TYPEDEF(_IAgCvBoundsLonLine, __uuidof(_IAgCvBoundsLonLine));
_COM_SMARTPTR_TYPEDEF(IAgCvBoundsLonLine, __uuidof(IAgCvBoundsLonLine));
_COM_SMARTPTR_TYPEDEF(_IAgCvGrid, __uuidof(_IAgCvGrid));
_COM_SMARTPTR_TYPEDEF(_IAgCvPointDefinition, __uuidof(_IAgCvPointDefinition));
_COM_SMARTPTR_TYPEDEF(_IAgCvAdvanced, __uuidof(_IAgCvAdvanced));
_COM_SMARTPTR_TYPEDEF(_IAgCvInterval, __uuidof(_IAgCvInterval));
_COM_SMARTPTR_TYPEDEF(_IAgCvResolutionArea, __uuidof(_IAgCvResolutionArea));
_COM_SMARTPTR_TYPEDEF(IAgCvResolutionArea, __uuidof(IAgCvResolutionArea));
_COM_SMARTPTR_TYPEDEF(_IAgCvResolutionDistance, __uuidof(_IAgCvResolutionDistance));
_COM_SMARTPTR_TYPEDEF(IAgCvResolutionDistance, __uuidof(IAgCvResolutionDistance));
_COM_SMARTPTR_TYPEDEF(_IAgCvResolutionLatLon, __uuidof(_IAgCvResolutionLatLon));
_COM_SMARTPTR_TYPEDEF(IAgCvResolutionLatLon, __uuidof(IAgCvResolutionLatLon));
_COM_SMARTPTR_TYPEDEF(_IAgCvGfxStatic, __uuidof(_IAgCvGfxStatic));
_COM_SMARTPTR_TYPEDEF(_IAgCvGfxAnimation, __uuidof(_IAgCvGfxAnimation));
_COM_SMARTPTR_TYPEDEF(_IAgCvGfxProgress, __uuidof(_IAgCvGfxProgress));
_COM_SMARTPTR_TYPEDEF(_IAgCvGraphics, __uuidof(_IAgCvGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgCvVO, __uuidof(_IAgCvVO));
_COM_SMARTPTR_TYPEDEF(_IAgCvVOAttributes, __uuidof(_IAgCvVOAttributes));
_COM_SMARTPTR_TYPEDEF(_IAgChTimePeriodBase, __uuidof(_IAgChTimePeriodBase));
_COM_SMARTPTR_TYPEDEF(IAgChTimePeriodBase, __uuidof(IAgChTimePeriodBase));
_COM_SMARTPTR_TYPEDEF(_IAgChUserSpecifiedTimePeriod, __uuidof(_IAgChUserSpecifiedTimePeriod));
_COM_SMARTPTR_TYPEDEF(IAgChUserSpecifiedTimePeriod, __uuidof(IAgChUserSpecifiedTimePeriod));
_COM_SMARTPTR_TYPEDEF(_IAgChConstraints, __uuidof(_IAgChConstraints));
_COM_SMARTPTR_TYPEDEF(IAgChConstraints, __uuidof(IAgChConstraints));
_COM_SMARTPTR_TYPEDEF(IAgChGfxStatic, __uuidof(IAgChGfxStatic));
_COM_SMARTPTR_TYPEDEF(IAgChGfxAnimation, __uuidof(IAgChGfxAnimation));
_COM_SMARTPTR_TYPEDEF(IAgChGraphics, __uuidof(IAgChGraphics));
_COM_SMARTPTR_TYPEDEF(IAgChVO, __uuidof(IAgChVO));
_COM_SMARTPTR_TYPEDEF(_IAgChGfxStatic, __uuidof(_IAgChGfxStatic));
_COM_SMARTPTR_TYPEDEF(_IAgChGfxAnimation, __uuidof(_IAgChGfxAnimation));
_COM_SMARTPTR_TYPEDEF(_IAgChGraphics, __uuidof(_IAgChGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgChVO, __uuidof(_IAgChVO));
_COM_SMARTPTR_TYPEDEF(_IAgRfCoefficients, __uuidof(_IAgRfCoefficients));
_COM_SMARTPTR_TYPEDEF(IAgRfCoefficients, __uuidof(IAgRfCoefficients));
_COM_SMARTPTR_TYPEDEF(_IAgRfModelEffectiveRadiusMethod, __uuidof(_IAgRfModelEffectiveRadiusMethod));
_COM_SMARTPTR_TYPEDEF(IAgRfModelEffectiveRadiusMethod, __uuidof(IAgRfModelEffectiveRadiusMethod));
_COM_SMARTPTR_TYPEDEF(_IAgRfModelITURP8344, __uuidof(_IAgRfModelITURP8344));
_COM_SMARTPTR_TYPEDEF(IAgRfModelITURP8344, __uuidof(IAgRfModelITURP8344));
_COM_SMARTPTR_TYPEDEF(_IAgRfModelSCFMethod, __uuidof(_IAgRfModelSCFMethod));
_COM_SMARTPTR_TYPEDEF(IAgRfModelSCFMethod, __uuidof(IAgRfModelSCFMethod));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefCompute, __uuidof(_IAgFmDefCompute));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefDataMinMax, __uuidof(_IAgFmDefDataMinMax));
_COM_SMARTPTR_TYPEDEF(IAgFmDefDataMinMax, __uuidof(IAgFmDefDataMinMax));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefDataMinAssets, __uuidof(_IAgFmDefDataMinAssets));
_COM_SMARTPTR_TYPEDEF(IAgFmDefDataMinAssets, __uuidof(IAgFmDefDataMinAssets));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefDataPercentLevel, __uuidof(_IAgFmDefDataPercentLevel));
_COM_SMARTPTR_TYPEDEF(IAgFmDefDataPercentLevel, __uuidof(IAgFmDefDataPercentLevel));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefDataBestN, __uuidof(_IAgFmDefDataBestN));
_COM_SMARTPTR_TYPEDEF(IAgFmDefDataBestN, __uuidof(IAgFmDefDataBestN));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefAccessConstraint, __uuidof(_IAgFmDefAccessConstraint));
_COM_SMARTPTR_TYPEDEF(_IAgFmSatisfaction, __uuidof(_IAgFmSatisfaction));
_COM_SMARTPTR_TYPEDEF(IAgFmVOAttributes, __uuidof(IAgFmVOAttributes));
_COM_SMARTPTR_TYPEDEF(IAgFmVO, __uuidof(IAgFmVO));
_COM_SMARTPTR_TYPEDEF(IAgFmGridInspector, __uuidof(IAgFmGridInspector));
_COM_SMARTPTR_TYPEDEF(IAgFigureOfMerit, __uuidof(IAgFigureOfMerit));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefAccessSeparation, __uuidof(_IAgFmDefAccessSeparation));
_COM_SMARTPTR_TYPEDEF(IAgFmDefAccessSeparation, __uuidof(IAgFmDefAccessSeparation));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefDilutionOfPrecision, __uuidof(_IAgFmDefDilutionOfPrecision));
_COM_SMARTPTR_TYPEDEF(IAgFmDefDilutionOfPrecision, __uuidof(IAgFmDefDilutionOfPrecision));
_COM_SMARTPTR_TYPEDEF(IAgFmNAMethod, __uuidof(IAgFmNAMethod));
_COM_SMARTPTR_TYPEDEF(IAgFmAssetListElement, __uuidof(IAgFmAssetListElement));
_COM_SMARTPTR_TYPEDEF(IAgFmAssetListCollection, __uuidof(IAgFmAssetListCollection));
_COM_SMARTPTR_TYPEDEF(IAgFmUncertainties, __uuidof(IAgFmUncertainties));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefNavigationAccuracy, __uuidof(_IAgFmDefNavigationAccuracy));
_COM_SMARTPTR_TYPEDEF(IAgFmDefNavigationAccuracy, __uuidof(IAgFmDefNavigationAccuracy));
_COM_SMARTPTR_TYPEDEF(_IAgFmAssetListElement, __uuidof(_IAgFmAssetListElement));
_COM_SMARTPTR_TYPEDEF(_IAgFmUncertainties, __uuidof(_IAgFmUncertainties));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefResponseTime, __uuidof(_IAgFmDefResponseTime));
_COM_SMARTPTR_TYPEDEF(IAgFmDefResponseTime, __uuidof(IAgFmDefResponseTime));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefRevisitTime, __uuidof(_IAgFmDefRevisitTime));
_COM_SMARTPTR_TYPEDEF(IAgFmDefRevisitTime, __uuidof(IAgFmDefRevisitTime));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefSimpleCoverage, __uuidof(_IAgFmDefSimpleCoverage));
_COM_SMARTPTR_TYPEDEF(IAgFmDefSimpleCoverage, __uuidof(IAgFmDefSimpleCoverage));
_COM_SMARTPTR_TYPEDEF(_IAgFmDefTimeAverageGap, __uuidof(_IAgFmDefTimeAverageGap));
_COM_SMARTPTR_TYPEDEF(IAgFmDefTimeAverageGap, __uuidof(IAgFmDefTimeAverageGap));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxContours, __uuidof(_IAgFmGfxContours));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxAttributes, __uuidof(_IAgFmGfxAttributes));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxContoursAnimation, __uuidof(_IAgFmGfxContoursAnimation));
_COM_SMARTPTR_TYPEDEF(IAgFmGfxContoursAnimation, __uuidof(IAgFmGfxContoursAnimation));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxAttributesAnimation, __uuidof(_IAgFmGfxAttributesAnimation));
_COM_SMARTPTR_TYPEDEF(_IAgFmGraphics, __uuidof(_IAgFmGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxRampColor, __uuidof(_IAgFmGfxRampColor));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxLevelAttributesElement, __uuidof(_IAgFmGfxLevelAttributesElement));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxPositionOnMap, __uuidof(_IAgFmGfxPositionOnMap));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxColorOptions, __uuidof(_IAgFmGfxColorOptions));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxLegendWindow, __uuidof(_IAgFmGfxLegendWindow));
_COM_SMARTPTR_TYPEDEF(_IAgFmVOLegendWindow, __uuidof(_IAgFmVOLegendWindow));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxTextOptions, __uuidof(_IAgFmGfxTextOptions));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxRangeColorOptions, __uuidof(_IAgFmGfxRangeColorOptions));
_COM_SMARTPTR_TYPEDEF(_IAgFmGfxLegend, __uuidof(_IAgFmGfxLegend));
_COM_SMARTPTR_TYPEDEF(_IAgFmNAMethodElevationAngle, __uuidof(_IAgFmNAMethodElevationAngle));
_COM_SMARTPTR_TYPEDEF(IAgFmNAMethodElevationAngle, __uuidof(IAgFmNAMethodElevationAngle));
_COM_SMARTPTR_TYPEDEF(_IAgFmNAMethodConstant, __uuidof(_IAgFmNAMethodConstant));
_COM_SMARTPTR_TYPEDEF(IAgFmNAMethodConstant, __uuidof(IAgFmNAMethodConstant));
_COM_SMARTPTR_TYPEDEF(_IAgFmVOAttributes, __uuidof(_IAgFmVOAttributes));
_COM_SMARTPTR_TYPEDEF(_IAgFmVO, __uuidof(_IAgFmVO));
_COM_SMARTPTR_TYPEDEF(_IAgVeProfileGPS, __uuidof(_IAgVeProfileGPS));
_COM_SMARTPTR_TYPEDEF(IAgVeProfileGPS, __uuidof(IAgVeProfileGPS));
_COM_SMARTPTR_TYPEDEF(_IAgStdMil2525bSymbols, __uuidof(_IAgStdMil2525bSymbols));
_COM_SMARTPTR_TYPEDEF(_IAgCvGridInspector, __uuidof(_IAgCvGridInspector));
_COM_SMARTPTR_TYPEDEF(_IAgFmGridInspector, __uuidof(_IAgFmGridInspector));
_COM_SMARTPTR_TYPEDEF(_IAgVOVaporTrail, __uuidof(_IAgVOVaporTrail));
_COM_SMARTPTR_TYPEDEF(_IAgAccessCnstrPluginMinMax, __uuidof(_IAgAccessCnstrPluginMinMax));
_COM_SMARTPTR_TYPEDEF(IAgAccessCnstrPluginMinMax, __uuidof(IAgAccessCnstrPluginMinMax));
_COM_SMARTPTR_TYPEDEF(IAgCnCnstrRestriction, __uuidof(IAgCnCnstrRestriction));
_COM_SMARTPTR_TYPEDEF(_IAgCnConstraints, __uuidof(_IAgCnConstraints));
_COM_SMARTPTR_TYPEDEF(IAgCnConstraints, __uuidof(IAgCnConstraints));
_COM_SMARTPTR_TYPEDEF(_IAgCnCnstrObjectRestriction, __uuidof(_IAgCnCnstrObjectRestriction));
_COM_SMARTPTR_TYPEDEF(IAgCnCnstrObjectRestriction, __uuidof(IAgCnCnstrObjectRestriction));
_COM_SMARTPTR_TYPEDEF(_IAgCnCnstrRestriction, __uuidof(_IAgCnCnstrRestriction));
_COM_SMARTPTR_TYPEDEF(IAgCnGraphics, __uuidof(IAgCnGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgCnGraphics, __uuidof(_IAgCnGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgEventDetectionNoSubSampling, __uuidof(_IAgEventDetectionNoSubSampling));
_COM_SMARTPTR_TYPEDEF(IAgEventDetectionNoSubSampling, __uuidof(IAgEventDetectionNoSubSampling));
_COM_SMARTPTR_TYPEDEF(_IAgEventDetectionSubSampling, __uuidof(_IAgEventDetectionSubSampling));
_COM_SMARTPTR_TYPEDEF(IAgEventDetectionSubSampling, __uuidof(IAgEventDetectionSubSampling));
_COM_SMARTPTR_TYPEDEF(_IAgSamplingMethodAdaptive, __uuidof(_IAgSamplingMethodAdaptive));
_COM_SMARTPTR_TYPEDEF(IAgSamplingMethodAdaptive, __uuidof(IAgSamplingMethodAdaptive));
_COM_SMARTPTR_TYPEDEF(_IAgSamplingMethodFixedStep, __uuidof(_IAgSamplingMethodFixedStep));
_COM_SMARTPTR_TYPEDEF(IAgSamplingMethodFixedStep, __uuidof(IAgSamplingMethodFixedStep));
_COM_SMARTPTR_TYPEDEF(_IAgSnAccessAdvanced, __uuidof(_IAgSnAccessAdvanced));
_COM_SMARTPTR_TYPEDEF(_IAgVeAccessAdvanced, __uuidof(_IAgVeAccessAdvanced));
_COM_SMARTPTR_TYPEDEF(_IAgAccessSampling, __uuidof(_IAgAccessSampling));
_COM_SMARTPTR_TYPEDEF(_IAgAccessEventDetection, __uuidof(_IAgAccessEventDetection));
_COM_SMARTPTR_TYPEDEF(_IAgSnVOProjectionElement, __uuidof(_IAgSnVOProjectionElement));
_COM_SMARTPTR_TYPEDEF(_IAgCentralBodyTerrainCollectionElement, __uuidof(_IAgCentralBodyTerrainCollectionElement));
_COM_SMARTPTR_TYPEDEF(_IAgSaExportTools, __uuidof(_IAgSaExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgLvExportTools, __uuidof(_IAgLvExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgGvExportTools, __uuidof(_IAgGvExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgMsExportTools, __uuidof(_IAgMsExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgAcExportTools, __uuidof(_IAgAcExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgShExportTools, __uuidof(_IAgShExportTools));
_COM_SMARTPTR_TYPEDEF(_IAgVeEphemerisCode500ExportTool, __uuidof(_IAgVeEphemerisCode500ExportTool));
_COM_SMARTPTR_TYPEDEF(_IAgVeEphemerisCCSDSExportTool, __uuidof(_IAgVeEphemerisCCSDSExportTool));
_COM_SMARTPTR_TYPEDEF(_IAgVeEphemerisStkExportTool, __uuidof(_IAgVeEphemerisStkExportTool));
_COM_SMARTPTR_TYPEDEF(_IAgVeEphemerisSpiceExportTool, __uuidof(_IAgVeEphemerisSpiceExportTool));
_COM_SMARTPTR_TYPEDEF(_IAgExportToolTimePeriod, __uuidof(_IAgExportToolTimePeriod));
_COM_SMARTPTR_TYPEDEF(_IAgVeAttitudeExportTool, __uuidof(_IAgVeAttitudeExportTool));
_COM_SMARTPTR_TYPEDEF(_IAgVePropDefExportTool, __uuidof(_IAgVePropDefExportTool));
_COM_SMARTPTR_TYPEDEF(_IAgVeCoordinateAxesCustom, __uuidof(_IAgVeCoordinateAxesCustom));
_COM_SMARTPTR_TYPEDEF(IAgVeCoordinateAxesCustom, __uuidof(IAgVeCoordinateAxesCustom));
_COM_SMARTPTR_TYPEDEF(_IAgExportToolStepSize, __uuidof(_IAgExportToolStepSize));
_COM_SMARTPTR_TYPEDEF(_IAgVeEclipsingBodies, __uuidof(_IAgVeEclipsingBodies));
_COM_SMARTPTR_TYPEDEF(_IAgLocationCrdnPoint, __uuidof(_IAgLocationCrdnPoint));
_COM_SMARTPTR_TYPEDEF(IAgLocationCrdnPoint, __uuidof(IAgLocationCrdnPoint));
_COM_SMARTPTR_TYPEDEF(_IAgTimePeriod, __uuidof(_IAgTimePeriod));
_COM_SMARTPTR_TYPEDEF(_IAgTimePeriodValue, __uuidof(_IAgTimePeriodValue));
_COM_SMARTPTR_TYPEDEF(_IAgSpatialState, __uuidof(_IAgSpatialState));
_COM_SMARTPTR_TYPEDEF(_IAgVeSpatialInfo, __uuidof(_IAgVeSpatialInfo));
_COM_SMARTPTR_TYPEDEF(_IAgOnePtAccess, __uuidof(_IAgOnePtAccess));
_COM_SMARTPTR_TYPEDEF(_IAgOnePtAccessResult, __uuidof(_IAgOnePtAccessResult));
_COM_SMARTPTR_TYPEDEF(_IAgOnePtAccessConstraint, __uuidof(_IAgOnePtAccessConstraint));
_COM_SMARTPTR_TYPEDEF(IAgVeRealtimeCartesianPoints, __uuidof(IAgVeRealtimeCartesianPoints));
_COM_SMARTPTR_TYPEDEF(IAgVeRealtimeLLAHPSPoints, __uuidof(IAgVeRealtimeLLAHPSPoints));
_COM_SMARTPTR_TYPEDEF(IAgVeRealtimeLLAPoints, __uuidof(IAgVeRealtimeLLAPoints));
_COM_SMARTPTR_TYPEDEF(IAgVeRealtimeUTMPoints, __uuidof(IAgVeRealtimeUTMPoints));
_COM_SMARTPTR_TYPEDEF(IAgVeRealtimePointBuilder, __uuidof(IAgVeRealtimePointBuilder));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorRealtime, __uuidof(_IAgVePropagatorRealtime));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorRealtime, __uuidof(IAgVePropagatorRealtime));
_COM_SMARTPTR_TYPEDEF(_IAgVeRealtimePointBuilder, __uuidof(_IAgVeRealtimePointBuilder));
_COM_SMARTPTR_TYPEDEF(_IAgVeRealtimeCartesianPoints, __uuidof(_IAgVeRealtimeCartesianPoints));
_COM_SMARTPTR_TYPEDEF(_IAgVeRealtimeLLAHPSPoints, __uuidof(_IAgVeRealtimeLLAHPSPoints));
_COM_SMARTPTR_TYPEDEF(_IAgVeRealtimeLLAPoints, __uuidof(_IAgVeRealtimeLLAPoints));
_COM_SMARTPTR_TYPEDEF(_IAgVeRealtimeUTMPoints, __uuidof(_IAgVeRealtimeUTMPoints));
_COM_SMARTPTR_TYPEDEF(_IAgSRPModelGPS, __uuidof(_IAgSRPModelGPS));
_COM_SMARTPTR_TYPEDEF(IAgSRPModelGPS, __uuidof(IAgSRPModelGPS));
_COM_SMARTPTR_TYPEDEF(_IAgSRPModelSpherical, __uuidof(_IAgSRPModelSpherical));
_COM_SMARTPTR_TYPEDEF(IAgSRPModelSpherical, __uuidof(IAgSRPModelSpherical));
_COM_SMARTPTR_TYPEDEF(_IAgVeHPOPSRPModel, __uuidof(_IAgVeHPOPSRPModel));
_COM_SMARTPTR_TYPEDEF(_IAgScAnimationTimePeriod, __uuidof(_IAgScAnimationTimePeriod));
_COM_SMARTPTR_TYPEDEF(_IAgSnProjConstantAlt, __uuidof(_IAgSnProjConstantAlt));
_COM_SMARTPTR_TYPEDEF(IAgSnProjConstantAlt, __uuidof(IAgSnProjConstantAlt));
_COM_SMARTPTR_TYPEDEF(_IAgSnProjObjectAlt, __uuidof(_IAgSnProjObjectAlt));
_COM_SMARTPTR_TYPEDEF(IAgSnProjObjectAlt, __uuidof(IAgSnProjObjectAlt));
_COM_SMARTPTR_TYPEDEF(_IAgVeAttitudeRealTimeDataReference, __uuidof(_IAgVeAttitudeRealTimeDataReference));
_COM_SMARTPTR_TYPEDEF(_IAgMtoAnalysis, __uuidof(_IAgMtoAnalysis));
_COM_SMARTPTR_TYPEDEF(_IAgMtoAnalysisPosition, __uuidof(_IAgMtoAnalysisPosition));
_COM_SMARTPTR_TYPEDEF(_IAgMtoAnalysisRange, __uuidof(_IAgMtoAnalysisRange));
_COM_SMARTPTR_TYPEDEF(_IAgMtoAnalysisFieldOfView, __uuidof(_IAgMtoAnalysisFieldOfView));
_COM_SMARTPTR_TYPEDEF(_IAgMtoAnalysisVisibility, __uuidof(_IAgMtoAnalysisVisibility));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSAutoUpdateProperties, __uuidof(IAgVeGPSAutoUpdateProperties));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSElement, __uuidof(IAgVeGPSElement));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSElementCollection, __uuidof(IAgVeGPSElementCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSAutoUpdateFileSource, __uuidof(IAgVeGPSAutoUpdateFileSource));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSAutoUpdateOnlineSource, __uuidof(IAgVeGPSAutoUpdateOnlineSource));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSAutoUpdate, __uuidof(IAgVeGPSAutoUpdate));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSAlmanacProperties, __uuidof(IAgVeGPSAlmanacProperties));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSSpecifyAlmanac, __uuidof(IAgVeGPSSpecifyAlmanac));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorGPS, __uuidof(_IAgVePropagatorGPS));
_COM_SMARTPTR_TYPEDEF(IAgVePropagatorGPS, __uuidof(IAgVePropagatorGPS));
_COM_SMARTPTR_TYPEDEF(_IAgAvailableFeatures, __uuidof(_IAgAvailableFeatures));
_COM_SMARTPTR_TYPEDEF(_IAgVePropagatorSGP4CommonTasks, __uuidof(_IAgVePropagatorSGP4CommonTasks));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4AutoUpdateProperties, __uuidof(_IAgVeSGP4AutoUpdateProperties));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4AutoUpdateFileSource, __uuidof(_IAgVeSGP4AutoUpdateFileSource));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4AutoUpdateOnlineSource, __uuidof(_IAgVeSGP4AutoUpdateOnlineSource));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4AutoUpdate, __uuidof(_IAgVeSGP4AutoUpdate));
_COM_SMARTPTR_TYPEDEF(_IAgVeSGP4PropagatorSettings, __uuidof(_IAgVeSGP4PropagatorSettings));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSAutoUpdateProperties, __uuidof(_IAgVeGPSAutoUpdateProperties));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSAutoUpdateFileSource, __uuidof(_IAgVeGPSAutoUpdateFileSource));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSAutoUpdateOnlineSource, __uuidof(_IAgVeGPSAutoUpdateOnlineSource));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSAutoUpdate, __uuidof(_IAgVeGPSAutoUpdate));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSSpecifyAlmanac, __uuidof(_IAgVeGPSSpecifyAlmanac));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSAlmanacProperties, __uuidof(_IAgVeGPSAlmanacProperties));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSAlmanacPropertiesSEM, __uuidof(_IAgVeGPSAlmanacPropertiesSEM));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSAlmanacPropertiesSEM, __uuidof(IAgVeGPSAlmanacPropertiesSEM));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSAlmanacPropertiesYUMA, __uuidof(_IAgVeGPSAlmanacPropertiesYUMA));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSAlmanacPropertiesYUMA, __uuidof(IAgVeGPSAlmanacPropertiesYUMA));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSAlmanacPropertiesSP3, __uuidof(_IAgVeGPSAlmanacPropertiesSP3));
_COM_SMARTPTR_TYPEDEF(IAgVeGPSAlmanacPropertiesSP3, __uuidof(IAgVeGPSAlmanacPropertiesSP3));
_COM_SMARTPTR_TYPEDEF(_IAgVeGPSElement, __uuidof(_IAgVeGPSElement));
_COM_SMARTPTR_TYPEDEF(_IAgSpEnvRadEnergyMethodSpecify, __uuidof(_IAgSpEnvRadEnergyMethodSpecify));
_COM_SMARTPTR_TYPEDEF(_IAgSpEnvRadEnergyValues, __uuidof(_IAgSpEnvRadEnergyValues));
_COM_SMARTPTR_TYPEDEF(_IAgSpEnvRadiationEnvironment, __uuidof(_IAgSpEnvRadiationEnvironment));
_COM_SMARTPTR_TYPEDEF(_IAgSpEnvMagFieldGfx, __uuidof(_IAgSpEnvMagFieldGfx));
_COM_SMARTPTR_TYPEDEF(_IAgSpEnvScenExtVO, __uuidof(_IAgSpEnvScenExtVO));
_COM_SMARTPTR_TYPEDEF(_IAgSpEnvScenSpaceEnvironment, __uuidof(_IAgSpEnvScenSpaceEnvironment));
_COM_SMARTPTR_TYPEDEF(_IAgVeSpEnvRadDoseRateElement, __uuidof(_IAgVeSpEnvRadDoseRateElement));
_COM_SMARTPTR_TYPEDEF(_IAgSpEnvSAAContour, __uuidof(_IAgSpEnvSAAContour));
_COM_SMARTPTR_TYPEDEF(_IAgVeSpEnvVehTemperature, __uuidof(_IAgVeSpEnvVehTemperature));
_COM_SMARTPTR_TYPEDEF(_IAgVeSpEnvParticleFlux, __uuidof(_IAgVeSpEnvParticleFlux));
_COM_SMARTPTR_TYPEDEF(_IAgVeSpEnvMagneticField, __uuidof(_IAgVeSpEnvMagneticField));
_COM_SMARTPTR_TYPEDEF(_IAgVeSpEnvRadiation, __uuidof(_IAgVeSpEnvRadiation));
_COM_SMARTPTR_TYPEDEF(_IAgVeSpEnvMagFieldLine, __uuidof(_IAgVeSpEnvMagFieldLine));
_COM_SMARTPTR_TYPEDEF(_IAgVeSpEnvGraphics, __uuidof(_IAgVeSpEnvGraphics));
_COM_SMARTPTR_TYPEDEF(_IAgVeSpEnvSpaceEnvironment, __uuidof(_IAgVeSpEnvSpaceEnvironment));
_COM_SMARTPTR_TYPEDEF(_IAgCvSelectedGridPoint, __uuidof(_IAgCvSelectedGridPoint));
_COM_SMARTPTR_TYPEDEF(IAgCvSelectedGridPoint, __uuidof(IAgCvSelectedGridPoint));
_COM_SMARTPTR_TYPEDEF(_IAgCelestialBodyInfo, __uuidof(_IAgCelestialBodyInfo));
_COM_SMARTPTR_TYPEDEF(_IAgStkCentralBodyEllipsoid, __uuidof(_IAgStkCentralBodyEllipsoid));
_COM_SMARTPTR_TYPEDEF(_IAgStkCentralBody, __uuidof(_IAgStkCentralBody));
_COM_SMARTPTR_TYPEDEF(_IAgStkObject, __uuidof(_IAgStkObject));
_COM_SMARTPTR_TYPEDEF(IAgStkObject, __uuidof(IAgStkObject));
_COM_SMARTPTR_TYPEDEF(IAgStkObjectElementCollection, __uuidof(IAgStkObjectElementCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkObjectCollection, __uuidof(IAgStkObjectCollection));
_COM_SMARTPTR_TYPEDEF(IAgStkObjectRoot, __uuidof(IAgStkObjectRoot));
_COM_SMARTPTR_TYPEDEF(IAgLinkToObject, __uuidof(IAgLinkToObject));
_COM_SMARTPTR_TYPEDEF(IAgVOPointableElementsElement, __uuidof(IAgVOPointableElementsElement));
_COM_SMARTPTR_TYPEDEF(IAgVOPointableElementsCollection, __uuidof(IAgVOPointableElementsCollection));
_COM_SMARTPTR_TYPEDEF(IAgVOModelPointing, __uuidof(IAgVOModelPointing));
_COM_SMARTPTR_TYPEDEF(_IAgFaVO, __uuidof(_IAgFaVO));
_COM_SMARTPTR_TYPEDEF(IAgFaVO, __uuidof(IAgFaVO));
_COM_SMARTPTR_TYPEDEF(IAgObjectLink, __uuidof(IAgObjectLink));
_COM_SMARTPTR_TYPEDEF(IAgObjectLinkCollection, __uuidof(IAgObjectLinkCollection));
_COM_SMARTPTR_TYPEDEF(_IAgDuringAccess, __uuidof(_IAgDuringAccess));
_COM_SMARTPTR_TYPEDEF(IAgDuringAccess, __uuidof(IAgDuringAccess));
_COM_SMARTPTR_TYPEDEF(IAgSnTargetCollection, __uuidof(IAgSnTargetCollection));
_COM_SMARTPTR_TYPEDEF(_IAgSnPtTargeted, __uuidof(_IAgSnPtTargeted));
_COM_SMARTPTR_TYPEDEF(IAgSnPtTargeted, __uuidof(IAgSnPtTargeted));
_COM_SMARTPTR_TYPEDEF(IAgFacility, __uuidof(IAgFacility));
_COM_SMARTPTR_TYPEDEF(IAgTargetVO, __uuidof(IAgTargetVO));
_COM_SMARTPTR_TYPEDEF(IAgTarget, __uuidof(IAgTarget));
_COM_SMARTPTR_TYPEDEF(IAgSnCommonTasks, __uuidof(IAgSnCommonTasks));
_COM_SMARTPTR_TYPEDEF(IAgSensor, __uuidof(IAgSensor));
_COM_SMARTPTR_TYPEDEF(_IAgSnCommonTasks, __uuidof(_IAgSnCommonTasks));
_COM_SMARTPTR_TYPEDEF(_IAgTargetVO, __uuidof(_IAgTargetVO));
_COM_SMARTPTR_TYPEDEF(_IAgObjectLink, __uuidof(_IAgObjectLink));
_COM_SMARTPTR_TYPEDEF(_IAgLinkToObject, __uuidof(_IAgLinkToObject));
_COM_SMARTPTR_TYPEDEF(IAgVeVOCovariancePointingContour, __uuidof(IAgVeVOCovariancePointingContour));
_COM_SMARTPTR_TYPEDEF(IAgSaVO, __uuidof(IAgSaVO));
_COM_SMARTPTR_TYPEDEF(IAgSatellite, __uuidof(IAgSatellite));
_COM_SMARTPTR_TYPEDEF(_IAgSaVO, __uuidof(_IAgSaVO));
_COM_SMARTPTR_TYPEDEF(IAgVeScheduleTimesElement, __uuidof(IAgVeScheduleTimesElement));
_COM_SMARTPTR_TYPEDEF(IAgVeScheduleTimesCollection, __uuidof(IAgVeScheduleTimesCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVeTargetTimes, __uuidof(_IAgVeTargetTimes));
_COM_SMARTPTR_TYPEDEF(IAgVeTargetTimes, __uuidof(IAgVeTargetTimes));
_COM_SMARTPTR_TYPEDEF(IAgVeTargetPointingIntervalCollection, __uuidof(IAgVeTargetPointingIntervalCollection));
_COM_SMARTPTR_TYPEDEF(IAgVeTargetPointingElement, __uuidof(IAgVeTargetPointingElement));
_COM_SMARTPTR_TYPEDEF(IAgVeTargetPointingCollection, __uuidof(IAgVeTargetPointingCollection));
_COM_SMARTPTR_TYPEDEF(_IAgVeAttPointing, __uuidof(_IAgVeAttPointing));
_COM_SMARTPTR_TYPEDEF(IAgVePointing, __uuidof(IAgVePointing));
_COM_SMARTPTR_TYPEDEF(IAgVeAttPointing, __uuidof(IAgVeAttPointing));
_COM_SMARTPTR_TYPEDEF(_IAgVeTargetPointingElement, __uuidof(_IAgVeTargetPointingElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeScheduleTimesElement, __uuidof(_IAgVeScheduleTimesElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeTrajectoryAttitudeStandard, __uuidof(_IAgVeTrajectoryAttitudeStandard));
_COM_SMARTPTR_TYPEDEF(IAgVeTrajectoryAttitudeStandard, __uuidof(IAgVeTrajectoryAttitudeStandard));
_COM_SMARTPTR_TYPEDEF(_IAgVeOrbitAttitudeStandard, __uuidof(_IAgVeOrbitAttitudeStandard));
_COM_SMARTPTR_TYPEDEF(IAgVeOrbitAttitudeStandard, __uuidof(IAgVeOrbitAttitudeStandard));
_COM_SMARTPTR_TYPEDEF(_IAgVeGfxAttributesAccess, __uuidof(_IAgVeGfxAttributesAccess));
_COM_SMARTPTR_TYPEDEF(IAgVeGfxAttributesAccess, __uuidof(IAgVeGfxAttributesAccess));
_COM_SMARTPTR_TYPEDEF(_IAgVOPointableElementsElement, __uuidof(_IAgVOPointableElementsElement));
_COM_SMARTPTR_TYPEDEF(_IAgVeVOCovariancePointingContour, __uuidof(_IAgVeVOCovariancePointingContour));
_COM_SMARTPTR_TYPEDEF(_IAgVOModelPointing, __uuidof(_IAgVOModelPointing));
_COM_SMARTPTR_TYPEDEF(IAgLvVO, __uuidof(IAgLvVO));
_COM_SMARTPTR_TYPEDEF(IAgLaunchVehicle, __uuidof(IAgLaunchVehicle));
_COM_SMARTPTR_TYPEDEF(_IAgLvVO, __uuidof(_IAgLvVO));
_COM_SMARTPTR_TYPEDEF(IAgGreatArcVO, __uuidof(IAgGreatArcVO));
_COM_SMARTPTR_TYPEDEF(IAgGvVO, __uuidof(IAgGvVO));
_COM_SMARTPTR_TYPEDEF(IAgGroundVehicle, __uuidof(IAgGroundVehicle));
_COM_SMARTPTR_TYPEDEF(_IAgGvVO, __uuidof(_IAgGvVO));
_COM_SMARTPTR_TYPEDEF(IAgMsVO, __uuidof(IAgMsVO));
_COM_SMARTPTR_TYPEDEF(IAgMissile, __uuidof(IAgMissile));
_COM_SMARTPTR_TYPEDEF(_IAgMsVO, __uuidof(_IAgMsVO));
_COM_SMARTPTR_TYPEDEF(IAgAcVO, __uuidof(IAgAcVO));
_COM_SMARTPTR_TYPEDEF(IAgAircraft, __uuidof(IAgAircraft));
_COM_SMARTPTR_TYPEDEF(_IAgAcVO, __uuidof(_IAgAcVO));
_COM_SMARTPTR_TYPEDEF(IAgShVO, __uuidof(IAgShVO));
_COM_SMARTPTR_TYPEDEF(IAgShip, __uuidof(IAgShip));
_COM_SMARTPTR_TYPEDEF(_IAgShVO, __uuidof(_IAgShVO));
_COM_SMARTPTR_TYPEDEF(_IAgCvBoundsCustomBoundary, __uuidof(_IAgCvBoundsCustomBoundary));
_COM_SMARTPTR_TYPEDEF(IAgCvBoundsCustomBoundary, __uuidof(IAgCvBoundsCustomBoundary));
_COM_SMARTPTR_TYPEDEF(IAgChain, __uuidof(IAgChain));
_COM_SMARTPTR_TYPEDEF(_IAgStkObjectModelContext, __uuidof(_IAgStkObjectModelContext));
_COM_SMARTPTR_TYPEDEF(IAgStkObjectModelContext, __uuidof(IAgStkObjectModelContext));
_COM_SMARTPTR_TYPEDEF(IAgConstellation, __uuidof(IAgConstellation));
_COM_SMARTPTR_TYPEDEF(IAgStkObjectCoverage, __uuidof(IAgStkObjectCoverage));
_COM_SMARTPTR_TYPEDEF(_IAgStkObjectRoot, __uuidof(_IAgStkObjectRoot));
_COM_SMARTPTR_TYPEDEF(_IAgScenario, __uuidof(_IAgScenario));
_COM_SMARTPTR_TYPEDEF(_IAgAreaTarget, __uuidof(_IAgAreaTarget));
_COM_SMARTPTR_TYPEDEF(_IAgFacility, __uuidof(_IAgFacility));
_COM_SMARTPTR_TYPEDEF(_IAgTarget, __uuidof(_IAgTarget));
_COM_SMARTPTR_TYPEDEF(_IAgPlanet, __uuidof(_IAgPlanet));
_COM_SMARTPTR_TYPEDEF(_IAgSensor, __uuidof(_IAgSensor));
_COM_SMARTPTR_TYPEDEF(_IAgStar, __uuidof(_IAgStar));
_COM_SMARTPTR_TYPEDEF(_IAgSatellite, __uuidof(_IAgSatellite));
_COM_SMARTPTR_TYPEDEF(_IAgLaunchVehicle, __uuidof(_IAgLaunchVehicle));
_COM_SMARTPTR_TYPEDEF(_IAgGroundVehicle, __uuidof(_IAgGroundVehicle));
_COM_SMARTPTR_TYPEDEF(_IAgMissile, __uuidof(_IAgMissile));
_COM_SMARTPTR_TYPEDEF(_IAgAircraft, __uuidof(_IAgAircraft));
_COM_SMARTPTR_TYPEDEF(_IAgShip, __uuidof(_IAgShip));
_COM_SMARTPTR_TYPEDEF(_IAgMto, __uuidof(_IAgMto));
_COM_SMARTPTR_TYPEDEF(_IAgLineTarget, __uuidof(_IAgLineTarget));
_COM_SMARTPTR_TYPEDEF(_IAgChain, __uuidof(_IAgChain));
_COM_SMARTPTR_TYPEDEF(_IAgFigureOfMerit, __uuidof(_IAgFigureOfMerit));
_COM_SMARTPTR_TYPEDEF(_IAgConstellation, __uuidof(_IAgConstellation));
_COM_SMARTPTR_TYPEDEF(IAgCvAssetListCollection, __uuidof(IAgCvAssetListCollection));
_COM_SMARTPTR_TYPEDEF(IAgCvAssetListElement, __uuidof(IAgCvAssetListElement));
_COM_SMARTPTR_TYPEDEF(_IAgStkObjectCoverage, __uuidof(_IAgStkObjectCoverage));
_COM_SMARTPTR_TYPEDEF(_IAgCoverageDefinition, __uuidof(_IAgCoverageDefinition));
_COM_SMARTPTR_TYPEDEF(IAgCoverageDefinition, __uuidof(IAgCoverageDefinition));
_COM_SMARTPTR_TYPEDEF(_IAgCvAssetListElement, __uuidof(_IAgCvAssetListElement));

//
// Type library items
//

struct __declspec(uuid("bc6991d0-b9a8-49a4-9a1b-e7154b844e07"))
IAgStkObjectRootEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnScenarioNew (
        _bstr_t Path );
    HRESULT OnScenarioLoad (
        _bstr_t Path );
    HRESULT OnScenarioClose ( );
    HRESULT OnScenarioSave (
        _bstr_t Path );
    HRESULT OnLogMessage (
        _bstr_t Message,
        enum STKUtil::AgELogMsgType MsgType,
        long ErrorCode,
        _bstr_t Filename,
        long LineNo,
        enum STKUtil::AgELogMsgDispID DispID );
    HRESULT OnAnimUpdate (
        double TimeEpSec );
    HRESULT OnStkObjectAdded (
        const _variant_t & Sender );
    HRESULT OnStkObjectDeleted (
        const _variant_t & Sender );
    HRESULT OnStkObjectRenamed (
        const _variant_t & Sender,
        _bstr_t OldPath,
        _bstr_t NewPath );
    HRESULT OnAnimationPlayback (
        double CurrentTime,
        enum AgEAnimationActions eAction,
        enum AgEAnimationDirections eDirection );
    HRESULT OnAnimationRewind ( );
    HRESULT OnAnimationPause (
        double CurrentTime );
    HRESULT OnScenarioBeforeSave (
        struct IAgScenarioBeforeSaveEventArgs * pArgs );
    HRESULT OnAnimationStep (
        double CurrentTime );
    HRESULT OnAnimationStepBack (
        double CurrentTime );
    HRESULT OnAnimationSlower ( );
    HRESULT OnAnimationFaster ( );
    HRESULT OnPercentCompleteUpdate (
        struct IAgPctCmpltEventArgs * pArgs );
    HRESULT OnPercentCompleteEnd ( );
    HRESULT OnPercentCompleteBegin ( );
    HRESULT OnStkObjectChanged (
        struct IAgStkObjectChangedEventArgs * pArgs );
    HRESULT OnScenarioBeforeClose ( );
};

enum AgEAnimationActions
{
    eAniActionPlay = 0,
    eAniActionStart = 1,
    eAniActionPlayStep = 2,
    eAniActionPlayFaster = 3,
    eAniActionPlaySlower = 4,
    eAniActionStop = 5
};

enum AgEAnimationDirections
{
    eAniNonAvail = 0,
    eAniForward = 1,
    eAniBackward = 2
};

struct __declspec(uuid("f6cfa2d2-229e-4995-b917-c0795de30ad7"))
IAgScenarioBeforeSaveEventArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetContinueSave,put=PutContinueSave))
    VARIANT_BOOL ContinueSave;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );
    VARIANT_BOOL GetContinueSave ( );
    void PutContinueSave (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ContinueSave (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ContinueSave (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("1fdccdbd-1c90-407a-ba87-9ed38d17fc79"))
IAgPctCmpltEventArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCanceled))
    VARIANT_BOOL Canceled;
    __declspec(property(get=GetCanCancel))
    VARIANT_BOOL CanCancel;
    __declspec(property(get=GetPercentCompleted))
    int PercentCompleted;
    __declspec(property(get=GetMessage))
    _bstr_t Message;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Cancel ( );
    VARIANT_BOOL GetCanceled ( );
    VARIANT_BOOL GetCanCancel ( );
    int GetPercentCompleted ( );
    _bstr_t GetMessage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Cancel ( ) = 0;
      virtual HRESULT __stdcall get_Canceled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CanCancel (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PercentCompleted (
        /*[out,retval]*/ int * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("aacd8906-43cb-4071-a882-875770a22fb5"))
IAgStkObjectChangedEventArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("47c69211-d2df-4beb-b94e-04a6fd909203"))
AgStkObject;
    // [ default ] interface _IAgStkObject
    // interface IAgStkObject
    // interface IAgLifetimeInformation

enum AgESTKObjectType
{
    eAdvCat = 0,
    eAircraft = 1,
    eAreaTarget = 2,
    eAttitudeCoverage = 3,
    eChain = 4,
    eCommSystem = 5,
    eConstellation = 6,
    eCoverageDefinition = 7,
    eFacility = 8,
    eGroundVehicle = 9,
    eLaunchVehicle = 10,
    eLineTarget = 11,
    eMTO = 12,
    eMissile = 13,
    eMissileSystem = 14,
    ePlanet = 15,
    eRadar = 16,
    eReceiver = 17,
    eSatellite = 18,
    eScenario = 19,
    eSensor = 20,
    eShip = 21,
    eStar = 22,
    eTarget = 23,
    eTransmitter = 24,
    eFigureOfMerit = 25,
    eRoot = 26,
    eAccess = 27,
    eObjectCoverage = 28,
    eAttitudeFigureOfMerit = 29,
    eSubmarine = 30,
    eAntenna = 31
};

struct __declspec(uuid("a8933ffe-b9ad-4a8c-9ef1-228982b21279"))
IAgStdMil2525bSymbols : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFillEnabled,put=PutFillEnabled))
    VARIANT_BOOL FillEnabled;
    __declspec(property(get=GetSymbolImageSize,put=PutSymbolImageSize))
    unsigned int SymbolImageSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetFillEnabled ( );
    void PutFillEnabled (
        VARIANT_BOOL pRetVal );
    unsigned int GetSymbolImageSize ( );
    void PutSymbolImageSize (
        unsigned int pRetVal );
    HRESULT CreateSymbol (
        _bstr_t SymbolID,
        _bstr_t SaveImageFilePath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FillEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FillEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SymbolImageSize (
        /*[out,retval]*/ unsigned int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SymbolImageSize (
        /*[in]*/ unsigned int pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSymbol (
        /*[in]*/ BSTR SymbolID,
        /*[in]*/ BSTR SaveImageFilePath ) = 0;
};

enum AgEVePropagatorType
{
    eUnknownPropagator = -1,
    ePropagatorHPOP = 0,
    ePropagatorJ2Perturbation = 1,
    ePropagatorJ4Perturbation = 2,
    ePropagatorLOP = 3,
    ePropagatorSGP4 = 4,
    ePropagatorSPICE = 5,
    ePropagatorStkExternal = 6,
    ePropagatorTwoBody = 7,
    ePropagatorUserExternal = 8,
    ePropagatorGreatArc = 9,
    ePropagatorBallistic = 10,
    ePropagatorSimpleAscent = 11,
    ePropagatorAstrogator = 12,
    ePropagatorRealtime = 13,
    ePropagatorGPS = 14,
    ePropagatorMissionModeler = 15
};

struct __declspec(uuid("61a88d23-e0af-4d30-830d-627d4832198e"))
IAgAvailableFeatures : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsPropagatorTypeAvailable (
        enum AgEVePropagatorType PropagatorType );
    VARIANT_BOOL IsObjectTypeAvailable (
        enum AgESTKObjectType ObjectType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsPropagatorTypeAvailable (
        /*[in]*/ enum AgEVePropagatorType PropagatorType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsObjectTypeAvailable (
        /*[in]*/ enum AgESTKObjectType ObjectType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("f6e08959-2132-43b4-8bf7-89abad09ba08"))
IAgStkCentralBodyEllipsoid : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetA))
    double A;
    __declspec(property(get=GetB))
    double B;
    __declspec(property(get=GetC))
    double C;
    __declspec(property(get=GetMeanRadius))
    double MeanRadius;
    __declspec(property(get=GetVolumetricRadius))
    double VolumetricRadius;

    //
    // Wrapper methods for error-handling
    //

    double GetA ( );
    double GetB ( );
    double GetC ( );
    double GetMeanRadius ( );
    double GetVolumetricRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumetricRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("2d1f07ca-3398-4e8b-b58a-ec9b5ac3dce0"))
IAgStkCentralBody : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEllipsoid))
    IAgStkCentralBodyEllipsoidPtr Ellipsoid;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IAgStkCentralBodyEllipsoidPtr GetEllipsoid ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ellipsoid (
        /*[out,retval]*/ struct IAgStkCentralBodyEllipsoid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("e490ccb1-6ebb-42a7-8729-9f5ae15623ee"))
IAgStkCentralBodyCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkCentralBodyPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEarth))
    IAgStkCentralBodyPtr Earth;
    __declspec(property(get=GetSun))
    IAgStkCentralBodyPtr Sun;
    __declspec(property(get=GetMoon))
    IAgStkCentralBodyPtr Moon;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Contains (
        _bstr_t CentralName );
    IAgStkCentralBodyPtr GetEarth ( );
    IAgStkCentralBodyPtr GetSun ( );
    IAgStkCentralBodyPtr GetMoon ( );
    long GetCount ( );
    IAgStkCentralBodyPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR CentralName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Earth (
        /*[out,retval]*/ struct IAgStkCentralBody * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sun (
        /*[out,retval]*/ struct IAgStkCentralBody * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Moon (
        /*[out,retval]*/ struct IAgStkCentralBody * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IAgStkCentralBody * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

enum AgEDataProviderType
{
    eDrFixed = 1,
    eDrTimeVar = 2,
    eDrIntvl = 4,
    eDrDupTime = 256,
    eDrStandAlone = 512,
    eDrIntvlDefined = 1024,
    eDrDynIgnore = 2048
};

struct __declspec(uuid("b1059251-8787-4ddc-a2bc-0c572eb8b161"))
IAgDataProviderInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgEDataProviderType Type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum AgEDataProviderType GetType ( );
    VARIANT_BOOL IsGroup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEDataProviderType * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsGroup (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgEDrCategories
{
    eDrCatIntervalList = 0,
    eDrCatSubSectionList = 1,
    eDrCatMessage = 2,
    eDrCatDataSetList = 3
};

struct __declspec(uuid("0a0dc9a4-587e-46cd-80f1-2873bc663bd9"))
IAgDrDataSet : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetElementName))
    _bstr_t ElementName;
    __declspec(property(get=GetElementType))
    long ElementType;
    __declspec(property(get=GetUnitType))
    long UnitType;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetElementName ( );
    long GetElementType ( );
    long GetUnitType ( );
    long GetCount ( );
    SAFEARRAY * GetValues ( );
    SAFEARRAY * GetInternalUnitValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ElementName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ElementType (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_UnitType (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetValues (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetInternalUnitValues (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("28d2419a-15ca-4df5-9e62-5fd84785fdb6"))
IAgDrDataSetCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgDrDataSetPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetRowCount))
    long RowCount;
    __declspec(property(get=GetElementNames))
    SAFEARRAY * ElementNames;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgDrDataSetPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IAgDrDataSetPtr GetDataSetByName (
        _bstr_t DataSetName );
    long GetRowCount ( );
    SAFEARRAY * GetRow (
        long Index );
    SAFEARRAY * ToArray ( );
    SAFEARRAY * GetElementNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgDrDataSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataSetByName (
        /*[in]*/ BSTR DataSetName,
        /*[out,retval]*/ struct IAgDrDataSet * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RowCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRow (
        /*[in]*/ long Index,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ElementNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("f51f42d1-70d1-48e2-8f32-b84ffd01ba95"))
IAgDrInterval : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetDataSets))
    IAgDrDataSetCollectionPtr DataSets;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    IAgDrDataSetCollectionPtr GetDataSets ( );
    SAFEARRAY * ThresholdCrossings (
        _bstr_t ElemName,
        const _variant_t & Threshold );
    SAFEARRAY * MultipleThresholdCrossings (
        _bstr_t ElemName,
        SAFEARRAY * * Thresholds );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_DataSets (
        /*[out,retval]*/ struct IAgDrDataSetCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ThresholdCrossings (
        /*[in]*/ BSTR ElemName,
        /*[in]*/ VARIANT Threshold,
        /*[out,retval]*/ SAFEARRAY * * ppCrossings ) = 0;
      virtual HRESULT __stdcall raw_MultipleThresholdCrossings (
        /*[in]*/ BSTR ElemName,
        /*[in]*/ SAFEARRAY * * Thresholds,
        /*[out,retval]*/ SAFEARRAY * * ppCrossings ) = 0;
};

struct __declspec(uuid("34211a29-e338-43af-92d2-54f693b9bec3"))
IAgDrIntervalCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgDrIntervalPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgDrIntervalPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgDrInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("78c4cc9c-c9b6-4234-ba73-8d90d7b5996f"))
IAgDrSubSection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetIntervals))
    IAgDrIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    IAgDrIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgDrIntervalCollection * * ppVal ) = 0;
};

struct __declspec(uuid("9bacc62b-fed2-49e2-b784-cd1ac16e1546"))
IAgDrSubSectionCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgDrSubSectionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgDrSubSectionPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgDrSubSection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("82ca24eb-b64d-4d56-9f22-67950fa5268c"))
IAgDrTextMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMessages))
    SAFEARRAY * Messages;
    __declspec(property(get=GetIsFailure))
    VARIANT_BOOL IsFailure;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    SAFEARRAY * GetMessages ( );
    VARIANT_BOOL GetIsFailure ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Messages (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsFailure (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("41779e83-e8fd-4122-bea3-25f25df32591"))
IAgDrResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCategory))
    enum AgEDrCategories Category;
    __declspec(property(get=GetValue))
    IDispatchPtr Value;
    __declspec(property(get=GetSections))
    IAgDrSubSectionCollectionPtr Sections;
    __declspec(property(get=GetIntervals))
    IAgDrIntervalCollectionPtr Intervals;
    __declspec(property(get=GetDataSets))
    IAgDrDataSetCollectionPtr DataSets;
    __declspec(property(get=GetMessage))
    IAgDrTextMessagePtr Message;

    //
    // Wrapper methods for error-handling
    //

    enum AgEDrCategories GetCategory ( );
    IDispatchPtr GetValue ( );
    IAgDrSubSectionCollectionPtr GetSections ( );
    IAgDrIntervalCollectionPtr GetIntervals ( );
    IAgDrDataSetCollectionPtr GetDataSets ( );
    IAgDrTextMessagePtr GetMessage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ enum AgEDrCategories * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sections (
        /*[out,retval]*/ struct IAgDrSubSectionCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgDrIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataSets (
        /*[out,retval]*/ struct IAgDrDataSetCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ struct IAgDrTextMessage * * ppRetVal ) = 0;
};

struct __declspec(uuid("8d12f436-5aa8-4d4c-a727-adb43dcd9dc8"))
IAgDrTimeArrayElements : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetArray (
        const _variant_t & IndexOrName );
    VARIANT_BOOL GetValid ( );
    int GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetArray (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
};

struct __declspec(uuid("0ecec640-964b-4949-9315-b6eb70fbf536"))
IAgDataPrvTimeVar : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgDrResultPtr Exec (
        const _variant_t & StartTime,
        const _variant_t & StopTime,
        double StepTime );
    IAgDrResultPtr ExecElements (
        const _variant_t & StartTime,
        const _variant_t & StopTime,
        double StepTime,
        SAFEARRAY * * ElementNames );
    IAgDrResultPtr ExecSingle (
        const _variant_t & SingleTime );
    IAgDrResultPtr ExecSingleElements (
        const _variant_t & SingleTime,
        SAFEARRAY * * ElementNames );
    IAgDrTimeArrayElementsPtr ExecSingleElementsArray (
        SAFEARRAY * * TimeArray,
        SAFEARRAY * * ElementNames );
    IAgDrResultPtr ExecNativeTimes (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    IAgDrResultPtr ExecElementsNativeTimes (
        const _variant_t & StartTime,
        const _variant_t & StopTime,
        SAFEARRAY * * ElementNames );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Exec (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[in]*/ double StepTime,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
      virtual HRESULT __stdcall raw_ExecElements (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[in]*/ double StepTime,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
      virtual HRESULT __stdcall raw_ExecSingle (
        /*[in]*/ VARIANT SingleTime,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
      virtual HRESULT __stdcall raw_ExecSingleElements (
        /*[in]*/ VARIANT SingleTime,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
      virtual HRESULT __stdcall raw_ExecSingleElementsArray (
        /*[in]*/ SAFEARRAY * * TimeArray,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrTimeArrayElements * * ppIAgDrTimeArrayElements ) = 0;
      virtual HRESULT __stdcall raw_ExecNativeTimes (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
      virtual HRESULT __stdcall raw_ExecElementsNativeTimes (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
};

struct __declspec(uuid("6afaadc6-b69c-4b31-953b-7409a54df614"))
IAgDataPrvInterval : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgDrResultPtr Exec (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    IAgDrResultPtr ExecElements (
        const _variant_t & StartTime,
        const _variant_t & StopTime,
        SAFEARRAY * * ElementNames );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Exec (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
      virtual HRESULT __stdcall raw_ExecElements (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
};

struct __declspec(uuid("04123baa-bd39-41d8-b8ea-abffc8d366e4"))
IAgDataPrvFixed : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgDrResultPtr Exec ( );
    IAgDrResultPtr ExecElements (
        SAFEARRAY * * ElementNames );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Exec (
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
      virtual HRESULT __stdcall raw_ExecElements (
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
};

struct __declspec(uuid("547aafaf-0672-41fe-af74-2374b38892f7"))
IAgDataProviderCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgDataProviderInfoPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSchema ( );
    IAgDataProviderInfoPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAgDataProviderInfoPtr GetDataPrvInfoFromPath (
        _bstr_t DataProviderPath );
    IAgDataPrvTimeVarPtr GetDataPrvTimeVarFromPath (
        _bstr_t DataProviderPath );
    IAgDataPrvIntervalPtr GetDataPrvIntervalFromPath (
        _bstr_t DataProviderPath );
    IAgDataPrvFixedPtr GetDataPrvFixedFromPath (
        _bstr_t DataProviderPath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetSchema (
        /*[out,retval]*/ BSTR * pSchema ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataPrvInfoFromPath (
        /*[in]*/ BSTR DataProviderPath,
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataPrvTimeVarFromPath (
        /*[in]*/ BSTR DataProviderPath,
        /*[out,retval]*/ struct IAgDataPrvTimeVar * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataPrvIntervalFromPath (
        /*[in]*/ BSTR DataProviderPath,
        /*[out,retval]*/ struct IAgDataPrvInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataPrvFixedFromPath (
        /*[in]*/ BSTR DataProviderPath,
        /*[out,retval]*/ struct IAgDataPrvFixed * * ppRetVal ) = 0;
};

enum AgECvAssetStatus
{
    eActive = 0,
    eInactive = 1
};

enum AgECvAssetGrouping
{
    eSeparate = 0,
    eGrouped = 1
};

enum AgEFmDefinitionType
{
    eFmAccessConstraint = 0,
    eFmAccessDuration = 1,
    eFmAccessSeparation = 2,
    eFmCoverageTime = 3,
    eFmDilutionOfPrecision = 4,
    eFmNAssetCoverage = 5,
    eFmNavigationAccuracy = 6,
    eFmNumberOfAccesses = 7,
    eFmNumberOfGaps = 8,
    eFmResponseTime = 9,
    eFmRevisitTime = 10,
    eFmSimpleCoverage = 11,
    eFmTimeAverageGap = 12
};

enum AgEFmSatisfactionType
{
    eFmAtLeast = 0,
    eFmAtMost = 1,
    eFmEqualTo = 2,
    eFmGreaterThan = 3,
    eFmLessThan = 4
};

struct __declspec(uuid("42e00645-e4ca-4881-937b-cf4edb29f01f"))
IAgFmSatisfaction : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableSatisfaction,put=PutEnableSatisfaction))
    VARIANT_BOOL EnableSatisfaction;
    __declspec(property(get=GetSatisfactionType,put=PutSatisfactionType))
    enum AgEFmSatisfactionType SatisfactionType;
    __declspec(property(get=GetSatisfactionThreshold,put=PutSatisfactionThreshold))
    _variant_t SatisfactionThreshold;
    __declspec(property(get=GetInvalidDataIndicator,put=PutInvalidDataIndicator))
    _variant_t InvalidDataIndicator;
    __declspec(property(get=GetUseValueRangeCheck,put=PutUseValueRangeCheck))
    VARIANT_BOOL UseValueRangeCheck;
    __declspec(property(get=GetMinValueRange,put=PutMinValueRange))
    _variant_t MinValueRange;
    __declspec(property(get=GetMaxValueRange,put=PutMaxValueRange))
    _variant_t MaxValueRange;
    __declspec(property(get=GetExcludeValueRange,put=PutExcludeValueRange))
    VARIANT_BOOL ExcludeValueRange;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableSatisfaction ( );
    void PutEnableSatisfaction (
        VARIANT_BOOL pVal );
    enum AgEFmSatisfactionType GetSatisfactionType ( );
    void PutSatisfactionType (
        enum AgEFmSatisfactionType pVal );
    _variant_t GetSatisfactionThreshold ( );
    void PutSatisfactionThreshold (
        const _variant_t & pVal );
    _variant_t GetInvalidDataIndicator ( );
    void PutInvalidDataIndicator (
        const _variant_t & pVal );
    VARIANT_BOOL GetUseValueRangeCheck ( );
    void PutUseValueRangeCheck (
        VARIANT_BOOL pVal );
    _variant_t GetMinValueRange ( );
    void PutMinValueRange (
        const _variant_t & pInVal );
    _variant_t GetMaxValueRange ( );
    void PutMaxValueRange (
        const _variant_t & pInVal );
    VARIANT_BOOL GetExcludeValueRange ( );
    void PutExcludeValueRange (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableSatisfaction (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableSatisfaction (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SatisfactionType (
        /*[out,retval]*/ enum AgEFmSatisfactionType * pVal ) = 0;
      virtual HRESULT __stdcall put_SatisfactionType (
        /*[in]*/ enum AgEFmSatisfactionType pVal ) = 0;
      virtual HRESULT __stdcall get_SatisfactionThreshold (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SatisfactionThreshold (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_InvalidDataIndicator (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_InvalidDataIndicator (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_UseValueRangeCheck (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseValueRangeCheck (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinValueRange (
        /*[out,retval]*/ VARIANT * pInVal ) = 0;
      virtual HRESULT __stdcall put_MinValueRange (
        /*[in]*/ VARIANT pInVal ) = 0;
      virtual HRESULT __stdcall get_MaxValueRange (
        /*[out,retval]*/ VARIANT * pInVal ) = 0;
      virtual HRESULT __stdcall put_MaxValueRange (
        /*[in]*/ VARIANT pInVal ) = 0;
      virtual HRESULT __stdcall get_ExcludeValueRange (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExcludeValueRange (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("ee6249be-7493-41ce-9b0b-cb4fa996ba17"))
IAgFmDefinition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;

    //
    // Wrapper methods for error-handling
    //

    IAgFmSatisfactionPtr GetSatisfaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppVal ) = 0;
};

enum AgEFmConstraintName
{
    eFmConstraintUnknown = -1,
    eFmAltitude = 0,
    eFmAngularRate = 1,
    eFmApparentTime = 2,
    eFmAzimuthAngle = 3,
    eFmAzimuthRate = 4,
    eFmCbObstruction = 5,
    eFmCrdnAngle = 6,
    eFmCrdnVectorMag = 7,
    eFmElevationAngle = 8,
    eFmElevationRate = 9,
    eFmElevationRiseSet = 10,
    eFmGeoExclusion = 11,
    eFmGroundSampleDistance = 12,
    eFmHeightAboveHorizon = 13,
    eFmLOSLunarExclusion = 14,
    eFmLOSSunExclusion = 15,
    eFmLunarElevationAngle = 16,
    eFmMatlab = 17,
    eFmObjectExclusionAngle = 18,
    eFmPropagationDelay = 19,
    eFmRange = 20,
    eFmRangeRate = 21,
    eFmSarAreaRate = 22,
    eFmSarAzRes = 23,
    eFmSarCNR = 24,
    eFmSarExternalData = 25,
    eFmSarIntTime = 26,
    eFmSarPTCR = 27,
    eFmSarSCR = 28,
    eFmSarSNR = 29,
    eFmSarSigmaN = 30,
    eFmSrchTrkDwellTime = 31,
    eFmSrchTrkIntegratedPDet = 32,
    eFmSrchTrkIntegratedSNR = 33,
    eFmSrchTrkIntegrationTime = 34,
    eFmSrchTrkSinglePulsePDet = 35,
    eFmSrchTrkSinglePulseSNR = 36,
    eFmSunElevationAngle = 37,
    eFmTerrainGrazingAngle = 38,
    eFmAngleToAsset = 39,
    eFmLineOfSight = 40,
    eFmAzElMask = 41,
    eFmDuration = 42,
    eFmGMT = 43,
    eFmImageQuality = 44,
    eFmIntervals = 45,
    eFmLighting = 46,
    eFmLocalTime = 47,
    eFmLOSCbExclusion = 48,
    eFmThirdBodyObstruction = 48,
    eFmCrdnPointMetric = 49,
    eFmCentroidAzimuthAngle = 50,
    eFmCentroidRange = 51,
    eFmCentroidSunElevationAngle = 52,
    eFmCollectionAngle = 53,
    eFmDopplerConeAngle = 54,
    eFmLatitude = 55,
    eFmSunGroundElevAngle = 56,
    eFmTerrainMask = 57,
    eFmTimeSlipRange = 58,
    eFmCrossTrackRange = 59,
    eFmInTrackRange = 60,
    eFmSquintAngle = 61,
    eFmBackground = 62,
    eFmForeground = 63,
    eFmBetaAngle = 64,
    eFmATCentroidElevationAngle = 65,
    eFmExclusionZone = 66,
    eFmGrazingAngle = 67,
    eFmGrazingAlt = 68,
    eFmGroundElevAngle = 69,
    eFmGroundTrack = 70,
    eFmInclusionZone = 71,
    eFmSunSpecularExclusion = 72,
    eFmDepth = 73,
    eFmFieldOfView = 74,
    eFmAngleOffBoresight = 75,
    eFmAngleOffBoresightRate = 76,
    eFmAtFieldOfView = 77,
    eFmBoresightGrazingAngle = 78,
    eFmBSIntersectLightingCondition = 79,
    eFmFOVSunSpecularExclusion = 80,
    eFmFOVSunSpecularInclusion = 81,
    eFmHorizonCrossing = 82,
    eFmBSLunarExclusion = 83,
    eFmBSSunExclusion = 84,
    eFmBSCbExclusion = 85,
    eFmFOVCbObstructionCrossIn = 86,
    eFmFOVCbObstructionCrossOut = 87,
    eFmFOVCbHorizonRefine = 88,
    eFmFOVCbCenter = 89,
    eFmSensorAzElMask = 90,
    eFmSensorRangeMask = 91,
    eFmInfraredDetection = 92,
    eFmRdrXmtTgtAccess = 93,
    eFmRdrXmtAccess = 94,
    eFmRadarAccess = 95,
    eFmBistaticAngle = 96,
    eFmNoiseTemperature = 97,
    eFmSrchTrkIntegratedPulses = 98,
    eFmSrchTrkMLCFilter = 99,
    eFmSrchTrkSLCFilter = 100,
    eFmSrchTrkClearDoppler = 101,
    eFmSrchTrkUnambigRange = 102,
    eFmSrchTrkUnambigDoppler = 103,
    eFmSrchTrkSinglePulseSNRJamming = 104,
    eFmSrchTrkSinglePulseJOverS = 105,
    eFmSrchTrkSinglePulsePDetJamming = 106,
    eFmSrchTrkIntegratedSNRJamming = 107,
    eFmSrchTrkIntegratedJOverS = 108,
    eFmSrchTrkIntegratedPDetJamming = 109,
    eFmSrchTrkIntegratedPulsesJamming = 110,
    eFmSrchTrkIntegrationTimeJamming = 111,
    eFmSrchTrkDwellTimeJamming = 112,
    eFmSrchTrkConstrPlugin = 113,
    eFmSarSNRJamming = 114,
    eFmSarCNRJamming = 115,
    eFmSarSCRJamming = 116,
    eFmSarJOverS = 117,
    eFmSarConstrPlugin = 118,
    eFmSarOrthoPolSNR = 119,
    eFmSarOrthoPolCNR = 120,
    eFmSarOrthoPolSCR = 121,
    eFmSarOrthoPolPTCR = 122,
    eFmSarOrthoPolSNRJamming = 123,
    eFmSarOrthoPolCNRJamming = 124,
    eFmSarOrthoPolSCRJamming = 125,
    eFmSarOrthoPolJOverS = 126,
    eFmSrchTrkOrthoPolSinglePulseSNR = 127,
    eFmSrchTrkOrthoPolSinglePulsePDet = 128,
    eFmSrchTrkOrthoPolIntegratedSNR = 129,
    eFmSrchTrkOrthoPolIntegratedPDet = 130,
    eFmSrchTrkOrthoPolIntegratedPulses = 131,
    eFmSrchTrkOrthoPolIntegrationTime = 132,
    eFmSrchTrkOrthoPolDwellTime = 133,
    eFmSrchTrkOrthoPolSinglePulseSNRJamming = 134,
    eFmSrchTrkOrthoPolSinglePulseJOverS = 135,
    eFmSrchTrkOrthoPolSinglePulsePDetJamming = 136,
    eFmSrchTrkOrthoPolIntegratedSNRJamming = 137,
    eFmSrchTrkOrthoPolIntegratedJOverS = 138,
    eFmSrchTrkOrthoPolIntegratedPDetJamming = 139,
    eFmSrchTrkOrthoPolIntegratedPulsesJamming = 140,
    eFmSrchTrkOrthoPolIntegrationTimeJamming = 141,
    eFmSrchTrkOrthoPolDwellTimeJamming = 142,
    eFmFrequency = 143,
    eFmDopplerShift = 144,
    eFmRcvdIsotropicPower = 145,
    eFmPowerAtReceiverInput = 146,
    eFmFluxDensity = 147,
    eFmGOverT = 148,
    eFmCOverNo = 149,
    eFmCOverN = 150,
    eFmLinkMargin = 151,
    eFmEbOverNo = 152,
    eFmBitErrorRate = 153,
    eFmPolRelAngle = 154,
    eFmCommPlugin = 155,
    eFmLinkEIRP = 156,
    eFmPowerFluxDensity = 157,
    eFmTotalRcvdRfPower = 158,
    eFmCOverNoPlusIo = 159,
    eFmCOverNPlusI = 160,
    eFmCOverI = 161,
    eFmJOverS = 162,
    eFmDeltaTOverT = 163,
    eFmEbOverNoPlusIo = 164,
    eFmBERPlusI = 165,
    eFmFrequencyTrack = 166,
    eFmPhaseTrack = 167,
    eFmCodeTrack = 168,
    eFmCNoIGPSCh = 169,
    eFmAccessConstraintPlugin = 170
};

enum AgEFmCompute
{
    eFmComputeUnknown = -1,
    eAverage = 0,
    eMaximum = 1,
    eMinimum = 2,
    ePercentAbove = 3,
    ePercentBelow = 4,
    eStdDeviation = 5,
    eMaxPerDay = 6,
    eMaxPercentPerDay = 7,
    eMinPerDay = 8,
    eMinPercentPerDay = 9,
    ePerDay = 10,
    ePerDayStdDev = 11,
    ePercent = 12,
    ePercentPerDay = 13,
    ePercentPerDayStdDev = 14,
    ePercentTimeAbove = 15,
    eTotal = 16,
    eTotalTimeAbove = 17,
    ePercentBelowGapsOnly = 18,
    eNumPercentBelow = 19,
    eAvgPerDay = 20,
    eInSpan = 21,
    eInSpanPerDay = 22,
    eSum = 23
};

struct __declspec(uuid("11257a67-ebfe-4c34-858d-b270eb18a1e0"))
IAgFmDefinitionData : IUnknown
{};

struct __declspec(uuid("828a6a72-6913-4807-85cb-2ef2b8ff740d"))
IAgFmDefCompute : IAgFmDefinition
{
    //
    // Property data
    //

    __declspec(property(get=GetComputeType))
    enum AgEFmCompute ComputeType;
    __declspec(property(get=GetComputeSupportedTypes))
    SAFEARRAY * ComputeSupportedTypes;
    __declspec(property(get=GetCompute))
    IAgFmDefinitionDataPtr Compute;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmCompute GetComputeType ( );
    HRESULT SetComputeType (
        enum AgEFmCompute ComputeType );
    VARIANT_BOOL IsComputeTypeSupported (
        enum AgEFmCompute ComputeType );
    SAFEARRAY * GetComputeSupportedTypes ( );
    IAgFmDefinitionDataPtr GetCompute ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComputeType (
        /*[out,retval]*/ enum AgEFmCompute * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetComputeType (
        /*[in]*/ enum AgEFmCompute ComputeType ) = 0;
      virtual HRESULT __stdcall raw_IsComputeTypeSupported (
        /*[in]*/ enum AgEFmCompute ComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Compute (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppRetVal ) = 0;
};

enum AgEFmAcrossAssets
{
    eFmAcrossAssetsUnknown = -1,
    eFmAverage = 0,
    eFmMaximum = 1,
    eFmMinimum = 2,
    eFmSum = 3
};

struct __declspec(uuid("0791276a-9c8c-42df-b79f-26911d6a9bd8"))
IAgFmDefAccessConstraint : IAgFmDefCompute
{
    //
    // Property data
    //

    __declspec(property(get=GetAcrossAssets,put=PutAcrossAssets))
    enum AgEFmAcrossAssets AcrossAssets;
    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;
    __declspec(property(get=GetConstraintName,put=PutConstraintName))
    enum AgEFmConstraintName ConstraintName;
    __declspec(property(get=GetConstraint,put=PutConstraint))
    _bstr_t Constraint;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmAcrossAssets GetAcrossAssets ( );
    void PutAcrossAssets (
        enum AgEFmAcrossAssets pVal );
    double GetTimeStep ( );
    void PutTimeStep (
        double pVal );
    enum AgEFmConstraintName GetConstraintName ( );
    void PutConstraintName (
        enum AgEFmConstraintName pVal );
    _bstr_t GetConstraint ( );
    void PutConstraint (
        _bstr_t pConstraintName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AcrossAssets (
        /*[out,retval]*/ enum AgEFmAcrossAssets * pVal ) = 0;
      virtual HRESULT __stdcall put_AcrossAssets (
        /*[in]*/ enum AgEFmAcrossAssets pVal ) = 0;
      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ enum AgEFmConstraintName * pVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintName (
        /*[in]*/ enum AgEFmConstraintName pVal ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[out,retval]*/ BSTR * pConstraintName ) = 0;
      virtual HRESULT __stdcall put_Constraint (
        /*[in]*/ BSTR pConstraintName ) = 0;
};

enum AgEFmGfxContourType
{
    eBlockFill = 0,
    eSmoothFill = 1
};

enum AgEFmGfxColorMethod
{
    eColorRamp = 0,
    eExplicit = 1
};

struct __declspec(uuid("97c2d831-61bf-4353-b0ab-f0024aa93704"))
IAgFmGfxRampColor : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartColor,put=PutStartColor))
    OLE_COLOR StartColor;
    __declspec(property(get=GetEndColor,put=PutEndColor))
    OLE_COLOR EndColor;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetStartColor ( );
    void PutStartColor (
        OLE_COLOR pVal );
    OLE_COLOR GetEndColor ( );
    void PutEndColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_EndColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_EndColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("58368736-1ce1-4933-a1fb-5e684ec5a9eb"))
IAgFmGfxLevelAttributesElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLevel,put=PutLevel))
    _variant_t Level;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLevel ( );
    void PutLevel (
        const _variant_t & pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Level (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Level (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("9852bed2-7a91-4fc0-9eb7-2b0244a859eb"))
IAgFmGfxLevelAttributesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgFmGfxLevelAttributesElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgFmGfxLevelAttributesElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT AddLevelRange (
        const _variant_t & Start,
        const _variant_t & Stop,
        const _variant_t & Step );
    IAgFmGfxLevelAttributesElementPtr AddLevel (
        const _variant_t & Level );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgFmGfxLevelAttributesElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_AddLevelRange (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[in]*/ VARIANT Step ) = 0;
      virtual HRESULT __stdcall raw_AddLevel (
        /*[in]*/ VARIANT Level,
        /*[out,retval]*/ struct IAgFmGfxLevelAttributesElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("b7af521b-759c-43f9-9031-5cdb13600c5a"))
IAgFmGfxColorOptions : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBackground,put=PutBackground))
    OLE_COLOR Background;
    __declspec(property(get=GetText,put=PutText))
    OLE_COLOR Text;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetBackground ( );
    void PutBackground (
        OLE_COLOR pVal );
    OLE_COLOR GetText ( );
    void PutText (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Background (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

enum AgEFmGfxFloatingPointFormat
{
    eFloatingPoint = 0,
    eScientificE = 1,
    eScientific_e = 2
};

struct __declspec(uuid("456d8f3b-5bf3-4ceb-9bf6-c0154879f6fa"))
IAgFmGfxTextOptions : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetNumDecimalDigits,put=PutNumDecimalDigits))
    long NumDecimalDigits;
    __declspec(property(get=GetFloatingPointFormat,put=PutFloatingPointFormat))
    enum AgEFmGfxFloatingPointFormat FloatingPointFormat;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pVal );
    long GetNumDecimalDigits ( );
    void PutNumDecimalDigits (
        long pVal );
    enum AgEFmGfxFloatingPointFormat GetFloatingPointFormat ( );
    void PutFloatingPointFormat (
        enum AgEFmGfxFloatingPointFormat pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NumDecimalDigits (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumDecimalDigits (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FloatingPointFormat (
        /*[out,retval]*/ enum AgEFmGfxFloatingPointFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_FloatingPointFormat (
        /*[in]*/ enum AgEFmGfxFloatingPointFormat pVal ) = 0;
};

enum AgEFmGfxDirection
{
    eHorizontalMaxToMin = 0,
    eHorizontalMinToMax = 1,
    eVerticalMaxToMin = 2,
    eVerticalMinToMax = 3
};

struct __declspec(uuid("ad4d9d4e-cb03-485f-95d2-cacb69a6311e"))
IAgFmGfxRangeColorOptions : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgEFmGfxDirection Direction;
    __declspec(property(get=GetMaxSquaresPerRow,put=PutMaxSquaresPerRow))
    long MaxSquaresPerRow;
    __declspec(property(get=GetMaxSquaresPerColumn,put=PutMaxSquaresPerColumn))
    long MaxSquaresPerColumn;
    __declspec(property(get=GetColorSquareWidth,put=PutColorSquareWidth))
    long ColorSquareWidth;
    __declspec(property(get=GetColorSquareHeight,put=PutColorSquareHeight))
    long ColorSquareHeight;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmGfxDirection GetDirection ( );
    void PutDirection (
        enum AgEFmGfxDirection pVal );
    long GetMaxSquaresPerRow ( );
    void PutMaxSquaresPerRow (
        long pVal );
    long GetMaxSquaresPerColumn ( );
    void PutMaxSquaresPerColumn (
        long pVal );
    long GetColorSquareWidth ( );
    void PutColorSquareWidth (
        long pVal );
    long GetColorSquareHeight ( );
    void PutColorSquareHeight (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgEFmGfxDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgEFmGfxDirection pVal ) = 0;
      virtual HRESULT __stdcall get_MaxSquaresPerRow (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxSquaresPerRow (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxSquaresPerColumn (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxSquaresPerColumn (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColorSquareWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorSquareWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColorSquareHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorSquareHeight (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("4310fe1e-9b07-41e2-9548-536a88be4e1f"))
IAgFmGfxPositionOnMap : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    long X;
    __declspec(property(get=GetY,put=PutY))
    long Y;

    //
    // Wrapper methods for error-handling
    //

    long GetX ( );
    void PutX (
        long pVal );
    long GetY ( );
    void PutY (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("8d5fbad6-0121-4b33-bf0b-dcdbe8d8b3c2"))
IAgFmGfxLegendWindow : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisibleOnMap,put=PutIsVisibleOnMap))
    VARIANT_BOOL IsVisibleOnMap;
    __declspec(property(get=GetPositionOnMap))
    IAgFmGfxPositionOnMapPtr PositionOnMap;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisibleOnMap ( );
    void PutIsVisibleOnMap (
        VARIANT_BOOL pVal );
    IAgFmGfxPositionOnMapPtr GetPositionOnMap ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisibleOnMap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisibleOnMap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PositionOnMap (
        /*[out,retval]*/ struct IAgFmGfxPositionOnMap * * ppVal ) = 0;
};

struct __declspec(uuid("e7382589-af67-4f98-8007-8dd7dff9b116"))
IAgFmVOLegendWindow : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisibleOnMap,put=PutIsVisibleOnMap))
    VARIANT_BOOL IsVisibleOnMap;
    __declspec(property(get=GetPositionOnMap))
    IAgFmGfxPositionOnMapPtr PositionOnMap;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisibleOnMap ( );
    void PutIsVisibleOnMap (
        VARIANT_BOOL pVal );
    IAgFmGfxPositionOnMapPtr GetPositionOnMap ( );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisibleOnMap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisibleOnMap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PositionOnMap (
        /*[out,retval]*/ struct IAgFmGfxPositionOnMap * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("529f814a-c5d1-4e68-ba3a-7cac4070f5fa"))
IAgFmGfxLegend : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetColorOptions))
    IAgFmGfxColorOptionsPtr ColorOptions;
    __declspec(property(get=GetTextOptions))
    IAgFmGfxTextOptionsPtr TextOptions;
    __declspec(property(get=GetRangeColorOptions))
    IAgFmGfxRangeColorOptionsPtr RangeColorOptions;
    __declspec(property(get=GetGfxWindow))
    IAgFmGfxLegendWindowPtr GfxWindow;
    __declspec(property(get=GetVOWindow))
    IAgFmVOLegendWindowPtr VOWindow;

    //
    // Wrapper methods for error-handling
    //

    IAgFmGfxColorOptionsPtr GetColorOptions ( );
    IAgFmGfxTextOptionsPtr GetTextOptions ( );
    IAgFmGfxRangeColorOptionsPtr GetRangeColorOptions ( );
    IAgFmGfxLegendWindowPtr GetGfxWindow ( );
    IAgFmVOLegendWindowPtr GetVOWindow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColorOptions (
        /*[out,retval]*/ struct IAgFmGfxColorOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TextOptions (
        /*[out,retval]*/ struct IAgFmGfxTextOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeColorOptions (
        /*[out,retval]*/ struct IAgFmGfxRangeColorOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GfxWindow (
        /*[out,retval]*/ struct IAgFmGfxLegendWindow * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VOWindow (
        /*[out,retval]*/ struct IAgFmVOLegendWindow * * ppRetVal ) = 0;
};

struct __declspec(uuid("4ea8efef-5e9c-4183-873b-926c98e0bd33"))
IAgFmGfxContours : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetContourType,put=PutContourType))
    enum AgEFmGfxContourType ContourType;
    __declspec(property(get=GetColorMethod,put=PutColorMethod))
    enum AgEFmGfxColorMethod ColorMethod;
    __declspec(property(get=GetRampColor))
    IAgFmGfxRampColorPtr RampColor;
    __declspec(property(get=GetLevelAttributes))
    IAgFmGfxLevelAttributesCollectionPtr LevelAttributes;
    __declspec(property(get=GetLegend))
    IAgFmGfxLegendPtr Legend;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    enum AgEFmGfxContourType GetContourType ( );
    void PutContourType (
        enum AgEFmGfxContourType pVal );
    enum AgEFmGfxColorMethod GetColorMethod ( );
    void PutColorMethod (
        enum AgEFmGfxColorMethod pVal );
    IAgFmGfxRampColorPtr GetRampColor ( );
    IAgFmGfxLevelAttributesCollectionPtr GetLevelAttributes ( );
    IAgFmGfxLegendPtr GetLegend ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ContourType (
        /*[out,retval]*/ enum AgEFmGfxContourType * pVal ) = 0;
      virtual HRESULT __stdcall put_ContourType (
        /*[in]*/ enum AgEFmGfxContourType pVal ) = 0;
      virtual HRESULT __stdcall get_ColorMethod (
        /*[out,retval]*/ enum AgEFmGfxColorMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorMethod (
        /*[in]*/ enum AgEFmGfxColorMethod pVal ) = 0;
      virtual HRESULT __stdcall get_RampColor (
        /*[out,retval]*/ struct IAgFmGfxRampColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LevelAttributes (
        /*[out,retval]*/ struct IAgFmGfxLevelAttributesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ struct IAgFmGfxLegend * * ppVal ) = 0;
};

struct __declspec(uuid("456031ab-9105-4be7-8f79-6508497cd24c"))
IAgFmGfxAttributes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetFillPoints,put=PutFillPoints))
    VARIANT_BOOL FillPoints;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetContours))
    IAgFmGfxContoursPtr Contours;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetFillPoints ( );
    void PutFillPoints (
        VARIANT_BOOL pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    IAgFmGfxContoursPtr GetContours ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FillPoints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillPoints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Contours (
        /*[out,retval]*/ struct IAgFmGfxContours * * ppVal ) = 0;
};

enum AgEFmGfxAccumulation
{
    eCurrentTime = 0,
    eNotCurrent = 1,
    eNotUpToCurrent = 2,
    eUpToCurrent = 3
};

struct __declspec(uuid("ba003916-3fa4-4ae5-813e-9d7d93414fd2"))
IAgFmGfxAttributesAnimation : IAgFmGfxAttributes
{
    //
    // Property data
    //

    __declspec(property(get=GetAccumulation,put=PutAccumulation))
    enum AgEFmGfxAccumulation Accumulation;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmGfxAccumulation GetAccumulation ( );
    void PutAccumulation (
        enum AgEFmGfxAccumulation pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Accumulation (
        /*[out,retval]*/ enum AgEFmGfxAccumulation * pVal ) = 0;
      virtual HRESULT __stdcall put_Accumulation (
        /*[in]*/ enum AgEFmGfxAccumulation pVal ) = 0;
};

struct __declspec(uuid("f6ed000d-e121-4197-979d-f0206d16a106"))
IAgFmGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgFmGfxAttributesPtr Static;
    __declspec(property(get=GetAnimation))
    IAgFmGfxAttributesAnimationPtr Animation;

    //
    // Wrapper methods for error-handling
    //

    IAgFmGfxAttributesPtr GetStatic ( );
    IAgFmGfxAttributesAnimationPtr GetAnimation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgFmGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgFmGfxAttributesAnimation * * ppVal ) = 0;
};

struct __declspec(uuid("8d490c3c-a8d9-4db6-bea9-93e354716af3"))
IAgObjectCoverageFOM : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDefinitionType))
    enum AgEFmDefinitionType DefinitionType;
    __declspec(property(get=GetDefinitionSupportedTypes))
    SAFEARRAY * DefinitionSupportedTypes;
    __declspec(property(get=GetDefinition))
    IAgFmDefinitionPtr Definition;
    __declspec(property(get=GetGraphics))
    IAgFmGraphicsPtr Graphics;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmDefinitionType GetDefinitionType ( );
    HRESULT SetDefinitionType (
        enum AgEFmDefinitionType Def );
    VARIANT_BOOL IsDefinitionTypeSupported (
        enum AgEFmDefinitionType Def );
    SAFEARRAY * GetDefinitionSupportedTypes ( );
    IAgFmDefinitionPtr GetDefinition ( );
    IAgFmDefAccessConstraintPtr SetAccessConstraintDefinition (
        enum AgEFmConstraintName ConstraintName );
    IAgFmGraphicsPtr GetGraphics ( );
    IAgFmDefAccessConstraintPtr SetAccessConstraintDefinitionName (
        _bstr_t ConstraintName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefinitionType (
        /*[out,retval]*/ enum AgEFmDefinitionType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDefinitionType (
        /*[in]*/ enum AgEFmDefinitionType Def ) = 0;
      virtual HRESULT __stdcall raw_IsDefinitionTypeSupported (
        /*[in]*/ enum AgEFmDefinitionType Def,
        /*[out,retval]*/ VARIANT_BOOL * pSupported ) = 0;
      virtual HRESULT __stdcall get_DefinitionSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Definition (
        /*[out,retval]*/ struct IAgFmDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessConstraintDefinition (
        /*[in]*/ enum AgEFmConstraintName ConstraintName,
        /*[out,retval]*/ struct IAgFmDefAccessConstraint * * ppIAgFmDefAccessConstraint ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgFmGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessConstraintDefinitionName (
        /*[in]*/ BSTR ConstraintName,
        /*[out,retval]*/ struct IAgFmDefAccessConstraint * * ppIAgFmDefAccessConstraint ) = 0;
};

enum AgEAccessTimeType
{
    eObjectAccessTime = 0,
    eScenarioAccessTime = 1,
    eUserSpecAccessTime = 2,
    eAccessTimeIntervals = 3
};

struct __declspec(uuid("5d3701db-fc04-4dfe-b35d-b26c170813ee"))
IAgStkAccessGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetLineVisible,put=PutLineVisible))
    VARIANT_BOOL LineVisible;
    __declspec(property(get=GetAnimateGfx,put=PutAnimateGfx))
    VARIANT_BOOL AnimateGfx;
    __declspec(property(get=GetStaticGfx,put=PutStaticGfx))
    VARIANT_BOOL StaticGfx;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLineVisible ( );
    void PutLineVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAnimateGfx ( );
    void PutAnimateGfx (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetStaticGfx ( );
    void PutStaticGfx (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LineVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AnimateGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimateGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StaticGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_StaticGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

enum AgEAberrationType
{
    eAberrationUnknown = -1,
    eAberrationTotal = 0,
    eAberrationAnnual = 1,
    eAberrationNone = 2
};

enum AgEIvClockHost
{
    eIvBase = 0,
    eIvTarget = 1
};

enum AgEIvTimeSense
{
    eIvTimeSenseUnknown = -1,
    eIvTransmit = 0,
    eIvReceive = 1
};

struct __declspec(uuid("ca82b728-ce59-448c-b9b5-0bfe68b1e59e"))
IAgStkAccessAdvanced : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableLightTimeDelay,put=PutEnableLightTimeDelay))
    VARIANT_BOOL EnableLightTimeDelay;
    __declspec(property(get=GetTimeConvergence,put=PutTimeConvergence))
    double TimeConvergence;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetTimeLightDelayConvergence,put=PutTimeLightDelayConvergence))
    double TimeLightDelayConvergence;
    __declspec(property(get=GetAberrationType,put=PutAberrationType))
    enum AgEAberrationType AberrationType;
    __declspec(property(get=GetClockHost,put=PutClockHost))
    enum AgEIvClockHost ClockHost;
    __declspec(property(get=GetSignalSenseOfClockHost,put=PutSignalSenseOfClockHost))
    enum AgEIvTimeSense SignalSenseOfClockHost;
    __declspec(property(get=GetUseDefaultClockHostAndSignalSense,put=PutUseDefaultClockHostAndSignalSense))
    VARIANT_BOOL UseDefaultClockHostAndSignalSense;
    __declspec(property(get=GetUsePreciseEventTimes,put=PutUsePreciseEventTimes))
    VARIANT_BOOL UsePreciseEventTimes;
    __declspec(property(get=GetAbsoluteTolerance,put=PutAbsoluteTolerance))
    double AbsoluteTolerance;
    __declspec(property(get=GetRelativeTolerance,put=PutRelativeTolerance))
    double RelativeTolerance;
    __declspec(property(get=GetUseFixedTimeStep,put=PutUseFixedTimeStep))
    VARIANT_BOOL UseFixedTimeStep;
    __declspec(property(get=GetMinTimeStep,put=PutMinTimeStep))
    double MinTimeStep;
    __declspec(property(get=GetFixedStepSize,put=PutFixedStepSize))
    double FixedStepSize;
    __declspec(property(get=GetFixedTimeBound,put=PutFixedTimeBound))
    double FixedTimeBound;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableLightTimeDelay ( );
    void PutEnableLightTimeDelay (
        VARIANT_BOOL pVal );
    double GetTimeConvergence ( );
    void PutTimeConvergence (
        double pVal );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetTimeLightDelayConvergence ( );
    void PutTimeLightDelayConvergence (
        double pVal );
    enum AgEAberrationType GetAberrationType ( );
    void PutAberrationType (
        enum AgEAberrationType pVal );
    enum AgEIvClockHost GetClockHost ( );
    void PutClockHost (
        enum AgEIvClockHost pVal );
    enum AgEIvTimeSense GetSignalSenseOfClockHost ( );
    void PutSignalSenseOfClockHost (
        enum AgEIvTimeSense pVal );
    VARIANT_BOOL GetUseDefaultClockHostAndSignalSense ( );
    void PutUseDefaultClockHostAndSignalSense (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUsePreciseEventTimes ( );
    void PutUsePreciseEventTimes (
        VARIANT_BOOL pVal );
    double GetAbsoluteTolerance ( );
    void PutAbsoluteTolerance (
        double pVal );
    double GetRelativeTolerance ( );
    void PutRelativeTolerance (
        double pVal );
    VARIANT_BOOL GetUseFixedTimeStep ( );
    void PutUseFixedTimeStep (
        VARIANT_BOOL pVal );
    double GetMinTimeStep ( );
    void PutMinTimeStep (
        double pVal );
    double GetFixedStepSize ( );
    void PutFixedStepSize (
        double pVal );
    double GetFixedTimeBound ( );
    void PutFixedTimeBound (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimeConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeLightDelayConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeLightDelayConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AberrationType (
        /*[out,retval]*/ enum AgEAberrationType * pVal ) = 0;
      virtual HRESULT __stdcall put_AberrationType (
        /*[in]*/ enum AgEAberrationType pVal ) = 0;
      virtual HRESULT __stdcall get_ClockHost (
        /*[out,retval]*/ enum AgEIvClockHost * pVal ) = 0;
      virtual HRESULT __stdcall put_ClockHost (
        /*[in]*/ enum AgEIvClockHost pVal ) = 0;
      virtual HRESULT __stdcall get_SignalSenseOfClockHost (
        /*[out,retval]*/ enum AgEIvTimeSense * pVal ) = 0;
      virtual HRESULT __stdcall put_SignalSenseOfClockHost (
        /*[in]*/ enum AgEIvTimeSense pVal ) = 0;
      virtual HRESULT __stdcall get_UseDefaultClockHostAndSignalSense (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseDefaultClockHostAndSignalSense (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UsePreciseEventTimes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePreciseEventTimes (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RelativeTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RelativeTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseFixedTimeStep (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseFixedTimeStep (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FixedStepSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FixedStepSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FixedTimeBound (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FixedTimeBound (
        /*[in]*/ double pVal ) = 0;
};

enum AgEVOLocation
{
    e3DWindow = 0,
    eDataDisplayArea = 1,
    eOffsetFromObject = 2,
    eOffsetFromAccessObject = 3
};

enum AgEVOXOrigin
{
    eXOriginLeft = 0,
    eXOriginRight = 1
};

enum AgEVOYOrigin
{
    eYOriginBottom = 0,
    eYOriginTop = 1
};

enum AgEVOFontSize
{
    eLarge = 0,
    eMedium = 1,
    eSmall = 2
};

enum AgEVOFormat
{
    eHorizontal = 0,
    eNoLabels = 1,
    eVertical = 2
};

struct __declspec(uuid("d76f04b1-27e7-49b6-8f42-c9496593c343"))
IAgVODataDisplayElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAvailableWindows))
    SAFEARRAY * AvailableWindows;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetLocation,put=PutLocation))
    enum AgEVOLocation Location;
    __declspec(property(get=GetXOrigin,put=PutXOrigin))
    enum AgEVOXOrigin XOrigin;
    __declspec(property(get=GetX,put=PutX))
    long X;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    enum AgEVOYOrigin YOrigin;
    __declspec(property(get=GetY,put=PutY))
    long Y;
    __declspec(property(get=GetTitle,put=PutTitle))
    VARIANT_BOOL Title;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    enum AgEVOFontSize FontSize;
    __declspec(property(get=GetFontColor,put=PutFontColor))
    OLE_COLOR FontColor;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum AgEVOFormat Format;
    __declspec(property(get=GetUseBackground,put=PutUseBackground))
    VARIANT_BOOL UseBackground;
    __declspec(property(get=GetTransparentBg,put=PutTransparentBg))
    VARIANT_BOOL TransparentBg;
    __declspec(property(get=GetBgWidth,put=PutBgWidth))
    long BgWidth;
    __declspec(property(get=GetBgHeight,put=PutBgHeight))
    long BgHeight;
    __declspec(property(get=GetBgColor,put=PutBgColor))
    OLE_COLOR BgColor;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL IsDisplayedInWindow (
        _bstr_t Title );
    enum AgEVOLocation GetLocation ( );
    void PutLocation (
        enum AgEVOLocation pVal );
    enum AgEVOXOrigin GetXOrigin ( );
    void PutXOrigin (
        enum AgEVOXOrigin pVal );
    long GetX ( );
    void PutX (
        long pVal );
    enum AgEVOYOrigin GetYOrigin ( );
    void PutYOrigin (
        enum AgEVOYOrigin pVal );
    long GetY ( );
    void PutY (
        long pVal );
    VARIANT_BOOL GetTitle ( );
    void PutTitle (
        VARIANT_BOOL pVal );
    enum AgEVOFontSize GetFontSize ( );
    void PutFontSize (
        enum AgEVOFontSize pVal );
    OLE_COLOR GetFontColor ( );
    void PutFontColor (
        OLE_COLOR pVal );
    enum AgEVOFormat GetFormat ( );
    void PutFormat (
        enum AgEVOFormat pVal );
    VARIANT_BOOL GetUseBackground ( );
    void PutUseBackground (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTransparentBg ( );
    void PutTransparentBg (
        VARIANT_BOOL pVal );
    long GetBgWidth ( );
    void PutBgWidth (
        long pVal );
    long GetBgHeight ( );
    void PutBgHeight (
        long pVal );
    OLE_COLOR GetBgColor ( );
    void PutBgColor (
        OLE_COLOR pVal );
    SAFEARRAY * GetAvailableWindows ( );
    HRESULT AddToWindow (
        _bstr_t Title );
    HRESULT RemoveFromWindow (
        _bstr_t Title );
    HRESULT AddToAllWindows ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayedInWindow (
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ enum AgEVOLocation * pVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ enum AgEVOLocation pVal ) = 0;
      virtual HRESULT __stdcall get_XOrigin (
        /*[out,retval]*/ enum AgEVOXOrigin * pVal ) = 0;
      virtual HRESULT __stdcall put_XOrigin (
        /*[in]*/ enum AgEVOXOrigin pVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ enum AgEVOYOrigin * pVal ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ enum AgEVOYOrigin pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ enum AgEVOFontSize * pVal ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ enum AgEVOFontSize pVal ) = 0;
      virtual HRESULT __stdcall get_FontColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ enum AgEVOFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ enum AgEVOFormat pVal ) = 0;
      virtual HRESULT __stdcall get_UseBackground (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseBackground (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TransparentBg (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TransparentBg (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BgWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BgWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BgHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BgHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BgColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BgColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableWindows (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddToWindow (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromWindow (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall raw_AddToAllWindows ( ) = 0;
};

struct __declspec(uuid("a170f055-32b2-4605-927b-b0fbfb775f5d"))
IAgVODataDisplayCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVODataDisplayElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAvailableData))
    SAFEARRAY * AvailableData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVODataDisplayElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVODataDisplayElementPtr Add (
        _bstr_t Name );
    SAFEARRAY * GetAvailableData ( );
    VARIANT_BOOL IsPreDataRequired (
        _bstr_t DataDisplayName );
    IAgVODataDisplayElementPtr AddDataDisplayRequiringPreData (
        _bstr_t Name,
        _bstr_t PreData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVODataDisplayElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgVODataDisplayElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableData (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsPreDataRequired (
        /*[in]*/ BSTR DataDisplayName,
        /*[out,retval]*/ VARIANT_BOOL * pRequired ) = 0;
      virtual HRESULT __stdcall raw_AddDataDisplayRequiringPreData (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR PreData,
        /*[out,retval]*/ struct IAgVODataDisplayElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("6405b308-3c8a-4c82-9e01-c220c0a97753"))
IAgIntervalCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    long Add (
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT RemoveIndex (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT RemoveInterval (
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT Deconflict ( );
    HRESULT LoadIntervals (
        _bstr_t Filename );
    HRESULT ChangeInterval (
        long Index,
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT GetInterval (
        long Index,
        VARIANT * pStart,
        VARIANT * pStop );
    SAFEARRAY * ToArray (
        long Index,
        long Length );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[out,retval]*/ long * pIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveIndex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveInterval (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_Deconflict ( ) = 0;
      virtual HRESULT __stdcall raw_LoadIntervals (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_ChangeInterval (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_GetInterval (
        /*[in]*/ long Index,
        /*[out]*/ VARIANT * pStart,
        /*[out]*/ VARIANT * pStop ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[in]*/ long Index,
        /*[in]*/ long Length,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("4e219215-adf0-4fb0-8107-53b968af3ef8"))
IAgAccessInterval : IUnknown
{};

struct __declspec(uuid("573906b3-af1d-4d9d-98b2-3ac21d76d185"))
IAgStkAccess : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetAccessTimePeriod,put=PutAccessTimePeriod))
    enum AgEAccessTimeType AccessTimePeriod;
    __declspec(property(get=GetGraphics))
    IAgStkAccessGraphicsPtr Graphics;
    __declspec(property(get=GetAdvanced))
    IAgStkAccessAdvancedPtr Advanced;
    __declspec(property(get=GetDataDisplays))
    IAgVODataDisplayCollectionPtr DataDisplays;
    __declspec(property(get=GetComputedAccessIntervalTimes))
    IAgIntervalCollectionPtr ComputedAccessIntervalTimes;
    __declspec(property(get=GetAccessTimePeriodData))
    IAgAccessIntervalPtr AccessTimePeriodData;

    //
    // Wrapper methods for error-handling
    //

    IAgDataProviderCollectionPtr GetDataProviders ( );
    HRESULT RemoveAccess ( );
    HRESULT ComputeAccess ( );
    enum AgEAccessTimeType GetAccessTimePeriod ( );
    void PutAccessTimePeriod (
        enum AgEAccessTimeType pVal );
    HRESULT SpecifyAccessTimePeriod (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    IAgStkAccessGraphicsPtr GetGraphics ( );
    IAgStkAccessAdvancedPtr GetAdvanced ( );
    IAgVODataDisplayCollectionPtr GetDataDisplays ( );
    HRESULT SpecifyAccessIntervals (
        SAFEARRAY * * AccessIntervals );
    IAgIntervalCollectionPtr GetComputedAccessIntervalTimes ( );
    IAgAccessIntervalPtr GetAccessTimePeriodData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAccess ( ) = 0;
      virtual HRESULT __stdcall raw_ComputeAccess ( ) = 0;
      virtual HRESULT __stdcall get_AccessTimePeriod (
        /*[out,retval]*/ enum AgEAccessTimeType * pVal ) = 0;
      virtual HRESULT __stdcall put_AccessTimePeriod (
        /*[in]*/ enum AgEAccessTimeType pVal ) = 0;
      virtual HRESULT __stdcall raw_SpecifyAccessTimePeriod (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgStkAccessGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgStkAccessAdvanced * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplays (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SpecifyAccessIntervals (
        /*[in]*/ SAFEARRAY * * AccessIntervals ) = 0;
      virtual HRESULT __stdcall get_ComputedAccessIntervalTimes (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AccessTimePeriodData (
        /*[out,retval]*/ struct IAgAccessInterval * * ppRetVal ) = 0;
};

enum AgEAccessConstraints
{
    eCstrNone = 0,
    eCstrImageQuality = 1,
    eCstrAltitude = 2,
    eCstrAngularRate = 3,
    eCstrApparentTime = 4,
    eCstrATCentroidElevationAngle = 5,
    eCstrAzimuthAngle = 6,
    eCstrBackground = 7,
    eCstrBetaAngle = 8,
    eCstrCrdnAngle = 9,
    eCstrCrdnVectorMag = 10,
    eCstrCrossTrackRange = 11,
    eCstrDopplerConeAngle = 12,
    eCstrDuration = 13,
    eCstrElevationAngle = 14,
    eCstrExclusionZone = 15,
    eCstrGMT = 16,
    eCstrGrazingAlt = 17,
    eCstrGrazingAngle = 18,
    eCstrGroundElevAngle = 19,
    eCstrGroundTrack = 20,
    eCstrInclusionZone = 21,
    eCstrIntervals = 22,
    eCstrInTrackRange = 23,
    eCstrLatitude = 24,
    eCstrLighting = 25,
    eCstrLineOfSight = 26,
    eCstrLocalTime = 27,
    eCstrLOSLunarExclusion = 28,
    eCstrLOSSunExclusion = 29,
    eCstrLunarElevationAngle = 30,
    eCstrMatlab = 31,
    eCstrObjectExclusionAngle = 32,
    eCstrPropagationDelay = 33,
    eCstrRange = 34,
    eCstrRangeRate = 35,
    eCstrSarAreaRate = 36,
    eCstrSarAzRes = 37,
    eCstrSarCNR = 38,
    eCstrSarExternalData = 39,
    eCstrSarIntTime = 40,
    eCstrSarPTCR = 41,
    eCstrSarSCR = 42,
    eCstrSarSigmaN = 43,
    eCstrSarSNR = 44,
    eCstrSquintAngle = 45,
    eCstrSrchTrkClearDoppler = 46,
    eCstrSrchTrkDwellTime = 47,
    eCstrSrchTrkIntegratedPDet = 48,
    eCstrSrchTrkIntegratedPulses = 49,
    eCstrSrchTrkIntegratedSNR = 50,
    eCstrSrchTrkIntegrationTime = 51,
    eCstrSrchTrkMLCFilter = 52,
    eCstrSrchTrkSinglePulsePDet = 53,
    eCstrSrchTrkSinglePulseSNR = 54,
    eCstrSrchTrkSLCFilter = 55,
    eCstrSrchTrkUnambigDoppler = 56,
    eCstrSrchTrkUnambigRange = 57,
    eCstrSunElevationAngle = 58,
    eCstrSunGroundElevAngle = 59,
    eCstrSunSpecularExclusion = 60,
    eCstrThirdBodyObstruction = 61,
    eCstrTimeSlipRange = 62,
    eCstrCentroidAzimuthAngle = 63,
    eCstrCentroidRange = 64,
    eCstrCentroidSunElevationAngle = 65,
    eCstrCollectionAngle = 66,
    eCstrTerrainMask = 67,
    eCstrAzElMask = 68,
    eCstrAzimuthRate = 69,
    eCstrElevationRate = 70,
    eCstrGeoExclusion = 71,
    eCstrGroundSampleDistance = 72,
    eCstrHeightAboveHorizon = 73,
    eCstrTerrainGrazingAngle = 74,
    eCstrAngleOffBoresight = 75,
    eCstrAngleOffBoresightRate = 76,
    eCstrAreaMask = 77,
    eCstrBoresightGrazingAngle = 78,
    eCstrBSIntersectLightingCondition = 79,
    eCstrBSLunarExclusion = 80,
    eCstrBSSunExclusion = 81,
    eCstrFieldOfView = 82,
    eCstrFOVSunSpecularExclusion = 83,
    eCstrFOVSunSpecularInclusion = 84,
    eCstrHorizonCrossing = 85,
    eCstrSensorAzElMask = 89,
    eCstrForeground = 90,
    eCstrCbObstruction = 91,
    eCstrPlugin = 92,
    eCstrDepth = 93,
    eCstrSEETMagFieldLshell = 95,
    eCstrSEETMagFieldLineSeparation = 96,
    eCstrSEETImpactFlux = 97,
    eCstrSEETDamageFlux = 98,
    eCstrSEETDamageMassFlux = 99,
    eCstrSEETImpactMassFlux = 100,
    eCstrSEETSAAFluxIntensity = 101,
    eCstrSEETVehicleTemperature = 102
};

struct __declspec(uuid("1cb55445-ecd0-40a6-a2ee-4bac8a261233"))
IAgAccessConstraint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
};

struct __declspec(uuid("3cbc27e5-af8b-4956-9853-ab26fe991de8"))
IAgAccessConstraintCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgAccessConstraintPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgAccessConstraintPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IAgAccessConstraintPtr AddConstraint (
        enum AgEAccessConstraints EConstraint );
    HRESULT RemoveConstraint (
        enum AgEAccessConstraints EConstraint );
    IAgAccessConstraintPtr GetActiveConstraint (
        enum AgEAccessConstraints EConstraint );
    VARIANT_BOOL IsConstraintActive (
        enum AgEAccessConstraints EConstraint );
    SAFEARRAY * AvailableConstraints ( );
    VARIANT_BOOL IsConstraintSupported (
        enum AgEAccessConstraints EConstraint );
    VARIANT_BOOL IsNamedConstraintSupported (
        _bstr_t CnstrName );
    IAgAccessConstraintPtr AddNamedConstraint (
        _bstr_t CnstrName );
    HRESULT RemoveNamedConstraint (
        _bstr_t CnstrName );
    VARIANT_BOOL IsNamedConstraintActive (
        _bstr_t CnstrName );
    IAgAccessConstraintPtr GetActiveNamedConstraint (
        _bstr_t CnstrName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgAccessConstraint * * ppAccessConstraint ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddConstraint (
        /*[in]*/ enum AgEAccessConstraints EConstraint,
        /*[out,retval]*/ struct IAgAccessConstraint * * ppIAgAccessConstraint ) = 0;
      virtual HRESULT __stdcall raw_RemoveConstraint (
        /*[in]*/ enum AgEAccessConstraints EConstraint ) = 0;
      virtual HRESULT __stdcall raw_GetActiveConstraint (
        /*[in]*/ enum AgEAccessConstraints EConstraint,
        /*[out,retval]*/ struct IAgAccessConstraint * * ppIAgAccessConstraint ) = 0;
      virtual HRESULT __stdcall raw_IsConstraintActive (
        /*[in]*/ enum AgEAccessConstraints EConstraint,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableConstraints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsConstraintSupported (
        /*[in]*/ enum AgEAccessConstraints EConstraint,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsNamedConstraintSupported (
        /*[in]*/ BSTR CnstrName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddNamedConstraint (
        /*[in]*/ BSTR CnstrName,
        /*[out,retval]*/ struct IAgAccessConstraint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveNamedConstraint (
        /*[in]*/ BSTR CnstrName ) = 0;
      virtual HRESULT __stdcall raw_IsNamedConstraintActive (
        /*[in]*/ BSTR CnstrName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetActiveNamedConstraint (
        /*[in]*/ BSTR CnstrName,
        /*[out,retval]*/ struct IAgAccessConstraint * * ppRetVal ) = 0;
};

enum AgEOnePtAccessStatus
{
    eOnePtAccessStatusMax = -10,
    eOnePtAccessStatusMin = -11,
    eOnePtAccessStatusZero = -20,
    eOnePtAccessStatusLogical = -30,
    eOnePtAccessStatusInclusionInterval = -40,
    eOnePtAccessStatusExclusionInterval = -41,
    eOnePtAccessStatusOk = 0,
    eOnePtAccessStatusNotComputed = -1
};

struct __declspec(uuid("ed50c3b7-68d9-4d43-a939-290f1e6f3991"))
IAgOnePtAccessConstraint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStatus))
    enum AgEOnePtAccessStatus Status;
    __declspec(property(get=GetConstraint))
    enum AgEAccessConstraints Constraint;
    __declspec(property(get=GetValue))
    double Value;
    __declspec(property(get=GetObjectPath))
    _bstr_t ObjectPath;

    //
    // Wrapper methods for error-handling
    //

    enum AgEOnePtAccessStatus GetStatus ( );
    enum AgEAccessConstraints GetConstraint ( );
    double GetValue ( );
    _bstr_t GetObjectPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum AgEOnePtAccessStatus * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[out,retval]*/ enum AgEAccessConstraints * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRange ) = 0;
      virtual HRESULT __stdcall get_ObjectPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("8d23ba70-2d68-4501-866c-62b9b95142de"))
IAgOnePtAccessConstraintCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgOnePtAccessConstraintPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgOnePtAccessConstraintPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgOnePtAccessConstraint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("27de7a24-aead-48b3-96e8-f43c8eb19d76"))
IAgOnePtAccessResult : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAccessSatisfied))
    VARIANT_BOOL AccessSatisfied;
    __declspec(property(get=GetTime))
    _variant_t Time;
    __declspec(property(get=GetConstraints))
    IAgOnePtAccessConstraintCollectionPtr Constraints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAccessSatisfied ( );
    _variant_t GetTime ( );
    IAgOnePtAccessConstraintCollectionPtr GetConstraints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AccessSatisfied (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Constraints (
        /*[out,retval]*/ struct IAgOnePtAccessConstraintCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("d20e3559-ae79-4ab2-8e44-3665c6ed9206"))
IAgOnePtAccessResultCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgOnePtAccessResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgOnePtAccessResultPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgOnePtAccessResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

enum AgEOnePtAccessSummary
{
    eOnePtAccessSummaryDetailed = 0,
    eOnePtAccessSummaryFast = 1,
    eOnePtAccessSummaryResultOnly = 2
};

struct __declspec(uuid("169b73b9-c430-4796-870f-556f49361231"))
IAgOnePtAccess : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryOption,put=PutSummaryOption))
    enum AgEOnePtAccessSummary SummaryOption;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStepSize,put=PutStepSize))
    double StepSize;
    __declspec(property(get=GetOutputToFile,put=PutOutputToFile))
    VARIANT_BOOL OutputToFile;
    __declspec(property(get=GetOutputFile,put=PutOutputFile))
    _bstr_t OutputFile;

    //
    // Wrapper methods for error-handling
    //

    IAgOnePtAccessResultCollectionPtr Compute ( );
    HRESULT Remove ( );
    enum AgEOnePtAccessSummary GetSummaryOption ( );
    void PutSummaryOption (
        enum AgEOnePtAccessSummary pVal );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pStartTime );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pStopTime );
    double GetStepSize ( );
    void PutStepSize (
        double pStepSize );
    VARIANT_BOOL GetOutputToFile ( );
    void PutOutputToFile (
        VARIANT_BOOL pRetVal );
    _bstr_t GetOutputFile ( );
    void PutOutputFile (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Compute (
        /*[out,retval]*/ struct IAgOnePtAccessResultCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove ( ) = 0;
      virtual HRESULT __stdcall get_SummaryOption (
        /*[out,retval]*/ enum AgEOnePtAccessSummary * pVal ) = 0;
      virtual HRESULT __stdcall put_SummaryOption (
        /*[in]*/ enum AgEOnePtAccessSummary pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pStartTime ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pStartTime ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pStopTime ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pStopTime ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ double * pStepSize ) = 0;
      virtual HRESULT __stdcall put_StepSize (
        /*[in]*/ double pStepSize ) = 0;
      virtual HRESULT __stdcall get_OutputToFile (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputToFile (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputFile (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("6cd1ed29-ca0b-411e-9cbb-adf58d56e05b"))
IAgLifetimeInformation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHasBeenDeleted ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("65c23c99-8226-423b-ac63-025d2e11c32a"))
AgStkObjectRoot;
    // [ default ] interface _IAgStkObjectRoot
    // interface IAgStkObjectRoot
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgAnimation
    // [ default, source ] dispinterface IAgStkObjectRootEvents

enum AgEAnimationModes
{
    eAniUnknown = 0,
    eAniNormal = 1,
    eAniRealtime = 2,
    eAniLoop = 4,
    eAniStop = 8,
    eAniHighSpeed = 16,
    eAniXRealtime = 32
};

enum AgEAnimationOptions
{
    eAniOptionContinue = 0,
    eAniOptionLoop = 1,
    eAniOptionStop = 2
};

struct __declspec(uuid("9eed83d9-8c56-4045-a547-808f5a439ada"))
IAgAnimation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMode,put=PutMode))
    enum AgEAnimationModes Mode;
    __declspec(property(get=GetCurrentTime,put=PutCurrentTime))
    double CurrentTime;
    __declspec(property(get=GetStep))
    _bstr_t Step;
    __declspec(property(get=GetAnimationOptions,put=PutAnimationOptions))
    enum AgEAnimationOptions AnimationOptions;
    __declspec(property(get=GetHighSpeed,put=PutHighSpeed))
    VARIANT_BOOL HighSpeed;

    //
    // Wrapper methods for error-handling
    //

    HRESULT PlayForward ( );
    HRESULT PlayBackward ( );
    HRESULT Pause ( );
    HRESULT Rewind ( );
    HRESULT StepForward ( );
    HRESULT StepBackward ( );
    HRESULT Faster ( );
    HRESULT Slower ( );
    enum AgEAnimationModes GetMode ( );
    void PutMode (
        enum AgEAnimationModes pRetVal );
    double GetCurrentTime ( );
    void PutCurrentTime (
        double pVal );
    _bstr_t GetStep ( );
    enum AgEAnimationOptions GetAnimationOptions ( );
    void PutAnimationOptions (
        enum AgEAnimationOptions pRetVal );
    VARIANT_BOOL GetHighSpeed ( );
    void PutHighSpeed (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_PlayForward ( ) = 0;
      virtual HRESULT __stdcall raw_PlayBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Rewind ( ) = 0;
      virtual HRESULT __stdcall raw_StepForward ( ) = 0;
      virtual HRESULT __stdcall raw_StepBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Faster ( ) = 0;
      virtual HRESULT __stdcall raw_Slower ( ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum AgEAnimationModes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum AgEAnimationModes pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CurrentTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AnimationOptions (
        /*[out,retval]*/ enum AgEAnimationOptions * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AnimationOptions (
        /*[in]*/ enum AgEAnimationOptions pRetVal ) = 0;
      virtual HRESULT __stdcall get_HighSpeed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HighSpeed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("72d190b6-ef26-45c8-a22b-b41293afb4ce"))
AgLevelAttribute;
    // [ default ] interface _IAgLevelAttribute
    // interface IAgLevelAttribute

enum AgELineWidth
{
    e1 = 0,
    e2 = 1,
    e3 = 2,
    e4 = 3,
    e5 = 4
};

struct __declspec(uuid("d0becf69-cf32-45ac-83d1-fb916ed315a1"))
_IAgLevelAttribute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLevel,put=PutLevel))
    _variant_t Level;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetUserTextVisible,put=PutUserTextVisible))
    VARIANT_BOOL UserTextVisible;
    __declspec(property(get=GetLabelAngle,put=PutLabelAngle))
    double LabelAngle;
    __declspec(property(get=GetUserText,put=PutUserText))
    _bstr_t UserText;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLevel ( );
    void PutLevel (
        const _variant_t & pLevel );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pLineStyle );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pLineWidth );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLable );
    VARIANT_BOOL GetUserTextVisible ( );
    void PutUserTextVisible (
        VARIANT_BOOL pShowUserText );
    double GetLabelAngle ( );
    void PutLabelAngle (
        double pLevel );
    _bstr_t GetUserText ( );
    void PutUserText (
        _bstr_t pLevel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Level (
        /*[out,retval]*/ VARIANT * pLevel ) = 0;
      virtual HRESULT __stdcall put_Level (
        /*[in]*/ VARIANT pLevel ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pLineStyle ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pLineStyle ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pLineWidth ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pLineWidth ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLable ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLable ) = 0;
      virtual HRESULT __stdcall get_UserTextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowUserText ) = 0;
      virtual HRESULT __stdcall put_UserTextVisible (
        /*[in]*/ VARIANT_BOOL pShowUserText ) = 0;
      virtual HRESULT __stdcall get_LabelAngle (
        /*[out,retval]*/ double * pLevel ) = 0;
      virtual HRESULT __stdcall put_LabelAngle (
        /*[in]*/ double pLevel ) = 0;
      virtual HRESULT __stdcall get_UserText (
        /*[out,retval]*/ BSTR * pLevel ) = 0;
      virtual HRESULT __stdcall put_UserText (
        /*[in]*/ BSTR pLevel ) = 0;
};

struct __declspec(uuid("18b6ce65-6581-432e-a7a8-910424fa1b57"))
IAgLevelAttribute : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLevel,put=PutLevel))
    _variant_t Level;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetUserTextVisible,put=PutUserTextVisible))
    VARIANT_BOOL UserTextVisible;
    __declspec(property(get=GetLabelAngle,put=PutLabelAngle))
    double LabelAngle;
    __declspec(property(get=GetUserText,put=PutUserText))
    _bstr_t UserText;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLevel ( );
    void PutLevel (
        const _variant_t & pLevel );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pLineStyle );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pLineWidth );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLabel );
    VARIANT_BOOL GetUserTextVisible ( );
    void PutUserTextVisible (
        VARIANT_BOOL pShowUserText );
    double GetLabelAngle ( );
    void PutLabelAngle (
        double pLevel );
    _bstr_t GetUserText ( );
    void PutUserText (
        _bstr_t pLevel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Level (
        /*[out,retval]*/ VARIANT * pLevel ) = 0;
      virtual HRESULT __stdcall put_Level (
        /*[in]*/ VARIANT pLevel ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pLineStyle ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pLineStyle ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pLineWidth ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pLineWidth ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLabel ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLabel ) = 0;
      virtual HRESULT __stdcall get_UserTextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowUserText ) = 0;
      virtual HRESULT __stdcall put_UserTextVisible (
        /*[in]*/ VARIANT_BOOL pShowUserText ) = 0;
      virtual HRESULT __stdcall get_LabelAngle (
        /*[out,retval]*/ double * pLevel ) = 0;
      virtual HRESULT __stdcall put_LabelAngle (
        /*[in]*/ double pLevel ) = 0;
      virtual HRESULT __stdcall get_UserText (
        /*[out,retval]*/ BSTR * pLevel ) = 0;
      virtual HRESULT __stdcall put_UserText (
        /*[in]*/ BSTR pLevel ) = 0;
};

struct __declspec(uuid("4dd1b96c-d96d-41d9-ae0b-15e799b52d3f"))
AgLevelAttributeCollection;
    // [ default ] interface IUnknown
    // interface IAgLevelAttributeCollection

struct __declspec(uuid("1aa5a85d-f24f-42f2-8f67-b731281aeb06"))
IAgLevelAttributeCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgLevelAttributePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgLevelAttributePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IAgLevelAttributePtr AddLevel (
        const _variant_t & Level );
    HRESULT AddLevelRange (
        const _variant_t & Start,
        const _variant_t & Stop,
        const _variant_t & Step );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgLevelAttribute * * ppAgLevelAttribute ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_AddLevel (
        /*[in]*/ VARIANT Level,
        /*[out,retval]*/ struct IAgLevelAttribute * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddLevelRange (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[in]*/ VARIANT Step ) = 0;
};

struct __declspec(uuid("99656a03-dda5-4d47-b0e5-fba9ac2fef9d"))
AgBasicAzElMask;
    // [ default ] interface _IAgBasicAzElMask
    // interface IAgBasicAzElMask

struct __declspec(uuid("044579f9-353c-4c20-ab48-3db6f1b1c682"))
_IAgBasicAzElMask : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltVisible,put=PutAltVisible))
    VARIANT_BOOL AltVisible;
    __declspec(property(get=GetNumberOfAltSteps,put=PutNumberOfAltSteps))
    long NumberOfAltSteps;
    __declspec(property(get=GetRangeVisible,put=PutRangeVisible))
    VARIANT_BOOL RangeVisible;
    __declspec(property(get=GetNumberOfRangeSteps,put=PutNumberOfRangeSteps))
    long NumberOfRangeSteps;
    __declspec(property(get=GetDisplayRangeMinimum,put=PutDisplayRangeMinimum))
    double DisplayRangeMinimum;
    __declspec(property(get=GetDisplayRangeMaximum,put=PutDisplayRangeMaximum))
    double DisplayRangeMaximum;
    __declspec(property(get=GetDisplayAltMinimum,put=PutDisplayAltMinimum))
    double DisplayAltMinimum;
    __declspec(property(get=GetDisplayAltMaximum,put=PutDisplayAltMaximum))
    double DisplayAltMaximum;
    __declspec(property(get=GetAltColorVisible,put=PutAltColorVisible))
    VARIANT_BOOL AltColorVisible;
    __declspec(property(get=GetAltColor,put=PutAltColor))
    OLE_COLOR AltColor;
    __declspec(property(get=GetRangeColorVisible,put=PutRangeColorVisible))
    VARIANT_BOOL RangeColorVisible;
    __declspec(property(get=GetRangeColor,put=PutRangeColor))
    OLE_COLOR RangeColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAltVisible ( );
    void PutAltVisible (
        VARIANT_BOOL pVal );
    long GetNumberOfAltSteps ( );
    void PutNumberOfAltSteps (
        long pNum );
    VARIANT_BOOL GetRangeVisible ( );
    void PutRangeVisible (
        VARIANT_BOOL pVal );
    long GetNumberOfRangeSteps ( );
    void PutNumberOfRangeSteps (
        long pNum );
    double GetDisplayRangeMinimum ( );
    void PutDisplayRangeMinimum (
        double pMin );
    double GetDisplayRangeMaximum ( );
    void PutDisplayRangeMaximum (
        double pMax );
    double GetDisplayAltMinimum ( );
    void PutDisplayAltMinimum (
        double pMin );
    double GetDisplayAltMaximum ( );
    void PutDisplayAltMaximum (
        double pMax );
    VARIANT_BOOL GetAltColorVisible ( );
    void PutAltColorVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetAltColor ( );
    void PutAltColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetRangeColorVisible ( );
    void PutRangeColorVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetRangeColor ( );
    void PutRangeColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AltVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAltSteps (
        /*[out,retval]*/ long * pNum ) = 0;
      virtual HRESULT __stdcall put_NumberOfAltSteps (
        /*[in]*/ long pNum ) = 0;
      virtual HRESULT __stdcall get_RangeVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RangeVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRangeSteps (
        /*[out,retval]*/ long * pNum ) = 0;
      virtual HRESULT __stdcall put_NumberOfRangeSteps (
        /*[in]*/ long pNum ) = 0;
      virtual HRESULT __stdcall get_DisplayRangeMinimum (
        /*[out,retval]*/ double * pMin ) = 0;
      virtual HRESULT __stdcall put_DisplayRangeMinimum (
        /*[in]*/ double pMin ) = 0;
      virtual HRESULT __stdcall get_DisplayRangeMaximum (
        /*[out,retval]*/ double * pMax ) = 0;
      virtual HRESULT __stdcall put_DisplayRangeMaximum (
        /*[in]*/ double pMax ) = 0;
      virtual HRESULT __stdcall get_DisplayAltMinimum (
        /*[out,retval]*/ double * pMin ) = 0;
      virtual HRESULT __stdcall put_DisplayAltMinimum (
        /*[in]*/ double pMin ) = 0;
      virtual HRESULT __stdcall get_DisplayAltMaximum (
        /*[out,retval]*/ double * pMax ) = 0;
      virtual HRESULT __stdcall put_DisplayAltMaximum (
        /*[in]*/ double pMax ) = 0;
      virtual HRESULT __stdcall get_AltColorVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AltColorVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_AltColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_RangeColorVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RangeColorVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RangeColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_RangeColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("2305979b-f736-481d-9576-d970d831ccac"))
IAgBasicAzElMask : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAltVisible,put=PutAltVisible))
    VARIANT_BOOL AltVisible;
    __declspec(property(get=GetNumberOfAltSteps,put=PutNumberOfAltSteps))
    long NumberOfAltSteps;
    __declspec(property(get=GetRangeVisible,put=PutRangeVisible))
    VARIANT_BOOL RangeVisible;
    __declspec(property(get=GetNumberOfRangeSteps,put=PutNumberOfRangeSteps))
    long NumberOfRangeSteps;
    __declspec(property(get=GetDisplayRangeMinimum,put=PutDisplayRangeMinimum))
    double DisplayRangeMinimum;
    __declspec(property(get=GetDisplayRangeMaximum,put=PutDisplayRangeMaximum))
    double DisplayRangeMaximum;
    __declspec(property(get=GetDisplayAltMinimum,put=PutDisplayAltMinimum))
    double DisplayAltMinimum;
    __declspec(property(get=GetDisplayAltMaximum,put=PutDisplayAltMaximum))
    double DisplayAltMaximum;
    __declspec(property(get=GetAltColorVisible,put=PutAltColorVisible))
    VARIANT_BOOL AltColorVisible;
    __declspec(property(get=GetAltColor,put=PutAltColor))
    OLE_COLOR AltColor;
    __declspec(property(get=GetRangeColorVisible,put=PutRangeColorVisible))
    VARIANT_BOOL RangeColorVisible;
    __declspec(property(get=GetRangeColor,put=PutRangeColor))
    OLE_COLOR RangeColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAltVisible ( );
    void PutAltVisible (
        VARIANT_BOOL pVal );
    long GetNumberOfAltSteps ( );
    void PutNumberOfAltSteps (
        long pNum );
    VARIANT_BOOL GetRangeVisible ( );
    void PutRangeVisible (
        VARIANT_BOOL pVal );
    long GetNumberOfRangeSteps ( );
    void PutNumberOfRangeSteps (
        long pNum );
    double GetDisplayRangeMinimum ( );
    void PutDisplayRangeMinimum (
        double pMin );
    double GetDisplayRangeMaximum ( );
    void PutDisplayRangeMaximum (
        double pMax );
    double GetDisplayAltMinimum ( );
    void PutDisplayAltMinimum (
        double pMin );
    double GetDisplayAltMaximum ( );
    void PutDisplayAltMaximum (
        double pMax );
    VARIANT_BOOL GetAltColorVisible ( );
    void PutAltColorVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetAltColor ( );
    void PutAltColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetRangeColorVisible ( );
    void PutRangeColorVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetRangeColor ( );
    void PutRangeColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AltVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAltSteps (
        /*[out,retval]*/ long * pNum ) = 0;
      virtual HRESULT __stdcall put_NumberOfAltSteps (
        /*[in]*/ long pNum ) = 0;
      virtual HRESULT __stdcall get_RangeVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RangeVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfRangeSteps (
        /*[out,retval]*/ long * pNum ) = 0;
      virtual HRESULT __stdcall put_NumberOfRangeSteps (
        /*[in]*/ long pNum ) = 0;
      virtual HRESULT __stdcall get_DisplayRangeMinimum (
        /*[out,retval]*/ double * pMin ) = 0;
      virtual HRESULT __stdcall put_DisplayRangeMinimum (
        /*[in]*/ double pMin ) = 0;
      virtual HRESULT __stdcall get_DisplayRangeMaximum (
        /*[out,retval]*/ double * pMax ) = 0;
      virtual HRESULT __stdcall put_DisplayRangeMaximum (
        /*[in]*/ double pMax ) = 0;
      virtual HRESULT __stdcall get_DisplayAltMinimum (
        /*[out,retval]*/ double * pMin ) = 0;
      virtual HRESULT __stdcall put_DisplayAltMinimum (
        /*[in]*/ double pMin ) = 0;
      virtual HRESULT __stdcall get_DisplayAltMaximum (
        /*[out,retval]*/ double * pMax ) = 0;
      virtual HRESULT __stdcall put_DisplayAltMaximum (
        /*[in]*/ double pMax ) = 0;
      virtual HRESULT __stdcall get_AltColorVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AltColorVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_AltColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_RangeColorVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RangeColorVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RangeColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_RangeColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("4b3a880f-6389-41f4-9037-e7fc1b3c4214"))
AgFaGraphics;
    // [ default ] interface _IAgFaGraphics
    // interface IAgFaGraphics

struct __declspec(uuid("351a21c7-4f9c-451a-a958-04a54fa1194e"))
IAgGfxRangeContours : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsFillVisible,put=PutIsFillVisible))
    VARIANT_BOOL IsFillVisible;
    __declspec(property(get=GetLevelAttributes))
    IAgLevelAttributeCollectionPtr LevelAttributes;
    __declspec(property(get=GetNumOfDecimalDigits,put=PutNumOfDecimalDigits))
    long NumOfDecimalDigits;
    __declspec(property(get=GetLabelUnit,put=PutLabelUnit))
    _bstr_t LabelUnit;
    __declspec(property(get=GetAvailableLabelUnits))
    SAFEARRAY * AvailableLabelUnits;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetIsFillVisible ( );
    void PutIsFillVisible (
        VARIANT_BOOL pShow );
    enum STKUtil::AgEFillStyle GetFillStyle ( );
    void PutFillStyle (
        enum STKUtil::AgEFillStyle pType );
    IAgLevelAttributeCollectionPtr GetLevelAttributes ( );
    long GetNumOfDecimalDigits ( );
    void PutNumOfDecimalDigits (
        long pVal );
    _bstr_t GetLabelUnit ( );
    void PutLabelUnit (
        _bstr_t pLabelUnit );
    SAFEARRAY * GetAvailableLabelUnits ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_IsFillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_IsFillVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ enum STKUtil::AgEFillStyle * pType ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ enum STKUtil::AgEFillStyle pType ) = 0;
      virtual HRESULT __stdcall get_LevelAttributes (
        /*[out,retval]*/ struct IAgLevelAttributeCollection * * ppLevelAttr ) = 0;
      virtual HRESULT __stdcall get_NumOfDecimalDigits (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumOfDecimalDigits (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LabelUnit (
        /*[out,retval]*/ BSTR * pLabelUnit ) = 0;
      virtual HRESULT __stdcall put_LabelUnit (
        /*[in]*/ BSTR pLabelUnit ) = 0;
      virtual HRESULT __stdcall get_AvailableLabelUnits (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgENoteShowType
{
    eNoteOn = 0,
    eNoteOff = 1,
    eNoteIntervals = 2
};

struct __declspec(uuid("963ce5f5-94c6-4ff7-91d0-68a6d7c8ae96"))
IAgLabelNote : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetNote,put=PutNote))
    _bstr_t Note;
    __declspec(property(get=GetNoteVisible,put=PutNoteVisible))
    enum AgENoteShowType NoteVisible;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetIntervals))
    IAgIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetNote ( );
    void PutNote (
        _bstr_t pVal );
    enum AgENoteShowType GetNoteVisible ( );
    void PutNoteVisible (
        enum AgENoteShowType pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    IAgIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Note (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Note (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NoteVisible (
        /*[out,retval]*/ enum AgENoteShowType * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteVisible (
        /*[in]*/ enum AgENoteShowType pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppVal ) = 0;
};

struct __declspec(uuid("937ce022-a1c2-4cb0-a474-22aa492b10f0"))
IAgLabelNoteCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgLabelNotePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgLabelNotePtr Add (
        _bstr_t Msg );
    HRESULT Remove (
        long Index );
    IAgLabelNotePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Msg,
        /*[out,retval]*/ struct IAgLabelNote * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgLabelNote * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
};

struct __declspec(uuid("e6464981-390d-47aa-bfa6-5dcad5fc0b7c"))
_IAgFaGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFromScenario,put=PutInheritFromScenario))
    VARIANT_BOOL InheritFromScenario;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetAzElMask))
    IAgBasicAzElMaskPtr AzElMask;
    __declspec(property(get=GetContours))
    IAgGfxRangeContoursPtr Contours;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetMarkerColor,put=PutMarkerColor))
    OLE_COLOR MarkerColor;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFromScenario ( );
    void PutInheritFromScenario (
        VARIANT_BOOL pInherit );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pMarkerStyle );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLabel );
    IAgBasicAzElMaskPtr GetAzElMask ( );
    IAgGfxRangeContoursPtr GetContours ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pVal );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    OLE_COLOR GetMarkerColor ( );
    void PutMarkerColor (
        OLE_COLOR pColor );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pColor );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFromScenario (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_InheritFromScenario (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pMarkerStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pMarkerStyle ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLabel ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLabel ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ struct IAgBasicAzElMask * * ppAzElMask ) = 0;
      virtual HRESULT __stdcall get_Contours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppContours ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_MarkerColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("f19c7a62-9c2d-4730-bb4f-cfffd3fe80b7"))
IAgFaGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFromScenario,put=PutInheritFromScenario))
    VARIANT_BOOL InheritFromScenario;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetAzElMask))
    IAgBasicAzElMaskPtr AzElMask;
    __declspec(property(get=GetContours))
    IAgGfxRangeContoursPtr Contours;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetMarkerColor,put=PutMarkerColor))
    OLE_COLOR MarkerColor;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFromScenario ( );
    void PutInheritFromScenario (
        VARIANT_BOOL pInherit );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pMarkerStyle );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLabel );
    IAgBasicAzElMaskPtr GetAzElMask ( );
    IAgGfxRangeContoursPtr GetContours ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pVal );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    OLE_COLOR GetMarkerColor ( );
    void PutMarkerColor (
        OLE_COLOR pColor );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFromScenario (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_InheritFromScenario (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pMarkerStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pMarkerStyle ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLabel ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLabel ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ struct IAgBasicAzElMask * * ppAzElMask ) = 0;
      virtual HRESULT __stdcall get_Contours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppContours ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MarkerColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_MarkerColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
};

struct __declspec(uuid("4ae5c58d-f060-4a3a-a3ae-5b5c5c56fdf9"))
AgGfxRangeContours;
    // [ default ] interface _IAgGfxRangeContours
    // interface IAgGfxRangeContours

struct __declspec(uuid("f7a7cb83-b7ab-44c4-8ac0-a8daf9c322a1"))
_IAgGfxRangeContours : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsFillVisible,put=PutIsFillVisible))
    VARIANT_BOOL IsFillVisible;
    __declspec(property(get=GetLevelAttributes))
    IAgLevelAttributeCollectionPtr LevelAttributes;
    __declspec(property(get=GetNumOfDecimalDigits,put=PutNumOfDecimalDigits))
    long NumOfDecimalDigits;
    __declspec(property(get=GetLabelUnit,put=PutLabelUnit))
    _bstr_t LabelUnit;
    __declspec(property(get=GetAvailableLabelUnits))
    SAFEARRAY * AvailableLabelUnits;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetIsFillVisible ( );
    void PutIsFillVisible (
        VARIANT_BOOL pShow );
    enum STKUtil::AgEFillStyle GetFillStyle ( );
    void PutFillStyle (
        enum STKUtil::AgEFillStyle pType );
    IAgLevelAttributeCollectionPtr GetLevelAttributes ( );
    long GetNumOfDecimalDigits ( );
    void PutNumOfDecimalDigits (
        long pVal );
    _bstr_t GetLabelUnit ( );
    void PutLabelUnit (
        _bstr_t pLabelUnit );
    SAFEARRAY * GetAvailableLabelUnits ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_IsFillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_IsFillVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ enum STKUtil::AgEFillStyle * pType ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ enum STKUtil::AgEFillStyle pType ) = 0;
      virtual HRESULT __stdcall get_LevelAttributes (
        /*[out,retval]*/ struct IAgLevelAttributeCollection * * ppLevelAttr ) = 0;
      virtual HRESULT __stdcall get_NumOfDecimalDigits (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumOfDecimalDigits (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LabelUnit (
        /*[out,retval]*/ BSTR * pLabelUnit ) = 0;
      virtual HRESULT __stdcall put_LabelUnit (
        /*[in]*/ BSTR pLabelUnit ) = 0;
      virtual HRESULT __stdcall get_AvailableLabelUnits (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("65062fe6-89cd-4191-877e-75e9fdf65f91"))
AgAccessConstraint;
    // [ default ] interface _IAgAccessConstraint
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("19abb9e1-8c35-4e62-a918-72468b8e4455"))
_IAgAccessConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b88aa9dd-7799-48b6-b8b1-f22c3aa95e58"))
IAgAccessConstraint2 : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("c592adc0-f675-429d-b68e-f0d72bdc438e"))
AgAccessConstraintCollection;
    // [ default ] interface IUnknown
    // interface IAgAccessConstraintCollection
    // interface IAgAccessConstraint2

struct __declspec(uuid("2ea1364a-9064-4a8b-b4fa-ad7cf4f39556"))
AgVORangeContours;
    // [ default ] interface _IAgVORangeContours
    // interface IAgVORangeContours

enum AgEBorderWallUpperLowerEdgeAltRef
{
    eAltRefMSL = 0,
    eAltRefObject = 1,
    eAltRefTerrain = 2,
    eAltRefWGS84 = 3
};

struct __declspec(uuid("32db9d85-5e13-4b0d-9bb5-4ce769ab9a57"))
IAgVOBorderWall : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseBorderWall,put=PutUseBorderWall))
    VARIANT_BOOL UseBorderWall;
    __declspec(property(get=GetUpperEdgeAltRef,put=PutUpperEdgeAltRef))
    enum AgEBorderWallUpperLowerEdgeAltRef UpperEdgeAltRef;
    __declspec(property(get=GetUpperEdgeHeight,put=PutUpperEdgeHeight))
    double UpperEdgeHeight;
    __declspec(property(get=GetLowerEdgeAltRef,put=PutLowerEdgeAltRef))
    enum AgEBorderWallUpperLowerEdgeAltRef LowerEdgeAltRef;
    __declspec(property(get=GetLowerEdgeHeight,put=PutLowerEdgeHeight))
    double LowerEdgeHeight;
    __declspec(property(get=GetUseWallTranslucency,put=PutUseWallTranslucency))
    VARIANT_BOOL UseWallTranslucency;
    __declspec(property(get=GetWallTranslucency,put=PutWallTranslucency))
    double WallTranslucency;
    __declspec(property(get=GetUseLineTranslucency,put=PutUseLineTranslucency))
    VARIANT_BOOL UseLineTranslucency;
    __declspec(property(get=GetLineTranslucency,put=PutLineTranslucency))
    double LineTranslucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseBorderWall ( );
    void PutUseBorderWall (
        VARIANT_BOOL pVal );
    enum AgEBorderWallUpperLowerEdgeAltRef GetUpperEdgeAltRef ( );
    void PutUpperEdgeAltRef (
        enum AgEBorderWallUpperLowerEdgeAltRef pVal );
    double GetUpperEdgeHeight ( );
    void PutUpperEdgeHeight (
        double pVal );
    enum AgEBorderWallUpperLowerEdgeAltRef GetLowerEdgeAltRef ( );
    void PutLowerEdgeAltRef (
        enum AgEBorderWallUpperLowerEdgeAltRef pVal );
    double GetLowerEdgeHeight ( );
    void PutLowerEdgeHeight (
        double pVal );
    VARIANT_BOOL GetUseWallTranslucency ( );
    void PutUseWallTranslucency (
        VARIANT_BOOL pVal );
    double GetWallTranslucency ( );
    void PutWallTranslucency (
        double pVal );
    VARIANT_BOOL GetUseLineTranslucency ( );
    void PutUseLineTranslucency (
        VARIANT_BOOL pVal );
    double GetLineTranslucency ( );
    void PutLineTranslucency (
        double pVal );
    VARIANT_BOOL IsAltRefTypeSupported (
        enum AgEBorderWallUpperLowerEdgeAltRef RefType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseBorderWall (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseBorderWall (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UpperEdgeAltRef (
        /*[out,retval]*/ enum AgEBorderWallUpperLowerEdgeAltRef * pVal ) = 0;
      virtual HRESULT __stdcall put_UpperEdgeAltRef (
        /*[in]*/ enum AgEBorderWallUpperLowerEdgeAltRef pVal ) = 0;
      virtual HRESULT __stdcall get_UpperEdgeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UpperEdgeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LowerEdgeAltRef (
        /*[out,retval]*/ enum AgEBorderWallUpperLowerEdgeAltRef * pVal ) = 0;
      virtual HRESULT __stdcall put_LowerEdgeAltRef (
        /*[in]*/ enum AgEBorderWallUpperLowerEdgeAltRef pVal ) = 0;
      virtual HRESULT __stdcall get_LowerEdgeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LowerEdgeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseWallTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseWallTranslucency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WallTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WallTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseLineTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLineTranslucency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LineTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_IsAltRefTypeSupported (
        /*[in]*/ enum AgEBorderWallUpperLowerEdgeAltRef RefType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgEVOLabelSwapDistance
{
    eSwapUnknown = -1,
    eSwapAll = 0,
    eSwapModelLabel = 1,
    eSwapMarkerLabel = 2,
    eSwapMarker = 3,
    eSwapPoint = 4,
    eSwapCustom = 5
};

struct __declspec(uuid("403adedc-3969-4f0e-b543-1cfac3f9b613"))
IAgVOLabelSwapDistance : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDistanceValue,put=PutDistanceValue))
    double DistanceValue;
    __declspec(property(get=GetDistanceLevel))
    enum AgEVOLabelSwapDistance DistanceLevel;

    //
    // Wrapper methods for error-handling
    //

    double GetDistanceValue ( );
    void PutDistanceValue (
        double pVal );
    HRESULT SetDistanceLevel (
        enum AgEVOLabelSwapDistance Val );
    enum AgEVOLabelSwapDistance GetDistanceLevel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DistanceValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DistanceValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDistanceLevel (
        /*[in]*/ enum AgEVOLabelSwapDistance Val ) = 0;
      virtual HRESULT __stdcall get_DistanceLevel (
        /*[out,retval]*/ enum AgEVOLabelSwapDistance * pVal ) = 0;
};

struct __declspec(uuid("cedc17fd-479a-4150-adb7-bc0c3950bbec"))
_IAgVORangeContours : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTranslucentLines,put=PutTranslucentLines))
    VARIANT_BOOL TranslucentLines;
    __declspec(property(get=GetPercentTranslucency,put=PutPercentTranslucency))
    double PercentTranslucency;
    __declspec(property(get=GetBorderWall))
    IAgVOBorderWallPtr BorderWall;
    __declspec(property(get=GetLabelSwapDistance))
    IAgVOLabelSwapDistancePtr LabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTranslucentLines ( );
    void PutTranslucentLines (
        VARIANT_BOOL pVal );
    double GetPercentTranslucency ( );
    void PutPercentTranslucency (
        double pVal );
    IAgVOBorderWallPtr GetBorderWall ( );
    IAgVOLabelSwapDistancePtr GetLabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TranslucentLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TranslucentLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PercentTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PercentTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BorderWall (
        /*[out,retval]*/ struct IAgVOBorderWall * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("7417e3e1-be1c-46a0-95a9-70b60ee47393"))
IAgVORangeContours : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTranslucentLines,put=PutTranslucentLines))
    VARIANT_BOOL TranslucentLines;
    __declspec(property(get=GetPercentTranslucency,put=PutPercentTranslucency))
    double PercentTranslucency;
    __declspec(property(get=GetBorderWall))
    IAgVOBorderWallPtr BorderWall;
    __declspec(property(get=GetLabelSwapDistance))
    IAgVOLabelSwapDistancePtr LabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTranslucentLines ( );
    void PutTranslucentLines (
        VARIANT_BOOL pVal );
    double GetPercentTranslucency ( );
    void PutPercentTranslucency (
        double pVal );
    IAgVOBorderWallPtr GetBorderWall ( );
    IAgVOLabelSwapDistancePtr GetLabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TranslucentLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TranslucentLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PercentTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PercentTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BorderWall (
        /*[out,retval]*/ struct IAgVOBorderWall * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("80d490d6-0aa1-4de8-9907-6cc034f3a4c7"))
AgVOOffsetRotate;
    // [ default ] interface _IAgVOOffsetRotate
    // interface IAgVOOffsetRotate

struct __declspec(uuid("cddb861e-9bc0-4c5b-9ac5-51b06dd91249"))
_IAgVOOffsetRotate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetX,put=PutX))
    _variant_t X;
    __declspec(property(get=GetY,put=PutY))
    _variant_t Y;
    __declspec(property(get=GetZ,put=PutZ))
    _variant_t Z;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pUse );
    _variant_t GetX ( );
    void PutX (
        const _variant_t & pX );
    _variant_t GetY ( );
    void PutY (
        const _variant_t & pY );
    _variant_t GetZ ( );
    void PutZ (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ VARIANT * pX ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ VARIANT pX ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ VARIANT * pY ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ VARIANT pY ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("5af865f7-bea8-4410-9e93-e10b05636eaf"))
IAgVOOffsetRotate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetX,put=PutX))
    _variant_t X;
    __declspec(property(get=GetY,put=PutY))
    _variant_t Y;
    __declspec(property(get=GetZ,put=PutZ))
    _variant_t Z;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pUse );
    _variant_t GetX ( );
    void PutX (
        const _variant_t & pX );
    _variant_t GetY ( );
    void PutY (
        const _variant_t & pY );
    _variant_t GetZ ( );
    void PutZ (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ VARIANT * pX ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ VARIANT pX ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ VARIANT * pY ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ VARIANT pY ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("5b328be2-b723-4f4a-ac27-dad4ea6c57f9"))
AgVOOffsetTrans;
    // [ default ] interface _IAgVOOffsetTrans
    // interface IAgVOOffsetTrans

struct __declspec(uuid("6398df65-a7e6-4b2b-9095-329bf27aa33a"))
_IAgVOOffsetTrans : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pUse );
    double GetX ( );
    void PutX (
        double pX );
    double GetY ( );
    void PutY (
        double pY );
    double GetZ ( );
    void PutZ (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pX ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pX ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pY ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pY ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ca2c409d-6f99-4be2-9a26-364949514ddc"))
IAgVOOffsetTrans : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pUse );
    double GetX ( );
    void PutX (
        double pX );
    double GetY ( );
    void PutY (
        double pY );
    double GetZ ( );
    void PutZ (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pX ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pX ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pY ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pY ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("cb3325ec-e6dd-4155-a9a9-2e7f90d7248a"))
AgVOOffsetAttach;
    // [ default ] interface _IAgVOOffsetAttach
    // interface IAgVOOffsetAttach

struct __declspec(uuid("b69afe67-87ad-428e-8ee8-d3075008ae40"))
_IAgVOOffsetAttach : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetAttachPtName,put=PutAttachPtName))
    _bstr_t AttachPtName;
    __declspec(property(get=GetAvailableAttachPoints))
    SAFEARRAY * AvailableAttachPoints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pUse );
    _bstr_t GetAttachPtName ( );
    void PutAttachPtName (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableAttachPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_AttachPtName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AttachPtName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAttachPoints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("9a324a77-73fa-4b8d-b328-7e001b895986"))
IAgVOOffsetAttach : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetAttachPtName,put=PutAttachPtName))
    _bstr_t AttachPtName;
    __declspec(property(get=GetAvailableAttachPoints))
    SAFEARRAY * AvailableAttachPoints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pUse );
    _bstr_t GetAttachPtName ( );
    void PutAttachPtName (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableAttachPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_AttachPtName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AttachPtName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAttachPoints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("dc52d336-3a90-4244-ac87-c89a90d9f427"))
AgVOOffsetLabel;
    // [ default ] interface _IAgVOOffsetLabel
    // interface IAgVOOffsetLabel

enum AgEOffsetFrameType
{
    eOffsetFrameCartesian = 0,
    eOffsetFramePixel = 1
};

struct __declspec(uuid("12972bb2-a44e-405d-a405-9004a3134b55"))
_IAgVOOffsetLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetOffsetFrame,put=PutOffsetFrame))
    enum AgEOffsetFrameType OffsetFrame;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pUse );
    double GetX ( );
    void PutX (
        double pX );
    double GetY ( );
    void PutY (
        double pY );
    double GetZ ( );
    void PutZ (
        double pVal );
    enum AgEOffsetFrameType GetOffsetFrame ( );
    void PutOffsetFrame (
        enum AgEOffsetFrameType pType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pX ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pX ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pY ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pY ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetFrame (
        /*[out,retval]*/ enum AgEOffsetFrameType * pType ) = 0;
      virtual HRESULT __stdcall put_OffsetFrame (
        /*[in]*/ enum AgEOffsetFrameType pType ) = 0;
};

struct __declspec(uuid("592a718d-aad5-4fb3-b25d-04c82f7ffa2f"))
IAgVOOffsetLabel : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetOffsetFrame,put=PutOffsetFrame))
    enum AgEOffsetFrameType OffsetFrame;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pUse );
    double GetX ( );
    void PutX (
        double pX );
    double GetY ( );
    void PutY (
        double pY );
    double GetZ ( );
    void PutZ (
        double pVal );
    enum AgEOffsetFrameType GetOffsetFrame ( );
    void PutOffsetFrame (
        enum AgEOffsetFrameType pType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pX ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pX ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pY ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pY ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetFrame (
        /*[out,retval]*/ enum AgEOffsetFrameType * pType ) = 0;
      virtual HRESULT __stdcall put_OffsetFrame (
        /*[in]*/ enum AgEOffsetFrameType pType ) = 0;
};

struct __declspec(uuid("c9efaa6b-dce7-459c-bddd-96afb3cf0ff0"))
AgVOOffset;
    // [ default ] interface _IAgVOOffset
    // interface IAgVOOffset

struct __declspec(uuid("5bffdcfa-9515-4ba3-9bac-552b4b0205ed"))
_IAgVOOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRotational))
    IAgVOOffsetRotatePtr Rotational;
    __declspec(property(get=GetTranslational))
    IAgVOOffsetTransPtr Translational;
    __declspec(property(get=GetLabel))
    IAgVOOffsetLabelPtr Label;
    __declspec(property(get=GetAttachPoint))
    IAgVOOffsetAttachPtr AttachPoint;

    //
    // Wrapper methods for error-handling
    //

    IAgVOOffsetRotatePtr GetRotational ( );
    IAgVOOffsetTransPtr GetTranslational ( );
    IAgVOOffsetLabelPtr GetLabel ( );
    IAgVOOffsetAttachPtr GetAttachPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rotational (
        /*[out,retval]*/ struct IAgVOOffsetRotate * * ppAgRotational ) = 0;
      virtual HRESULT __stdcall get_Translational (
        /*[out,retval]*/ struct IAgVOOffsetTrans * * ppAgTranslational ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ struct IAgVOOffsetLabel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttachPoint (
        /*[out,retval]*/ struct IAgVOOffsetAttach * * ppVal ) = 0;
};

struct __declspec(uuid("afb5066c-4b39-4468-9d06-96960251891e"))
IAgVOOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRotational))
    IAgVOOffsetRotatePtr Rotational;
    __declspec(property(get=GetTranslational))
    IAgVOOffsetTransPtr Translational;
    __declspec(property(get=GetLabel))
    IAgVOOffsetLabelPtr Label;
    __declspec(property(get=GetAttachPoint))
    IAgVOOffsetAttachPtr AttachPoint;

    //
    // Wrapper methods for error-handling
    //

    IAgVOOffsetRotatePtr GetRotational ( );
    IAgVOOffsetTransPtr GetTranslational ( );
    IAgVOOffsetLabelPtr GetLabel ( );
    IAgVOOffsetAttachPtr GetAttachPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rotational (
        /*[out,retval]*/ struct IAgVOOffsetRotate * * ppAgRotational ) = 0;
      virtual HRESULT __stdcall get_Translational (
        /*[out,retval]*/ struct IAgVOOffsetTrans * * ppAgTranslational ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ struct IAgVOOffsetLabel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttachPoint (
        /*[out,retval]*/ struct IAgVOOffsetAttach * * ppVal ) = 0;
};

struct __declspec(uuid("b1396521-da71-4e9b-9b30-5aa3ac9e38cb"))
AgVOMarkerShape;
    // [ default ] interface _IAgVOMarkerShape
    // interface IAgVOMarkerData
    // interface IAgVOMarkerShape

enum AgE3dMarkerShape
{
    e3dShapeCircle = 0,
    e3dShapePlus = 1,
    e3dShapePoint = 2,
    e3dShapeSquare = 3,
    e3dShapeStar = 4,
    e3dShapeTriangle = 5,
    e3dShapeX = 6
};

struct __declspec(uuid("49275adb-1aba-42c3-ad4b-a6a217b0d125"))
_IAgVOMarkerShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    enum AgE3dMarkerShape Style;

    //
    // Wrapper methods for error-handling
    //

    enum AgE3dMarkerShape GetStyle ( );
    void PutStyle (
        enum AgE3dMarkerShape pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum AgE3dMarkerShape * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum AgE3dMarkerShape pVal ) = 0;
};

struct __declspec(uuid("677bf130-013f-49ab-b4d0-74df33fe63af"))
IAgVOMarkerData : IUnknown
{};

struct __declspec(uuid("2f779e6c-5656-44c0-aeed-90079196d08b"))
IAgVOMarkerShape : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle,put=PutStyle))
    enum AgE3dMarkerShape Style;

    //
    // Wrapper methods for error-handling
    //

    enum AgE3dMarkerShape GetStyle ( );
    void PutStyle (
        enum AgE3dMarkerShape pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum AgE3dMarkerShape * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum AgE3dMarkerShape pVal ) = 0;
};

struct __declspec(uuid("b0616f61-6236-443a-b056-d7bd2d3b7765"))
AgVOMarkerFile;
    // [ default ] interface _IAgVOMarkerFile
    // interface IAgVOMarkerData
    // interface IAgVOMarkerFile

struct __declspec(uuid("345ab476-de42-4ebc-9cac-fe3e936ca1b2"))
_IAgVOMarkerFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetIsTransparent,put=PutIsTransparent))
    VARIANT_BOOL IsTransparent;
    __declspec(property(get=GetUseSoftTransparency,put=PutUseSoftTransparency))
    VARIANT_BOOL UseSoftTransparency;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    VARIANT_BOOL GetIsTransparent ( );
    void PutIsTransparent (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseSoftTransparency ( );
    void PutUseSoftTransparency (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsTransparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTransparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseSoftTransparency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSoftTransparency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("d741993c-7865-46ed-981e-8f7ca6f9eff0"))
IAgVOMarkerFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetIsTransparent,put=PutIsTransparent))
    VARIANT_BOOL IsTransparent;
    __declspec(property(get=GetUseSoftTransparency,put=PutUseSoftTransparency))
    VARIANT_BOOL UseSoftTransparency;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    VARIANT_BOOL GetIsTransparent ( );
    void PutIsTransparent (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseSoftTransparency ( );
    void PutUseSoftTransparency (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsTransparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTransparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseSoftTransparency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSoftTransparency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("6c04a9a8-dd24-4ce0-8312-739c74fa6591"))
AgVOMarker;
    // [ default ] interface _IAgVOMarker
    // interface IAgVOMarker

enum AgEMarkerType
{
    eShape = 0,
    eImageFile = 1
};

enum AgEVOMarkerOriginType
{
    eLeft = 0,
    eRight = 1,
    eCenter = 2,
    eTop = 3,
    eBottom = 4
};

enum AgEVOMarkerOrientation
{
    eVOMarkerOrientationNone = 0,
    eVOMarkerOrientationAngle = 1,
    eVOMarkerOrientationFollowDirection = 2
};

struct __declspec(uuid("ca2c5ea7-ea74-4d13-a861-fb0d2ded73fd"))
_IAgVOMarker : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPixelSize,put=PutPixelSize))
    long PixelSize;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetMarkerType,put=PutMarkerType))
    enum AgEMarkerType MarkerType;
    __declspec(property(get=GetEnableRotate,put=PutEnableRotate))
    VARIANT_BOOL EnableRotate;
    __declspec(property(get=GetAngle,put=PutAngle))
    _variant_t Angle;
    __declspec(property(get=GetXOrigin,put=PutXOrigin))
    enum AgEVOMarkerOriginType XOrigin;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    enum AgEVOMarkerOriginType YOrigin;
    __declspec(property(get=GetMarkerData))
    IAgVOMarkerDataPtr MarkerData;
    __declspec(property(get=GetOrientationMode,put=PutOrientationMode))
    enum AgEVOMarkerOrientation OrientationMode;

    //
    // Wrapper methods for error-handling
    //

    long GetPixelSize ( );
    void PutPixelSize (
        long pSize );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pShow );
    enum AgEMarkerType GetMarkerType ( );
    void PutMarkerType (
        enum AgEMarkerType pMarkerType );
    VARIANT_BOOL GetEnableRotate ( );
    void PutEnableRotate (
        VARIANT_BOOL pRotate );
    _variant_t GetAngle ( );
    void PutAngle (
        const _variant_t & pAngle );
    enum AgEVOMarkerOriginType GetXOrigin ( );
    void PutXOrigin (
        enum AgEVOMarkerOriginType pXOrigin );
    enum AgEVOMarkerOriginType GetYOrigin ( );
    void PutYOrigin (
        enum AgEVOMarkerOriginType pYOrigin );
    IAgVOMarkerDataPtr GetMarkerData ( );
    HRESULT SetMarkerImageFile (
        _bstr_t ImageFile );
    enum AgEVOMarkerOrientation GetOrientationMode ( );
    void PutOrientationMode (
        enum AgEVOMarkerOrientation pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PixelSize (
        /*[out,retval]*/ long * pSize ) = 0;
      virtual HRESULT __stdcall put_PixelSize (
        /*[in]*/ long pSize ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_MarkerType (
        /*[out,retval]*/ enum AgEMarkerType * pMarkerType ) = 0;
      virtual HRESULT __stdcall put_MarkerType (
        /*[in]*/ enum AgEMarkerType pMarkerType ) = 0;
      virtual HRESULT __stdcall get_EnableRotate (
        /*[out,retval]*/ VARIANT_BOOL * pRotate ) = 0;
      virtual HRESULT __stdcall put_EnableRotate (
        /*[in]*/ VARIANT_BOOL pRotate ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pAngle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ VARIANT pAngle ) = 0;
      virtual HRESULT __stdcall get_XOrigin (
        /*[out,retval]*/ enum AgEVOMarkerOriginType * pXOrigin ) = 0;
      virtual HRESULT __stdcall put_XOrigin (
        /*[in]*/ enum AgEVOMarkerOriginType pXOrigin ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ enum AgEVOMarkerOriginType * pYOrigin ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ enum AgEVOMarkerOriginType pYOrigin ) = 0;
      virtual HRESULT __stdcall get_MarkerData (
        /*[out,retval]*/ struct IAgVOMarkerData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetMarkerImageFile (
        /*[in]*/ BSTR ImageFile ) = 0;
      virtual HRESULT __stdcall get_OrientationMode (
        /*[out,retval]*/ enum AgEVOMarkerOrientation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OrientationMode (
        /*[in]*/ enum AgEVOMarkerOrientation pRetVal ) = 0;
};

struct __declspec(uuid("0f3ae239-4d94-48a6-91ec-174f0bd87d35"))
IAgVOMarker : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPixelSize,put=PutPixelSize))
    long PixelSize;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetMarkerType,put=PutMarkerType))
    enum AgEMarkerType MarkerType;
    __declspec(property(get=GetEnableRotate,put=PutEnableRotate))
    VARIANT_BOOL EnableRotate;
    __declspec(property(get=GetAngle,put=PutAngle))
    _variant_t Angle;
    __declspec(property(get=GetXOrigin,put=PutXOrigin))
    enum AgEVOMarkerOriginType XOrigin;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    enum AgEVOMarkerOriginType YOrigin;
    __declspec(property(get=GetMarkerData))
    IAgVOMarkerDataPtr MarkerData;
    __declspec(property(get=GetOrientationMode,put=PutOrientationMode))
    enum AgEVOMarkerOrientation OrientationMode;

    //
    // Wrapper methods for error-handling
    //

    long GetPixelSize ( );
    void PutPixelSize (
        long pSize );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pShow );
    enum AgEMarkerType GetMarkerType ( );
    void PutMarkerType (
        enum AgEMarkerType pMarkerType );
    VARIANT_BOOL GetEnableRotate ( );
    void PutEnableRotate (
        VARIANT_BOOL pRotate );
    _variant_t GetAngle ( );
    void PutAngle (
        const _variant_t & pAngle );
    enum AgEVOMarkerOriginType GetXOrigin ( );
    void PutXOrigin (
        enum AgEVOMarkerOriginType pXOrigin );
    enum AgEVOMarkerOriginType GetYOrigin ( );
    void PutYOrigin (
        enum AgEVOMarkerOriginType pYOrigin );
    IAgVOMarkerDataPtr GetMarkerData ( );
    HRESULT SetMarkerImageFile (
        _bstr_t ImageFile );
    enum AgEVOMarkerOrientation GetOrientationMode ( );
    void PutOrientationMode (
        enum AgEVOMarkerOrientation pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PixelSize (
        /*[out,retval]*/ long * pSize ) = 0;
      virtual HRESULT __stdcall put_PixelSize (
        /*[in]*/ long pSize ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_MarkerType (
        /*[out,retval]*/ enum AgEMarkerType * pMarkerType ) = 0;
      virtual HRESULT __stdcall put_MarkerType (
        /*[in]*/ enum AgEMarkerType pMarkerType ) = 0;
      virtual HRESULT __stdcall get_EnableRotate (
        /*[out,retval]*/ VARIANT_BOOL * pRotate ) = 0;
      virtual HRESULT __stdcall put_EnableRotate (
        /*[in]*/ VARIANT_BOOL pRotate ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pAngle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ VARIANT pAngle ) = 0;
      virtual HRESULT __stdcall get_XOrigin (
        /*[out,retval]*/ enum AgEVOMarkerOriginType * pXOrigin ) = 0;
      virtual HRESULT __stdcall put_XOrigin (
        /*[in]*/ enum AgEVOMarkerOriginType pXOrigin ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ enum AgEVOMarkerOriginType * pYOrigin ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ enum AgEVOMarkerOriginType pYOrigin ) = 0;
      virtual HRESULT __stdcall get_MarkerData (
        /*[out,retval]*/ struct IAgVOMarkerData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetMarkerImageFile (
        /*[in]*/ BSTR ImageFile ) = 0;
      virtual HRESULT __stdcall get_OrientationMode (
        /*[out,retval]*/ enum AgEVOMarkerOrientation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OrientationMode (
        /*[in]*/ enum AgEVOMarkerOrientation pRetVal ) = 0;
};

struct __declspec(uuid("f31a448c-4930-4e5f-b1a0-39ddecae492b"))
AgVODetailThreshold;
    // [ default ] interface _IAgVODetailThreshold
    // interface IAgVODetailThreshold

struct __declspec(uuid("9f88f6f4-ea0d-4507-9728-593860a10582"))
_IAgVODetailThreshold : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableDetailThreshold,put=PutEnableDetailThreshold))
    VARIANT_BOOL EnableDetailThreshold;
    __declspec(property(get=GetAll,put=PutAll))
    double All;
    __declspec(property(get=GetModelLabel,put=PutModelLabel))
    double ModelLabel;
    __declspec(property(get=GetMarkerLabel,put=PutMarkerLabel))
    double MarkerLabel;
    __declspec(property(get=GetMarker,put=PutMarker))
    double Marker;
    __declspec(property(get=GetPoint,put=PutPoint))
    double Point;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableDetailThreshold ( );
    void PutEnableDetailThreshold (
        VARIANT_BOOL pUseDetail );
    double GetAll ( );
    void PutAll (
        double pAll );
    double GetModelLabel ( );
    void PutModelLabel (
        double pModelLabel );
    double GetMarkerLabel ( );
    void PutMarkerLabel (
        double pMarkerLabel );
    double GetMarker ( );
    void PutMarker (
        double pMarker );
    double GetPoint ( );
    void PutPoint (
        double pPoint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableDetailThreshold (
        /*[out,retval]*/ VARIANT_BOOL * pUseDetail ) = 0;
      virtual HRESULT __stdcall put_EnableDetailThreshold (
        /*[in]*/ VARIANT_BOOL pUseDetail ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ double * pAll ) = 0;
      virtual HRESULT __stdcall put_All (
        /*[in]*/ double pAll ) = 0;
      virtual HRESULT __stdcall get_ModelLabel (
        /*[out,retval]*/ double * pModelLabel ) = 0;
      virtual HRESULT __stdcall put_ModelLabel (
        /*[in]*/ double pModelLabel ) = 0;
      virtual HRESULT __stdcall get_MarkerLabel (
        /*[out,retval]*/ double * pMarkerLabel ) = 0;
      virtual HRESULT __stdcall put_MarkerLabel (
        /*[in]*/ double pMarkerLabel ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ double * pMarker ) = 0;
      virtual HRESULT __stdcall put_Marker (
        /*[in]*/ double pMarker ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ double * pPoint ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ double pPoint ) = 0;
};

struct __declspec(uuid("f9b5a162-98dc-4b92-bcf4-1831eced23ed"))
IAgVODetailThreshold : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableDetailThreshold,put=PutEnableDetailThreshold))
    VARIANT_BOOL EnableDetailThreshold;
    __declspec(property(get=GetAll,put=PutAll))
    double All;
    __declspec(property(get=GetModelLabel,put=PutModelLabel))
    double ModelLabel;
    __declspec(property(get=GetMarkerLabel,put=PutMarkerLabel))
    double MarkerLabel;
    __declspec(property(get=GetMarker,put=PutMarker))
    double Marker;
    __declspec(property(get=GetPoint,put=PutPoint))
    double Point;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableDetailThreshold ( );
    void PutEnableDetailThreshold (
        VARIANT_BOOL pUseDetail );
    double GetAll ( );
    void PutAll (
        double pAll );
    double GetModelLabel ( );
    void PutModelLabel (
        double pModelLabel );
    double GetMarkerLabel ( );
    void PutMarkerLabel (
        double pMarkerLabel );
    double GetMarker ( );
    void PutMarker (
        double pMarker );
    double GetPoint ( );
    void PutPoint (
        double pPoint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableDetailThreshold (
        /*[out,retval]*/ VARIANT_BOOL * pUseDetail ) = 0;
      virtual HRESULT __stdcall put_EnableDetailThreshold (
        /*[in]*/ VARIANT_BOOL pUseDetail ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ double * pAll ) = 0;
      virtual HRESULT __stdcall put_All (
        /*[in]*/ double pAll ) = 0;
      virtual HRESULT __stdcall get_ModelLabel (
        /*[out,retval]*/ double * pModelLabel ) = 0;
      virtual HRESULT __stdcall put_ModelLabel (
        /*[in]*/ double pModelLabel ) = 0;
      virtual HRESULT __stdcall get_MarkerLabel (
        /*[out,retval]*/ double * pMarkerLabel ) = 0;
      virtual HRESULT __stdcall put_MarkerLabel (
        /*[in]*/ double pMarkerLabel ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ double * pMarker ) = 0;
      virtual HRESULT __stdcall put_Marker (
        /*[in]*/ double pMarker ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ double * pPoint ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ double pPoint ) = 0;
};

struct __declspec(uuid("3210b38f-c866-4b82-8d92-05273004d70b"))
AgVOModelItem;
    // [ default ] interface _IAgVOModelItem
    // interface IAgVOModelItem

struct __declspec(uuid("3bd22bfa-fe91-4957-9fd1-15853d19c32f"))
_IAgVOModelItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSwitchTime,put=PutSwitchTime))
    _variant_t SwitchTime;
    __declspec(property(get=GetModelFile,put=PutModelFile))
    _bstr_t ModelFile;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetSwitchTime ( );
    void PutSwitchTime (
        const _variant_t & pVal );
    _bstr_t GetModelFile ( );
    void PutModelFile (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SwitchTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SwitchTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ModelFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ModelFile (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("9a3224fe-b046-45ef-942e-3656755a86c7"))
IAgVOModelItem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSwitchTime,put=PutSwitchTime))
    _variant_t SwitchTime;
    __declspec(property(get=GetModelFile,put=PutModelFile))
    _bstr_t ModelFile;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetSwitchTime ( );
    void PutSwitchTime (
        const _variant_t & pVal );
    _bstr_t GetModelFile ( );
    void PutModelFile (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SwitchTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SwitchTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ModelFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ModelFile (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("137383c2-66b5-420b-ac03-8177a84aea5b"))
AgVOModelCollection;
    // [ default ] interface IUnknown
    // interface IAgVOModelData
    // interface IAgVOModelCollection

struct __declspec(uuid("93769f1a-d1df-460e-b227-b97b6fefc880"))
IAgVOModelData : IUnknown
{};

struct __declspec(uuid("d8058970-9fbb-4285-b9d5-e41fa1873756"))
IAgVOModelCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVOModelItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVOModelItemPtr Add (
        const _variant_t & Time,
        _bstr_t Filename );
    HRESULT Remove (
        long Index );
    IAgVOModelItemPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ struct IAgVOModelItem * * ppIAgVOModelItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVOModelItem * * ppIAgVOModelItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
};

struct __declspec(uuid("fc3c9643-6783-4db4-a07b-ffc51bf889a8"))
AgLabelNote;
    // [ default ] interface _IAgLabelNote
    // interface IAgLabelNote

struct __declspec(uuid("a9c5e906-5fca-40a5-b540-fcc77d33ec8d"))
_IAgLabelNote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNote,put=PutNote))
    _bstr_t Note;
    __declspec(property(get=GetNoteVisible,put=PutNoteVisible))
    enum AgENoteShowType NoteVisible;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetIntervals))
    IAgIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetNote ( );
    void PutNote (
        _bstr_t pVal );
    enum AgENoteShowType GetNoteVisible ( );
    void PutNoteVisible (
        enum AgENoteShowType pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    IAgIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Note (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Note (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NoteVisible (
        /*[out,retval]*/ enum AgENoteShowType * pVal ) = 0;
      virtual HRESULT __stdcall put_NoteVisible (
        /*[in]*/ enum AgENoteShowType pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppVal ) = 0;
};

struct __declspec(uuid("53591b98-a760-43e7-87bb-c3b7d0346967"))
AgLabelNoteCollection;
    // [ default ] interface IUnknown
    // interface IAgLabelNoteCollection

struct __declspec(uuid("3e41296b-5275-477f-b277-7a72bcfcb4a5"))
AgVOVector;
    // [ default ] interface _IAgVOVector
    // interface IAgVOVector

enum AgEGeometricElemType
{
    eVectorElem = 0,
    eAxesElem = 1,
    eAngleElem = 2,
    ePointElem = 3,
    ePlaneElem = 4
};

struct __declspec(uuid("88097d07-90ef-447f-92da-870d7d02312a"))
IAgVORefCrdn : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeID))
    enum AgEGeometricElemType TypeID;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;

    //
    // Wrapper methods for error-handling
    //

    enum AgEGeometricElemType GetTypeID ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVisible );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVisible );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeID (
        /*[out,retval]*/ enum AgEGeometricElemType * pType ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVisible ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVisible ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVisible ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("4a79401e-f564-49c4-9ca2-8a58d51d47af"))
IAgVORefCrdnCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVORefCrdnPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAvailableCrdns))
    SAFEARRAY * AvailableCrdns;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVORefCrdnPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IAgVORefCrdnPtr Add (
        enum AgEGeometricElemType Type,
        _bstr_t Name );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT RemoveByName (
        enum AgEGeometricElemType Type,
        _bstr_t Name );
    SAFEARRAY * GetAvailableCrdns ( );
    IAgVORefCrdnPtr GetCrdnByName (
        enum AgEGeometricElemType Type,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVORefCrdn * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum AgEGeometricElemType Type,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgVORefCrdn * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveByName (
        /*[in]*/ enum AgEGeometricElemType Type,
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_AvailableCrdns (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCrdnByName (
        /*[in]*/ enum AgEGeometricElemType Type,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgVORefCrdn * * ppVal ) = 0;
};

struct __declspec(uuid("2f8f42f9-231f-4c2a-ae9e-bdd1e76772a9"))
_IAgVOVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRefCrdns))
    IAgVORefCrdnCollectionPtr RefCrdns;
    __declspec(property(get=GetVectorSizeScale,put=PutVectorSizeScale))
    double VectorSizeScale;
    __declspec(property(get=GetScaleRelativeToModel,put=PutScaleRelativeToModel))
    VARIANT_BOOL ScaleRelativeToModel;
    __declspec(property(get=GetAngleSizeScale,put=PutAngleSizeScale))
    double AngleSizeScale;
    __declspec(property(get=GetArrowPtSize,put=PutArrowPtSize))
    double ArrowPtSize;

    //
    // Wrapper methods for error-handling
    //

    IAgVORefCrdnCollectionPtr GetRefCrdns ( );
    double GetVectorSizeScale ( );
    void PutVectorSizeScale (
        double pVal );
    VARIANT_BOOL GetScaleRelativeToModel ( );
    void PutScaleRelativeToModel (
        VARIANT_BOOL pVal );
    double GetAngleSizeScale ( );
    void PutAngleSizeScale (
        double pVal );
    double GetArrowPtSize ( );
    void PutArrowPtSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RefCrdns (
        /*[out,retval]*/ struct IAgVORefCrdnCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VectorSizeScale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VectorSizeScale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleRelativeToModel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleRelativeToModel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AngleSizeScale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleSizeScale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowPtSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowPtSize (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("17135f30-6574-49d1-89e0-938269e71c1b"))
IAgVOVector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRefCrdns))
    IAgVORefCrdnCollectionPtr RefCrdns;
    __declspec(property(get=GetVectorSizeScale,put=PutVectorSizeScale))
    double VectorSizeScale;
    __declspec(property(get=GetScaleRelativeToModel,put=PutScaleRelativeToModel))
    VARIANT_BOOL ScaleRelativeToModel;
    __declspec(property(get=GetAngleSizeScale,put=PutAngleSizeScale))
    double AngleSizeScale;
    __declspec(property(get=GetArrowPtSize,put=PutArrowPtSize))
    double ArrowPtSize;

    //
    // Wrapper methods for error-handling
    //

    IAgVORefCrdnCollectionPtr GetRefCrdns ( );
    double GetVectorSizeScale ( );
    void PutVectorSizeScale (
        double pVal );
    VARIANT_BOOL GetScaleRelativeToModel ( );
    void PutScaleRelativeToModel (
        VARIANT_BOOL pVal );
    double GetAngleSizeScale ( );
    void PutAngleSizeScale (
        double pVal );
    double GetArrowPtSize ( );
    void PutArrowPtSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RefCrdns (
        /*[out,retval]*/ struct IAgVORefCrdnCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VectorSizeScale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VectorSizeScale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleRelativeToModel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleRelativeToModel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AngleSizeScale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleSizeScale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowPtSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowPtSize (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("7fcc5c82-c9c8-440d-8d85-35c3cfe0c51c"))
AgFaVO;
    // [ default ] interface _IAgFaVO
    // interface IAgFaVO

enum AgEModelType
{
    eModelList = 0,
    eModelFile = 1
};

struct __declspec(uuid("eacaed86-95c2-4631-a3b9-d61cf189a59b"))
IAgVOModelTrans : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetMin))
    double Min;
    __declspec(property(get=GetMax))
    double Max;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    double GetValue ( );
    void PutValue (
        double pVal );
    double GetMin ( );
    double GetMax ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("0a42871e-82c9-4a93-ba48-c088b6935212"))
IAgVOModelTransCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVOModelTransPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVOModelTransPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVOModelTrans * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("e43fe529-270f-4186-a162-a89025993706"))
IAgVOModelArtic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableDefaultSave,put=PutEnableDefaultSave))
    VARIANT_BOOL EnableDefaultSave;
    __declspec(property(get=GetEnableSaveArticFile,put=PutEnableSaveArticFile))
    VARIANT_BOOL EnableSaveArticFile;
    __declspec(property(get=GetLODCount))
    long LODCount;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableDefaultSave ( );
    void PutEnableDefaultSave (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableSaveArticFile ( );
    void PutEnableSaveArticFile (
        VARIANT_BOOL pVal );
    double GetTransValue (
        long LOD,
        _bstr_t Artic,
        _bstr_t Trans );
    HRESULT SetTransValue (
        long LOD,
        _bstr_t Artic,
        _bstr_t Trans,
        double TransVal );
    SAFEARRAY * GetAvailableArticulations (
        long LOD );
    IAgVOModelTransCollectionPtr GetAvailableTransformations (
        long LOD,
        _bstr_t ArticName );
    long GetLODCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableDefaultSave (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableDefaultSave (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableSaveArticFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableSaveArticFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTransValue (
        /*[in]*/ long LOD,
        /*[in]*/ BSTR Artic,
        /*[in]*/ BSTR Trans,
        /*[out,retval]*/ double * pNum ) = 0;
      virtual HRESULT __stdcall raw_SetTransValue (
        /*[in]*/ long LOD,
        /*[in]*/ BSTR Artic,
        /*[in]*/ BSTR Trans,
        /*[in]*/ double TransVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableArticulations (
        /*[in]*/ long LOD,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableTransformations (
        /*[in]*/ long LOD,
        /*[in]*/ BSTR ArticName,
        /*[out,retval]*/ struct IAgVOModelTransCollection * * ppIAgVOModelTransCollection ) = 0;
      virtual HRESULT __stdcall get_LODCount (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("f96b935d-c04d-41e2-8754-c108613c254f"))
IAgVOModel : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;
    __declspec(property(get=GetDetailThreshold))
    IAgVODetailThresholdPtr DetailThreshold;
    __declspec(property(get=GetModelData))
    IAgVOModelDataPtr ModelData;
    __declspec(property(get=GetModelType,put=PutModelType))
    enum AgEModelType ModelType;
    __declspec(property(get=GetArticulation))
    IAgVOModelArticPtr Articulation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pShow );
    double GetScaleValue ( );
    void PutScaleValue (
        double pScale );
    IAgVODetailThresholdPtr GetDetailThreshold ( );
    IAgVOModelDataPtr GetModelData ( );
    enum AgEModelType GetModelType ( );
    void PutModelType (
        enum AgEModelType pType );
    IAgVOModelArticPtr GetArticulation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pScale ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pScale ) = 0;
      virtual HRESULT __stdcall get_DetailThreshold (
        /*[out,retval]*/ struct IAgVODetailThreshold * * ppAgVODetailThreshold ) = 0;
      virtual HRESULT __stdcall get_ModelData (
        /*[out,retval]*/ struct IAgVOModelData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ enum AgEModelType * pType ) = 0;
      virtual HRESULT __stdcall put_ModelType (
        /*[in]*/ enum AgEModelType pType ) = 0;
      virtual HRESULT __stdcall get_Articulation (
        /*[out,retval]*/ struct IAgVOModelArtic * * ppRetVal ) = 0;
};

struct __declspec(uuid("a16d4ef7-6be5-4845-8448-96f337a2b6b0"))
IAgPtTargetVOModel : IAgVOModel
{
    //
    // Property data
    //

    __declspec(property(get=GetMarker))
    IAgVOMarkerPtr Marker;
    __declspec(property(get=GetIsPointVisible,put=PutIsPointVisible))
    VARIANT_BOOL IsPointVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    _variant_t PointSize;

    //
    // Wrapper methods for error-handling
    //

    IAgVOMarkerPtr GetMarker ( );
    VARIANT_BOOL GetIsPointVisible ( );
    void PutIsPointVisible (
        VARIANT_BOOL pVal );
    _variant_t GetPointSize ( );
    void PutPointSize (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVOMarker ) = 0;
      virtual HRESULT __stdcall get_IsPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("874d4e7f-b4e6-4c34-8bd0-be525098a8bf"))
IAgVOAzElMask : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCompassDirectionsVisible,put=PutCompassDirectionsVisible))
    VARIANT_BOOL CompassDirectionsVisible;
    __declspec(property(get=GetAltLabelsVisible,put=PutAltLabelsVisible))
    VARIANT_BOOL AltLabelsVisible;
    __declspec(property(get=GetNumbAltLabels,put=PutNumbAltLabels))
    long NumbAltLabels;
    __declspec(property(get=GetInteriorTranslucency,put=PutInteriorTranslucency))
    double InteriorTranslucency;
    __declspec(property(get=GetLineTranslucency,put=PutLineTranslucency))
    double LineTranslucency;
    __declspec(property(get=GetLabelSwapDistance))
    IAgVOLabelSwapDistancePtr LabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCompassDirectionsVisible ( );
    void PutCompassDirectionsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAltLabelsVisible ( );
    void PutAltLabelsVisible (
        VARIANT_BOOL pVal );
    long GetNumbAltLabels ( );
    void PutNumbAltLabels (
        long pVal );
    double GetInteriorTranslucency ( );
    void PutInteriorTranslucency (
        double pVal );
    double GetLineTranslucency ( );
    void PutLineTranslucency (
        double pVal );
    IAgVOLabelSwapDistancePtr GetLabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CompassDirectionsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CompassDirectionsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AltLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NumbAltLabels (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumbAltLabels (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_InteriorTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InteriorTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LineTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("fc74d837-49c1-4559-91b1-e2c905de94ec"))
IAgVOVaporTrail : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetMaxNumOfPuffs,put=PutMaxNumOfPuffs))
    long MaxNumOfPuffs;
    __declspec(property(get=GetDensity,put=PutDensity))
    double Density;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetEndTime,put=PutEndTime))
    _variant_t EndTime;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetUseAttachPoint,put=PutUseAttachPoint))
    VARIANT_BOOL UseAttachPoint;
    __declspec(property(get=GetAttachPointName,put=PutAttachPointName))
    _bstr_t AttachPointName;
    __declspec(property(get=GetImageFile,put=PutImageFile))
    _bstr_t ImageFile;
    __declspec(property(get=GetAvailableAttachPoints))
    SAFEARRAY * AvailableAttachPoints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pShow );
    long GetMaxNumOfPuffs ( );
    void PutMaxNumOfPuffs (
        long pMaxNum );
    double GetDensity ( );
    void PutDensity (
        double pDensity );
    double GetRadius ( );
    void PutRadius (
        double pRadius );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pStartTime );
    _variant_t GetEndTime ( );
    void PutEndTime (
        const _variant_t & pEndTime );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    VARIANT_BOOL GetUseAttachPoint ( );
    void PutUseAttachPoint (
        VARIANT_BOOL pUseAttach );
    _bstr_t GetAttachPointName ( );
    void PutAttachPointName (
        _bstr_t pAttachName );
    _bstr_t GetImageFile ( );
    void PutImageFile (
        _bstr_t pImageFile );
    SAFEARRAY * GetAvailableAttachPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_MaxNumOfPuffs (
        /*[out,retval]*/ long * pMaxNum ) = 0;
      virtual HRESULT __stdcall put_MaxNumOfPuffs (
        /*[in]*/ long pMaxNum ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ double * pDensity ) = 0;
      virtual HRESULT __stdcall put_Density (
        /*[in]*/ double pDensity ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRadius ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRadius ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pStartTime ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pStartTime ) = 0;
      virtual HRESULT __stdcall get_EndTime (
        /*[out,retval]*/ VARIANT * pEndTime ) = 0;
      virtual HRESULT __stdcall put_EndTime (
        /*[in]*/ VARIANT pEndTime ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_UseAttachPoint (
        /*[out,retval]*/ VARIANT_BOOL * pUseAttach ) = 0;
      virtual HRESULT __stdcall put_UseAttachPoint (
        /*[in]*/ VARIANT_BOOL pUseAttach ) = 0;
      virtual HRESULT __stdcall get_AttachPointName (
        /*[out,retval]*/ BSTR * pAttachName ) = 0;
      virtual HRESULT __stdcall put_AttachPointName (
        /*[in]*/ BSTR pAttachName ) = 0;
      virtual HRESULT __stdcall get_ImageFile (
        /*[out,retval]*/ BSTR * pImageFile ) = 0;
      virtual HRESULT __stdcall put_ImageFile (
        /*[in]*/ BSTR pImageFile ) = 0;
      virtual HRESULT __stdcall get_AvailableAttachPoints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("20fadaf6-09c2-44c7-bf56-932c5e6f758a"))
AgTerrainNormSlopeAzimuth;
    // [ default ] interface _IAgTerrainNormSlopeAzimuth
    // interface IAgTerrainNormData
    // interface IAgTerrainNormSlopeAzimuth

struct __declspec(uuid("51f16581-7248-40d4-a84e-428db32ed9d4"))
_IAgTerrainNormSlopeAzimuth : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSlope,put=PutSlope))
    _variant_t Slope;
    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    _variant_t Azimuth;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetSlope ( );
    void PutSlope (
        const _variant_t & pVal );
    _variant_t GetAzimuth ( );
    void PutAzimuth (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Slope (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Slope (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("ab61e628-a852-47eb-ac17-0fd8d44fff7a"))
IAgTerrainNormData : IUnknown
{};

struct __declspec(uuid("15b306f9-81f2-4580-83f6-139839402e9c"))
IAgTerrainNormSlopeAzimuth : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSlope,put=PutSlope))
    _variant_t Slope;
    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    _variant_t Azimuth;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetSlope ( );
    void PutSlope (
        const _variant_t & pVal );
    _variant_t GetAzimuth ( );
    void PutAzimuth (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Slope (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Slope (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("7332b86a-0f25-4b7d-99f3-98673444f6b8"))
AgIntervalCollection;
    // [ default ] interface IUnknown
    // interface IAgIntervalCollection
    // interface IAgDisplayTimesData
    // interface IAgAccessInterval

struct __declspec(uuid("1f4027b1-05b3-41b7-b804-5941f569c587"))
IAgDisplayTimesData : IUnknown
{};

struct __declspec(uuid("61124eda-d66e-4c33-86eb-60095983aae9"))
AgDuringAccess;
    // [ default ] interface _IAgDuringAccess
    // interface IAgDisplayTimesData
    // interface IAgDuringAccess

struct __declspec(uuid("66575dbb-16f7-41e0-aadb-e83b1a1d93af"))
AgStVO;
    // [ default ] interface _IAgStVO
    // interface IAgStVO

struct __declspec(uuid("46b996a1-187a-4015-a975-5c897aacc9d8"))
_IAgStVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInertialPositionVisible,put=PutInertialPositionVisible))
    VARIANT_BOOL InertialPositionVisible;
    __declspec(property(get=GetSubStarPointVisible,put=PutSubStarPointVisible))
    VARIANT_BOOL SubStarPointVisible;
    __declspec(property(get=GetInheritFrom2dGfx,put=PutInheritFrom2dGfx))
    VARIANT_BOOL InheritFrom2dGfx;
    __declspec(property(get=GetPositionLabelVisible,put=PutPositionLabelVisible))
    VARIANT_BOOL PositionLabelVisible;
    __declspec(property(get=GetSubStarLabelVisible,put=PutSubStarLabelVisible))
    VARIANT_BOOL SubStarLabelVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInertialPositionVisible ( );
    void PutInertialPositionVisible (
        VARIANT_BOOL pInertialPositionVisible );
    VARIANT_BOOL GetSubStarPointVisible ( );
    void PutSubStarPointVisible (
        VARIANT_BOOL pShowSubStarPoint );
    VARIANT_BOOL GetInheritFrom2dGfx ( );
    void PutInheritFrom2dGfx (
        VARIANT_BOOL pInheritFrom2dfx );
    VARIANT_BOOL GetPositionLabelVisible ( );
    void PutPositionLabelVisible (
        VARIANT_BOOL pShowStarLabel );
    VARIANT_BOOL GetSubStarLabelVisible ( );
    void PutSubStarLabelVisible (
        VARIANT_BOOL pShowSubStarLabel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InertialPositionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pInertialPositionVisible ) = 0;
      virtual HRESULT __stdcall put_InertialPositionVisible (
        /*[in]*/ VARIANT_BOOL pInertialPositionVisible ) = 0;
      virtual HRESULT __stdcall get_SubStarPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowSubStarPoint ) = 0;
      virtual HRESULT __stdcall put_SubStarPointVisible (
        /*[in]*/ VARIANT_BOOL pShowSubStarPoint ) = 0;
      virtual HRESULT __stdcall get_InheritFrom2dGfx (
        /*[out,retval]*/ VARIANT_BOOL * pInheritFrom2dfx ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2dGfx (
        /*[in]*/ VARIANT_BOOL pInheritFrom2dfx ) = 0;
      virtual HRESULT __stdcall get_PositionLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowStarLabel ) = 0;
      virtual HRESULT __stdcall put_PositionLabelVisible (
        /*[in]*/ VARIANT_BOOL pShowStarLabel ) = 0;
      virtual HRESULT __stdcall get_SubStarLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowSubStarLabel ) = 0;
      virtual HRESULT __stdcall put_SubStarLabelVisible (
        /*[in]*/ VARIANT_BOOL pShowSubStarLabel ) = 0;
};

struct __declspec(uuid("379512ed-907c-4020-a031-89bcb7931275"))
IAgStVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInertialPositionVisible,put=PutInertialPositionVisible))
    VARIANT_BOOL InertialPositionVisible;
    __declspec(property(get=GetSubStarPointVisible,put=PutSubStarPointVisible))
    VARIANT_BOOL SubStarPointVisible;
    __declspec(property(get=GetInheritFrom2dGfx,put=PutInheritFrom2dGfx))
    VARIANT_BOOL InheritFrom2dGfx;
    __declspec(property(get=GetPositionLabelVisible,put=PutPositionLabelVisible))
    VARIANT_BOOL PositionLabelVisible;
    __declspec(property(get=GetSubStarLabelVisible,put=PutSubStarLabelVisible))
    VARIANT_BOOL SubStarLabelVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInertialPositionVisible ( );
    void PutInertialPositionVisible (
        VARIANT_BOOL pInertialPositionVisible );
    VARIANT_BOOL GetSubStarPointVisible ( );
    void PutSubStarPointVisible (
        VARIANT_BOOL pShowSubStarPoint );
    VARIANT_BOOL GetInheritFrom2dGfx ( );
    void PutInheritFrom2dGfx (
        VARIANT_BOOL pInheritFrom2dfx );
    VARIANT_BOOL GetPositionLabelVisible ( );
    void PutPositionLabelVisible (
        VARIANT_BOOL pPositionLabelVisible );
    VARIANT_BOOL GetSubStarLabelVisible ( );
    void PutSubStarLabelVisible (
        VARIANT_BOOL pShowSubStarLabel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InertialPositionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pInertialPositionVisible ) = 0;
      virtual HRESULT __stdcall put_InertialPositionVisible (
        /*[in]*/ VARIANT_BOOL pInertialPositionVisible ) = 0;
      virtual HRESULT __stdcall get_SubStarPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowSubStarPoint ) = 0;
      virtual HRESULT __stdcall put_SubStarPointVisible (
        /*[in]*/ VARIANT_BOOL pShowSubStarPoint ) = 0;
      virtual HRESULT __stdcall get_InheritFrom2dGfx (
        /*[out,retval]*/ VARIANT_BOOL * pInheritFrom2dfx ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2dGfx (
        /*[in]*/ VARIANT_BOOL pInheritFrom2dfx ) = 0;
      virtual HRESULT __stdcall get_PositionLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pPositionLabelVisible ) = 0;
      virtual HRESULT __stdcall put_PositionLabelVisible (
        /*[in]*/ VARIANT_BOOL pPositionLabelVisible ) = 0;
      virtual HRESULT __stdcall get_SubStarLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowSubStarLabel ) = 0;
      virtual HRESULT __stdcall put_SubStarLabelVisible (
        /*[in]*/ VARIANT_BOOL pShowSubStarLabel ) = 0;
};

struct __declspec(uuid("cbc61212-82da-4867-942c-23adf6b14936"))
AgStGraphics;
    // [ default ] interface _IAgStGraphics
    // interface IAgStGraphics

struct __declspec(uuid("68186701-b6c1-40b7-8969-1fbe1da5a525"))
_IAgStGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetMarkerVisible,put=PutMarkerVisible))
    VARIANT_BOOL MarkerVisible;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pInherit );
    VARIANT_BOOL GetMarkerVisible ( );
    void PutMarkerVisible (
        VARIANT_BOOL pShowMarker );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pMarkerStyle );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLabel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_MarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowMarker ) = 0;
      virtual HRESULT __stdcall put_MarkerVisible (
        /*[in]*/ VARIANT_BOOL pShowMarker ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pMarkerStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pMarkerStyle ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLabel ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLabel ) = 0;
};

struct __declspec(uuid("9fec4181-0828-4695-8473-105409b886fc"))
IAgStGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetMarkerVisible,put=PutMarkerVisible))
    VARIANT_BOOL MarkerVisible;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pInherit );
    VARIANT_BOOL GetMarkerVisible ( );
    void PutMarkerVisible (
        VARIANT_BOOL pShowMarker );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pMarkerStyle );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLabel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_MarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowMarker ) = 0;
      virtual HRESULT __stdcall put_MarkerVisible (
        /*[in]*/ VARIANT_BOOL pShowMarker ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pMarkerStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pMarkerStyle ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLabel ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLabel ) = 0;
};

struct __declspec(uuid("52a50801-47f5-46a3-ae40-90cb8856d9cc"))
AgPlVO;
    // [ default ] interface _IAgPlVO
    // interface IAgPlVO

struct __declspec(uuid("fa15e09f-c8d4-441e-9e26-f3aebacb2541"))
_IAgPlVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFrom2dGfx,put=PutInheritFrom2dGfx))
    VARIANT_BOOL InheritFrom2dGfx;
    __declspec(property(get=GetInertialPositionVisible,put=PutInertialPositionVisible))
    VARIANT_BOOL InertialPositionVisible;
    __declspec(property(get=GetSubPlanetPointVisible,put=PutSubPlanetPointVisible))
    VARIANT_BOOL SubPlanetPointVisible;
    __declspec(property(get=GetPositionLabelVisible,put=PutPositionLabelVisible))
    VARIANT_BOOL PositionLabelVisible;
    __declspec(property(get=GetSubPlanetLabelVisible,put=PutSubPlanetLabelVisible))
    VARIANT_BOOL SubPlanetLabelVisible;
    __declspec(property(get=GetOrbitVisible,put=PutOrbitVisible))
    VARIANT_BOOL OrbitVisible;
    __declspec(property(get=GetEnableDepthCueing,put=PutEnableDepthCueing))
    VARIANT_BOOL EnableDepthCueing;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFrom2dGfx ( );
    void PutInheritFrom2dGfx (
        VARIANT_BOOL pInherit );
    VARIANT_BOOL GetInertialPositionVisible ( );
    void PutInertialPositionVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetSubPlanetPointVisible ( );
    void PutSubPlanetPointVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetPositionLabelVisible ( );
    void PutPositionLabelVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetSubPlanetLabelVisible ( );
    void PutSubPlanetLabelVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetOrbitVisible ( );
    void PutOrbitVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetEnableDepthCueing ( );
    void PutEnableDepthCueing (
        VARIANT_BOOL pShow );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFrom2dGfx (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2dGfx (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_InertialPositionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_InertialPositionVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_SubPlanetPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_SubPlanetPointVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_PositionLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_PositionLabelVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_SubPlanetLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_SubPlanetLabelVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_OrbitVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_OrbitVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_EnableDepthCueing (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_EnableDepthCueing (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
};

struct __declspec(uuid("1124c62f-7203-448c-868a-610a62d97d45"))
IAgPlVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFrom2dGfx,put=PutInheritFrom2dGfx))
    VARIANT_BOOL InheritFrom2dGfx;
    __declspec(property(get=GetInertialPositionVisible,put=PutInertialPositionVisible))
    VARIANT_BOOL InertialPositionVisible;
    __declspec(property(get=GetSubPlanetPointVisible,put=PutSubPlanetPointVisible))
    VARIANT_BOOL SubPlanetPointVisible;
    __declspec(property(get=GetPositionLabelVisible,put=PutPositionLabelVisible))
    VARIANT_BOOL PositionLabelVisible;
    __declspec(property(get=GetSubPlanetLabelVisible,put=PutSubPlanetLabelVisible))
    VARIANT_BOOL SubPlanetLabelVisible;
    __declspec(property(get=GetOrbitVisible,put=PutOrbitVisible))
    VARIANT_BOOL OrbitVisible;
    __declspec(property(get=GetEnableDepthCueing,put=PutEnableDepthCueing))
    VARIANT_BOOL EnableDepthCueing;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFrom2dGfx ( );
    void PutInheritFrom2dGfx (
        VARIANT_BOOL pInherit );
    VARIANT_BOOL GetInertialPositionVisible ( );
    void PutInertialPositionVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetSubPlanetPointVisible ( );
    void PutSubPlanetPointVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetPositionLabelVisible ( );
    void PutPositionLabelVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetSubPlanetLabelVisible ( );
    void PutSubPlanetLabelVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetOrbitVisible ( );
    void PutOrbitVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetEnableDepthCueing ( );
    void PutEnableDepthCueing (
        VARIANT_BOOL pShow );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFrom2dGfx (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2dGfx (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_InertialPositionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_InertialPositionVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_SubPlanetPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_SubPlanetPointVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_PositionLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_PositionLabelVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_SubPlanetLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_SubPlanetLabelVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_OrbitVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_OrbitVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_EnableDepthCueing (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_EnableDepthCueing (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
};

struct __declspec(uuid("91bfeb80-0a71-4095-9e71-3967b2522ab7"))
AgPlGraphics;
    // [ default ] interface _IAgPlGraphics
    // interface IAgPlGraphics

enum AgEPlOrbitDisplayType
{
    eDisplayOneOrbit = 0,
    eOrbitDisplayTime = 1
};

struct __declspec(uuid("41709e9b-f9b4-4df6-b291-f9e965460ee6"))
IAgOrbitDisplayData : IUnknown
{};

struct __declspec(uuid("c11e1a81-fc4c-410c-bce2-03a05b375655"))
_IAgPlGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetSubPlanetLabelVisible,put=PutSubPlanetLabelVisible))
    VARIANT_BOOL SubPlanetLabelVisible;
    __declspec(property(get=GetPositionLabelVisible,put=PutPositionLabelVisible))
    VARIANT_BOOL PositionLabelVisible;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetInertialPositionVisible,put=PutInertialPositionVisible))
    VARIANT_BOOL InertialPositionVisible;
    __declspec(property(get=GetSubPlanetPointVisible,put=PutSubPlanetPointVisible))
    VARIANT_BOOL SubPlanetPointVisible;
    __declspec(property(get=GetOrbitVisible,put=PutOrbitVisible))
    VARIANT_BOOL OrbitVisible;
    __declspec(property(get=GetOrbitDisplay,put=PutOrbitDisplay))
    enum AgEPlOrbitDisplayType OrbitDisplay;
    __declspec(property(get=GetOrbitDisplayData))
    IAgOrbitDisplayDataPtr OrbitDisplayData;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pInherit );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    VARIANT_BOOL GetSubPlanetLabelVisible ( );
    void PutSubPlanetLabelVisible (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetPositionLabelVisible ( );
    void PutPositionLabelVisible (
        VARIANT_BOOL pShow );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pStyle );
    VARIANT_BOOL GetInertialPositionVisible ( );
    void PutInertialPositionVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetSubPlanetPointVisible ( );
    void PutSubPlanetPointVisible (
        VARIANT_BOOL pShow );
    VARIANT_BOOL GetOrbitVisible ( );
    void PutOrbitVisible (
        VARIANT_BOOL pShow );
    enum AgEPlOrbitDisplayType GetOrbitDisplay ( );
    void PutOrbitDisplay (
        enum AgEPlOrbitDisplayType pVal );
    IAgOrbitDisplayDataPtr GetOrbitDisplayData ( );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pLineStyle );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pLineWidth );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_SubPlanetLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SubPlanetLabelVisible (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_PositionLabelVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pStyle ) = 0;
      virtual HRESULT __stdcall get_InertialPositionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_InertialPositionVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_SubPlanetPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_SubPlanetPointVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_OrbitVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_OrbitVisible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_OrbitDisplay (
        /*[out,retval]*/ enum AgEPlOrbitDisplayType * pVal ) = 0;
      virtual HRESULT __stdcall put_OrbitDisplay (
        /*[in]*/ enum AgEPlOrbitDisplayType pVal ) = 0;
      virtual HRESULT __stdcall get_OrbitDisplayData (
        /*[out,retval]*/ struct IAgOrbitDisplayData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pLineStyle ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pLineStyle ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pLineWidth ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pLineWidth ) = 0;
};

struct __declspec(uuid("9850d6ad-d336-47b6-a719-9a9fd9107fda"))
IAgPlGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetSubPlanetLabelVisible,put=PutSubPlanetLabelVisible))
    VARIANT_BOOL SubPlanetLabelVisible;
    __declspec(property(get=GetPositionLabelVisible,put=PutPositionLabelVisible))
    VARIANT_BOOL PositionLabelVisible;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetInertialPositionVisible,put=PutInertialPositionVisible))
    VARIANT_BOOL InertialPositionVisible;
    __declspec(property(get=GetSubPlanetPointVisible,put=PutSubPlanetPointVisible))
    VARIANT_BOOL SubPlanetPointVisible;
    __declspec(property(get=GetOrbitVisible,put=PutOrbitVisible))
    VARIANT_BOOL OrbitVisible;
    __declspec(property(get=GetOrbitDisplay,put=PutOrbitDisplay))
    enum AgEPlOrbitDisplayType OrbitDisplay;
    __declspec(property(get=GetOrbitDisplayData))
    IAgOrbitDisplayDataPtr OrbitDisplayData;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pInherit );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    VARIANT_BOOL GetSubPlanetLabelVisible ( );
    void PutSubPlanetLabelVisible (
        VARIANT_BOOL pSubPlanetLabelVisible );
    VARIANT_BOOL GetPositionLabelVisible ( );
    void PutPositionLabelVisible (
        VARIANT_BOOL pPositionLabelVisible );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pStyle );
    VARIANT_BOOL GetInertialPositionVisible ( );
    void PutInertialPositionVisible (
        VARIANT_BOOL pInertialPositionVisible );
    VARIANT_BOOL GetSubPlanetPointVisible ( );
    void PutSubPlanetPointVisible (
        VARIANT_BOOL pSubPlanetPointVisible );
    VARIANT_BOOL GetOrbitVisible ( );
    void PutOrbitVisible (
        VARIANT_BOOL pOrbitVisible );
    enum AgEPlOrbitDisplayType GetOrbitDisplay ( );
    void PutOrbitDisplay (
        enum AgEPlOrbitDisplayType pVal );
    IAgOrbitDisplayDataPtr GetOrbitDisplayData ( );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pLineStyle );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pLineWidth );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_SubPlanetLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pSubPlanetLabelVisible ) = 0;
      virtual HRESULT __stdcall put_SubPlanetLabelVisible (
        /*[in]*/ VARIANT_BOOL pSubPlanetLabelVisible ) = 0;
      virtual HRESULT __stdcall get_PositionLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pPositionLabelVisible ) = 0;
      virtual HRESULT __stdcall put_PositionLabelVisible (
        /*[in]*/ VARIANT_BOOL pPositionLabelVisible ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pStyle ) = 0;
      virtual HRESULT __stdcall get_InertialPositionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pInertialPositionVisible ) = 0;
      virtual HRESULT __stdcall put_InertialPositionVisible (
        /*[in]*/ VARIANT_BOOL pInertialPositionVisible ) = 0;
      virtual HRESULT __stdcall get_SubPlanetPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pSubPlanetPointVisible ) = 0;
      virtual HRESULT __stdcall put_SubPlanetPointVisible (
        /*[in]*/ VARIANT_BOOL pSubPlanetPointVisible ) = 0;
      virtual HRESULT __stdcall get_OrbitVisible (
        /*[out,retval]*/ VARIANT_BOOL * pOrbitVisible ) = 0;
      virtual HRESULT __stdcall put_OrbitVisible (
        /*[in]*/ VARIANT_BOOL pOrbitVisible ) = 0;
      virtual HRESULT __stdcall get_OrbitDisplay (
        /*[out,retval]*/ enum AgEPlOrbitDisplayType * pVal ) = 0;
      virtual HRESULT __stdcall put_OrbitDisplay (
        /*[in]*/ enum AgEPlOrbitDisplayType pVal ) = 0;
      virtual HRESULT __stdcall get_OrbitDisplayData (
        /*[out,retval]*/ struct IAgOrbitDisplayData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pLineStyle ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pLineStyle ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pLineWidth ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pLineWidth ) = 0;
};

struct __declspec(uuid("a8656146-008c-4cc0-ac3f-09aeebb42cfa"))
AgAreaTypePattern;
    // [ default ] interface _IAgAreaTypePattern
    // interface IAgAreaTypePattern

struct __declspec(uuid("a578e56a-c9fa-45d4-a8b8-a67f3c1b92f2"))
_IAgAreaTypePattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
};

struct __declspec(uuid("6a725e1b-2835-43df-a843-22f7779ae935"))
IAgAreaTypePattern : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
};

struct __declspec(uuid("69a31901-065c-4873-820f-6cd3b3919681"))
AgAreaTypePatternCollection;
    // [ default ] interface IUnknown
    // interface IAgAreaTypeData
    // interface IAgAreaTypePatternCollection

struct __declspec(uuid("db7ce2ad-491d-412b-b2c3-6b47362ae5dc"))
IAgAreaTypeData : IUnknown
{};

struct __declspec(uuid("fc52516b-0be1-40d8-8c51-8b4d4a48333f"))
IAgAreaTypePatternCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgAreaTypePatternPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAgAreaTypePatternPtr GetItem (
        long Index );
    IAgAreaTypePatternPtr Add (
        const _variant_t & Lat,
        const _variant_t & Lon );
    HRESULT Remove (
        long ItemIndex );
    HRESULT RemoveAll ( );
    IAgAreaTypePatternPtr Insert (
        const _variant_t & Lat,
        const _variant_t & Lon,
        long Index );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgAreaTypePattern * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[out,retval]*/ struct IAgAreaTypePattern * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long ItemIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgAreaTypePattern * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("b2620f63-0316-4c47-95dc-05a847c7ec95"))
AgAreaTypeEllipse;
    // [ default ] interface _IAgAreaTypeEllipse
    // interface IAgAreaTypeData
    // interface IAgAreaTypeEllipse

struct __declspec(uuid("2ead1580-1960-4868-9d42-8af788840063"))
_IAgAreaTypeEllipse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;
    __declspec(property(get=GetSemiMinorAxis,put=PutSemiMinorAxis))
    double SemiMinorAxis;
    __declspec(property(get=GetBearing,put=PutBearing))
    _variant_t Bearing;

    //
    // Wrapper methods for error-handling
    //

    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pMajor );
    double GetSemiMinorAxis ( );
    void PutSemiMinorAxis (
        double pMinor );
    _variant_t GetBearing ( );
    void PutBearing (
        const _variant_t & pBearing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pMajor ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pMajor ) = 0;
      virtual HRESULT __stdcall get_SemiMinorAxis (
        /*[out,retval]*/ double * pMinor ) = 0;
      virtual HRESULT __stdcall put_SemiMinorAxis (
        /*[in]*/ double pMinor ) = 0;
      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ VARIANT * pBearing ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ VARIANT pBearing ) = 0;
};

struct __declspec(uuid("eca445f2-9093-4de1-a687-0c06225e2902"))
IAgAreaTypeEllipse : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;
    __declspec(property(get=GetSemiMinorAxis,put=PutSemiMinorAxis))
    double SemiMinorAxis;
    __declspec(property(get=GetBearing,put=PutBearing))
    _variant_t Bearing;

    //
    // Wrapper methods for error-handling
    //

    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pMajor );
    double GetSemiMinorAxis ( );
    void PutSemiMinorAxis (
        double pMinor );
    _variant_t GetBearing ( );
    void PutBearing (
        const _variant_t & pBearing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pMajor ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pMajor ) = 0;
      virtual HRESULT __stdcall get_SemiMinorAxis (
        /*[out,retval]*/ double * pMinor ) = 0;
      virtual HRESULT __stdcall put_SemiMinorAxis (
        /*[in]*/ double pMinor ) = 0;
      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ VARIANT * pBearing ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ VARIANT pBearing ) = 0;
};

struct __declspec(uuid("67fae376-4f9e-43c0-86b8-e0e32241bd8b"))
AgATVO;
    // [ default ] interface _IAgATVO
    // interface IAgATVO

struct __declspec(uuid("7d461fc0-8c3e-4b51-a4d5-5538f078837f"))
_IAgATVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableLabelMaxViewingDist,put=PutEnableLabelMaxViewingDist))
    VARIANT_BOOL EnableLabelMaxViewingDist;
    __declspec(property(get=GetLabelMaxViewingDist,put=PutLabelMaxViewingDist))
    double LabelMaxViewingDist;
    __declspec(property(get=GetFillInterior,put=PutFillInterior))
    VARIANT_BOOL FillInterior;
    __declspec(property(get=GetPercentTranslucencyInterior,put=PutPercentTranslucencyInterior))
    double PercentTranslucencyInterior;
    __declspec(property(get=GetBorderWall))
    IAgVOBorderWallPtr BorderWall;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetFillGranularity,put=PutFillGranularity))
    double FillGranularity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableLabelMaxViewingDist ( );
    void PutEnableLabelMaxViewingDist (
        VARIANT_BOOL pUse );
    double GetLabelMaxViewingDist ( );
    void PutLabelMaxViewingDist (
        double pLabelMaxViewingDist );
    VARIANT_BOOL GetFillInterior ( );
    void PutFillInterior (
        VARIANT_BOOL pFillInterior );
    double GetPercentTranslucencyInterior ( );
    void PutPercentTranslucencyInterior (
        double pPercTrans );
    IAgVOBorderWallPtr GetBorderWall ( );
    IAgVOVectorPtr GetVector ( );
    double GetFillGranularity ( );
    void PutFillGranularity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableLabelMaxViewingDist (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_EnableLabelMaxViewingDist (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_LabelMaxViewingDist (
        /*[out,retval]*/ double * pLabelMaxViewingDist ) = 0;
      virtual HRESULT __stdcall put_LabelMaxViewingDist (
        /*[in]*/ double pLabelMaxViewingDist ) = 0;
      virtual HRESULT __stdcall get_FillInterior (
        /*[out,retval]*/ VARIANT_BOOL * pFillInterior ) = 0;
      virtual HRESULT __stdcall put_FillInterior (
        /*[in]*/ VARIANT_BOOL pFillInterior ) = 0;
      virtual HRESULT __stdcall get_PercentTranslucencyInterior (
        /*[out,retval]*/ double * pPercTrans ) = 0;
      virtual HRESULT __stdcall put_PercentTranslucencyInterior (
        /*[in]*/ double pPercTrans ) = 0;
      virtual HRESULT __stdcall get_BorderWall (
        /*[out,retval]*/ struct IAgVOBorderWall * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVector ) = 0;
      virtual HRESULT __stdcall get_FillGranularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillGranularity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("73430bdd-ba82-4d89-b3e2-5ff85b64002d"))
IAgATVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableLabelMaxViewingDist,put=PutEnableLabelMaxViewingDist))
    VARIANT_BOOL EnableLabelMaxViewingDist;
    __declspec(property(get=GetLabelMaxViewingDist,put=PutLabelMaxViewingDist))
    double LabelMaxViewingDist;
    __declspec(property(get=GetFillInterior,put=PutFillInterior))
    VARIANT_BOOL FillInterior;
    __declspec(property(get=GetPercentTranslucencyInterior,put=PutPercentTranslucencyInterior))
    double PercentTranslucencyInterior;
    __declspec(property(get=GetBorderWall))
    IAgVOBorderWallPtr BorderWall;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetFillGranularity,put=PutFillGranularity))
    double FillGranularity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableLabelMaxViewingDist ( );
    void PutEnableLabelMaxViewingDist (
        VARIANT_BOOL pUse );
    double GetLabelMaxViewingDist ( );
    void PutLabelMaxViewingDist (
        double pLabelMaxViewingDist );
    VARIANT_BOOL GetFillInterior ( );
    void PutFillInterior (
        VARIANT_BOOL pFillInterior );
    double GetPercentTranslucencyInterior ( );
    void PutPercentTranslucencyInterior (
        double pPercTrans );
    IAgVOBorderWallPtr GetBorderWall ( );
    IAgVOVectorPtr GetVector ( );
    double GetFillGranularity ( );
    void PutFillGranularity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableLabelMaxViewingDist (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_EnableLabelMaxViewingDist (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_LabelMaxViewingDist (
        /*[out,retval]*/ double * pLabelMaxViewingDist ) = 0;
      virtual HRESULT __stdcall put_LabelMaxViewingDist (
        /*[in]*/ double pLabelMaxViewingDist ) = 0;
      virtual HRESULT __stdcall get_FillInterior (
        /*[out,retval]*/ VARIANT_BOOL * pFillInterior ) = 0;
      virtual HRESULT __stdcall put_FillInterior (
        /*[in]*/ VARIANT_BOOL pFillInterior ) = 0;
      virtual HRESULT __stdcall get_PercentTranslucencyInterior (
        /*[out,retval]*/ double * pPercTrans ) = 0;
      virtual HRESULT __stdcall put_PercentTranslucencyInterior (
        /*[in]*/ double pPercTrans ) = 0;
      virtual HRESULT __stdcall get_BorderWall (
        /*[out,retval]*/ struct IAgVOBorderWall * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVector ) = 0;
      virtual HRESULT __stdcall get_FillGranularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillGranularity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("c341404c-a76a-4d6f-a821-c6c95bbe7fc9"))
AgATGraphics;
    // [ default ] interface _IAgATGraphics
    // interface IAgATGraphics

struct __declspec(uuid("034bc7d5-5493-4386-b466-cfa05de94ed6"))
_IAgATGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetCentroidVisible,put=PutCentroidVisible))
    VARIANT_BOOL CentroidVisible;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetBoundaryPtsVisible,put=PutBoundaryPtsVisible))
    VARIANT_BOOL BoundaryPtsVisible;
    __declspec(property(get=GetBoundaryWidth,put=PutBoundaryWidth))
    long BoundaryWidth;
    __declspec(property(get=GetBoundaryFill,put=PutBoundaryFill))
    VARIANT_BOOL BoundaryFill;
    __declspec(property(get=GetBoundaryVisible,put=PutBoundaryVisible))
    VARIANT_BOOL BoundaryVisible;
    __declspec(property(get=GetBoundingRectVisible,put=PutBoundingRectVisible))
    VARIANT_BOOL BoundingRectVisible;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetBoundaryColor,put=PutBoundaryColor))
    OLE_COLOR BoundaryColor;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetCentroidColor,put=PutCentroidColor))
    OLE_COLOR CentroidColor;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pInherit );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pMarkerStyle );
    VARIANT_BOOL GetCentroidVisible ( );
    void PutCentroidVisible (
        VARIANT_BOOL pShowCentroid );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLabel );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    VARIANT_BOOL GetBoundaryPtsVisible ( );
    void PutBoundaryPtsVisible (
        VARIANT_BOOL pShowBoundaryPts );
    enum STKUtil::AgELineStyle GetBoundaryStyle ( );
    void PutBoundaryStyle (
        enum STKUtil::AgELineStyle pBoundaryStyle );
    long GetBoundaryWidth ( );
    void PutBoundaryWidth (
        long pBoundaryWidth );
    VARIANT_BOOL GetBoundaryFill ( );
    void PutBoundaryFill (
        VARIANT_BOOL pBoundaryFill );
    VARIANT_BOOL GetBoundaryVisible ( );
    void PutBoundaryVisible (
        VARIANT_BOOL pShowBoundary );
    VARIANT_BOOL GetBoundingRectVisible ( );
    void PutBoundingRectVisible (
        VARIANT_BOOL pShowBoundingRect );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    OLE_COLOR GetBoundaryColor ( );
    void PutBoundaryColor (
        OLE_COLOR pColor );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pColor );
    OLE_COLOR GetCentroidColor ( );
    void PutCentroidColor (
        OLE_COLOR pColor );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pMarkerStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pMarkerStyle ) = 0;
      virtual HRESULT __stdcall get_CentroidVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowCentroid ) = 0;
      virtual HRESULT __stdcall put_CentroidVisible (
        /*[in]*/ VARIANT_BOOL pShowCentroid ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLabel ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLabel ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_BoundaryPtsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowBoundaryPts ) = 0;
      virtual HRESULT __stdcall put_BoundaryPtsVisible (
        /*[in]*/ VARIANT_BOOL pShowBoundaryPts ) = 0;
      virtual HRESULT __stdcall get_BoundaryStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pBoundaryStyle ) = 0;
      virtual HRESULT __stdcall put_BoundaryStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pBoundaryStyle ) = 0;
      virtual HRESULT __stdcall get_BoundaryWidth (
        /*[out,retval]*/ long * pBoundaryWidth ) = 0;
      virtual HRESULT __stdcall put_BoundaryWidth (
        /*[in]*/ long pBoundaryWidth ) = 0;
      virtual HRESULT __stdcall get_BoundaryFill (
        /*[out,retval]*/ VARIANT_BOOL * pBoundaryFill ) = 0;
      virtual HRESULT __stdcall put_BoundaryFill (
        /*[in]*/ VARIANT_BOOL pBoundaryFill ) = 0;
      virtual HRESULT __stdcall get_BoundaryVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowBoundary ) = 0;
      virtual HRESULT __stdcall put_BoundaryVisible (
        /*[in]*/ VARIANT_BOOL pShowBoundary ) = 0;
      virtual HRESULT __stdcall get_BoundingRectVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowBoundingRect ) = 0;
      virtual HRESULT __stdcall put_BoundingRectVisible (
        /*[in]*/ VARIANT_BOOL pShowBoundingRect ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_BoundaryColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_CentroidColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_CentroidColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("3dde858f-d8ef-400e-981e-cc90bbe808eb"))
IAgATGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetCentroidVisible,put=PutCentroidVisible))
    VARIANT_BOOL CentroidVisible;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetBoundaryPtsVisible,put=PutBoundaryPtsVisible))
    VARIANT_BOOL BoundaryPtsVisible;
    __declspec(property(get=GetBoundaryWidth,put=PutBoundaryWidth))
    long BoundaryWidth;
    __declspec(property(get=GetBoundaryFill,put=PutBoundaryFill))
    VARIANT_BOOL BoundaryFill;
    __declspec(property(get=GetBoundaryVisible,put=PutBoundaryVisible))
    VARIANT_BOOL BoundaryVisible;
    __declspec(property(get=GetBoundingRectVisible,put=PutBoundingRectVisible))
    VARIANT_BOOL BoundingRectVisible;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetBoundaryColor,put=PutBoundaryColor))
    OLE_COLOR BoundaryColor;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetCentroidColor,put=PutCentroidColor))
    OLE_COLOR CentroidColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pInherit );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pMarkerStyle );
    VARIANT_BOOL GetCentroidVisible ( );
    void PutCentroidVisible (
        VARIANT_BOOL pShowCentroid );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLabel );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    VARIANT_BOOL GetBoundaryPtsVisible ( );
    void PutBoundaryPtsVisible (
        VARIANT_BOOL pShowBoundaryPts );
    enum STKUtil::AgELineStyle GetBoundaryStyle ( );
    void PutBoundaryStyle (
        enum STKUtil::AgELineStyle pBoundaryStyle );
    long GetBoundaryWidth ( );
    void PutBoundaryWidth (
        long pBoundaryWidth );
    VARIANT_BOOL GetBoundaryFill ( );
    void PutBoundaryFill (
        VARIANT_BOOL pBoundaryFill );
    VARIANT_BOOL GetBoundaryVisible ( );
    void PutBoundaryVisible (
        VARIANT_BOOL pShowBoundary );
    VARIANT_BOOL GetBoundingRectVisible ( );
    void PutBoundingRectVisible (
        VARIANT_BOOL pShowBoundingRect );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    OLE_COLOR GetBoundaryColor ( );
    void PutBoundaryColor (
        OLE_COLOR pColor );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pColor );
    OLE_COLOR GetCentroidColor ( );
    void PutCentroidColor (
        OLE_COLOR pColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pMarkerStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pMarkerStyle ) = 0;
      virtual HRESULT __stdcall get_CentroidVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowCentroid ) = 0;
      virtual HRESULT __stdcall put_CentroidVisible (
        /*[in]*/ VARIANT_BOOL pShowCentroid ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLabel ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLabel ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_BoundaryPtsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowBoundaryPts ) = 0;
      virtual HRESULT __stdcall put_BoundaryPtsVisible (
        /*[in]*/ VARIANT_BOOL pShowBoundaryPts ) = 0;
      virtual HRESULT __stdcall get_BoundaryStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pBoundaryStyle ) = 0;
      virtual HRESULT __stdcall put_BoundaryStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pBoundaryStyle ) = 0;
      virtual HRESULT __stdcall get_BoundaryWidth (
        /*[out,retval]*/ long * pBoundaryWidth ) = 0;
      virtual HRESULT __stdcall put_BoundaryWidth (
        /*[in]*/ long pBoundaryWidth ) = 0;
      virtual HRESULT __stdcall get_BoundaryFill (
        /*[out,retval]*/ VARIANT_BOOL * pBoundaryFill ) = 0;
      virtual HRESULT __stdcall put_BoundaryFill (
        /*[in]*/ VARIANT_BOOL pBoundaryFill ) = 0;
      virtual HRESULT __stdcall get_BoundaryVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowBoundary ) = 0;
      virtual HRESULT __stdcall put_BoundaryVisible (
        /*[in]*/ VARIANT_BOOL pShowBoundary ) = 0;
      virtual HRESULT __stdcall get_BoundingRectVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowBoundingRect ) = 0;
      virtual HRESULT __stdcall put_BoundingRectVisible (
        /*[in]*/ VARIANT_BOOL pShowBoundingRect ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_BoundaryColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_CentroidColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_CentroidColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
};

struct __declspec(uuid("af991b36-85f1-40c0-aa85-1df3701ef770"))
AgVOAzElMask;
    // [ default ] interface _IAgVOAzElMask
    // interface IAgVOAzElMask

struct __declspec(uuid("72e45e0b-f5e8-445e-ac24-ec573df93d4e"))
_IAgVOAzElMask : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCompassDirectionsVisible,put=PutCompassDirectionsVisible))
    VARIANT_BOOL CompassDirectionsVisible;
    __declspec(property(get=GetAltLabelsVisible,put=PutAltLabelsVisible))
    VARIANT_BOOL AltLabelsVisible;
    __declspec(property(get=GetNumbAltLabels,put=PutNumbAltLabels))
    long NumbAltLabels;
    __declspec(property(get=GetInteriorTranslucency,put=PutInteriorTranslucency))
    double InteriorTranslucency;
    __declspec(property(get=GetLineTranslucency,put=PutLineTranslucency))
    double LineTranslucency;
    __declspec(property(get=GetLabelSwapDistance))
    IAgVOLabelSwapDistancePtr LabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCompassDirectionsVisible ( );
    void PutCompassDirectionsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAltLabelsVisible ( );
    void PutAltLabelsVisible (
        VARIANT_BOOL pVal );
    long GetNumbAltLabels ( );
    void PutNumbAltLabels (
        long pVal );
    double GetInteriorTranslucency ( );
    void PutInteriorTranslucency (
        double pVal );
    double GetLineTranslucency ( );
    void PutLineTranslucency (
        double pVal );
    IAgVOLabelSwapDistancePtr GetLabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CompassDirectionsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CompassDirectionsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AltLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_NumbAltLabels (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumbAltLabels (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_InteriorTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InteriorTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LineTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("903e252b-0d98-4d3c-859d-f8354e5079c8"))
AgVOModelArtic;
    // [ default ] interface _IAgVOModelArtic
    // interface IAgVOModelArtic

struct __declspec(uuid("5ef45dd4-9a43-428e-bf82-b842cd38640b"))
_IAgVOModelArtic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableDefaultSave,put=PutEnableDefaultSave))
    VARIANT_BOOL EnableDefaultSave;
    __declspec(property(get=GetEnableSaveArticFile,put=PutEnableSaveArticFile))
    VARIANT_BOOL EnableSaveArticFile;
    __declspec(property(get=GetLODCount))
    long LODCount;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableDefaultSave ( );
    void PutEnableDefaultSave (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableSaveArticFile ( );
    void PutEnableSaveArticFile (
        VARIANT_BOOL pVal );
    double GetTransValue (
        long LOD,
        _bstr_t Artic,
        _bstr_t Trans );
    HRESULT SetTransValue (
        long LOD,
        _bstr_t Artic,
        _bstr_t Trans,
        double TransValue );
    SAFEARRAY * GetAvailableArticulations (
        long LOD );
    IAgVOModelTransCollectionPtr GetAvailableTransformations (
        long LOD,
        _bstr_t ArticName );
    long GetLODCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableDefaultSave (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableDefaultSave (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableSaveArticFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableSaveArticFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTransValue (
        /*[in]*/ long LOD,
        /*[in]*/ BSTR Artic,
        /*[in]*/ BSTR Trans,
        /*[out,retval]*/ double * pNum ) = 0;
      virtual HRESULT __stdcall raw_SetTransValue (
        /*[in]*/ long LOD,
        /*[in]*/ BSTR Artic,
        /*[in]*/ BSTR Trans,
        /*[in]*/ double TransValue ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableArticulations (
        /*[in]*/ long LOD,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableTransformations (
        /*[in]*/ long LOD,
        /*[in]*/ BSTR ArticName,
        /*[out,retval]*/ struct IAgVOModelTransCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LODCount (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("a43caa8f-dd6e-4870-afca-deba6f6f8a87"))
AgVOModelTransCollection;
    // [ default ] interface IUnknown
    // interface IAgVOModelTransCollection

struct __declspec(uuid("9a6eab3a-3cbb-4656-a4ef-81f09e2eddd3"))
AgVOModelTrans;
    // [ default ] interface _IAgVOModelTrans
    // interface IAgVOModelTrans

struct __declspec(uuid("3b9bb10c-76fc-4142-8cc9-435399a90890"))
_IAgVOModelTrans : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetMin))
    double Min;
    __declspec(property(get=GetMax))
    double Max;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    double GetValue ( );
    void PutValue (
        double pVal );
    double GetMin ( );
    double GetMax ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("2f832ed4-68c2-478b-ba80-05f918d8b801"))
AgVOModelFile;
    // [ default ] interface _IAgVOModelFile
    // interface IAgVOModelData
    // interface IAgVOModelFile

struct __declspec(uuid("fc9be036-1582-4bc9-ab24-0b60b0ab010f"))
_IAgVOModelFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("857f0ff7-16be-4e75-b364-9eefe7b10425"))
IAgVOModelFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("07a191b4-a4d6-4c19-a4d9-d0e458869af3"))
AgPlPosFile;
    // [ default ] interface _IAgPlPosFile
    // interface IAgPositionSourceData
    // interface IAgPlPosFile

struct __declspec(uuid("bc42fdb6-19e3-4cc5-b644-05e74aec4fe5"))
_IAgPlPosFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("95977602-5d8e-44e5-9d62-38e9e6ebd4ea"))
IAgPositionSourceData : IUnknown
{};

struct __declspec(uuid("7831e783-0e7f-41a1-ba00-c215ed52fac2"))
IAgPlPosFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("ad0598bd-5582-4bbb-904a-89c9d90cff83"))
AgPlPosCentralBody;
    // [ default ] interface _IAgPlPosCentralBody
    // interface IAgPositionSourceData
    // interface IAgPlPosCentralBody

enum AgEEphemSourceType
{
    eEphemAnalytic = 0,
    eEphemDE405 = 1,
    eEphemDefault = 2,
    eEphemSpice = 3,
    eEphemJPLDE = 4
};

struct __declspec(uuid("5c3e425d-b767-4a0d-8b1d-4e4d82469b68"))
_IAgPlPosCentralBody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetAutoRename,put=PutAutoRename))
    VARIANT_BOOL AutoRename;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetEphemSource,put=PutEphemSource))
    enum AgEEphemSourceType EphemSource;
    __declspec(property(get=GetAvailableCentralBodies))
    SAFEARRAY * AvailableCentralBodies;
    __declspec(property(get=GetAvailableEphemSourceTypes))
    SAFEARRAY * AvailableEphemSourceTypes;
    __declspec(property(get=GetJPLDEVersion))
    _bstr_t JPLDEVersion;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pVal );
    VARIANT_BOOL GetAutoRename ( );
    void PutAutoRename (
        VARIANT_BOOL pVal );
    double GetRadius ( );
    enum AgEEphemSourceType GetEphemSource ( );
    void PutEphemSource (
        enum AgEEphemSourceType pVal );
    SAFEARRAY * GetAvailableCentralBodies ( );
    SAFEARRAY * GetAvailableEphemSourceTypes ( );
    _bstr_t GetJPLDEVersion ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AutoRename (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRename (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EphemSource (
        /*[out,retval]*/ enum AgEEphemSourceType * pVal ) = 0;
      virtual HRESULT __stdcall put_EphemSource (
        /*[in]*/ enum AgEEphemSourceType pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableEphemSourceTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_JPLDEVersion (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("f9f792f7-0884-45bc-bb5a-5fca26fee3df"))
IAgPlPosCentralBody : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetAutoRename,put=PutAutoRename))
    VARIANT_BOOL AutoRename;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetEphemSource,put=PutEphemSource))
    enum AgEEphemSourceType EphemSource;
    __declspec(property(get=GetAvailableCentralBodies))
    SAFEARRAY * AvailableCentralBodies;
    __declspec(property(get=GetAvailableEphemSourceTypes))
    SAFEARRAY * AvailableEphemSourceTypes;
    __declspec(property(get=GetJPLDEVersion))
    _bstr_t JPLDEVersion;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pVal );
    VARIANT_BOOL GetAutoRename ( );
    void PutAutoRename (
        VARIANT_BOOL pVal );
    double GetRadius ( );
    enum AgEEphemSourceType GetEphemSource ( );
    void PutEphemSource (
        enum AgEEphemSourceType pVal );
    SAFEARRAY * GetAvailableCentralBodies ( );
    SAFEARRAY * GetAvailableEphemSourceTypes ( );
    _bstr_t GetJPLDEVersion ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AutoRename (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRename (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EphemSource (
        /*[out,retval]*/ enum AgEEphemSourceType * pVal ) = 0;
      virtual HRESULT __stdcall put_EphemSource (
        /*[in]*/ enum AgEEphemSourceType pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableEphemSourceTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_JPLDEVersion (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("77eab437-d298-4478-9e08-008552620784"))
AgPlOrbitDisplayTime;
    // [ default ] interface _IAgPlOrbitDisplayTime
    // interface IAgOrbitDisplayData
    // interface IAgPlOrbitDisplayTime

struct __declspec(uuid("86d09d70-f553-424f-9650-d2a22d5a50e1"))
_IAgPlOrbitDisplayTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    double Time;

    //
    // Wrapper methods for error-handling
    //

    double GetTime ( );
    void PutTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("179c31b6-3991-490d-90e9-5f54881c9ff3"))
IAgPlOrbitDisplayTime : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    double Time;

    //
    // Wrapper methods for error-handling
    //

    double GetTime ( );
    void PutTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d2b336a7-fbec-4678-aee0-558e5f43e0a8"))
AgScenario;
    // [ default ] interface _IAgScenario
    // interface IAgScenario
    // interface IAgStkObject
    // interface IAgLifetimeInformation

enum AgEScEndLoopType
{
    eEndTime = 0,
    eLoopAtTime = 1
};

enum AgEScRefreshDeltaType
{
    eHighSpeed = 0,
    eRefreshDelta = 1
};

enum AgEScTimeStepType
{
    eScRealTime = 0,
    eScTimeStep = 1,
    eScXRealTime = 2
};

enum AgETimePeriodValueType
{
    eTimePeriodNow = 0,
    eTimePeriodToday = 1,
    eTimePeriodTomorrow = 2,
    eTimePeriodSpecify = 3,
    eTimePeriodDuration = 4
};

struct __declspec(uuid("00435d0c-66b5-42c2-8b90-61a4060690db"))
IAgTimePeriodValue : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetType,put=PutType))
    enum AgETimePeriodValueType Type;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pRetVal );
    enum AgETimePeriodValueType GetType ( );
    void PutType (
        enum AgETimePeriodValueType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgETimePeriodValueType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum AgETimePeriodValueType pRetVal ) = 0;
};

struct __declspec(uuid("61aae8c4-8f7a-41e5-bd65-5a1cb96c35f8"))
IAgScAnimationTimePeriod : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    IAgTimePeriodValuePtr StartTime;
    __declspec(property(get=GetStopTime))
    IAgTimePeriodValuePtr StopTime;
    __declspec(property(get=GetDuration,put=PutDuration))
    _variant_t Duration;
    __declspec(property(get=GetUseAnalysisStartTime,put=PutUseAnalysisStartTime))
    VARIANT_BOOL UseAnalysisStartTime;
    __declspec(property(get=GetUseAnalysisStopTime,put=PutUseAnalysisStopTime))
    VARIANT_BOOL UseAnalysisStopTime;

    //
    // Wrapper methods for error-handling
    //

    IAgTimePeriodValuePtr GetStartTime ( );
    IAgTimePeriodValuePtr GetStopTime ( );
    _variant_t GetDuration ( );
    void PutDuration (
        const _variant_t & pRetVal );
    VARIANT_BOOL GetUseAnalysisStartTime ( );
    void PutUseAnalysisStartTime (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseAnalysisStopTime ( );
    void PutUseAnalysisStopTime (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ struct IAgTimePeriodValue * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ struct IAgTimePeriodValue * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAnalysisStartTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseAnalysisStartTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseAnalysisStopTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseAnalysisStopTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("909db3cc-4cf2-4ac4-b621-8f6259d70967"))
IAgScAnimation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetEnableAnimCycleTime,put=PutEnableAnimCycleTime))
    VARIANT_BOOL EnableAnimCycleTime;
    __declspec(property(get=GetAnimCycleTime,put=PutAnimCycleTime))
    _variant_t AnimCycleTime;
    __declspec(property(get=GetAnimStepValue,put=PutAnimStepValue))
    double AnimStepValue;
    __declspec(property(get=GetRefreshDelta,put=PutRefreshDelta))
    double RefreshDelta;
    __declspec(property(get=GetAnimCycleType,put=PutAnimCycleType))
    enum AgEScEndLoopType AnimCycleType;
    __declspec(property(get=GetRefreshDeltaType,put=PutRefreshDeltaType))
    enum AgEScRefreshDeltaType RefreshDeltaType;
    __declspec(property(get=GetAnimStepType,put=PutAnimStepType))
    enum AgEScTimeStepType AnimStepType;
    __declspec(property(get=GetContinueXRealtimeFromPause,put=PutContinueXRealtimeFromPause))
    VARIANT_BOOL ContinueXRealtimeFromPause;
    __declspec(property(get=GetTimePeriod))
    IAgScAnimationTimePeriodPtr TimePeriod;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    VARIANT_BOOL GetEnableAnimCycleTime ( );
    void PutEnableAnimCycleTime (
        VARIANT_BOOL pVal );
    _variant_t GetAnimCycleTime ( );
    void PutAnimCycleTime (
        const _variant_t & pVal );
    double GetAnimStepValue ( );
    void PutAnimStepValue (
        double pVal );
    double GetRefreshDelta ( );
    void PutRefreshDelta (
        double pVal );
    enum AgEScEndLoopType GetAnimCycleType ( );
    void PutAnimCycleType (
        enum AgEScEndLoopType pVal );
    enum AgEScRefreshDeltaType GetRefreshDeltaType ( );
    void PutRefreshDeltaType (
        enum AgEScRefreshDeltaType pVal );
    enum AgEScTimeStepType GetAnimStepType ( );
    void PutAnimStepType (
        enum AgEScTimeStepType pVal );
    VARIANT_BOOL GetContinueXRealtimeFromPause ( );
    void PutContinueXRealtimeFromPause (
        VARIANT_BOOL pVal );
    IAgScAnimationTimePeriodPtr GetTimePeriod ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_EnableAnimCycleTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAnimCycleTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AnimCycleTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimCycleTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AnimStepValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimStepValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RefreshDelta (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefreshDelta (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AnimCycleType (
        /*[out,retval]*/ enum AgEScEndLoopType * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimCycleType (
        /*[in]*/ enum AgEScEndLoopType pVal ) = 0;
      virtual HRESULT __stdcall get_RefreshDeltaType (
        /*[out,retval]*/ enum AgEScRefreshDeltaType * pVal ) = 0;
      virtual HRESULT __stdcall put_RefreshDeltaType (
        /*[in]*/ enum AgEScRefreshDeltaType pVal ) = 0;
      virtual HRESULT __stdcall get_AnimStepType (
        /*[out,retval]*/ enum AgEScTimeStepType * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimStepType (
        /*[in]*/ enum AgEScTimeStepType pVal ) = 0;
      virtual HRESULT __stdcall get_ContinueXRealtimeFromPause (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ContinueXRealtimeFromPause (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgScAnimationTimePeriod * * ppRetVal ) = 0;
};

struct __declspec(uuid("b3d4b0b5-ed59-45e6-88ff-74fc6354443d"))
IAgScEarthData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEOPFilename,put=PutEOPFilename))
    _bstr_t EOPFilename;
    __declspec(property(get=GetEOPStartTime))
    _variant_t EOPStartTime;
    __declspec(property(get=GetEOPStopTime))
    _variant_t EOPStopTime;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEOPFilename ( );
    void PutEOPFilename (
        _bstr_t pVal );
    _variant_t GetEOPStartTime ( );
    _variant_t GetEOPStopTime ( );
    HRESULT ReloadEOP ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EOPFilename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EOPFilename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EOPStartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_EOPStopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_ReloadEOP ( ) = 0;
};

enum AgETextOutlineStyle
{
    eTextOutlineStyleUnknown = -1,
    eTextOutlineStyleNone = 0,
    eTextOutlineStyleThick = 1,
    eTextOutlineStyleThin = 2
};

struct __declspec(uuid("63e4fe9a-cfb2-4c18-b0f7-937104f14402"))
IAgScGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelsVisible,put=PutLabelsVisible))
    VARIANT_BOOL LabelsVisible;
    __declspec(property(get=GetAllowAnimUpdate,put=PutAllowAnimUpdate))
    VARIANT_BOOL AllowAnimUpdate;
    __declspec(property(get=GetSensorsVisible,put=PutSensorsVisible))
    VARIANT_BOOL SensorsVisible;
    __declspec(property(get=GetTextOutlineStyle,put=PutTextOutlineStyle))
    enum AgETextOutlineStyle TextOutlineStyle;
    __declspec(property(get=GetAccessLinesVisible,put=PutAccessLinesVisible))
    VARIANT_BOOL AccessLinesVisible;
    __declspec(property(get=GetTextOutlineColor,put=PutTextOutlineColor))
    OLE_COLOR TextOutlineColor;
    __declspec(property(get=GetAccessAnimHigh,put=PutAccessAnimHigh))
    VARIANT_BOOL AccessAnimHigh;
    __declspec(property(get=GetAccessStatHigh,put=PutAccessStatHigh))
    VARIANT_BOOL AccessStatHigh;
    __declspec(property(get=GetGndTracksVisible,put=PutGndTracksVisible))
    VARIANT_BOOL GndTracksVisible;
    __declspec(property(get=GetGndMarkersVisible,put=PutGndMarkersVisible))
    VARIANT_BOOL GndMarkersVisible;
    __declspec(property(get=GetOrbitsVisible,put=PutOrbitsVisible))
    VARIANT_BOOL OrbitsVisible;
    __declspec(property(get=GetOrbitMarkersVisible,put=PutOrbitMarkersVisible))
    VARIANT_BOOL OrbitMarkersVisible;
    __declspec(property(get=GetElsetNumVisible,put=PutElsetNumVisible))
    VARIANT_BOOL ElsetNumVisible;
    __declspec(property(get=GetCentroidsVisible,put=PutCentroidsVisible))
    VARIANT_BOOL CentroidsVisible;
    __declspec(property(get=GetPlanetOrbitsVisible,put=PutPlanetOrbitsVisible))
    VARIANT_BOOL PlanetOrbitsVisible;
    __declspec(property(get=GetInertialPosVisible,put=PutInertialPosVisible))
    VARIANT_BOOL InertialPosVisible;
    __declspec(property(get=GetInertialPosLabelsVisible,put=PutInertialPosLabelsVisible))
    VARIANT_BOOL InertialPosLabelsVisible;
    __declspec(property(get=GetSubPlanetPointsVisible,put=PutSubPlanetPointsVisible))
    VARIANT_BOOL SubPlanetPointsVisible;
    __declspec(property(get=GetSubPlanetLabelsVisible,put=PutSubPlanetLabelsVisible))
    VARIANT_BOOL SubPlanetLabelsVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLabelsVisible ( );
    void PutLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSensorsVisible ( );
    void PutSensorsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAccessLinesVisible ( );
    void PutAccessLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAccessAnimHigh ( );
    void PutAccessAnimHigh (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAccessStatHigh ( );
    void PutAccessStatHigh (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGndTracksVisible ( );
    void PutGndTracksVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGndMarkersVisible ( );
    void PutGndMarkersVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOrbitsVisible ( );
    void PutOrbitsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOrbitMarkersVisible ( );
    void PutOrbitMarkersVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetElsetNumVisible ( );
    void PutElsetNumVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCentroidsVisible ( );
    void PutCentroidsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPlanetOrbitsVisible ( );
    void PutPlanetOrbitsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInertialPosVisible ( );
    void PutInertialPosVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInertialPosLabelsVisible ( );
    void PutInertialPosLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSubPlanetPointsVisible ( );
    void PutSubPlanetPointsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSubPlanetLabelsVisible ( );
    void PutSubPlanetLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllowAnimUpdate ( );
    void PutAllowAnimUpdate (
        VARIANT_BOOL pVal );
    enum AgETextOutlineStyle GetTextOutlineStyle ( );
    void PutTextOutlineStyle (
        enum AgETextOutlineStyle pVal );
    OLE_COLOR GetTextOutlineColor ( );
    void PutTextOutlineColor (
        OLE_COLOR pVal );
    HRESULT ShowObject (
        _bstr_t TruncPath,
        _bstr_t WindowID );
    HRESULT ShowObjects (
        SAFEARRAY * * TruncObjectPaths,
        _bstr_t WindowIdOrTitle );
    HRESULT HideObject (
        _bstr_t TruncPath,
        _bstr_t WindowID );
    HRESULT HideObjects (
        SAFEARRAY * * TruncObjectPaths,
        _bstr_t WindowIdOrTitle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SensorsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SensorsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AccessLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessAnimHigh (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AccessAnimHigh (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessStatHigh (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AccessStatHigh (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GndTracksVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GndTracksVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GndMarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GndMarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OrbitsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OrbitsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OrbitMarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OrbitMarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ElsetNumVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ElsetNumVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CentroidsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CentroidsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PlanetOrbitsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanetOrbitsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InertialPosVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InertialPosVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InertialPosLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InertialPosLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SubPlanetPointsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPlanetPointsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SubPlanetLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPlanetLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllowAnimUpdate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowAnimUpdate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextOutlineStyle (
        /*[out,retval]*/ enum AgETextOutlineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOutlineStyle (
        /*[in]*/ enum AgETextOutlineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_TextOutlineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOutlineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall raw_ShowObject (
        /*[in]*/ BSTR TruncPath,
        /*[in]*/ BSTR WindowID ) = 0;
      virtual HRESULT __stdcall raw_ShowObjects (
        /*[in]*/ SAFEARRAY * * TruncObjectPaths,
        /*[in]*/ BSTR WindowIdOrTitle ) = 0;
      virtual HRESULT __stdcall raw_HideObject (
        /*[in]*/ BSTR TruncPath,
        /*[in]*/ BSTR WindowID ) = 0;
      virtual HRESULT __stdcall raw_HideObjects (
        /*[in]*/ SAFEARRAY * * TruncObjectPaths,
        /*[in]*/ BSTR WindowIdOrTitle ) = 0;
};

enum AgETerrainFileType
{
    eUSGSDEM = 0,
    eGTOPO30 = 1,
    eNIMANGATerrainDir = 2,
    eMOLATerrain = 3,
    eMOLATerrainSTK = 4,
    eGEODASGridData = 5,
    eMUSERasterFile = 6,
    eNIMANGADTEDLevel0 = 7,
    eNIMANGADTEDLevel1 = 8,
    eNIMANGADTEDLevel2 = 9,
    eNIMANGADTEDLevel3 = 10,
    eNIMANGADTEDLevel4 = 11,
    eNIMANGADTEDLevel5 = 12,
    eArcInfoBinGridFile = 13,
    eArcInfoBinGridMSLFile = 14,
    ePDTTTerrainFile = 15,
    eAGIWorldTerrain = 16,
    eTIFFMSLTerrainFile = 17,
    eTIFFTerrainFile = 18,
    eArcInfoGridDepthMSLFile = 19
};

struct __declspec(uuid("ae8fe356-4977-4ca3-9b0a-3b9d03c1e72f"))
IAgTerrain : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLocation,put=PutLocation))
    _bstr_t Location;
    __declspec(property(get=GetFileType))
    enum AgETerrainFileType FileType;
    __declspec(property(get=GetSWLatitude))
    _variant_t SWLatitude;
    __declspec(property(get=GetSWLongitude))
    _variant_t SWLongitude;
    __declspec(property(get=GetNELatitude))
    _variant_t NELatitude;
    __declspec(property(get=GetNELongitude))
    _variant_t NELongitude;
    __declspec(property(get=GetResolution))
    _variant_t Resolution;
    __declspec(property(get=GetUseTerrain,put=PutUseTerrain))
    VARIANT_BOOL UseTerrain;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLocation ( );
    void PutLocation (
        _bstr_t pVal );
    enum AgETerrainFileType GetFileType ( );
    _variant_t GetSWLatitude ( );
    _variant_t GetSWLongitude ( );
    _variant_t GetNELatitude ( );
    _variant_t GetNELongitude ( );
    _variant_t GetResolution ( );
    VARIANT_BOOL GetUseTerrain ( );
    void PutUseTerrain (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FileType (
        /*[out,retval]*/ enum AgETerrainFileType * pVal ) = 0;
      virtual HRESULT __stdcall get_SWLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_SWLongitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_NELatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_NELongitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_UseTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTerrain (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("09c8c395-4b6b-4664-b338-1f238d154405"))
IAgTerrainCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgTerrainPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAgTerrainPtr GetItem (
        long Index );
    IAgTerrainPtr Add (
        _bstr_t Location,
        enum AgETerrainFileType TerrainFileType );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgTerrain * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Location,
        /*[in]*/ enum AgETerrainFileType TerrainFileType,
        /*[out,retval]*/ struct IAgTerrain * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
};

struct __declspec(uuid("98844d68-b251-4f0b-838a-c5370ad5402e"))
IAgScGenDb : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetDefaultDb,put=PutDefaultDb))
    _bstr_t DefaultDb;
    __declspec(property(get=GetDefaultDir,put=PutDefaultDir))
    _bstr_t DefaultDir;
    __declspec(property(get=GetEnableAuxDb,put=PutEnableAuxDb))
    VARIANT_BOOL EnableAuxDb;
    __declspec(property(get=GetAuxDb,put=PutAuxDb))
    _bstr_t AuxDb;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    _bstr_t GetDefaultDb ( );
    void PutDefaultDb (
        _bstr_t pVal );
    _bstr_t GetDefaultDir ( );
    void PutDefaultDir (
        _bstr_t pVal );
    VARIANT_BOOL GetEnableAuxDb ( );
    void PutEnableAuxDb (
        VARIANT_BOOL pVal );
    _bstr_t GetAuxDb ( );
    void PutAuxDb (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultDb (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultDb (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultDir (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultDir (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EnableAuxDb (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAuxDb (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AuxDb (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AuxDb (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f42b2818-692a-49b1-a62e-3117e3efdf71"))
IAgScGenDbCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgScGenDbPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAgScGenDbPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgScGenDb * * pVal ) = 0;
};

struct __declspec(uuid("308ce523-824e-4452-a3fe-50b71ae7eda3"))
IAgScGlobeServerConfigData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPort,put=PutPort))
    long Port;
    __declspec(property(get=GetUsername,put=PutUsername))
    _bstr_t Username;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    long GetPort ( );
    void PutPort (
        long pVal );
    _bstr_t GetUsername ( );
    void PutUsername (
        _bstr_t pVal );
    HRESULT SetPassword (
        _bstr_t Password );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Port (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Username (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Username (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ BSTR Password ) = 0;
};

struct __declspec(uuid("ad15b083-3a7e-4fae-8f6d-fef90fb416d6"))
IAgScGlobeServersCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgScGlobeServerConfigDataPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgScGlobeServerConfigDataPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IAgScGlobeServerConfigDataPtr Add (
        _bstr_t ServerName,
        long Port );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgScGlobeServerConfigData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR ServerName,
        /*[in]*/ long Port,
        /*[out,retval]*/ struct IAgScGlobeServerConfigData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
};

enum AgESc3dPtSize
{
    eSc3dFontSize8 = 8,
    eSc3dFontSize9 = 9,
    eSc3dFontSize10 = 10,
    eSc3dFontSize11 = 11,
    eSc3dFontSize12 = 12,
    eSc3dFontSize14 = 14,
    eSc3dFontSize16 = 16,
    eSc3dFontSize18 = 18,
    eSc3dFontSize20 = 20,
    eSc3dFontSize22 = 22,
    eSc3dFontSize24 = 24,
    eSc3dFontSize26 = 26,
    eSc3dFontSize28 = 28,
    eSc3dFontSize36 = 36,
    eSc3dFontSize48 = 48,
    eSc3dFontSize72 = 72
};

struct __declspec(uuid("c6fa4072-784c-44f2-92dd-58b667cea049"))
IAgSc3dFont : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPtSize,put=PutPtSize))
    enum AgESc3dPtSize PtSize;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetAvailableFonts))
    SAFEARRAY * AvailableFonts;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    enum AgESc3dPtSize GetPtSize ( );
    void PutPtSize (
        enum AgESc3dPtSize pVal );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetAvailableFonts ( );
    VARIANT_BOOL IsFontAvailable (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PtSize (
        /*[out,retval]*/ enum AgESc3dPtSize * pVal ) = 0;
      virtual HRESULT __stdcall put_PtSize (
        /*[in]*/ enum AgESc3dPtSize pVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableFonts (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsFontAvailable (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgESurfaceReference
{
    eWGS84Ellipsoid = 0,
    eMeanSeaLevel = 1
};

struct __declspec(uuid("e1b22d12-2077-419a-a309-ca0533c54131"))
IAgScVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRenderNewVOWindow,put=PutRenderNewVOWindow))
    VARIANT_BOOL RenderNewVOWindow;
    __declspec(property(get=GetROAMImageCacheSize,put=PutROAMImageCacheSize))
    long ROAMImageCacheSize;
    __declspec(property(get=GetChunkImageCacheSize,put=PutChunkImageCacheSize))
    long ChunkImageCacheSize;
    __declspec(property(get=GetUseTerrainWithDragDrop,put=PutUseTerrainWithDragDrop))
    VARIANT_BOOL UseTerrainWithDragDrop;
    __declspec(property(get=GetIsNegativeAltitudeAllowed,put=PutIsNegativeAltitudeAllowed))
    VARIANT_BOOL IsNegativeAltitudeAllowed;
    __declspec(property(get=GetEnableGlobeServerAccess,put=PutEnableGlobeServerAccess))
    VARIANT_BOOL EnableGlobeServerAccess;
    __declspec(property(get=GetGlobeServers))
    IAgScGlobeServersCollectionPtr GlobeServers;
    __declspec(property(get=GetSmallFont))
    IAgSc3dFontPtr SmallFont;
    __declspec(property(get=GetMediumFont))
    IAgSc3dFontPtr MediumFont;
    __declspec(property(get=GetLargeFont))
    IAgSc3dFontPtr LargeFont;
    __declspec(property(get=GetSurfaceReference,put=PutSurfaceReference))
    enum AgESurfaceReference SurfaceReference;
    __declspec(property(get=GetDrawOnTerrain,put=PutDrawOnTerrain))
    VARIANT_BOOL DrawOnTerrain;
    __declspec(property(get=GetChunkTerrainCacheSize,put=PutChunkTerrainCacheSize))
    long ChunkTerrainCacheSize;
    __declspec(property(get=GetTextOutlineStyle,put=PutTextOutlineStyle))
    enum AgETextOutlineStyle TextOutlineStyle;
    __declspec(property(get=GetTextOutlineColor,put=PutTextOutlineColor))
    OLE_COLOR TextOutlineColor;
    __declspec(property(get=GetTextAntialiasingEnabled,put=PutTextAntialiasingEnabled))
    VARIANT_BOOL TextAntialiasingEnabled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetRenderNewVOWindow ( );
    void PutRenderNewVOWindow (
        VARIANT_BOOL pVal );
    long GetROAMImageCacheSize ( );
    void PutROAMImageCacheSize (
        long pVal );
    long GetChunkImageCacheSize ( );
    void PutChunkImageCacheSize (
        long pVal );
    VARIANT_BOOL GetUseTerrainWithDragDrop ( );
    void PutUseTerrainWithDragDrop (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsNegativeAltitudeAllowed ( );
    void PutIsNegativeAltitudeAllowed (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableGlobeServerAccess ( );
    void PutEnableGlobeServerAccess (
        VARIANT_BOOL pVal );
    IAgScGlobeServersCollectionPtr GetGlobeServers ( );
    HRESULT ReloadGlobeServerConfigData ( );
    IAgSc3dFontPtr GetSmallFont ( );
    IAgSc3dFontPtr GetMediumFont ( );
    IAgSc3dFontPtr GetLargeFont ( );
    enum AgESurfaceReference GetSurfaceReference ( );
    void PutSurfaceReference (
        enum AgESurfaceReference pVal );
    VARIANT_BOOL GetDrawOnTerrain ( );
    void PutDrawOnTerrain (
        VARIANT_BOOL pVal );
    long GetChunkTerrainCacheSize ( );
    void PutChunkTerrainCacheSize (
        long pVal );
    enum AgETextOutlineStyle GetTextOutlineStyle ( );
    void PutTextOutlineStyle (
        enum AgETextOutlineStyle pVal );
    OLE_COLOR GetTextOutlineColor ( );
    void PutTextOutlineColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetTextAntialiasingEnabled ( );
    void PutTextAntialiasingEnabled (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RenderNewVOWindow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RenderNewVOWindow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ROAMImageCacheSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ROAMImageCacheSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ChunkImageCacheSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChunkImageCacheSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UseTerrainWithDragDrop (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTerrainWithDragDrop (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsNegativeAltitudeAllowed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsNegativeAltitudeAllowed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableGlobeServerAccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableGlobeServerAccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GlobeServers (
        /*[out,retval]*/ struct IAgScGlobeServersCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ReloadGlobeServerConfigData ( ) = 0;
      virtual HRESULT __stdcall get_SmallFont (
        /*[out,retval]*/ struct IAgSc3dFont * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MediumFont (
        /*[out,retval]*/ struct IAgSc3dFont * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LargeFont (
        /*[out,retval]*/ struct IAgSc3dFont * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceReference (
        /*[out,retval]*/ enum AgESurfaceReference * pVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceReference (
        /*[in]*/ enum AgESurfaceReference pVal ) = 0;
      virtual HRESULT __stdcall get_DrawOnTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawOnTerrain (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ChunkTerrainCacheSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChunkTerrainCacheSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TextOutlineStyle (
        /*[out,retval]*/ enum AgETextOutlineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOutlineStyle (
        /*[in]*/ enum AgETextOutlineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_TextOutlineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOutlineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TextAntialiasingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAntialiasingEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

enum AgEAcWGS84WarningType
{
    eAlways = 0,
    eOnlyOnce = 1,
    eNever = 2
};

struct __declspec(uuid("74b1f5cc-508a-45db-af7d-e5ef35fcd62a"))
IAgCentralBodyTerrainCollectionElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetTerrainCollection))
    IAgTerrainCollectionPtr TerrainCollection;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    IAgTerrainCollectionPtr GetTerrainCollection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TerrainCollection (
        /*[out,retval]*/ struct IAgTerrainCollection * * ppVal ) = 0;
};

struct __declspec(uuid("5647c4ac-3ac5-475e-96f7-dc1b4a4d31f5"))
IAgCentralBodyTerrainCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCentralBodyTerrainCollectionElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTotalCacheSize,put=PutTotalCacheSize))
    long TotalCacheSize;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCentralBodyTerrainCollectionElementPtr GetItem (
        const _variant_t & vtIndex );
    IUnknownPtr Get_NewEnum ( );
    long GetTotalCacheSize ( );
    void PutTotalCacheSize (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT vtIndex,
        /*[out,retval]*/ struct IAgCentralBodyTerrainCollectionElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalCacheSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TotalCacheSize (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("4ef1949e-82ae-42c8-8349-22ec82a17cd9"))
IAgTimePeriod : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    IAgTimePeriodValuePtr StartTime;
    __declspec(property(get=GetStopTime))
    IAgTimePeriodValuePtr StopTime;
    __declspec(property(get=GetDuration,put=PutDuration))
    _variant_t Duration;

    //
    // Wrapper methods for error-handling
    //

    IAgTimePeriodValuePtr GetStartTime ( );
    IAgTimePeriodValuePtr GetStopTime ( );
    _variant_t GetDuration ( );
    void PutDuration (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ struct IAgTimePeriodValue * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ struct IAgTimePeriodValue * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

enum AgESpEnvCrresProtonActivity
{
    eSpEnvCrresProtonActivityUnknown = -1,
    eSpEnvCrresProtonActivityActive = 0,
    eSpEnvCrresProtonActivityQuiet = 1
};

enum AgESpEnvCrresRadiationActivity
{
    eSpEnvCrresRadiationUnknown = -1,
    eSpEnvCrresRadiationActivityActive = 0,
    eSpEnvCrresRadiationActivityAverage = 1,
    eSpEnvCrresRadiationActivityQuiet = 2
};

struct __declspec(uuid("3f65b0b7-abd2-4b45-9abf-3a73a4d1273c"))
IAgSpEnvRadEnergyMethodSpecify : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetElectronEnergies))
    STKUtil::IAgDoublesCollectionPtr ElectronEnergies;
    __declspec(property(get=GetProtonEnergies))
    STKUtil::IAgDoublesCollectionPtr ProtonEnergies;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDoublesCollectionPtr GetElectronEnergies ( );
    STKUtil::IAgDoublesCollectionPtr GetProtonEnergies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ElectronEnergies (
        /*[out,retval]*/ struct STKUtil::IAgDoublesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ProtonEnergies (
        /*[out,retval]*/ struct STKUtil::IAgDoublesCollection * * ppVal ) = 0;
};

struct __declspec(uuid("eaf12d23-e447-4edf-8c01-2551e844455a"))
IAgSpEnvRadEnergyValues : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseDefault,put=PutUseDefault))
    VARIANT_BOOL UseDefault;
    __declspec(property(get=GetCustom))
    IAgSpEnvRadEnergyMethodSpecifyPtr Custom;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseDefault ( );
    void PutUseDefault (
        VARIANT_BOOL pVal );
    IAgSpEnvRadEnergyMethodSpecifyPtr GetCustom ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseDefault (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseDefault (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[out,retval]*/ struct IAgSpEnvRadEnergyMethodSpecify * * ppRetVal ) = 0;
};

enum AgESpEnvNasaModelsActivity
{
    eSpEnvNasaModelsActivityUnknown = -1,
    eSpEnvNasaModelsActivitySolarMin = 0,
    eSpEnvNasaModelsActivitySolarMax = 1
};

struct __declspec(uuid("012e725b-02d4-45bf-80df-a06191b48c69"))
IAgSpEnvRadiationEnvironment : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCrresProtonActivity,put=PutCrresProtonActivity))
    enum AgESpEnvCrresProtonActivity CrresProtonActivity;
    __declspec(property(get=GetCrresRadiationActivity,put=PutCrresRadiationActivity))
    enum AgESpEnvCrresRadiationActivity CrresRadiationActivity;
    __declspec(property(get=GetNasaEnergyValues))
    IAgSpEnvRadEnergyValuesPtr NasaEnergyValues;
    __declspec(property(get=GetNasaModelsActivity,put=PutNasaModelsActivity))
    enum AgESpEnvNasaModelsActivity NasaModelsActivity;

    //
    // Wrapper methods for error-handling
    //

    enum AgESpEnvCrresProtonActivity GetCrresProtonActivity ( );
    void PutCrresProtonActivity (
        enum AgESpEnvCrresProtonActivity pVal );
    enum AgESpEnvCrresRadiationActivity GetCrresRadiationActivity ( );
    void PutCrresRadiationActivity (
        enum AgESpEnvCrresRadiationActivity pVal );
    IAgSpEnvRadEnergyValuesPtr GetNasaEnergyValues ( );
    SAFEARRAY * GetCrresElectronEnergies ( );
    SAFEARRAY * GetCrresProtonEnergies ( );
    SAFEARRAY * GetNasaElectronEnergies ( );
    SAFEARRAY * GetNasaProtonEnergies ( );
    enum AgESpEnvNasaModelsActivity GetNasaModelsActivity ( );
    void PutNasaModelsActivity (
        enum AgESpEnvNasaModelsActivity pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CrresProtonActivity (
        /*[out,retval]*/ enum AgESpEnvCrresProtonActivity * pVal ) = 0;
      virtual HRESULT __stdcall put_CrresProtonActivity (
        /*[in]*/ enum AgESpEnvCrresProtonActivity pVal ) = 0;
      virtual HRESULT __stdcall get_CrresRadiationActivity (
        /*[out,retval]*/ enum AgESpEnvCrresRadiationActivity * pVal ) = 0;
      virtual HRESULT __stdcall put_CrresRadiationActivity (
        /*[in]*/ enum AgESpEnvCrresRadiationActivity pVal ) = 0;
      virtual HRESULT __stdcall get_NasaEnergyValues (
        /*[out,retval]*/ struct IAgSpEnvRadEnergyValues * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCrresElectronEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCrresProtonEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNasaElectronEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNasaProtonEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NasaModelsActivity (
        /*[out,retval]*/ enum AgESpEnvNasaModelsActivity * pVal ) = 0;
      virtual HRESULT __stdcall put_NasaModelsActivity (
        /*[in]*/ enum AgESpEnvNasaModelsActivity pVal ) = 0;
};

enum AgESpEnvMagFieldColorMode
{
    eSpEnvMagFieldColorModeUnknown = -1,
    eSpEnvMagFieldColorModeFieldMagnitude = 0,
    eSpEnvMagFieldColorModeLatitudeLine = 1
};

enum AgESpEnvMagFieldColorScale
{
    eSpEnvMagFieldColorScaleUnknown = -1,
    eSpEnvMagFieldColorScaleLinear = 0,
    eSpEnvMagFieldColorScaleLog = 1
};

enum AgESpEnvMagFieldLineMode
{
    eSpEnvMagFieldLineModeUnknown = -1,
    eSpEnvMagFieldLineModeDipole = 0,
    eSpEnvMagFieldLineModeFullField = 1
};

enum AgESpEnvMagneticMainField
{
    eSpEnvMagneticMainFieldUnknown = -1,
    eSpEnvMagneticMainFieldCenteredDipole = 0,
    eSpEnvMagneticMainFieldIGRF = 1,
    eSpEnvMagneticMainFieldOffsetDipole = 2,
    eSpEnvMagneticMainFieldFastIGRF = 3,
    eSpEnvMagneticMainFieldTiltedDipole = 4
};

enum AgESpEnvMagneticExternalField
{
    eSpEnvMagneticExternalFieldUnknown = -1,
    eSpEnvMagneticExternalFieldNone = 0,
    eSpEnvMagneticExternalFieldOlsonPfitzer = 1
};

struct __declspec(uuid("54f90d51-5621-41e0-8cb3-d35e08d06bcd"))
IAgSpEnvMagFieldGfx : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsMagFieldVisible,put=PutIsMagFieldVisible))
    VARIANT_BOOL IsMagFieldVisible;
    __declspec(property(get=GetIGRF_UpdateRate,put=PutIGRF_UpdateRate))
    double IGRF_UpdateRate;
    __declspec(property(get=GetColorMode,put=PutColorMode))
    enum AgESpEnvMagFieldColorMode ColorMode;
    __declspec(property(get=GetColorScale,put=PutColorScale))
    enum AgESpEnvMagFieldColorScale ColorScale;
    __declspec(property(get=GetFieldLineRefresh,put=PutFieldLineRefresh))
    double FieldLineRefresh;
    __declspec(property(get=GetMaxTranslucency,put=PutMaxTranslucency))
    double MaxTranslucency;
    __declspec(property(get=GetColorRampStart,put=PutColorRampStart))
    OLE_COLOR ColorRampStart;
    __declspec(property(get=GetColorRampStop,put=PutColorRampStop))
    OLE_COLOR ColorRampStop;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetRefLongitude,put=PutRefLongitude))
    double RefLongitude;
    __declspec(property(get=GetFieldLineMode,put=PutFieldLineMode))
    enum AgESpEnvMagFieldLineMode FieldLineMode;
    __declspec(property(get=GetStartLatitude,put=PutStartLatitude))
    double StartLatitude;
    __declspec(property(get=GetStopLatitude,put=PutStopLatitude))
    double StopLatitude;
    __declspec(property(get=GetNumFieldLines,put=PutNumFieldLines))
    long NumFieldLines;
    __declspec(property(get=GetNumLongitudes,put=PutNumLongitudes))
    long NumLongitudes;
    __declspec(property(get=GetMainField,put=PutMainField))
    enum AgESpEnvMagneticMainField MainField;
    __declspec(property(get=GetExternalField,put=PutExternalField))
    enum AgESpEnvMagneticExternalField ExternalField;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsMagFieldVisible ( );
    void PutIsMagFieldVisible (
        VARIANT_BOOL pVal );
    enum AgESpEnvMagFieldColorMode GetColorMode ( );
    void PutColorMode (
        enum AgESpEnvMagFieldColorMode pVal );
    enum AgESpEnvMagFieldColorScale GetColorScale ( );
    void PutColorScale (
        enum AgESpEnvMagFieldColorScale pVal );
    double GetFieldLineRefresh ( );
    void PutFieldLineRefresh (
        double pVal );
    OLE_COLOR GetColorRampStart ( );
    void PutColorRampStart (
        OLE_COLOR pVal );
    OLE_COLOR GetColorRampStop ( );
    void PutColorRampStop (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetRefLongitude ( );
    void PutRefLongitude (
        double pVal );
    enum AgESpEnvMagFieldLineMode GetFieldLineMode ( );
    void PutFieldLineMode (
        enum AgESpEnvMagFieldLineMode pVal );
    double GetStartLatitude ( );
    void PutStartLatitude (
        double pVal );
    double GetStopLatitude ( );
    void PutStopLatitude (
        double pVal );
    long GetNumFieldLines ( );
    void PutNumFieldLines (
        long pVal );
    long GetNumLongitudes ( );
    void PutNumLongitudes (
        long pVal );
    enum AgESpEnvMagneticMainField GetMainField ( );
    void PutMainField (
        enum AgESpEnvMagneticMainField pVal );
    enum AgESpEnvMagneticExternalField GetExternalField ( );
    void PutExternalField (
        enum AgESpEnvMagneticExternalField pVal );
    double GetIGRF_UpdateRate ( );
    void PutIGRF_UpdateRate (
        double pVal );
    HRESULT ComputeBField (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt,
        double * pBx,
        double * pBy,
        double * pBz );
    SAFEARRAY * ComputeBFieldAsArray (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    double ComputeDipoleL (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    double ComputeMcIlwainL (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    double ComputeBBeq (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    double GetMaxTranslucency ( );
    void PutMaxTranslucency (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsMagFieldVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsMagFieldVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColorMode (
        /*[out,retval]*/ enum AgESpEnvMagFieldColorMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorMode (
        /*[in]*/ enum AgESpEnvMagFieldColorMode pVal ) = 0;
      virtual HRESULT __stdcall get_ColorScale (
        /*[out,retval]*/ enum AgESpEnvMagFieldColorScale * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorScale (
        /*[in]*/ enum AgESpEnvMagFieldColorScale pVal ) = 0;
      virtual HRESULT __stdcall get_FieldLineRefresh (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldLineRefresh (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColorRampStart (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorRampStart (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ColorRampStop (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorRampStop (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_RefLongitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefLongitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FieldLineMode (
        /*[out,retval]*/ enum AgESpEnvMagFieldLineMode * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldLineMode (
        /*[in]*/ enum AgESpEnvMagFieldLineMode pVal ) = 0;
      virtual HRESULT __stdcall get_StartLatitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartLatitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StopLatitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StopLatitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NumFieldLines (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumFieldLines (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NumLongitudes (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumLongitudes (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MainField (
        /*[out,retval]*/ enum AgESpEnvMagneticMainField * pVal ) = 0;
      virtual HRESULT __stdcall put_MainField (
        /*[in]*/ enum AgESpEnvMagneticMainField pVal ) = 0;
      virtual HRESULT __stdcall get_ExternalField (
        /*[out,retval]*/ enum AgESpEnvMagneticExternalField * pVal ) = 0;
      virtual HRESULT __stdcall put_ExternalField (
        /*[in]*/ enum AgESpEnvMagneticExternalField pVal ) = 0;
      virtual HRESULT __stdcall get_IGRF_UpdateRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_IGRF_UpdateRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeBField (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[in,out]*/ double * pBx,
        /*[in,out]*/ double * pBy,
        /*[in,out]*/ double * pBz ) = 0;
      virtual HRESULT __stdcall raw_ComputeBFieldAsArray (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDipoleL (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ double * pL ) = 0;
      virtual HRESULT __stdcall raw_ComputeMcIlwainL (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ double * pL ) = 0;
      virtual HRESULT __stdcall raw_ComputeBBeq (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ double * pBBeq ) = 0;
      virtual HRESULT __stdcall get_MaxTranslucency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxTranslucency (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("fcb20754-c8ed-4fa7-b38a-7c070327902e"))
IAgSpEnvScenExtVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMagneticField))
    IAgSpEnvMagFieldGfxPtr MagneticField;

    //
    // Wrapper methods for error-handling
    //

    IAgSpEnvMagFieldGfxPtr GetMagneticField ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MagneticField (
        /*[out,retval]*/ struct IAgSpEnvMagFieldGfx * * ppVal ) = 0;
};

enum AgESpEnvSAAChannel
{
    eSpEnvSAAChannelUnknown = -1,
    eSpEnvSAAChannel23MeV = 0,
    eSpEnvSAAChannel38MeV = 1,
    eSpEnvSAAChannel66MeV = 2,
    eSpEnvSAAChannel94MeV = 3
};

struct __declspec(uuid("2033e1cc-f808-4839-8c13-60c0b59be4e7"))
IAgSpEnvScenSpaceEnvironment : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiationEnvironment))
    IAgSpEnvRadiationEnvironmentPtr RadiationEnvironment;
    __declspec(property(get=GetVO))
    IAgSpEnvScenExtVOPtr VO;

    //
    // Wrapper methods for error-handling
    //

    IAgSpEnvRadiationEnvironmentPtr GetRadiationEnvironment ( );
    IAgSpEnvScenExtVOPtr GetVO ( );
    double ComputeSAAFluxIntensity (
        enum AgESpEnvSAAChannel Channel,
        double Lat,
        double Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiationEnvironment (
        /*[out,retval]*/ struct IAgSpEnvRadiationEnvironment * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgSpEnvScenExtVO * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSAAFluxIntensity (
        /*[in]*/ enum AgESpEnvSAAChannel Channel,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ double * pSAAFluxIntensity ) = 0;
};

struct __declspec(uuid("20935363-8def-488e-8c45-8622b9913e6a"))
IAgScenario : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetAnimation))
    IAgScAnimationPtr Animation;
    __declspec(property(get=GetEarthData))
    IAgScEarthDataPtr EarthData;
    __declspec(property(get=GetGraphics))
    IAgScGraphicsPtr Graphics;
    __declspec(property(get=GetTerrainCollection))
    IAgTerrainCollectionPtr TerrainCollection;
    __declspec(property(get=GetGenDbs))
    IAgScGenDbCollectionPtr GenDbs;
    __declspec(property(get=GetSatNoOrbitWarning,put=PutSatNoOrbitWarning))
    VARIANT_BOOL SatNoOrbitWarning;
    __declspec(property(get=GetMslNoOrbitWarning,put=PutMslNoOrbitWarning))
    VARIANT_BOOL MslNoOrbitWarning;
    __declspec(property(get=GetVO))
    IAgScVOPtr VO;
    __declspec(property(get=GetAcWGS84Warning,put=PutAcWGS84Warning))
    enum AgEAcWGS84WarningType AcWGS84Warning;
    __declspec(property(get=GetMslStopTimeWarning,put=PutMslStopTimeWarning))
    VARIANT_BOOL MslStopTimeWarning;
    __declspec(property(get=GetTerrain))
    IAgCentralBodyTerrainCollectionPtr Terrain;
    __declspec(property(get=GetComponentDirectory))
    STKUtil::IAgComponentDirectoryPtr ComponentDirectory;
    __declspec(property(get=GetScenarioFiles))
    SAFEARRAY * ScenarioFiles;
    __declspec(property(get=GetIsDirty))
    VARIANT_BOOL IsDirty;
    __declspec(property(get=GetTimePeriod))
    IAgTimePeriodPtr TimePeriod;
    __declspec(property(get=GetUseAnalysisStartTimeForEpoch,put=PutUseAnalysisStartTimeForEpoch))
    VARIANT_BOOL UseAnalysisStartTimeForEpoch;
    __declspec(property(get=GetSpaceEnvironment))
    IAgSpEnvScenSpaceEnvironmentPtr SpaceEnvironment;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    HRESULT SetTimePeriod (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    IAgScAnimationPtr GetAnimation ( );
    IAgScEarthDataPtr GetEarthData ( );
    IAgScGraphicsPtr GetGraphics ( );
    IAgTerrainCollectionPtr GetTerrainCollection ( );
    IAgScGenDbCollectionPtr GetGenDbs ( );
    VARIANT_BOOL GetSatNoOrbitWarning ( );
    void PutSatNoOrbitWarning (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMslNoOrbitWarning ( );
    void PutMslNoOrbitWarning (
        VARIANT_BOOL pVal );
    IAgScVOPtr GetVO ( );
    enum AgEAcWGS84WarningType GetAcWGS84Warning ( );
    void PutAcWGS84Warning (
        enum AgEAcWGS84WarningType pVal );
    VARIANT_BOOL GetMslStopTimeWarning ( );
    void PutMslStopTimeWarning (
        VARIANT_BOOL pVal );
    IAgCentralBodyTerrainCollectionPtr GetTerrain ( );
    STKUtil::IAgComponentDirectoryPtr GetComponentDirectory ( );
    SAFEARRAY * GetScenarioFiles ( );
    VARIANT_BOOL GetIsDirty ( );
    IAgTimePeriodPtr GetTimePeriod ( );
    VARIANT_BOOL GetUseAnalysisStartTimeForEpoch ( );
    void PutUseAnalysisStartTimeForEpoch (
        VARIANT_BOOL pRetVal );
    HRESULT SetDirty ( );
    IAgSpEnvScenSpaceEnvironmentPtr GetSpaceEnvironment ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTimePeriod (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgScAnimation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EarthData (
        /*[out,retval]*/ struct IAgScEarthData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgScGraphics * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TerrainCollection (
        /*[out,retval]*/ struct IAgTerrainCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GenDbs (
        /*[out,retval]*/ struct IAgScGenDbCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SatNoOrbitWarning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SatNoOrbitWarning (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MslNoOrbitWarning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MslNoOrbitWarning (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgScVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AcWGS84Warning (
        /*[out,retval]*/ enum AgEAcWGS84WarningType * pVal ) = 0;
      virtual HRESULT __stdcall put_AcWGS84Warning (
        /*[in]*/ enum AgEAcWGS84WarningType pVal ) = 0;
      virtual HRESULT __stdcall get_MslStopTimeWarning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MslStopTimeWarning (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Terrain (
        /*[out,retval]*/ struct IAgCentralBodyTerrainCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ComponentDirectory (
        /*[out,retval]*/ struct STKUtil::IAgComponentDirectory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScenarioFiles (
        /*[out,retval]*/ SAFEARRAY * * ppScenarioFiles ) = 0;
      virtual HRESULT __stdcall get_IsDirty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgTimePeriod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAnalysisStartTimeForEpoch (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAnalysisStartTimeForEpoch (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetDirty ( ) = 0;
      virtual HRESULT __stdcall get_SpaceEnvironment (
        /*[out,retval]*/ struct IAgSpEnvScenSpaceEnvironment * * ppRetVal ) = 0;
};

struct __declspec(uuid("ed8b035d-b454-4365-b89c-925a33ba8cac"))
AgScAnimation;
    // [ default ] interface _IAgScAnimation
    // interface IAgScAnimation

struct __declspec(uuid("177bf49a-148b-49f2-ac67-18adffaf6f4c"))
_IAgScAnimation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetEnableAnimCycleTime,put=PutEnableAnimCycleTime))
    VARIANT_BOOL EnableAnimCycleTime;
    __declspec(property(get=GetAnimCycleTime,put=PutAnimCycleTime))
    _variant_t AnimCycleTime;
    __declspec(property(get=GetAnimStepValue,put=PutAnimStepValue))
    double AnimStepValue;
    __declspec(property(get=GetRefreshDelta,put=PutRefreshDelta))
    double RefreshDelta;
    __declspec(property(get=GetAnimCycleType,put=PutAnimCycleType))
    enum AgEScEndLoopType AnimCycleType;
    __declspec(property(get=GetRefreshDeltaType,put=PutRefreshDeltaType))
    enum AgEScRefreshDeltaType RefreshDeltaType;
    __declspec(property(get=GetAnimStepType,put=PutAnimStepType))
    enum AgEScTimeStepType AnimStepType;
    __declspec(property(get=GetContinueXRealtimeFromPause,put=PutContinueXRealtimeFromPause))
    VARIANT_BOOL ContinueXRealtimeFromPause;
    __declspec(property(get=GetTimePeriod))
    IAgScAnimationTimePeriodPtr TimePeriod;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    VARIANT_BOOL GetEnableAnimCycleTime ( );
    void PutEnableAnimCycleTime (
        VARIANT_BOOL pVal );
    _variant_t GetAnimCycleTime ( );
    void PutAnimCycleTime (
        const _variant_t & pVal );
    double GetAnimStepValue ( );
    void PutAnimStepValue (
        double pVal );
    double GetRefreshDelta ( );
    void PutRefreshDelta (
        double pVal );
    enum AgEScEndLoopType GetAnimCycleType ( );
    void PutAnimCycleType (
        enum AgEScEndLoopType pVal );
    enum AgEScRefreshDeltaType GetRefreshDeltaType ( );
    void PutRefreshDeltaType (
        enum AgEScRefreshDeltaType pVal );
    enum AgEScTimeStepType GetAnimStepType ( );
    void PutAnimStepType (
        enum AgEScTimeStepType pVal );
    VARIANT_BOOL GetContinueXRealtimeFromPause ( );
    void PutContinueXRealtimeFromPause (
        VARIANT_BOOL pVal );
    IAgScAnimationTimePeriodPtr GetTimePeriod ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_EnableAnimCycleTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAnimCycleTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AnimCycleTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimCycleTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AnimStepValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimStepValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RefreshDelta (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefreshDelta (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AnimCycleType (
        /*[out,retval]*/ enum AgEScEndLoopType * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimCycleType (
        /*[in]*/ enum AgEScEndLoopType pVal ) = 0;
      virtual HRESULT __stdcall get_RefreshDeltaType (
        /*[out,retval]*/ enum AgEScRefreshDeltaType * pVal ) = 0;
      virtual HRESULT __stdcall put_RefreshDeltaType (
        /*[in]*/ enum AgEScRefreshDeltaType pVal ) = 0;
      virtual HRESULT __stdcall get_AnimStepType (
        /*[out,retval]*/ enum AgEScTimeStepType * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimStepType (
        /*[in]*/ enum AgEScTimeStepType pVal ) = 0;
      virtual HRESULT __stdcall get_ContinueXRealtimeFromPause (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ContinueXRealtimeFromPause (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgScAnimationTimePeriod * * ppRetVal ) = 0;
};

struct __declspec(uuid("c6bbb4bd-1e3c-49ba-bc2b-f715e1b0b1de"))
AgScEarthData;
    // [ default ] interface _IAgScEarthData
    // interface IAgScEarthData

struct __declspec(uuid("7cc1715c-8000-474e-bc69-052321a8d04d"))
_IAgScEarthData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEOPFilename,put=PutEOPFilename))
    _bstr_t EOPFilename;
    __declspec(property(get=GetEOPStartTime))
    _variant_t EOPStartTime;
    __declspec(property(get=GetEOPStopTime))
    _variant_t EOPStopTime;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEOPFilename ( );
    void PutEOPFilename (
        _bstr_t pVal );
    _variant_t GetEOPStartTime ( );
    _variant_t GetEOPStopTime ( );
    HRESULT ReloadEOP ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EOPFilename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EOPFilename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EOPStartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_EOPStopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_ReloadEOP ( ) = 0;
};

struct __declspec(uuid("e8d5533e-cfcc-4a2d-b4ff-c7c5e49a4653"))
AgScGraphics;
    // [ default ] interface _IAgScGraphics
    // interface IAgScGraphics

struct __declspec(uuid("fe5f4701-d02e-4bd7-a127-98ab12d0590c"))
_IAgScGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelsVisible,put=PutLabelsVisible))
    VARIANT_BOOL LabelsVisible;
    __declspec(property(get=GetSensorsVisible,put=PutSensorsVisible))
    VARIANT_BOOL SensorsVisible;
    __declspec(property(get=GetAccessLinesVisible,put=PutAccessLinesVisible))
    VARIANT_BOOL AccessLinesVisible;
    __declspec(property(get=GetAccessAnimHigh,put=PutAccessAnimHigh))
    VARIANT_BOOL AccessAnimHigh;
    __declspec(property(get=GetAccessStatHigh,put=PutAccessStatHigh))
    VARIANT_BOOL AccessStatHigh;
    __declspec(property(get=GetGndTracksVisible,put=PutGndTracksVisible))
    VARIANT_BOOL GndTracksVisible;
    __declspec(property(get=GetGndMarkersVisible,put=PutGndMarkersVisible))
    VARIANT_BOOL GndMarkersVisible;
    __declspec(property(get=GetOrbitsVisible,put=PutOrbitsVisible))
    VARIANT_BOOL OrbitsVisible;
    __declspec(property(get=GetOrbitMarkersVisible,put=PutOrbitMarkersVisible))
    VARIANT_BOOL OrbitMarkersVisible;
    __declspec(property(get=GetElsetNumVisible,put=PutElsetNumVisible))
    VARIANT_BOOL ElsetNumVisible;
    __declspec(property(get=GetCentroidsVisible,put=PutCentroidsVisible))
    VARIANT_BOOL CentroidsVisible;
    __declspec(property(get=GetPlanetOrbitsVisible,put=PutPlanetOrbitsVisible))
    VARIANT_BOOL PlanetOrbitsVisible;
    __declspec(property(get=GetInertialPosVisible,put=PutInertialPosVisible))
    VARIANT_BOOL InertialPosVisible;
    __declspec(property(get=GetInertialPosLabelsVisible,put=PutInertialPosLabelsVisible))
    VARIANT_BOOL InertialPosLabelsVisible;
    __declspec(property(get=GetSubPlanetPointsVisible,put=PutSubPlanetPointsVisible))
    VARIANT_BOOL SubPlanetPointsVisible;
    __declspec(property(get=GetSubPlanetLabelsVisible,put=PutSubPlanetLabelsVisible))
    VARIANT_BOOL SubPlanetLabelsVisible;
    __declspec(property(get=GetAllowAnimUpdate,put=PutAllowAnimUpdate))
    VARIANT_BOOL AllowAnimUpdate;
    __declspec(property(get=GetTextOutlineStyle,put=PutTextOutlineStyle))
    enum AgETextOutlineStyle TextOutlineStyle;
    __declspec(property(get=GetTextOutlineColor,put=PutTextOutlineColor))
    OLE_COLOR TextOutlineColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLabelsVisible ( );
    void PutLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSensorsVisible ( );
    void PutSensorsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAccessLinesVisible ( );
    void PutAccessLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAccessAnimHigh ( );
    void PutAccessAnimHigh (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAccessStatHigh ( );
    void PutAccessStatHigh (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGndTracksVisible ( );
    void PutGndTracksVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGndMarkersVisible ( );
    void PutGndMarkersVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOrbitsVisible ( );
    void PutOrbitsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOrbitMarkersVisible ( );
    void PutOrbitMarkersVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetElsetNumVisible ( );
    void PutElsetNumVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCentroidsVisible ( );
    void PutCentroidsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPlanetOrbitsVisible ( );
    void PutPlanetOrbitsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInertialPosVisible ( );
    void PutInertialPosVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInertialPosLabelsVisible ( );
    void PutInertialPosLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSubPlanetPointsVisible ( );
    void PutSubPlanetPointsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSubPlanetLabelsVisible ( );
    void PutSubPlanetLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllowAnimUpdate ( );
    void PutAllowAnimUpdate (
        VARIANT_BOOL pVal );
    enum AgETextOutlineStyle GetTextOutlineStyle ( );
    void PutTextOutlineStyle (
        enum AgETextOutlineStyle ppVal );
    OLE_COLOR GetTextOutlineColor ( );
    void PutTextOutlineColor (
        OLE_COLOR pVal );
    HRESULT ShowObject (
        _bstr_t TruncPath,
        _bstr_t WindowID );
    HRESULT ShowObjects (
        SAFEARRAY * * TruncObjectPaths,
        _bstr_t WindowIdOrTitle );
    HRESULT HideObject (
        _bstr_t TruncPath,
        _bstr_t WindowID );
    HRESULT HideObjects (
        SAFEARRAY * * TruncObjectPaths,
        _bstr_t WindowIdOrTitle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SensorsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SensorsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AccessLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessAnimHigh (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AccessAnimHigh (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessStatHigh (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AccessStatHigh (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GndTracksVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GndTracksVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GndMarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GndMarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OrbitsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OrbitsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OrbitMarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OrbitMarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ElsetNumVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ElsetNumVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CentroidsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CentroidsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PlanetOrbitsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PlanetOrbitsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InertialPosVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InertialPosVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InertialPosLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InertialPosLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SubPlanetPointsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPlanetPointsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SubPlanetLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SubPlanetLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllowAnimUpdate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowAnimUpdate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextOutlineStyle (
        /*[out,retval]*/ enum AgETextOutlineStyle * ppVal ) = 0;
      virtual HRESULT __stdcall put_TextOutlineStyle (
        /*[in]*/ enum AgETextOutlineStyle ppVal ) = 0;
      virtual HRESULT __stdcall get_TextOutlineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOutlineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall raw_ShowObject (
        /*[in]*/ BSTR TruncPath,
        /*[in]*/ BSTR WindowID ) = 0;
      virtual HRESULT __stdcall raw_ShowObjects (
        /*[in]*/ SAFEARRAY * * TruncObjectPaths,
        /*[in]*/ BSTR WindowIdOrTitle ) = 0;
      virtual HRESULT __stdcall raw_HideObject (
        /*[in]*/ BSTR TruncPath,
        /*[in]*/ BSTR WindowID ) = 0;
      virtual HRESULT __stdcall raw_HideObjects (
        /*[in]*/ SAFEARRAY * * TruncObjectPaths,
        /*[in]*/ BSTR WindowIdOrTitle ) = 0;
};

struct __declspec(uuid("7986fb03-e45f-4b2c-b3dc-056476bbedb2"))
AgTerrainCollection;
    // [ default ] interface IUnknown
    // interface IAgTerrainCollection

struct __declspec(uuid("4596483b-b372-4416-b286-3687c7db5f9f"))
AgTerrain;
    // [ default ] interface _IAgTerrain
    // interface IAgTerrain

struct __declspec(uuid("94d228ae-cf9e-4b51-9a33-44402b927313"))
_IAgTerrain : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocation,put=PutLocation))
    _bstr_t Location;
    __declspec(property(get=GetFileType))
    enum AgETerrainFileType FileType;
    __declspec(property(get=GetSWLatitude))
    _variant_t SWLatitude;
    __declspec(property(get=GetSWLongitude))
    _variant_t SWLongitude;
    __declspec(property(get=GetNELatitude))
    _variant_t NELatitude;
    __declspec(property(get=GetNELongitude))
    _variant_t NELongitude;
    __declspec(property(get=GetResolution))
    _variant_t Resolution;
    __declspec(property(get=GetUseTerrain,put=PutUseTerrain))
    VARIANT_BOOL UseTerrain;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLocation ( );
    void PutLocation (
        _bstr_t pVal );
    enum AgETerrainFileType GetFileType ( );
    _variant_t GetSWLatitude ( );
    _variant_t GetSWLongitude ( );
    _variant_t GetNELatitude ( );
    _variant_t GetNELongitude ( );
    _variant_t GetResolution ( );
    VARIANT_BOOL GetUseTerrain ( );
    void PutUseTerrain (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FileType (
        /*[out,retval]*/ enum AgETerrainFileType * pVal ) = 0;
      virtual HRESULT __stdcall get_SWLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_SWLongitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_NELatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_NELongitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_UseTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTerrain (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("53622960-6806-432a-a888-c0710a088bc5"))
AgScGenDbCollection;
    // [ default ] interface IUnknown
    // interface IAgScGenDbCollection

struct __declspec(uuid("1231ebff-5026-4055-8c13-ccca0d4f2a38"))
AgScGenDb;
    // [ default ] interface _IAgScGenDb
    // interface IAgScGenDb

struct __declspec(uuid("3b87cf5c-34b8-468d-83b3-6d9232035c83"))
_IAgScGenDb : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetDefaultDb,put=PutDefaultDb))
    _bstr_t DefaultDb;
    __declspec(property(get=GetDefaultDir,put=PutDefaultDir))
    _bstr_t DefaultDir;
    __declspec(property(get=GetEnableAuxDb,put=PutEnableAuxDb))
    VARIANT_BOOL EnableAuxDb;
    __declspec(property(get=GetAuxDb,put=PutAuxDb))
    _bstr_t AuxDb;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    _bstr_t GetDefaultDb ( );
    void PutDefaultDb (
        _bstr_t pVal );
    _bstr_t GetDefaultDir ( );
    void PutDefaultDir (
        _bstr_t pVal );
    VARIANT_BOOL GetEnableAuxDb ( );
    void PutEnableAuxDb (
        VARIANT_BOOL pVal );
    _bstr_t GetAuxDb ( );
    void PutAuxDb (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultDb (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultDb (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultDir (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultDir (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EnableAuxDb (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAuxDb (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AuxDb (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AuxDb (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("16e1f0c3-7b24-4d22-9dff-f1376bc24e44"))
AgScVO;
    // [ default ] interface _IAgScVO
    // interface IAgScVO

struct __declspec(uuid("4d3b328e-003d-49f6-82a9-a87a6c86023b"))
_IAgScVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRenderNewVOWindow,put=PutRenderNewVOWindow))
    VARIANT_BOOL RenderNewVOWindow;
    __declspec(property(get=GetROAMImageCacheSize,put=PutROAMImageCacheSize))
    long ROAMImageCacheSize;
    __declspec(property(get=GetChunkImageCacheSize,put=PutChunkImageCacheSize))
    long ChunkImageCacheSize;
    __declspec(property(get=GetUseTerrainWithDragDrop,put=PutUseTerrainWithDragDrop))
    VARIANT_BOOL UseTerrainWithDragDrop;
    __declspec(property(get=GetIsNegativeAltitudeAllowed,put=PutIsNegativeAltitudeAllowed))
    VARIANT_BOOL IsNegativeAltitudeAllowed;
    __declspec(property(get=GetEnableGlobeServerAccess,put=PutEnableGlobeServerAccess))
    VARIANT_BOOL EnableGlobeServerAccess;
    __declspec(property(get=GetGlobeServers))
    IAgScGlobeServersCollectionPtr GlobeServers;
    __declspec(property(get=GetSmallFont))
    IAgSc3dFontPtr SmallFont;
    __declspec(property(get=GetMediumFont))
    IAgSc3dFontPtr MediumFont;
    __declspec(property(get=GetLargeFont))
    IAgSc3dFontPtr LargeFont;
    __declspec(property(get=GetSurfaceReference,put=PutSurfaceReference))
    enum AgESurfaceReference SurfaceReference;
    __declspec(property(get=GetDrawOnTerrain,put=PutDrawOnTerrain))
    VARIANT_BOOL DrawOnTerrain;
    __declspec(property(get=GetChunkTerrainCacheSize,put=PutChunkTerrainCacheSize))
    long ChunkTerrainCacheSize;
    __declspec(property(get=GetTextOutlineStyle,put=PutTextOutlineStyle))
    enum AgETextOutlineStyle TextOutlineStyle;
    __declspec(property(get=GetTextOutlineColor,put=PutTextOutlineColor))
    OLE_COLOR TextOutlineColor;
    __declspec(property(get=GetTextAntialiasingEnabled,put=PutTextAntialiasingEnabled))
    VARIANT_BOOL TextAntialiasingEnabled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetRenderNewVOWindow ( );
    void PutRenderNewVOWindow (
        VARIANT_BOOL pVal );
    long GetROAMImageCacheSize ( );
    void PutROAMImageCacheSize (
        long pVal );
    long GetChunkImageCacheSize ( );
    void PutChunkImageCacheSize (
        long pVal );
    VARIANT_BOOL GetUseTerrainWithDragDrop ( );
    void PutUseTerrainWithDragDrop (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsNegativeAltitudeAllowed ( );
    void PutIsNegativeAltitudeAllowed (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableGlobeServerAccess ( );
    void PutEnableGlobeServerAccess (
        VARIANT_BOOL pVal );
    IAgScGlobeServersCollectionPtr GetGlobeServers ( );
    HRESULT ReloadGlobeServerConfigData ( );
    IAgSc3dFontPtr GetSmallFont ( );
    IAgSc3dFontPtr GetMediumFont ( );
    IAgSc3dFontPtr GetLargeFont ( );
    enum AgESurfaceReference GetSurfaceReference ( );
    void PutSurfaceReference (
        enum AgESurfaceReference pVal );
    VARIANT_BOOL GetDrawOnTerrain ( );
    void PutDrawOnTerrain (
        VARIANT_BOOL pVal );
    long GetChunkTerrainCacheSize ( );
    void PutChunkTerrainCacheSize (
        long pVal );
    enum AgETextOutlineStyle GetTextOutlineStyle ( );
    void PutTextOutlineStyle (
        enum AgETextOutlineStyle pVal );
    OLE_COLOR GetTextOutlineColor ( );
    void PutTextOutlineColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetTextAntialiasingEnabled ( );
    void PutTextAntialiasingEnabled (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RenderNewVOWindow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RenderNewVOWindow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ROAMImageCacheSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ROAMImageCacheSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ChunkImageCacheSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChunkImageCacheSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UseTerrainWithDragDrop (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTerrainWithDragDrop (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsNegativeAltitudeAllowed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsNegativeAltitudeAllowed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableGlobeServerAccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableGlobeServerAccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GlobeServers (
        /*[out,retval]*/ struct IAgScGlobeServersCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ReloadGlobeServerConfigData ( ) = 0;
      virtual HRESULT __stdcall get_SmallFont (
        /*[out,retval]*/ struct IAgSc3dFont * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MediumFont (
        /*[out,retval]*/ struct IAgSc3dFont * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LargeFont (
        /*[out,retval]*/ struct IAgSc3dFont * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceReference (
        /*[out,retval]*/ enum AgESurfaceReference * pVal ) = 0;
      virtual HRESULT __stdcall put_SurfaceReference (
        /*[in]*/ enum AgESurfaceReference pVal ) = 0;
      virtual HRESULT __stdcall get_DrawOnTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawOnTerrain (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ChunkTerrainCacheSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChunkTerrainCacheSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TextOutlineStyle (
        /*[out,retval]*/ enum AgETextOutlineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOutlineStyle (
        /*[in]*/ enum AgETextOutlineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_TextOutlineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TextOutlineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_TextAntialiasingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextAntialiasingEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("e07f8001-b2ba-48a8-89f6-0fc199e3afdc"))
AgSnComplexConicPattern;
    // [ default ] interface _IAgSnComplexConicPattern
    // interface IAgSnPattern
    // interface IAgSnComplexConicPattern

struct __declspec(uuid("eecf71c2-c611-4f11-af83-9ec753f7a62e"))
_IAgSnComplexConicPattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInnerConeHalfAngle,put=PutInnerConeHalfAngle))
    _variant_t InnerConeHalfAngle;
    __declspec(property(get=GetOuterConeHalfAngle,put=PutOuterConeHalfAngle))
    _variant_t OuterConeHalfAngle;
    __declspec(property(get=GetMinimumClockAngle,put=PutMinimumClockAngle))
    _variant_t MinimumClockAngle;
    __declspec(property(get=GetMaximumClockAngle,put=PutMaximumClockAngle))
    _variant_t MaximumClockAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetInnerConeHalfAngle ( );
    void PutInnerConeHalfAngle (
        const _variant_t & pVal );
    _variant_t GetOuterConeHalfAngle ( );
    void PutOuterConeHalfAngle (
        const _variant_t & pVal );
    _variant_t GetMinimumClockAngle ( );
    void PutMinimumClockAngle (
        const _variant_t & pVal );
    _variant_t GetMaximumClockAngle ( );
    void PutMaximumClockAngle (
        const _variant_t & pVal );
    HRESULT SetClockAngles (
        const _variant_t & Min,
        const _variant_t & Max );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InnerConeHalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_InnerConeHalfAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_OuterConeHalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_OuterConeHalfAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MinimumClockAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinimumClockAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaximumClockAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumClockAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetClockAngles (
        /*[in]*/ VARIANT Min,
        /*[in]*/ VARIANT Max ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("64992e2d-0edf-4711-86f5-4cb5328a2617"))
IAgSnPattern : IUnknown
{};

struct __declspec(uuid("559cefe7-bb5e-413f-b966-3af3c719ebea"))
IAgSnComplexConicPattern : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInnerConeHalfAngle,put=PutInnerConeHalfAngle))
    _variant_t InnerConeHalfAngle;
    __declspec(property(get=GetOuterConeHalfAngle,put=PutOuterConeHalfAngle))
    _variant_t OuterConeHalfAngle;
    __declspec(property(get=GetMinimumClockAngle,put=PutMinimumClockAngle))
    _variant_t MinimumClockAngle;
    __declspec(property(get=GetMaximumClockAngle,put=PutMaximumClockAngle))
    _variant_t MaximumClockAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetInnerConeHalfAngle ( );
    void PutInnerConeHalfAngle (
        const _variant_t & pVal );
    _variant_t GetOuterConeHalfAngle ( );
    void PutOuterConeHalfAngle (
        const _variant_t & pVal );
    _variant_t GetMinimumClockAngle ( );
    void PutMinimumClockAngle (
        const _variant_t & pVal );
    _variant_t GetMaximumClockAngle ( );
    void PutMaximumClockAngle (
        const _variant_t & pVal );
    HRESULT SetClockAngles (
        const _variant_t & Min,
        const _variant_t & Max );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InnerConeHalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_InnerConeHalfAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_OuterConeHalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_OuterConeHalfAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MinimumClockAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinimumClockAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaximumClockAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumClockAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetClockAngles (
        /*[in]*/ VARIANT Min,
        /*[in]*/ VARIANT Max ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("761eef4e-570a-4359-8079-119b9fd41852"))
AgSnCustomPattern;
    // [ default ] interface _IAgSnCustomPattern
    // interface IAgSnPattern
    // interface IAgSnCustomPattern

struct __declspec(uuid("5b5c3d14-7651-40bb-bb1f-34684a6d220c"))
_IAgSnCustomPattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;
    __declspec(property(get=GetUseNativeResolution,put=PutUseNativeResolution))
    VARIANT_BOOL UseNativeResolution;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );
    VARIANT_BOOL GetUseNativeResolution ( );
    void PutUseNativeResolution (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_UseNativeResolution (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseNativeResolution (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("cc2219ce-a329-40c0-9952-9f169bd7844b"))
IAgSnCustomPattern : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;
    __declspec(property(get=GetUseNativeResolution,put=PutUseNativeResolution))
    VARIANT_BOOL UseNativeResolution;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );
    VARIANT_BOOL GetUseNativeResolution ( );
    void PutUseNativeResolution (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_UseNativeResolution (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseNativeResolution (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("422aa1d5-5db7-46a0-a450-0e4cb8746017"))
AgSnHalfPowerPattern;
    // [ default ] interface _IAgSnHalfPowerPattern
    // interface IAgSnPattern
    // interface IAgSnHalfPowerPattern

struct __declspec(uuid("521fd05b-b496-48be-80e0-89fd057ae357"))
_IAgSnHalfPowerPattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrequency,put=PutFrequency))
    double Frequency;
    __declspec(property(get=GetAntennaDiameter,put=PutAntennaDiameter))
    double AntennaDiameter;
    __declspec(property(get=GetHalfAngle))
    _variant_t HalfAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    double GetFrequency ( );
    void PutFrequency (
        double pVal );
    double GetAntennaDiameter ( );
    void PutAntennaDiameter (
        double pVal );
    _variant_t GetHalfAngle ( );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AntennaDiameter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AntennaDiameter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("361deed5-28e9-41a5-9b2c-8c53884d24ee"))
IAgSnHalfPowerPattern : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFrequency,put=PutFrequency))
    double Frequency;
    __declspec(property(get=GetAntennaDiameter,put=PutAntennaDiameter))
    double AntennaDiameter;
    __declspec(property(get=GetHalfAngle))
    _variant_t HalfAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    double GetFrequency ( );
    void PutFrequency (
        double pVal );
    double GetAntennaDiameter ( );
    void PutAntennaDiameter (
        double pVal );
    _variant_t GetHalfAngle ( );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AntennaDiameter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AntennaDiameter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("bab967eb-07c2-474e-a228-430ebf3d4865"))
AgSnRectangularPattern;
    // [ default ] interface _IAgSnRectangularPattern
    // interface IAgSnPattern
    // interface IAgSnRectangularPattern

struct __declspec(uuid("a5f9beec-e137-41a7-8d51-57159b9b08a6"))
_IAgSnRectangularPattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVerticalHalfAngle,put=PutVerticalHalfAngle))
    _variant_t VerticalHalfAngle;
    __declspec(property(get=GetHorizontalHalfAngle,put=PutHorizontalHalfAngle))
    _variant_t HorizontalHalfAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetVerticalHalfAngle ( );
    void PutVerticalHalfAngle (
        const _variant_t & pVal );
    _variant_t GetHorizontalHalfAngle ( );
    void PutHorizontalHalfAngle (
        const _variant_t & pVal );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VerticalHalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticalHalfAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_HorizontalHalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_HorizontalHalfAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("bcbcb85e-bde2-486b-a1a0-0e30b1953946"))
IAgSnRectangularPattern : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVerticalHalfAngle,put=PutVerticalHalfAngle))
    _variant_t VerticalHalfAngle;
    __declspec(property(get=GetHorizontalHalfAngle,put=PutHorizontalHalfAngle))
    _variant_t HorizontalHalfAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetVerticalHalfAngle ( );
    void PutVerticalHalfAngle (
        const _variant_t & pVal );
    _variant_t GetHorizontalHalfAngle ( );
    void PutHorizontalHalfAngle (
        const _variant_t & pVal );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VerticalHalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticalHalfAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_HorizontalHalfAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_HorizontalHalfAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("94ddfe79-ac2c-4592-8099-471a4ff2f68d"))
AgSnSARPattern;
    // [ default ] interface _IAgSnSARPattern
    // interface IAgSnPattern
    // interface IAgSnSARPattern

struct __declspec(uuid("9ded3a2d-8572-40bc-92f6-6ff7161c4f10"))
_IAgSnSARPattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParentAltitude,put=PutParentAltitude))
    double ParentAltitude;
    __declspec(property(get=GetMinElevationAngle,put=PutMinElevationAngle))
    _variant_t MinElevationAngle;
    __declspec(property(get=GetMaxElevationAngle,put=PutMaxElevationAngle))
    _variant_t MaxElevationAngle;
    __declspec(property(get=GetForeExclusionAngle,put=PutForeExclusionAngle))
    _variant_t ForeExclusionAngle;
    __declspec(property(get=GetAftExclusionAngle,put=PutAftExclusionAngle))
    _variant_t AftExclusionAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    double GetParentAltitude ( );
    void PutParentAltitude (
        double pVal );
    _variant_t GetMinElevationAngle ( );
    void PutMinElevationAngle (
        const _variant_t & pVal );
    _variant_t GetMaxElevationAngle ( );
    void PutMaxElevationAngle (
        const _variant_t & pVal );
    _variant_t GetForeExclusionAngle ( );
    void PutForeExclusionAngle (
        const _variant_t & pVal );
    _variant_t GetAftExclusionAngle ( );
    void PutAftExclusionAngle (
        const _variant_t & pVal );
    HRESULT SetElevationAngles (
        const _variant_t & Min,
        const _variant_t & Max );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ParentAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinElevationAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinElevationAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxElevationAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxElevationAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ForeExclusionAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ForeExclusionAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AftExclusionAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AftExclusionAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetElevationAngles (
        /*[in]*/ VARIANT Min,
        /*[in]*/ VARIANT Max ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("e9b3b227-1907-4e4c-97bf-221bfaa7b52d"))
IAgSnSARPattern : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParentAltitude,put=PutParentAltitude))
    double ParentAltitude;
    __declspec(property(get=GetMinElevationAngle,put=PutMinElevationAngle))
    _variant_t MinElevationAngle;
    __declspec(property(get=GetMaxElevationAngle,put=PutMaxElevationAngle))
    _variant_t MaxElevationAngle;
    __declspec(property(get=GetForeExclusionAngle,put=PutForeExclusionAngle))
    _variant_t ForeExclusionAngle;
    __declspec(property(get=GetAftExclusionAngle,put=PutAftExclusionAngle))
    _variant_t AftExclusionAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    double GetParentAltitude ( );
    void PutParentAltitude (
        double pVal );
    _variant_t GetMinElevationAngle ( );
    void PutMinElevationAngle (
        const _variant_t & pVal );
    _variant_t GetMaxElevationAngle ( );
    void PutMaxElevationAngle (
        const _variant_t & pVal );
    _variant_t GetForeExclusionAngle ( );
    void PutForeExclusionAngle (
        const _variant_t & pVal );
    _variant_t GetAftExclusionAngle ( );
    void PutAftExclusionAngle (
        const _variant_t & pVal );
    HRESULT SetElevationAngles (
        const _variant_t & Min,
        const _variant_t & Max );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ParentAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinElevationAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinElevationAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxElevationAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxElevationAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ForeExclusionAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ForeExclusionAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AftExclusionAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AftExclusionAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetElevationAngles (
        /*[in]*/ VARIANT Min,
        /*[in]*/ VARIANT Max ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("61e74424-d2bf-4e6f-af50-ba802cff0256"))
AgSnSimpleConicPattern;
    // [ default ] interface _IAgSnSimpleConicPattern
    // interface IAgSnPattern
    // interface IAgSnSimpleConicPattern

struct __declspec(uuid("000ed307-1882-47ec-8f60-223bcfb85803"))
_IAgSnSimpleConicPattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConeAngle,put=PutConeAngle))
    _variant_t ConeAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetConeAngle ( );
    void PutConeAngle (
        const _variant_t & pVal );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConeAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ConeAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("d4cc9d68-2c2f-4702-9a37-830d798dedf7"))
IAgSnSimpleConicPattern : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetConeAngle,put=PutConeAngle))
    _variant_t ConeAngle;
    __declspec(property(get=GetAngularResolution,put=PutAngularResolution))
    _variant_t AngularResolution;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetConeAngle ( );
    void PutConeAngle (
        const _variant_t & pVal );
    _variant_t GetAngularResolution ( );
    void PutAngularResolution (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConeAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ConeAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AngularResolution (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AngularResolution (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("e5814440-971c-4583-990e-25563a315407"))
AgSnPtFixed;
    // [ default ] interface _IAgSnPtFixed
    // interface IAgSnPointing
    // interface IAgSnPtFixed

struct __declspec(uuid("83edeb60-34f5-4144-a7d2-b28b2a518135"))
_IAgSnPtFixed : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
};

struct __declspec(uuid("12bbf9ab-727d-4c86-91af-8e5f64adcada"))
IAgSnPointing : IUnknown
{};

struct __declspec(uuid("7e0d3621-a59d-4c41-99a2-2f76b224a573"))
IAgSnPtFixed : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
};

struct __declspec(uuid("a10db3d5-295f-42b2-a246-bba467452eea"))
AgSnPtFixedAxes;
    // [ default ] interface _IAgSnPtFixedAxes
    // interface IAgSnPointing
    // interface IAgSnPtFixedAxes

struct __declspec(uuid("bf13ed12-18f2-40d9-aa6b-920ede9a07e1"))
_IAgSnPtFixedAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    _bstr_t ReferenceAxes;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetAvailableAxes))
    SAFEARRAY * AvailableAxes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReferenceAxes ( );
    void PutReferenceAxes (
        _bstr_t pVal );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    SAFEARRAY * GetAvailableAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("d8c63861-6d06-49a8-bb82-6e45a2b68e31"))
IAgSnPtFixedAxes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    _bstr_t ReferenceAxes;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetAvailableAxes))
    SAFEARRAY * AvailableAxes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReferenceAxes ( );
    void PutReferenceAxes (
        _bstr_t pVal );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    SAFEARRAY * GetAvailableAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("9e230649-b961-4018-a061-1a92f4af00f5"))
AgSnPt3DModel;
    // [ default ] interface _IAgSnPt3DModel
    // interface IAgSnPointing
    // interface IAgSnPt3DModel

struct __declspec(uuid("94066029-ad3f-4161-ba46-15f8dd046528"))
_IAgSnPt3DModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttachName,put=PutAttachName))
    _bstr_t AttachName;
    __declspec(property(get=GetAvailableElements))
    SAFEARRAY * AvailableElements;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAttachName ( );
    void PutAttachName (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableElements ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttachName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AttachName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableElements (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("a072c2c4-48b5-49ca-9f4a-08ced9dc5d91"))
IAgSnPt3DModel : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAttachName,put=PutAttachName))
    _bstr_t AttachName;
    __declspec(property(get=GetAvailableElements))
    SAFEARRAY * AvailableElements;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAttachName ( );
    void PutAttachName (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableElements ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttachName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AttachName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableElements (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("dbe60b92-8a7c-412d-bddb-1e784ae38202"))
AgSnPtSpinning;
    // [ default ] interface _IAgSnPtSpinning
    // interface IAgSnPointing
    // interface IAgSnPtSpinning

enum AgESnScanMode
{
    eSnUnidirectional = 0,
    eSnBidirectional = 1,
    eSnContinuous = 2
};

struct __declspec(uuid("58bc17b7-c808-49b1-b6eb-2178a3d1ee17"))
_IAgSnPtSpinning : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSpinAxisAzimuth,put=PutSpinAxisAzimuth))
    _variant_t SpinAxisAzimuth;
    __declspec(property(get=GetSpinAxisElevation,put=PutSpinAxisElevation))
    _variant_t SpinAxisElevation;
    __declspec(property(get=GetSpinAxisConeAngle,put=PutSpinAxisConeAngle))
    _variant_t SpinAxisConeAngle;
    __declspec(property(get=GetScanMode,put=PutScanMode))
    enum AgESnScanMode ScanMode;
    __declspec(property(get=GetClockAngleStart,put=PutClockAngleStart))
    _variant_t ClockAngleStart;
    __declspec(property(get=GetClockAngleStop,put=PutClockAngleStop))
    _variant_t ClockAngleStop;
    __declspec(property(get=GetSpinRate,put=PutSpinRate))
    double SpinRate;
    __declspec(property(get=GetOffsetAngle,put=PutOffsetAngle))
    _variant_t OffsetAngle;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetSpinAxisAzimuth ( );
    void PutSpinAxisAzimuth (
        const _variant_t & pVal );
    _variant_t GetSpinAxisElevation ( );
    void PutSpinAxisElevation (
        const _variant_t & pVal );
    _variant_t GetSpinAxisConeAngle ( );
    void PutSpinAxisConeAngle (
        const _variant_t & pVal );
    enum AgESnScanMode GetScanMode ( );
    void PutScanMode (
        enum AgESnScanMode pVal );
    _variant_t GetClockAngleStart ( );
    void PutClockAngleStart (
        const _variant_t & pVal );
    _variant_t GetClockAngleStop ( );
    void PutClockAngleStop (
        const _variant_t & pVal );
    double GetSpinRate ( );
    void PutSpinRate (
        double pVal );
    _variant_t GetOffsetAngle ( );
    void PutOffsetAngle (
        const _variant_t & pVal );
    HRESULT SetClockAngles (
        const _variant_t & Start,
        const _variant_t & Stop );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpinAxisAzimuth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SpinAxisAzimuth (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SpinAxisElevation (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SpinAxisElevation (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SpinAxisConeAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SpinAxisConeAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ScanMode (
        /*[out,retval]*/ enum AgESnScanMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ScanMode (
        /*[in]*/ enum AgESnScanMode pVal ) = 0;
      virtual HRESULT __stdcall get_ClockAngleStart (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ClockAngleStart (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ClockAngleStop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ClockAngleStop (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SpinRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpinRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetClockAngles (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
};

struct __declspec(uuid("3ecdf021-e0e3-4fa0-a4a6-1a321b259fd7"))
IAgSnPtSpinning : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSpinAxisAzimuth,put=PutSpinAxisAzimuth))
    _variant_t SpinAxisAzimuth;
    __declspec(property(get=GetSpinAxisElevation,put=PutSpinAxisElevation))
    _variant_t SpinAxisElevation;
    __declspec(property(get=GetSpinAxisConeAngle,put=PutSpinAxisConeAngle))
    _variant_t SpinAxisConeAngle;
    __declspec(property(get=GetScanMode,put=PutScanMode))
    enum AgESnScanMode ScanMode;
    __declspec(property(get=GetClockAngleStart,put=PutClockAngleStart))
    _variant_t ClockAngleStart;
    __declspec(property(get=GetClockAngleStop,put=PutClockAngleStop))
    _variant_t ClockAngleStop;
    __declspec(property(get=GetSpinRate,put=PutSpinRate))
    double SpinRate;
    __declspec(property(get=GetOffsetAngle,put=PutOffsetAngle))
    _variant_t OffsetAngle;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetSpinAxisAzimuth ( );
    void PutSpinAxisAzimuth (
        const _variant_t & pVal );
    _variant_t GetSpinAxisElevation ( );
    void PutSpinAxisElevation (
        const _variant_t & pVal );
    _variant_t GetSpinAxisConeAngle ( );
    void PutSpinAxisConeAngle (
        const _variant_t & pVal );
    enum AgESnScanMode GetScanMode ( );
    void PutScanMode (
        enum AgESnScanMode pVal );
    _variant_t GetClockAngleStart ( );
    void PutClockAngleStart (
        const _variant_t & pVal );
    _variant_t GetClockAngleStop ( );
    void PutClockAngleStop (
        const _variant_t & pVal );
    double GetSpinRate ( );
    void PutSpinRate (
        double pVal );
    _variant_t GetOffsetAngle ( );
    void PutOffsetAngle (
        const _variant_t & pVal );
    HRESULT SetClockAngles (
        const _variant_t & Start,
        const _variant_t & Stop );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SpinAxisAzimuth (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SpinAxisAzimuth (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SpinAxisElevation (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SpinAxisElevation (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SpinAxisConeAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SpinAxisConeAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ScanMode (
        /*[out,retval]*/ enum AgESnScanMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ScanMode (
        /*[in]*/ enum AgESnScanMode pVal ) = 0;
      virtual HRESULT __stdcall get_ClockAngleStart (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ClockAngleStart (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ClockAngleStop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ClockAngleStop (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SpinRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpinRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetClockAngles (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
};

struct __declspec(uuid("65a8159b-7b55-4741-847f-4abe13ca8aca"))
AgSnPtTargeted;
    // [ default ] interface _IAgSnPtTargeted
    // interface IAgSnPointing
    // interface IAgSnPtTargeted

enum AgESnPtTrgtBsightType
{
    eSnPtTrgtBsightTracking = 0,
    eSnPtTrgtBsightFixed = 1
};

struct __declspec(uuid("c4c6092f-8175-4059-bec0-46036193f187"))
IAgSnPtTrgtBsight : IUnknown
{};

struct __declspec(uuid("66be9559-5a69-4ef0-9bed-d09d954b12da"))
IAgAccessTime : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetTarget))
    _bstr_t Target;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    _bstr_t GetTarget ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("a82fc44e-09c0-4c90-adeb-5f501082f196"))
IAgAccessTimeCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgAccessTimePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgAccessTimePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgAccessTime * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
};

struct __declspec(uuid("aa5fb6f6-6cde-42b7-9f37-fa3d1b1bc257"))
IAgScheduleTime : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetTarget,put=PutTarget))
    _bstr_t Target;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    _bstr_t GetTarget ( );
    void PutTarget (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Target (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("9330afa9-99f7-428b-bf12-8c8640e7bc5b"))
IAgScheduleTimeCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgScheduleTimePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgScheduleTimePtr Add (
        const _variant_t & Start,
        const _variant_t & Stop,
        _bstr_t Name );
    HRESULT RemoveIndex (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT RemoveSchedule (
        const _variant_t & Start,
        const _variant_t & Stop,
        _bstr_t Name );
    IAgScheduleTimePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Deconflict ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgScheduleTime * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveIndex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveSchedule (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgScheduleTime * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Deconflict ( ) = 0;
};

struct __declspec(uuid("773e93dc-bd46-4f45-87a8-5df021633423"))
IAgSnTarget : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

enum AgEEventDetection
{
    eEventDetectionUnknown = -1,
    eEventDetectionNoSubSampling = 0,
    eEventDetectionUseSubSampling = 1
};

struct __declspec(uuid("ea9c9980-a91c-4d3f-be54-8dda3d951175"))
IAgEventDetectionStrategy : IUnknown
{};

struct __declspec(uuid("c9e809d2-0e9a-49ee-887f-074863db0e56"))
IAgAccessEventDetection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEEventDetection Type;
    __declspec(property(get=GetSupportedTypes))
    SAFEARRAY * SupportedTypes;
    __declspec(property(get=GetStrategy))
    IAgEventDetectionStrategyPtr Strategy;

    //
    // Wrapper methods for error-handling
    //

    enum AgEEventDetection GetType ( );
    HRESULT SetType (
        enum AgEEventDetection EventDetection );
    VARIANT_BOOL IsTypeSupported (
        enum AgEEventDetection EventDetection );
    SAFEARRAY * GetSupportedTypes ( );
    IAgEventDetectionStrategyPtr GetStrategy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEEventDetection * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum AgEEventDetection EventDetection ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgEEventDetection EventDetection,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Strategy (
        /*[out,retval]*/ struct IAgEventDetectionStrategy * * ppVal ) = 0;
};

enum AgESamplingMethod
{
    eSamplingMethodUnknown = -1,
    eSamplingMethodAdaptive = 0,
    eSamplingMethodFixedStep = 1
};

struct __declspec(uuid("2e961d4d-192d-4167-8421-6a33ecfd22df"))
IAgSamplingMethodStrategy : IUnknown
{};

struct __declspec(uuid("5279bd98-84e6-448c-b63c-9cb345711588"))
IAgAccessSampling : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgESamplingMethod Type;
    __declspec(property(get=GetSupportedTypes))
    SAFEARRAY * SupportedTypes;
    __declspec(property(get=GetStrategy))
    IAgSamplingMethodStrategyPtr Strategy;

    //
    // Wrapper methods for error-handling
    //

    enum AgESamplingMethod GetType ( );
    HRESULT SetType (
        enum AgESamplingMethod SamplingMethod );
    VARIANT_BOOL IsTypeSupported (
        enum AgESamplingMethod SamplingMethod );
    SAFEARRAY * GetSupportedTypes ( );
    IAgSamplingMethodStrategyPtr GetStrategy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgESamplingMethod * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum AgESamplingMethod SamplingMethod ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgESamplingMethod SamplingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Strategy (
        /*[out,retval]*/ struct IAgSamplingMethodStrategy * * ppVal ) = 0;
};

struct __declspec(uuid("9aee1c5d-3493-44b3-a612-15658570b432"))
IAgAccessAdvanced : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAberrationType,put=PutAberrationType))
    enum AgEAberrationType AberrationType;
    __declspec(property(get=GetTimeDelayConvergence,put=PutTimeDelayConvergence))
    double TimeDelayConvergence;
    __declspec(property(get=GetEventDetection))
    IAgAccessEventDetectionPtr EventDetection;
    __declspec(property(get=GetSampling))
    IAgAccessSamplingPtr Sampling;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAberrationType GetAberrationType ( );
    void PutAberrationType (
        enum AgEAberrationType pVal );
    double GetTimeDelayConvergence ( );
    void PutTimeDelayConvergence (
        double pVal );
    IAgAccessEventDetectionPtr GetEventDetection ( );
    IAgAccessSamplingPtr GetSampling ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AberrationType (
        /*[out,retval]*/ enum AgEAberrationType * pVal ) = 0;
      virtual HRESULT __stdcall put_AberrationType (
        /*[in]*/ enum AgEAberrationType pVal ) = 0;
      virtual HRESULT __stdcall get_TimeDelayConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeDelayConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EventDetection (
        /*[out,retval]*/ struct IAgAccessEventDetection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgAccessSampling * * ppVal ) = 0;
};

struct __declspec(uuid("6074fa10-2ea9-4d24-885f-40c98b7f1f70"))
IAgSnAccessAdvanced : IAgAccessAdvanced
{};

struct __declspec(uuid("fc2422aa-2e8b-4432-a8a1-cce055352100"))
AgSnPtExternal;
    // [ default ] interface _IAgSnPtExternal
    // interface IAgSnPointing
    // interface IAgSnPtExternal

struct __declspec(uuid("30632d11-d818-4470-846c-1a1f915ac78b"))
_IAgSnPtExternal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("b99c2a9b-e615-48db-b681-b550bf3bded5"))
IAgSnPtExternal : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("be5a9e84-4f89-4f3e-9361-bce300f88c9c"))
AgSnPtTrgtBsightTrack;
    // [ default ] interface _IAgSnPtTrgtBsightTrack
    // interface IAgSnPtTrgtBsight
    // interface IAgSnPtTrgtBsightTrack

enum AgEBoresightType
{
    eBoresightHold = 0,
    eBoresightLevel = 1,
    eBoresightRotate = 2
};

enum AgETrackModeType
{
    eTrackModeReceive = 0,
    eTrackModeTransmit = 1,
    eTrackModeTranspond = 2
};

struct __declspec(uuid("e503d4ad-3fb8-40e8-9e90-e7ef8113a71e"))
_IAgSnPtTrgtBsightTrack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAboutBoresight,put=PutAboutBoresight))
    enum AgEBoresightType AboutBoresight;
    __declspec(property(get=GetTrackMode,put=PutTrackMode))
    enum AgETrackModeType TrackMode;

    //
    // Wrapper methods for error-handling
    //

    enum AgEBoresightType GetAboutBoresight ( );
    void PutAboutBoresight (
        enum AgEBoresightType pVal );
    enum AgETrackModeType GetTrackMode ( );
    void PutTrackMode (
        enum AgETrackModeType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AboutBoresight (
        /*[out,retval]*/ enum AgEBoresightType * pVal ) = 0;
      virtual HRESULT __stdcall put_AboutBoresight (
        /*[in]*/ enum AgEBoresightType pVal ) = 0;
      virtual HRESULT __stdcall get_TrackMode (
        /*[out,retval]*/ enum AgETrackModeType * pVal ) = 0;
      virtual HRESULT __stdcall put_TrackMode (
        /*[in]*/ enum AgETrackModeType pVal ) = 0;
};

struct __declspec(uuid("015b0fdd-d5ae-4244-96b4-fcc6039fbee5"))
IAgSnPtTrgtBsightTrack : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAboutBoresight,put=PutAboutBoresight))
    enum AgEBoresightType AboutBoresight;
    __declspec(property(get=GetTrackMode,put=PutTrackMode))
    enum AgETrackModeType TrackMode;

    //
    // Wrapper methods for error-handling
    //

    enum AgEBoresightType GetAboutBoresight ( );
    void PutAboutBoresight (
        enum AgEBoresightType pVal );
    enum AgETrackModeType GetTrackMode ( );
    void PutTrackMode (
        enum AgETrackModeType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AboutBoresight (
        /*[out,retval]*/ enum AgEBoresightType * pVal ) = 0;
      virtual HRESULT __stdcall put_AboutBoresight (
        /*[in]*/ enum AgEBoresightType pVal ) = 0;
      virtual HRESULT __stdcall get_TrackMode (
        /*[out,retval]*/ enum AgETrackModeType * pVal ) = 0;
      virtual HRESULT __stdcall put_TrackMode (
        /*[in]*/ enum AgETrackModeType pVal ) = 0;
};

struct __declspec(uuid("9b505f65-9b1c-4cb7-bdb8-eac649c20b0a"))
AgSnPtTrgtBsightFixed;
    // [ default ] interface _IAgSnPtTrgtBsightFixed
    // interface IAgSnPtTrgtBsight
    // interface IAgSnPtTrgtBsightFixed

struct __declspec(uuid("24fbd2b8-751e-4f58-84e9-03c33ef1b52e"))
_IAgSnPtTrgtBsightFixed : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
};

struct __declspec(uuid("bb24b197-56f9-48d2-bc13-e1c50f88bae2"))
IAgSnPtTrgtBsightFixed : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgOrientationPtr GetOrientation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
};

struct __declspec(uuid("ea764e2b-b33e-4350-adbc-f67b94d30078"))
AgSnTargetCollection;
    // [ default ] interface IUnknown
    // interface IAgSnTargetCollection

struct __declspec(uuid("15b54b86-202e-42c7-8668-287cb5547ca1"))
AgSnTarget;
    // [ default ] interface _IAgSnTarget
    // interface IAgSnTarget

struct __declspec(uuid("b7cb1d72-c532-4521-8e08-f38929526173"))
_IAgSnTarget : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("380891a4-caae-4539-995b-9b123b3396fa"))
AgAccessTime;
    // [ default ] interface _IAgAccessTime
    // interface IAgAccessTime

struct __declspec(uuid("ff24a4fe-af56-4f3d-9ad0-33699a67d399"))
_IAgAccessTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetTarget))
    _bstr_t Target;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    _bstr_t GetTarget ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("4288ba42-f822-4b77-b76c-e9989fccc77f"))
AgScheduleTime;
    // [ default ] interface _IAgScheduleTime
    // interface IAgScheduleTime

struct __declspec(uuid("5b321dc2-5bbf-4e1d-8421-e76740eb1069"))
_IAgScheduleTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetTarget,put=PutTarget))
    _bstr_t Target;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    _bstr_t GetTarget ( );
    void PutTarget (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Target (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("74b507fa-8008-440e-87f5-e2469c57d97e"))
AgSnAzElMaskFile;
    // [ default ] interface _IAgSnAzElMaskFile
    // interface IAgAzElMaskData
    // interface IAgSnAzElMaskFile

enum AgESnAzElBsightAxisType
{
    ePlus_MinusX = 0,
    ePlus_MinusY = 1,
    ePlus_MinusZ = 2
};

struct __declspec(uuid("6a2b42aa-8254-44df-a50e-2f8417ca7ef9"))
_IAgSnAzElMaskFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename))
    _bstr_t Filename;
    __declspec(property(get=GetBoresightAxis,put=PutBoresightAxis))
    enum AgESnAzElBsightAxisType BoresightAxis;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    enum AgESnAzElBsightAxisType GetBoresightAxis ( );
    void PutBoresightAxis (
        enum AgESnAzElBsightAxisType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BoresightAxis (
        /*[out,retval]*/ enum AgESnAzElBsightAxisType * pVal ) = 0;
      virtual HRESULT __stdcall put_BoresightAxis (
        /*[in]*/ enum AgESnAzElBsightAxisType pVal ) = 0;
};

struct __declspec(uuid("eb7dd530-8b2a-4633-8ca6-3b8f532e1443"))
IAgAzElMaskData : IUnknown
{};

struct __declspec(uuid("dd64a6ac-ee5c-474a-9c78-b701451150d9"))
IAgSnAzElMaskFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename))
    _bstr_t Filename;
    __declspec(property(get=GetBoresightAxis,put=PutBoresightAxis))
    enum AgESnAzElBsightAxisType BoresightAxis;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    enum AgESnAzElBsightAxisType GetBoresightAxis ( );
    void PutBoresightAxis (
        enum AgESnAzElBsightAxisType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BoresightAxis (
        /*[out,retval]*/ enum AgESnAzElBsightAxisType * pVal ) = 0;
      virtual HRESULT __stdcall put_BoresightAxis (
        /*[in]*/ enum AgESnAzElBsightAxisType pVal ) = 0;
};

struct __declspec(uuid("9e41a2ae-aa50-4225-a03c-c2847d1be6a0"))
AgSnGraphics;
    // [ default ] interface _IAgSnGraphics
    // interface IAgSnGraphics

enum AgEIntersectionType
{
    eIntersectionCentralBody = 0,
    eIntersectionNone = 1,
    eIntersectionTerrain = 2
};

enum AgESnProjectionDistanceType
{
    eConstantAlt = 0,
    eConstantRangeFromParent = 1,
    eObjectAlt = 2,
    eRangeConstraint = 3
};

struct __declspec(uuid("19ab9f70-d185-47bf-bb3a-04116d1214ec"))
IAgDisplayDistance : IUnknown
{};

struct __declspec(uuid("cfb12e49-fd1b-4c67-af55-1f77e5204b8a"))
IAgSnProjection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPersistence,put=PutPersistence))
    double Persistence;
    __declspec(property(get=GetForwardPersistence,put=PutForwardPersistence))
    VARIANT_BOOL ForwardPersistence;
    __declspec(property(get=GetProjectAtAltObject,put=PutProjectAtAltObject))
    _bstr_t ProjectAtAltObject;
    __declspec(property(get=GetIntersectionType,put=PutIntersectionType))
    enum AgEIntersectionType IntersectionType;
    __declspec(property(get=GetDistanceType,put=PutDistanceType))
    enum AgESnProjectionDistanceType DistanceType;
    __declspec(property(get=GetDistanceData))
    IAgDisplayDistancePtr DistanceData;
    __declspec(property(get=GetFillPersistence,put=PutFillPersistence))
    VARIANT_BOOL FillPersistence;
    __declspec(property(get=GetUseConstraints,put=PutUseConstraints))
    VARIANT_BOOL UseConstraints;
    __declspec(property(get=GetShowOn2DMap,put=PutShowOn2DMap))
    VARIANT_BOOL ShowOn2DMap;
    __declspec(property(get=GetUseDistance,put=PutUseDistance))
    VARIANT_BOOL UseDistance;

    //
    // Wrapper methods for error-handling
    //

    double GetPersistence ( );
    void PutPersistence (
        double pVal );
    VARIANT_BOOL GetForwardPersistence ( );
    void PutForwardPersistence (
        VARIANT_BOOL pVal );
    _bstr_t GetProjectAtAltObject ( );
    void PutProjectAtAltObject (
        _bstr_t pVal );
    enum AgEIntersectionType GetIntersectionType ( );
    void PutIntersectionType (
        enum AgEIntersectionType pVal );
    enum AgESnProjectionDistanceType GetDistanceType ( );
    void PutDistanceType (
        enum AgESnProjectionDistanceType pVal );
    IAgDisplayDistancePtr GetDistanceData ( );
    VARIANT_BOOL GetFillPersistence ( );
    void PutFillPersistence (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseConstraints ( );
    void PutUseConstraints (
        VARIANT_BOOL pVal );
    SAFEARRAY * AvailableConstraints ( );
    SAFEARRAY * EnabledConstraints ( );
    HRESULT EnableConstraint (
        _bstr_t ConstraintName );
    HRESULT DisableConstraint (
        _bstr_t ConstraintName );
    SAFEARRAY * AvailableAltitudeObjects ( );
    VARIANT_BOOL GetShowOn2DMap ( );
    void PutShowOn2DMap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseDistance ( );
    void PutUseDistance (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Persistence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Persistence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ForwardPersistence (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ForwardPersistence (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectAtAltObject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProjectAtAltObject (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionType (
        /*[out,retval]*/ enum AgEIntersectionType * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionType (
        /*[in]*/ enum AgEIntersectionType pVal ) = 0;
      virtual HRESULT __stdcall get_DistanceType (
        /*[out,retval]*/ enum AgESnProjectionDistanceType * pVal ) = 0;
      virtual HRESULT __stdcall put_DistanceType (
        /*[in]*/ enum AgESnProjectionDistanceType pVal ) = 0;
      virtual HRESULT __stdcall get_DistanceData (
        /*[out,retval]*/ struct IAgDisplayDistance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillPersistence (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillPersistence (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseConstraints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseConstraints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableConstraints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EnabledConstraints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EnableConstraint (
        /*[in]*/ BSTR ConstraintName ) = 0;
      virtual HRESULT __stdcall raw_DisableConstraint (
        /*[in]*/ BSTR ConstraintName ) = 0;
      virtual HRESULT __stdcall raw_AvailableAltitudeObjects (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowOn2DMap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowOn2DMap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseDistance (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseDistance (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

enum AgEGraphicsFillStyle
{
    eGraphicsFillStyleSolid = 0,
    eGraphicsFillStyleVerticalStripe = 1,
    eGraphicsFillStyleHorizontalStripe = 2,
    eGraphicsFillStyleDiagonalStripe1 = 3,
    eGraphicsFillStyleDiagonalStripe2 = 4,
    eGraphicsFillStyleHatch = 5,
    eGraphicsFillStyleDiagonalHatch = 6,
    eGraphicsFillStyleScreen = 7
};

struct __declspec(uuid("4d4c1eab-8c8c-4a20-90f8-477ff63792d7"))
_IAgSnGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFromScenario,put=PutInheritFromScenario))
    VARIANT_BOOL InheritFromScenario;
    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetEnableBoresightGfx,put=PutEnableBoresightGfx))
    VARIANT_BOOL EnableBoresightGfx;
    __declspec(property(get=GetBoresightColor,put=PutBoresightColor))
    OLE_COLOR BoresightColor;
    __declspec(property(get=GetBoresightMarkerStyle,put=PutBoresightMarkerStyle))
    _bstr_t BoresightMarkerStyle;
    __declspec(property(get=GetProjection))
    IAgSnProjectionPtr Projection;
    __declspec(property(get=GetFillVisible,put=PutFillVisible))
    VARIANT_BOOL FillVisible;
    __declspec(property(get=GetFillStyle,put=PutFillStyle))
    enum AgEGraphicsFillStyle FillStyle;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFromScenario ( );
    void PutInheritFromScenario (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetEnableBoresightGfx ( );
    void PutEnableBoresightGfx (
        VARIANT_BOOL pVal );
    OLE_COLOR GetBoresightColor ( );
    void PutBoresightColor (
        OLE_COLOR pVal );
    _bstr_t GetBoresightMarkerStyle ( );
    void PutBoresightMarkerStyle (
        _bstr_t pVal );
    IAgSnProjectionPtr GetProjection ( );
    VARIANT_BOOL GetFillVisible ( );
    void PutFillVisible (
        VARIANT_BOOL pVal );
    enum AgEGraphicsFillStyle GetFillStyle ( );
    void PutFillStyle (
        enum AgEGraphicsFillStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFromScenario (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFromScenario (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_EnableBoresightGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableBoresightGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BoresightColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BoresightColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BoresightMarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BoresightMarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ struct IAgSnProjection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ enum AgEGraphicsFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ enum AgEGraphicsFillStyle pVal ) = 0;
};

struct __declspec(uuid("5910fc8b-8026-4a90-99db-d2addae61829"))
IAgSnGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFromScenario,put=PutInheritFromScenario))
    VARIANT_BOOL InheritFromScenario;
    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetEnableBoresightGfx,put=PutEnableBoresightGfx))
    VARIANT_BOOL EnableBoresightGfx;
    __declspec(property(get=GetBoresightColor,put=PutBoresightColor))
    OLE_COLOR BoresightColor;
    __declspec(property(get=GetBoresightMarkerStyle,put=PutBoresightMarkerStyle))
    _bstr_t BoresightMarkerStyle;
    __declspec(property(get=GetProjection))
    IAgSnProjectionPtr Projection;
    __declspec(property(get=GetFillVisible,put=PutFillVisible))
    VARIANT_BOOL FillVisible;
    __declspec(property(get=GetFillStyle,put=PutFillStyle))
    enum AgEGraphicsFillStyle FillStyle;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFromScenario ( );
    void PutInheritFromScenario (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetEnableBoresightGfx ( );
    void PutEnableBoresightGfx (
        VARIANT_BOOL pVal );
    OLE_COLOR GetBoresightColor ( );
    void PutBoresightColor (
        OLE_COLOR pVal );
    _bstr_t GetBoresightMarkerStyle ( );
    void PutBoresightMarkerStyle (
        _bstr_t pVal );
    IAgSnProjectionPtr GetProjection ( );
    VARIANT_BOOL GetFillVisible ( );
    void PutFillVisible (
        VARIANT_BOOL pVal );
    enum AgEGraphicsFillStyle GetFillStyle ( );
    void PutFillStyle (
        enum AgEGraphicsFillStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFromScenario (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFromScenario (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_EnableBoresightGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableBoresightGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BoresightColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BoresightColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_BoresightMarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BoresightMarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ struct IAgSnProjection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ enum AgEGraphicsFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ enum AgEGraphicsFillStyle pVal ) = 0;
};

struct __declspec(uuid("76bcc217-8bc9-4437-93b1-550a14d76d7f"))
AgSnProjection;
    // [ default ] interface _IAgSnProjection
    // interface IAgSnProjection

struct __declspec(uuid("efd204da-5ebb-4ab4-a3fb-ab317ffb4efe"))
_IAgSnProjection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPersistence,put=PutPersistence))
    double Persistence;
    __declspec(property(get=GetForwardPersistence,put=PutForwardPersistence))
    VARIANT_BOOL ForwardPersistence;
    __declspec(property(get=GetProjectAtAltObject,put=PutProjectAtAltObject))
    _bstr_t ProjectAtAltObject;
    __declspec(property(get=GetIntersectionType,put=PutIntersectionType))
    enum AgEIntersectionType IntersectionType;
    __declspec(property(get=GetUseConstraints,put=PutUseConstraints))
    VARIANT_BOOL UseConstraints;
    __declspec(property(get=GetDistanceType,put=PutDistanceType))
    enum AgESnProjectionDistanceType DistanceType;
    __declspec(property(get=GetDistanceData))
    IAgDisplayDistancePtr DistanceData;
    __declspec(property(get=GetFillPersistence,put=PutFillPersistence))
    VARIANT_BOOL FillPersistence;
    __declspec(property(get=GetShowOn2DMap,put=PutShowOn2DMap))
    VARIANT_BOOL ShowOn2DMap;
    __declspec(property(get=GetUseDistance,put=PutUseDistance))
    VARIANT_BOOL UseDistance;

    //
    // Wrapper methods for error-handling
    //

    double GetPersistence ( );
    void PutPersistence (
        double pVal );
    VARIANT_BOOL GetForwardPersistence ( );
    void PutForwardPersistence (
        VARIANT_BOOL pVal );
    _bstr_t GetProjectAtAltObject ( );
    void PutProjectAtAltObject (
        _bstr_t pVal );
    enum AgEIntersectionType GetIntersectionType ( );
    void PutIntersectionType (
        enum AgEIntersectionType pVal );
    VARIANT_BOOL GetUseConstraints ( );
    void PutUseConstraints (
        VARIANT_BOOL pVal );
    enum AgESnProjectionDistanceType GetDistanceType ( );
    void PutDistanceType (
        enum AgESnProjectionDistanceType pVal );
    IAgDisplayDistancePtr GetDistanceData ( );
    VARIANT_BOOL GetFillPersistence ( );
    void PutFillPersistence (
        VARIANT_BOOL pVal );
    SAFEARRAY * AvailableAltitudeObjects ( );
    SAFEARRAY * AvailableConstraints ( );
    HRESULT EnableConstraint (
        _bstr_t ConstraintName );
    SAFEARRAY * EnabledConstraints ( );
    HRESULT DisableConstraint (
        _bstr_t ConstraintName );
    VARIANT_BOOL GetShowOn2DMap ( );
    void PutShowOn2DMap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseDistance ( );
    void PutUseDistance (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Persistence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Persistence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ForwardPersistence (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ForwardPersistence (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectAtAltObject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ProjectAtAltObject (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IntersectionType (
        /*[out,retval]*/ enum AgEIntersectionType * pVal ) = 0;
      virtual HRESULT __stdcall put_IntersectionType (
        /*[in]*/ enum AgEIntersectionType pVal ) = 0;
      virtual HRESULT __stdcall get_UseConstraints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseConstraints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DistanceType (
        /*[out,retval]*/ enum AgESnProjectionDistanceType * pVal ) = 0;
      virtual HRESULT __stdcall put_DistanceType (
        /*[in]*/ enum AgESnProjectionDistanceType pVal ) = 0;
      virtual HRESULT __stdcall get_DistanceData (
        /*[out,retval]*/ struct IAgDisplayDistance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillPersistence (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillPersistence (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableAltitudeObjects (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AvailableConstraints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_EnableConstraint (
        /*[in]*/ BSTR ConstraintName ) = 0;
      virtual HRESULT __stdcall raw_EnabledConstraints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_DisableConstraint (
        /*[in]*/ BSTR ConstraintName ) = 0;
      virtual HRESULT __stdcall get_ShowOn2DMap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowOn2DMap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseDistance (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseDistance (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("f9b8fd72-78d1-402b-9f57-bf00c0f93d8c"))
AgSnProjDisplayDistance;
    // [ default ] interface _IAgSnProjDisplayDistance
    // interface IAgDisplayDistance
    // interface IAgSnProjDisplayDistance

enum AgESnAltCrossingSides
{
    eAltCrossingUnknown = -1,
    eAltCrossingBothSides = 0,
    eAltCrossingOneSide = 1
};

enum AgESnAltCrossingDirection
{
    eDirectionUnknown = -1,
    eDirectionEither = 0,
    eDirectionInsideOut = 1,
    eDirectionOutsideIn = 2
};

struct __declspec(uuid("50cd607d-a143-4e70-8e42-3d570b73d658"))
_IAgSnProjDisplayDistance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    long NumberOfSteps;
    __declspec(property(get=GetProjectsThruCrossing,put=PutProjectsThruCrossing))
    VARIANT_BOOL ProjectsThruCrossing;
    __declspec(property(get=GetAltCrossingSides,put=PutAltCrossingSides))
    enum AgESnAltCrossingSides AltCrossingSides;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgESnAltCrossingDirection Direction;

    //
    // Wrapper methods for error-handling
    //

    double GetMin ( );
    void PutMin (
        double pVal );
    double GetMax ( );
    void PutMax (
        double pVal );
    long GetNumberOfSteps ( );
    void PutNumberOfSteps (
        long pVal );
    VARIANT_BOOL GetProjectsThruCrossing ( );
    void PutProjectsThruCrossing (
        VARIANT_BOOL pVal );
    enum AgESnAltCrossingSides GetAltCrossingSides ( );
    void PutAltCrossingSides (
        enum AgESnAltCrossingSides pVal );
    enum AgESnAltCrossingDirection GetDirection ( );
    void PutDirection (
        enum AgESnAltCrossingDirection pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectsThruCrossing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProjectsThruCrossing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltCrossingSides (
        /*[out,retval]*/ enum AgESnAltCrossingSides * pVal ) = 0;
      virtual HRESULT __stdcall put_AltCrossingSides (
        /*[in]*/ enum AgESnAltCrossingSides pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgESnAltCrossingDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgESnAltCrossingDirection pVal ) = 0;
};

struct __declspec(uuid("9d16fc7e-2efd-4443-b3a1-647c9ef9ebe8"))
IAgSnProjDisplayDistance : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    long NumberOfSteps;
    __declspec(property(get=GetProjectsThruCrossing,put=PutProjectsThruCrossing))
    VARIANT_BOOL ProjectsThruCrossing;
    __declspec(property(get=GetAltCrossingSides,put=PutAltCrossingSides))
    enum AgESnAltCrossingSides AltCrossingSides;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgESnAltCrossingDirection Direction;

    //
    // Wrapper methods for error-handling
    //

    double GetMin ( );
    void PutMin (
        double pVal );
    double GetMax ( );
    void PutMax (
        double pVal );
    long GetNumberOfSteps ( );
    void PutNumberOfSteps (
        long pVal );
    VARIANT_BOOL GetProjectsThruCrossing ( );
    void PutProjectsThruCrossing (
        VARIANT_BOOL pVal );
    enum AgESnAltCrossingSides GetAltCrossingSides ( );
    void PutAltCrossingSides (
        enum AgESnAltCrossingSides pVal );
    enum AgESnAltCrossingDirection GetDirection ( );
    void PutDirection (
        enum AgESnAltCrossingDirection pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectsThruCrossing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProjectsThruCrossing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltCrossingSides (
        /*[out,retval]*/ enum AgESnAltCrossingSides * pVal ) = 0;
      virtual HRESULT __stdcall put_AltCrossingSides (
        /*[in]*/ enum AgESnAltCrossingSides pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgESnAltCrossingDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgESnAltCrossingDirection pVal ) = 0;
};

struct __declspec(uuid("99fba698-d071-47d8-944e-dc4b5d3e935d"))
AgSnVO;
    // [ default ] interface _IAgSnVO
    // interface IAgSnVO

enum AgESnVOProjectionType
{
    eProjectionAllIntersections = 0,
    eProjectionEarthIntersections = 1,
    eProjectionNone = 2
};

enum AgESnVOPulseStyle
{
    ePulseStyleBox = 0,
    ePulseStyleNegBox = 1,
    ePulseStylePosBox = 2,
    ePulseStyleSine = 3,
    ePulseStyleNegSine = 4,
    ePulseStylePosSine = 5
};

enum AgESnVOPulseFrequencyPreset
{
    ePulseFrequencyFast = 0,
    ePulseFrequencyMedium = 1,
    ePulseFrequencySlow = 2,
    ePulseFrequencyCustom = 3
};

struct __declspec(uuid("d00e467e-2df9-41a2-8167-3afd0fbfd6bc"))
IAgSnVOPulse : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPulseVisible,put=PutPulseVisible))
    VARIANT_BOOL PulseVisible;
    __declspec(property(get=GetAmplitude,put=PutAmplitude))
    double Amplitude;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum AgESnVOPulseStyle Style;
    __declspec(property(get=GetEnableSmooth,put=PutEnableSmooth))
    VARIANT_BOOL EnableSmooth;
    __declspec(property(get=GetPreselFreq,put=PutPreselFreq))
    enum AgESnVOPulseFrequencyPreset PreselFreq;
    __declspec(property(get=GetFreqValue,put=PutFreqValue))
    double FreqValue;
    __declspec(property(get=GetFreqReverseDir,put=PutFreqReverseDir))
    VARIANT_BOOL FreqReverseDir;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPulseVisible ( );
    void PutPulseVisible (
        VARIANT_BOOL pVal );
    double GetAmplitude ( );
    void PutAmplitude (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    enum AgESnVOPulseStyle GetStyle ( );
    void PutStyle (
        enum AgESnVOPulseStyle pVal );
    VARIANT_BOOL GetEnableSmooth ( );
    void PutEnableSmooth (
        VARIANT_BOOL pVal );
    enum AgESnVOPulseFrequencyPreset GetPreselFreq ( );
    void PutPreselFreq (
        enum AgESnVOPulseFrequencyPreset pVal );
    double GetFreqValue ( );
    void PutFreqValue (
        double pVal );
    VARIANT_BOOL GetFreqReverseDir ( );
    void PutFreqReverseDir (
        VARIANT_BOOL pVal );
    HRESULT ResetToDefaults ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PulseVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PulseVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Amplitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Amplitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum AgESnVOPulseStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum AgESnVOPulseStyle pVal ) = 0;
      virtual HRESULT __stdcall get_EnableSmooth (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableSmooth (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PreselFreq (
        /*[out,retval]*/ enum AgESnVOPulseFrequencyPreset * pVal ) = 0;
      virtual HRESULT __stdcall put_PreselFreq (
        /*[in]*/ enum AgESnVOPulseFrequencyPreset pVal ) = 0;
      virtual HRESULT __stdcall get_FreqValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FreqValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FreqReverseDir (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FreqReverseDir (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetToDefaults ( ) = 0;
};

enum AgEAxisOffset
{
    eSensorRadius = 0,
    eBoresightOffset = 1
};

struct __declspec(uuid("cfa8546f-ecab-4d7d-98ff-f4770250bc29"))
IAgSnVOOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFromParentObj,put=PutInheritFromParentObj))
    VARIANT_BOOL InheritFromParentObj;
    __declspec(property(get=GetEnableTranslational,put=PutEnableTranslational))
    VARIANT_BOOL EnableTranslational;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetEnableAttachPoint,put=PutEnableAttachPoint))
    VARIANT_BOOL EnableAttachPoint;
    __declspec(property(get=GetAttachPtName,put=PutAttachPtName))
    _bstr_t AttachPtName;
    __declspec(property(get=GetAvailableAttachPoints))
    SAFEARRAY * AvailableAttachPoints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFromParentObj ( );
    void PutInheritFromParentObj (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableTranslational ( );
    void PutEnableTranslational (
        VARIANT_BOOL pVal );
    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    double GetAxisOffsetValue (
        enum AgEAxisOffset OffsetType );
    HRESULT SetAxisOffsetValue (
        enum AgEAxisOffset OffsetType,
        double AxisOffsetValue );
    VARIANT_BOOL GetEnableAttachPoint ( );
    void PutEnableAttachPoint (
        VARIANT_BOOL pVal );
    _bstr_t GetAttachPtName ( );
    void PutAttachPtName (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableAttachPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFromParentObj (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFromParentObj (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableTranslational (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableTranslational (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAxisOffsetValue (
        /*[in]*/ enum AgEAxisOffset OffsetType,
        /*[out,retval]*/ double * pNum ) = 0;
      virtual HRESULT __stdcall raw_SetAxisOffsetValue (
        /*[in]*/ enum AgEAxisOffset OffsetType,
        /*[in]*/ double AxisOffsetValue ) = 0;
      virtual HRESULT __stdcall get_EnableAttachPoint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAttachPoint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AttachPtName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AttachPtName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAttachPoints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgESnVOInheritFrom2D
{
    eSnVOInheritFrom2DUnknown = -1,
    eSnVOInheritFrom2DNo = 0,
    eSnVOInheritFrom2DYes = 1,
    eSnVOInheritFrom2DExtentOnly = 2
};

enum AgESnVOVisualAppearance
{
    eSnVOVisualAppearanceUnknown = -1,
    eSnVOVisualAppearanceOrigin = 0,
    eSnVOVisualAppearanceCenter = 1,
    eSnVOVisualAppearanceEnd = 2
};

enum AgESnVOTimeDependency
{
    eSnVOTimeDepUnknown = -1,
    eSnVOTimeDepConstant = 0,
    eSnVOTimeDepTimeVarying = 1
};

struct __declspec(uuid("da4304bd-818f-4279-a84f-8b95cf9197b1"))
IAgSnVOProjectionElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    _variant_t Time;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    void PutTime (
        const _variant_t & pVal );
    double GetDistance ( );
    void PutDistance (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("7355eae2-87e3-4c8e-a712-61594a450eb8"))
IAgSnVOSpaceProjectionCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgSnVOProjectionElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgSnVOProjectionElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgSnVOProjectionElementPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgSnVOProjectionElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAgSnVOProjectionElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("124318b6-b57d-48b4-915d-3956b4d64aed"))
IAgSnVOTargetProjectionCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgSnVOProjectionElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgSnVOProjectionElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgSnVOProjectionElementPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgSnVOProjectionElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAgSnVOProjectionElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("b35a781b-5657-4402-b9a1-b4fdbed337ee"))
_IAgSnVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSpaceProjectionIntervals))
    IAgSnVOSpaceProjectionCollectionPtr SpaceProjectionIntervals;
    __declspec(property(get=GetTargetProjectionIntervals))
    IAgSnVOTargetProjectionCollectionPtr TargetProjectionIntervals;
    __declspec(property(get=GetFillResolution,put=PutFillResolution))
    double FillResolution;
    __declspec(property(get=GetPersistProjectedLinesInSpace,put=PutPersistProjectedLinesInSpace))
    VARIANT_BOOL PersistProjectedLinesInSpace;
    __declspec(property(get=GetPersistPartialCentralBodyIntersectionLines,put=PutPersistPartialCentralBodyIntersectionLines))
    VARIANT_BOOL PersistPartialCentralBodyIntersectionLines;
    __declspec(property(get=GetBoresightMarkerVisible,put=PutBoresightMarkerVisible))
    VARIANT_BOOL BoresightMarkerVisible;
    __declspec(property(get=GetRadialLinesVisible,put=PutRadialLinesVisible))
    VARIANT_BOOL RadialLinesVisible;
    __declspec(property(get=GetTranslucentLinesVisible,put=PutTranslucentLinesVisible))
    VARIANT_BOOL TranslucentLinesVisible;
    __declspec(property(get=GetPercentTranslucency,put=PutPercentTranslucency))
    double PercentTranslucency;
    __declspec(property(get=GetProjectionType,put=PutProjectionType))
    enum AgESnVOProjectionType ProjectionType;
    __declspec(property(get=GetSpaceProjection,put=PutSpaceProjection))
    double SpaceProjection;
    __declspec(property(get=GetTargeting,put=PutTargeting))
    double Targeting;
    __declspec(property(get=GetEnableConstExtLength,put=PutEnableConstExtLength))
    VARIANT_BOOL EnableConstExtLength;
    __declspec(property(get=GetEnableRangeConstraint,put=PutEnableRangeConstraint))
    VARIANT_BOOL EnableRangeConstraint;
    __declspec(property(get=GetPulse))
    IAgSnVOPulsePtr Pulse;
    __declspec(property(get=GetVertexOffset))
    IAgSnVOOffsetPtr VertexOffset;
    __declspec(property(get=GetDataDisplays))
    IAgVODataDisplayCollectionPtr DataDisplays;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetFillVisible,put=PutFillVisible))
    VARIANT_BOOL FillVisible;
    __declspec(property(get=GetFillTranslucency,put=PutFillTranslucency))
    double FillTranslucency;
    __declspec(property(get=GetInheritFrom2D,put=PutInheritFrom2D))
    enum AgESnVOInheritFrom2D InheritFrom2D;
    __declspec(property(get=GetOptimizeVisualAppearance,put=PutOptimizeVisualAppearance))
    enum AgESnVOVisualAppearance OptimizeVisualAppearance;
    __declspec(property(get=GetTimeDependency,put=PutTimeDependency))
    enum AgESnVOTimeDependency TimeDependency;
    __declspec(property(get=GetIsTargeted))
    VARIANT_BOOL IsTargeted;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBoresightMarkerVisible ( );
    void PutBoresightMarkerVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRadialLinesVisible ( );
    void PutRadialLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTranslucentLinesVisible ( );
    void PutTranslucentLinesVisible (
        VARIANT_BOOL pVal );
    double GetPercentTranslucency ( );
    void PutPercentTranslucency (
        double pVal );
    enum AgESnVOProjectionType GetProjectionType ( );
    void PutProjectionType (
        enum AgESnVOProjectionType pVal );
    double GetSpaceProjection ( );
    void PutSpaceProjection (
        double pVal );
    double GetTargeting ( );
    void PutTargeting (
        double pVal );
    VARIANT_BOOL GetEnableConstExtLength ( );
    void PutEnableConstExtLength (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableRangeConstraint ( );
    void PutEnableRangeConstraint (
        VARIANT_BOOL pVal );
    IAgSnVOPulsePtr GetPulse ( );
    IAgSnVOOffsetPtr GetVertexOffset ( );
    IAgVODataDisplayCollectionPtr GetDataDisplays ( );
    IAgVOVectorPtr GetVector ( );
    VARIANT_BOOL GetFillVisible ( );
    void PutFillVisible (
        VARIANT_BOOL pVal );
    double GetFillTranslucency ( );
    void PutFillTranslucency (
        double pVal );
    enum AgESnVOInheritFrom2D GetInheritFrom2D ( );
    void PutInheritFrom2D (
        enum AgESnVOInheritFrom2D pVal );
    enum AgESnVOVisualAppearance GetOptimizeVisualAppearance ( );
    void PutOptimizeVisualAppearance (
        enum AgESnVOVisualAppearance pVal );
    enum AgESnVOTimeDependency GetTimeDependency ( );
    void PutTimeDependency (
        enum AgESnVOTimeDependency pVal );
    VARIANT_BOOL GetIsTargeted ( );
    IAgSnVOSpaceProjectionCollectionPtr GetSpaceProjectionIntervals ( );
    IAgSnVOTargetProjectionCollectionPtr GetTargetProjectionIntervals ( );
    double GetFillResolution ( );
    void PutFillResolution (
        double pVal );
    VARIANT_BOOL GetPersistProjectedLinesInSpace ( );
    void PutPersistProjectedLinesInSpace (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPersistPartialCentralBodyIntersectionLines ( );
    void PutPersistPartialCentralBodyIntersectionLines (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BoresightMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BoresightMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RadialLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RadialLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TranslucentLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TranslucentLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PercentTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PercentTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionType (
        /*[out,retval]*/ enum AgESnVOProjectionType * pVal ) = 0;
      virtual HRESULT __stdcall put_ProjectionType (
        /*[in]*/ enum AgESnVOProjectionType pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceProjection (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceProjection (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Targeting (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Targeting (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EnableConstExtLength (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableConstExtLength (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableRangeConstraint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableRangeConstraint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Pulse (
        /*[out,retval]*/ struct IAgSnVOPulse * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VertexOffset (
        /*[out,retval]*/ struct IAgSnVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplays (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppAgDataDisplays ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InheritFrom2D (
        /*[out,retval]*/ enum AgESnVOInheritFrom2D * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2D (
        /*[in]*/ enum AgESnVOInheritFrom2D pVal ) = 0;
      virtual HRESULT __stdcall get_OptimizeVisualAppearance (
        /*[out,retval]*/ enum AgESnVOVisualAppearance * pVal ) = 0;
      virtual HRESULT __stdcall put_OptimizeVisualAppearance (
        /*[in]*/ enum AgESnVOVisualAppearance pVal ) = 0;
      virtual HRESULT __stdcall get_TimeDependency (
        /*[out,retval]*/ enum AgESnVOTimeDependency * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeDependency (
        /*[in]*/ enum AgESnVOTimeDependency pVal ) = 0;
      virtual HRESULT __stdcall get_IsTargeted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceProjectionIntervals (
        /*[out,retval]*/ struct IAgSnVOSpaceProjectionCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TargetProjectionIntervals (
        /*[out,retval]*/ struct IAgSnVOTargetProjectionCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillResolution (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillResolution (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PersistProjectedLinesInSpace (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PersistProjectedLinesInSpace (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PersistPartialCentralBodyIntersectionLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PersistPartialCentralBodyIntersectionLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("a615c3aa-48ea-4694-95b8-ffc8242d660a"))
IAgSnVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBoresightMarkerVisible,put=PutBoresightMarkerVisible))
    VARIANT_BOOL BoresightMarkerVisible;
    __declspec(property(get=GetRadialLinesVisible,put=PutRadialLinesVisible))
    VARIANT_BOOL RadialLinesVisible;
    __declspec(property(get=GetTranslucentLinesVisible,put=PutTranslucentLinesVisible))
    VARIANT_BOOL TranslucentLinesVisible;
    __declspec(property(get=GetPercentTranslucency,put=PutPercentTranslucency))
    double PercentTranslucency;
    __declspec(property(get=GetProjectionType,put=PutProjectionType))
    enum AgESnVOProjectionType ProjectionType;
    __declspec(property(get=GetSpaceProjection,put=PutSpaceProjection))
    double SpaceProjection;
    __declspec(property(get=GetTargeting,put=PutTargeting))
    double Targeting;
    __declspec(property(get=GetEnableConstExtLength,put=PutEnableConstExtLength))
    VARIANT_BOOL EnableConstExtLength;
    __declspec(property(get=GetEnableRangeConstraint,put=PutEnableRangeConstraint))
    VARIANT_BOOL EnableRangeConstraint;
    __declspec(property(get=GetPulse))
    IAgSnVOPulsePtr Pulse;
    __declspec(property(get=GetVertexOffset))
    IAgSnVOOffsetPtr VertexOffset;
    __declspec(property(get=GetDataDisplays))
    IAgVODataDisplayCollectionPtr DataDisplays;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetFillVisible,put=PutFillVisible))
    VARIANT_BOOL FillVisible;
    __declspec(property(get=GetFillTranslucency,put=PutFillTranslucency))
    double FillTranslucency;
    __declspec(property(get=GetInheritFrom2D,put=PutInheritFrom2D))
    enum AgESnVOInheritFrom2D InheritFrom2D;
    __declspec(property(get=GetOptimizeVisualAppearance,put=PutOptimizeVisualAppearance))
    enum AgESnVOVisualAppearance OptimizeVisualAppearance;
    __declspec(property(get=GetTimeDependency,put=PutTimeDependency))
    enum AgESnVOTimeDependency TimeDependency;
    __declspec(property(get=GetIsTargeted))
    VARIANT_BOOL IsTargeted;
    __declspec(property(get=GetSpaceProjectionIntervals))
    IAgSnVOSpaceProjectionCollectionPtr SpaceProjectionIntervals;
    __declspec(property(get=GetTargetProjectionIntervals))
    IAgSnVOTargetProjectionCollectionPtr TargetProjectionIntervals;
    __declspec(property(get=GetFillResolution,put=PutFillResolution))
    double FillResolution;
    __declspec(property(get=GetPersistProjectedLinesInSpace,put=PutPersistProjectedLinesInSpace))
    VARIANT_BOOL PersistProjectedLinesInSpace;
    __declspec(property(get=GetPersistPartialCentralBodyIntersectionLines,put=PutPersistPartialCentralBodyIntersectionLines))
    VARIANT_BOOL PersistPartialCentralBodyIntersectionLines;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBoresightMarkerVisible ( );
    void PutBoresightMarkerVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRadialLinesVisible ( );
    void PutRadialLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTranslucentLinesVisible ( );
    void PutTranslucentLinesVisible (
        VARIANT_BOOL pVal );
    double GetPercentTranslucency ( );
    void PutPercentTranslucency (
        double pVal );
    enum AgESnVOProjectionType GetProjectionType ( );
    void PutProjectionType (
        enum AgESnVOProjectionType pVal );
    double GetSpaceProjection ( );
    void PutSpaceProjection (
        double pVal );
    double GetTargeting ( );
    void PutTargeting (
        double pVal );
    VARIANT_BOOL GetEnableConstExtLength ( );
    void PutEnableConstExtLength (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableRangeConstraint ( );
    void PutEnableRangeConstraint (
        VARIANT_BOOL pVal );
    IAgSnVOPulsePtr GetPulse ( );
    IAgSnVOOffsetPtr GetVertexOffset ( );
    IAgVODataDisplayCollectionPtr GetDataDisplays ( );
    IAgVOVectorPtr GetVector ( );
    VARIANT_BOOL GetFillVisible ( );
    void PutFillVisible (
        VARIANT_BOOL pVal );
    double GetFillTranslucency ( );
    void PutFillTranslucency (
        double pVal );
    enum AgESnVOInheritFrom2D GetInheritFrom2D ( );
    void PutInheritFrom2D (
        enum AgESnVOInheritFrom2D pVal );
    enum AgESnVOVisualAppearance GetOptimizeVisualAppearance ( );
    void PutOptimizeVisualAppearance (
        enum AgESnVOVisualAppearance pVal );
    enum AgESnVOTimeDependency GetTimeDependency ( );
    void PutTimeDependency (
        enum AgESnVOTimeDependency pVal );
    VARIANT_BOOL GetIsTargeted ( );
    IAgSnVOSpaceProjectionCollectionPtr GetSpaceProjectionIntervals ( );
    IAgSnVOTargetProjectionCollectionPtr GetTargetProjectionIntervals ( );
    double GetFillResolution ( );
    void PutFillResolution (
        double pVal );
    VARIANT_BOOL GetPersistProjectedLinesInSpace ( );
    void PutPersistProjectedLinesInSpace (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPersistPartialCentralBodyIntersectionLines ( );
    void PutPersistPartialCentralBodyIntersectionLines (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BoresightMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BoresightMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RadialLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RadialLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TranslucentLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TranslucentLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PercentTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PercentTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionType (
        /*[out,retval]*/ enum AgESnVOProjectionType * pVal ) = 0;
      virtual HRESULT __stdcall put_ProjectionType (
        /*[in]*/ enum AgESnVOProjectionType pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceProjection (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpaceProjection (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Targeting (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Targeting (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EnableConstExtLength (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableConstExtLength (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableRangeConstraint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableRangeConstraint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Pulse (
        /*[out,retval]*/ struct IAgSnVOPulse * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VertexOffset (
        /*[out,retval]*/ struct IAgSnVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplays (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppAgDataDisplays ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InheritFrom2D (
        /*[out,retval]*/ enum AgESnVOInheritFrom2D * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2D (
        /*[in]*/ enum AgESnVOInheritFrom2D pVal ) = 0;
      virtual HRESULT __stdcall get_OptimizeVisualAppearance (
        /*[out,retval]*/ enum AgESnVOVisualAppearance * pVal ) = 0;
      virtual HRESULT __stdcall put_OptimizeVisualAppearance (
        /*[in]*/ enum AgESnVOVisualAppearance pVal ) = 0;
      virtual HRESULT __stdcall get_TimeDependency (
        /*[out,retval]*/ enum AgESnVOTimeDependency * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeDependency (
        /*[in]*/ enum AgESnVOTimeDependency pVal ) = 0;
      virtual HRESULT __stdcall get_IsTargeted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SpaceProjectionIntervals (
        /*[out,retval]*/ struct IAgSnVOSpaceProjectionCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TargetProjectionIntervals (
        /*[out,retval]*/ struct IAgSnVOTargetProjectionCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillResolution (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillResolution (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PersistProjectedLinesInSpace (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PersistProjectedLinesInSpace (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PersistPartialCentralBodyIntersectionLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PersistPartialCentralBodyIntersectionLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("c2feb0a1-e4aa-47fb-be58-25e0c13c46a1"))
AgSnVOPulse;
    // [ default ] interface _IAgSnVOPulse
    // interface IAgSnVOPulse

struct __declspec(uuid("8bf001cd-0c75-473a-bd08-2f340805ccd6"))
_IAgSnVOPulse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPulseVisible,put=PutPulseVisible))
    VARIANT_BOOL PulseVisible;
    __declspec(property(get=GetAmplitude,put=PutAmplitude))
    double Amplitude;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum AgESnVOPulseStyle Style;
    __declspec(property(get=GetEnableSmooth,put=PutEnableSmooth))
    VARIANT_BOOL EnableSmooth;
    __declspec(property(get=GetPreselFreq,put=PutPreselFreq))
    enum AgESnVOPulseFrequencyPreset PreselFreq;
    __declspec(property(get=GetFreqValue,put=PutFreqValue))
    double FreqValue;
    __declspec(property(get=GetFreqReverseDir,put=PutFreqReverseDir))
    VARIANT_BOOL FreqReverseDir;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPulseVisible ( );
    void PutPulseVisible (
        VARIANT_BOOL pVal );
    double GetAmplitude ( );
    void PutAmplitude (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    enum AgESnVOPulseStyle GetStyle ( );
    void PutStyle (
        enum AgESnVOPulseStyle pVal );
    VARIANT_BOOL GetEnableSmooth ( );
    void PutEnableSmooth (
        VARIANT_BOOL pVal );
    enum AgESnVOPulseFrequencyPreset GetPreselFreq ( );
    void PutPreselFreq (
        enum AgESnVOPulseFrequencyPreset pVal );
    double GetFreqValue ( );
    void PutFreqValue (
        double pVal );
    VARIANT_BOOL GetFreqReverseDir ( );
    void PutFreqReverseDir (
        VARIANT_BOOL pVal );
    HRESULT ResetToDefaults ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PulseVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PulseVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Amplitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Amplitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum AgESnVOPulseStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum AgESnVOPulseStyle pVal ) = 0;
      virtual HRESULT __stdcall get_EnableSmooth (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableSmooth (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PreselFreq (
        /*[out,retval]*/ enum AgESnVOPulseFrequencyPreset * pVal ) = 0;
      virtual HRESULT __stdcall put_PreselFreq (
        /*[in]*/ enum AgESnVOPulseFrequencyPreset pVal ) = 0;
      virtual HRESULT __stdcall get_FreqValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FreqValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FreqReverseDir (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FreqReverseDir (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetToDefaults ( ) = 0;
};

struct __declspec(uuid("cd7d95c8-d390-4f70-aeb5-0d2287ccbc3b"))
AgSnVOOffset;
    // [ default ] interface _IAgSnVOOffset
    // interface IAgSnVOOffset

struct __declspec(uuid("cd66e232-b46b-463a-bd19-2da339a31a72"))
_IAgSnVOOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFromParentObj,put=PutInheritFromParentObj))
    VARIANT_BOOL InheritFromParentObj;
    __declspec(property(get=GetEnableTranslational,put=PutEnableTranslational))
    VARIANT_BOOL EnableTranslational;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetEnableAttachPoint,put=PutEnableAttachPoint))
    VARIANT_BOOL EnableAttachPoint;
    __declspec(property(get=GetAttachPtName,put=PutAttachPtName))
    _bstr_t AttachPtName;
    __declspec(property(get=GetAvailableAttachPoints))
    SAFEARRAY * AvailableAttachPoints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFromParentObj ( );
    void PutInheritFromParentObj (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableTranslational ( );
    void PutEnableTranslational (
        VARIANT_BOOL pVal );
    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    double GetAxisOffsetValue (
        enum AgEAxisOffset OffsetType );
    HRESULT SetAxisOffsetValue (
        enum AgEAxisOffset OffsetType,
        double AxisOffsetValue );
    VARIANT_BOOL GetEnableAttachPoint ( );
    void PutEnableAttachPoint (
        VARIANT_BOOL pVal );
    _bstr_t GetAttachPtName ( );
    void PutAttachPtName (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableAttachPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFromParentObj (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFromParentObj (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableTranslational (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableTranslational (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAxisOffsetValue (
        /*[in]*/ enum AgEAxisOffset OffsetType,
        /*[out,retval]*/ double * plVal ) = 0;
      virtual HRESULT __stdcall raw_SetAxisOffsetValue (
        /*[in]*/ enum AgEAxisOffset OffsetType,
        /*[in]*/ double AxisOffsetValue ) = 0;
      virtual HRESULT __stdcall get_EnableAttachPoint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAttachPoint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AttachPtName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AttachPtName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAttachPoints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("42076612-b22e-4bf8-955c-e8e528dff712"))
AgAccessCnstrTimeSlipRange;
    // [ default ] interface _IAgAccessCnstrTimeSlipRange
    // interface IAgAccessCnstrTimeSlipRange
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("9bd723d1-33e1-46ee-8e0a-ced732ba98a9"))
_IAgAccessCnstrTimeSlipRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLaunchWindowStart))
    _variant_t LaunchWindowStart;
    __declspec(property(get=GetLaunchWindowEnd))
    _variant_t LaunchWindowEnd;
    __declspec(property(get=GetRange))
    double Range;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLaunchWindowStart ( );
    _variant_t GetLaunchWindowEnd ( );
    double GetRange ( );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LaunchWindowStart (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_LaunchWindowEnd (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f169ff65-c2bf-45d3-b905-ac8943e1891e"))
IAgAccessCnstrTimeSlipRange : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetLaunchWindowStart))
    _variant_t LaunchWindowStart;
    __declspec(property(get=GetLaunchWindowEnd))
    _variant_t LaunchWindowEnd;
    __declspec(property(get=GetRange))
    double Range;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLaunchWindowStart ( );
    _variant_t GetLaunchWindowEnd ( );
    double GetRange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LaunchWindowStart (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_LaunchWindowEnd (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("e029fe26-bb21-491b-8b79-39173ecfada5"))
AgAccessCnstrBackground;
    // [ default ] interface _IAgAccessCnstrBackground
    // interface IAgAccessCnstrBackground
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

enum AgECnstrBackground
{
    eBackgroundGround = 0,
    eBackgroundSpace = 1
};

struct __declspec(uuid("bc4b872e-62d1-40e8-bb60-6bdfc09408fb"))
_IAgAccessCnstrBackground : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBackground,put=PutBackground))
    enum AgECnstrBackground Background;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    enum AgECnstrBackground GetBackground ( );
    void PutBackground (
        enum AgECnstrBackground pVal );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ enum AgECnstrBackground * pVal ) = 0;
      virtual HRESULT __stdcall put_Background (
        /*[in]*/ enum AgECnstrBackground pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("2cb4b1e0-0df7-4c8c-af1e-5e510e0ccf5c"))
IAgAccessCnstrBackground : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetBackground,put=PutBackground))
    enum AgECnstrBackground Background;

    //
    // Wrapper methods for error-handling
    //

    enum AgECnstrBackground GetBackground ( );
    void PutBackground (
        enum AgECnstrBackground pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ enum AgECnstrBackground * pVal ) = 0;
      virtual HRESULT __stdcall put_Background (
        /*[in]*/ enum AgECnstrBackground pVal ) = 0;
};

struct __declspec(uuid("f31d25e8-9255-4890-bd68-0f0ed61d06d2"))
AgAccessCnstrGroundTrack;
    // [ default ] interface _IAgAccessCnstrGroundTrack
    // interface IAgAccessCnstrGroundTrack
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

enum AgECnstrGroundTrack
{
    eDirectionAscending = 0,
    eDirectionDescending = 1
};

struct __declspec(uuid("b9ca2bf2-af4b-4b0a-aee7-238eaa205173"))
_IAgAccessCnstrGroundTrack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECnstrGroundTrack Direction;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    enum AgECnstrGroundTrack GetDirection ( );
    void PutDirection (
        enum AgECnstrGroundTrack pVal );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECnstrGroundTrack * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECnstrGroundTrack pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f59f924f-9231-4ec4-9657-95b845f9e873"))
IAgAccessCnstrGroundTrack : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgECnstrGroundTrack Direction;

    //
    // Wrapper methods for error-handling
    //

    enum AgECnstrGroundTrack GetDirection ( );
    void PutDirection (
        enum AgECnstrGroundTrack pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgECnstrGroundTrack * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgECnstrGroundTrack pVal ) = 0;
};

struct __declspec(uuid("0b53e6bc-338e-4e79-a6fb-602ad93489cc"))
AgAccessCnstrMinMax;
    // [ default ] interface _IAgAccessCnstrMinMax
    // interface IAgAccessCnstrMinMax
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("82587921-377a-4785-8a2e-e1c4101618e6"))
_IAgAccessCnstrMinMax : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableMin,put=PutEnableMin))
    VARIANT_BOOL EnableMin;
    __declspec(property(get=GetEnableMax,put=PutEnableMax))
    VARIANT_BOOL EnableMax;
    __declspec(property(get=GetMin,put=PutMin))
    _variant_t Min;
    __declspec(property(get=GetMax,put=PutMax))
    _variant_t Max;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableMin ( );
    void PutEnableMin (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableMax ( );
    void PutEnableMax (
        VARIANT_BOOL pVal );
    _variant_t GetMin ( );
    void PutMin (
        const _variant_t & pVal );
    _variant_t GetMax ( );
    void PutMax (
        const _variant_t & pVal );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMax (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("dbaaec1b-7a16-45bf-8fc5-0b32286a7752"))
IAgAccessCnstrMinMax : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableMin,put=PutEnableMin))
    VARIANT_BOOL EnableMin;
    __declspec(property(get=GetEnableMax,put=PutEnableMax))
    VARIANT_BOOL EnableMax;
    __declspec(property(get=GetMin,put=PutMin))
    _variant_t Min;
    __declspec(property(get=GetMax,put=PutMax))
    _variant_t Max;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableMin ( );
    void PutEnableMin (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableMax ( );
    void PutEnableMax (
        VARIANT_BOOL pVal );
    _variant_t GetMin ( );
    void PutMin (
        const _variant_t & pVal );
    _variant_t GetMax ( );
    void PutMax (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMax (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("79b2eff7-c19d-424f-ae16-fde06a6335d2"))
AgAccessCnstrCrdnCn;
    // [ default ] interface _IAgAccessCnstrCrdnCn
    // interface IAgAccessCnstrCrdnCn
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("2216b491-9a3e-492a-ae04-e98d8ad123d3"))
_IAgAccessCnstrCrdnCn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableMin,put=PutEnableMin))
    VARIANT_BOOL EnableMin;
    __declspec(property(get=GetEnableMax,put=PutEnableMax))
    VARIANT_BOOL EnableMax;
    __declspec(property(get=GetMin,put=PutMin))
    _variant_t Min;
    __declspec(property(get=GetMax,put=PutMax))
    _variant_t Max;
    __declspec(property(get=GetReference,put=PutReference))
    _bstr_t Reference;
    __declspec(property(get=GetAvailableReferences))
    SAFEARRAY * AvailableReferences;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableMin ( );
    void PutEnableMin (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableMax ( );
    void PutEnableMax (
        VARIANT_BOOL pVal );
    _variant_t GetMin ( );
    void PutMin (
        const _variant_t & pVal );
    _variant_t GetMax ( );
    void PutMax (
        const _variant_t & pVal );
    _bstr_t GetReference ( );
    void PutReference (
        _bstr_t pVal );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    SAFEARRAY * GetAvailableReferences ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMax (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Reference (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableReferences (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d1914474-8362-4253-98a3-709cb2790827"))
IAgAccessCnstrCrdnCn : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableMin,put=PutEnableMin))
    VARIANT_BOOL EnableMin;
    __declspec(property(get=GetEnableMax,put=PutEnableMax))
    VARIANT_BOOL EnableMax;
    __declspec(property(get=GetMin,put=PutMin))
    _variant_t Min;
    __declspec(property(get=GetMax,put=PutMax))
    _variant_t Max;
    __declspec(property(get=GetReference,put=PutReference))
    _bstr_t Reference;
    __declspec(property(get=GetAvailableReferences))
    SAFEARRAY * AvailableReferences;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableMin ( );
    void PutEnableMin (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableMax ( );
    void PutEnableMax (
        VARIANT_BOOL pVal );
    _variant_t GetMin ( );
    void PutMin (
        const _variant_t & pVal );
    _variant_t GetMax ( );
    void PutMax (
        const _variant_t & pVal );
    _bstr_t GetReference ( );
    void PutReference (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableReferences ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMax (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Reference (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableReferences (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("eb419aab-1612-412c-a824-9beab4c17fd0"))
AgAccessCnstrCbObstruction;
    // [ default ] interface _IAgAccessCnstrCbObstruction
    // interface IAgAccessCnstrCbObstruction
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("852f496c-26c0-462e-8cac-39f0664b001b"))
_IAgAccessCnstrCbObstruction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAssignedObstructions))
    SAFEARRAY * AssignedObstructions;
    __declspec(property(get=GetAvailableObstructions))
    SAFEARRAY * AvailableObstructions;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAssignedObstructions ( );
    VARIANT_BOOL IsObstructionAssigned (
        _bstr_t Obstruction );
    HRESULT AddObstruction (
        _bstr_t Obstruction );
    HRESULT RemoveObstruction (
        _bstr_t Obstruction );
    SAFEARRAY * GetAvailableObstructions ( );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AssignedObstructions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsObstructionAssigned (
        /*[in]*/ BSTR Obstruction,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddObstruction (
        /*[in]*/ BSTR Obstruction ) = 0;
      virtual HRESULT __stdcall raw_RemoveObstruction (
        /*[in]*/ BSTR Obstruction ) = 0;
      virtual HRESULT __stdcall get_AvailableObstructions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("24606221-94df-46cd-9351-0e2ddc8a40ec"))
IAgAccessCnstrCbObstruction : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetAssignedObstructions))
    SAFEARRAY * AssignedObstructions;
    __declspec(property(get=GetAvailableObstructions))
    SAFEARRAY * AvailableObstructions;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAssignedObstructions ( );
    VARIANT_BOOL IsObstructionAssigned (
        _bstr_t Obstruction );
    HRESULT AddObstruction (
        _bstr_t Obstruction );
    HRESULT RemoveObstruction (
        _bstr_t Obstruction );
    SAFEARRAY * GetAvailableObstructions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AssignedObstructions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsObstructionAssigned (
        /*[in]*/ BSTR Obstruction,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddObstruction (
        /*[in]*/ BSTR Obstruction ) = 0;
      virtual HRESULT __stdcall raw_RemoveObstruction (
        /*[in]*/ BSTR Obstruction ) = 0;
      virtual HRESULT __stdcall get_AvailableObstructions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("af7ca58c-5e04-4e95-bb94-3820a7b8e23e"))
AgAccessCnstrAngle;
    // [ default ] interface _IAgAccessCnstrAngle
    // interface IAgAccessCnstrAngle
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("05150291-0530-423d-8367-27439edb9b6d"))
_IAgAccessCnstrAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    _variant_t Angle;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAngle ( );
    void PutAngle (
        const _variant_t & pVal );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("865d8c36-af45-45a8-aa4f-b1cb374c4d0d"))
IAgAccessCnstrAngle : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    _variant_t Angle;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAngle ( );
    void PutAngle (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("2583cea8-85f9-4b8e-be1a-8729615adebe"))
AgAccessCnstrCondition;
    // [ default ] interface _IAgAccessCnstrCondition
    // interface IAgAccessCnstrCondition
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

enum AgECnstrLighting
{
    eDirectSun = 0,
    ePenumbra = 1,
    ePenumbraOrDirectSun = 2,
    ePenumbraOrUmbra = 3,
    eUmbra = 4,
    eUmbraOrDirectSun = 5
};

struct __declspec(uuid("e369ddb9-83b7-400c-8d62-955bccf672b6"))
_IAgAccessCnstrCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCondition,put=PutCondition))
    enum AgECnstrLighting Condition;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECnstrLighting GetCondition ( );
    void PutCondition (
        enum AgECnstrLighting pVal );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ enum AgECnstrLighting * pVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ enum AgECnstrLighting pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
};

struct __declspec(uuid("0e631e39-9397-4702-bb37-34cbab30f81d"))
IAgAccessCnstrCondition : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetCondition,put=PutCondition))
    enum AgECnstrLighting Condition;

    //
    // Wrapper methods for error-handling
    //

    enum AgECnstrLighting GetCondition ( );
    void PutCondition (
        enum AgECnstrLighting pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ enum AgECnstrLighting * pVal ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ enum AgECnstrLighting pVal ) = 0;
};

struct __declspec(uuid("d8d0bb8c-550e-43dd-9a20-668b338f1a7a"))
AgAccessTimeCollection;
    // [ default ] interface IUnknown
    // interface IAgAccessTimeCollection

struct __declspec(uuid("6e50e78a-2785-4c44-8699-cafaa3b9b58e"))
AgScheduleTimeCollection;
    // [ default ] interface IUnknown
    // interface IAgScheduleTimeCollection

struct __declspec(uuid("38426f69-d316-40c4-830d-7027ec778c9c"))
AgAccessCnstrIntervals;
    // [ default ] interface _IAgAccessCnstrIntervals
    // interface IAgAccessCnstrIntervals
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

enum AgEActionType
{
    eActionInclude = 0,
    eActionExclude = 1
};

struct __declspec(uuid("b56399c0-4f9a-4f5e-bd3a-b56f7f5d33be"))
_IAgAccessCnstrIntervals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetActionType,put=PutActionType))
    enum AgEActionType ActionType;
    __declspec(property(get=GetIntervals))
    IAgIntervalCollectionPtr Intervals;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    enum AgEActionType GetActionType ( );
    void PutActionType (
        enum AgEActionType pVal );
    IAgIntervalCollectionPtr GetIntervals ( );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionType (
        /*[out,retval]*/ enum AgEActionType * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionType (
        /*[in]*/ enum AgEActionType pVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
};

struct __declspec(uuid("ee53cecb-360d-4389-bd88-840ca7949111"))
IAgAccessCnstrIntervals : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetActionType,put=PutActionType))
    enum AgEActionType ActionType;
    __declspec(property(get=GetIntervals))
    IAgIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    enum AgEActionType GetActionType ( );
    void PutActionType (
        enum AgEActionType pVal );
    IAgIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActionType (
        /*[out,retval]*/ enum AgEActionType * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionType (
        /*[in]*/ enum AgEActionType pVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppVal ) = 0;
};

struct __declspec(uuid("3427e2c0-a648-48e4-9956-ba8879e2f9cc"))
AgAccessCnstrObjExAngle;
    // [ default ] interface _IAgAccessCnstrObjExAngle
    // interface IAgAccessCnstrObjExAngle
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("aa1e067a-051f-425e-b06b-55dd0e9407d9"))
_IAgAccessCnstrObjExAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExclusionAngle,put=PutExclusionAngle))
    _variant_t ExclusionAngle;
    __declspec(property(get=GetAssignedObjects))
    SAFEARRAY * AssignedObjects;
    __declspec(property(get=GetAvailableObjects))
    SAFEARRAY * AvailableObjects;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetExclusionAngle ( );
    void PutExclusionAngle (
        const _variant_t & pVal );
    SAFEARRAY * GetAssignedObjects ( );
    SAFEARRAY * GetAvailableObjects ( );
    HRESULT AddExclusionObject (
        _bstr_t ObjectName );
    VARIANT_BOOL IsObjectAssigned (
        _bstr_t ObjectName );
    HRESULT RemoveExclusionObject (
        _bstr_t ObjectName );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExclusionAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ExclusionAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AssignedObjects (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableObjects (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddExclusionObject (
        /*[in]*/ BSTR ObjectName ) = 0;
      virtual HRESULT __stdcall raw_IsObjectAssigned (
        /*[in]*/ BSTR ObjectName,
        /*[out,retval]*/ VARIANT_BOOL * pIsAssigned ) = 0;
      virtual HRESULT __stdcall raw_RemoveExclusionObject (
        /*[in]*/ BSTR ObjectName ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("3a3b188d-ed41-4d42-be41-ab3021e9548c"))
IAgAccessCnstrObjExAngle : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetExclusionAngle,put=PutExclusionAngle))
    _variant_t ExclusionAngle;
    __declspec(property(get=GetAssignedObjects))
    SAFEARRAY * AssignedObjects;
    __declspec(property(get=GetAvailableObjects))
    SAFEARRAY * AvailableObjects;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetExclusionAngle ( );
    void PutExclusionAngle (
        const _variant_t & pVal );
    SAFEARRAY * GetAssignedObjects ( );
    SAFEARRAY * GetAvailableObjects ( );
    HRESULT AddExclusionObject (
        _bstr_t ObjectName );
    VARIANT_BOOL IsObjectAssigned (
        _bstr_t ObjectName );
    HRESULT RemoveExclusionObject (
        _bstr_t ObjectName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExclusionAngle (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ExclusionAngle (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_AssignedObjects (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AvailableObjects (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddExclusionObject (
        /*[in]*/ BSTR ObjectName ) = 0;
      virtual HRESULT __stdcall raw_IsObjectAssigned (
        /*[in]*/ BSTR ObjectName,
        /*[out,retval]*/ VARIANT_BOOL * pIsAssigned ) = 0;
      virtual HRESULT __stdcall raw_RemoveExclusionObject (
        /*[in]*/ BSTR ObjectName ) = 0;
};

struct __declspec(uuid("ab35b6cb-3b86-4c27-a340-69838f1b8d2c"))
AgAccessCnstrZone;
    // [ default ] interface _IAgAccessCnstrZone
    // interface IAgAccessCnstrZone
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("01a17452-a61b-46dd-9a5d-eddb82f727f3"))
_IAgAccessCnstrZone : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinLon,put=PutMinLon))
    _variant_t MinLon;
    __declspec(property(get=GetMinLat,put=PutMinLat))
    _variant_t MinLat;
    __declspec(property(get=GetMaxLon,put=PutMaxLon))
    _variant_t MaxLon;
    __declspec(property(get=GetMaxLat,put=PutMaxLat))
    _variant_t MaxLat;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinLon ( );
    void PutMinLon (
        const _variant_t & pVal );
    _variant_t GetMinLat ( );
    void PutMinLat (
        const _variant_t & pVal );
    _variant_t GetMaxLon ( );
    void PutMaxLon (
        const _variant_t & pVal );
    _variant_t GetMaxLat ( );
    void PutMaxLat (
        const _variant_t & pVal );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinLon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MinLat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxLon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxLon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxLat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxLat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("fbcf8209-fc85-4a78-baa7-020119e97ac4"))
IAgAccessCnstrZone : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetMinLon,put=PutMinLon))
    _variant_t MinLon;
    __declspec(property(get=GetMinLat,put=PutMinLat))
    _variant_t MinLat;
    __declspec(property(get=GetMaxLon,put=PutMaxLon))
    _variant_t MaxLon;
    __declspec(property(get=GetMaxLat,put=PutMaxLat))
    _variant_t MaxLat;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinLon ( );
    void PutMinLon (
        const _variant_t & pVal );
    _variant_t GetMinLat ( );
    void PutMinLat (
        const _variant_t & pVal );
    _variant_t GetMaxLon ( );
    void PutMaxLon (
        const _variant_t & pVal );
    _variant_t GetMaxLat ( );
    void PutMaxLat (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinLon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MinLat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLat (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxLon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxLon (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxLat (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxLat (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("1f335758-1587-4ba4-b099-796ad212c2a3"))
AgAccessCnstrThirdBody;
    // [ default ] interface _IAgAccessCnstrThirdBody
    // interface IAgAccessCnstrThirdBody
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("47c44b9a-22d8-445f-95c8-da926923469c"))
_IAgAccessCnstrThirdBody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAssignedObstructions))
    SAFEARRAY * AssignedObstructions;
    __declspec(property(get=GetAvailableObstructions))
    SAFEARRAY * AvailableObstructions;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAssignedObstructions ( );
    HRESULT AddObstruction (
        _bstr_t Obstruction );
    HRESULT RemoveObstruction (
        _bstr_t Obstruction );
    SAFEARRAY * GetAvailableObstructions ( );
    VARIANT_BOOL IsObstructionAssigned (
        _bstr_t Obstruction );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AssignedObstructions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddObstruction (
        /*[in]*/ BSTR Obstruction ) = 0;
      virtual HRESULT __stdcall raw_RemoveObstruction (
        /*[in]*/ BSTR Obstruction ) = 0;
      virtual HRESULT __stdcall get_AvailableObstructions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsObstructionAssigned (
        /*[in]*/ BSTR Obstruction,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("9d671a23-44d0-4005-b430-0486eda23ecc"))
IAgAccessCnstrThirdBody : IAgAccessConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetAssignedObstructions))
    SAFEARRAY * AssignedObstructions;
    __declspec(property(get=GetAvailableObstructions))
    SAFEARRAY * AvailableObstructions;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAssignedObstructions ( );
    VARIANT_BOOL IsObstructionAssigned (
        _bstr_t Obstruction );
    HRESULT AddObstruction (
        _bstr_t Obstruction );
    HRESULT RemoveObstruction (
        _bstr_t Obstruction );
    SAFEARRAY * GetAvailableObstructions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AssignedObstructions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsObstructionAssigned (
        /*[in]*/ BSTR Obstruction,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddObstruction (
        /*[in]*/ BSTR Obstruction ) = 0;
      virtual HRESULT __stdcall raw_RemoveObstruction (
        /*[in]*/ BSTR Obstruction ) = 0;
      virtual HRESULT __stdcall get_AvailableObstructions (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("5074d754-2e7c-477d-ac8c-514e9f1c7846"))
AgAccessCnstrExclZonesCollection;
    // [ default ] interface IUnknown
    // interface IAgAccessCnstrExclZonesCollection
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("11816d9f-bec4-44dc-9832-225c580d6377"))
IAgAccessCnstrExclZonesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgAccessCnstrZonePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT RemoveIndex (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT RemoveExclZone (
        const _variant_t & MinLat,
        const _variant_t & MinLon,
        const _variant_t & MaxLat,
        const _variant_t & MaxLon );
    HRESULT ChangeExclZone (
        long Index,
        const _variant_t & MinLat,
        const _variant_t & MinLon,
        const _variant_t & MaxLat,
        const _variant_t & MaxLon );
    HRESULT GetExclZone (
        long Index,
        VARIANT * pMinLat,
        VARIANT * pMinLon,
        VARIANT * pMaxLat,
        VARIANT * pMaxLon );
    SAFEARRAY * ToArray (
        long Index,
        long Length );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    IAgAccessCnstrZonePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveIndex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveExclZone (
        /*[in]*/ VARIANT MinLat,
        /*[in]*/ VARIANT MinLon,
        /*[in]*/ VARIANT MaxLat,
        /*[in]*/ VARIANT MaxLon ) = 0;
      virtual HRESULT __stdcall raw_ChangeExclZone (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT MinLat,
        /*[in]*/ VARIANT MinLon,
        /*[in]*/ VARIANT MaxLat,
        /*[in]*/ VARIANT MaxLon ) = 0;
      virtual HRESULT __stdcall raw_GetExclZone (
        /*[in]*/ long Index,
        /*[out]*/ VARIANT * pMinLat,
        /*[out]*/ VARIANT * pMinLon,
        /*[out]*/ VARIANT * pMaxLat,
        /*[out]*/ VARIANT * pMaxLon ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[in]*/ long Index,
        /*[in]*/ long Length,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgAccessCnstrZone * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ffa8e1db-ffd3-4865-8e63-f7d5d08dbc2e"))
AgSnPtGrazingAlt;
    // [ default ] interface _IAgSnPtGrazingAlt
    // interface IAgSnPointing
    // interface IAgSnPtGrazingAlt

struct __declspec(uuid("bad00cb0-f49e-470f-9e54-028ef16284cd"))
_IAgSnPtGrazingAlt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAzimuthOffset,put=PutAzimuthOffset))
    _variant_t AzimuthOffset;
    __declspec(property(get=GetGrazingAlt,put=PutGrazingAlt))
    double GrazingAlt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAzimuthOffset ( );
    void PutAzimuthOffset (
        const _variant_t & pVal );
    double GetGrazingAlt ( );
    void PutGrazingAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AzimuthOffset (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AzimuthOffset (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_GrazingAlt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GrazingAlt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5b8eaf06-a0fa-4236-aaa2-eadca2a8a66a"))
IAgSnPtGrazingAlt : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAzimuthOffset,put=PutAzimuthOffset))
    _variant_t AzimuthOffset;
    __declspec(property(get=GetGrazingAlt,put=PutGrazingAlt))
    double GrazingAlt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAzimuthOffset ( );
    void PutAzimuthOffset (
        const _variant_t & pVal );
    double GetGrazingAlt ( );
    void PutGrazingAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AzimuthOffset (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_AzimuthOffset (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_GrazingAlt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GrazingAlt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e07ef617-042e-414d-be0c-5039a0754aad"))
AgAreaTarget;
    // [ default ] interface _IAgAreaTarget
    // interface IAgAreaTarget
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgDisplayTm

enum AgEAreaType
{
    eEllipse = 0,
    ePattern = 1
};

enum AgEDisplayTimesType
{
    eDisplayTypeUnknown = -1,
    eAlwaysOff = 0,
    eAlwaysOn = 1,
    eDuringAccess = 2,
    eUseIntervals = 3,
    eDuringChainAccess = 4
};

struct __declspec(uuid("758f6477-171e-4d0f-944b-0e994bd80479"))
IAgATCommonTasks : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgAreaTypeEllipsePtr SetAreaTypeEllipse (
        double SemiMajorAxis,
        double SemiMinorAxis,
        const _variant_t & Bearing );
    IAgAreaTypePatternCollectionPtr SetAreaTypePattern (
        SAFEARRAY * * LatLons );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetAreaTypeEllipse (
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double SemiMinorAxis,
        /*[in]*/ VARIANT Bearing,
        /*[out,retval]*/ struct IAgAreaTypeEllipse * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAreaTypePattern (
        /*[in]*/ SAFEARRAY * * LatLons,
        /*[out,retval]*/ struct IAgAreaTypePatternCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("16e9da44-239d-4698-a88a-171357b4277d"))
IAgAreaTarget : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseLocalTimeOffset,put=PutUseLocalTimeOffset))
    VARIANT_BOOL UseLocalTimeOffset;
    __declspec(property(get=GetLocalTimeOffset,put=PutLocalTimeOffset))
    double LocalTimeOffset;
    __declspec(property(get=GetAutoCentroid,put=PutAutoCentroid))
    VARIANT_BOOL AutoCentroid;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetGraphics))
    IAgATGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgATVOPtr VO;
    __declspec(property(get=GetAreaType,put=PutAreaType))
    enum AgEAreaType AreaType;
    __declspec(property(get=GetAreaTypeData))
    IAgAreaTypeDataPtr AreaTypeData;
    __declspec(property(get=GetUseTerrainData,put=PutUseTerrainData))
    VARIANT_BOOL UseTerrainData;
    __declspec(property(get=GetAllowObjectAccess,put=PutAllowObjectAccess))
    VARIANT_BOOL AllowObjectAccess;
    __declspec(property(get=GetCommonTasks))
    IAgATCommonTasksPtr CommonTasks;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLocalTimeOffset ( );
    void PutUseLocalTimeOffset (
        VARIANT_BOOL pUseLocalTimeOffset );
    double GetLocalTimeOffset ( );
    void PutLocalTimeOffset (
        double pLocalTimeOffset );
    VARIANT_BOOL GetAutoCentroid ( );
    void PutAutoCentroid (
        VARIANT_BOOL pAutoCentroid );
    STKUtil::IAgPositionPtr GetPosition ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgATGraphicsPtr GetGraphics ( );
    IAgATVOPtr GetVO ( );
    enum AgEAreaType GetAreaType ( );
    void PutAreaType (
        enum AgEAreaType pType );
    IAgAreaTypeDataPtr GetAreaTypeData ( );
    VARIANT_BOOL GetUseTerrainData ( );
    void PutUseTerrainData (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllowObjectAccess ( );
    void PutAllowObjectAccess (
        VARIANT_BOOL pVal );
    IAgATCommonTasksPtr GetCommonTasks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLocalTimeOffset (
        /*[out,retval]*/ VARIANT_BOOL * pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_UseLocalTimeOffset (
        /*[in]*/ VARIANT_BOOL pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_LocalTimeOffset (
        /*[out,retval]*/ double * pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_LocalTimeOffset (
        /*[in]*/ double pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_AutoCentroid (
        /*[out,retval]*/ VARIANT_BOOL * pAutoCentroid ) = 0;
      virtual HRESULT __stdcall put_AutoCentroid (
        /*[in]*/ VARIANT_BOOL pAutoCentroid ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppPosition ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAccessConstraints ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgATGraphics * * ppGraphics ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgATVO * * ppATVO ) = 0;
      virtual HRESULT __stdcall get_AreaType (
        /*[out,retval]*/ enum AgEAreaType * pType ) = 0;
      virtual HRESULT __stdcall put_AreaType (
        /*[in]*/ enum AgEAreaType pType ) = 0;
      virtual HRESULT __stdcall get_AreaTypeData (
        /*[out,retval]*/ struct IAgAreaTypeData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseTerrainData (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTerrainData (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllowObjectAccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowObjectAccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgATCommonTasks * * ppRetVal ) = 0;
};

struct __declspec(uuid("c308fb60-f1cd-40a4-ab1a-2a360a215a41"))
IAgDisplayTm : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;

    //
    // Wrapper methods for error-handling
    //

    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
};

struct __declspec(uuid("fe8c65fe-8eac-494d-9227-691884c5739c"))
AgFacility;
    // [ default ] interface _IAgFacility
    // interface IAgFacility
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgDisplayTm

enum AgEAzElMaskType
{
    eMaskFile = 0,
    eTerrainData = 1,
    eAzElMaskNone = 2
};

enum AgETerrainNormType
{
    eSurfaceNorm = 0,
    eSlopeAzimuth = 1
};

enum AgEAltRefType
{
    eMSL = 0,
    eTerrain = 1,
    eWGS84 = 2
};

struct __declspec(uuid("7323c02b-bd10-4e23-bbf5-49a836c1c3e1"))
AgTarget;
    // [ default ] interface _IAgTarget
    // interface IAgTarget
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgDisplayTm

struct __declspec(uuid("ed762481-7bf4-43ef-982e-9905c67f7ab4"))
IAgTargetGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFromScenario,put=PutInheritFromScenario))
    VARIANT_BOOL InheritFromScenario;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetAzElMask))
    IAgBasicAzElMaskPtr AzElMask;
    __declspec(property(get=GetContours))
    IAgGfxRangeContoursPtr Contours;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetMarkerColor,put=PutMarkerColor))
    OLE_COLOR MarkerColor;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFromScenario ( );
    void PutInheritFromScenario (
        VARIANT_BOOL pInherit );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pMarkerStyle );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLabel );
    IAgBasicAzElMaskPtr GetAzElMask ( );
    IAgGfxRangeContoursPtr GetContours ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pVal );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    OLE_COLOR GetMarkerColor ( );
    void PutMarkerColor (
        OLE_COLOR pColor );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFromScenario (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_InheritFromScenario (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pMarkerStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pMarkerStyle ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLabel ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLabel ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ struct IAgBasicAzElMask * * ppAzElMask ) = 0;
      virtual HRESULT __stdcall get_Contours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppContours ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MarkerColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_MarkerColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
};

struct __declspec(uuid("a1541a6e-4699-48b5-b0ac-d5bde3d95288"))
AgPlanet;
    // [ default ] interface _IAgPlanet
    // interface IAgPlanet
    // interface IAgStkObject
    // interface IAgLifetimeInformation

enum AgEPlPositionSourceType
{
    ePosFile = 0,
    ePosCentralBody = 1
};

struct __declspec(uuid("a8947990-5145-41bd-9b17-9c2cfc944fbd"))
IAgPlCommonTasks : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgPlPosFilePtr SetPositionSourceFile (
        _bstr_t File );
    IAgPlPosCentralBodyPtr SetPositionSourceCentralBody (
        _bstr_t CentralBody,
        enum AgEEphemSourceType EphemSource );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPositionSourceFile (
        /*[in]*/ BSTR File,
        /*[out,retval]*/ struct IAgPlPosFile * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPositionSourceCentralBody (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ enum AgEEphemSourceType EphemSource,
        /*[out,retval]*/ struct IAgPlPosCentralBody * * ppRetVal ) = 0;
};

struct __declspec(uuid("23610bab-af8a-443c-8411-338ee57bfaeb"))
IAgPlanet : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGraphics))
    IAgPlGraphicsPtr Graphics;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetVO))
    IAgPlVOPtr VO;
    __declspec(property(get=GetPositionSource,put=PutPositionSource))
    enum AgEPlPositionSourceType PositionSource;
    __declspec(property(get=GetPositionSourceData))
    IAgPositionSourceDataPtr PositionSourceData;
    __declspec(property(get=GetCommonTasks))
    IAgPlCommonTasksPtr CommonTasks;

    //
    // Wrapper methods for error-handling
    //

    IAgPlGraphicsPtr GetGraphics ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgPlVOPtr GetVO ( );
    enum AgEPlPositionSourceType GetPositionSource ( );
    void PutPositionSource (
        enum AgEPlPositionSourceType pVal );
    IAgPositionSourceDataPtr GetPositionSourceData ( );
    IAgPlCommonTasksPtr GetCommonTasks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgPlGraphics * * ppPlGraphics ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAccessConstraints ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgPlVO * * ppVO ) = 0;
      virtual HRESULT __stdcall get_PositionSource (
        /*[out,retval]*/ enum AgEPlPositionSourceType * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionSource (
        /*[in]*/ enum AgEPlPositionSourceType pVal ) = 0;
      virtual HRESULT __stdcall get_PositionSourceData (
        /*[out,retval]*/ struct IAgPositionSourceData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgPlCommonTasks * * ppRetVal ) = 0;
};

struct __declspec(uuid("d4c30783-6198-4c0a-b69a-5e1a82a55df9"))
AgSensor;
    // [ default ] interface _IAgSensor
    // interface IAgSensor
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgDisplayTm
    // interface IAgProvideSpatialInfo

enum AgESnPattern
{
    eSnComplexConic = 0,
    eSnCustom = 1,
    eSnHalfPower = 2,
    eSnRectangular = 3,
    eSnSAR = 4,
    eSnSimpleConic = 5
};

enum AgESnPointing
{
    eSnPt3DModel = 0,
    eSnPtExternal = 1,
    eSnPtFixed = 2,
    eSnPtFixedAxes = 3,
    eSnPtSpinning = 4,
    eSnPtTargeted = 5,
    eSnPtGrazingAlt = 6
};

enum AgESnRefractionType
{
    e4_3EarthRadiusMethod = 0,
    eITU_R_P834_2 = 1,
    eSCFMethod = 2,
    eITU_R_P834_4 = 3
};

enum AgESnLocation
{
    eSnFixed = 0,
    eSn3DModel = 1,
    eSn3DModelWithScale = 2,
    eSnCenter = 3,
    eSnLocationCrdnPoint = 4
};

struct __declspec(uuid("468b5231-ef56-4e76-8b05-a43b581d70cc"))
IAgSwath : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetTimeIntervalCount))
    long TimeIntervalCount;
    __declspec(property(get=GetMinimumStep,put=PutMinimumStep))
    double MinimumStep;
    __declspec(property(get=GetMaximumStep,put=PutMaximumStep))
    double MaximumStep;
    __declspec(property(get=GetUseMaximumCone,put=PutUseMaximumCone))
    VARIANT_BOOL UseMaximumCone;
    __declspec(property(get=GetScatteringTolerance,put=PutScatteringTolerance))
    double ScatteringTolerance;
    __declspec(property(get=GetCurvatureTolerance,put=PutCurvatureTolerance))
    double CurvatureTolerance;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    HRESULT Apply ( );
    HRESULT SetTimePeriod (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    HRESULT AddTimeInterval (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    HRESULT ModifyTimeInterval (
        long Index,
        const _variant_t & Start,
        const _variant_t & Stop );
    long GetTimeIntervalIndex (
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT RemoveTimeInterval (
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT RemoveTimeIntervalIndex (
        long Index );
    HRESULT RemoveAllIntervals ( );
    long GetTimeIntervalCount ( );
    SAFEARRAY * ToArray (
        long Index,
        long Length );
    double GetMinimumStep ( );
    void PutMinimumStep (
        double pVal );
    double GetMaximumStep ( );
    void PutMaximumStep (
        double pVal );
    VARIANT_BOOL GetUseMaximumCone ( );
    void PutUseMaximumCone (
        VARIANT_BOOL pVal );
    double GetScatteringTolerance ( );
    void PutScatteringTolerance (
        double pVal );
    double GetCurvatureTolerance ( );
    void PutCurvatureTolerance (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_SetTimePeriod (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall raw_AddTimeInterval (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall raw_ModifyTimeInterval (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_GetTimeIntervalIndex (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[out,retval]*/ long * pIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveTimeInterval (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_RemoveTimeIntervalIndex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllIntervals ( ) = 0;
      virtual HRESULT __stdcall get_TimeIntervalCount (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[in]*/ long Index,
        /*[in]*/ long Length,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinimumStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaximumStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseMaximumCone (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseMaximumCone (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ScatteringTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScatteringTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CurvatureTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CurvatureTolerance (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d2205ade-75d6-4620-a100-486c0d056540"))
IAgRfModelBase : IUnknown
{};

struct __declspec(uuid("05cc84fb-f0e5-4bcf-8a67-8a7f5e450a6c"))
IAgCelestialBodyInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIdentifier))
    _bstr_t Identifier;
    __declspec(property(get=GetCatalogName))
    _bstr_t CatalogName;
    __declspec(property(get=GetRA))
    double RA;
    __declspec(property(get=GetDec))
    double Dec;
    __declspec(property(get=GetParallax))
    double Parallax;
    __declspec(property(get=GetVelocity))
    double Velocity;
    __declspec(property(get=GetVisualMagnitude))
    double VisualMagnitude;
    __declspec(property(get=GetBminusV))
    double BminusV;
    __declspec(property(get=GetEffectiveTemperature))
    double EffectiveTemperature;
    __declspec(property(get=GetMagnitudeToIrradianceConversionFactor))
    double MagnitudeToIrradianceConversionFactor;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetIdentifier ( );
    _bstr_t GetCatalogName ( );
    double GetRA ( );
    double GetDec ( );
    double GetParallax ( );
    double GetVelocity ( );
    double GetVisualMagnitude ( );
    double GetBminusV ( );
    double GetEffectiveTemperature ( );
    double GetMagnitudeToIrradianceConversionFactor ( );
    STKUtil::IAgCartesian3VectorPtr GetLastComputedDirectionInICRF ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Identifier (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CatalogName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dec (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parallax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VisualMagnitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BminusV (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EffectiveTemperature (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeToIrradianceConversionFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetLastComputedDirectionInICRF (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("c05b88f2-7d34-4bdd-818d-885b50069084"))
IAgCelestialBodyCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCelestialBodyInfoPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetRecycle,put=PutRecycle))
    VARIANT_BOOL Recycle;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCelestialBodyInfoPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL GetRecycle ( );
    void PutRecycle (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCelestialBodyInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Recycle (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Recycle (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("84172c0e-d203-42c5-afb7-9a6d817d6845"))
IAgSpatialState : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFixedPosition))
    STKUtil::IAgPositionPtr FixedPosition;
    __declspec(property(get=GetInertialPosition))
    STKUtil::IAgPositionPtr InertialPosition;
    __declspec(property(get=GetInertialOrientation))
    STKUtil::IAgOrientationPtr InertialOrientation;
    __declspec(property(get=GetFixedOrientation))
    STKUtil::IAgOrientationPtr FixedOrientation;
    __declspec(property(get=GetCurrentTime))
    _variant_t CurrentTime;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetIsAvailable))
    VARIANT_BOOL IsAvailable;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgPositionPtr GetFixedPosition ( );
    STKUtil::IAgPositionPtr GetInertialPosition ( );
    STKUtil::IAgOrientationPtr GetInertialOrientation ( );
    STKUtil::IAgOrientationPtr GetFixedOrientation ( );
    _variant_t GetCurrentTime ( );
    _bstr_t GetCentralBody ( );
    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    VARIANT_BOOL GetIsAvailable ( );
    HRESULT QueryVelocityFixed (
        double * pVx,
        double * pVy,
        double * pVz );
    HRESULT QueryVelocityInertial (
        double * pVx,
        double * pVy,
        double * pVz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FixedPosition (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InertialPosition (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InertialOrientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOrientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryVelocityFixed (
        /*[out]*/ double * pVx,
        /*[out]*/ double * pVy,
        /*[out]*/ double * pVz ) = 0;
      virtual HRESULT __stdcall raw_QueryVelocityInertial (
        /*[out]*/ double * pVx,
        /*[out]*/ double * pVy,
        /*[out]*/ double * pVz ) = 0;
};

struct __declspec(uuid("7cb80496-4c21-4c72-9422-8bffbc6d92e2"))
IAgVeSpatialInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRecycle))
    VARIANT_BOOL Recycle;

    //
    // Wrapper methods for error-handling
    //

    IAgSpatialStatePtr GetState (
        const _variant_t & Time );
    VARIANT_BOOL GetRecycle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetState (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgSpatialState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Recycle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("9e71011a-c346-41b1-8e0a-58d92273f4fd"))
IAgProvideSpatialInfo : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeSpatialInfoPtr GetSpatialInfo (
        VARIANT_BOOL Recycle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetSpatialInfo (
        /*[in]*/ VARIANT_BOOL Recycle,
        /*[out,retval]*/ struct IAgVeSpatialInfo * * ppRetVal ) = 0;
};

struct __declspec(uuid("8f6546e8-b0a2-49ab-9724-858712eb45e1"))
AgSnCommonTasks;
    // [ default ] interface _IAgSnCommonTasks
    // interface IAgSnCommonTasks

struct __declspec(uuid("62fabddc-22b6-46f0-9c83-84775330f3ae"))
AgATCommonTasks;
    // [ default ] interface _IAgATCommonTasks
    // interface IAgATCommonTasks

struct __declspec(uuid("592faab5-9457-4f1b-9f71-78481fc7efe8"))
_IAgATCommonTasks : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgAreaTypeEllipsePtr SetAreaTypeEllipse (
        double SemiMajorAxis,
        double SemiMinorAxis,
        const _variant_t & Bearing );
    IAgAreaTypePatternCollectionPtr SetAreaTypePattern (
        SAFEARRAY * * LatLons );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetAreaTypeEllipse (
        /*[in]*/ double SemiMajorAxis,
        /*[in]*/ double SemiMinorAxis,
        /*[in]*/ VARIANT Bearing,
        /*[out,retval]*/ struct IAgAreaTypeEllipse * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAreaTypePattern (
        /*[in]*/ SAFEARRAY * * LatLons,
        /*[out,retval]*/ struct IAgAreaTypePatternCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("417a2dbb-e2d7-41e7-a5d6-acb602d9b69b"))
AgPlCommonTasks;
    // [ default ] interface _IAgPlCommonTasks
    // interface IAgPlCommonTasks

struct __declspec(uuid("2e032bbf-93b8-48bb-95be-69aa25dda6a0"))
_IAgPlCommonTasks : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgPlPosFilePtr SetPositionSourceFile (
        _bstr_t File );
    IAgPlPosCentralBodyPtr SetPositionSourceCentralBody (
        _bstr_t CentralBody,
        enum AgEEphemSourceType EphemSource );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPositionSourceFile (
        /*[in]*/ BSTR File,
        /*[out,retval]*/ struct IAgPlPosFile * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPositionSourceCentralBody (
        /*[in]*/ BSTR CentralBody,
        /*[in]*/ enum AgEEphemSourceType EphemSource,
        /*[out,retval]*/ struct IAgPlPosCentralBody * * ppRetVal ) = 0;
};

struct __declspec(uuid("9b9cc3e4-cc65-4a00-ae03-b91cf8367748"))
AgSwath;
    // [ default ] interface _IAgSwath
    // interface IAgSwath

struct __declspec(uuid("dbe96583-d3b4-4e05-8556-bba8e89bd988"))
_IAgSwath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnable,put=PutEnable))
    VARIANT_BOOL Enable;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetTimeIntervalCount))
    long TimeIntervalCount;
    __declspec(property(get=GetMinimumStep,put=PutMinimumStep))
    double MinimumStep;
    __declspec(property(get=GetMaximumStep,put=PutMaximumStep))
    double MaximumStep;
    __declspec(property(get=GetUseMaximumCone,put=PutUseMaximumCone))
    VARIANT_BOOL UseMaximumCone;
    __declspec(property(get=GetScatteringTolerance,put=PutScatteringTolerance))
    double ScatteringTolerance;
    __declspec(property(get=GetCurvatureTolerance,put=PutCurvatureTolerance))
    double CurvatureTolerance;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnable ( );
    void PutEnable (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    HRESULT Apply ( );
    HRESULT SetTimePeriod (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    HRESULT AddTimeInterval (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    HRESULT ModifyTimeInterval (
        long Index,
        const _variant_t & Start,
        const _variant_t & Stop );
    long GetTimeIntervalIndex (
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT RemoveTimeInterval (
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT RemoveTimeIntervalIndex (
        long Index );
    HRESULT RemoveAllIntervals ( );
    long GetTimeIntervalCount ( );
    SAFEARRAY * ToArray (
        long Index,
        long Length );
    double GetMinimumStep ( );
    void PutMinimumStep (
        double pVal );
    double GetMaximumStep ( );
    void PutMaximumStep (
        double pVal );
    VARIANT_BOOL GetUseMaximumCone ( );
    void PutUseMaximumCone (
        VARIANT_BOOL pVal );
    double GetScatteringTolerance ( );
    void PutScatteringTolerance (
        double pVal );
    double GetCurvatureTolerance ( );
    void PutCurvatureTolerance (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_SetTimePeriod (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall raw_AddTimeInterval (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall raw_ModifyTimeInterval (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_GetTimeIntervalIndex (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[out,retval]*/ long * pIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveTimeInterval (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_RemoveTimeIntervalIndex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllIntervals ( ) = 0;
      virtual HRESULT __stdcall get_TimeIntervalCount (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[in]*/ long Index,
        /*[in]*/ long Length,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinimumStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaximumStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseMaximumCone (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseMaximumCone (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ScatteringTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScatteringTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CurvatureTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CurvatureTolerance (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d3a41b90-0f09-4c06-b098-0c5fa3ef6046"))
AgStar;
    // [ default ] interface _IAgStar
    // interface IAgStar
    // interface IAgStkObject
    // interface IAgLifetimeInformation

enum AgEStarReferenceFrame
{
    eStarReferenceFrameICRF = 0,
    eStarReferenceFrameJ2000 = 1
};

struct __declspec(uuid("fabcea16-b172-409e-aecb-d8fa8d21aa3b"))
IAgStar : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLocationRightAscension,put=PutLocationRightAscension))
    _variant_t LocationRightAscension;
    __declspec(property(get=GetLocationDeclination,put=PutLocationDeclination))
    _variant_t LocationDeclination;
    __declspec(property(get=GetProperMotionRightAscension,put=PutProperMotionRightAscension))
    double ProperMotionRightAscension;
    __declspec(property(get=GetProperMotionDeclination,put=PutProperMotionDeclination))
    double ProperMotionDeclination;
    __declspec(property(get=GetParallax,put=PutParallax))
    _variant_t Parallax;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _bstr_t Epoch;
    __declspec(property(get=GetMagnitude,put=PutMagnitude))
    double Magnitude;
    __declspec(property(get=GetGraphics))
    IAgStGraphicsPtr Graphics;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetVO))
    IAgStVOPtr VO;
    __declspec(property(get=GetReferenceFrame))
    enum AgEStarReferenceFrame ReferenceFrame;
    __declspec(property(get=GetProperMotionRadialVelocity,put=PutProperMotionRadialVelocity))
    double ProperMotionRadialVelocity;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLocationRightAscension ( );
    void PutLocationRightAscension (
        const _variant_t & pRightAscension );
    _variant_t GetLocationDeclination ( );
    void PutLocationDeclination (
        const _variant_t & pDeclination );
    double GetProperMotionRightAscension ( );
    void PutProperMotionRightAscension (
        double pProperMotionRightAscension );
    double GetProperMotionDeclination ( );
    void PutProperMotionDeclination (
        double pProperMotionDeclination );
    _variant_t GetParallax ( );
    void PutParallax (
        const _variant_t & pProperMotionParallax );
    _bstr_t GetEpoch ( );
    void PutEpoch (
        _bstr_t pEpoch );
    double GetMagnitude ( );
    void PutMagnitude (
        double pMagnitude );
    IAgStGraphicsPtr GetGraphics ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgStVOPtr GetVO ( );
    enum AgEStarReferenceFrame GetReferenceFrame ( );
    double GetProperMotionRadialVelocity ( );
    void PutProperMotionRadialVelocity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocationRightAscension (
        /*[out,retval]*/ VARIANT * pRightAscension ) = 0;
      virtual HRESULT __stdcall put_LocationRightAscension (
        /*[in]*/ VARIANT pRightAscension ) = 0;
      virtual HRESULT __stdcall get_LocationDeclination (
        /*[out,retval]*/ VARIANT * pDeclination ) = 0;
      virtual HRESULT __stdcall put_LocationDeclination (
        /*[in]*/ VARIANT pDeclination ) = 0;
      virtual HRESULT __stdcall get_ProperMotionRightAscension (
        /*[out,retval]*/ double * pProperMotionRightAscension ) = 0;
      virtual HRESULT __stdcall put_ProperMotionRightAscension (
        /*[in]*/ double pProperMotionRightAscension ) = 0;
      virtual HRESULT __stdcall get_ProperMotionDeclination (
        /*[out,retval]*/ double * pProperMotionDeclination ) = 0;
      virtual HRESULT __stdcall put_ProperMotionDeclination (
        /*[in]*/ double pProperMotionDeclination ) = 0;
      virtual HRESULT __stdcall get_Parallax (
        /*[out,retval]*/ VARIANT * pProperMotionParallax ) = 0;
      virtual HRESULT __stdcall put_Parallax (
        /*[in]*/ VARIANT pProperMotionParallax ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ BSTR * pEpoch ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ BSTR pEpoch ) = 0;
      virtual HRESULT __stdcall get_Magnitude (
        /*[out,retval]*/ double * pMagnitude ) = 0;
      virtual HRESULT __stdcall put_Magnitude (
        /*[in]*/ double pMagnitude ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgStGraphics * * ppGraphics ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAccessConstraints ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgStVO * * ppVO ) = 0;
      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ enum AgEStarReferenceFrame * pVal ) = 0;
      virtual HRESULT __stdcall get_ProperMotionRadialVelocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProperMotionRadialVelocity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("15e217ee-dbb2-4889-ae2f-dc5f923c1105"))
AgDataProviderCollection;
    // [ default ] interface IUnknown
    // interface IAgDataProviderCollection

struct __declspec(uuid("85086afd-76cb-46af-a0eb-b904e3f39a83"))
AgDrTimeArrayElements;
    // [ default ] interface _IAgDrTimeArrayElements
    // interface IAgDrTimeArrayElements

struct __declspec(uuid("ad69a917-19f9-4923-b6ae-0e436abb17e9"))
_IAgDrTimeArrayElements : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetArray (
        const _variant_t & IndexOrName );
    VARIANT_BOOL GetValid ( );
    int GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetArray (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pRetVal ) = 0;
};

struct __declspec(uuid("3b9eca03-f91d-4633-9517-24ade47c3cef"))
AgDrResult;
    // [ default ] interface _IAgDrResult
    // interface IAgDrResult

struct __declspec(uuid("0225f854-301b-41e2-9aaa-437bf4453263"))
_IAgDrResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCategory))
    enum AgEDrCategories Category;
    __declspec(property(get=GetValue))
    IDispatchPtr Value;
    __declspec(property(get=GetSections))
    IAgDrSubSectionCollectionPtr Sections;
    __declspec(property(get=GetIntervals))
    IAgDrIntervalCollectionPtr Intervals;
    __declspec(property(get=GetDataSets))
    IAgDrDataSetCollectionPtr DataSets;
    __declspec(property(get=GetMessage))
    IAgDrTextMessagePtr Message;

    //
    // Wrapper methods for error-handling
    //

    enum AgEDrCategories GetCategory ( );
    IDispatchPtr GetValue ( );
    IAgDrSubSectionCollectionPtr GetSections ( );
    IAgDrIntervalCollectionPtr GetIntervals ( );
    IAgDrDataSetCollectionPtr GetDataSets ( );
    IAgDrTextMessagePtr GetMessage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ enum AgEDrCategories * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sections (
        /*[out,retval]*/ struct IAgDrSubSectionCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgDrIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataSets (
        /*[out,retval]*/ struct IAgDrDataSetCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ struct IAgDrTextMessage * * ppRetVal ) = 0;
};

struct __declspec(uuid("da40436d-bb84-49e6-be50-7f632300f439"))
AgDrSubSectionCollection;
    // [ default ] interface IUnknown
    // interface IAgDrSubSectionCollection

struct __declspec(uuid("0337488f-da3b-49f8-9bed-4a93349815d4"))
AgDrSubSection;
    // [ default ] interface _IAgDrSubSection
    // interface IAgDrSubSection

struct __declspec(uuid("273564f5-c4ea-4653-afdd-91378987db00"))
_IAgDrSubSection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetIntervals))
    IAgDrIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    IAgDrIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgDrIntervalCollection * * ppVal ) = 0;
};

struct __declspec(uuid("f17eff83-31b3-482e-a036-c2e23b398576"))
AgDrIntervalCollection;
    // [ default ] interface IUnknown
    // interface IAgDrIntervalCollection

struct __declspec(uuid("d7983e17-b618-4136-b0d9-4609b51e0058"))
AgDrInterval;
    // [ default ] interface _IAgDrInterval
    // interface IAgDrInterval

struct __declspec(uuid("8d76302b-5888-4bc1-a028-b4575468a348"))
_IAgDrInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetDataSets))
    IAgDrDataSetCollectionPtr DataSets;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    IAgDrDataSetCollectionPtr GetDataSets ( );
    SAFEARRAY * ThresholdCrossings (
        _bstr_t ElemName,
        const _variant_t & Threshold );
    SAFEARRAY * MultipleThresholdCrossings (
        _bstr_t ElemName,
        SAFEARRAY * * Thresholds );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_DataSets (
        /*[out,retval]*/ struct IAgDrDataSetCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ThresholdCrossings (
        /*[in]*/ BSTR ElemName,
        /*[in]*/ VARIANT Threshold,
        /*[out,retval]*/ SAFEARRAY * * ppCrossings ) = 0;
      virtual HRESULT __stdcall raw_MultipleThresholdCrossings (
        /*[in]*/ BSTR ElemName,
        /*[in]*/ SAFEARRAY * * Thresholds,
        /*[out,retval]*/ SAFEARRAY * * ppCrossings ) = 0;
};

struct __declspec(uuid("f8e3ad47-233b-44af-b0fc-7e0199db1e51"))
AgDrDataSetCollection;
    // [ default ] interface IUnknown
    // interface IAgDrDataSetCollection

struct __declspec(uuid("7af5f2c2-1b25-4849-9693-37e2ec5ec341"))
AgDrDataSet;
    // [ default ] interface _IAgDrDataSet
    // interface IAgDrDataSet

struct __declspec(uuid("e0adf78a-4f1c-4d68-b164-54fcf2868f44"))
_IAgDrDataSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetElementName))
    _bstr_t ElementName;
    __declspec(property(get=GetElementType))
    long ElementType;
    __declspec(property(get=GetUnitType))
    long UnitType;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetElementName ( );
    long GetElementType ( );
    long GetUnitType ( );
    long GetCount ( );
    SAFEARRAY * GetValues ( );
    SAFEARRAY * GetInternalUnitValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ElementName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ElementType (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_UnitType (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetValues (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetInternalUnitValues (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("ecad59a0-127e-43c9-95da-70b8c53e5414"))
AgDataPrvFixed;
    // [ default ] interface _IAgDataPrvFixed
    // interface IAgDataPrvFixed
    // interface IAgDataProvider
    // interface IAgDataProviderInfo

enum AgEDataPrvElementType
{
    eReal = 0,
    eInt = 1,
    eChar = 2,
    eCharOrReal = 3
};

struct __declspec(uuid("d2532d52-2998-440f-8c68-3c3ad553b10a"))
IAgDataPrvElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgEDataPrvElementType Type;
    __declspec(property(get=GetUnitType))
    short UnitType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum AgEDataPrvElementType GetType ( );
    short GetUnitType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEDataPrvElementType * pVal ) = 0;
      virtual HRESULT __stdcall get_UnitType (
        /*[out,retval]*/ short * pVal ) = 0;
};

struct __declspec(uuid("54f1a93d-9492-40b8-852d-bb864dc5f842"))
IAgDataPrvElements : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgDataPrvElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IAgDataPrvElementPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAgDataPrvElement * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
};

struct __declspec(uuid("e016de70-1894-459e-b2c9-e4ae915b8073"))
_IAgDataPrvFixed : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetElements))
    IAgDataPrvElementsPtr Elements;
    __declspec(property(get=GetPreData,put=PutPreData))
    _bstr_t PreData;
    __declspec(property(get=GetAllowUI,put=PutAllowUI))
    VARIANT_BOOL AllowUI;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgEDataProviderType Type;

    //
    // Wrapper methods for error-handling
    //

    IAgDrResultPtr Exec ( );
    IAgDrResultPtr ExecElements (
        SAFEARRAY * * ElementNames );
    IAgDataPrvElementsPtr GetElements ( );
    _bstr_t GetPreData ( );
    void PutPreData (
        _bstr_t pVal );
    VARIANT_BOOL GetAllowUI ( );
    void PutAllowUI (
        VARIANT_BOOL pVal );
    _bstr_t GetName ( );
    enum AgEDataProviderType GetType ( );
    VARIANT_BOOL IsGroup ( );
    VARIANT_BOOL GetIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Exec (
        /*[out,retval]*/ struct IAgDrResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExecElements (
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Elements (
        /*[out,retval]*/ struct IAgDataPrvElements * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PreData (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PreData (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllowUI (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowUI (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEDataProviderType * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsGroup (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("1b366dd3-0bac-47e5-95b2-e2425347b839"))
IAgDataProvider : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetElements))
    IAgDataPrvElementsPtr Elements;
    __declspec(property(get=GetPreData,put=PutPreData))
    _bstr_t PreData;
    __declspec(property(get=GetAllowUI,put=PutAllowUI))
    VARIANT_BOOL AllowUI;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;

    //
    // Wrapper methods for error-handling
    //

    IAgDataPrvElementsPtr GetElements ( );
    _bstr_t GetPreData ( );
    void PutPreData (
        _bstr_t pVal );
    VARIANT_BOOL GetAllowUI ( );
    void PutAllowUI (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elements (
        /*[out,retval]*/ struct IAgDataPrvElements * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PreData (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PreData (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllowUI (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowUI (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("08d2ae3d-378e-42a6-961c-9686180c4031"))
AgDataPrvTimeVar;
    // [ default ] interface _IAgDataPrvTimeVar
    // interface IAgDataPrvTimeVar
    // interface IAgDataProvider
    // interface IAgDataProviderInfo

struct __declspec(uuid("227a1b54-a414-46c1-8f30-6cc4de3456e2"))
_IAgDataPrvTimeVar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetElements))
    IAgDataPrvElementsPtr Elements;
    __declspec(property(get=GetPreData,put=PutPreData))
    _bstr_t PreData;
    __declspec(property(get=GetAllowUI,put=PutAllowUI))
    VARIANT_BOOL AllowUI;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgEDataProviderType Type;

    //
    // Wrapper methods for error-handling
    //

    IAgDrResultPtr Exec (
        const _variant_t & StartTime,
        const _variant_t & StopTime,
        double StepTime );
    IAgDrResultPtr ExecElements (
        const _variant_t & StartTime,
        const _variant_t & StopTime,
        double StepTime,
        SAFEARRAY * * ElementNames );
    IAgDrResultPtr ExecSingle (
        const _variant_t & SingleTime );
    IAgDrResultPtr ExecSingleElements (
        const _variant_t & SingleTime,
        SAFEARRAY * * ElementNames );
    IAgDataPrvElementsPtr GetElements ( );
    _bstr_t GetPreData ( );
    void PutPreData (
        _bstr_t pVal );
    VARIANT_BOOL GetAllowUI ( );
    void PutAllowUI (
        VARIANT_BOOL pVal );
    _bstr_t GetName ( );
    enum AgEDataProviderType GetType ( );
    VARIANT_BOOL IsGroup ( );
    VARIANT_BOOL GetIsValid ( );
    IAgDrTimeArrayElementsPtr ExecSingleElementsArray (
        SAFEARRAY * * TimeArray,
        SAFEARRAY * * ElementNames );
    IAgDrResultPtr ExecNativeTimes (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    IAgDrResultPtr ExecElementsNativeTimes (
        const _variant_t & StartTime,
        const _variant_t & StopTime,
        SAFEARRAY * * ElementNames );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Exec (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[in]*/ double StepTime,
        /*[out,retval]*/ struct IAgDrResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExecElements (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[in]*/ double StepTime,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExecSingle (
        /*[in]*/ VARIANT SingleTime,
        /*[out,retval]*/ struct IAgDrResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExecSingleElements (
        /*[in]*/ VARIANT SingleTime,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Elements (
        /*[out,retval]*/ struct IAgDataPrvElements * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PreData (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PreData (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllowUI (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowUI (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEDataProviderType * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsGroup (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExecSingleElementsArray (
        /*[in]*/ SAFEARRAY * * TimeArray,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrTimeArrayElements * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExecNativeTimes (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
      virtual HRESULT __stdcall raw_ExecElementsNativeTimes (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppIAgDrResult ) = 0;
};

struct __declspec(uuid("5f35a2d3-0f90-47cc-bb3b-6fcb7704b791"))
AgDataPrvInterval;
    // [ default ] interface _IAgDataPrvInterval
    // interface IAgDataPrvInterval
    // interface IAgDataProvider
    // interface IAgDataProviderInfo

struct __declspec(uuid("86f0f208-bf06-4946-b15a-41d3a11cbfae"))
_IAgDataPrvInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetElements))
    IAgDataPrvElementsPtr Elements;
    __declspec(property(get=GetPreData,put=PutPreData))
    _bstr_t PreData;
    __declspec(property(get=GetAllowUI,put=PutAllowUI))
    VARIANT_BOOL AllowUI;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgEDataProviderType Type;

    //
    // Wrapper methods for error-handling
    //

    IAgDrResultPtr Exec (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    IAgDrResultPtr ExecElements (
        const _variant_t & StartTime,
        const _variant_t & StopTime,
        SAFEARRAY * * ElementNames );
    IAgDataPrvElementsPtr GetElements ( );
    _bstr_t GetPreData ( );
    void PutPreData (
        _bstr_t pVal );
    VARIANT_BOOL GetAllowUI ( );
    void PutAllowUI (
        VARIANT_BOOL pVal );
    _bstr_t GetName ( );
    enum AgEDataProviderType GetType ( );
    VARIANT_BOOL IsGroup ( );
    VARIANT_BOOL GetIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Exec (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[out,retval]*/ struct IAgDrResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExecElements (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[in]*/ SAFEARRAY * * ElementNames,
        /*[out,retval]*/ struct IAgDrResult * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Elements (
        /*[out,retval]*/ struct IAgDataPrvElements * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PreData (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PreData (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AllowUI (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowUI (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEDataProviderType * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsGroup (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("1f6f2ef0-2416-42b6-be7e-653da07a0acc"))
AgDrTextMessage;
    // [ default ] interface IUnknown
    // interface IAgDrTextMessage

struct __declspec(uuid("22e0ec1b-aa1e-4770-8cbd-cd7826a46137"))
AgDataProviderGroup;
    // [ default ] interface _IAgDataProviderGroup
    // interface IAgDataProviderInfo
    // interface IAgDataProviderGroup

struct __declspec(uuid("75639cdc-3a89-43be-b540-c447a18caf46"))
IAgDataProviders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgDataProviderInfoPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgDataProviderInfoPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
};

struct __declspec(uuid("20a8f4cf-e17a-44ad-933a-8dbbcb56f52d"))
_IAgDataProviderGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgEDataProviderType Type;
    __declspec(property(get=GetGroup))
    IAgDataProvidersPtr Group;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum AgEDataProviderType GetType ( );
    VARIANT_BOOL IsGroup ( );
    IAgDataProvidersPtr GetGroup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEDataProviderType * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsGroup (
        /*[out,retval]*/ VARIANT_BOOL * bRetVal ) = 0;
      virtual HRESULT __stdcall get_Group (
        /*[out,retval]*/ struct IAgDataProviders * * ppRetVal ) = 0;
};

struct __declspec(uuid("79aff5e4-5a85-4917-9544-552132054a4c"))
IAgDataProviderGroup : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGroup))
    IAgDataProvidersPtr Group;

    //
    // Wrapper methods for error-handling
    //

    IAgDataProvidersPtr GetGroup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Group (
        /*[out,retval]*/ struct IAgDataProviders * * ppRetVal ) = 0;
};

struct __declspec(uuid("820ea460-b377-4513-92a6-7489f0e797a6"))
AgDataPrvElements;
    // [ default ] interface IUnknown
    // interface IAgDataPrvElements

struct __declspec(uuid("517d5287-04a5-4966-abc0-69fc3e6e317c"))
AgDataPrvElement;
    // [ default ] interface _IAgDataPrvElement
    // interface IAgDataPrvElement

struct __declspec(uuid("a628b83e-6f24-4989-a847-cf9d750d832e"))
_IAgDataPrvElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum AgEDataPrvElementType Type;
    __declspec(property(get=GetUnitType))
    short UnitType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum AgEDataPrvElementType GetType ( );
    short GetUnitType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEDataPrvElementType * pVal ) = 0;
      virtual HRESULT __stdcall get_UnitType (
        /*[out,retval]*/ short * pVal ) = 0;
};

struct __declspec(uuid("52c7a9ac-bb82-4610-b804-122ca8fd3f28"))
AgDataProviders;
    // [ default ] interface IUnknown
    // interface IAgDataProviders

struct __declspec(uuid("9b93fa4e-e470-48f2-acce-57d9e7e29774"))
AgStkAccess;
    // [ default ] interface _IAgStkAccess
    // interface IAgLifetimeInformation
    // interface IAgStkAccess

struct __declspec(uuid("2234ae61-a69e-46e0-a37a-d94203839cb6"))
_IAgStkAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetAccessTimePeriod,put=PutAccessTimePeriod))
    enum AgEAccessTimeType AccessTimePeriod;
    __declspec(property(get=GetGraphics))
    IAgStkAccessGraphicsPtr Graphics;
    __declspec(property(get=GetAdvanced))
    IAgStkAccessAdvancedPtr Advanced;
    __declspec(property(get=GetDataDisplays))
    IAgVODataDisplayCollectionPtr DataDisplays;
    __declspec(property(get=GetComputedAccessIntervalTimes))
    IAgIntervalCollectionPtr ComputedAccessIntervalTimes;
    __declspec(property(get=GetAccessTimePeriodData))
    IAgAccessIntervalPtr AccessTimePeriodData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    HRESULT RemoveAccess ( );
    HRESULT ComputeAccess ( );
    enum AgEAccessTimeType GetAccessTimePeriod ( );
    void PutAccessTimePeriod (
        enum AgEAccessTimeType pVal );
    HRESULT SpecifyAccessTimePeriod (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    IAgStkAccessGraphicsPtr GetGraphics ( );
    IAgStkAccessAdvancedPtr GetAdvanced ( );
    IAgVODataDisplayCollectionPtr GetDataDisplays ( );
    HRESULT SpecifyAccessIntervals (
        SAFEARRAY * * AccessIntervals );
    IAgIntervalCollectionPtr GetComputedAccessIntervalTimes ( );
    IAgAccessIntervalPtr GetAccessTimePeriodData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAccess ( ) = 0;
      virtual HRESULT __stdcall raw_ComputeAccess ( ) = 0;
      virtual HRESULT __stdcall get_AccessTimePeriod (
        /*[out,retval]*/ enum AgEAccessTimeType * pVal ) = 0;
      virtual HRESULT __stdcall put_AccessTimePeriod (
        /*[in]*/ enum AgEAccessTimeType pVal ) = 0;
      virtual HRESULT __stdcall raw_SpecifyAccessTimePeriod (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgStkAccessGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgStkAccessAdvanced * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplays (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SpecifyAccessIntervals (
        /*[in]*/ SAFEARRAY * * AccessIntervals ) = 0;
      virtual HRESULT __stdcall get_ComputedAccessIntervalTimes (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AccessTimePeriodData (
        /*[out,retval]*/ struct IAgAccessInterval * * ppRetVal ) = 0;
};

struct __declspec(uuid("b89a17c5-2f47-4ba4-a79a-4a870b09f789"))
AgStkAccessGraphics;
    // [ default ] interface _IAgStkAccessGraphics
    // interface IAgStkAccessGraphics

struct __declspec(uuid("f49a6d92-c843-40da-a184-74a5cf997aaa"))
_IAgStkAccessGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetLineVisible,put=PutLineVisible))
    VARIANT_BOOL LineVisible;
    __declspec(property(get=GetAnimateGfx,put=PutAnimateGfx))
    VARIANT_BOOL AnimateGfx;
    __declspec(property(get=GetStaticGfx,put=PutStaticGfx))
    VARIANT_BOOL StaticGfx;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLineVisible ( );
    void PutLineVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAnimateGfx ( );
    void PutAnimateGfx (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetStaticGfx ( );
    void PutStaticGfx (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LineVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AnimateGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AnimateGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StaticGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_StaticGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("ae4f3285-f8ed-4b84-b441-fe8b826afc98"))
AgStkAccessAdvanced;
    // [ default ] interface _IAgStkAccessAdvanced
    // interface IAgStkAccessAdvanced

struct __declspec(uuid("67427225-62c4-45ec-9836-a3eec365efcd"))
_IAgStkAccessAdvanced : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableLightTimeDelay,put=PutEnableLightTimeDelay))
    VARIANT_BOOL EnableLightTimeDelay;
    __declspec(property(get=GetTimeConvergence,put=PutTimeConvergence))
    double TimeConvergence;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetTimeLightDelayConvergence,put=PutTimeLightDelayConvergence))
    double TimeLightDelayConvergence;
    __declspec(property(get=GetAberrationType,put=PutAberrationType))
    enum AgEAberrationType AberrationType;
    __declspec(property(get=GetClockHost,put=PutClockHost))
    enum AgEIvClockHost ClockHost;
    __declspec(property(get=GetSignalSenseOfClockHost,put=PutSignalSenseOfClockHost))
    enum AgEIvTimeSense SignalSenseOfClockHost;
    __declspec(property(get=GetUseDefaultClockHostAndSignalSense,put=PutUseDefaultClockHostAndSignalSense))
    VARIANT_BOOL UseDefaultClockHostAndSignalSense;
    __declspec(property(get=GetUsePreciseEventTimes,put=PutUsePreciseEventTimes))
    VARIANT_BOOL UsePreciseEventTimes;
    __declspec(property(get=GetAbsoluteTolerance,put=PutAbsoluteTolerance))
    double AbsoluteTolerance;
    __declspec(property(get=GetRelativeTolerance,put=PutRelativeTolerance))
    double RelativeTolerance;
    __declspec(property(get=GetUseFixedTimeStep,put=PutUseFixedTimeStep))
    VARIANT_BOOL UseFixedTimeStep;
    __declspec(property(get=GetMinTimeStep,put=PutMinTimeStep))
    double MinTimeStep;
    __declspec(property(get=GetFixedStepSize,put=PutFixedStepSize))
    double FixedStepSize;
    __declspec(property(get=GetFixedTimeBound,put=PutFixedTimeBound))
    double FixedTimeBound;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableLightTimeDelay ( );
    void PutEnableLightTimeDelay (
        VARIANT_BOOL pVal );
    double GetTimeConvergence ( );
    void PutTimeConvergence (
        double pVal );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetTimeLightDelayConvergence ( );
    void PutTimeLightDelayConvergence (
        double pVal );
    enum AgEAberrationType GetAberrationType ( );
    void PutAberrationType (
        enum AgEAberrationType pVal );
    enum AgEIvClockHost GetClockHost ( );
    void PutClockHost (
        enum AgEIvClockHost pVal );
    enum AgEIvTimeSense GetSignalSenseOfClockHost ( );
    void PutSignalSenseOfClockHost (
        enum AgEIvTimeSense pVal );
    VARIANT_BOOL GetUseDefaultClockHostAndSignalSense ( );
    void PutUseDefaultClockHostAndSignalSense (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUsePreciseEventTimes ( );
    void PutUsePreciseEventTimes (
        VARIANT_BOOL pVal );
    double GetAbsoluteTolerance ( );
    void PutAbsoluteTolerance (
        double pVal );
    double GetRelativeTolerance ( );
    void PutRelativeTolerance (
        double pVal );
    VARIANT_BOOL GetUseFixedTimeStep ( );
    void PutUseFixedTimeStep (
        VARIANT_BOOL pVal );
    double GetMinTimeStep ( );
    void PutMinTimeStep (
        double pVal );
    double GetFixedStepSize ( );
    void PutFixedStepSize (
        double pVal );
    double GetFixedTimeBound ( );
    void PutFixedTimeBound (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimeConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeLightDelayConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeLightDelayConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AberrationType (
        /*[out,retval]*/ enum AgEAberrationType * pVal ) = 0;
      virtual HRESULT __stdcall put_AberrationType (
        /*[in]*/ enum AgEAberrationType pVal ) = 0;
      virtual HRESULT __stdcall get_ClockHost (
        /*[out,retval]*/ enum AgEIvClockHost * pVal ) = 0;
      virtual HRESULT __stdcall put_ClockHost (
        /*[in]*/ enum AgEIvClockHost pVal ) = 0;
      virtual HRESULT __stdcall get_SignalSenseOfClockHost (
        /*[out,retval]*/ enum AgEIvTimeSense * pVal ) = 0;
      virtual HRESULT __stdcall put_SignalSenseOfClockHost (
        /*[in]*/ enum AgEIvTimeSense pVal ) = 0;
      virtual HRESULT __stdcall get_UseDefaultClockHostAndSignalSense (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseDefaultClockHostAndSignalSense (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UsePreciseEventTimes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePreciseEventTimes (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AbsoluteTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RelativeTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RelativeTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseFixedTimeStep (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseFixedTimeStep (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FixedStepSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FixedStepSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FixedTimeBound (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FixedTimeBound (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("59602119-6175-4ecd-ba2b-71483ac76003"))
AgStkObjectCoverage;
    // [ default ] interface _IAgStkObjectCoverage
    // interface IAgStkObjectCoverage

struct __declspec(uuid("28e700a3-a015-48dd-8a79-27c6e3bf6ab9"))
AgObjectCoverageFOM;
    // [ default ] interface _IAgObjectCoverageFOM
    // interface IAgObjectCoverageFOM

struct __declspec(uuid("7e3e9640-a96f-4595-9beb-22843b05f501"))
_IAgObjectCoverageFOM : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefinitionType))
    enum AgEFmDefinitionType DefinitionType;
    __declspec(property(get=GetDefinitionSupportedTypes))
    SAFEARRAY * DefinitionSupportedTypes;
    __declspec(property(get=GetDefinition))
    IAgFmDefinitionPtr Definition;
    __declspec(property(get=GetGraphics))
    IAgFmGraphicsPtr Graphics;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmDefinitionType GetDefinitionType ( );
    HRESULT SetDefinitionType (
        enum AgEFmDefinitionType Def );
    VARIANT_BOOL IsDefinitionTypeSupported (
        enum AgEFmDefinitionType Def );
    SAFEARRAY * GetDefinitionSupportedTypes ( );
    IAgFmDefinitionPtr GetDefinition ( );
    IAgFmDefAccessConstraintPtr SetAccessConstraintDefinition (
        enum AgEFmConstraintName ConstraintName );
    IAgFmGraphicsPtr GetGraphics ( );
    IAgFmDefAccessConstraintPtr SetAccessConstraintDefinitionName (
        _bstr_t ConstraintName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefinitionType (
        /*[out,retval]*/ enum AgEFmDefinitionType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDefinitionType (
        /*[in]*/ enum AgEFmDefinitionType Def ) = 0;
      virtual HRESULT __stdcall raw_IsDefinitionTypeSupported (
        /*[in]*/ enum AgEFmDefinitionType Def,
        /*[out,retval]*/ VARIANT_BOOL * pSupported ) = 0;
      virtual HRESULT __stdcall get_DefinitionSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Definition (
        /*[out,retval]*/ struct IAgFmDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessConstraintDefinition (
        /*[in]*/ enum AgEFmConstraintName ConstraintName,
        /*[out,retval]*/ struct IAgFmDefAccessConstraint * * ppIAgFmDefAccessConstraint ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgFmGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessConstraintDefinitionName (
        /*[in]*/ BSTR ConstraintName,
        /*[out,retval]*/ struct IAgFmDefAccessConstraint * * ppIAgFmDefAccessConstraint ) = 0;
};

struct __declspec(uuid("4ae7c8f2-f752-487e-ad8c-a5065083bf37"))
AgScGlobeServerConfigData;
    // [ default ] interface _IAgScGlobeServerConfigData
    // interface IAgScGlobeServerConfigData

struct __declspec(uuid("34f142dc-023f-4613-95dc-6c62cd20966b"))
_IAgScGlobeServerConfigData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPort,put=PutPort))
    long Port;
    __declspec(property(get=GetUsername,put=PutUsername))
    _bstr_t Username;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    long GetPort ( );
    void PutPort (
        long pVal );
    _bstr_t GetUsername ( );
    void PutUsername (
        _bstr_t pVal );
    HRESULT SetPassword (
        _bstr_t Password );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Port (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Username (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Username (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ BSTR Password ) = 0;
};

struct __declspec(uuid("4404783e-6db9-4522-a207-aeb721b04120"))
AgScGlobeServersCollection;
    // [ default ] interface IUnknown
    // interface IAgScGlobeServersCollection

struct __declspec(uuid("a549beb9-e656-4fff-ad9e-0bd07b09caae"))
AgSc3dFont;
    // [ default ] interface _IAgSc3dFont
    // interface IAgSc3dFont

struct __declspec(uuid("18e80a64-e635-45c6-8f87-e4bacba9ad09"))
_IAgSc3dFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPtSize,put=PutPtSize))
    enum AgESc3dPtSize PtSize;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetAvailableFonts))
    SAFEARRAY * AvailableFonts;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    enum AgESc3dPtSize GetPtSize ( );
    void PutPtSize (
        enum AgESc3dPtSize pVal );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetAvailableFonts ( );
    VARIANT_BOOL IsFontAvailable (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PtSize (
        /*[out,retval]*/ enum AgESc3dPtSize * pVal ) = 0;
      virtual HRESULT __stdcall put_PtSize (
        /*[in]*/ enum AgESc3dPtSize pVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableFonts (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsFontAvailable (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("57d8dcf0-1163-4167-900a-96ea15859b2e"))
AgVOBorderWall;
    // [ default ] interface _IAgVOBorderWall
    // interface IAgVOBorderWall

struct __declspec(uuid("c43f9fd8-0b98-4a7e-9388-f9508168f2b0"))
_IAgVOBorderWall : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseBorderWall,put=PutUseBorderWall))
    VARIANT_BOOL UseBorderWall;
    __declspec(property(get=GetUpperEdgeAltRef,put=PutUpperEdgeAltRef))
    enum AgEBorderWallUpperLowerEdgeAltRef UpperEdgeAltRef;
    __declspec(property(get=GetUpperEdgeHeight,put=PutUpperEdgeHeight))
    double UpperEdgeHeight;
    __declspec(property(get=GetLowerEdgeAltRef,put=PutLowerEdgeAltRef))
    enum AgEBorderWallUpperLowerEdgeAltRef LowerEdgeAltRef;
    __declspec(property(get=GetLowerEdgeHeight,put=PutLowerEdgeHeight))
    double LowerEdgeHeight;
    __declspec(property(get=GetUseWallTranslucency,put=PutUseWallTranslucency))
    VARIANT_BOOL UseWallTranslucency;
    __declspec(property(get=GetWallTranslucency,put=PutWallTranslucency))
    double WallTranslucency;
    __declspec(property(get=GetUseLineTranslucency,put=PutUseLineTranslucency))
    VARIANT_BOOL UseLineTranslucency;
    __declspec(property(get=GetLineTranslucency,put=PutLineTranslucency))
    double LineTranslucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseBorderWall ( );
    void PutUseBorderWall (
        VARIANT_BOOL pVal );
    enum AgEBorderWallUpperLowerEdgeAltRef GetUpperEdgeAltRef ( );
    void PutUpperEdgeAltRef (
        enum AgEBorderWallUpperLowerEdgeAltRef pVal );
    double GetUpperEdgeHeight ( );
    void PutUpperEdgeHeight (
        double pVal );
    enum AgEBorderWallUpperLowerEdgeAltRef GetLowerEdgeAltRef ( );
    void PutLowerEdgeAltRef (
        enum AgEBorderWallUpperLowerEdgeAltRef pVal );
    double GetLowerEdgeHeight ( );
    void PutLowerEdgeHeight (
        double pVal );
    VARIANT_BOOL GetUseWallTranslucency ( );
    void PutUseWallTranslucency (
        VARIANT_BOOL pVal );
    double GetWallTranslucency ( );
    void PutWallTranslucency (
        double pVal );
    VARIANT_BOOL GetUseLineTranslucency ( );
    void PutUseLineTranslucency (
        VARIANT_BOOL pVal );
    double GetLineTranslucency ( );
    void PutLineTranslucency (
        double pVal );
    VARIANT_BOOL IsAltRefTypeSupported (
        enum AgEBorderWallUpperLowerEdgeAltRef RefType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseBorderWall (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseBorderWall (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UpperEdgeAltRef (
        /*[out,retval]*/ enum AgEBorderWallUpperLowerEdgeAltRef * pVal ) = 0;
      virtual HRESULT __stdcall put_UpperEdgeAltRef (
        /*[in]*/ enum AgEBorderWallUpperLowerEdgeAltRef pVal ) = 0;
      virtual HRESULT __stdcall get_UpperEdgeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UpperEdgeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LowerEdgeAltRef (
        /*[out,retval]*/ enum AgEBorderWallUpperLowerEdgeAltRef * pVal ) = 0;
      virtual HRESULT __stdcall put_LowerEdgeAltRef (
        /*[in]*/ enum AgEBorderWallUpperLowerEdgeAltRef pVal ) = 0;
      virtual HRESULT __stdcall get_LowerEdgeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LowerEdgeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseWallTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseWallTranslucency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WallTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WallTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseLineTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLineTranslucency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LineTranslucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_IsAltRefTypeSupported (
        /*[in]*/ enum AgEBorderWallUpperLowerEdgeAltRef RefType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("81d7c9ef-647e-4675-a83a-e6d141f93ede"))
AgVORefCrdnCollection;
    // [ default ] interface IUnknown
    // interface IAgVORefCrdnCollection

struct __declspec(uuid("e06ce4c3-e703-4b68-931b-55188aa7ac60"))
AgVORefCrdnVector;
    // [ default ] interface _IAgVORefCrdnVector
    // interface IAgVORefCrdn
    // interface IAgVORefCrdnVector
    // interface IAgDisplayTm

enum AgEArrowType
{
    e2D = 0,
    e3D = 1,
    ePoint = 2,
    ePointOnly = 3,
    eNoType = 4
};

enum AgEVectorAxesConnectType
{
    eConnectTrace = 0,
    eConnectSweep = 1,
    eConnectLine = 2
};

struct __declspec(uuid("e114061d-52df-4a2a-aa73-7977db75f770"))
_IAgVORefCrdnVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum AgEArrowType ArrowType;
    __declspec(property(get=GetDrawAtCB,put=PutDrawAtCB))
    VARIANT_BOOL DrawAtCB;
    __declspec(property(get=GetRADecVisible,put=PutRADecVisible))
    VARIANT_BOOL RADecVisible;
    __declspec(property(get=GetRADecUnitAbrv,put=PutRADecUnitAbrv))
    _bstr_t RADecUnitAbrv;
    __declspec(property(get=GetMagnitudeVisible,put=PutMagnitudeVisible))
    VARIANT_BOOL MagnitudeVisible;
    __declspec(property(get=GetMagnitudeUnitAbrv,put=PutMagnitudeUnitAbrv))
    _bstr_t MagnitudeUnitAbrv;
    __declspec(property(get=GetPersistenceVisible,put=PutPersistenceVisible))
    VARIANT_BOOL PersistenceVisible;
    __declspec(property(get=GetDuration,put=PutDuration))
    double Duration;
    __declspec(property(get=GetConnect,put=PutConnect))
    enum AgEVectorAxesConnectType Connect;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetAxes,put=PutAxes))
    _bstr_t Axes;
    __declspec(property(get=GetDrawAtPoint,put=PutDrawAtPoint))
    VARIANT_BOOL DrawAtPoint;
    __declspec(property(get=GetPoint,put=PutPoint))
    _bstr_t Point;
    __declspec(property(get=GetTrueScale,put=PutTrueScale))
    VARIANT_BOOL TrueScale;
    __declspec(property(get=GetAvailableAxes))
    SAFEARRAY * AvailableAxes;
    __declspec(property(get=GetAvailablePoints))
    SAFEARRAY * AvailablePoints;
    __declspec(property(get=GetMagnitudeDimension))
    _bstr_t MagnitudeDimension;
    __declspec(property(get=GetTypeID))
    enum AgEGeometricElemType TypeID;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;

    //
    // Wrapper methods for error-handling
    //

    enum AgEGeometricElemType GetTypeID ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVisible );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVisible );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    enum AgEArrowType GetArrowType ( );
    void PutArrowType (
        enum AgEArrowType pVal );
    VARIANT_BOOL GetDrawAtCB ( );
    void PutDrawAtCB (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRADecVisible ( );
    void PutRADecVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetRADecUnitAbrv ( );
    void PutRADecUnitAbrv (
        _bstr_t pVal );
    VARIANT_BOOL GetMagnitudeVisible ( );
    void PutMagnitudeVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetMagnitudeUnitAbrv ( );
    void PutMagnitudeUnitAbrv (
        _bstr_t pVal );
    VARIANT_BOOL GetPersistenceVisible ( );
    void PutPersistenceVisible (
        VARIANT_BOOL pVal );
    double GetDuration ( );
    void PutDuration (
        double pVal );
    enum AgEVectorAxesConnectType GetConnect ( );
    void PutConnect (
        enum AgEVectorAxesConnectType pVal );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL pVal );
    _bstr_t GetAxes ( );
    void PutAxes (
        _bstr_t pVal );
    VARIANT_BOOL GetDrawAtPoint ( );
    void PutDrawAtPoint (
        VARIANT_BOOL pVal );
    _bstr_t GetPoint ( );
    void PutPoint (
        _bstr_t pVal );
    VARIANT_BOOL GetTrueScale ( );
    void PutTrueScale (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetAvailableAxes ( );
    SAFEARRAY * GetAvailablePoints ( );
    _bstr_t GetMagnitudeDimension ( );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeID (
        /*[out,retval]*/ enum AgEGeometricElemType * pType ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVisible ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVisible ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVisible ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum AgEArrowType * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum AgEArrowType pVal ) = 0;
      virtual HRESULT __stdcall get_DrawAtCB (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawAtCB (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RADecVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RADecVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RADecUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RADecUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MagnitudeVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MagnitudeUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ enum AgEVectorAxesConnectType * pVal ) = 0;
      virtual HRESULT __stdcall put_Connect (
        /*[in]*/ enum AgEVectorAxesConnectType pVal ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Axes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawAtPoint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawAtPoint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TrueScale (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TrueScale (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailablePoints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeDimension (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
};

struct __declspec(uuid("94e670a0-5195-43af-9594-b4eec1558db0"))
IAgVORefCrdnVector : IAgVORefCrdn
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum AgEArrowType ArrowType;
    __declspec(property(get=GetDrawAtCB,put=PutDrawAtCB))
    VARIANT_BOOL DrawAtCB;
    __declspec(property(get=GetRADecVisible,put=PutRADecVisible))
    VARIANT_BOOL RADecVisible;
    __declspec(property(get=GetRADecUnitAbrv,put=PutRADecUnitAbrv))
    _bstr_t RADecUnitAbrv;
    __declspec(property(get=GetMagnitudeVisible,put=PutMagnitudeVisible))
    VARIANT_BOOL MagnitudeVisible;
    __declspec(property(get=GetMagnitudeDimension))
    _bstr_t MagnitudeDimension;
    __declspec(property(get=GetMagnitudeUnitAbrv,put=PutMagnitudeUnitAbrv))
    _bstr_t MagnitudeUnitAbrv;
    __declspec(property(get=GetPersistenceVisible,put=PutPersistenceVisible))
    VARIANT_BOOL PersistenceVisible;
    __declspec(property(get=GetDuration,put=PutDuration))
    double Duration;
    __declspec(property(get=GetConnect,put=PutConnect))
    enum AgEVectorAxesConnectType Connect;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetAxes,put=PutAxes))
    _bstr_t Axes;
    __declspec(property(get=GetDrawAtPoint,put=PutDrawAtPoint))
    VARIANT_BOOL DrawAtPoint;
    __declspec(property(get=GetPoint,put=PutPoint))
    _bstr_t Point;
    __declspec(property(get=GetTrueScale,put=PutTrueScale))
    VARIANT_BOOL TrueScale;
    __declspec(property(get=GetAvailableAxes))
    SAFEARRAY * AvailableAxes;
    __declspec(property(get=GetAvailablePoints))
    SAFEARRAY * AvailablePoints;

    //
    // Wrapper methods for error-handling
    //

    enum AgEArrowType GetArrowType ( );
    void PutArrowType (
        enum AgEArrowType pVal );
    VARIANT_BOOL GetDrawAtCB ( );
    void PutDrawAtCB (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRADecVisible ( );
    void PutRADecVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetRADecUnitAbrv ( );
    void PutRADecUnitAbrv (
        _bstr_t pVal );
    VARIANT_BOOL GetMagnitudeVisible ( );
    void PutMagnitudeVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetMagnitudeDimension ( );
    _bstr_t GetMagnitudeUnitAbrv ( );
    void PutMagnitudeUnitAbrv (
        _bstr_t pVal );
    VARIANT_BOOL GetPersistenceVisible ( );
    void PutPersistenceVisible (
        VARIANT_BOOL pVal );
    double GetDuration ( );
    void PutDuration (
        double pVal );
    enum AgEVectorAxesConnectType GetConnect ( );
    void PutConnect (
        enum AgEVectorAxesConnectType pVal );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL pVal );
    _bstr_t GetAxes ( );
    void PutAxes (
        _bstr_t pVal );
    VARIANT_BOOL GetDrawAtPoint ( );
    void PutDrawAtPoint (
        VARIANT_BOOL pVal );
    _bstr_t GetPoint ( );
    void PutPoint (
        _bstr_t pVal );
    VARIANT_BOOL GetTrueScale ( );
    void PutTrueScale (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetAvailableAxes ( );
    SAFEARRAY * GetAvailablePoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum AgEArrowType * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum AgEArrowType pVal ) = 0;
      virtual HRESULT __stdcall get_DrawAtCB (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawAtCB (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RADecVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RADecVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RADecUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RADecUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MagnitudeVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeDimension (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MagnitudeUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ enum AgEVectorAxesConnectType * pVal ) = 0;
      virtual HRESULT __stdcall put_Connect (
        /*[in]*/ enum AgEVectorAxesConnectType pVal ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Axes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawAtPoint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawAtPoint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TrueScale (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TrueScale (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailablePoints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("f43c1eb2-195e-4ae4-b8f6-1c2337056b77"))
AgVORefCrdnAxes;
    // [ default ] interface _IAgVORefCrdnAxes
    // interface IAgVORefCrdn
    // interface IAgVORefCrdnAxes
    // interface IAgDisplayTm

struct __declspec(uuid("4eda1e22-6f1e-4af6-882b-5ac35a66fdfa"))
_IAgVORefCrdnAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeID))
    enum AgEGeometricElemType TypeID;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum AgEArrowType ArrowType;
    __declspec(property(get=GetDrawAtCB,put=PutDrawAtCB))
    VARIANT_BOOL DrawAtCB;
    __declspec(property(get=GetAxes,put=PutAxes))
    _bstr_t Axes;
    __declspec(property(get=GetPersistenceVisible,put=PutPersistenceVisible))
    VARIANT_BOOL PersistenceVisible;
    __declspec(property(get=GetDuration,put=PutDuration))
    double Duration;
    __declspec(property(get=GetConnect,put=PutConnect))
    enum AgEVectorAxesConnectType Connect;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;
    __declspec(property(get=GetAvailableAxes))
    SAFEARRAY * AvailableAxes;

    //
    // Wrapper methods for error-handling
    //

    enum AgEGeometricElemType GetTypeID ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVisible );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVisible );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    enum AgEArrowType GetArrowType ( );
    void PutArrowType (
        enum AgEArrowType pVal );
    VARIANT_BOOL GetDrawAtCB ( );
    void PutDrawAtCB (
        VARIANT_BOOL pVal );
    _bstr_t GetAxes ( );
    void PutAxes (
        _bstr_t pVal );
    VARIANT_BOOL GetPersistenceVisible ( );
    void PutPersistenceVisible (
        VARIANT_BOOL pVal );
    double GetDuration ( );
    void PutDuration (
        double pVal );
    enum AgEVectorAxesConnectType GetConnect ( );
    void PutConnect (
        enum AgEVectorAxesConnectType pVal );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL pVal );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );
    SAFEARRAY * GetAvailableAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeID (
        /*[out,retval]*/ enum AgEGeometricElemType * pType ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVisible ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVisible ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVisible ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum AgEArrowType * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum AgEArrowType pVal ) = 0;
      virtual HRESULT __stdcall get_DrawAtCB (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawAtCB (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Axes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ enum AgEVectorAxesConnectType * pVal ) = 0;
      virtual HRESULT __stdcall put_Connect (
        /*[in]*/ enum AgEVectorAxesConnectType pVal ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("70edd9c4-a208-4a93-a851-55fdfc75cb48"))
IAgVORefCrdnAxes : IAgVORefCrdn
{
    //
    // Property data
    //

    __declspec(property(get=GetArrowType,put=PutArrowType))
    enum AgEArrowType ArrowType;
    __declspec(property(get=GetDrawAtCB,put=PutDrawAtCB))
    VARIANT_BOOL DrawAtCB;
    __declspec(property(get=GetAxes,put=PutAxes))
    _bstr_t Axes;
    __declspec(property(get=GetPersistenceVisible,put=PutPersistenceVisible))
    VARIANT_BOOL PersistenceVisible;
    __declspec(property(get=GetDuration,put=PutDuration))
    double Duration;
    __declspec(property(get=GetConnect,put=PutConnect))
    enum AgEVectorAxesConnectType Connect;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetAvailableAxes))
    SAFEARRAY * AvailableAxes;

    //
    // Wrapper methods for error-handling
    //

    enum AgEArrowType GetArrowType ( );
    void PutArrowType (
        enum AgEArrowType pVal );
    VARIANT_BOOL GetDrawAtCB ( );
    void PutDrawAtCB (
        VARIANT_BOOL pVal );
    _bstr_t GetAxes ( );
    void PutAxes (
        _bstr_t pVal );
    VARIANT_BOOL GetPersistenceVisible ( );
    void PutPersistenceVisible (
        VARIANT_BOOL pVal );
    double GetDuration ( );
    void PutDuration (
        double pVal );
    enum AgEVectorAxesConnectType GetConnect ( );
    void PutConnect (
        enum AgEVectorAxesConnectType pVal );
    VARIANT_BOOL GetTransparent ( );
    void PutTransparent (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetAvailableAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ArrowType (
        /*[out,retval]*/ enum AgEArrowType * pVal ) = 0;
      virtual HRESULT __stdcall put_ArrowType (
        /*[in]*/ enum AgEArrowType pVal ) = 0;
      virtual HRESULT __stdcall get_DrawAtCB (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawAtCB (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Axes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PersistenceVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PersistenceVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ enum AgEVectorAxesConnectType * pVal ) = 0;
      virtual HRESULT __stdcall put_Connect (
        /*[in]*/ enum AgEVectorAxesConnectType pVal ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("acf85cb2-3e19-4920-966e-3c81ef6edfca"))
AgVORefCrdnAngle;
    // [ default ] interface _IAgVORefCrdnAngle
    // interface IAgVORefCrdnAngle
    // interface IAgVORefCrdn
    // interface IAgDisplayTm

struct __declspec(uuid("bb03099c-b5ee-43bb-af43-979d0b39a50e"))
_IAgVORefCrdnAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngleValueVisible,put=PutAngleValueVisible))
    VARIANT_BOOL AngleValueVisible;
    __declspec(property(get=GetAngleUnitAbrv,put=PutAngleUnitAbrv))
    _bstr_t AngleUnitAbrv;
    __declspec(property(get=GetTypeID))
    enum AgEGeometricElemType TypeID;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAngleValueVisible ( );
    void PutAngleValueVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetAngleUnitAbrv ( );
    void PutAngleUnitAbrv (
        _bstr_t pVal );
    enum AgEGeometricElemType GetTypeID ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVisible );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVisible );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AngleValueVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleValueVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AngleUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TypeID (
        /*[out,retval]*/ enum AgEGeometricElemType * pType ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVisible ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVisible ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVisible ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
};

struct __declspec(uuid("90c98391-5cde-48a9-9402-2e50521129b1"))
IAgVORefCrdnAngle : IAgVORefCrdn
{
    //
    // Property data
    //

    __declspec(property(get=GetAngleValueVisible,put=PutAngleValueVisible))
    VARIANT_BOOL AngleValueVisible;
    __declspec(property(get=GetAngleUnitAbrv,put=PutAngleUnitAbrv))
    _bstr_t AngleUnitAbrv;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAngleValueVisible ( );
    void PutAngleValueVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetAngleUnitAbrv ( );
    void PutAngleUnitAbrv (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AngleValueVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleValueVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AngleUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("33a70adc-e979-4ac4-a7a7-cb4ed2e11c34"))
AgVORefCrdnPlane;
    // [ default ] interface _IAgVORefCrdnPlane
    // interface IAgVORefCrdn
    // interface IAgVORefCrdnPlane
    // interface IAgDisplayTm

struct __declspec(uuid("67dd5121-1ae7-4bdc-acdd-c1a88a6f5071"))
_IAgVORefCrdnPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeID))
    enum AgEGeometricElemType TypeID;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetAxisLabelsVisible,put=PutAxisLabelsVisible))
    VARIANT_BOOL AxisLabelsVisible;
    __declspec(property(get=GetTransparentPlaneVisible,put=PutTransparentPlaneVisible))
    VARIANT_BOOL TransparentPlaneVisible;
    __declspec(property(get=GetSize,put=PutSize))
    double Size;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    double Transparency;
    __declspec(property(get=GetDrawAtObject,put=PutDrawAtObject))
    VARIANT_BOOL DrawAtObject;
    __declspec(property(get=GetRectGridVisible,put=PutRectGridVisible))
    VARIANT_BOOL RectGridVisible;
    __declspec(property(get=GetCircGridVisible,put=PutCircGridVisible))
    VARIANT_BOOL CircGridVisible;
    __declspec(property(get=GetPlaneGridSpacing,put=PutPlaneGridSpacing))
    double PlaneGridSpacing;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;

    //
    // Wrapper methods for error-handling
    //

    enum AgEGeometricElemType GetTypeID ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVisible );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVisible );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAxisLabelsVisible ( );
    void PutAxisLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTransparentPlaneVisible ( );
    void PutTransparentPlaneVisible (
        VARIANT_BOOL pVal );
    double GetSize ( );
    void PutSize (
        double pVal );
    double GetTransparency ( );
    void PutTransparency (
        double pVal );
    VARIANT_BOOL GetDrawAtObject ( );
    void PutDrawAtObject (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRectGridVisible ( );
    void PutRectGridVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCircGridVisible ( );
    void PutCircGridVisible (
        VARIANT_BOOL pVal );
    double GetPlaneGridSpacing ( );
    void PutPlaneGridSpacing (
        double pVal );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeID (
        /*[out,retval]*/ enum AgEGeometricElemType * pType ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVisible ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVisible ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVisible ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AxisLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AxisLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TransparentPlaneVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TransparentPlaneVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DrawAtObject (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawAtObject (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RectGridVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RectGridVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CircGridVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CircGridVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PlaneGridSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlaneGridSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
};

struct __declspec(uuid("fda57b54-fcfa-4267-83a7-3fbf98fe570b"))
IAgVORefCrdnPlane : IAgVORefCrdn
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisLabelsVisible,put=PutAxisLabelsVisible))
    VARIANT_BOOL AxisLabelsVisible;
    __declspec(property(get=GetTransparentPlaneVisible,put=PutTransparentPlaneVisible))
    VARIANT_BOOL TransparentPlaneVisible;
    __declspec(property(get=GetSize,put=PutSize))
    double Size;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    double Transparency;
    __declspec(property(get=GetDrawAtObject,put=PutDrawAtObject))
    VARIANT_BOOL DrawAtObject;
    __declspec(property(get=GetRectGridVisible,put=PutRectGridVisible))
    VARIANT_BOOL RectGridVisible;
    __declspec(property(get=GetCircGridVisible,put=PutCircGridVisible))
    VARIANT_BOOL CircGridVisible;
    __declspec(property(get=GetPlaneGridSpacing,put=PutPlaneGridSpacing))
    double PlaneGridSpacing;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAxisLabelsVisible ( );
    void PutAxisLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTransparentPlaneVisible ( );
    void PutTransparentPlaneVisible (
        VARIANT_BOOL pVal );
    double GetSize ( );
    void PutSize (
        double pVal );
    double GetTransparency ( );
    void PutTransparency (
        double pVal );
    VARIANT_BOOL GetDrawAtObject ( );
    void PutDrawAtObject (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRectGridVisible ( );
    void PutRectGridVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCircGridVisible ( );
    void PutCircGridVisible (
        VARIANT_BOOL pVal );
    double GetPlaneGridSpacing ( );
    void PutPlaneGridSpacing (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AxisLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AxisLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TransparentPlaneVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TransparentPlaneVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DrawAtObject (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawAtObject (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RectGridVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RectGridVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CircGridVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CircGridVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PlaneGridSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PlaneGridSpacing (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("84dfc194-fd51-47d9-995b-cf53c477fac7"))
AgVORefCrdnPoint;
    // [ default ] interface _IAgVORefCrdnPoint
    // interface IAgVORefCrdn
    // interface IAgVORefCrdnPoint
    // interface IAgDisplayTm

enum AgETrajectoryType
{
    eTrajPoint = 0,
    eTrajTrace = 1,
    eTrajLine = 2
};

struct __declspec(uuid("8cf77c4f-0037-44ad-bb9d-b0b7ee12f909"))
_IAgVORefCrdnPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeID))
    enum AgEGeometricElemType TypeID;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetTrajectoryType,put=PutTrajectoryType))
    enum AgETrajectoryType TrajectoryType;
    __declspec(property(get=GetRADecVisible,put=PutRADecVisible))
    VARIANT_BOOL RADecVisible;
    __declspec(property(get=GetRADecUnitAbrv,put=PutRADecUnitAbrv))
    _bstr_t RADecUnitAbrv;
    __declspec(property(get=GetMagnitudeVisible,put=PutMagnitudeVisible))
    VARIANT_BOOL MagnitudeVisible;
    __declspec(property(get=GetMagnitudeUnitAbrv,put=PutMagnitudeUnitAbrv))
    _bstr_t MagnitudeUnitAbrv;
    __declspec(property(get=GetCartesianVisible,put=PutCartesianVisible))
    VARIANT_BOOL CartesianVisible;
    __declspec(property(get=GetCartesianUnitAbrv,put=PutCartesianUnitAbrv))
    _bstr_t CartesianUnitAbrv;
    __declspec(property(get=GetSystem,put=PutSystem))
    _bstr_t System;
    __declspec(property(get=GetSize,put=PutSize))
    double Size;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;
    __declspec(property(get=GetAvailableSystems))
    SAFEARRAY * AvailableSystems;

    //
    // Wrapper methods for error-handling
    //

    enum AgEGeometricElemType GetTypeID ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVisible );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVisible );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    enum AgETrajectoryType GetTrajectoryType ( );
    void PutTrajectoryType (
        enum AgETrajectoryType pVal );
    VARIANT_BOOL GetRADecVisible ( );
    void PutRADecVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetRADecUnitAbrv ( );
    void PutRADecUnitAbrv (
        _bstr_t pVal );
    VARIANT_BOOL GetMagnitudeVisible ( );
    void PutMagnitudeVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetMagnitudeUnitAbrv ( );
    void PutMagnitudeUnitAbrv (
        _bstr_t pVal );
    VARIANT_BOOL GetCartesianVisible ( );
    void PutCartesianVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetCartesianUnitAbrv ( );
    void PutCartesianUnitAbrv (
        _bstr_t pVal );
    _bstr_t GetSystem ( );
    void PutSystem (
        _bstr_t pVal );
    double GetSize ( );
    void PutSize (
        double pVal );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );
    SAFEARRAY * GetAvailableSystems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeID (
        /*[out,retval]*/ enum AgEGeometricElemType * pType ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVisible ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVisible ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVisible ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TrajectoryType (
        /*[out,retval]*/ enum AgETrajectoryType * pVal ) = 0;
      virtual HRESULT __stdcall put_TrajectoryType (
        /*[in]*/ enum AgETrajectoryType pVal ) = 0;
      virtual HRESULT __stdcall get_RADecVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RADecVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RADecUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RADecUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MagnitudeVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MagnitudeUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CartesianVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CartesianVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CartesianUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CartesianUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_System (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_System (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AvailableSystems (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("42cfce04-a8b8-4d11-8f33-c7545d68c327"))
IAgVORefCrdnPoint : IAgVORefCrdn
{
    //
    // Property data
    //

    __declspec(property(get=GetTrajectoryType,put=PutTrajectoryType))
    enum AgETrajectoryType TrajectoryType;
    __declspec(property(get=GetRADecVisible,put=PutRADecVisible))
    VARIANT_BOOL RADecVisible;
    __declspec(property(get=GetRADecUnitAbrv,put=PutRADecUnitAbrv))
    _bstr_t RADecUnitAbrv;
    __declspec(property(get=GetMagnitudeVisible,put=PutMagnitudeVisible))
    VARIANT_BOOL MagnitudeVisible;
    __declspec(property(get=GetMagnitudeUnitAbrv,put=PutMagnitudeUnitAbrv))
    _bstr_t MagnitudeUnitAbrv;
    __declspec(property(get=GetCartesianVisible,put=PutCartesianVisible))
    VARIANT_BOOL CartesianVisible;
    __declspec(property(get=GetCartesianUnitAbrv,put=PutCartesianUnitAbrv))
    _bstr_t CartesianUnitAbrv;
    __declspec(property(get=GetSystem,put=PutSystem))
    _bstr_t System;
    __declspec(property(get=GetSize,put=PutSize))
    double Size;
    __declspec(property(get=GetAvailableSystems))
    SAFEARRAY * AvailableSystems;

    //
    // Wrapper methods for error-handling
    //

    enum AgETrajectoryType GetTrajectoryType ( );
    void PutTrajectoryType (
        enum AgETrajectoryType pVal );
    VARIANT_BOOL GetRADecVisible ( );
    void PutRADecVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetRADecUnitAbrv ( );
    void PutRADecUnitAbrv (
        _bstr_t pVal );
    VARIANT_BOOL GetMagnitudeVisible ( );
    void PutMagnitudeVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetMagnitudeUnitAbrv ( );
    void PutMagnitudeUnitAbrv (
        _bstr_t pVal );
    VARIANT_BOOL GetCartesianVisible ( );
    void PutCartesianVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetCartesianUnitAbrv ( );
    void PutCartesianUnitAbrv (
        _bstr_t pVal );
    _bstr_t GetSystem ( );
    void PutSystem (
        _bstr_t pVal );
    double GetSize ( );
    void PutSize (
        double pVal );
    SAFEARRAY * GetAvailableSystems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrajectoryType (
        /*[out,retval]*/ enum AgETrajectoryType * pVal ) = 0;
      virtual HRESULT __stdcall put_TrajectoryType (
        /*[in]*/ enum AgETrajectoryType pVal ) = 0;
      virtual HRESULT __stdcall get_RADecVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RADecVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RADecUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RADecUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MagnitudeVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MagnitudeUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CartesianVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CartesianVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CartesianUnitAbrv (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CartesianUnitAbrv (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_System (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_System (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableSystems (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("c62cf149-7b27-4cf0-8925-1f1bc4cf7b93"))
AgTargetGraphics;
    // [ default ] interface _IAgTargetGraphics
    // interface IAgTargetGraphics

struct __declspec(uuid("73ca01ce-9eda-4ce3-a765-4021198c5efb"))
_IAgTargetGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFromScenario,put=PutInheritFromScenario))
    VARIANT_BOOL InheritFromScenario;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetAzElMask))
    IAgBasicAzElMaskPtr AzElMask;
    __declspec(property(get=GetContours))
    IAgGfxRangeContoursPtr Contours;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetMarkerColor,put=PutMarkerColor))
    OLE_COLOR MarkerColor;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFromScenario ( );
    void PutInheritFromScenario (
        VARIANT_BOOL pInherit );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pMarkerStyle );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pShowLabel );
    IAgBasicAzElMaskPtr GetAzElMask ( );
    IAgGfxRangeContoursPtr GetContours ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pVal );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    OLE_COLOR GetMarkerColor ( );
    void PutMarkerColor (
        OLE_COLOR pColor );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pColor );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFromScenario (
        /*[out,retval]*/ VARIANT_BOOL * pInherit ) = 0;
      virtual HRESULT __stdcall put_InheritFromScenario (
        /*[in]*/ VARIANT_BOOL pInherit ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pMarkerStyle ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pMarkerStyle ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pShowLabel ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pShowLabel ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ struct IAgBasicAzElMask * * ppAzElMask ) = 0;
      virtual HRESULT __stdcall get_Contours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppContours ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_MarkerColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("620f2f5e-406a-48f6-8e37-f1f80ab0a1c9"))
AgTargetVO;
    // [ default ] interface _IAgTargetVO
    // interface IAgTargetVO

struct __declspec(uuid("a713b9b4-4d04-4e64-8d38-5ca2e1622b55"))
AgPtTargetVOModel;
    // [ default ] interface _IAgPtTargetVOModel
    // interface IAgVOModel
    // interface IAgPtTargetVOModel

struct __declspec(uuid("d5495592-d564-4dbc-8cd5-c5361ee3c6fc"))
_IAgPtTargetVOModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;
    __declspec(property(get=GetDetailThreshold))
    IAgVODetailThresholdPtr DetailThreshold;
    __declspec(property(get=GetModelData))
    IAgVOModelDataPtr ModelData;
    __declspec(property(get=GetModelType,put=PutModelType))
    enum AgEModelType ModelType;
    __declspec(property(get=GetArticulation))
    IAgVOModelArticPtr Articulation;
    __declspec(property(get=GetMarker))
    IAgVOMarkerPtr Marker;
    __declspec(property(get=GetIsPointVisible,put=PutIsPointVisible))
    VARIANT_BOOL IsPointVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    _variant_t PointSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pShow );
    double GetScaleValue ( );
    void PutScaleValue (
        double pScale );
    IAgVODetailThresholdPtr GetDetailThreshold ( );
    IAgVOModelDataPtr GetModelData ( );
    enum AgEModelType GetModelType ( );
    void PutModelType (
        enum AgEModelType pType );
    IAgVOModelArticPtr GetArticulation ( );
    IAgVOMarkerPtr GetMarker ( );
    VARIANT_BOOL GetIsPointVisible ( );
    void PutIsPointVisible (
        VARIANT_BOOL pVal );
    _variant_t GetPointSize ( );
    void PutPointSize (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pScale ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pScale ) = 0;
      virtual HRESULT __stdcall get_DetailThreshold (
        /*[out,retval]*/ struct IAgVODetailThreshold * * ppAgVODetailThreshold ) = 0;
      virtual HRESULT __stdcall get_ModelData (
        /*[out,retval]*/ struct IAgVOModelData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ enum AgEModelType * pType ) = 0;
      virtual HRESULT __stdcall put_ModelType (
        /*[in]*/ enum AgEModelType pType ) = 0;
      virtual HRESULT __stdcall get_Articulation (
        /*[out,retval]*/ struct IAgVOModelArtic * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVOMarker ) = 0;
      virtual HRESULT __stdcall get_IsPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("aac43f00-395b-4a0c-9475-40a0d4191828"))
AgObjectLinkCollection;
    // [ default ] interface IUnknown
    // interface IAgObjectLinkCollection

struct __declspec(uuid("035ac801-70ae-4e47-9efd-7caf541c8965"))
AgObjectLink;
    // [ default ] interface _IAgObjectLink
    // interface IAgObjectLink

struct __declspec(uuid("66d35e8a-2454-4e5e-8feb-05c6d166990a"))
AgLinkToObject;
    // [ default ] interface _IAgLinkToObject
    // interface IAgLinkToObject

struct __declspec(uuid("523d9d0b-79c1-4700-87ef-d6816bd9efbe"))
AgLLAPosition;
    // [ default ] interface _IAgLLAPosition
    // interface IAgLLAPosition

enum AgELLAPositionType
{
    eLLAPosUnknown = -1,
    eLLAPosGeocentric = 0,
    eLLAPosGeodetic = 1
};

struct __declspec(uuid("a383901a-37db-4c00-aa28-b87f77263967"))
IAgLLAPosition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgELLAPositionType Type;

    //
    // Wrapper methods for error-handling
    //

    IAgLLAPositionPtr ConvertTo (
        enum AgELLAPositionType Type );
    enum AgELLAPositionType GetType ( );
    HRESULT Assign (
        struct IAgLLAPosition * pPos );
    HRESULT AssignGeocentric (
        double Lat,
        double Lon,
        double Rad );
    HRESULT AssignGeodetic (
        double Lat,
        double Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgELLAPositionType Type,
        /*[out,retval]*/ struct IAgLLAPosition * * ppIAgLLAPosition ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgELLAPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgLLAPosition * pPos ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Rad ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt ) = 0;
};

struct __declspec(uuid("77062b31-68eb-4b1f-bfe0-25cf1ae400e2"))
_IAgLLAPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgELLAPositionType Type;

    //
    // Wrapper methods for error-handling
    //

    IAgLLAPositionPtr ConvertTo (
        enum AgELLAPositionType Type );
    enum AgELLAPositionType GetType ( );
    HRESULT Assign (
        struct IAgLLAPosition * pPos );
    HRESULT AssignGeocentric (
        double Lat,
        double Lon,
        double Rad );
    HRESULT AssignGeodetic (
        double Lat,
        double Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgELLAPositionType Type,
        /*[out,retval]*/ struct IAgLLAPosition * * ppIAgLLAPosition ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgELLAPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgLLAPosition * pPos ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Rad ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt ) = 0;
};

struct __declspec(uuid("9c552a9b-e34c-462d-becb-874bc875ac63"))
AgVODataDisplayElement;
    // [ default ] interface _IAgVODataDisplayElement
    // interface IAgVODataDisplayElement

struct __declspec(uuid("09fce126-8d0e-4dbd-be31-d976b8e7e497"))
_IAgVODataDisplayElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetLocation,put=PutLocation))
    enum AgEVOLocation Location;
    __declspec(property(get=GetXOrigin,put=PutXOrigin))
    enum AgEVOXOrigin XOrigin;
    __declspec(property(get=GetX,put=PutX))
    long X;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    enum AgEVOYOrigin YOrigin;
    __declspec(property(get=GetY,put=PutY))
    long Y;
    __declspec(property(get=GetTitle,put=PutTitle))
    VARIANT_BOOL Title;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    enum AgEVOFontSize FontSize;
    __declspec(property(get=GetFontColor,put=PutFontColor))
    OLE_COLOR FontColor;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum AgEVOFormat Format;
    __declspec(property(get=GetUseBackground,put=PutUseBackground))
    VARIANT_BOOL UseBackground;
    __declspec(property(get=GetTransparentBg,put=PutTransparentBg))
    VARIANT_BOOL TransparentBg;
    __declspec(property(get=GetBgWidth,put=PutBgWidth))
    long BgWidth;
    __declspec(property(get=GetBgHeight,put=PutBgHeight))
    long BgHeight;
    __declspec(property(get=GetBgColor,put=PutBgColor))
    OLE_COLOR BgColor;
    __declspec(property(get=GetAvailableWindows))
    SAFEARRAY * AvailableWindows;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL IsDisplayedInWindow (
        _bstr_t Title );
    enum AgEVOLocation GetLocation ( );
    void PutLocation (
        enum AgEVOLocation pVal );
    enum AgEVOXOrigin GetXOrigin ( );
    void PutXOrigin (
        enum AgEVOXOrigin pVal );
    long GetX ( );
    void PutX (
        long pVal );
    enum AgEVOYOrigin GetYOrigin ( );
    void PutYOrigin (
        enum AgEVOYOrigin pVal );
    long GetY ( );
    void PutY (
        long pVal );
    VARIANT_BOOL GetTitle ( );
    void PutTitle (
        VARIANT_BOOL pVal );
    enum AgEVOFontSize GetFontSize ( );
    void PutFontSize (
        enum AgEVOFontSize pVal );
    OLE_COLOR GetFontColor ( );
    void PutFontColor (
        OLE_COLOR pVal );
    enum AgEVOFormat GetFormat ( );
    void PutFormat (
        enum AgEVOFormat pVal );
    VARIANT_BOOL GetUseBackground ( );
    void PutUseBackground (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTransparentBg ( );
    void PutTransparentBg (
        VARIANT_BOOL pVal );
    long GetBgWidth ( );
    void PutBgWidth (
        long pVal );
    long GetBgHeight ( );
    void PutBgHeight (
        long pVal );
    OLE_COLOR GetBgColor ( );
    void PutBgColor (
        OLE_COLOR pVal );
    SAFEARRAY * GetAvailableWindows ( );
    HRESULT AddToWindow (
        _bstr_t Title );
    HRESULT RemoveFromWindow (
        _bstr_t Title );
    HRESULT AddToAllWindows ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayedInWindow (
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ enum AgEVOLocation * pVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ enum AgEVOLocation pVal ) = 0;
      virtual HRESULT __stdcall get_XOrigin (
        /*[out,retval]*/ enum AgEVOXOrigin * pVal ) = 0;
      virtual HRESULT __stdcall put_XOrigin (
        /*[in]*/ enum AgEVOXOrigin pVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ enum AgEVOYOrigin * pVal ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ enum AgEVOYOrigin pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ enum AgEVOFontSize * pVal ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ enum AgEVOFontSize pVal ) = 0;
      virtual HRESULT __stdcall get_FontColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ enum AgEVOFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ enum AgEVOFormat pVal ) = 0;
      virtual HRESULT __stdcall get_UseBackground (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseBackground (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TransparentBg (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TransparentBg (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BgWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BgWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BgHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BgHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BgColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_BgColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableWindows (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddToWindow (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromWindow (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall raw_AddToAllWindows ( ) = 0;
};

struct __declspec(uuid("5a8acd50-f40e-4287-9774-de5fa86dec2d"))
AgVODataDisplayCollection;
    // [ default ] interface IUnknown
    // interface IAgVODataDisplayCollection

struct __declspec(uuid("36db2b71-7eef-4e72-9c49-4ff073fec4fe"))
AgVeInitialState;
    // [ default ] interface _IAgVeInitialState
    // interface IAgVeInitialState

enum AgEVePropagationFrame
{
    ePropagationFrameUnknown = -1,
    ePropagationFrameInertial = 0,
    ePropagationFrameTrueOfDate = 1,
    ePropagationFrameTrueOfEpoch = 2
};

struct __declspec(uuid("6b719c03-20cd-48ba-96d7-024d8342edb8"))
_IAgVeInitialState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetRepresentation))
    STKUtil::IAgOrbitStatePtr Representation;
    __declspec(property(get=GetPropagationFrame,put=PutPropagationFrame))
    enum AgEVePropagationFrame PropagationFrame;
    __declspec(property(get=GetSupportedPropagationFrames))
    SAFEARRAY * SupportedPropagationFrames;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    STKUtil::IAgOrbitStatePtr GetRepresentation ( );
    enum AgEVePropagationFrame GetPropagationFrame ( );
    void PutPropagationFrame (
        enum AgEVePropagationFrame pVal );
    SAFEARRAY * GetSupportedPropagationFrames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Representation (
        /*[out,retval]*/ struct STKUtil::IAgOrbitState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PropagationFrame (
        /*[out,retval]*/ enum AgEVePropagationFrame * pVal ) = 0;
      virtual HRESULT __stdcall put_PropagationFrame (
        /*[in]*/ enum AgEVePropagationFrame pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedPropagationFrames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("0dd12496-ba1c-41c4-ab63-d26de22e9e28"))
IAgVeInitialState : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetRepresentation))
    STKUtil::IAgOrbitStatePtr Representation;
    __declspec(property(get=GetPropagationFrame,put=PutPropagationFrame))
    enum AgEVePropagationFrame PropagationFrame;
    __declspec(property(get=GetSupportedPropagationFrames))
    SAFEARRAY * SupportedPropagationFrames;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    STKUtil::IAgOrbitStatePtr GetRepresentation ( );
    enum AgEVePropagationFrame GetPropagationFrame ( );
    void PutPropagationFrame (
        enum AgEVePropagationFrame pVal );
    SAFEARRAY * GetSupportedPropagationFrames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Representation (
        /*[out,retval]*/ struct STKUtil::IAgOrbitState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PropagationFrame (
        /*[out,retval]*/ enum AgEVePropagationFrame * pVal ) = 0;
      virtual HRESULT __stdcall put_PropagationFrame (
        /*[in]*/ enum AgEVePropagationFrame pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedPropagationFrames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("a2d96fd3-ad33-4d29-8f4f-6f2dbc887c7d"))
AgVeHPOPCentralBodyGravity;
    // [ default ] interface _IAgVeHPOPCentralBodyGravity
    // interface IAgVeHPOPCentralBodyGravity

enum AgESolidTide
{
    eSolidTideFull = 0,
    eSolidTidePermanent = 1,
    eSolidTideNone = 2
};

struct __declspec(uuid("0fb1e785-5969-47d5-9fd3-12c3e34cff1d"))
_IAgVeHPOPCentralBodyGravity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetMaxDegree,put=PutMaxDegree))
    long MaxDegree;
    __declspec(property(get=GetMaxOrder,put=PutMaxOrder))
    long MaxOrder;
    __declspec(property(get=GetUseSolidTides,put=PutUseSolidTides))
    VARIANT_BOOL UseSolidTides;
    __declspec(property(get=GetUseOceanTides,put=PutUseOceanTides))
    VARIANT_BOOL UseOceanTides;
    __declspec(property(get=GetSolidTideType,put=PutSolidTideType))
    enum AgESolidTide SolidTideType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pVal );
    long GetMaxDegree ( );
    void PutMaxDegree (
        long pVal );
    long GetMaxOrder ( );
    void PutMaxOrder (
        long pVal );
    VARIANT_BOOL GetUseSolidTides ( );
    void PutUseSolidTides (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseOceanTides ( );
    void PutUseOceanTides (
        VARIANT_BOOL pVal );
    enum AgESolidTide GetSolidTideType ( );
    void PutSolidTideType (
        enum AgESolidTide pSolidTide );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MaxDegree (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxDegree (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxOrder (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UseSolidTides (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSolidTides (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseOceanTides (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseOceanTides (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SolidTideType (
        /*[out,retval]*/ enum AgESolidTide * pSolidTide ) = 0;
      virtual HRESULT __stdcall put_SolidTideType (
        /*[in]*/ enum AgESolidTide pSolidTide ) = 0;
};

struct __declspec(uuid("d2b0312c-903f-43df-9537-45864c565445"))
IAgVeHPOPCentralBodyGravity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetMaxDegree,put=PutMaxDegree))
    long MaxDegree;
    __declspec(property(get=GetMaxOrder,put=PutMaxOrder))
    long MaxOrder;
    __declspec(property(get=GetUseSolidTides,put=PutUseSolidTides))
    VARIANT_BOOL UseSolidTides;
    __declspec(property(get=GetUseOceanTides,put=PutUseOceanTides))
    VARIANT_BOOL UseOceanTides;
    __declspec(property(get=GetSolidTideType,put=PutSolidTideType))
    enum AgESolidTide SolidTideType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pVal );
    long GetMaxDegree ( );
    void PutMaxDegree (
        long pVal );
    long GetMaxOrder ( );
    void PutMaxOrder (
        long pVal );
    VARIANT_BOOL GetUseSolidTides ( );
    void PutUseSolidTides (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseOceanTides ( );
    void PutUseOceanTides (
        VARIANT_BOOL pVal );
    enum AgESolidTide GetSolidTideType ( );
    void PutSolidTideType (
        enum AgESolidTide pSolidTide );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MaxDegree (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxDegree (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxOrder (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UseSolidTides (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSolidTides (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseOceanTides (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseOceanTides (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SolidTideType (
        /*[out,retval]*/ enum AgESolidTide * pSolidTide ) = 0;
      virtual HRESULT __stdcall put_SolidTideType (
        /*[in]*/ enum AgESolidTide pSolidTide ) = 0;
};

struct __declspec(uuid("15a6d60d-7acc-4a18-92cf-2eb129b0877e"))
AgVeRadiationPressure;
    // [ default ] interface _IAgVeRadiationPressure
    // interface IAgVeRadiationPressure

struct __declspec(uuid("003cb95e-e942-4ebc-a2fc-7dce0e5f8bf3"))
_IAgVeRadiationPressure : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetCk,put=PutCk))
    double Ck;
    __declspec(property(get=GetAreaMassRatio,put=PutAreaMassRatio))
    double AreaMassRatio;
    __declspec(property(get=GetIncludeAlbedo,put=PutIncludeAlbedo))
    VARIANT_BOOL IncludeAlbedo;
    __declspec(property(get=GetIncludeThermal,put=PutIncludeThermal))
    VARIANT_BOOL IncludeThermal;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pVal );
    double GetCk ( );
    void PutCk (
        double pVal );
    double GetAreaMassRatio ( );
    void PutAreaMassRatio (
        double pVal );
    VARIANT_BOOL GetIncludeAlbedo ( );
    void PutIncludeAlbedo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIncludeThermal ( );
    void PutIncludeThermal (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Ck (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ck (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AreaMassRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaMassRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeAlbedo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeAlbedo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeThermal (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeThermal (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("8ceff1b3-831f-4c4e-b487-b6dc6a5d8b62"))
IAgVeRadiationPressure : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetCk,put=PutCk))
    double Ck;
    __declspec(property(get=GetAreaMassRatio,put=PutAreaMassRatio))
    double AreaMassRatio;
    __declspec(property(get=GetIncludeAlbedo,put=PutIncludeAlbedo))
    VARIANT_BOOL IncludeAlbedo;
    __declspec(property(get=GetIncludeThermal,put=PutIncludeThermal))
    VARIANT_BOOL IncludeThermal;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pVal );
    double GetCk ( );
    void PutCk (
        double pVal );
    double GetAreaMassRatio ( );
    void PutAreaMassRatio (
        double pVal );
    VARIANT_BOOL GetIncludeAlbedo ( );
    void PutIncludeAlbedo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIncludeThermal ( );
    void PutIncludeThermal (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Ck (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ck (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AreaMassRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaMassRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeAlbedo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeAlbedo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeThermal (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeThermal (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("49a85ffe-a5c2-48d7-ac37-33079823bb66"))
AgVeHPOPSolarRadiationPressure;
    // [ default ] interface _IAgVeHPOPSolarRadiationPressure
    // interface IAgVeHPOPSolarRadiationPressure

enum AgEShadowModel
{
    eShadModCylindrical = 0,
    eShadModDualCone = 1,
    eShadModNone = 2
};

enum AgESRPModel
{
    eSRPModelUnknown = -1,
    eSRPModelGPS_BlkIIA_AeroT20 = 0,
    eSRPModelGPS_BlkIIA_GSPM04a = 1,
    eSRPModelGPS_BlkIIA_GSPM04ae = 2,
    eSRPModelGPS_BlkIIR_AeroT30 = 3,
    eSRPModelGPS_BlkIIR_GSPM04a = 4,
    eSRPModelGPS_BlkIIR_GSPM04ae = 5,
    eSRPModelSpherical = 6
};

struct __declspec(uuid("aeb3bd0b-2cef-44c0-8d34-a130c56bd4d5"))
IAgSRPModelBase : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgESRPModel Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgESRPModel GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgESRPModel * pVal ) = 0;
};

struct __declspec(uuid("38578bac-0864-4ee1-af25-a05d16294a24"))
IAgVeHPOPSRPModel : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetModelType))
    enum AgESRPModel ModelType;
    __declspec(property(get=GetModelSupportedTypes))
    SAFEARRAY * ModelSupportedTypes;
    __declspec(property(get=GetModel))
    IAgSRPModelBasePtr Model;

    //
    // Wrapper methods for error-handling
    //

    enum AgESRPModel GetModelType ( );
    HRESULT SetModelType (
        enum AgESRPModel SRPModel );
    VARIANT_BOOL IsModelTypeSupported (
        enum AgESRPModel SRPModel );
    SAFEARRAY * GetModelSupportedTypes ( );
    IAgSRPModelBasePtr GetModel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ enum AgESRPModel * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetModelType (
        /*[in]*/ enum AgESRPModel SRPModel ) = 0;
      virtual HRESULT __stdcall raw_IsModelTypeSupported (
        /*[in]*/ enum AgESRPModel SRPModel,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModelSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgSRPModelBase * * ppVal ) = 0;
};

struct __declspec(uuid("5da32133-f3e2-4727-9b71-ad91cb32c164"))
_IAgVeHPOPSolarRadiationPressure : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetCr,put=PutCr))
    double Cr;
    __declspec(property(get=GetAreaMassRatio,put=PutAreaMassRatio))
    double AreaMassRatio;
    __declspec(property(get=GetShadowModel,put=PutShadowModel))
    enum AgEShadowModel ShadowModel;
    __declspec(property(get=GetUseBoundaryMitigation,put=PutUseBoundaryMitigation))
    VARIANT_BOOL UseBoundaryMitigation;
    __declspec(property(get=GetSRPModel))
    IAgVeHPOPSRPModelPtr SRPModel;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetCr ( );
    void PutCr (
        double pVal );
    double GetAreaMassRatio ( );
    void PutAreaMassRatio (
        double pVal );
    enum AgEShadowModel GetShadowModel ( );
    void PutShadowModel (
        enum AgEShadowModel pVal );
    VARIANT_BOOL GetUseBoundaryMitigation ( );
    void PutUseBoundaryMitigation (
        VARIANT_BOOL pVal );
    IAgVeHPOPSRPModelPtr GetSRPModel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Cr (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cr (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AreaMassRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaMassRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowModel (
        /*[out,retval]*/ enum AgEShadowModel * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowModel (
        /*[in]*/ enum AgEShadowModel pVal ) = 0;
      virtual HRESULT __stdcall get_UseBoundaryMitigation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseBoundaryMitigation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SRPModel (
        /*[out,retval]*/ struct IAgVeHPOPSRPModel * * ppRetVal ) = 0;
};

struct __declspec(uuid("c9dc067a-390b-4a0b-b4de-9d3ceec37cc8"))
IAgVeHPOPSolarRadiationPressure : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetCr,put=PutCr))
    double Cr;
    __declspec(property(get=GetAreaMassRatio,put=PutAreaMassRatio))
    double AreaMassRatio;
    __declspec(property(get=GetShadowModel,put=PutShadowModel))
    enum AgEShadowModel ShadowModel;
    __declspec(property(get=GetUseBoundaryMitigation,put=PutUseBoundaryMitigation))
    VARIANT_BOOL UseBoundaryMitigation;
    __declspec(property(get=GetSRPModel))
    IAgVeHPOPSRPModelPtr SRPModel;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetCr ( );
    void PutCr (
        double pVal );
    double GetAreaMassRatio ( );
    void PutAreaMassRatio (
        double pVal );
    enum AgEShadowModel GetShadowModel ( );
    void PutShadowModel (
        enum AgEShadowModel pVal );
    VARIANT_BOOL GetUseBoundaryMitigation ( );
    void PutUseBoundaryMitigation (
        VARIANT_BOOL pVal );
    IAgVeHPOPSRPModelPtr GetSRPModel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Cr (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cr (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AreaMassRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaMassRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShadowModel (
        /*[out,retval]*/ enum AgEShadowModel * pVal ) = 0;
      virtual HRESULT __stdcall put_ShadowModel (
        /*[in]*/ enum AgEShadowModel pVal ) = 0;
      virtual HRESULT __stdcall get_UseBoundaryMitigation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseBoundaryMitigation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SRPModel (
        /*[out,retval]*/ struct IAgVeHPOPSRPModel * * ppRetVal ) = 0;
};

struct __declspec(uuid("5a0d45ea-a97c-4c75-910f-a00b1159f6b7"))
AgVeSolarFluxGeoMagEnterManually;
    // [ default ] interface _IAgVeSolarFluxGeoMagEnterManually
    // interface IAgVeSolarFluxGeoMag
    // interface IAgVeSolarFluxGeoMagEnterManually

struct __declspec(uuid("165eb206-64ee-4f1f-b2b5-2801e7eb2f98"))
_IAgVeSolarFluxGeoMagEnterManually : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDailyF107,put=PutDailyF107))
    double DailyF107;
    __declspec(property(get=GetAverageF107,put=PutAverageF107))
    double AverageF107;
    __declspec(property(get=GetGeomagneticIndex,put=PutGeomagneticIndex))
    double GeomagneticIndex;

    //
    // Wrapper methods for error-handling
    //

    double GetDailyF107 ( );
    void PutDailyF107 (
        double pVal );
    double GetAverageF107 ( );
    void PutAverageF107 (
        double pVal );
    double GetGeomagneticIndex ( );
    void PutGeomagneticIndex (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DailyF107 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DailyF107 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AverageF107 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AverageF107 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GeomagneticIndex (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GeomagneticIndex (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a0d6e1aa-287d-412b-a03c-d9d137955daf"))
IAgVeSolarFluxGeoMag : IUnknown
{};

struct __declspec(uuid("7213c285-6021-4c79-a441-87c1b87a18a6"))
IAgVeSolarFluxGeoMagEnterManually : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDailyF107,put=PutDailyF107))
    double DailyF107;
    __declspec(property(get=GetAverageF107,put=PutAverageF107))
    double AverageF107;
    __declspec(property(get=GetGeomagneticIndex,put=PutGeomagneticIndex))
    double GeomagneticIndex;

    //
    // Wrapper methods for error-handling
    //

    double GetDailyF107 ( );
    void PutDailyF107 (
        double pVal );
    double GetAverageF107 ( );
    void PutAverageF107 (
        double pVal );
    double GetGeomagneticIndex ( );
    void PutGeomagneticIndex (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DailyF107 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DailyF107 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AverageF107 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AverageF107 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GeomagneticIndex (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GeomagneticIndex (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("55405b8b-e3bd-42f3-94e1-286215ebe771"))
AgVeSolarFluxGeoMagUseFile;
    // [ default ] interface _IAgVeSolarFluxGeoMagUseFile
    // interface IAgVeSolarFluxGeoMag
    // interface IAgVeSolarFluxGeoMagUseFile

enum AgEVeGeomagFluxUpdateRate
{
    e3Hourly = 0,
    e3HourlyInterp = 1,
    eDaily = 2,
    e3HourlyCubicSpline = 3
};

enum AgEVeGeomagFluxSrc
{
    eReadKpFromFile = 0,
    eReadApFromFile = 1
};

struct __declspec(uuid("e03411df-ce25-4ad4-9dc1-77559decf827"))
_IAgVeSolarFluxGeoMagUseFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetGeomagFluxUpdateRate,put=PutGeomagFluxUpdateRate))
    enum AgEVeGeomagFluxUpdateRate GeomagFluxUpdateRate;
    __declspec(property(get=GetGeomagFluxSrc,put=PutGeomagFluxSrc))
    enum AgEVeGeomagFluxSrc GeomagFluxSrc;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pVal );
    enum AgEVeGeomagFluxUpdateRate GetGeomagFluxUpdateRate ( );
    void PutGeomagFluxUpdateRate (
        enum AgEVeGeomagFluxUpdateRate pVal );
    enum AgEVeGeomagFluxSrc GetGeomagFluxSrc ( );
    void PutGeomagFluxSrc (
        enum AgEVeGeomagFluxSrc pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GeomagFluxUpdateRate (
        /*[out,retval]*/ enum AgEVeGeomagFluxUpdateRate * pVal ) = 0;
      virtual HRESULT __stdcall put_GeomagFluxUpdateRate (
        /*[in]*/ enum AgEVeGeomagFluxUpdateRate pVal ) = 0;
      virtual HRESULT __stdcall get_GeomagFluxSrc (
        /*[out,retval]*/ enum AgEVeGeomagFluxSrc * pVal ) = 0;
      virtual HRESULT __stdcall put_GeomagFluxSrc (
        /*[in]*/ enum AgEVeGeomagFluxSrc pVal ) = 0;
};

struct __declspec(uuid("201a9cb5-94ba-42a3-9dcb-81dc0976ee01"))
IAgVeSolarFluxGeoMagUseFile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetGeomagFluxUpdateRate,put=PutGeomagFluxUpdateRate))
    enum AgEVeGeomagFluxUpdateRate GeomagFluxUpdateRate;
    __declspec(property(get=GetGeomagFluxSrc,put=PutGeomagFluxSrc))
    enum AgEVeGeomagFluxSrc GeomagFluxSrc;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pVal );
    enum AgEVeGeomagFluxUpdateRate GetGeomagFluxUpdateRate ( );
    void PutGeomagFluxUpdateRate (
        enum AgEVeGeomagFluxUpdateRate pVal );
    enum AgEVeGeomagFluxSrc GetGeomagFluxSrc ( );
    void PutGeomagFluxSrc (
        enum AgEVeGeomagFluxSrc pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GeomagFluxUpdateRate (
        /*[out,retval]*/ enum AgEVeGeomagFluxUpdateRate * pVal ) = 0;
      virtual HRESULT __stdcall put_GeomagFluxUpdateRate (
        /*[in]*/ enum AgEVeGeomagFluxUpdateRate pVal ) = 0;
      virtual HRESULT __stdcall get_GeomagFluxSrc (
        /*[out,retval]*/ enum AgEVeGeomagFluxSrc * pVal ) = 0;
      virtual HRESULT __stdcall put_GeomagFluxSrc (
        /*[in]*/ enum AgEVeGeomagFluxSrc pVal ) = 0;
};

struct __declspec(uuid("23f57362-2cea-4926-b958-685811d1eed8"))
AgVeHPOPForceModelDrag;
    // [ default ] interface _IAgVeHPOPForceModelDrag
    // interface IAgVeHPOPForceModelDrag

enum AgEAtmosphericDensityModel
{
    e1976StandardAtmosModel = 0,
    eCira72 = 1,
    eExponentialModel = 2,
    eHarrisPriester = 3,
    eJacchiaRoberts = 4,
    eJacchia60 = 5,
    eJacchia70 = 6,
    eJacchia71 = 7,
    eMSIS00 = 8,
    eMSIS86 = 9,
    eMSIS90 = 10,
    eUnknownDensModel = 11,
    eUserDefined = 12
};

enum AgEVeSolarFluxGeoMag
{
    eSolarFluxGeoMagUnknown = -1,
    eSolarFluxGeoMagEnterManually = 0,
    eSolarFluxGeoMagUseFile = 1
};

struct __declspec(uuid("cb617007-61f5-4dfa-9322-a7af2ef8a3c4"))
_IAgVeHPOPForceModelDrag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetCd,put=PutCd))
    double Cd;
    __declspec(property(get=GetAreaMassRatio,put=PutAreaMassRatio))
    double AreaMassRatio;
    __declspec(property(get=GetAtmosphericDensityModel,put=PutAtmosphericDensityModel))
    enum AgEAtmosphericDensityModel AtmosphericDensityModel;
    __declspec(property(get=GetSolarFluxGeoMagType))
    enum AgEVeSolarFluxGeoMag SolarFluxGeoMagType;
    __declspec(property(get=GetSolarFluxGeoMag))
    IAgVeSolarFluxGeoMagPtr SolarFluxGeoMag;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetCd ( );
    void PutCd (
        double pVal );
    double GetAreaMassRatio ( );
    void PutAreaMassRatio (
        double pVal );
    enum AgEAtmosphericDensityModel GetAtmosphericDensityModel ( );
    void PutAtmosphericDensityModel (
        enum AgEAtmosphericDensityModel pVal );
    enum AgEVeSolarFluxGeoMag GetSolarFluxGeoMagType ( );
    HRESULT SetSolarFluxGeoMagType (
        enum AgEVeSolarFluxGeoMag SolarFluxGeoMag );
    IAgVeSolarFluxGeoMagPtr GetSolarFluxGeoMag ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Cd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AreaMassRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaMassRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosphericDensityModel (
        /*[out,retval]*/ enum AgEAtmosphericDensityModel * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosphericDensityModel (
        /*[in]*/ enum AgEAtmosphericDensityModel pVal ) = 0;
      virtual HRESULT __stdcall get_SolarFluxGeoMagType (
        /*[out,retval]*/ enum AgEVeSolarFluxGeoMag * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSolarFluxGeoMagType (
        /*[in]*/ enum AgEVeSolarFluxGeoMag SolarFluxGeoMag ) = 0;
      virtual HRESULT __stdcall get_SolarFluxGeoMag (
        /*[out,retval]*/ struct IAgVeSolarFluxGeoMag * * ppVal ) = 0;
};

struct __declspec(uuid("8629acde-2c60-4ee6-a893-b3afda8f6157"))
IAgVeHPOPForceModelDrag : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetCd,put=PutCd))
    double Cd;
    __declspec(property(get=GetAreaMassRatio,put=PutAreaMassRatio))
    double AreaMassRatio;
    __declspec(property(get=GetAtmosphericDensityModel,put=PutAtmosphericDensityModel))
    enum AgEAtmosphericDensityModel AtmosphericDensityModel;
    __declspec(property(get=GetSolarFluxGeoMagType))
    enum AgEVeSolarFluxGeoMag SolarFluxGeoMagType;
    __declspec(property(get=GetSolarFluxGeoMag))
    IAgVeSolarFluxGeoMagPtr SolarFluxGeoMag;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetCd ( );
    void PutCd (
        double pVal );
    double GetAreaMassRatio ( );
    void PutAreaMassRatio (
        double pVal );
    enum AgEAtmosphericDensityModel GetAtmosphericDensityModel ( );
    void PutAtmosphericDensityModel (
        enum AgEAtmosphericDensityModel pVal );
    enum AgEVeSolarFluxGeoMag GetSolarFluxGeoMagType ( );
    HRESULT SetSolarFluxGeoMagType (
        enum AgEVeSolarFluxGeoMag SolarFluxGeoMag );
    IAgVeSolarFluxGeoMagPtr GetSolarFluxGeoMag ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Cd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AreaMassRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaMassRatio (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosphericDensityModel (
        /*[out,retval]*/ enum AgEAtmosphericDensityModel * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosphericDensityModel (
        /*[in]*/ enum AgEAtmosphericDensityModel pVal ) = 0;
      virtual HRESULT __stdcall get_SolarFluxGeoMagType (
        /*[out,retval]*/ enum AgEVeSolarFluxGeoMag * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSolarFluxGeoMagType (
        /*[in]*/ enum AgEVeSolarFluxGeoMag SolarFluxGeoMag ) = 0;
      virtual HRESULT __stdcall get_SolarFluxGeoMag (
        /*[out,retval]*/ struct IAgVeSolarFluxGeoMag * * ppVal ) = 0;
};

struct __declspec(uuid("0bf6c109-4d9d-44ff-a797-c7380c0fc2ec"))
AgVeHPOPForceModelDragOptions;
    // [ default ] interface _IAgVeHPOPForceModelDragOptions
    // interface IAgVeHPOPForceModelDragOptions

struct __declspec(uuid("73f1e50d-eed5-4dae-b989-434b256d2549"))
_IAgVeHPOPForceModelDragOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseApproxAlt,put=PutUseApproxAlt))
    VARIANT_BOOL UseApproxAlt;
    __declspec(property(get=GetUseApparentSunPosition,put=PutUseApparentSunPosition))
    VARIANT_BOOL UseApparentSunPosition;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseApproxAlt ( );
    void PutUseApproxAlt (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseApparentSunPosition ( );
    void PutUseApparentSunPosition (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseApproxAlt (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseApproxAlt (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseApparentSunPosition (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseApparentSunPosition (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("d6df0e42-db90-46a1-bb30-390237dfe664"))
IAgVeHPOPForceModelDragOptions : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseApproxAlt,put=PutUseApproxAlt))
    VARIANT_BOOL UseApproxAlt;
    __declspec(property(get=GetUseApparentSunPosition,put=PutUseApparentSunPosition))
    VARIANT_BOOL UseApparentSunPosition;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseApproxAlt ( );
    void PutUseApproxAlt (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseApparentSunPosition ( );
    void PutUseApparentSunPosition (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseApproxAlt (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseApproxAlt (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseApparentSunPosition (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseApparentSunPosition (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("026d4bb2-77f6-488b-892d-2ca88a80ff73"))
AgVeHPOPSolarRadiationPressureOptions;
    // [ default ] interface _IAgVeHPOPSolarRadiationPressureOptions
    // interface IAgVeHPOPSolarRadiationPressureOptions

enum AgEMethodToComputeSunPosition
{
    eMTCSPApparent = 0,
    eMTCSPApparentToTrueCB = 1,
    eMTCSPTrue = 2
};

struct __declspec(uuid("aa2b24ad-e168-45e1-847e-c95795ecd6f6"))
_IAgVeHPOPSolarRadiationPressureOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethodToComputeSunPosition,put=PutMethodToComputeSunPosition))
    enum AgEMethodToComputeSunPosition MethodToComputeSunPosition;
    __declspec(property(get=GetAtmosAltOfEarthShapeForEclipse,put=PutAtmosAltOfEarthShapeForEclipse))
    double AtmosAltOfEarthShapeForEclipse;

    //
    // Wrapper methods for error-handling
    //

    enum AgEMethodToComputeSunPosition GetMethodToComputeSunPosition ( );
    void PutMethodToComputeSunPosition (
        enum AgEMethodToComputeSunPosition pVal );
    double GetAtmosAltOfEarthShapeForEclipse ( );
    void PutAtmosAltOfEarthShapeForEclipse (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodToComputeSunPosition (
        /*[out,retval]*/ enum AgEMethodToComputeSunPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_MethodToComputeSunPosition (
        /*[in]*/ enum AgEMethodToComputeSunPosition pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosAltOfEarthShapeForEclipse (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosAltOfEarthShapeForEclipse (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("dceb5dc2-fb56-45d7-afbc-50d346dbccdc"))
IAgVeHPOPSolarRadiationPressureOptions : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethodToComputeSunPosition,put=PutMethodToComputeSunPosition))
    enum AgEMethodToComputeSunPosition MethodToComputeSunPosition;
    __declspec(property(get=GetAtmosAltOfEarthShapeForEclipse,put=PutAtmosAltOfEarthShapeForEclipse))
    double AtmosAltOfEarthShapeForEclipse;

    //
    // Wrapper methods for error-handling
    //

    enum AgEMethodToComputeSunPosition GetMethodToComputeSunPosition ( );
    void PutMethodToComputeSunPosition (
        enum AgEMethodToComputeSunPosition pVal );
    double GetAtmosAltOfEarthShapeForEclipse ( );
    void PutAtmosAltOfEarthShapeForEclipse (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodToComputeSunPosition (
        /*[out,retval]*/ enum AgEMethodToComputeSunPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_MethodToComputeSunPosition (
        /*[in]*/ enum AgEMethodToComputeSunPosition pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosAltOfEarthShapeForEclipse (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosAltOfEarthShapeForEclipse (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("aee7a5d2-3114-4d81-bece-326e5aabdf07"))
AgVeStatic;
    // [ default ] interface _IAgVeStatic
    // interface IAgVeStatic

struct __declspec(uuid("04da6e18-281b-4542-b3c8-6ea9e6e8b5f3"))
_IAgVeStatic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSatelliteMass,put=PutSatelliteMass))
    double SatelliteMass;
    __declspec(property(get=GetIncRelativisticAcc,put=PutIncRelativisticAcc))
    VARIANT_BOOL IncRelativisticAcc;

    //
    // Wrapper methods for error-handling
    //

    double GetSatelliteMass ( );
    void PutSatelliteMass (
        double pVal );
    VARIANT_BOOL GetIncRelativisticAcc ( );
    void PutIncRelativisticAcc (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SatelliteMass (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SatelliteMass (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IncRelativisticAcc (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncRelativisticAcc (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("048267ee-0b6f-4a8d-8d18-f0aa308a16c8"))
IAgVeStatic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSatelliteMass,put=PutSatelliteMass))
    double SatelliteMass;
    __declspec(property(get=GetIncRelativisticAcc,put=PutIncRelativisticAcc))
    VARIANT_BOOL IncRelativisticAcc;

    //
    // Wrapper methods for error-handling
    //

    double GetSatelliteMass ( );
    void PutSatelliteMass (
        double pVal );
    VARIANT_BOOL GetIncRelativisticAcc ( );
    void PutIncRelativisticAcc (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SatelliteMass (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SatelliteMass (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IncRelativisticAcc (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncRelativisticAcc (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("4968e4cf-52c0-4826-8613-3eb1277cdc8b"))
AgVeSolidTides;
    // [ default ] interface _IAgVeSolidTides
    // interface IAgVeSolidTides

struct __declspec(uuid("941680de-e696-4ad0-8011-104e25159ddb"))
_IAgVeSolidTides : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncTimeDepSolidTides,put=PutIncTimeDepSolidTides))
    VARIANT_BOOL IncTimeDepSolidTides;
    __declspec(property(get=GetMinAmplitude,put=PutMinAmplitude))
    double MinAmplitude;
    __declspec(property(get=GetTruncateSolidTides,put=PutTruncateSolidTides))
    VARIANT_BOOL TruncateSolidTides;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIncTimeDepSolidTides ( );
    void PutIncTimeDepSolidTides (
        VARIANT_BOOL pVal );
    double GetMinAmplitude ( );
    void PutMinAmplitude (
        double pVal );
    VARIANT_BOOL GetTruncateSolidTides ( );
    void PutTruncateSolidTides (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncTimeDepSolidTides (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncTimeDepSolidTides (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinAmplitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAmplitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TruncateSolidTides (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TruncateSolidTides (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("9eb715c7-1de6-4c89-b660-da64bc890a51"))
IAgVeSolidTides : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIncTimeDepSolidTides,put=PutIncTimeDepSolidTides))
    VARIANT_BOOL IncTimeDepSolidTides;
    __declspec(property(get=GetMinAmplitude,put=PutMinAmplitude))
    double MinAmplitude;
    __declspec(property(get=GetTruncateSolidTides,put=PutTruncateSolidTides))
    VARIANT_BOOL TruncateSolidTides;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIncTimeDepSolidTides ( );
    void PutIncTimeDepSolidTides (
        VARIANT_BOOL pVal );
    double GetMinAmplitude ( );
    void PutMinAmplitude (
        double pVal );
    VARIANT_BOOL GetTruncateSolidTides ( );
    void PutTruncateSolidTides (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncTimeDepSolidTides (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncTimeDepSolidTides (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinAmplitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAmplitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TruncateSolidTides (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TruncateSolidTides (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b2c4aa3e-560b-45c4-86d9-a82375ab0fb9"))
AgVeOceanTides;
    // [ default ] interface _IAgVeOceanTides
    // interface IAgVeOceanTides

struct __declspec(uuid("f5823cc6-52e3-414d-9c23-76ba0c8a7bf9"))
_IAgVeOceanTides : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxDegree,put=PutMaxDegree))
    long MaxDegree;
    __declspec(property(get=GetMaxOrder,put=PutMaxOrder))
    long MaxOrder;
    __declspec(property(get=GetMinAmplitude,put=PutMinAmplitude))
    double MinAmplitude;

    //
    // Wrapper methods for error-handling
    //

    long GetMaxDegree ( );
    void PutMaxDegree (
        long pVal );
    long GetMaxOrder ( );
    void PutMaxOrder (
        long pVal );
    double GetMinAmplitude ( );
    void PutMinAmplitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxDegree (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxDegree (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxOrder (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MinAmplitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAmplitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("53216ff5-f3b1-4daa-98d4-0244dac9426b"))
IAgVeOceanTides : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxDegree,put=PutMaxDegree))
    long MaxDegree;
    __declspec(property(get=GetMaxOrder,put=PutMaxOrder))
    long MaxOrder;
    __declspec(property(get=GetMinAmplitude,put=PutMinAmplitude))
    double MinAmplitude;

    //
    // Wrapper methods for error-handling
    //

    long GetMaxDegree ( );
    void PutMaxDegree (
        long pVal );
    long GetMaxOrder ( );
    void PutMaxOrder (
        long pVal );
    double GetMinAmplitude ( );
    void PutMinAmplitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxDegree (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxDegree (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxOrder (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MinAmplitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAmplitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("3e8a4dd8-52dd-4bd2-bbf2-8e192b113fbf"))
AgVePluginSettings;
    // [ default ] interface _IAgVePluginSettings
    // interface IAgVePluginSettings

struct __declspec(uuid("7708ce63-b8e5-4691-b77f-6eadab903d83"))
_IAgVePluginSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetProperty (
        _bstr_t Path );
    HRESULT SetProperty (
        _bstr_t Path,
        const _variant_t & Val );
    SAFEARRAY * GetAvailableProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Path,
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("7cf32833-3a75-432b-882e-f944ece12e32"))
IAgVePluginSettings : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetProperty (
        _bstr_t Path );
    HRESULT SetProperty (
        _bstr_t Path,
        const _variant_t & Val );
    SAFEARRAY * GetAvailableProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Path,
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("935d0f1e-c45a-4652-bd4a-5ff10d69d472"))
AgVePluginPropagator;
    // [ default ] interface _IAgVePluginPropagator
    // interface IAgVePluginPropagator

struct __declspec(uuid("d28780b2-67e9-4e89-9c0b-3601fbe3cf4b"))
_IAgVePluginPropagator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUsePlugin,put=PutUsePlugin))
    VARIANT_BOOL UsePlugin;
    __declspec(property(get=GetPluginName,put=PutPluginName))
    _bstr_t PluginName;
    __declspec(property(get=GetPluginSettings))
    IAgVePluginSettingsPtr PluginSettings;
    __declspec(property(get=GetAvailablePlugins))
    SAFEARRAY * AvailablePlugins;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUsePlugin ( );
    void PutUsePlugin (
        VARIANT_BOOL pVal );
    _bstr_t GetPluginName ( );
    void PutPluginName (
        _bstr_t pVal );
    IAgVePluginSettingsPtr GetPluginSettings ( );
    IUnknownPtr GetRawPluginObject ( );
    HRESULT ApplyPluginChanges ( );
    SAFEARRAY * GetAvailablePlugins ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UsePlugin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePlugin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PluginName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PluginName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PluginSettings (
        /*[out,retval]*/ struct IAgVePluginSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetRawPluginObject (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyPluginChanges ( ) = 0;
      virtual HRESULT __stdcall get_AvailablePlugins (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("e687775c-23c9-41f9-a728-d7a0bfd4f6b9"))
IAgVePluginPropagator : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUsePlugin,put=PutUsePlugin))
    VARIANT_BOOL UsePlugin;
    __declspec(property(get=GetPluginName,put=PutPluginName))
    _bstr_t PluginName;
    __declspec(property(get=GetPluginSettings))
    IAgVePluginSettingsPtr PluginSettings;
    __declspec(property(get=GetAvailablePlugins))
    SAFEARRAY * AvailablePlugins;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUsePlugin ( );
    void PutUsePlugin (
        VARIANT_BOOL pVal );
    _bstr_t GetPluginName ( );
    void PutPluginName (
        _bstr_t pVal );
    IAgVePluginSettingsPtr GetPluginSettings ( );
    IUnknownPtr GetRawPluginObject ( );
    HRESULT ApplyPluginChanges ( );
    SAFEARRAY * GetAvailablePlugins ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UsePlugin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePlugin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PluginName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PluginName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PluginSettings (
        /*[out,retval]*/ struct IAgVePluginSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetRawPluginObject (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyPluginChanges ( ) = 0;
      virtual HRESULT __stdcall get_AvailablePlugins (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("9897a52d-652d-4982-acb3-a0b89d1fa37a"))
AgVeHPOPForceModelMoreOptions;
    // [ default ] interface _IAgVeHPOPForceModelMoreOptions
    // interface IAgVeHPOPForceModelMoreOptions

struct __declspec(uuid("00b92ad5-bcce-4c12-8db7-25f960c73e97"))
_IAgVeHPOPForceModelMoreOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDrag))
    IAgVeHPOPForceModelDragOptionsPtr Drag;
    __declspec(property(get=GetSolarRadiationPressure))
    IAgVeHPOPSolarRadiationPressureOptionsPtr SolarRadiationPressure;
    __declspec(property(get=GetStatic))
    IAgVeStaticPtr Static;
    __declspec(property(get=GetSolidTides))
    IAgVeSolidTidesPtr SolidTides;
    __declspec(property(get=GetOceanTides))
    IAgVeOceanTidesPtr OceanTides;
    __declspec(property(get=GetPluginPropagator))
    IAgVePluginPropagatorPtr PluginPropagator;
    __declspec(property(get=GetRadiationPressure))
    IAgVeRadiationPressurePtr RadiationPressure;

    //
    // Wrapper methods for error-handling
    //

    IAgVeHPOPForceModelDragOptionsPtr GetDrag ( );
    IAgVeHPOPSolarRadiationPressureOptionsPtr GetSolarRadiationPressure ( );
    IAgVeStaticPtr GetStatic ( );
    IAgVeSolidTidesPtr GetSolidTides ( );
    IAgVeOceanTidesPtr GetOceanTides ( );
    IAgVeRadiationPressurePtr GetRadiationPressure ( );
    IAgVePluginPropagatorPtr GetPluginPropagator ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Drag (
        /*[out,retval]*/ struct IAgVeHPOPForceModelDragOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolarRadiationPressure (
        /*[out,retval]*/ struct IAgVeHPOPSolarRadiationPressureOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgVeStatic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolidTides (
        /*[out,retval]*/ struct IAgVeSolidTides * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OceanTides (
        /*[out,retval]*/ struct IAgVeOceanTides * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RadiationPressure (
        /*[out,retval]*/ struct IAgVeRadiationPressure * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PluginPropagator (
        /*[out,retval]*/ struct IAgVePluginPropagator * * ppVal ) = 0;
};

struct __declspec(uuid("ccaf39a4-e44e-4cb2-9522-612ac50722d5"))
IAgVeHPOPForceModelMoreOptions : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDrag))
    IAgVeHPOPForceModelDragOptionsPtr Drag;
    __declspec(property(get=GetSolarRadiationPressure))
    IAgVeHPOPSolarRadiationPressureOptionsPtr SolarRadiationPressure;
    __declspec(property(get=GetStatic))
    IAgVeStaticPtr Static;
    __declspec(property(get=GetSolidTides))
    IAgVeSolidTidesPtr SolidTides;
    __declspec(property(get=GetOceanTides))
    IAgVeOceanTidesPtr OceanTides;
    __declspec(property(get=GetRadiationPressure))
    IAgVeRadiationPressurePtr RadiationPressure;
    __declspec(property(get=GetPluginPropagator))
    IAgVePluginPropagatorPtr PluginPropagator;

    //
    // Wrapper methods for error-handling
    //

    IAgVeHPOPForceModelDragOptionsPtr GetDrag ( );
    IAgVeHPOPSolarRadiationPressureOptionsPtr GetSolarRadiationPressure ( );
    IAgVeStaticPtr GetStatic ( );
    IAgVeSolidTidesPtr GetSolidTides ( );
    IAgVeOceanTidesPtr GetOceanTides ( );
    IAgVeRadiationPressurePtr GetRadiationPressure ( );
    IAgVePluginPropagatorPtr GetPluginPropagator ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Drag (
        /*[out,retval]*/ struct IAgVeHPOPForceModelDragOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolarRadiationPressure (
        /*[out,retval]*/ struct IAgVeHPOPSolarRadiationPressureOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgVeStatic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolidTides (
        /*[out,retval]*/ struct IAgVeSolidTides * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OceanTides (
        /*[out,retval]*/ struct IAgVeOceanTides * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RadiationPressure (
        /*[out,retval]*/ struct IAgVeRadiationPressure * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PluginPropagator (
        /*[out,retval]*/ struct IAgVePluginPropagator * * ppVal ) = 0;
};

struct __declspec(uuid("4b347a06-0959-4569-8cbb-1066003067ca"))
AgVeHPOPForceModel;
    // [ default ] interface _IAgVeHPOPForceModel
    // interface IAgVeHPOPForceModel

enum AgEThirdBodyGravity
{
    eTBGUnknown = -1,
    eTBGSun = 0,
    eTBGMoon = 1,
    eTBGJupiter = 2,
    eTBGVenus = 3,
    eTBGSaturn = 4,
    eTBGMars = 5,
    eTBGMercury = 6,
    eTBGUranus = 7,
    eTBGNeptune = 8,
    eTBGCeres = 9,
    eTBGPluto = 10,
    eTBGPhobos = 11,
    eTBGDeimos = 12
};

enum AgEThirdBodyGravSourceType
{
    eCBFile = 0,
    eHPOPHistorical = 1,
    eJPLDE = 2,
    eUserSpecified = 3
};

struct __declspec(uuid("0eaac80a-ef77-4e5a-9763-6aa4f03e65a7"))
IAgVeThirdBodyGravityElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    enum AgEThirdBodyGravity Name;
    __declspec(property(get=GetSource,put=PutSource))
    enum AgEThirdBodyGravSourceType Source;
    __declspec(property(get=GetGravityValue,put=PutGravityValue))
    double GravityValue;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;

    //
    // Wrapper methods for error-handling
    //

    enum AgEThirdBodyGravity GetName ( );
    enum AgEThirdBodyGravSourceType GetSource ( );
    void PutSource (
        enum AgEThirdBodyGravSourceType pVal );
    double GetGravityValue ( );
    void PutGravityValue (
        double pVal );
    _bstr_t GetCentralBody ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ enum AgEThirdBodyGravity * pVal ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ enum AgEThirdBodyGravSourceType * pVal ) = 0;
      virtual HRESULT __stdcall put_Source (
        /*[in]*/ enum AgEThirdBodyGravSourceType pVal ) = 0;
      virtual HRESULT __stdcall get_GravityValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GravityValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("8d8a8c0b-e0fb-45e0-bb97-790ae0d775bf"))
IAgVeThirdBodyGravityCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeThirdBodyGravityElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAvailableThirdBodies))
    SAFEARRAY * AvailableThirdBodies;
    __declspec(property(get=GetAvailableThirdBodyNames))
    SAFEARRAY * AvailableThirdBodyNames;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeThirdBodyGravityElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeThirdBodyGravityElementPtr Add (
        enum AgEThirdBodyGravity Data );
    SAFEARRAY * GetAvailableThirdBodies ( );
    HRESULT RemoveByType (
        enum AgEThirdBodyGravity ThirdBdyType );
    SAFEARRAY * GetAvailableThirdBodyNames ( );
    IAgVeThirdBodyGravityElementPtr AddThirdBody (
        _bstr_t ThirdBody );
    HRESULT RemoveThirdBody (
        _bstr_t ThirdBody );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeThirdBodyGravityElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum AgEThirdBodyGravity Data,
        /*[out,retval]*/ struct IAgVeThirdBodyGravityElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableThirdBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveByType (
        /*[in]*/ enum AgEThirdBodyGravity ThirdBdyType ) = 0;
      virtual HRESULT __stdcall get_AvailableThirdBodyNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddThirdBody (
        /*[in]*/ BSTR ThirdBody,
        /*[out,retval]*/ struct IAgVeThirdBodyGravityElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveThirdBody (
        /*[in]*/ BSTR ThirdBody ) = 0;
};

struct __declspec(uuid("486adafc-15ef-4b16-871b-113adc973bec"))
IAgVeEclipsingBodies : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableEclipsingBodies))
    SAFEARRAY * AvailableEclipsingBodies;
    __declspec(property(get=GetAssignedEclipsingBodies))
    SAFEARRAY * AssignedEclipsingBodies;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAvailableEclipsingBodies ( );
    SAFEARRAY * GetAssignedEclipsingBodies ( );
    VARIANT_BOOL IsEclipsingBodyAssigned (
        _bstr_t EclipsingBody );
    HRESULT AssignEclipsingBody (
        _bstr_t EclipsingBody );
    HRESULT RemoveEclipsingBody (
        _bstr_t EclipsingBody );
    HRESULT RemoveAllEclipsingBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AvailableEclipsingBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AssignedEclipsingBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsEclipsingBodyAssigned (
        /*[in]*/ BSTR EclipsingBody,
        /*[out,retval]*/ VARIANT_BOOL * pIsAssigned ) = 0;
      virtual HRESULT __stdcall raw_AssignEclipsingBody (
        /*[in]*/ BSTR EclipsingBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveEclipsingBody (
        /*[in]*/ BSTR EclipsingBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllEclipsingBodies ( ) = 0;
};

struct __declspec(uuid("beb409b0-8c36-4564-89ee-0bd385e6fdac"))
_IAgVeHPOPForceModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyGravity))
    IAgVeHPOPCentralBodyGravityPtr CentralBodyGravity;
    __declspec(property(get=GetSolarRadiationPressure))
    IAgVeHPOPSolarRadiationPressurePtr SolarRadiationPressure;
    __declspec(property(get=GetDrag))
    IAgVeHPOPForceModelDragPtr Drag;
    __declspec(property(get=GetThirdBodyGravity))
    IAgVeThirdBodyGravityCollectionPtr ThirdBodyGravity;
    __declspec(property(get=GetMoreOptions))
    IAgVeHPOPForceModelMoreOptionsPtr MoreOptions;
    __declspec(property(get=GetEclipsingBodies))
    IAgVeEclipsingBodiesPtr EclipsingBodies;

    //
    // Wrapper methods for error-handling
    //

    IAgVeHPOPCentralBodyGravityPtr GetCentralBodyGravity ( );
    IAgVeHPOPSolarRadiationPressurePtr GetSolarRadiationPressure ( );
    IAgVeHPOPForceModelDragPtr GetDrag ( );
    IAgVeThirdBodyGravityCollectionPtr GetThirdBodyGravity ( );
    IAgVeHPOPForceModelMoreOptionsPtr GetMoreOptions ( );
    IAgVeEclipsingBodiesPtr GetEclipsingBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBodyGravity (
        /*[out,retval]*/ struct IAgVeHPOPCentralBodyGravity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolarRadiationPressure (
        /*[out,retval]*/ struct IAgVeHPOPSolarRadiationPressure * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Drag (
        /*[out,retval]*/ struct IAgVeHPOPForceModelDrag * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ThirdBodyGravity (
        /*[out,retval]*/ struct IAgVeThirdBodyGravityCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MoreOptions (
        /*[out,retval]*/ struct IAgVeHPOPForceModelMoreOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EclipsingBodies (
        /*[out,retval]*/ struct IAgVeEclipsingBodies * * ppRetVal ) = 0;
};

struct __declspec(uuid("8d5a37dc-8e0d-49ba-9c7c-17e489a95751"))
IAgVeHPOPForceModel : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyGravity))
    IAgVeHPOPCentralBodyGravityPtr CentralBodyGravity;
    __declspec(property(get=GetSolarRadiationPressure))
    IAgVeHPOPSolarRadiationPressurePtr SolarRadiationPressure;
    __declspec(property(get=GetDrag))
    IAgVeHPOPForceModelDragPtr Drag;
    __declspec(property(get=GetThirdBodyGravity))
    IAgVeThirdBodyGravityCollectionPtr ThirdBodyGravity;
    __declspec(property(get=GetMoreOptions))
    IAgVeHPOPForceModelMoreOptionsPtr MoreOptions;
    __declspec(property(get=GetEclipsingBodies))
    IAgVeEclipsingBodiesPtr EclipsingBodies;

    //
    // Wrapper methods for error-handling
    //

    IAgVeHPOPCentralBodyGravityPtr GetCentralBodyGravity ( );
    IAgVeHPOPSolarRadiationPressurePtr GetSolarRadiationPressure ( );
    IAgVeHPOPForceModelDragPtr GetDrag ( );
    IAgVeThirdBodyGravityCollectionPtr GetThirdBodyGravity ( );
    IAgVeHPOPForceModelMoreOptionsPtr GetMoreOptions ( );
    IAgVeEclipsingBodiesPtr GetEclipsingBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBodyGravity (
        /*[out,retval]*/ struct IAgVeHPOPCentralBodyGravity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolarRadiationPressure (
        /*[out,retval]*/ struct IAgVeHPOPSolarRadiationPressure * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Drag (
        /*[out,retval]*/ struct IAgVeHPOPForceModelDrag * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ThirdBodyGravity (
        /*[out,retval]*/ struct IAgVeThirdBodyGravityCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MoreOptions (
        /*[out,retval]*/ struct IAgVeHPOPForceModelMoreOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EclipsingBodies (
        /*[out,retval]*/ struct IAgVeEclipsingBodies * * ppRetVal ) = 0;
};

struct __declspec(uuid("891022cd-0ca8-4a24-9c5c-12ab4eb6a316"))
AgVeStepSizeControl;
    // [ default ] interface _IAgVeStepSizeControl
    // interface IAgVeStepSizeControl

enum AgEVeMethod
{
    eFixedStep = 0,
    eRelativeError = 1
};

struct __declspec(uuid("10a06358-7340-48e5-b508-0dffc6886910"))
_IAgVeStepSizeControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEVeMethod Method;
    __declspec(property(get=GetErrorTolerance,put=PutErrorTolerance))
    double ErrorTolerance;
    __declspec(property(get=GetMinStepSize,put=PutMinStepSize))
    double MinStepSize;
    __declspec(property(get=GetMaxStepSize,put=PutMaxStepSize))
    double MaxStepSize;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeMethod GetMethod ( );
    void PutMethod (
        enum AgEVeMethod ppVal );
    double GetErrorTolerance ( );
    void PutErrorTolerance (
        double pVal );
    double GetMinStepSize ( );
    void PutMinStepSize (
        double pVal );
    double GetMaxStepSize ( );
    void PutMaxStepSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEVeMethod * ppVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEVeMethod ppVal ) = 0;
      virtual HRESULT __stdcall get_ErrorTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ErrorTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinStepSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinStepSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxStepSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxStepSize (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("23be192b-a81e-4da4-94dc-ea03062b7895"))
IAgVeStepSizeControl : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEVeMethod Method;
    __declspec(property(get=GetErrorTolerance,put=PutErrorTolerance))
    double ErrorTolerance;
    __declspec(property(get=GetMinStepSize,put=PutMinStepSize))
    double MinStepSize;
    __declspec(property(get=GetMaxStepSize,put=PutMaxStepSize))
    double MaxStepSize;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeMethod GetMethod ( );
    void PutMethod (
        enum AgEVeMethod pVal );
    double GetErrorTolerance ( );
    void PutErrorTolerance (
        double pVal );
    double GetMinStepSize ( );
    void PutMinStepSize (
        double pVal );
    double GetMaxStepSize ( );
    void PutMaxStepSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEVeMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEVeMethod pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorTolerance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ErrorTolerance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinStepSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinStepSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxStepSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxStepSize (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("002245f7-74ca-4334-a2cd-cdb0a65eb00c"))
AgVeTimeRegularization;
    // [ default ] interface _IAgVeTimeRegularization
    // interface IAgVeTimeRegularization

struct __declspec(uuid("d6896503-da70-408d-9206-8de7b573947e"))
_IAgVeTimeRegularization : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetExponent,put=PutExponent))
    double Exponent;
    __declspec(property(get=GetStepsPerOrbit,put=PutStepsPerOrbit))
    long StepsPerOrbit;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetExponent ( );
    void PutExponent (
        double pVal );
    long GetStepsPerOrbit ( );
    void PutStepsPerOrbit (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Exponent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Exponent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepsPerOrbit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepsPerOrbit (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("d15f4b2f-4fd0-4b61-84e7-967d70274acc"))
IAgVeTimeRegularization : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetExponent,put=PutExponent))
    double Exponent;
    __declspec(property(get=GetStepsPerOrbit,put=PutStepsPerOrbit))
    long StepsPerOrbit;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetExponent ( );
    void PutExponent (
        double pVal );
    long GetStepsPerOrbit ( );
    void PutStepsPerOrbit (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Exponent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Exponent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepsPerOrbit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepsPerOrbit (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("2dc4bfb9-01b9-4fa8-8177-6038ec0757d8"))
AgVeInterpolation;
    // [ default ] interface _IAgVeInterpolation
    // interface IAgVeInterpolation

enum AgEVeInterpolationMethod
{
    eHermitian = 0,
    eLagrange = 1,
    eVOP = 2
};

struct __declspec(uuid("3c94a0b4-3cb4-4fb3-9bea-d33048d8c602"))
_IAgVeInterpolation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEVeInterpolationMethod Method;
    __declspec(property(get=GetVOPmu,put=PutVOPmu))
    double VOPmu;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeInterpolationMethod GetMethod ( );
    void PutMethod (
        enum AgEVeInterpolationMethod pVal );
    double GetVOPmu ( );
    void PutVOPmu (
        double pVal );
    long GetOrder ( );
    void PutOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEVeInterpolationMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEVeInterpolationMethod pVal ) = 0;
      virtual HRESULT __stdcall get_VOPmu (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VOPmu (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("e8df2122-8e38-470a-8b77-49dc37a498a5"))
IAgVeInterpolation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEVeInterpolationMethod Method;
    __declspec(property(get=GetVOPmu,put=PutVOPmu))
    double VOPmu;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeInterpolationMethod GetMethod ( );
    void PutMethod (
        enum AgEVeInterpolationMethod pVal );
    double GetVOPmu ( );
    void PutVOPmu (
        double pVal );
    long GetOrder ( );
    void PutOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEVeInterpolationMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEVeInterpolationMethod pVal ) = 0;
      virtual HRESULT __stdcall get_VOPmu (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VOPmu (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("a95e1d77-183b-468e-a718-281e31aa5c97"))
AgVeIntegrator;
    // [ default ] interface _IAgVeIntegrator
    // interface IAgVeIntegrator

enum AgEVeIntegrationModel
{
    eBulirschStoer = 0,
    eGaussJackson = 1,
    eRK4 = 2,
    eRKF78 = 3
};

enum AgEVePredictorCorrectorScheme
{
    eFullCorrection = 0,
    ePseudoCorrection = 1
};

struct __declspec(uuid("252768a3-0007-4abc-8dba-18e03d0ea65d"))
_IAgVeIntegrator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIntegrationModel,put=PutIntegrationModel))
    enum AgEVeIntegrationModel IntegrationModel;
    __declspec(property(get=GetUseVOP,put=PutUseVOP))
    VARIANT_BOOL UseVOP;
    __declspec(property(get=GetPredictorCorrectorScheme,put=PutPredictorCorrectorScheme))
    enum AgEVePredictorCorrectorScheme PredictorCorrectorScheme;
    __declspec(property(get=GetStepSizeControl))
    IAgVeStepSizeControlPtr StepSizeControl;
    __declspec(property(get=GetTimeRegularization))
    IAgVeTimeRegularizationPtr TimeRegularization;
    __declspec(property(get=GetInterpolation))
    IAgVeInterpolationPtr Interpolation;
    __declspec(property(get=GetReportEphemOnFixedTimeStep,put=PutReportEphemOnFixedTimeStep))
    VARIANT_BOOL ReportEphemOnFixedTimeStep;
    __declspec(property(get=GetDoNotPropagateBelowAlt,put=PutDoNotPropagateBelowAlt))
    double DoNotPropagateBelowAlt;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeIntegrationModel GetIntegrationModel ( );
    void PutIntegrationModel (
        enum AgEVeIntegrationModel pVal );
    VARIANT_BOOL GetUseVOP ( );
    void PutUseVOP (
        VARIANT_BOOL pVal );
    enum AgEVePredictorCorrectorScheme GetPredictorCorrectorScheme ( );
    void PutPredictorCorrectorScheme (
        enum AgEVePredictorCorrectorScheme pVal );
    IAgVeStepSizeControlPtr GetStepSizeControl ( );
    IAgVeTimeRegularizationPtr GetTimeRegularization ( );
    IAgVeInterpolationPtr GetInterpolation ( );
    VARIANT_BOOL GetReportEphemOnFixedTimeStep ( );
    void PutReportEphemOnFixedTimeStep (
        VARIANT_BOOL pVal );
    double GetDoNotPropagateBelowAlt ( );
    void PutDoNotPropagateBelowAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IntegrationModel (
        /*[out,retval]*/ enum AgEVeIntegrationModel * pVal ) = 0;
      virtual HRESULT __stdcall put_IntegrationModel (
        /*[in]*/ enum AgEVeIntegrationModel pVal ) = 0;
      virtual HRESULT __stdcall get_UseVOP (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseVOP (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PredictorCorrectorScheme (
        /*[out,retval]*/ enum AgEVePredictorCorrectorScheme * pVal ) = 0;
      virtual HRESULT __stdcall put_PredictorCorrectorScheme (
        /*[in]*/ enum AgEVePredictorCorrectorScheme pVal ) = 0;
      virtual HRESULT __stdcall get_StepSizeControl (
        /*[out,retval]*/ struct IAgVeStepSizeControl * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimeRegularization (
        /*[out,retval]*/ struct IAgVeTimeRegularization * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Interpolation (
        /*[out,retval]*/ struct IAgVeInterpolation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReportEphemOnFixedTimeStep (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ReportEphemOnFixedTimeStep (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DoNotPropagateBelowAlt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DoNotPropagateBelowAlt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("9fd74182-6788-40c5-b6cf-b41fde9ea215"))
IAgVeIntegrator : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIntegrationModel,put=PutIntegrationModel))
    enum AgEVeIntegrationModel IntegrationModel;
    __declspec(property(get=GetUseVOP,put=PutUseVOP))
    VARIANT_BOOL UseVOP;
    __declspec(property(get=GetPredictorCorrectorScheme,put=PutPredictorCorrectorScheme))
    enum AgEVePredictorCorrectorScheme PredictorCorrectorScheme;
    __declspec(property(get=GetStepSizeControl))
    IAgVeStepSizeControlPtr StepSizeControl;
    __declspec(property(get=GetTimeRegularization))
    IAgVeTimeRegularizationPtr TimeRegularization;
    __declspec(property(get=GetInterpolation))
    IAgVeInterpolationPtr Interpolation;
    __declspec(property(get=GetReportEphemOnFixedTimeStep,put=PutReportEphemOnFixedTimeStep))
    VARIANT_BOOL ReportEphemOnFixedTimeStep;
    __declspec(property(get=GetDoNotPropagateBelowAlt,put=PutDoNotPropagateBelowAlt))
    double DoNotPropagateBelowAlt;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeIntegrationModel GetIntegrationModel ( );
    void PutIntegrationModel (
        enum AgEVeIntegrationModel pVal );
    VARIANT_BOOL GetUseVOP ( );
    void PutUseVOP (
        VARIANT_BOOL pVal );
    enum AgEVePredictorCorrectorScheme GetPredictorCorrectorScheme ( );
    void PutPredictorCorrectorScheme (
        enum AgEVePredictorCorrectorScheme pVal );
    IAgVeStepSizeControlPtr GetStepSizeControl ( );
    IAgVeTimeRegularizationPtr GetTimeRegularization ( );
    IAgVeInterpolationPtr GetInterpolation ( );
    VARIANT_BOOL GetReportEphemOnFixedTimeStep ( );
    void PutReportEphemOnFixedTimeStep (
        VARIANT_BOOL pVal );
    double GetDoNotPropagateBelowAlt ( );
    void PutDoNotPropagateBelowAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IntegrationModel (
        /*[out,retval]*/ enum AgEVeIntegrationModel * pVal ) = 0;
      virtual HRESULT __stdcall put_IntegrationModel (
        /*[in]*/ enum AgEVeIntegrationModel pVal ) = 0;
      virtual HRESULT __stdcall get_UseVOP (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseVOP (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PredictorCorrectorScheme (
        /*[out,retval]*/ enum AgEVePredictorCorrectorScheme * pVal ) = 0;
      virtual HRESULT __stdcall put_PredictorCorrectorScheme (
        /*[in]*/ enum AgEVePredictorCorrectorScheme pVal ) = 0;
      virtual HRESULT __stdcall get_StepSizeControl (
        /*[out,retval]*/ struct IAgVeStepSizeControl * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimeRegularization (
        /*[out,retval]*/ struct IAgVeTimeRegularization * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Interpolation (
        /*[out,retval]*/ struct IAgVeInterpolation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReportEphemOnFixedTimeStep (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ReportEphemOnFixedTimeStep (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DoNotPropagateBelowAlt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DoNotPropagateBelowAlt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("55afec57-d758-47ce-8787-913439e75512"))
AgVeGravity;
    // [ default ] interface _IAgVeGravity
    // interface IAgVeGravity

struct __declspec(uuid("cb6d2939-999d-42bd-ac68-f09e80cfdaed"))
_IAgVeGravity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumDegree,put=PutMaximumDegree))
    long MaximumDegree;
    __declspec(property(get=GetMaximumOrder,put=PutMaximumOrder))
    long MaximumOrder;

    //
    // Wrapper methods for error-handling
    //

    long GetMaximumDegree ( );
    void PutMaximumDegree (
        long pVal );
    long GetMaximumOrder ( );
    void PutMaximumOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaximumDegree (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDegree (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaximumOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumOrder (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("e195147a-2483-4352-98dd-23f5bf31ae3f"))
IAgVeGravity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximumDegree,put=PutMaximumDegree))
    long MaximumDegree;
    __declspec(property(get=GetMaximumOrder,put=PutMaximumOrder))
    long MaximumOrder;

    //
    // Wrapper methods for error-handling
    //

    long GetMaximumDegree ( );
    void PutMaximumDegree (
        long pVal );
    long GetMaximumOrder ( );
    void PutMaximumOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaximumDegree (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumDegree (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaximumOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumOrder (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("579749fa-d119-47a9-812c-226e0077dd9b"))
AgVePositionVelocityElement;
    // [ default ] interface _IAgVePositionVelocityElement
    // interface IAgVePositionVelocityElement

struct __declspec(uuid("d4ca8ce7-0dcd-4184-9336-646cb57d5722"))
_IAgVePositionVelocityElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetVx,put=PutVx))
    double Vx;
    __declspec(property(get=GetVy,put=PutVy))
    double Vy;
    __declspec(property(get=GetVz,put=PutVz))
    double Vz;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    double GetVx ( );
    void PutVx (
        double pVal );
    double GetVy ( );
    void PutVy (
        double pVal );
    double GetVz ( );
    void PutVz (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vx (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vx (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vz (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1e85cf6d-fc5a-4f1e-8ac5-9ea45023281c"))
IAgVePositionVelocityElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetVx,put=PutVx))
    double Vx;
    __declspec(property(get=GetVy,put=PutVy))
    double Vy;
    __declspec(property(get=GetVz,put=PutVz))
    double Vz;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    double GetVx ( );
    void PutVx (
        double pVal );
    double GetVy ( );
    void PutVy (
        double pVal );
    double GetVz ( );
    void PutVz (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vx (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vx (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vz (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a8b4c1bd-7e96-4a7f-a01b-0e889ff963f0"))
AgVePositionVelocityCollection;
    // [ default ] interface IUnknown
    // interface IAgVePositionVelocityCollection

struct __declspec(uuid("231528e6-adf6-4916-ad6a-fb3c98b04bd5"))
IAgVePositionVelocityCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVePositionVelocityElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVePositionVelocityElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVePositionVelocityElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("87af381e-bfcd-436e-ab6a-ed4a7e04dc9a"))
AgVeCorrelationListCollection;
    // [ default ] interface IUnknown
    // interface IAgVeCorrelationListCollection

enum AgEVeCorrelationListType
{
    eCorrelationListDrag = 0,
    eCorrelationListNone = 1,
    eCorrelationListSRP = 2
};

struct __declspec(uuid("b1f8d550-faa5-496b-a767-85b68787d061"))
IAgVeCorrelationListElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRow,put=PutRow))
    enum AgEVeCorrelationListType Row;
    __declspec(property(get=GetColumn,put=PutColumn))
    enum AgEVeCorrelationListType Column;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeCorrelationListType GetRow ( );
    void PutRow (
        enum AgEVeCorrelationListType pVal );
    enum AgEVeCorrelationListType GetColumn ( );
    void PutColumn (
        enum AgEVeCorrelationListType pVal );
    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ enum AgEVeCorrelationListType * pVal ) = 0;
      virtual HRESULT __stdcall put_Row (
        /*[in]*/ enum AgEVeCorrelationListType pVal ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ enum AgEVeCorrelationListType * pVal ) = 0;
      virtual HRESULT __stdcall put_Column (
        /*[in]*/ enum AgEVeCorrelationListType pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d260c246-64b3-433c-81cd-d0653da48a51"))
IAgVeCorrelationListCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeCorrelationListElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeCorrelationListElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeCorrelationListElementPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeCorrelationListElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAgVeCorrelationListElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("d5e17c03-d873-4f8c-ba74-ab67f04224c8"))
AgVeCorrelationListElement;
    // [ default ] interface _IAgVeCorrelationListElement
    // interface IAgVeCorrelationListElement

struct __declspec(uuid("5ed9d8d9-b12d-473f-9ee7-ce58c3f15d48"))
_IAgVeCorrelationListElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRow,put=PutRow))
    enum AgEVeCorrelationListType Row;
    __declspec(property(get=GetColumn,put=PutColumn))
    enum AgEVeCorrelationListType Column;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeCorrelationListType GetRow ( );
    void PutRow (
        enum AgEVeCorrelationListType pVal );
    enum AgEVeCorrelationListType GetColumn ( );
    void PutColumn (
        enum AgEVeCorrelationListType pVal );
    double GetValue ( );
    void PutValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ enum AgEVeCorrelationListType * pVal ) = 0;
      virtual HRESULT __stdcall put_Row (
        /*[in]*/ enum AgEVeCorrelationListType pVal ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ enum AgEVeCorrelationListType * pVal ) = 0;
      virtual HRESULT __stdcall put_Column (
        /*[in]*/ enum AgEVeCorrelationListType pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("69064872-acdc-4498-a156-afb13e5c8b94"))
AgVeCovariance;
    // [ default ] interface _IAgVeCovariance
    // interface IAgVeCovariance

enum AgEVeFrame
{
    eFrenet = 0,
    eJ2000 = 1,
    eVeFrameLVLH = 2,
    eTrueOfDate = 3
};

enum AgEVeConsiderAnalysisType
{
    eConsiderAnalysisDrag = 1,
    eConsiderAnalysisSRP = 2
};

struct __declspec(uuid("fe41b994-86ff-409c-8f0a-5e5976d02233"))
IAgVeConsiderAnalysisCollectionElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeConsiderAnalysisType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetVx,put=PutVx))
    double Vx;
    __declspec(property(get=GetVy,put=PutVy))
    double Vy;
    __declspec(property(get=GetVz,put=PutVz))
    double Vz;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeConsiderAnalysisType GetType ( );
    _bstr_t GetName ( );
    double GetValue ( );
    void PutValue (
        double pVal );
    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    double GetVx ( );
    void PutVx (
        double pVal );
    double GetVy ( );
    void PutVy (
        double pVal );
    double GetVz ( );
    void PutVz (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeConsiderAnalysisType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vx (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vx (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vz (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("2fa383a3-3fa4-4c70-a96f-b822d8d7e5d5"))
IAgVeConsiderAnalysisCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeConsiderAnalysisCollectionElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeConsiderAnalysisCollectionElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeConsiderAnalysisCollectionElementPtr Add (
        enum AgEVeConsiderAnalysisType ParamType );
    HRESULT RemoveByType (
        enum AgEVeConsiderAnalysisType EParamType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeConsiderAnalysisCollectionElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum AgEVeConsiderAnalysisType ParamType,
        /*[out,retval]*/ struct IAgVeConsiderAnalysisCollectionElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveByType (
        /*[in]*/ enum AgEVeConsiderAnalysisType EParamType ) = 0;
};

struct __declspec(uuid("52297e85-8ea4-4685-91ba-145f26153254"))
_IAgVeCovariance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComputeCovariance,put=PutComputeCovariance))
    VARIANT_BOOL ComputeCovariance;
    __declspec(property(get=GetFrame,put=PutFrame))
    enum AgEVeFrame Frame;
    __declspec(property(get=GetRepresentation))
    _bstr_t Representation;
    __declspec(property(get=GetGravity))
    IAgVeGravityPtr Gravity;
    __declspec(property(get=GetPositionVelocity))
    IAgVePositionVelocityCollectionPtr PositionVelocity;
    __declspec(property(get=GetIncludeConsiderAnalysis,put=PutIncludeConsiderAnalysis))
    VARIANT_BOOL IncludeConsiderAnalysis;
    __declspec(property(get=GetConsiderAnalysisList))
    IAgVeConsiderAnalysisCollectionPtr ConsiderAnalysisList;
    __declspec(property(get=GetIncludeConsiderCrossCorrelation,put=PutIncludeConsiderCrossCorrelation))
    VARIANT_BOOL IncludeConsiderCrossCorrelation;
    __declspec(property(get=GetCorrelationList))
    IAgVeCorrelationListCollectionPtr CorrelationList;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetComputeCovariance ( );
    void PutComputeCovariance (
        VARIANT_BOOL pVal );
    enum AgEVeFrame GetFrame ( );
    void PutFrame (
        enum AgEVeFrame pVal );
    _bstr_t GetRepresentation ( );
    IAgVeGravityPtr GetGravity ( );
    IAgVePositionVelocityCollectionPtr GetPositionVelocity ( );
    VARIANT_BOOL GetIncludeConsiderAnalysis ( );
    void PutIncludeConsiderAnalysis (
        VARIANT_BOOL pVal );
    IAgVeConsiderAnalysisCollectionPtr GetConsiderAnalysisList ( );
    VARIANT_BOOL GetIncludeConsiderCrossCorrelation ( );
    void PutIncludeConsiderCrossCorrelation (
        VARIANT_BOOL pVal );
    IAgVeCorrelationListCollectionPtr GetCorrelationList ( );
    HRESULT Validate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComputeCovariance (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ComputeCovariance (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ enum AgEVeFrame * pVal ) = 0;
      virtual HRESULT __stdcall put_Frame (
        /*[in]*/ enum AgEVeFrame pVal ) = 0;
      virtual HRESULT __stdcall get_Representation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Gravity (
        /*[out,retval]*/ struct IAgVeGravity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PositionVelocity (
        /*[out,retval]*/ struct IAgVePositionVelocityCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IncludeConsiderAnalysis (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeConsiderAnalysis (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ConsiderAnalysisList (
        /*[out,retval]*/ struct IAgVeConsiderAnalysisCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeConsiderCrossCorrelation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeConsiderCrossCorrelation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CorrelationList (
        /*[out,retval]*/ struct IAgVeCorrelationListCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Validate ( ) = 0;
};

struct __declspec(uuid("2c1cd585-c774-4f04-a1aa-c396f61bef78"))
IAgVeCovariance : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetComputeCovariance,put=PutComputeCovariance))
    VARIANT_BOOL ComputeCovariance;
    __declspec(property(get=GetFrame,put=PutFrame))
    enum AgEVeFrame Frame;
    __declspec(property(get=GetRepresentation))
    _bstr_t Representation;
    __declspec(property(get=GetGravity))
    IAgVeGravityPtr Gravity;
    __declspec(property(get=GetPositionVelocity))
    IAgVePositionVelocityCollectionPtr PositionVelocity;
    __declspec(property(get=GetIncludeConsiderAnalysis,put=PutIncludeConsiderAnalysis))
    VARIANT_BOOL IncludeConsiderAnalysis;
    __declspec(property(get=GetConsiderAnalysisList))
    IAgVeConsiderAnalysisCollectionPtr ConsiderAnalysisList;
    __declspec(property(get=GetIncludeConsiderCrossCorrelation,put=PutIncludeConsiderCrossCorrelation))
    VARIANT_BOOL IncludeConsiderCrossCorrelation;
    __declspec(property(get=GetCorrelationList))
    IAgVeCorrelationListCollectionPtr CorrelationList;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetComputeCovariance ( );
    void PutComputeCovariance (
        VARIANT_BOOL pVal );
    enum AgEVeFrame GetFrame ( );
    void PutFrame (
        enum AgEVeFrame pVal );
    _bstr_t GetRepresentation ( );
    IAgVeGravityPtr GetGravity ( );
    IAgVePositionVelocityCollectionPtr GetPositionVelocity ( );
    VARIANT_BOOL GetIncludeConsiderAnalysis ( );
    void PutIncludeConsiderAnalysis (
        VARIANT_BOOL pVal );
    IAgVeConsiderAnalysisCollectionPtr GetConsiderAnalysisList ( );
    VARIANT_BOOL GetIncludeConsiderCrossCorrelation ( );
    void PutIncludeConsiderCrossCorrelation (
        VARIANT_BOOL pVal );
    IAgVeCorrelationListCollectionPtr GetCorrelationList ( );
    HRESULT Validate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComputeCovariance (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ComputeCovariance (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ enum AgEVeFrame * pVal ) = 0;
      virtual HRESULT __stdcall put_Frame (
        /*[in]*/ enum AgEVeFrame pVal ) = 0;
      virtual HRESULT __stdcall get_Representation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Gravity (
        /*[out,retval]*/ struct IAgVeGravity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PositionVelocity (
        /*[out,retval]*/ struct IAgVePositionVelocityCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IncludeConsiderAnalysis (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeConsiderAnalysis (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ConsiderAnalysisList (
        /*[out,retval]*/ struct IAgVeConsiderAnalysisCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludeConsiderCrossCorrelation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeConsiderCrossCorrelation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CorrelationList (
        /*[out,retval]*/ struct IAgVeCorrelationListCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Validate ( ) = 0;
};

struct __declspec(uuid("e2b0c7d1-2f68-42e4-9d2e-40a514456a5c"))
AgVeJxInitialState;
    // [ default ] interface _IAgVeJxInitialState
    // interface IAgVeJxInitialState

enum AgEVeEllipseOptions
{
    eOsculating = 0,
    eSecularlyPrecessing = 1
};

struct __declspec(uuid("dfcb1b4f-dfa1-4ce6-8344-50459ee27471"))
_IAgVeJxInitialState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetEllipseOptions,put=PutEllipseOptions))
    enum AgEVeEllipseOptions EllipseOptions;
    __declspec(property(get=GetRepresentation))
    STKUtil::IAgOrbitStatePtr Representation;
    __declspec(property(get=GetPropagationFrame,put=PutPropagationFrame))
    enum AgEVePropagationFrame PropagationFrame;
    __declspec(property(get=GetSupportedPropagationFrames))
    SAFEARRAY * SupportedPropagationFrames;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    enum AgEVeEllipseOptions GetEllipseOptions ( );
    void PutEllipseOptions (
        enum AgEVeEllipseOptions pVal );
    STKUtil::IAgOrbitStatePtr GetRepresentation ( );
    enum AgEVePropagationFrame GetPropagationFrame ( );
    void PutPropagationFrame (
        enum AgEVePropagationFrame pVal );
    SAFEARRAY * GetSupportedPropagationFrames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_EllipseOptions (
        /*[out,retval]*/ enum AgEVeEllipseOptions * pVal ) = 0;
      virtual HRESULT __stdcall put_EllipseOptions (
        /*[in]*/ enum AgEVeEllipseOptions pVal ) = 0;
      virtual HRESULT __stdcall get_Representation (
        /*[out,retval]*/ struct STKUtil::IAgOrbitState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PropagationFrame (
        /*[out,retval]*/ enum AgEVePropagationFrame * pVal ) = 0;
      virtual HRESULT __stdcall put_PropagationFrame (
        /*[in]*/ enum AgEVePropagationFrame pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedPropagationFrames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("7a0ad245-1720-4c4a-aa2f-8d9d1490c833"))
IAgVeJxInitialState : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetEllipseOptions,put=PutEllipseOptions))
    enum AgEVeEllipseOptions EllipseOptions;
    __declspec(property(get=GetRepresentation))
    STKUtil::IAgOrbitStatePtr Representation;
    __declspec(property(get=GetPropagationFrame,put=PutPropagationFrame))
    enum AgEVePropagationFrame PropagationFrame;
    __declspec(property(get=GetSupportedPropagationFrames))
    SAFEARRAY * SupportedPropagationFrames;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    enum AgEVeEllipseOptions GetEllipseOptions ( );
    void PutEllipseOptions (
        enum AgEVeEllipseOptions pVal );
    STKUtil::IAgOrbitStatePtr GetRepresentation ( );
    enum AgEVePropagationFrame GetPropagationFrame ( );
    void PutPropagationFrame (
        enum AgEVePropagationFrame pVal );
    SAFEARRAY * GetSupportedPropagationFrames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_EllipseOptions (
        /*[out,retval]*/ enum AgEVeEllipseOptions * pVal ) = 0;
      virtual HRESULT __stdcall put_EllipseOptions (
        /*[in]*/ enum AgEVeEllipseOptions pVal ) = 0;
      virtual HRESULT __stdcall get_Representation (
        /*[out,retval]*/ struct STKUtil::IAgOrbitState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PropagationFrame (
        /*[out,retval]*/ enum AgEVePropagationFrame * pVal ) = 0;
      virtual HRESULT __stdcall put_PropagationFrame (
        /*[in]*/ enum AgEVePropagationFrame pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedPropagationFrames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("77883d6c-a09f-40e8-9ccf-e250bce16e70"))
AgVeLOPCentralBodyGravity;
    // [ default ] interface _IAgVeLOPCentralBodyGravity
    // interface IAgVeLOPCentralBodyGravity

struct __declspec(uuid("a43a2e61-e430-4a46-8994-951edb3dd4f6"))
_IAgVeLOPCentralBodyGravity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxDegree,put=PutMaxDegree))
    long MaxDegree;
    __declspec(property(get=GetMaxOrder,put=PutMaxOrder))
    long MaxOrder;

    //
    // Wrapper methods for error-handling
    //

    long GetMaxDegree ( );
    void PutMaxDegree (
        long pVal );
    long GetMaxOrder ( );
    void PutMaxOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxDegree (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxDegree (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxOrder (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("ee5e1d2d-11b6-42a4-bb93-2ee56c06a208"))
IAgVeLOPCentralBodyGravity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxDegree,put=PutMaxDegree))
    long MaxDegree;
    __declspec(property(get=GetMaxOrder,put=PutMaxOrder))
    long MaxOrder;

    //
    // Wrapper methods for error-handling
    //

    long GetMaxDegree ( );
    void PutMaxDegree (
        long pVal );
    long GetMaxOrder ( );
    void PutMaxOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxDegree (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxDegree (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxOrder (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("46104f50-2e38-4669-87d4-9c399c3b9c09"))
AgVeThirdBodyGravityElement;
    // [ default ] interface _IAgVeThirdBodyGravityElement
    // interface IAgVeThirdBodyGravityElement

struct __declspec(uuid("7a132349-0f4c-469b-bee6-02764824de72"))
_IAgVeThirdBodyGravityElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    enum AgEThirdBodyGravity Name;
    __declspec(property(get=GetSource,put=PutSource))
    enum AgEThirdBodyGravSourceType Source;
    __declspec(property(get=GetGravityValue,put=PutGravityValue))
    double GravityValue;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;

    //
    // Wrapper methods for error-handling
    //

    enum AgEThirdBodyGravity GetName ( );
    enum AgEThirdBodyGravSourceType GetSource ( );
    void PutSource (
        enum AgEThirdBodyGravSourceType pVal );
    double GetGravityValue ( );
    void PutGravityValue (
        double pVal );
    _bstr_t GetCentralBody ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ enum AgEThirdBodyGravity * pVal ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ enum AgEThirdBodyGravSourceType * pVal ) = 0;
      virtual HRESULT __stdcall put_Source (
        /*[in]*/ enum AgEThirdBodyGravSourceType pVal ) = 0;
      virtual HRESULT __stdcall get_GravityValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GravityValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("b6e07c80-c223-4334-afba-6c18571432ea"))
AgVeThirdBodyGravityCollection;
    // [ default ] interface IUnknown
    // interface IAgVeThirdBodyGravityCollection

struct __declspec(uuid("dcc7f9a3-5c85-4497-bd05-6f53b65a50e3"))
AgVeExpDensModelParams;
    // [ default ] interface _IAgVeExpDensModelParams
    // interface IAgVeExpDensModelParams

struct __declspec(uuid("85c990ba-552a-4fda-8373-2d83a6d5d7e6"))
_IAgVeExpDensModelParams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceDensity,put=PutReferenceDensity))
    double ReferenceDensity;
    __declspec(property(get=GetReferenceHeight,put=PutReferenceHeight))
    double ReferenceHeight;
    __declspec(property(get=GetScaleHeight,put=PutScaleHeight))
    double ScaleHeight;

    //
    // Wrapper methods for error-handling
    //

    double GetReferenceDensity ( );
    void PutReferenceDensity (
        double pVal );
    double GetReferenceHeight ( );
    void PutReferenceHeight (
        double pVal );
    double GetScaleHeight ( );
    void PutScaleHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceDensity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceDensity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleHeight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("352b44e5-700a-4820-b3da-899a2801472f"))
IAgVeExpDensModelParams : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceDensity,put=PutReferenceDensity))
    double ReferenceDensity;
    __declspec(property(get=GetReferenceHeight,put=PutReferenceHeight))
    double ReferenceHeight;
    __declspec(property(get=GetScaleHeight,put=PutScaleHeight))
    double ScaleHeight;

    //
    // Wrapper methods for error-handling
    //

    double GetReferenceDensity ( );
    void PutReferenceDensity (
        double pVal );
    double GetReferenceHeight ( );
    void PutReferenceHeight (
        double pVal );
    double GetScaleHeight ( );
    void PutScaleHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceDensity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceDensity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleHeight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ad399d90-c8ae-445c-aca0-641967d42bc6"))
AgVeAdvanced;
    // [ default ] interface _IAgVeAdvanced
    // interface IAgVeAdvanced

struct __declspec(uuid("2c83e6b8-f0b6-4ed9-9af1-7146eeae750e"))
_IAgVeAdvanced : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAtmosphericDensityModel,put=PutAtmosphericDensityModel))
    enum AgEAtmosphericDensityModel AtmosphericDensityModel;
    __declspec(property(get=GetUseOsculatingAlt,put=PutUseOsculatingAlt))
    VARIANT_BOOL UseOsculatingAlt;
    __declspec(property(get=GetMaxDragAlt,put=PutMaxDragAlt))
    double MaxDragAlt;
    __declspec(property(get=GetDensityWeighingFactor,put=PutDensityWeighingFactor))
    double DensityWeighingFactor;
    __declspec(property(get=GetExpDensModelParams))
    IAgVeExpDensModelParamsPtr ExpDensModelParams;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAtmosphericDensityModel GetAtmosphericDensityModel ( );
    void PutAtmosphericDensityModel (
        enum AgEAtmosphericDensityModel pVal );
    VARIANT_BOOL GetUseOsculatingAlt ( );
    void PutUseOsculatingAlt (
        VARIANT_BOOL pVal );
    double GetMaxDragAlt ( );
    void PutMaxDragAlt (
        double pVal );
    double GetDensityWeighingFactor ( );
    void PutDensityWeighingFactor (
        double pVal );
    IAgVeExpDensModelParamsPtr GetExpDensModelParams ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AtmosphericDensityModel (
        /*[out,retval]*/ enum AgEAtmosphericDensityModel * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosphericDensityModel (
        /*[in]*/ enum AgEAtmosphericDensityModel pVal ) = 0;
      virtual HRESULT __stdcall get_UseOsculatingAlt (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseOsculatingAlt (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxDragAlt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxDragAlt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DensityWeighingFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DensityWeighingFactor (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ExpDensModelParams (
        /*[out,retval]*/ struct IAgVeExpDensModelParams * * ppVal ) = 0;
};

struct __declspec(uuid("e12ece8d-cfa4-4105-b537-0d8077e421e5"))
IAgVeAdvanced : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAtmosphericDensityModel,put=PutAtmosphericDensityModel))
    enum AgEAtmosphericDensityModel AtmosphericDensityModel;
    __declspec(property(get=GetUseOsculatingAlt,put=PutUseOsculatingAlt))
    VARIANT_BOOL UseOsculatingAlt;
    __declspec(property(get=GetMaxDragAlt,put=PutMaxDragAlt))
    double MaxDragAlt;
    __declspec(property(get=GetDensityWeighingFactor,put=PutDensityWeighingFactor))
    double DensityWeighingFactor;
    __declspec(property(get=GetExpDensModelParams))
    IAgVeExpDensModelParamsPtr ExpDensModelParams;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAtmosphericDensityModel GetAtmosphericDensityModel ( );
    void PutAtmosphericDensityModel (
        enum AgEAtmosphericDensityModel pVal );
    VARIANT_BOOL GetUseOsculatingAlt ( );
    void PutUseOsculatingAlt (
        VARIANT_BOOL pVal );
    double GetMaxDragAlt ( );
    void PutMaxDragAlt (
        double pVal );
    double GetDensityWeighingFactor ( );
    void PutDensityWeighingFactor (
        double pVal );
    IAgVeExpDensModelParamsPtr GetExpDensModelParams ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AtmosphericDensityModel (
        /*[out,retval]*/ enum AgEAtmosphericDensityModel * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosphericDensityModel (
        /*[in]*/ enum AgEAtmosphericDensityModel pVal ) = 0;
      virtual HRESULT __stdcall get_UseOsculatingAlt (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseOsculatingAlt (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxDragAlt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxDragAlt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DensityWeighingFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DensityWeighingFactor (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ExpDensModelParams (
        /*[out,retval]*/ struct IAgVeExpDensModelParams * * ppVal ) = 0;
};

struct __declspec(uuid("59d2c4e8-3d9e-4632-a998-ae26e806149f"))
AgVeLOPForceModelDrag;
    // [ default ] interface _IAgVeLOPForceModelDrag
    // interface IAgVeLOPForceModelDrag

struct __declspec(uuid("f3c2e73d-98ff-40b6-8aa3-ea3c0d7ffa14"))
_IAgVeLOPForceModelDrag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetCd,put=PutCd))
    double Cd;
    __declspec(property(get=GetAdvanced))
    IAgVeAdvancedPtr Advanced;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetCd ( );
    void PutCd (
        double pVal );
    IAgVeAdvancedPtr GetAdvanced ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Cd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgVeAdvanced * * ppVal ) = 0;
};

struct __declspec(uuid("05db8fb3-47d7-4678-815d-37cca78d19b3"))
IAgVeLOPForceModelDrag : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetCd,put=PutCd))
    double Cd;
    __declspec(property(get=GetAdvanced))
    IAgVeAdvancedPtr Advanced;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetCd ( );
    void PutCd (
        double pVal );
    IAgVeAdvancedPtr GetAdvanced ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Cd (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cd (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgVeAdvanced * * ppVal ) = 0;
};

struct __declspec(uuid("f6c73454-d3d7-4721-83f1-6f7c5d2c03f8"))
AgVeLOPSolarRadiationPressure;
    // [ default ] interface _IAgVeLOPSolarRadiationPressure
    // interface IAgVeLOPSolarRadiationPressure

struct __declspec(uuid("51ad7210-24bf-4dd7-a77c-9746791e5353"))
_IAgVeLOPSolarRadiationPressure : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetCp,put=PutCp))
    double Cp;
    __declspec(property(get=GetAtmosHeight,put=PutAtmosHeight))
    double AtmosHeight;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetCp ( );
    void PutCp (
        double pVal );
    double GetAtmosHeight ( );
    void PutAtmosHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Cp (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cp (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosHeight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a5fd33f9-8ac3-48df-8115-aaf64e1a26a5"))
IAgVeLOPSolarRadiationPressure : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUse,put=PutUse))
    VARIANT_BOOL Use;
    __declspec(property(get=GetCp,put=PutCp))
    double Cp;
    __declspec(property(get=GetAtmosHeight,put=PutAtmosHeight))
    double AtmosHeight;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUse ( );
    void PutUse (
        VARIANT_BOOL pVal );
    double GetCp ( );
    void PutCp (
        double pVal );
    double GetAtmosHeight ( );
    void PutAtmosHeight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Use (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Cp (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cp (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosHeight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("67a33288-81c2-44eb-989c-7b05a977b72e"))
AgVePhysicalData;
    // [ default ] interface _IAgVePhysicalData
    // interface IAgVePhysicalData

struct __declspec(uuid("e2637fde-4c1f-4636-a37a-2602e1bbaa97"))
_IAgVePhysicalData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDragCrossSectionalArea,put=PutDragCrossSectionalArea))
    double DragCrossSectionalArea;
    __declspec(property(get=GetSRPCrossSectionalArea,put=PutSRPCrossSectionalArea))
    double SRPCrossSectionalArea;
    __declspec(property(get=GetSatelliteMass,put=PutSatelliteMass))
    double SatelliteMass;

    //
    // Wrapper methods for error-handling
    //

    double GetDragCrossSectionalArea ( );
    void PutDragCrossSectionalArea (
        double pVal );
    double GetSRPCrossSectionalArea ( );
    void PutSRPCrossSectionalArea (
        double pVal );
    double GetSatelliteMass ( );
    void PutSatelliteMass (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DragCrossSectionalArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DragCrossSectionalArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SRPCrossSectionalArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SRPCrossSectionalArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SatelliteMass (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SatelliteMass (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5d107330-e028-4aa4-aced-8df01b74d870"))
IAgVePhysicalData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDragCrossSectionalArea,put=PutDragCrossSectionalArea))
    double DragCrossSectionalArea;
    __declspec(property(get=GetSRPCrossSectionalArea,put=PutSRPCrossSectionalArea))
    double SRPCrossSectionalArea;
    __declspec(property(get=GetSatelliteMass,put=PutSatelliteMass))
    double SatelliteMass;

    //
    // Wrapper methods for error-handling
    //

    double GetDragCrossSectionalArea ( );
    void PutDragCrossSectionalArea (
        double pVal );
    double GetSRPCrossSectionalArea ( );
    void PutSRPCrossSectionalArea (
        double pVal );
    double GetSatelliteMass ( );
    void PutSatelliteMass (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DragCrossSectionalArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DragCrossSectionalArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SRPCrossSectionalArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SRPCrossSectionalArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SatelliteMass (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SatelliteMass (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("21aa48b7-ac73-4176-9c45-4a09e3fb45f6"))
AgVeLOPForceModel;
    // [ default ] interface _IAgVeLOPForceModel
    // interface IAgVeLOPForceModel

struct __declspec(uuid("3781ddee-97ca-48e3-a762-f7e431700f3f"))
IAgVeThirdBodyGravity : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseSolarGravity,put=PutUseSolarGravity))
    VARIANT_BOOL UseSolarGravity;
    __declspec(property(get=GetUseLunarGravity,put=PutUseLunarGravity))
    VARIANT_BOOL UseLunarGravity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseSolarGravity ( );
    void PutUseSolarGravity (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseLunarGravity ( );
    void PutUseLunarGravity (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseSolarGravity (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSolarGravity (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseLunarGravity (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLunarGravity (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("84030200-14a5-492b-b1da-47dca7954002"))
_IAgVeLOPForceModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyGravity))
    IAgVeLOPCentralBodyGravityPtr CentralBodyGravity;
    __declspec(property(get=GetThirdBodyGravity))
    IAgVeThirdBodyGravityPtr ThirdBodyGravity;
    __declspec(property(get=GetDrag))
    IAgVeLOPForceModelDragPtr Drag;
    __declspec(property(get=GetSolarRadiationPressure))
    IAgVeLOPSolarRadiationPressurePtr SolarRadiationPressure;
    __declspec(property(get=GetPhysicalData))
    IAgVePhysicalDataPtr PhysicalData;

    //
    // Wrapper methods for error-handling
    //

    IAgVeLOPCentralBodyGravityPtr GetCentralBodyGravity ( );
    IAgVeThirdBodyGravityPtr GetThirdBodyGravity ( );
    IAgVeLOPForceModelDragPtr GetDrag ( );
    IAgVeLOPSolarRadiationPressurePtr GetSolarRadiationPressure ( );
    IAgVePhysicalDataPtr GetPhysicalData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBodyGravity (
        /*[out,retval]*/ struct IAgVeLOPCentralBodyGravity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ThirdBodyGravity (
        /*[out,retval]*/ struct IAgVeThirdBodyGravity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Drag (
        /*[out,retval]*/ struct IAgVeLOPForceModelDrag * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolarRadiationPressure (
        /*[out,retval]*/ struct IAgVeLOPSolarRadiationPressure * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PhysicalData (
        /*[out,retval]*/ struct IAgVePhysicalData * * ppVal ) = 0;
};

struct __declspec(uuid("513d8ac1-1f26-4cc9-83f9-cecfd99e2418"))
IAgVeLOPForceModel : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyGravity))
    IAgVeLOPCentralBodyGravityPtr CentralBodyGravity;
    __declspec(property(get=GetThirdBodyGravity))
    IAgVeThirdBodyGravityPtr ThirdBodyGravity;
    __declspec(property(get=GetDrag))
    IAgVeLOPForceModelDragPtr Drag;
    __declspec(property(get=GetSolarRadiationPressure))
    IAgVeLOPSolarRadiationPressurePtr SolarRadiationPressure;
    __declspec(property(get=GetPhysicalData))
    IAgVePhysicalDataPtr PhysicalData;

    //
    // Wrapper methods for error-handling
    //

    IAgVeLOPCentralBodyGravityPtr GetCentralBodyGravity ( );
    IAgVeThirdBodyGravityPtr GetThirdBodyGravity ( );
    IAgVeLOPForceModelDragPtr GetDrag ( );
    IAgVeLOPSolarRadiationPressurePtr GetSolarRadiationPressure ( );
    IAgVePhysicalDataPtr GetPhysicalData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBodyGravity (
        /*[out,retval]*/ struct IAgVeLOPCentralBodyGravity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ThirdBodyGravity (
        /*[out,retval]*/ struct IAgVeThirdBodyGravity * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Drag (
        /*[out,retval]*/ struct IAgVeLOPForceModelDrag * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolarRadiationPressure (
        /*[out,retval]*/ struct IAgVeLOPSolarRadiationPressure * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PhysicalData (
        /*[out,retval]*/ struct IAgVePhysicalData * * ppVal ) = 0;
};

struct __declspec(uuid("31950f0d-b5ad-4860-bef2-e822b05ced1b"))
AgVeSegmentsCollection;
    // [ default ] interface IUnknown
    // interface IAgVeSegmentsCollection

struct __declspec(uuid("95bdb877-21df-44ef-847d-6b3639e755fe"))
IAgVeSPICESegment : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSegmentName))
    _bstr_t SegmentName;
    __declspec(property(get=GetSegmentType))
    _bstr_t SegmentType;
    __declspec(property(get=GetCoordAxes))
    _bstr_t CoordAxes;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSegmentName ( );
    _bstr_t GetSegmentType ( );
    _bstr_t GetCoordAxes ( );
    _bstr_t GetCentralBody ( );
    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SegmentName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CoordAxes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

struct __declspec(uuid("c816e47e-6b33-4e0d-9b17-e1d2ddae4e96"))
IAgVeSegmentsCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeSPICESegmentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeSPICESegmentPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeSPICESegment * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("e2344b1e-bb2f-4500-9175-34e4f41bd32c"))
AgVePropagatorHPOP;
    // [ default ] interface _IAgVePropagatorHPOP
    // interface IAgVePropagatorHPOP
    // interface IAgVePropagator

struct __declspec(uuid("07aec809-c378-4d09-b70a-f78ace0681e4"))
_IAgVePropagatorHPOP : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeInitialStatePtr InitialState;
    __declspec(property(get=GetForceModel))
    IAgVeHPOPForceModelPtr ForceModel;
    __declspec(property(get=GetIntegrator))
    IAgVeIntegratorPtr Integrator;
    __declspec(property(get=GetCovariance))
    IAgVeCovariancePtr Covariance;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeInitialStatePtr GetInitialState ( );
    IAgVeHPOPForceModelPtr GetForceModel ( );
    IAgVeIntegratorPtr GetIntegrator ( );
    IAgVeCovariancePtr GetCovariance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ForceModel (
        /*[out,retval]*/ struct IAgVeHPOPForceModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Integrator (
        /*[out,retval]*/ struct IAgVeIntegrator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeCovariance * * ppVal ) = 0;
};

struct __declspec(uuid("4035a774-7405-44fa-9593-cf9937fdab36"))
IAgVePropagator : IUnknown
{};

struct __declspec(uuid("4e5418d1-d0e0-44dc-bdb4-8131a770dbb0"))
IAgVePropagatorHPOP : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeInitialStatePtr InitialState;
    __declspec(property(get=GetForceModel))
    IAgVeHPOPForceModelPtr ForceModel;
    __declspec(property(get=GetIntegrator))
    IAgVeIntegratorPtr Integrator;
    __declspec(property(get=GetCovariance))
    IAgVeCovariancePtr Covariance;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeInitialStatePtr GetInitialState ( );
    IAgVeHPOPForceModelPtr GetForceModel ( );
    IAgVeIntegratorPtr GetIntegrator ( );
    IAgVeCovariancePtr GetCovariance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ForceModel (
        /*[out,retval]*/ struct IAgVeHPOPForceModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Integrator (
        /*[out,retval]*/ struct IAgVeIntegrator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeCovariance * * ppVal ) = 0;
};

struct __declspec(uuid("7ff79307-d8ff-42af-9d80-393965da6612"))
AgVePropagatorJ2Perturbation;
    // [ default ] interface _IAgVePropagatorJ2Perturbation
    // interface IAgVePropagatorJ2Perturbation
    // interface IAgVePropagator

struct __declspec(uuid("9e7bb02a-2a59-4f7e-b21a-68252df8138d"))
_IAgVePropagatorJ2Perturbation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeJxInitialStatePtr InitialState;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeJxInitialStatePtr GetInitialState ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeJxInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("829a568b-5e43-47c5-9348-e2fcc4593b52"))
IAgVePropagatorJ2Perturbation : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeJxInitialStatePtr InitialState;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeJxInitialStatePtr GetInitialState ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeJxInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("74ade977-5fbc-4588-b38d-21d9b32f2d10"))
AgVePropagatorJ4Perturbation;
    // [ default ] interface _IAgVePropagatorJ4Perturbation
    // interface IAgVePropagatorJ4Perturbation
    // interface IAgVePropagator

struct __declspec(uuid("85f28c22-f32f-4b18-8409-3935249be36d"))
_IAgVePropagatorJ4Perturbation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeJxInitialStatePtr InitialState;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeJxInitialStatePtr GetInitialState ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeJxInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("bcf5890b-9146-46de-b70d-5d12c6cb4809"))
IAgVePropagatorJ4Perturbation : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeJxInitialStatePtr InitialState;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeJxInitialStatePtr GetInitialState ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeJxInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("970caa92-8ee4-4f9f-b4e0-7acc46b7ea1d"))
AgVePropagatorLOP;
    // [ default ] interface _IAgVePropagatorLOP
    // interface IAgVePropagatorLOP
    // interface IAgVePropagator

struct __declspec(uuid("80419740-398d-4834-a1c3-bd74b6ddab13"))
_IAgVePropagatorLOP : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeInitialStatePtr InitialState;
    __declspec(property(get=GetForceModel))
    IAgVeLOPForceModelPtr ForceModel;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeInitialStatePtr GetInitialState ( );
    IAgVeLOPForceModelPtr GetForceModel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ForceModel (
        /*[out,retval]*/ struct IAgVeLOPForceModel * * ppVal ) = 0;
};

struct __declspec(uuid("085cefc0-e19c-42f4-975b-e4c164ebf499"))
IAgVePropagatorLOP : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeInitialStatePtr InitialState;
    __declspec(property(get=GetForceModel))
    IAgVeLOPForceModelPtr ForceModel;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeInitialStatePtr GetInitialState ( );
    IAgVeLOPForceModelPtr GetForceModel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ForceModel (
        /*[out,retval]*/ struct IAgVeLOPForceModel * * ppVal ) = 0;
};

struct __declspec(uuid("c87904df-3f0e-46db-bb92-76b2a3c79f0e"))
AgVePropagatorSGP4;
    // [ default ] interface _IAgVePropagatorSGP4
    // interface IAgVePropagatorSGP4
    // interface IAgVePropagator

enum AgEVeSGP4SwitchMethod
{
    eSGP4Epoch = 0,
    eSGP4Midpoint = 1,
    eSGP4TCA = 2,
    eSGP4Override = 3,
    eSGP4Disable = 4
};

struct __declspec(uuid("45d20e2c-e997-4ec0-b8bf-b0cd317ae2ea"))
IAgVeSGP4Segment : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSSCNum,put=PutSSCNum))
    _bstr_t SSCNum;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetRevNumber,put=PutRevNumber))
    long RevNumber;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    double Epoch;
    __declspec(property(get=GetInclination,put=PutInclination))
    _variant_t Inclination;
    __declspec(property(get=GetArgOfPerigee,put=PutArgOfPerigee))
    _variant_t ArgOfPerigee;
    __declspec(property(get=GetRAAN,put=PutRAAN))
    _variant_t RAAN;
    __declspec(property(get=GetEccentricity,put=PutEccentricity))
    double Eccentricity;
    __declspec(property(get=GetMeanMotion,put=PutMeanMotion))
    _variant_t MeanMotion;
    __declspec(property(get=GetMeanAnomaly,put=PutMeanAnomaly))
    _variant_t MeanAnomaly;
    __declspec(property(get=GetMeanMotionDot,put=PutMeanMotionDot))
    double MeanMotionDot;
    __declspec(property(get=GetMotionDotDot,put=PutMotionDotDot))
    double MotionDotDot;
    __declspec(property(get=GetBStar,put=PutBStar))
    double BStar;
    __declspec(property(get=GetClassification,put=PutClassification))
    _bstr_t Classification;
    __declspec(property(get=GetIntlDesignator,put=PutIntlDesignator))
    _bstr_t IntlDesignator;
    __declspec(property(get=GetSwitchingMethod,put=PutSwitchingMethod))
    enum AgEVeSGP4SwitchMethod SwitchingMethod;
    __declspec(property(get=GetRange))
    double Range;
    __declspec(property(get=GetSwitchTime,put=PutSwitchTime))
    _variant_t SwitchTime;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSSCNum ( );
    void PutSSCNum (
        _bstr_t pVal );
    long GetRevNumber ( );
    void PutRevNumber (
        long pVal );
    double GetEpoch ( );
    void PutEpoch (
        double pVal );
    _variant_t GetInclination ( );
    void PutInclination (
        const _variant_t & pVal );
    _variant_t GetArgOfPerigee ( );
    void PutArgOfPerigee (
        const _variant_t & pVal );
    _variant_t GetRAAN ( );
    void PutRAAN (
        const _variant_t & pVal );
    double GetEccentricity ( );
    void PutEccentricity (
        double pVal );
    _variant_t GetMeanMotion ( );
    void PutMeanMotion (
        const _variant_t & pVal );
    _variant_t GetMeanAnomaly ( );
    void PutMeanAnomaly (
        const _variant_t & pVal );
    double GetMeanMotionDot ( );
    void PutMeanMotionDot (
        double pVal );
    double GetMotionDotDot ( );
    void PutMotionDotDot (
        double pVal );
    double GetBStar ( );
    void PutBStar (
        double pVal );
    _bstr_t GetClassification ( );
    void PutClassification (
        _bstr_t pVal );
    _bstr_t GetIntlDesignator ( );
    void PutIntlDesignator (
        _bstr_t pVal );
    enum AgEVeSGP4SwitchMethod GetSwitchingMethod ( );
    void PutSwitchingMethod (
        enum AgEVeSGP4SwitchMethod pVal );
    double GetRange ( );
    _variant_t GetSwitchTime ( );
    void PutSwitchTime (
        const _variant_t & pVal );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SSCNum (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SSCNum (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RevNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RevNumber (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Inclination (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Inclination (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ArgOfPerigee (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ArgOfPerigee (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_RAAN (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_RAAN (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Eccentricity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Eccentricity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MeanMotion (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanMotion (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MeanAnomaly (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanAnomaly (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MeanMotionDot (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanMotionDot (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MotionDotDot (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MotionDotDot (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BStar (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BStar (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Classification (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Classification (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IntlDesignator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IntlDesignator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SwitchingMethod (
        /*[out,retval]*/ enum AgEVeSGP4SwitchMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_SwitchingMethod (
        /*[in]*/ enum AgEVeSGP4SwitchMethod pVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SwitchTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SwitchTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

enum AgELoadMethodType
{
    eAutoLoad = 0,
    eFileInsert = 1,
    eFileLoad = 2,
    eOnlineAutoLoad = 3,
    eOnlineLoad = 4,
    eSpaceTrackLoad = 5
};

struct __declspec(uuid("49eb0af3-6582-4b32-bf90-d7c135933761"))
IAgVeSGP4LoadData : IUnknown
{};

struct __declspec(uuid("72e5350b-e519-4ff8-a16f-e8535c0c8f85"))
IAgVeSGP4SegmentCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeSGP4SegmentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLoadMethodType,put=PutLoadMethodType))
    enum AgELoadMethodType LoadMethodType;
    __declspec(property(get=GetLoadMethod))
    IAgVeSGP4LoadDataPtr LoadMethod;
    __declspec(property(get=GetRoutineType,put=PutRoutineType))
    _bstr_t RoutineType;
    __declspec(property(get=GetAvailableRoutines))
    SAFEARRAY * AvailableRoutines;
    __declspec(property(get=GetMaxTLELimit,put=PutMaxTLELimit))
    long MaxTLELimit;
    __declspec(property(get=GetSSCNumber,put=PutSSCNumber))
    _bstr_t SSCNumber;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeSGP4SegmentPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IAgVeSGP4SegmentPtr AddSeg ( );
    enum AgELoadMethodType GetLoadMethodType ( );
    void PutLoadMethodType (
        enum AgELoadMethodType pRetVal );
    IAgVeSGP4LoadDataPtr GetLoadMethod ( );
    _bstr_t GetRoutineType ( );
    void PutRoutineType (
        _bstr_t pRetVal );
    HRESULT RemoveSeg (
        long Index );
    HRESULT RemoveAllSegs ( );
    SAFEARRAY * GetAvailableRoutines ( );
    long GetMaxTLELimit ( );
    void PutMaxTLELimit (
        long pVal );
    _bstr_t GetSSCNumber ( );
    void PutSSCNumber (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeSGP4Segment * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSeg (
        /*[out,retval]*/ struct IAgVeSGP4Segment * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LoadMethodType (
        /*[out,retval]*/ enum AgELoadMethodType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LoadMethodType (
        /*[in]*/ enum AgELoadMethodType pRetVal ) = 0;
      virtual HRESULT __stdcall get_LoadMethod (
        /*[out,retval]*/ struct IAgVeSGP4LoadData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RoutineType (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_RoutineType (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveSeg (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegs ( ) = 0;
      virtual HRESULT __stdcall get_AvailableRoutines (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTLELimit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTLELimit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SSCNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SSCNumber (
        /*[in]*/ BSTR pVal ) = 0;
};

enum AgEVeSGP4AutoUpdateSource
{
    eSGP4AutoUpdateSourceUnknown = -1,
    eSGP4AutoUpdateSourceOnline = 0,
    eSGP4AutoUpdateOnlineSpaceTrack = 1,
    eSGP4AutoUpdateSourceFile = 2,
    eSGP4AutoUpdateNone = 3
};

enum AgEVeSGP4TLESelection
{
    eSGP4TLESelectionUseAll = 0,
    eSGP4TLESelectionUseFirst = 1
};

struct __declspec(uuid("5b9cde54-a69b-4ae1-9b2f-5b62ff5447a4"))
IAgVeSGP4AutoUpdateProperties : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSelection,put=PutSelection))
    enum AgEVeSGP4TLESelection Selection;
    __declspec(property(get=GetSwitchMethod,put=PutSwitchMethod))
    enum AgEVeSGP4SwitchMethod SwitchMethod;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeSGP4TLESelection GetSelection ( );
    void PutSelection (
        enum AgEVeSGP4TLESelection pRetVal );
    enum AgEVeSGP4SwitchMethod GetSwitchMethod ( );
    void PutSwitchMethod (
        enum AgEVeSGP4SwitchMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ enum AgEVeSGP4TLESelection * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Selection (
        /*[in]*/ enum AgEVeSGP4TLESelection pRetVal ) = 0;
      virtual HRESULT __stdcall get_SwitchMethod (
        /*[out,retval]*/ enum AgEVeSGP4SwitchMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SwitchMethod (
        /*[in]*/ enum AgEVeSGP4SwitchMethod pRetVal ) = 0;
};

struct __declspec(uuid("34a8a72c-1aa6-441f-b629-55cac04f2d62"))
IAgVeSGP4AutoUpdateFileSource : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    SAFEARRAY * Preview ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Preview (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("299fa75e-eaf8-4392-b9a7-521c78746ca5"))
IAgVeSGP4AutoUpdateOnlineSource : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * Preview ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Preview (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("0f10e16c-bdfc-4b52-a6c2-7defd5e531ab"))
IAgVeSGP4AutoUpdate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSource,put=PutSelectedSource))
    enum AgEVeSGP4AutoUpdateSource SelectedSource;
    __declspec(property(get=GetProperties))
    IAgVeSGP4AutoUpdatePropertiesPtr Properties;
    __declspec(property(get=GetFileSource))
    IAgVeSGP4AutoUpdateFileSourcePtr FileSource;
    __declspec(property(get=GetOnlineSource))
    IAgVeSGP4AutoUpdateOnlineSourcePtr OnlineSource;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeSGP4AutoUpdateSource GetSelectedSource ( );
    void PutSelectedSource (
        enum AgEVeSGP4AutoUpdateSource pRetVal );
    IAgVeSGP4AutoUpdatePropertiesPtr GetProperties ( );
    IAgVeSGP4AutoUpdateFileSourcePtr GetFileSource ( );
    IAgVeSGP4AutoUpdateOnlineSourcePtr GetOnlineSource ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SelectedSource (
        /*[out,retval]*/ enum AgEVeSGP4AutoUpdateSource * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedSource (
        /*[in]*/ enum AgEVeSGP4AutoUpdateSource pRetVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgVeSGP4AutoUpdateProperties * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FileSource (
        /*[out,retval]*/ struct IAgVeSGP4AutoUpdateFileSource * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OnlineSource (
        /*[out,retval]*/ struct IAgVeSGP4AutoUpdateOnlineSource * * ppRetVal ) = 0;
};

struct __declspec(uuid("66f121dc-bcd3-454c-9abb-e0b58ff48677"))
IAgVePropagatorSGP4CommonTasks : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddSegsFromFile (
        _bstr_t SSCNumber,
        _bstr_t Filename );
    HRESULT AddSegsFromOnlineSource (
        _bstr_t SSCNum );
    HRESULT AddSegsFromSpaceTrack (
        _bstr_t SSCNum,
        _bstr_t Username,
        _bstr_t Password );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddSegsFromFile (
        /*[in]*/ BSTR SSCNumber,
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromOnlineSource (
        /*[in]*/ BSTR SSCNum ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromSpaceTrack (
        /*[in]*/ BSTR SSCNum,
        /*[in]*/ BSTR Username,
        /*[in]*/ BSTR Password ) = 0;
};

struct __declspec(uuid("bb318184-7d0f-4e1a-9b36-b28a7f9b470e"))
IAgVeSGP4PropagatorSettings : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseSGP4OnePtInterpolation,put=PutUseSGP4OnePtInterpolation))
    VARIANT_BOOL UseSGP4OnePtInterpolation;
    __declspec(property(get=GetUseSGP4OnePtValidation,put=PutUseSGP4OnePtValidation))
    VARIANT_BOOL UseSGP4OnePtValidation;
    __declspec(property(get=GetUseSGP4OnePtWarning,put=PutUseSGP4OnePtWarning))
    VARIANT_BOOL UseSGP4OnePtWarning;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseSGP4OnePtInterpolation ( );
    void PutUseSGP4OnePtInterpolation (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseSGP4OnePtValidation ( );
    void PutUseSGP4OnePtValidation (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseSGP4OnePtWarning ( );
    void PutUseSGP4OnePtWarning (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseSGP4OnePtInterpolation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSGP4OnePtInterpolation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSGP4OnePtValidation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSGP4OnePtValidation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSGP4OnePtWarning (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSGP4OnePtWarning (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("9154e429-ac48-4d48-a31f-2dd564071845"))
_IAgVePropagatorSGP4 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetSegments))
    IAgVeSGP4SegmentCollectionPtr Segments;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;
    __declspec(property(get=GetAutoUpdateEnabled,put=PutAutoUpdateEnabled))
    VARIANT_BOOL AutoUpdateEnabled;
    __declspec(property(get=GetAutoUpdate))
    IAgVeSGP4AutoUpdatePtr AutoUpdate;
    __declspec(property(get=GetCommonTasks))
    IAgVePropagatorSGP4CommonTasksPtr CommonTasks;
    __declspec(property(get=GetSettings))
    IAgVeSGP4PropagatorSettingsPtr Settings;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeSGP4SegmentCollectionPtr GetSegments ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAutoUpdateEnabled ( );
    void PutAutoUpdateEnabled (
        VARIANT_BOOL pRetVal );
    IAgVeSGP4AutoUpdatePtr GetAutoUpdate ( );
    IAgVePropagatorSGP4CommonTasksPtr GetCommonTasks ( );
    IAgVeSGP4PropagatorSettingsPtr GetSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Segments (
        /*[out,retval]*/ struct IAgVeSGP4SegmentCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ struct IAgVeSGP4AutoUpdate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgVePropagatorSGP4CommonTasks * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Settings (
        /*[out,retval]*/ struct IAgVeSGP4PropagatorSettings * * ppRetVal ) = 0;
};

struct __declspec(uuid("aed0f414-2b25-4059-9715-5bf302c0aebd"))
IAgVePropagatorSGP4 : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetSegments))
    IAgVeSGP4SegmentCollectionPtr Segments;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;
    __declspec(property(get=GetAutoUpdateEnabled,put=PutAutoUpdateEnabled))
    VARIANT_BOOL AutoUpdateEnabled;
    __declspec(property(get=GetAutoUpdate))
    IAgVeSGP4AutoUpdatePtr AutoUpdate;
    __declspec(property(get=GetCommonTasks))
    IAgVePropagatorSGP4CommonTasksPtr CommonTasks;
    __declspec(property(get=GetSettings))
    IAgVeSGP4PropagatorSettingsPtr Settings;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeSGP4SegmentCollectionPtr GetSegments ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAutoUpdateEnabled ( );
    void PutAutoUpdateEnabled (
        VARIANT_BOOL pRetVal );
    IAgVeSGP4AutoUpdatePtr GetAutoUpdate ( );
    IAgVePropagatorSGP4CommonTasksPtr GetCommonTasks ( );
    IAgVeSGP4PropagatorSettingsPtr GetSettings ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Segments (
        /*[out,retval]*/ struct IAgVeSGP4SegmentCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ struct IAgVeSGP4AutoUpdate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgVePropagatorSGP4CommonTasks * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Settings (
        /*[out,retval]*/ struct IAgVeSGP4PropagatorSettings * * ppRetVal ) = 0;
};

struct __declspec(uuid("e59b1c62-e2cb-4dfa-aa4a-dedd5fbf54a1"))
AgVePropagatorSPICE;
    // [ default ] interface _IAgVePropagatorSPICE
    // interface IAgVePropagatorSPICE
    // interface IAgVePropagator

struct __declspec(uuid("ceeae086-2758-4f6e-964e-c737f47c320d"))
_IAgVePropagatorSPICE : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetSpice,put=PutSpice))
    _bstr_t Spice;
    __declspec(property(get=GetBodyName,put=PutBodyName))
    _bstr_t BodyName;
    __declspec(property(get=GetSegments))
    IAgVeSegmentsCollectionPtr Segments;
    __declspec(property(get=GetAvailableBodyNames))
    SAFEARRAY * AvailableBodyNames;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    _bstr_t GetSpice ( );
    void PutSpice (
        _bstr_t pVal );
    _bstr_t GetBodyName ( );
    void PutBodyName (
        _bstr_t ppVal );
    IAgVeSegmentsCollectionPtr GetSegments ( );
    SAFEARRAY * GetAvailableBodyNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Spice (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Spice (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BodyName (
        /*[out,retval]*/ BSTR * ppVal ) = 0;
      virtual HRESULT __stdcall put_BodyName (
        /*[in]*/ BSTR ppVal ) = 0;
      virtual HRESULT __stdcall get_Segments (
        /*[out,retval]*/ struct IAgVeSegmentsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AvailableBodyNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("28261c96-c179-460c-8c9f-adccf3038703"))
IAgVePropagatorSPICE : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetSpice,put=PutSpice))
    _bstr_t Spice;
    __declspec(property(get=GetBodyName,put=PutBodyName))
    _bstr_t BodyName;
    __declspec(property(get=GetSegments))
    IAgVeSegmentsCollectionPtr Segments;
    __declspec(property(get=GetAvailableBodyNames))
    SAFEARRAY * AvailableBodyNames;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    _bstr_t GetSpice ( );
    void PutSpice (
        _bstr_t pVal );
    _bstr_t GetBodyName ( );
    void PutBodyName (
        _bstr_t pVal );
    IAgVeSegmentsCollectionPtr GetSegments ( );
    SAFEARRAY * GetAvailableBodyNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Spice (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Spice (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BodyName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BodyName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Segments (
        /*[out,retval]*/ struct IAgVeSegmentsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AvailableBodyNames (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("a90738fc-8597-47b1-89a5-344ea328b819"))
AgVePropagatorStkExternal;
    // [ default ] interface _IAgVePropagatorStkExternal
    // interface IAgVePropagatorStkExternal
    // interface IAgVePropagator

enum AgEStkExternalEphemerisFormat
{
    eStkExternalEphemerisFormatUnknown = -1,
    eStkExternalEphemerisFormatSTK = 0,
    eStkExternalEphemerisFormatCCSDS = 1,
    eStkExternalEphemerisFormatITC = 2
};

struct __declspec(uuid("70458a02-728e-4e64-9156-fb1e896b1152"))
_IAgVePropagatorStkExternal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep))
    double Step;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetOverride,put=PutOverride))
    VARIANT_BOOL Override;
    __declspec(property(get=GetEphemStart,put=PutEphemStart))
    _variant_t EphemStart;
    __declspec(property(get=GetFileFormat,put=PutFileFormat))
    enum AgEStkExternalEphemerisFormat FileFormat;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    double GetStep ( );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    VARIANT_BOOL GetOverride ( );
    void PutOverride (
        VARIANT_BOOL pVal );
    _variant_t GetEphemStart ( );
    void PutEphemStart (
        const _variant_t & pVal );
    enum AgEStkExternalEphemerisFormat GetFileFormat ( );
    void PutFileFormat (
        enum AgEStkExternalEphemerisFormat pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Override (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Override (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EphemStart (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_EphemStart (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_FileFormat (
        /*[out,retval]*/ enum AgEStkExternalEphemerisFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_FileFormat (
        /*[in]*/ enum AgEStkExternalEphemerisFormat pVal ) = 0;
};

struct __declspec(uuid("d7306142-6d5f-4c4b-9b24-19d7220c785f"))
IAgVePropagatorStkExternal : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep))
    double Step;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetOverride,put=PutOverride))
    VARIANT_BOOL Override;
    __declspec(property(get=GetEphemStart,put=PutEphemStart))
    _variant_t EphemStart;
    __declspec(property(get=GetFileFormat,put=PutFileFormat))
    enum AgEStkExternalEphemerisFormat FileFormat;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    double GetStep ( );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    VARIANT_BOOL GetOverride ( );
    void PutOverride (
        VARIANT_BOOL pVal );
    _variant_t GetEphemStart ( );
    void PutEphemStart (
        const _variant_t & pVal );
    enum AgEStkExternalEphemerisFormat GetFileFormat ( );
    void PutFileFormat (
        enum AgEStkExternalEphemerisFormat pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Override (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Override (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EphemStart (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_EphemStart (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_FileFormat (
        /*[out,retval]*/ enum AgEStkExternalEphemerisFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_FileFormat (
        /*[in]*/ enum AgEStkExternalEphemerisFormat pVal ) = 0;
};

struct __declspec(uuid("3e992a89-517e-436c-94d2-72666622456d"))
AgVePropagatorTwoBody;
    // [ default ] interface _IAgVePropagatorTwoBody
    // interface IAgVePropagatorTwoBody
    // interface IAgVePropagator

struct __declspec(uuid("7ec777d6-8785-4b83-b90b-addf3d4a502e"))
_IAgVePropagatorTwoBody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeInitialStatePtr InitialState;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeInitialStatePtr GetInitialState ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("2b4854ee-6114-4ba9-aafb-30502c0d42ba"))
IAgVePropagatorTwoBody : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeInitialStatePtr InitialState;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeInitialStatePtr GetInitialState ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("3584f1ac-fb76-49eb-9c8d-54464e5f0146"))
AgVePropagatorUserExternal;
    // [ default ] interface _IAgVePropagatorUserExternal
    // interface IAgVePropagatorUserExternal
    // interface IAgVePropagator

struct __declspec(uuid("85bcfbbd-768f-4655-931e-f86fec979ba6"))
_IAgVePropagatorUserExternal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetPropagator,put=PutPropagator))
    _bstr_t Propagator;
    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetVehicleID,put=PutVehicleID))
    _bstr_t VehicleID;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetAvailableVehicleIDs))
    SAFEARRAY * AvailableVehicleIDs;
    __declspec(property(get=GetAvailablePropagators))
    SAFEARRAY * AvailablePropagators;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    _bstr_t GetPropagator ( );
    void PutPropagator (
        _bstr_t pVal );
    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pVal );
    _bstr_t GetVehicleID ( );
    void PutVehicleID (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    SAFEARRAY * GetAvailableVehicleIDs ( );
    SAFEARRAY * GetAvailablePropagators ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Propagator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Propagator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VehicleID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VehicleID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVehicleIDs (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailablePropagators (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("a5414dd6-bf6d-4e97-a8d1-d817803fb4e3"))
IAgVePropagatorUserExternal : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetPropagator,put=PutPropagator))
    _bstr_t Propagator;
    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;
    __declspec(property(get=GetVehicleID,put=PutVehicleID))
    _bstr_t VehicleID;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetAvailableVehicleIDs))
    SAFEARRAY * AvailableVehicleIDs;
    __declspec(property(get=GetAvailablePropagators))
    SAFEARRAY * AvailablePropagators;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    _bstr_t GetPropagator ( );
    void PutPropagator (
        _bstr_t pVal );
    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pVal );
    _bstr_t GetVehicleID ( );
    void PutVehicleID (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    SAFEARRAY * GetAvailableVehicleIDs ( );
    SAFEARRAY * GetAvailablePropagators ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Propagator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Propagator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VehicleID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VehicleID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVehicleIDs (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailablePropagators (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("c4e4b6dc-1942-4a0d-9ae6-1d216a69affb"))
AgVeLvInitialState;
    // [ default ] interface _IAgVeLvInitialState
    // interface IAgVeLvInitialState

struct __declspec(uuid("a372fe47-6567-44e9-8d6c-fdc310fab20c"))
_IAgVeLvInitialState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetLaunch))
    IAgLLAPositionPtr Launch;
    __declspec(property(get=GetBurnoutVel,put=PutBurnoutVel))
    double BurnoutVel;
    __declspec(property(get=GetBurnout))
    IAgLLAPositionPtr Burnout;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    IAgLLAPositionPtr GetLaunch ( );
    double GetBurnoutVel ( );
    void PutBurnoutVel (
        double pVal );
    IAgLLAPositionPtr GetBurnout ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Launch (
        /*[out,retval]*/ struct IAgLLAPosition * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BurnoutVel (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BurnoutVel (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Burnout (
        /*[out,retval]*/ struct IAgLLAPosition * * ppVal ) = 0;
};

struct __declspec(uuid("babd44bf-e6b9-42b7-826e-1eb755984975"))
IAgVeLvInitialState : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetLaunch))
    IAgLLAPositionPtr Launch;
    __declspec(property(get=GetBurnoutVel,put=PutBurnoutVel))
    double BurnoutVel;
    __declspec(property(get=GetBurnout))
    IAgLLAPositionPtr Burnout;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    IAgLLAPositionPtr GetLaunch ( );
    double GetBurnoutVel ( );
    void PutBurnoutVel (
        double pVal );
    IAgLLAPositionPtr GetBurnout ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Launch (
        /*[out,retval]*/ struct IAgLLAPosition * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BurnoutVel (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BurnoutVel (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Burnout (
        /*[out,retval]*/ struct IAgLLAPosition * * ppVal ) = 0;
};

struct __declspec(uuid("efdbf6e0-5bd7-4870-8d86-7950f9615177"))
AgVePropagatorSimpleAscent;
    // [ default ] interface _IAgVePropagatorSimpleAscent
    // interface IAgVePropagatorSimpleAscent
    // interface IAgVePropagator

struct __declspec(uuid("38307277-10e8-4285-a174-55781dd0ec2f"))
_IAgVePropagatorSimpleAscent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeLvInitialStatePtr InitialState;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeLvInitialStatePtr GetInitialState ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeLvInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("57dc2f29-2a33-4438-8f8c-e27a7c57912d"))
IAgVePropagatorSimpleAscent : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetInitialState))
    IAgVeLvInitialStatePtr InitialState;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    IAgVeLvInitialStatePtr GetInitialState ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialState (
        /*[out,retval]*/ struct IAgVeLvInitialState * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("afd2fe9f-84cd-4b61-980c-55346d419021"))
AgVeWaypointsElement;
    // [ default ] interface _IAgVeWaypointsElement
    // interface IAgVeWaypointsElement

struct __declspec(uuid("27e5d557-cf61-4f73-af6e-4055d16ee7d3"))
_IAgVeWaypointsElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude,put=PutLatitude))
    _variant_t Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    _variant_t Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetSpeed,put=PutSpeed))
    double Speed;
    __declspec(property(get=GetAcceleration,put=PutAcceleration))
    double Acceleration;
    __declspec(property(get=GetTime,put=PutTime))
    _variant_t Time;
    __declspec(property(get=GetTurnRadius,put=PutTurnRadius))
    double TurnRadius;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLatitude ( );
    void PutLatitude (
        const _variant_t & pVal );
    _variant_t GetLongitude ( );
    void PutLongitude (
        const _variant_t & pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    double GetSpeed ( );
    void PutSpeed (
        double pVal );
    double GetAcceleration ( );
    void PutAcceleration (
        double pVal );
    _variant_t GetTime ( );
    void PutTime (
        const _variant_t & pVal );
    double GetTurnRadius ( );
    void PutTurnRadius (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Speed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Speed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Acceleration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Acceleration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_TurnRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TurnRadius (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("0c12ec24-bb33-4f5d-84c6-f70eb9c5da76"))
IAgVeWaypointsElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude,put=PutLatitude))
    _variant_t Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    _variant_t Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetSpeed,put=PutSpeed))
    double Speed;
    __declspec(property(get=GetAcceleration,put=PutAcceleration))
    double Acceleration;
    __declspec(property(get=GetTime,put=PutTime))
    _variant_t Time;
    __declspec(property(get=GetTurnRadius,put=PutTurnRadius))
    double TurnRadius;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLatitude ( );
    void PutLatitude (
        const _variant_t & pVal );
    _variant_t GetLongitude ( );
    void PutLongitude (
        const _variant_t & pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    double GetSpeed ( );
    void PutSpeed (
        double pVal );
    double GetAcceleration ( );
    void PutAcceleration (
        double pVal );
    _variant_t GetTime ( );
    void PutTime (
        const _variant_t & pVal );
    double GetTurnRadius ( );
    void PutTurnRadius (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Speed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Speed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Acceleration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Acceleration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_TurnRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TurnRadius (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("fcea066c-4172-42fa-a927-3f1eac143fb0"))
AgVeWaypointsCollection;
    // [ default ] interface IUnknown
    // interface IAgVeWaypointsCollection

struct __declspec(uuid("cd6ab7fc-fed3-48cc-b68d-fc1f9d49633d"))
IAgVeWaypointsCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeWaypointsElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeWaypointsElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeWaypointsElementPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeWaypointsElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAgVeWaypointsElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("f3b85f90-1cd8-4d02-9132-3cf221574592"))
AgVeLaunchLLA;
    // [ default ] interface _IAgVeLaunchLLA
    // interface IAgVeLaunch
    // interface IAgVeLaunchLLA

struct __declspec(uuid("2d35768d-147a-4ce3-a5ad-c7adedbc2d07"))
_IAgVeLaunchLLA : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5ae68050-c01b-42fb-b00c-13c37de88b65"))
IAgVeLaunch : IUnknown
{};

struct __declspec(uuid("318c2803-78c9-4699-9a06-4f06d8073e53"))
IAgVeLaunchLLA : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e30ed6f3-9f2e-4357-a5f9-fda525b76b5a"))
AgVeLaunchLLR;
    // [ default ] interface _IAgVeLaunchLLR
    // interface IAgVeLaunch
    // interface IAgVeLaunchLLR

struct __declspec(uuid("73e939e0-5b94-4cf3-9f48-5b36d2fda214"))
_IAgVeLaunchLLR : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("135f1bd8-f072-4ef5-b7b3-66c1f3a424a3"))
IAgVeLaunchLLR : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("96a520a6-63a3-4604-8b26-299eee5df523"))
AgVeImpactLLA;
    // [ default ] interface _IAgVeImpactLLA
    // interface IAgVeImpact
    // interface IAgVeImpactLLA

struct __declspec(uuid("fa515a27-0142-4195-a206-87f2b740b2b4"))
_IAgVeImpactLLA : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("0ea54715-e6f8-4b6f-9e45-28f1ec85bd58"))
IAgVeImpact : IUnknown
{};

struct __declspec(uuid("613b6a1f-06c9-40eb-8383-05fcd8772b67"))
IAgVeImpactLLA : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("bfd9f23f-70bb-4bca-b6ce-774ae3489e31"))
AgVeImpactLLR;
    // [ default ] interface _IAgVeImpactLLR
    // interface IAgVeImpact
    // interface IAgVeImpactLLR

struct __declspec(uuid("869ae1a0-096c-4b92-a4be-83667ad014a0"))
_IAgVeImpactLLR : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5e810dcd-0e10-4f2c-bf4e-bdf4a57df59a"))
IAgVeImpactLLR : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("cece81f6-02e1-40e9-ab77-4ea261a7413a"))
AgVeLaunchControlFixedApogeeAlt;
    // [ default ] interface _IAgVeLaunchControlFixedApogeeAlt
    // interface IAgVeLaunchControl
    // interface IAgVeLaunchControlFixedApogeeAlt

struct __declspec(uuid("f3af69b1-e630-43dc-b3d3-6ca455082e04"))
_IAgVeLaunchControlFixedApogeeAlt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApogeeAlt,put=PutApogeeAlt))
    double ApogeeAlt;

    //
    // Wrapper methods for error-handling
    //

    double GetApogeeAlt ( );
    void PutApogeeAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApogeeAlt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ApogeeAlt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("2f268b18-4a73-4578-b90d-29611480a36d"))
IAgVeLaunchControl : IUnknown
{};

struct __declspec(uuid("f2dfb52b-fe9e-4c37-9c6b-5f4f2d6be1e8"))
IAgVeLaunchControlFixedApogeeAlt : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApogeeAlt,put=PutApogeeAlt))
    double ApogeeAlt;

    //
    // Wrapper methods for error-handling
    //

    double GetApogeeAlt ( );
    void PutApogeeAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApogeeAlt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ApogeeAlt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("883b55da-f0ba-47d3-9857-d8827b5c2e4c"))
AgVeLaunchControlFixedDeltaV;
    // [ default ] interface _IAgVeLaunchControlFixedDeltaV
    // interface IAgVeLaunchControl
    // interface IAgVeLaunchControlFixedDeltaV

struct __declspec(uuid("c77f120a-a30f-4a9a-bba3-7e87eebc9343"))
_IAgVeLaunchControlFixedDeltaV : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaV,put=PutDeltaV))
    double DeltaV;

    //
    // Wrapper methods for error-handling
    //

    double GetDeltaV ( );
    void PutDeltaV (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaV (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DeltaV (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("86271b63-bbd8-4252-abe0-b8739aae9f37"))
IAgVeLaunchControlFixedDeltaV : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaV,put=PutDeltaV))
    double DeltaV;

    //
    // Wrapper methods for error-handling
    //

    double GetDeltaV ( );
    void PutDeltaV (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaV (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DeltaV (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("6bdf20dd-a39f-4c89-8f3e-d8b0bd2bdcf6"))
AgVeLaunchControlFixedDeltaVMinEcc;
    // [ default ] interface _IAgVeLaunchControlFixedDeltaVMinEcc
    // interface IAgVeLaunchControl
    // interface IAgVeLaunchControlFixedDeltaVMinEcc

struct __declspec(uuid("9ed5c24d-3067-4a4b-9558-cd92c28018f3"))
_IAgVeLaunchControlFixedDeltaVMinEcc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaVMin,put=PutDeltaVMin))
    double DeltaVMin;

    //
    // Wrapper methods for error-handling
    //

    double GetDeltaVMin ( );
    void PutDeltaVMin (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaVMin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DeltaVMin (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("669cdffc-c012-4720-bba7-c255d577e7d1"))
IAgVeLaunchControlFixedDeltaVMinEcc : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaVMin,put=PutDeltaVMin))
    double DeltaVMin;

    //
    // Wrapper methods for error-handling
    //

    double GetDeltaVMin ( );
    void PutDeltaVMin (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaVMin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DeltaVMin (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1b8b91da-1b38-444f-86ac-a222f2efdeaf"))
AgVeLaunchControlFixedTimeOfFlight;
    // [ default ] interface _IAgVeLaunchControlFixedTimeOfFlight
    // interface IAgVeLaunchControl
    // interface IAgVeLaunchControlFixedTimeOfFlight

struct __declspec(uuid("49065d0d-6e1b-4f10-b17e-7a4a0ac8d1c0"))
_IAgVeLaunchControlFixedTimeOfFlight : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeOfFlight,put=PutTimeOfFlight))
    double TimeOfFlight;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeOfFlight ( );
    void PutTimeOfFlight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeOfFlight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeOfFlight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e502245d-6db4-4e45-aee7-285604524081"))
IAgVeLaunchControlFixedTimeOfFlight : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeOfFlight,put=PutTimeOfFlight))
    double TimeOfFlight;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeOfFlight ( );
    void PutTimeOfFlight (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeOfFlight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeOfFlight (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f24d2a1f-0d36-4b56-ad1b-703fcbe97ba8"))
AgVeImpactLocationLaunchAzEl;
    // [ default ] interface _IAgVeImpactLocationLaunchAzEl
    // interface IAgVeImpactLocation
    // interface IAgVeImpactLocationLaunchAzEl

struct __declspec(uuid("6b6171e8-7214-4f2c-a645-1e9bb97367c6"))
_IAgVeImpactLocationLaunchAzEl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaV,put=PutDeltaV))
    double DeltaV;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    double Azimuth;

    //
    // Wrapper methods for error-handling
    //

    double GetDeltaV ( );
    void PutDeltaV (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetAzimuth ( );
    void PutAzimuth (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaV (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DeltaV (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d261264f-dc9e-48b5-b91f-7cf37313f596"))
IAgVeImpactLocation : IUnknown
{};

struct __declspec(uuid("f54a03d9-b39b-4a3c-8529-ce90d7ab50f6"))
IAgVeImpactLocationLaunchAzEl : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaV,put=PutDeltaV))
    double DeltaV;
    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetAzimuth,put=PutAzimuth))
    double Azimuth;

    //
    // Wrapper methods for error-handling
    //

    double GetDeltaV ( );
    void PutDeltaV (
        double pVal );
    double GetElevation ( );
    void PutElevation (
        double pVal );
    double GetAzimuth ( );
    void PutAzimuth (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeltaV (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DeltaV (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Azimuth (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5ee9e547-72d6-4d19-9b24-1f075382e060"))
AgVeImpactLocationPoint;
    // [ default ] interface _IAgVeImpactLocationPoint
    // interface IAgVeImpactLocation
    // interface IAgVeImpactLocationPoint

enum AgEVeImpact
{
    eImpactUnknown = -1,
    eImpactLLA = 0,
    eImpactLLR = 1
};

enum AgEVeLaunchControl
{
    eLaunchControlUnknown = -1,
    eLaunchControlFixedApogeeAlt = 0,
    eLaunchControlFixedDeltaV = 1,
    eLaunchControlFixedDeltaVMinEcc = 2,
    eLaunchControlFixedTimeOfFlight = 3
};

struct __declspec(uuid("e00a2360-7a11-4f91-ab7b-efc202989b85"))
_IAgVeImpactLocationPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetImpactType))
    enum AgEVeImpact ImpactType;
    __declspec(property(get=GetImpactSupportedTypes))
    SAFEARRAY * ImpactSupportedTypes;
    __declspec(property(get=GetImpact))
    IAgVeImpactPtr Impact;
    __declspec(property(get=GetLaunchControlType))
    enum AgEVeLaunchControl LaunchControlType;
    __declspec(property(get=GetLaunchControlSupportedTypes))
    SAFEARRAY * LaunchControlSupportedTypes;
    __declspec(property(get=GetLaunchControl))
    IAgVeLaunchControlPtr LaunchControl;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeImpact GetImpactType ( );
    HRESULT SetImpactType (
        enum AgEVeImpact Impact );
    VARIANT_BOOL IsImpactTypeSupported (
        enum AgEVeImpact Impact );
    SAFEARRAY * GetImpactSupportedTypes ( );
    IAgVeImpactPtr GetImpact ( );
    enum AgEVeLaunchControl GetLaunchControlType ( );
    HRESULT SetLaunchControlType (
        enum AgEVeLaunchControl LaunchControl );
    VARIANT_BOOL IsLaunchControlTypeSupported (
        enum AgEVeLaunchControl LaunchControl );
    SAFEARRAY * GetLaunchControlSupportedTypes ( );
    IAgVeLaunchControlPtr GetLaunchControl ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImpactType (
        /*[out,retval]*/ enum AgEVeImpact * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetImpactType (
        /*[in]*/ enum AgEVeImpact Impact ) = 0;
      virtual HRESULT __stdcall raw_IsImpactTypeSupported (
        /*[in]*/ enum AgEVeImpact Impact,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImpactSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Impact (
        /*[out,retval]*/ struct IAgVeImpact * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LaunchControlType (
        /*[out,retval]*/ enum AgEVeLaunchControl * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLaunchControlType (
        /*[in]*/ enum AgEVeLaunchControl LaunchControl ) = 0;
      virtual HRESULT __stdcall raw_IsLaunchControlTypeSupported (
        /*[in]*/ enum AgEVeLaunchControl LaunchControl,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LaunchControlSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LaunchControl (
        /*[out,retval]*/ struct IAgVeLaunchControl * * ppVal ) = 0;
};

struct __declspec(uuid("ab1b3393-7fa4-4916-a1bc-46dec29d61a9"))
IAgVeImpactLocationPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetImpactType))
    enum AgEVeImpact ImpactType;
    __declspec(property(get=GetImpactSupportedTypes))
    SAFEARRAY * ImpactSupportedTypes;
    __declspec(property(get=GetImpact))
    IAgVeImpactPtr Impact;
    __declspec(property(get=GetLaunchControlType))
    enum AgEVeLaunchControl LaunchControlType;
    __declspec(property(get=GetLaunchControlSupportedTypes))
    SAFEARRAY * LaunchControlSupportedTypes;
    __declspec(property(get=GetLaunchControl))
    IAgVeLaunchControlPtr LaunchControl;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeImpact GetImpactType ( );
    HRESULT SetImpactType (
        enum AgEVeImpact Impact );
    VARIANT_BOOL IsImpactTypeSupported (
        enum AgEVeImpact Impact );
    SAFEARRAY * GetImpactSupportedTypes ( );
    IAgVeImpactPtr GetImpact ( );
    enum AgEVeLaunchControl GetLaunchControlType ( );
    HRESULT SetLaunchControlType (
        enum AgEVeLaunchControl LaunchControl );
    VARIANT_BOOL IsLaunchControlTypeSupported (
        enum AgEVeLaunchControl LaunchControl );
    SAFEARRAY * GetLaunchControlSupportedTypes ( );
    IAgVeLaunchControlPtr GetLaunchControl ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImpactType (
        /*[out,retval]*/ enum AgEVeImpact * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetImpactType (
        /*[in]*/ enum AgEVeImpact Impact ) = 0;
      virtual HRESULT __stdcall raw_IsImpactTypeSupported (
        /*[in]*/ enum AgEVeImpact Impact,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImpactSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Impact (
        /*[out,retval]*/ struct IAgVeImpact * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LaunchControlType (
        /*[out,retval]*/ enum AgEVeLaunchControl * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLaunchControlType (
        /*[in]*/ enum AgEVeLaunchControl LaunchControl ) = 0;
      virtual HRESULT __stdcall raw_IsLaunchControlTypeSupported (
        /*[in]*/ enum AgEVeLaunchControl LaunchControl,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LaunchControlSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LaunchControl (
        /*[out,retval]*/ struct IAgVeLaunchControl * * ppVal ) = 0;
};

struct __declspec(uuid("e1a90d8d-81cd-4a43-9529-5f1f8dff87cf"))
AgVePropagatorBallistic;
    // [ default ] interface _IAgVePropagatorBallistic
    // interface IAgVePropagatorBallistic
    // interface IAgVePropagator

enum AgEVeLaunch
{
    eLaunchUnknown = -1,
    eLaunchLLA = 0,
    eLaunchLLR = 1
};

enum AgEVeImpactLocation
{
    eImpactLocationUnknown = -1,
    eImpactLocationLaunchAzEl = 0,
    eImpactLocationPoint = 1
};

struct __declspec(uuid("11bb88d5-35b8-4aba-9585-61bae814cd48"))
_IAgVePropagatorBallistic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetLaunchType))
    enum AgEVeLaunch LaunchType;
    __declspec(property(get=GetLaunchSupportedTypes))
    SAFEARRAY * LaunchSupportedTypes;
    __declspec(property(get=GetLaunch))
    IAgVeLaunchPtr Launch;
    __declspec(property(get=GetImpactLocationType))
    enum AgEVeImpactLocation ImpactLocationType;
    __declspec(property(get=GetImpactLocationSupportedTypes))
    SAFEARRAY * ImpactLocationSupportedTypes;
    __declspec(property(get=GetImpactLocation))
    IAgVeImpactLocationPtr ImpactLocation;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    enum AgEVeLaunch GetLaunchType ( );
    HRESULT SetLaunchType (
        enum AgEVeLaunch Launch );
    VARIANT_BOOL IsLaunchTypeSupported (
        enum AgEVeLaunch Launch );
    SAFEARRAY * GetLaunchSupportedTypes ( );
    IAgVeLaunchPtr GetLaunch ( );
    enum AgEVeImpactLocation GetImpactLocationType ( );
    HRESULT SetImpactLocationType (
        enum AgEVeImpactLocation ImpactLocation );
    VARIANT_BOOL IsImpactLocationTypeSupported (
        enum AgEVeImpactLocation ImpactLocation );
    SAFEARRAY * GetImpactLocationSupportedTypes ( );
    IAgVeImpactLocationPtr GetImpactLocation ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LaunchType (
        /*[out,retval]*/ enum AgEVeLaunch * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLaunchType (
        /*[in]*/ enum AgEVeLaunch Launch ) = 0;
      virtual HRESULT __stdcall raw_IsLaunchTypeSupported (
        /*[in]*/ enum AgEVeLaunch Launch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LaunchSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Launch (
        /*[out,retval]*/ struct IAgVeLaunch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ImpactLocationType (
        /*[out,retval]*/ enum AgEVeImpactLocation * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetImpactLocationType (
        /*[in]*/ enum AgEVeImpactLocation ImpactLocation ) = 0;
      virtual HRESULT __stdcall raw_IsImpactLocationTypeSupported (
        /*[in]*/ enum AgEVeImpactLocation ImpactLocation,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImpactLocationSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ImpactLocation (
        /*[out,retval]*/ struct IAgVeImpactLocation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("ae269705-82ef-49e1-9f8b-1117b03b4000"))
IAgVePropagatorBallistic : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetLaunchType))
    enum AgEVeLaunch LaunchType;
    __declspec(property(get=GetLaunchSupportedTypes))
    SAFEARRAY * LaunchSupportedTypes;
    __declspec(property(get=GetLaunch))
    IAgVeLaunchPtr Launch;
    __declspec(property(get=GetImpactLocationType))
    enum AgEVeImpactLocation ImpactLocationType;
    __declspec(property(get=GetImpactLocationSupportedTypes))
    SAFEARRAY * ImpactLocationSupportedTypes;
    __declspec(property(get=GetImpactLocation))
    IAgVeImpactLocationPtr ImpactLocation;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    enum AgEVeLaunch GetLaunchType ( );
    HRESULT SetLaunchType (
        enum AgEVeLaunch Launch );
    VARIANT_BOOL IsLaunchTypeSupported (
        enum AgEVeLaunch Launch );
    SAFEARRAY * GetLaunchSupportedTypes ( );
    IAgVeLaunchPtr GetLaunch ( );
    enum AgEVeImpactLocation GetImpactLocationType ( );
    HRESULT SetImpactLocationType (
        enum AgEVeImpactLocation ImpactLocation );
    VARIANT_BOOL IsImpactLocationTypeSupported (
        enum AgEVeImpactLocation ImpactLocation );
    SAFEARRAY * GetImpactLocationSupportedTypes ( );
    IAgVeImpactLocationPtr GetImpactLocation ( );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LaunchType (
        /*[out,retval]*/ enum AgEVeLaunch * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLaunchType (
        /*[in]*/ enum AgEVeLaunch Launch ) = 0;
      virtual HRESULT __stdcall raw_IsLaunchTypeSupported (
        /*[in]*/ enum AgEVeLaunch Launch,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LaunchSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Launch (
        /*[out,retval]*/ struct IAgVeLaunch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ImpactLocationType (
        /*[out,retval]*/ enum AgEVeImpactLocation * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetImpactLocationType (
        /*[in]*/ enum AgEVeImpactLocation ImpactLocation ) = 0;
      virtual HRESULT __stdcall raw_IsImpactLocationTypeSupported (
        /*[in]*/ enum AgEVeImpactLocation ImpactLocation,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ImpactLocationSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ImpactLocation (
        /*[out,retval]*/ struct IAgVeImpactLocation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("e83fefab-2bc1-4ca6-8519-89a86aa1d465"))
AgVePropagatorGreatArc;
    // [ default ] interface _IAgVePropagatorGreatArc
    // interface IAgVePropagatorGreatArc
    // interface IAgVePropagator

enum AgEVeWayPtCompMethod
{
    eDetermineTimeAccFromVel = 0,
    eDetermineTimeFromVelAcc = 1,
    eDetermineVelFromTime = 2
};

enum AgEVeAltitudeRef
{
    eWayPtAltRefUnknown = -1,
    eWayPtAltRefMSL = 0,
    eWayPtAltRefTerrain = 1,
    eWayPtAltRefWGS84 = 2,
    eWayPtAltRefEllipsoid = 3
};

struct __declspec(uuid("d5527e91-ddb6-4775-86f1-947ed80fc572"))
IAgVeWayPtAltitudeRef : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeAltitudeRef Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeAltitudeRef GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeAltitudeRef * pVal ) = 0;
};

struct __declspec(uuid("78ea1165-8a12-4e8f-8a9f-8d9670ebddc3"))
_IAgVePropagatorGreatArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEVeWayPtCompMethod Method;
    __declspec(property(get=GetAltitudeRefType))
    enum AgEVeAltitudeRef AltitudeRefType;
    __declspec(property(get=GetAltitudeRefSupportedTypes))
    SAFEARRAY * AltitudeRefSupportedTypes;
    __declspec(property(get=GetAltitudeRef))
    IAgVeWayPtAltitudeRefPtr AltitudeRef;
    __declspec(property(get=GetArcGranularity,put=PutArcGranularity))
    double ArcGranularity;
    __declspec(property(get=GetWaypoints))
    IAgVeWaypointsCollectionPtr Waypoints;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    enum AgEVeWayPtCompMethod GetMethod ( );
    void PutMethod (
        enum AgEVeWayPtCompMethod pVal );
    enum AgEVeAltitudeRef GetAltitudeRefType ( );
    HRESULT SetAltitudeRefType (
        enum AgEVeAltitudeRef AltitudeRef );
    VARIANT_BOOL IsAltitudeRefTypeSupported (
        enum AgEVeAltitudeRef AltitudeRef );
    SAFEARRAY * GetAltitudeRefSupportedTypes ( );
    IAgVeWayPtAltitudeRefPtr GetAltitudeRef ( );
    double GetArcGranularity ( );
    void PutArcGranularity (
        double pVal );
    IAgVeWaypointsCollectionPtr GetWaypoints ( );
    HRESULT ImportWaypointsFromFile (
        _bstr_t Filename );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEVeWayPtCompMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEVeWayPtCompMethod pVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeRefType (
        /*[out,retval]*/ enum AgEVeAltitudeRef * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAltitudeRefType (
        /*[in]*/ enum AgEVeAltitudeRef AltitudeRef ) = 0;
      virtual HRESULT __stdcall raw_IsAltitudeRefTypeSupported (
        /*[in]*/ enum AgEVeAltitudeRef AltitudeRef,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeRefSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeRef (
        /*[out,retval]*/ struct IAgVeWayPtAltitudeRef * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ArcGranularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArcGranularity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Waypoints (
        /*[out,retval]*/ struct IAgVeWaypointsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ImportWaypointsFromFile (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("681365a0-1a18-443e-93a0-5d26e5ac2177"))
IAgVePropagatorGreatArc : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetMethod,put=PutMethod))
    enum AgEVeWayPtCompMethod Method;
    __declspec(property(get=GetAltitudeRefType))
    enum AgEVeAltitudeRef AltitudeRefType;
    __declspec(property(get=GetAltitudeRefSupportedTypes))
    SAFEARRAY * AltitudeRefSupportedTypes;
    __declspec(property(get=GetAltitudeRef))
    IAgVeWayPtAltitudeRefPtr AltitudeRef;
    __declspec(property(get=GetArcGranularity,put=PutArcGranularity))
    double ArcGranularity;
    __declspec(property(get=GetWaypoints))
    IAgVeWaypointsCollectionPtr Waypoints;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    enum AgEVeWayPtCompMethod GetMethod ( );
    void PutMethod (
        enum AgEVeWayPtCompMethod pVal );
    enum AgEVeAltitudeRef GetAltitudeRefType ( );
    HRESULT SetAltitudeRefType (
        enum AgEVeAltitudeRef AltitudeRef );
    VARIANT_BOOL IsAltitudeRefTypeSupported (
        enum AgEVeAltitudeRef AltitudeRef );
    SAFEARRAY * GetAltitudeRefSupportedTypes ( );
    IAgVeWayPtAltitudeRefPtr GetAltitudeRef ( );
    double GetArcGranularity ( );
    void PutArcGranularity (
        double pVal );
    IAgVeWaypointsCollectionPtr GetWaypoints ( );
    HRESULT ImportWaypointsFromFile (
        _bstr_t Filename );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEVeWayPtCompMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_Method (
        /*[in]*/ enum AgEVeWayPtCompMethod pVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeRefType (
        /*[out,retval]*/ enum AgEVeAltitudeRef * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAltitudeRefType (
        /*[in]*/ enum AgEVeAltitudeRef AltitudeRef ) = 0;
      virtual HRESULT __stdcall raw_IsAltitudeRefTypeSupported (
        /*[in]*/ enum AgEVeAltitudeRef AltitudeRef,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeRefSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeRef (
        /*[out,retval]*/ struct IAgVeWayPtAltitudeRef * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ArcGranularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ArcGranularity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Waypoints (
        /*[out,retval]*/ struct IAgVeWaypointsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ImportWaypointsFromFile (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("f582bc24-3837-47fb-b006-16267f8adcc0"))
AgVeSGP4SegmentCollection;
    // [ default ] interface IUnknown
    // interface IAgVeSGP4SegmentCollection

struct __declspec(uuid("b65319b9-d1ca-47c4-a503-2af6a5374792"))
AgVeSGP4Segment;
    // [ default ] interface _IAgVeSGP4Segment
    // interface IAgVeSGP4Segment

struct __declspec(uuid("9a665111-83a4-492f-8a70-62696d0fd38e"))
_IAgVeSGP4Segment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSSCNum,put=PutSSCNum))
    _bstr_t SSCNum;
    __declspec(property(get=GetRevNumber,put=PutRevNumber))
    long RevNumber;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    double Epoch;
    __declspec(property(get=GetInclination,put=PutInclination))
    _variant_t Inclination;
    __declspec(property(get=GetArgOfPerigee,put=PutArgOfPerigee))
    _variant_t ArgOfPerigee;
    __declspec(property(get=GetRAAN,put=PutRAAN))
    _variant_t RAAN;
    __declspec(property(get=GetEccentricity,put=PutEccentricity))
    double Eccentricity;
    __declspec(property(get=GetMeanMotion,put=PutMeanMotion))
    _variant_t MeanMotion;
    __declspec(property(get=GetMeanAnomaly,put=PutMeanAnomaly))
    _variant_t MeanAnomaly;
    __declspec(property(get=GetMeanMotionDot,put=PutMeanMotionDot))
    double MeanMotionDot;
    __declspec(property(get=GetMotionDotDot,put=PutMotionDotDot))
    double MotionDotDot;
    __declspec(property(get=GetBStar,put=PutBStar))
    double BStar;
    __declspec(property(get=GetClassification,put=PutClassification))
    _bstr_t Classification;
    __declspec(property(get=GetIntlDesignator,put=PutIntlDesignator))
    _bstr_t IntlDesignator;
    __declspec(property(get=GetSwitchingMethod,put=PutSwitchingMethod))
    enum AgEVeSGP4SwitchMethod SwitchingMethod;
    __declspec(property(get=GetRange))
    double Range;
    __declspec(property(get=GetSwitchTime,put=PutSwitchTime))
    _variant_t SwitchTime;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSSCNum ( );
    void PutSSCNum (
        _bstr_t pVal );
    long GetRevNumber ( );
    void PutRevNumber (
        long pVal );
    double GetEpoch ( );
    void PutEpoch (
        double pVal );
    _variant_t GetInclination ( );
    void PutInclination (
        const _variant_t & pVal );
    _variant_t GetArgOfPerigee ( );
    void PutArgOfPerigee (
        const _variant_t & pVal );
    _variant_t GetRAAN ( );
    void PutRAAN (
        const _variant_t & pVal );
    double GetEccentricity ( );
    void PutEccentricity (
        double pVal );
    _variant_t GetMeanMotion ( );
    void PutMeanMotion (
        const _variant_t & pVal );
    _variant_t GetMeanAnomaly ( );
    void PutMeanAnomaly (
        const _variant_t & pVal );
    double GetMeanMotionDot ( );
    void PutMeanMotionDot (
        double pVal );
    double GetMotionDotDot ( );
    void PutMotionDotDot (
        double pVal );
    double GetBStar ( );
    void PutBStar (
        double pVal );
    _bstr_t GetClassification ( );
    void PutClassification (
        _bstr_t pVal );
    _bstr_t GetIntlDesignator ( );
    void PutIntlDesignator (
        _bstr_t pVal );
    enum AgEVeSGP4SwitchMethod GetSwitchingMethod ( );
    void PutSwitchingMethod (
        enum AgEVeSGP4SwitchMethod pVal );
    double GetRange ( );
    _variant_t GetSwitchTime ( );
    void PutSwitchTime (
        const _variant_t & pVal );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SSCNum (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SSCNum (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RevNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RevNumber (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Inclination (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Inclination (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ArgOfPerigee (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_ArgOfPerigee (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_RAAN (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_RAAN (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Eccentricity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Eccentricity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MeanMotion (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanMotion (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MeanAnomaly (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanAnomaly (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MeanMotionDot (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MeanMotionDot (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MotionDotDot (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MotionDotDot (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BStar (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BStar (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Classification (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Classification (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IntlDesignator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_IntlDesignator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SwitchingMethod (
        /*[out,retval]*/ enum AgEVeSGP4SwitchMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_SwitchingMethod (
        /*[in]*/ enum AgEVeSGP4SwitchMethod pVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SwitchTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SwitchTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("d15a97d4-d2a4-450d-9233-4185a2a894f2"))
AgVeThirdBodyGravity;
    // [ default ] interface _IAgVeThirdBodyGravity
    // interface IAgVeThirdBodyGravity

struct __declspec(uuid("ffcb104f-9811-43a9-96bb-36d37849fc55"))
_IAgVeThirdBodyGravity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseSolarGravity,put=PutUseSolarGravity))
    VARIANT_BOOL UseSolarGravity;
    __declspec(property(get=GetUseLunarGravity,put=PutUseLunarGravity))
    VARIANT_BOOL UseLunarGravity;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseSolarGravity ( );
    void PutUseSolarGravity (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseLunarGravity ( );
    void PutUseLunarGravity (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseSolarGravity (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSolarGravity (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseLunarGravity (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLunarGravity (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("063184d3-e67b-46dd-91fa-e7fd429f426f"))
AgVeConsiderAnalysisCollectionElement;
    // [ default ] interface _IAgVeConsiderAnalysisCollectionElement
    // interface IAgVeConsiderAnalysisCollectionElement

struct __declspec(uuid("b5635bf2-48e1-46c1-8a31-889a084e4540"))
_IAgVeConsiderAnalysisCollectionElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeConsiderAnalysisType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=GetZ,put=PutZ))
    double Z;
    __declspec(property(get=GetVx,put=PutVx))
    double Vx;
    __declspec(property(get=GetVy,put=PutVy))
    double Vy;
    __declspec(property(get=GetVz,put=PutVz))
    double Vz;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeConsiderAnalysisType GetType ( );
    _bstr_t GetName ( );
    double GetValue ( );
    void PutValue (
        double pVal );
    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double GetZ ( );
    void PutZ (
        double pVal );
    double GetVx ( );
    void PutVx (
        double pVal );
    double GetVy ( );
    void PutVy (
        double pVal );
    double GetVz ( );
    void PutVz (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeConsiderAnalysisType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vx (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vx (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Vz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Vz (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f6a365d2-06ed-4bd4-877c-b718a759b9d8"))
AgVeConsiderAnalysisCollection;
    // [ default ] interface IUnknown
    // interface IAgVeConsiderAnalysisCollection

struct __declspec(uuid("ffa3868e-c563-46bb-bf91-dc20766223c6"))
AgVeSPICESegment;
    // [ default ] interface _IAgVeSPICESegment
    // interface IAgVeSPICESegment

struct __declspec(uuid("c8830507-afdb-4137-9f2a-3b9c823ca7a2"))
_IAgVeSPICESegment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSegmentName))
    _bstr_t SegmentName;
    __declspec(property(get=GetSegmentType))
    _bstr_t SegmentType;
    __declspec(property(get=GetCoordAxes))
    _bstr_t CoordAxes;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSegmentName ( );
    _bstr_t GetSegmentType ( );
    _bstr_t GetCoordAxes ( );
    _bstr_t GetCentralBody ( );
    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SegmentName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CoordAxes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

struct __declspec(uuid("8ab5e151-f6fc-432e-8ec6-a963d077bba2"))
AgVeWayPtAltitudeRefTerrain;
    // [ default ] interface _IAgVeWayPtAltitudeRefTerrain
    // interface IAgVeWayPtAltitudeRef
    // interface IAgVeWayPtAltitudeRefTerrain

enum AgEVeWayPtInterpMethod
{
    eWayPtEllipsoidHeight = 0,
    eWayPtTerrainHeight = 1
};

struct __declspec(uuid("3d7cdba4-8e39-4702-8f52-e0e4ec904230"))
_IAgVeWayPtAltitudeRefTerrain : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeAltitudeRef Type;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;
    __declspec(property(get=GetInterpMethod,put=PutInterpMethod))
    enum AgEVeWayPtInterpMethod InterpMethod;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeAltitudeRef GetType ( );
    double GetGranularity ( );
    void PutGranularity (
        double pVal );
    enum AgEVeWayPtInterpMethod GetInterpMethod ( );
    void PutInterpMethod (
        enum AgEVeWayPtInterpMethod pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeAltitudeRef * pVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InterpMethod (
        /*[out,retval]*/ enum AgEVeWayPtInterpMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_InterpMethod (
        /*[in]*/ enum AgEVeWayPtInterpMethod pVal ) = 0;
};

struct __declspec(uuid("b440e501-7507-4a9b-8156-f9800af68e2b"))
IAgVeWayPtAltitudeRefTerrain : IAgVeWayPtAltitudeRef
{
    //
    // Property data
    //

    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;
    __declspec(property(get=GetInterpMethod,put=PutInterpMethod))
    enum AgEVeWayPtInterpMethod InterpMethod;

    //
    // Wrapper methods for error-handling
    //

    double GetGranularity ( );
    void PutGranularity (
        double pVal );
    enum AgEVeWayPtInterpMethod GetInterpMethod ( );
    void PutInterpMethod (
        enum AgEVeWayPtInterpMethod pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InterpMethod (
        /*[out,retval]*/ enum AgEVeWayPtInterpMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_InterpMethod (
        /*[in]*/ enum AgEVeWayPtInterpMethod pVal ) = 0;
};

struct __declspec(uuid("b9c36822-752b-4459-9e0c-001a4f20d897"))
AgVeWayPtAltitudeRef;
    // [ default ] interface _IAgVeWayPtAltitudeRef
    // interface IAgVeWayPtAltitudeRef

struct __declspec(uuid("b555f24b-8bb5-496b-aca7-cc5f2506d7a2"))
_IAgVeWayPtAltitudeRef : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeAltitudeRef Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeAltitudeRef GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeAltitudeRef * pVal ) = 0;
};

struct __declspec(uuid("8e4cbd04-c336-4223-8308-2ad7e8c8301a"))
AgVeSGP4LoadFile;
    // [ default ] interface _IAgVeSGP4LoadFile
    // interface IAgVeSGP4LoadData
    // interface IAgVeSGP4LoadFile

struct __declspec(uuid("8c29de1f-86f3-4ef5-9283-6431f518f45a"))
_IAgVeSGP4LoadFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetSSCNumsFromFile ( );
    SAFEARRAY * GetSegsFromFile (
        _bstr_t SSCNum );
    HRESULT AddSegsFromFile (
        SAFEARRAY * * Segments );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSSCNumsFromFile (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSegsFromFile (
        /*[in]*/ BSTR SSCNum,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromFile (
        /*[in]*/ SAFEARRAY * * Segments ) = 0;
};

struct __declspec(uuid("e7149664-c193-4dce-bbc6-4ad01fc29539"))
IAgVeSGP4LoadFile : IAgVeSGP4LoadData
{
    //
    // Property data
    //

    __declspec(property(get=GetFile,put=PutFile))
    _bstr_t File;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFile ( );
    void PutFile (
        _bstr_t pRetVal );
    SAFEARRAY * GetSSCNumsFromFile ( );
    SAFEARRAY * GetSegsFromFile (
        _bstr_t SSCNum );
    HRESULT AddSegsFromFile (
        SAFEARRAY * * Segments );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_File (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_File (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSSCNumsFromFile (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSegsFromFile (
        /*[in]*/ BSTR SSCNum,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromFile (
        /*[in]*/ SAFEARRAY * * Segments ) = 0;
};

struct __declspec(uuid("c79ec308-03c0-4c18-9bcd-3374c675891d"))
AgVeSGP4OnlineLoad;
    // [ default ] interface _IAgVeSGP4OnlineLoad
    // interface IAgVeSGP4LoadData
    // interface IAgVeSGP4OnlineLoad

struct __declspec(uuid("6bd2a7ab-9f0c-40f7-b364-6e8f4ac2d29c"))
_IAgVeSGP4OnlineLoad : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLoadNewest,put=PutLoadNewest))
    VARIANT_BOOL LoadNewest;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLoadNewest ( );
    void PutLoadNewest (
        VARIANT_BOOL pVal );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    SAFEARRAY * GetSegsFromOnline (
        _bstr_t SSCNum );
    HRESULT AddSegsFromOnline (
        SAFEARRAY * * Segments );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LoadNewest (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LoadNewest (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSegsFromOnline (
        /*[in]*/ BSTR SSCNum,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromOnline (
        /*[in]*/ SAFEARRAY * * Segments ) = 0;
};

struct __declspec(uuid("3e44c9a4-da99-45af-80e8-8d25997aec19"))
IAgVeSGP4OnlineLoad : IAgVeSGP4LoadData
{
    //
    // Property data
    //

    __declspec(property(get=GetLoadNewest,put=PutLoadNewest))
    VARIANT_BOOL LoadNewest;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLoadNewest ( );
    void PutLoadNewest (
        VARIANT_BOOL pVal );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    SAFEARRAY * GetSegsFromOnline (
        _bstr_t SSCNum );
    HRESULT AddSegsFromOnline (
        SAFEARRAY * * Segments );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LoadNewest (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LoadNewest (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSegsFromOnline (
        /*[in]*/ BSTR SSCNum,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromOnline (
        /*[in]*/ SAFEARRAY * * Segments ) = 0;
};

struct __declspec(uuid("34aef794-f034-45a5-9a56-dfbe7dbc1ac2"))
AgVeSGP4OnlineAutoLoad;
    // [ default ] interface _IAgVeSGP4OnlineAutoLoad
    // interface IAgVeSGP4LoadData
    // interface IAgVeSGP4OnlineAutoLoad

struct __declspec(uuid("d5e2f1d2-0116-4055-aa19-79194faaf516"))
_IAgVeSGP4OnlineAutoLoad : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddLatestSegFromOnline (
        _bstr_t SSCNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddLatestSegFromOnline (
        /*[in]*/ BSTR SSCNumber ) = 0;
};

struct __declspec(uuid("883794a8-16b7-4734-bdc8-f563962d0e2d"))
IAgVeSGP4OnlineAutoLoad : IAgVeSGP4LoadData
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddLatestSegFromOnline (
        _bstr_t SSCNumber );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddLatestSegFromOnline (
        /*[in]*/ BSTR SSCNumber ) = 0;
};

struct __declspec(uuid("6e0b965e-0509-4352-ba6b-e0ccddd55cfb"))
AgVeSGP4SpaceTrackLoad;
    // [ default ] interface _IAgVeSGP4SpaceTrackLoad
    // interface IAgVeSGP4LoadData
    // interface IAgVeSGP4SpaceTrackLoad

struct __declspec(uuid("a5c8adf1-df91-47f7-99ca-06c67d157353"))
_IAgVeSGP4SpaceTrackLoad : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetUsername (
        _bstr_t Username );
    HRESULT SetPassword (
        _bstr_t Password );
    SAFEARRAY * GetSSCNumsFromSpaceTrack ( );
    SAFEARRAY * GetSegsFromSpaceTrack (
        _bstr_t SSCNum );
    HRESULT AddSegsFromSpaceTrack (
        SAFEARRAY * * Segments );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetUsername (
        /*[in]*/ BSTR Username ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_GetSSCNumsFromSpaceTrack (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSegsFromSpaceTrack (
        /*[in]*/ BSTR SSCNum,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromSpaceTrack (
        /*[in]*/ SAFEARRAY * * Segments ) = 0;
};

struct __declspec(uuid("2bcc1cd9-e1a0-4350-b059-ea1e6c9cd739"))
IAgVeSGP4SpaceTrackLoad : IAgVeSGP4LoadData
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetUsername (
        _bstr_t Username );
    HRESULT SetPassword (
        _bstr_t Password );
    SAFEARRAY * GetSSCNumsFromSpaceTrack ( );
    SAFEARRAY * GetSegsFromSpaceTrack (
        _bstr_t SSCNum );
    HRESULT AddSegsFromSpaceTrack (
        SAFEARRAY * * Segments );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetUsername (
        /*[in]*/ BSTR Username ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_GetSSCNumsFromSpaceTrack (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSegsFromSpaceTrack (
        /*[in]*/ BSTR SSCNum,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromSpaceTrack (
        /*[in]*/ SAFEARRAY * * Segments ) = 0;
};

struct __declspec(uuid("96604fe3-77a1-4f9d-bf63-4028b5e34a00"))
AgVeGroundEllipsesCollection;
    // [ default ] interface IUnknown
    // interface IAgVeGroundEllipsesCollection

struct __declspec(uuid("df47e8ea-7a3e-4257-9c45-b4e12b8ad57a"))
IAgVeEllipseDataElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    _variant_t Time;
    __declspec(property(get=GetCustomPosition,put=PutCustomPosition))
    VARIANT_BOOL CustomPosition;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    _variant_t Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    _variant_t Longitude;
    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;
    __declspec(property(get=GetSemiMinorAxis,put=PutSemiMinorAxis))
    double SemiMinorAxis;
    __declspec(property(get=GetBearing,put=PutBearing))
    _variant_t Bearing;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    void PutTime (
        const _variant_t & pVal );
    VARIANT_BOOL GetCustomPosition ( );
    void PutCustomPosition (
        VARIANT_BOOL pVal );
    _variant_t GetLatitude ( );
    void PutLatitude (
        const _variant_t & pVal );
    _variant_t GetLongitude ( );
    void PutLongitude (
        const _variant_t & pVal );
    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pVal );
    double GetSemiMinorAxis ( );
    void PutSemiMinorAxis (
        double pVal );
    _variant_t GetBearing ( );
    void PutBearing (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_CustomPosition (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomPosition (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMinorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMinorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("62c2e59d-2796-4207-be86-ac18b502861f"))
IAgVeEllipseDataCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeEllipseDataElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeEllipseDataElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeEllipseDataElementPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeEllipseDataElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAgVeEllipseDataElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("a35b070f-9669-48be-a89d-667fd0e24a3b"))
IAgVeGroundEllipseElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEllipseName,put=PutEllipseName))
    _bstr_t EllipseName;
    __declspec(property(get=GetEllipseData))
    IAgVeEllipseDataCollectionPtr EllipseData;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEllipseName ( );
    void PutEllipseName (
        _bstr_t pVal );
    IAgVeEllipseDataCollectionPtr GetEllipseData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EllipseName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EllipseName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EllipseData (
        /*[out,retval]*/ struct IAgVeEllipseDataCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("f2609256-9bfa-4734-8815-095aba4f68d9"))
IAgVeGroundEllipsesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeGroundEllipseElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeGroundEllipseElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeGroundEllipseElementPtr Add (
        _bstr_t Name );
    HRESULT RemoveEllipseSet (
        _bstr_t EllipseSetName );
    IAgVeGroundEllipseElementPtr GetEllipseSet (
        _bstr_t EllipseSetName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeGroundEllipseElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAgVeGroundEllipseElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveEllipseSet (
        /*[in]*/ BSTR EllipseSetName ) = 0;
      virtual HRESULT __stdcall raw_GetEllipseSet (
        /*[in]*/ BSTR EllipseSetName,
        /*[out,retval]*/ struct IAgVeGroundEllipseElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("9f84b724-d809-46f4-9b19-3fabddef637f"))
AgSatellite;
    // [ default ] interface _IAgSatellite
    // interface IAgSatellite
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgProvideSpatialInfo

enum AgEVeAttitude
{
    eAttitudeUnknown = -1,
    eAttitudeRealTime = 1,
    eAttitudeStandard = 2
};

struct __declspec(uuid("1b1a846d-a093-40f0-a9b6-7730b1e621ed"))
IAgVeAttitude : IUnknown
{};

struct __declspec(uuid("b0af54fa-04fa-4d9a-b4a0-71bb2b7f3a60"))
IAgVeInertia : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIxx,put=PutIxx))
    double Ixx;
    __declspec(property(get=GetIyy,put=PutIyy))
    double Iyy;
    __declspec(property(get=GetIzz,put=PutIzz))
    double Izz;
    __declspec(property(get=GetIxy,put=PutIxy))
    double Ixy;
    __declspec(property(get=GetIxz,put=PutIxz))
    double Ixz;
    __declspec(property(get=GetIyz,put=PutIyz))
    double Iyz;

    //
    // Wrapper methods for error-handling
    //

    double GetIxx ( );
    void PutIxx (
        double pVal );
    double GetIyy ( );
    void PutIyy (
        double pVal );
    double GetIzz ( );
    void PutIzz (
        double pVal );
    double GetIxy ( );
    void PutIxy (
        double pVal );
    double GetIxz ( );
    void PutIxz (
        double pVal );
    double GetIyz ( );
    void PutIyz (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Ixx (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ixx (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Iyy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Iyy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Izz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Izz (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Ixy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ixy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Ixz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ixz (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Iyz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Iyz (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("95b323ba-d55c-4459-a0dd-552ed6a77841"))
IAgVeMassProperties : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMass,put=PutMass))
    double Mass;
    __declspec(property(get=GetInertia))
    IAgVeInertiaPtr Inertia;

    //
    // Wrapper methods for error-handling
    //

    double GetMass ( );
    void PutMass (
        double pVal );
    IAgVeInertiaPtr GetInertia ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Mass (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Mass (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Inertia (
        /*[out,retval]*/ struct IAgVeInertia * * ppVal ) = 0;
};

enum AgEVeBreakAngleType
{
    eBreakAngleTypeUnknown = -1,
    eBreakByLatitude = 0,
    eBreakByLongitude = 1
};

struct __declspec(uuid("f539c10d-aef3-431a-bf33-aeb01ec4cb26"))
IAgVeBreakAngle : IUnknown
{};

enum AgEVeDirection
{
    eAscending = 0,
    eDescending = 1
};

struct __declspec(uuid("4730eee8-367e-4e60-b25b-671742f48db2"))
IAgVeDefinition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBreakAngleType))
    enum AgEVeBreakAngleType BreakAngleType;
    __declspec(property(get=GetBreakAngle))
    IAgVeBreakAnglePtr BreakAngle;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgEVeDirection Direction;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeBreakAngleType GetBreakAngleType ( );
    HRESULT SetBreakAngleType (
        enum AgEVeBreakAngleType BreakAngleType );
    IAgVeBreakAnglePtr GetBreakAngle ( );
    enum AgEVeDirection GetDirection ( );
    void PutDirection (
        enum AgEVeDirection pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BreakAngleType (
        /*[out,retval]*/ enum AgEVeBreakAngleType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetBreakAngleType (
        /*[in]*/ enum AgEVeBreakAngleType BreakAngleType ) = 0;
      virtual HRESULT __stdcall get_BreakAngle (
        /*[out,retval]*/ struct IAgVeBreakAngle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgEVeDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgEVeDirection pVal ) = 0;
};

enum AgEVePartialPassMeasurement
{
    eAngle = 0,
    eMeanArgOfLat = 1,
    eTime = 2
};

enum AgEVeCoordinateSystem
{
    eCentralBodyFixed = 0,
    eCoordinateSystemIntertial = 1,
    eVeCoordinateSystemCentralBodyFixed = 0,
    eVeCoordinateSystemInertial = 1,
    eVeCoordinateSystemTrueOfDate = 2,
    eVeCoordinateSystemTrueOfEpoch = 3
};

struct __declspec(uuid("3081f59f-9f6d-4ae9-9109-4d3ea58af284"))
IAgVeRepeatGroundTrackNumbering : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstPathNum,put=PutFirstPathNum))
    long FirstPathNum;
    __declspec(property(get=GetRevsToRepeat,put=PutRevsToRepeat))
    long RevsToRepeat;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstPathNum ( );
    void PutFirstPathNum (
        long pVal );
    long GetRevsToRepeat ( );
    void PutRevsToRepeat (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstPathNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPathNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RevsToRepeat (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RevsToRepeat (
        /*[in]*/ long pVal ) = 0;
};

enum AgEVePassNumbering
{
    ePassNumberingUnknown = -1,
    ePassNumberingDateOfFirstPass = 0,
    ePassNumberingFirstPassNum = 1,
    ePassNumberingMaintainPassNum = 2,
    ePassNumberingUsePropagatorPassData = 3
};

struct __declspec(uuid("d6bf2c61-2ab2-413f-8d08-13475e68de28"))
IAgVePassNumbering : IUnknown
{};

struct __declspec(uuid("c73a748b-9774-456e-a7bb-1c80613ea594"))
IAgVePassBreak : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDefinition))
    IAgVeDefinitionPtr Definition;
    __declspec(property(get=GetPartialPassMeasurement,put=PutPartialPassMeasurement))
    enum AgEVePartialPassMeasurement PartialPassMeasurement;
    __declspec(property(get=GetCoordinateSystem,put=PutCoordinateSystem))
    enum AgEVeCoordinateSystem CoordinateSystem;
    __declspec(property(get=GetRepeatGroundTrackNumbering))
    IAgVeRepeatGroundTrackNumberingPtr RepeatGroundTrackNumbering;
    __declspec(property(get=GetPassNumberingType))
    enum AgEVePassNumbering PassNumberingType;
    __declspec(property(get=GetPassNumbering))
    IAgVePassNumberingPtr PassNumbering;
    __declspec(property(get=GetSupportedCoordinateSystems))
    SAFEARRAY * SupportedCoordinateSystems;

    //
    // Wrapper methods for error-handling
    //

    IAgVeDefinitionPtr GetDefinition ( );
    enum AgEVePartialPassMeasurement GetPartialPassMeasurement ( );
    void PutPartialPassMeasurement (
        enum AgEVePartialPassMeasurement pVal );
    enum AgEVeCoordinateSystem GetCoordinateSystem ( );
    void PutCoordinateSystem (
        enum AgEVeCoordinateSystem pVal );
    IAgVeRepeatGroundTrackNumberingPtr GetRepeatGroundTrackNumbering ( );
    enum AgEVePassNumbering GetPassNumberingType ( );
    HRESULT SetPassNumberingType (
        enum AgEVePassNumbering PassNumbering );
    IAgVePassNumberingPtr GetPassNumbering ( );
    SAFEARRAY * GetSupportedCoordinateSystems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Definition (
        /*[out,retval]*/ struct IAgVeDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PartialPassMeasurement (
        /*[out,retval]*/ enum AgEVePartialPassMeasurement * pVal ) = 0;
      virtual HRESULT __stdcall put_PartialPassMeasurement (
        /*[in]*/ enum AgEVePartialPassMeasurement pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ enum AgEVeCoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystem (
        /*[in]*/ enum AgEVeCoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatGroundTrackNumbering (
        /*[out,retval]*/ struct IAgVeRepeatGroundTrackNumbering * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassNumberingType (
        /*[out,retval]*/ enum AgEVePassNumbering * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPassNumberingType (
        /*[in]*/ enum AgEVePassNumbering PassNumbering ) = 0;
      virtual HRESULT __stdcall get_PassNumbering (
        /*[out,retval]*/ struct IAgVePassNumbering * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystems (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgEVeGfxAttributes
{
    eAttributesUnknown = -1,
    eAttributesAccess = 0,
    eAttributesBasic = 1,
    eAttributesCustom = 2,
    eAttributesRealtime = 3
};

struct __declspec(uuid("618b384d-6c98-462f-be85-eab19111870b"))
IAgVeGfxAttributes : IUnknown
{};

enum AgEVeGfxTimeEventType
{
    eTimeEventTypeUnknown = -1,
    eTimeEventTypeLine = 0,
    eTimeEventTypeMarker = 1,
    eTimeEventTypeText = 2
};

struct __declspec(uuid("3e0b3090-b638-4837-bf3d-4d3563259736"))
IAgVeGfxTimeEventType : IUnknown
{};

struct __declspec(uuid("65f1c611-05cc-4619-8b84-36faaafeb6f6"))
IAgVeGfxTimeEventsElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTimeEventType))
    enum AgEVeGfxTimeEventType TimeEventType;
    __declspec(property(get=GetTimeEventTypeSupportedTypes))
    SAFEARRAY * TimeEventTypeSupportedTypes;
    __declspec(property(get=GetTimeEventTypeData))
    IAgVeGfxTimeEventTypePtr TimeEventTypeData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    enum AgEVeGfxTimeEventType GetTimeEventType ( );
    HRESULT SetTimeEventType (
        enum AgEVeGfxTimeEventType TimeEventType );
    VARIANT_BOOL IsTimeEventTypeSupported (
        enum AgEVeGfxTimeEventType TimeEventType );
    SAFEARRAY * GetTimeEventTypeSupportedTypes ( );
    IAgVeGfxTimeEventTypePtr GetTimeEventTypeData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimeEventType (
        /*[out,retval]*/ enum AgEVeGfxTimeEventType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTimeEventType (
        /*[in]*/ enum AgEVeGfxTimeEventType TimeEventType ) = 0;
      virtual HRESULT __stdcall raw_IsTimeEventTypeSupported (
        /*[in]*/ enum AgEVeGfxTimeEventType TimeEventType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeEventTypeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeEventTypeData (
        /*[out,retval]*/ struct IAgVeGfxTimeEventType * * ppVal ) = 0;
};

struct __declspec(uuid("58364000-5a7e-4f2b-9e60-6ac85565e042"))
IAgVeGfxTimeEventsCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeGfxTimeEventsElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeGfxTimeEventsElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeGfxTimeEventsElementPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeGfxTimeEventsElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAgVeGfxTimeEventsElement * * ppRetVal ) = 0;
};

enum AgEVeGfxPass
{
    ePassUnknown = -1,
    ePassShowAll = 0,
    ePassShowPasses = 1
};

struct __declspec(uuid("b22a928b-0ea9-4c70-a201-47eddca2ead2"))
IAgVeGfxPass : IUnknown
{};

enum AgEVeGfxVisibleSides
{
    eVisibleSidesAscending = 0,
    eVisibleSidesBoth = 1,
    eVisibleSidesDescending = 2,
    eVisibleSidesNone = 3
};

struct __declspec(uuid("660c954a-74cc-48db-8b33-a9863617404b"))
IAgVeGfxPasses : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPassType))
    enum AgEVeGfxPass PassType;
    __declspec(property(get=GetPassSupportedTypes))
    SAFEARRAY * PassSupportedTypes;
    __declspec(property(get=GetPass))
    IAgVeGfxPassPtr Pass;
    __declspec(property(get=GetVisibleSides,put=PutVisibleSides))
    enum AgEVeGfxVisibleSides VisibleSides;
    __declspec(property(get=GetIsPassLabelsVisible,put=PutIsPassLabelsVisible))
    VARIANT_BOOL IsPassLabelsVisible;
    __declspec(property(get=GetIsPathLabelsVisible,put=PutIsPathLabelsVisible))
    VARIANT_BOOL IsPathLabelsVisible;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxPass GetPassType ( );
    HRESULT SetPassType (
        enum AgEVeGfxPass Pass );
    VARIANT_BOOL IsPassTypeSupported (
        enum AgEVeGfxPass Pass );
    SAFEARRAY * GetPassSupportedTypes ( );
    IAgVeGfxPassPtr GetPass ( );
    enum AgEVeGfxVisibleSides GetVisibleSides ( );
    void PutVisibleSides (
        enum AgEVeGfxVisibleSides pVal );
    VARIANT_BOOL GetIsPassLabelsVisible ( );
    void PutIsPassLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPathLabelsVisible ( );
    void PutIsPathLabelsVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PassType (
        /*[out,retval]*/ enum AgEVeGfxPass * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPassType (
        /*[in]*/ enum AgEVeGfxPass Pass ) = 0;
      virtual HRESULT __stdcall raw_IsPassTypeSupported (
        /*[in]*/ enum AgEVeGfxPass Pass,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PassSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Pass (
        /*[out,retval]*/ struct IAgVeGfxPass * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VisibleSides (
        /*[out,retval]*/ enum AgEVeGfxVisibleSides * pVal ) = 0;
      virtual HRESULT __stdcall put_VisibleSides (
        /*[in]*/ enum AgEVeGfxVisibleSides pVal ) = 0;
      virtual HRESULT __stdcall get_IsPassLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPassLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPathLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPathLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

enum AgELeadTrailData
{
    eDataUnknown = -1,
    eDataNone = 0,
    eDataAll = 1,
    eDataFraction = 2,
    eDataFull = 3,
    eDataHalf = 4,
    eDataOnePass = 5,
    eDataQuarter = 6,
    eDataTime = 7,
    eDataCurrentInterval = 8
};

struct __declspec(uuid("f6d26c63-5567-44ea-a16f-2ae4bfe63cb5"))
IAgVeLeadTrailData : IUnknown
{};

struct __declspec(uuid("41d2e6ee-904b-4bf3-ab3e-e05fa0014fb0"))
IAgVeGfxLeadTrailData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLeadDataType))
    enum AgELeadTrailData LeadDataType;
    __declspec(property(get=GetLeadDataSupportedTypes))
    SAFEARRAY * LeadDataSupportedTypes;
    __declspec(property(get=GetLeadData))
    IAgVeLeadTrailDataPtr LeadData;
    __declspec(property(get=GetTrailDataType))
    enum AgELeadTrailData TrailDataType;
    __declspec(property(get=GetTrailDataSupportedTypes))
    SAFEARRAY * TrailDataSupportedTypes;
    __declspec(property(get=GetTrailData))
    IAgVeLeadTrailDataPtr TrailData;
    __declspec(property(get=GetHasLeadData))
    VARIANT_BOOL HasLeadData;
    __declspec(property(get=GetHasTrailData))
    VARIANT_BOOL HasTrailData;

    //
    // Wrapper methods for error-handling
    //

    enum AgELeadTrailData GetLeadDataType ( );
    HRESULT SetLeadDataType (
        enum AgELeadTrailData LeadData );
    VARIANT_BOOL IsLeadDataTypeSupported (
        enum AgELeadTrailData LeadData );
    SAFEARRAY * GetLeadDataSupportedTypes ( );
    IAgVeLeadTrailDataPtr GetLeadData ( );
    enum AgELeadTrailData GetTrailDataType ( );
    HRESULT SetTrailDataType (
        enum AgELeadTrailData TrailData );
    VARIANT_BOOL IsTrailDataTypeSupported (
        enum AgELeadTrailData TrailData );
    SAFEARRAY * GetTrailDataSupportedTypes ( );
    IAgVeLeadTrailDataPtr GetTrailData ( );
    VARIANT_BOOL GetHasLeadData ( );
    VARIANT_BOOL GetHasTrailData ( );
    HRESULT SetTrailSameAsLead ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LeadDataType (
        /*[out,retval]*/ enum AgELeadTrailData * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLeadDataType (
        /*[in]*/ enum AgELeadTrailData LeadData ) = 0;
      virtual HRESULT __stdcall raw_IsLeadDataTypeSupported (
        /*[in]*/ enum AgELeadTrailData LeadData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LeadDataSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LeadData (
        /*[out,retval]*/ struct IAgVeLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TrailDataType (
        /*[out,retval]*/ enum AgELeadTrailData * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrailDataType (
        /*[in]*/ enum AgELeadTrailData TrailData ) = 0;
      virtual HRESULT __stdcall raw_IsTrailDataTypeSupported (
        /*[in]*/ enum AgELeadTrailData TrailData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TrailDataSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TrailData (
        /*[out,retval]*/ struct IAgVeLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_HasLeadData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasTrailData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrailSameAsLead ( ) = 0;
};

struct __declspec(uuid("53072337-9017-4b6f-a09a-2cf9198bde7f"))
IAgVeGfxOrbitPassData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack))
    IAgVeGfxLeadTrailDataPtr GroundTrack;
    __declspec(property(get=GetOrbit))
    IAgVeGfxLeadTrailDataPtr Orbit;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxLeadTrailDataPtr GetGroundTrack ( );
    IAgVeGfxLeadTrailDataPtr GetOrbit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("0c82546d-1425-43d2-b769-ca6de1b9bcf6"))
IAgVeGfxPassResolution : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack,put=PutGroundTrack))
    double GroundTrack;
    __declspec(property(get=GetOrbit,put=PutOrbit))
    double Orbit;
    __declspec(property(get=GetMinGroundTrack,put=PutMinGroundTrack))
    double MinGroundTrack;
    __declspec(property(get=GetMinOrbit,put=PutMinOrbit))
    double MinOrbit;

    //
    // Wrapper methods for error-handling
    //

    double GetGroundTrack ( );
    void PutGroundTrack (
        double pVal );
    double GetOrbit ( );
    void PutOrbit (
        double pVal );
    double GetMinGroundTrack ( );
    void PutMinGroundTrack (
        double pVal );
    double GetMinOrbit ( );
    void PutMinOrbit (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GroundTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Orbit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinGroundTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinGroundTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinOrbit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinOrbit (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ef476143-12b7-48bd-9294-d67e0e4435ae"))
IAgVeGfxElevationsElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetDistanceVisible,put=PutDistanceVisible))
    VARIANT_BOOL DistanceVisible;
    __declspec(property(get=GetUserTextVisible,put=PutUserTextVisible))
    VARIANT_BOOL UserTextVisible;
    __declspec(property(get=GetUserText,put=PutUserText))
    _bstr_t UserText;
    __declspec(property(get=GetLabelAngle,put=PutLabelAngle))
    long LabelAngle;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetDistanceVisible ( );
    void PutDistanceVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUserTextVisible ( );
    void PutUserTextVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetUserText ( );
    void PutUserText (
        _bstr_t pVal );
    long GetLabelAngle ( );
    void PutLabelAngle (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_DistanceVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DistanceVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UserTextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UserTextVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UserText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelAngle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelAngle (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("4a2f20ba-916f-4273-a830-691d73c87a5c"))
IAgVeGfxElevationsCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeGfxElevationsElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeGfxElevationsElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeGfxElevationsElementPtr AddLevel (
        double Elevation );
    HRESULT AddLevelRange (
        const _variant_t & Start,
        const _variant_t & Stop,
        const _variant_t & Step );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeGfxElevationsElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_AddLevel (
        /*[in]*/ double Elevation,
        /*[out,retval]*/ struct IAgVeGfxElevationsElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddLevelRange (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[in]*/ VARIANT Step ) = 0;
};

struct __declspec(uuid("ce568c20-7bf8-4660-9b3f-a3322a182d5e"))
IAgVeGfxElevContours : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsFillVisible,put=PutIsFillVisible))
    VARIANT_BOOL IsFillVisible;
    __declspec(property(get=GetNumOfDecimalDigits,put=PutNumOfDecimalDigits))
    long NumOfDecimalDigits;
    __declspec(property(get=GetElevations))
    IAgVeGfxElevationsCollectionPtr Elevations;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsFillVisible ( );
    void PutIsFillVisible (
        VARIANT_BOOL pVal );
    enum STKUtil::AgEFillStyle GetFillStyle ( );
    void PutFillStyle (
        enum STKUtil::AgEFillStyle pVal );
    long GetNumOfDecimalDigits ( );
    void PutNumOfDecimalDigits (
        long pVal );
    IAgVeGfxElevationsCollectionPtr GetElevations ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsFillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ enum STKUtil::AgEFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ enum STKUtil::AgEFillStyle pVal ) = 0;
      virtual HRESULT __stdcall get_NumOfDecimalDigits (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumOfDecimalDigits (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Elevations (
        /*[out,retval]*/ struct IAgVeGfxElevationsCollection * * ppVal ) = 0;
};

struct __declspec(uuid("e83a1d53-0d66-41cb-bd08-5bb8163bd482"))
IAgVeGfxSAA : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetUseVehicleAlt,put=PutUseVehicleAlt))
    VARIANT_BOOL UseVehicleAlt;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetIsFillVisible,put=PutIsFillVisible))
    VARIANT_BOOL IsFillVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseVehicleAlt ( );
    void PutUseVehicleAlt (
        VARIANT_BOOL pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    VARIANT_BOOL GetIsFillVisible ( );
    void PutIsFillVisible (
        VARIANT_BOOL pVal );
    enum STKUtil::AgEFillStyle GetFillStyle ( );
    void PutFillStyle (
        enum STKUtil::AgEFillStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseVehicleAlt (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseVehicleAlt (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsFillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ enum STKUtil::AgEFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ enum STKUtil::AgEFillStyle pVal ) = 0;
};

struct __declspec(uuid("030f22bc-5fd3-4a38-8b06-77a0978add76"))
IAgVeGfxLightingElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("a1941ee0-5368-4dbe-bb4e-99f851ec258d"))
IAgVeGfxLighting : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSunlight))
    IAgVeGfxLightingElementPtr Sunlight;
    __declspec(property(get=GetPenumbra))
    IAgVeGfxLightingElementPtr Penumbra;
    __declspec(property(get=GetUmbra))
    IAgVeGfxLightingElementPtr Umbra;
    __declspec(property(get=GetIsSunLightPenumbraVisible,put=PutIsSunLightPenumbraVisible))
    VARIANT_BOOL IsSunLightPenumbraVisible;
    __declspec(property(get=GetIsPenumbraUmbraVisible,put=PutIsPenumbraUmbraVisible))
    VARIANT_BOOL IsPenumbraUmbraVisible;
    __declspec(property(get=GetIsSolarSpecularReflectionPointVisible,put=PutIsSolarSpecularReflectionPointVisible))
    VARIANT_BOOL IsSolarSpecularReflectionPointVisible;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxLightingElementPtr GetSunlight ( );
    IAgVeGfxLightingElementPtr GetPenumbra ( );
    IAgVeGfxLightingElementPtr GetUmbra ( );
    VARIANT_BOOL GetIsSunLightPenumbraVisible ( );
    void PutIsSunLightPenumbraVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPenumbraUmbraVisible ( );
    void PutIsPenumbraUmbraVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsSolarSpecularReflectionPointVisible ( );
    void PutIsSolarSpecularReflectionPointVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sunlight (
        /*[out,retval]*/ struct IAgVeGfxLightingElement * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Penumbra (
        /*[out,retval]*/ struct IAgVeGfxLightingElement * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Umbra (
        /*[out,retval]*/ struct IAgVeGfxLightingElement * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsSunLightPenumbraVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSunLightPenumbraVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPenumbraUmbraVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPenumbraUmbraVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsSolarSpecularReflectionPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSolarSpecularReflectionPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

enum AgEVeGfxElevation
{
    eElevationUnknown = -1,
    eElevationGroundElevation = 0,
    eElevationNone = 1,
    eElevationSwathHalfWidth = 2,
    eElevationVehicleHalfAngle = 3,
    eElevationGroundElevationEnvelope = 4,
    eElevationVehicleHalfAngleEnvelope = 5
};

struct __declspec(uuid("8efcdbd9-2a86-45c9-bf50-4e1b5f7f292b"))
IAgVeGfxElevation : IUnknown
{};

enum AgEVeGfxOptions
{
    eOptionsEdgeLimits = 0,
    eOptionsFilledLimits = 1,
    eOptionsNoGraphics = 2
};

struct __declspec(uuid("2f0bb2cf-1be9-4f0c-8984-9b2167f8dea8"))
IAgVeGfxSwath : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetElevationType))
    enum AgEVeGfxElevation ElevationType;
    __declspec(property(get=GetElevationSupportedTypes))
    SAFEARRAY * ElevationSupportedTypes;
    __declspec(property(get=GetElevation))
    IAgVeGfxElevationPtr Elevation;
    __declspec(property(get=GetOptions,put=PutOptions))
    enum AgEVeGfxOptions Options;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxElevation GetElevationType ( );
    HRESULT SetElevationType (
        enum AgEVeGfxElevation Elevation );
    VARIANT_BOOL IsElevationTypeSupported (
        enum AgEVeGfxElevation Elevation );
    SAFEARRAY * GetElevationSupportedTypes ( );
    IAgVeGfxElevationPtr GetElevation ( );
    enum AgEVeGfxOptions GetOptions ( );
    void PutOptions (
        enum AgEVeGfxOptions pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ElevationType (
        /*[out,retval]*/ enum AgEVeGfxElevation * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetElevationType (
        /*[in]*/ enum AgEVeGfxElevation Elevation ) = 0;
      virtual HRESULT __stdcall raw_IsElevationTypeSupported (
        /*[in]*/ enum AgEVeGfxElevation Elevation,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ElevationSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ struct IAgVeGfxElevation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ enum AgEVeGfxOptions * pVal ) = 0;
      virtual HRESULT __stdcall put_Options (
        /*[in]*/ enum AgEVeGfxOptions pVal ) = 0;
};

struct __declspec(uuid("4b5231eb-62b5-4db3-a7c4-c3ef81ae3c5f"))
IAgVeGfxGroundEllipsesElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEllipseSetName))
    _bstr_t EllipseSetName;
    __declspec(property(get=GetStaticGfx,put=PutStaticGfx))
    VARIANT_BOOL StaticGfx;
    __declspec(property(get=GetDynamicGfx,put=PutDynamicGfx))
    VARIANT_BOOL DynamicGfx;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    VARIANT_BOOL Interpolate;
    __declspec(property(get=GetIsNameVisible,put=PutIsNameVisible))
    VARIANT_BOOL IsNameVisible;
    __declspec(property(get=GetIsCenterVisible,put=PutIsCenterVisible))
    VARIANT_BOOL IsCenterVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEllipseSetName ( );
    VARIANT_BOOL GetStaticGfx ( );
    void PutStaticGfx (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDynamicGfx ( );
    void PutDynamicGfx (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInterpolate ( );
    void PutInterpolate (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsNameVisible ( );
    void PutIsNameVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsCenterVisible ( );
    void PutIsCenterVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EllipseSetName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StaticGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_StaticGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DynamicGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DynamicGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsNameVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsNameVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsCenterVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsCenterVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("812ace65-2fab-480c-8617-cd46e16afb0d"))
IAgVeGfxGroundEllipsesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeGfxGroundEllipsesElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeGfxGroundEllipsesElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("dc14cf44-e93a-4af9-acca-06666cc85c36"))
IAgVeCentralBodies : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableCentralBodies))
    SAFEARRAY * AvailableCentralBodies;
    __declspec(property(get=GetAssignedCentralBodies))
    SAFEARRAY * AssignedCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAvailableCentralBodies ( );
    VARIANT_BOOL IsCentralBodyAssigned (
        _bstr_t CentralBody );
    SAFEARRAY * GetAssignedCentralBodies ( );
    HRESULT AssignCentralBody (
        _bstr_t CentralBody );
    HRESULT RemoveCentralBody (
        _bstr_t CentralBody );
    HRESULT RemoveAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AvailableCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsCentralBodyAssigned (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ VARIANT_BOOL * pIsAssigned ) = 0;
      virtual HRESULT __stdcall get_AssignedCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AssignCentralBody (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveCentralBody (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
};

struct __declspec(uuid("35440693-185a-4bf4-bb97-ae6fec7c8322"))
IAgSaGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetTimeEvents))
    IAgVeGfxTimeEventsCollectionPtr TimeEvents;
    __declspec(property(get=GetPasses))
    IAgVeGfxPassesPtr Passes;
    __declspec(property(get=GetPassData))
    IAgVeGfxOrbitPassDataPtr PassData;
    __declspec(property(get=GetResolution))
    IAgVeGfxPassResolutionPtr Resolution;
    __declspec(property(get=GetElevContours))
    IAgVeGfxElevContoursPtr ElevContours;
    __declspec(property(get=GetSAA))
    IAgVeGfxSAAPtr SAA;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetSwath))
    IAgVeGfxSwathPtr Swath;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetGroundTrackCentralBodyDisplay))
    IAgVeCentralBodiesPtr GroundTrackCentralBodyDisplay;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxTimeEventsCollectionPtr GetTimeEvents ( );
    IAgVeGfxPassesPtr GetPasses ( );
    IAgVeGfxOrbitPassDataPtr GetPassData ( );
    IAgVeGfxPassResolutionPtr GetResolution ( );
    IAgVeGfxElevContoursPtr GetElevContours ( );
    IAgVeGfxSAAPtr GetSAA ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxSwathPtr GetSwath ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    IAgVeCentralBodiesPtr GetGroundTrackCentralBodyDisplay ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimeEvents (
        /*[out,retval]*/ struct IAgVeGfxTimeEventsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Passes (
        /*[out,retval]*/ struct IAgVeGfxPasses * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxOrbitPassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxPassResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeGfxElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeGfxSAA * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgVeGfxSwath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GroundTrackCentralBodyDisplay (
        /*[out,retval]*/ struct IAgVeCentralBodies * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("97d94b30-6094-4aac-9bed-149a2a17d399"))
IAgSaVOModel : IAgVOModel
{
    //
    // Property data
    //

    __declspec(property(get=GetOrbitMarker))
    IAgVOMarkerPtr OrbitMarker;
    __declspec(property(get=GetGroundMarker))
    IAgVOMarkerPtr GroundMarker;
    __declspec(property(get=GetSolarPanelsPointAtSun,put=PutSolarPanelsPointAtSun))
    VARIANT_BOOL SolarPanelsPointAtSun;
    __declspec(property(get=GetIsPointVisible,put=PutIsPointVisible))
    VARIANT_BOOL IsPointVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    _variant_t PointSize;

    //
    // Wrapper methods for error-handling
    //

    IAgVOMarkerPtr GetOrbitMarker ( );
    IAgVOMarkerPtr GetGroundMarker ( );
    VARIANT_BOOL GetSolarPanelsPointAtSun ( );
    void PutSolarPanelsPointAtSun (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPointVisible ( );
    void PutIsPointVisible (
        VARIANT_BOOL pVal );
    _variant_t GetPointSize ( );
    void PutPointSize (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OrbitMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolarPanelsPointAtSun (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SolarPanelsPointAtSun (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("04356b86-868c-4c1a-9255-d657d20713c6"))
IAgVeVOSystemsElementBase : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetVOWindow,put=PutVOWindow))
    _bstr_t VOWindow;
    __declspec(property(get=GetAvailableVOWindows))
    SAFEARRAY * AvailableVOWindows;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetVOWindow ( );
    void PutVOWindow (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableVOWindows ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_VOWindow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VOWindow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVOWindows (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("0618ca5e-25bd-4a96-924b-7bfad829c5cb"))
IAgVeVOSystemsElement : IAgVeVOSystemsElementBase
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetVOWindowIds ( );
    HRESULT SetVOWindowIds (
        SAFEARRAY * * WindowIds );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetVOWindowIds (
        /*[out,retval]*/ SAFEARRAY * * ppWindowIds ) = 0;
      virtual HRESULT __stdcall raw_SetVOWindowIds (
        /*[in]*/ SAFEARRAY * * WindowIds ) = 0;
};

struct __declspec(uuid("15c09c0b-f671-4246-b6dd-3093b24c88f9"))
IAgVeVOSystemsSpecialElement : IAgVeVOSystemsElementBase
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetVOWindowIds ( );
    HRESULT SetVOWindowIds (
        SAFEARRAY * * WindowIds );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetVOWindowIds (
        /*[out,retval]*/ SAFEARRAY * * ppWindowIds ) = 0;
      virtual HRESULT __stdcall raw_SetVOWindowIds (
        /*[in]*/ SAFEARRAY * * WindowIds ) = 0;
};

struct __declspec(uuid("75c0adc1-a312-479b-ac37-17fe6479fc33"))
IAgVeVOSystemsCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeVOSystemsElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSupportedSystems))
    SAFEARRAY * SupportedSystems;
    __declspec(property(get=GetInertialByWindow))
    IAgVeVOSystemsSpecialElementPtr InertialByWindow;
    __declspec(property(get=GetFixedByWindow))
    IAgVeVOSystemsSpecialElementPtr FixedByWindow;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeVOSystemsElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeVOSystemsElementPtr Add (
        _bstr_t SystemName );
    SAFEARRAY * GetSupportedSystems ( );
    VARIANT_BOOL Contains (
        _bstr_t SystemName );
    IAgVeVOSystemsSpecialElementPtr GetInertialByWindow ( );
    IAgVeVOSystemsSpecialElementPtr GetFixedByWindow ( );
    HRESULT Remove (
        _bstr_t SystemName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeVOSystemsElement * * ppIAgVeVOSystemsElement ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR SystemName,
        /*[out,retval]*/ struct IAgVeVOSystemsElement * * ppIAgVeVOSystemsElement ) = 0;
      virtual HRESULT __stdcall get_SupportedSystems (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR SystemName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InertialByWindow (
        /*[out,retval]*/ struct IAgVeVOSystemsSpecialElement * * ppIAgVeVOSystemsElement ) = 0;
      virtual HRESULT __stdcall get_FixedByWindow (
        /*[out,retval]*/ struct IAgVeVOSystemsSpecialElement * * ppIAgVeVOSystemsElement ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR SystemName ) = 0;
};

struct __declspec(uuid("dfd171a4-3383-40d6-9196-97f337e91c26"))
IAgVeVOProximity : IUnknown
{};

struct __declspec(uuid("8333980a-3863-4f00-b665-83cbc5ffa94f"))
IAgVeVOGeoBox : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetNorthSouth,put=PutNorthSouth))
    double NorthSouth;
    __declspec(property(get=GetEastWest,put=PutEastWest))
    double EastWest;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetNorthSouth ( );
    void PutNorthSouth (
        double pVal );
    double GetEastWest ( );
    void PutEastWest (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    HRESULT Reposition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NorthSouth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NorthSouth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EastWest (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EastWest (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall raw_Reposition ( ) = 0;
};

struct __declspec(uuid("7a22f43b-0331-485f-acb3-da72e936f29c"))
IAgVeVOProximityAreaObject : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;
    __declspec(property(get=GetIsTextVisible,put=PutIsTextVisible))
    VARIANT_BOOL IsTextVisible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTextVisible ( );
    void PutIsTextVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTextVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
};

struct __declspec(uuid("3742ccc4-814c-4097-aeb0-2d9fa3f94308"))
IAgVeVOControlBox : IAgVeVOProximityAreaObject
{
    //
    // Property data
    //

    __declspec(property(get=GetCrossTrack,put=PutCrossTrack))
    double CrossTrack;
    __declspec(property(get=GetTangential,put=PutTangential))
    double Tangential;
    __declspec(property(get=GetNormal,put=PutNormal))
    double Normal;
    __declspec(property(get=GetCrossTrackOffset,put=PutCrossTrackOffset))
    double CrossTrackOffset;
    __declspec(property(get=GetTangentialOffset,put=PutTangentialOffset))
    double TangentialOffset;
    __declspec(property(get=GetNormalOffset,put=PutNormalOffset))
    double NormalOffset;
    __declspec(property(get=GetUseTranslucency,put=PutUseTranslucency))
    VARIANT_BOOL UseTranslucency;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    double GetCrossTrack ( );
    void PutCrossTrack (
        double pVal );
    double GetTangential ( );
    void PutTangential (
        double pVal );
    double GetNormal ( );
    void PutNormal (
        double pVal );
    double GetCrossTrackOffset ( );
    void PutCrossTrackOffset (
        double pVal );
    double GetTangentialOffset ( );
    void PutTangentialOffset (
        double pVal );
    double GetNormalOffset ( );
    void PutNormalOffset (
        double pVal );
    VARIANT_BOOL GetUseTranslucency ( );
    void PutUseTranslucency (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CrossTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Tangential (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Tangential (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CrossTrackOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossTrackOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TangentialOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TangentialOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NormalOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NormalOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTranslucency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("475886b3-46b1-4f63-af83-5d7f54229455"))
IAgVeVOBearingBox : IAgVeVOProximityAreaObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBearing,put=PutBearing))
    double Bearing;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLengthOffset,put=PutLengthOffset))
    double LengthOffset;
    __declspec(property(get=GetWidthOffset,put=PutWidthOffset))
    double WidthOffset;
    __declspec(property(get=GetHeightOffset,put=PutHeightOffset))
    double HeightOffset;
    __declspec(property(get=GetUseTranslucency,put=PutUseTranslucency))
    VARIANT_BOOL UseTranslucency;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    double GetBearing ( );
    void PutBearing (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetLengthOffset ( );
    void PutLengthOffset (
        double pVal );
    double GetWidthOffset ( );
    void PutWidthOffset (
        double pVal );
    double GetHeightOffset ( );
    void PutHeightOffset (
        double pVal );
    VARIANT_BOOL GetUseTranslucency ( );
    void PutUseTranslucency (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LengthOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LengthOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WidthOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WidthOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HeightOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTranslucency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ca243aba-4554-4125-93c7-c932f3cd951b"))
IAgVeVOBearingEllipse : IAgVeVOProximityAreaObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBearing,put=PutBearing))
    double Bearing;
    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;
    __declspec(property(get=GetSemiMinorAxis,put=PutSemiMinorAxis))
    double SemiMinorAxis;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;
    __declspec(property(get=GetMajorAxisOffset,put=PutMajorAxisOffset))
    double MajorAxisOffset;
    __declspec(property(get=GetMinorAxisOffset,put=PutMinorAxisOffset))
    double MinorAxisOffset;

    //
    // Wrapper methods for error-handling
    //

    double GetBearing ( );
    void PutBearing (
        double pVal );
    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pVal );
    double GetSemiMinorAxis ( );
    void PutSemiMinorAxis (
        double pVal );
    double GetGranularity ( );
    void PutGranularity (
        double pVal );
    double GetMajorAxisOffset ( );
    void PutMajorAxisOffset (
        double pVal );
    double GetMinorAxisOffset ( );
    void PutMinorAxisOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMinorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMinorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MajorAxisOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MajorAxisOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinorAxisOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinorAxisOffset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("40872552-965a-4e75-b4b1-7c70ee1cc006"))
IAgVeVOLineOfBearing : IAgVeVOProximityAreaObject
{
    //
    // Property data
    //

    __declspec(property(get=GetBearing,put=PutBearing))
    double Bearing;
    __declspec(property(get=GetOriginLatitude,put=PutOriginLatitude))
    double OriginLatitude;
    __declspec(property(get=GetOriginLongitude,put=PutOriginLongitude))
    double OriginLongitude;
    __declspec(property(get=GetOriginAltitude,put=PutOriginAltitude))
    double OriginAltitude;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetBearingError,put=PutBearingError))
    double BearingError;
    __declspec(property(get=GetErrorColor,put=PutErrorColor))
    OLE_COLOR ErrorColor;
    __declspec(property(get=GetErrorLineWidth,put=PutErrorLineWidth))
    enum AgELineWidth ErrorLineWidth;

    //
    // Wrapper methods for error-handling
    //

    double GetBearing ( );
    void PutBearing (
        double pVal );
    double GetOriginLatitude ( );
    void PutOriginLatitude (
        double pVal );
    double GetOriginLongitude ( );
    void PutOriginLongitude (
        double pVal );
    double GetOriginAltitude ( );
    void PutOriginAltitude (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetBearingError ( );
    void PutBearingError (
        double pVal );
    OLE_COLOR GetErrorColor ( );
    void PutErrorColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetErrorLineWidth ( );
    void PutErrorLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginLatitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginLatitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginLongitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginLongitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BearingError (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BearingError (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ErrorColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorLineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_ErrorLineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("c10062b6-ccb9-4755-8211-37e0aee1ca42"))
IAgVeVOOrbitProximity : IAgVeVOProximity
{
    //
    // Property data
    //

    __declspec(property(get=GetGeoBox))
    IAgVeVOGeoBoxPtr GeoBox;
    __declspec(property(get=GetControlBox))
    IAgVeVOControlBoxPtr ControlBox;
    __declspec(property(get=GetBearingBox))
    IAgVeVOBearingBoxPtr BearingBox;
    __declspec(property(get=GetBearingEllipse))
    IAgVeVOBearingEllipsePtr BearingEllipse;
    __declspec(property(get=GetLineOfBearing))
    IAgVeVOLineOfBearingPtr LineOfBearing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOGeoBoxPtr GetGeoBox ( );
    IAgVeVOControlBoxPtr GetControlBox ( );
    IAgVeVOBearingBoxPtr GetBearingBox ( );
    IAgVeVOBearingEllipsePtr GetBearingEllipse ( );
    IAgVeVOLineOfBearingPtr GetLineOfBearing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GeoBox (
        /*[out,retval]*/ struct IAgVeVOGeoBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ControlBox (
        /*[out,retval]*/ struct IAgVeVOControlBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingBox (
        /*[out,retval]*/ struct IAgVeVOBearingBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingEllipse (
        /*[out,retval]*/ struct IAgVeVOBearingEllipse * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LineOfBearing (
        /*[out,retval]*/ struct IAgVeVOLineOfBearing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("b68ac16c-1a26-4085-837b-0487f409deba"))
IAgVeVOElevContours : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsConesVisible,put=PutIsConesVisible))
    VARIANT_BOOL IsConesVisible;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;
    __declspec(property(get=GetFill,put=PutFill))
    VARIANT_BOOL Fill;
    __declspec(property(get=GetFillTranslucency,put=PutFillTranslucency))
    double FillTranslucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsConesVisible ( );
    void PutIsConesVisible (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );
    VARIANT_BOOL GetFill ( );
    void PutFill (
        VARIANT_BOOL pVal );
    double GetFillTranslucency ( );
    void PutFillTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsConesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsConesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Fill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillTranslucency (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("be5eaa93-5468-495b-a5e9-658139423792"))
IAgVeVOSAA : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
};

enum AgEVeVOSigmaScale
{
    eSigmaScaleUnknown = -1,
    eSigmaScaleProbability = 0,
    eSigmaScaleScale = 1
};

struct __declspec(uuid("0ebb4868-6df5-4966-aa3c-3223e96e0801"))
IAgVeVOSigmaScale : IUnknown
{};

enum AgEVeVOAttributes
{
    eVOAttributesUnknown = -1,
    eVOAttributesBasic = 0,
    eVOAttributesIntervals = 1
};

struct __declspec(uuid("3388e507-8a99-4a39-94f8-89d863a40dde"))
IAgVeVOAttributes : IUnknown
{};

struct __declspec(uuid("8637f04f-b133-4b38-9215-def32fe1dfd0"))
IAgVeVOSize : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleToAttitudeSphere,put=PutScaleToAttitudeSphere))
    VARIANT_BOOL ScaleToAttitudeSphere;
    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetScaleToAttitudeSphere ( );
    void PutScaleToAttitudeSphere (
        VARIANT_BOOL pVal );
    double GetScaleValue ( );
    void PutScaleValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleToAttitudeSphere (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleToAttitudeSphere (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("3013b511-14f1-4fa2-afb3-3f27eeb10bf2"))
IAgVeVOLeadTrailData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLeadDataType))
    enum AgELeadTrailData LeadDataType;
    __declspec(property(get=GetTrailDataType))
    enum AgELeadTrailData TrailDataType;
    __declspec(property(get=GetLeadData))
    IAgVeLeadTrailDataPtr LeadData;
    __declspec(property(get=GetTrailData))
    IAgVeLeadTrailDataPtr TrailData;
    __declspec(property(get=GetHasLeadData))
    VARIANT_BOOL HasLeadData;
    __declspec(property(get=GetHasTrailData))
    VARIANT_BOOL HasTrailData;
    __declspec(property(get=GetSupportedDataTypes))
    SAFEARRAY * SupportedDataTypes;

    //
    // Wrapper methods for error-handling
    //

    enum AgELeadTrailData GetLeadDataType ( );
    enum AgELeadTrailData GetTrailDataType ( );
    HRESULT SetLeadDataType (
        enum AgELeadTrailData ELeadData );
    HRESULT SetTrailDataType (
        enum AgELeadTrailData ETrailData );
    IAgVeLeadTrailDataPtr GetLeadData ( );
    IAgVeLeadTrailDataPtr GetTrailData ( );
    VARIANT_BOOL GetHasLeadData ( );
    VARIANT_BOOL GetHasTrailData ( );
    VARIANT_BOOL IsDataTypeSupported (
        enum AgELeadTrailData EData );
    SAFEARRAY * GetSupportedDataTypes ( );
    HRESULT SetTrailSameAsLead ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LeadDataType (
        /*[out,retval]*/ enum AgELeadTrailData * pVal ) = 0;
      virtual HRESULT __stdcall get_TrailDataType (
        /*[out,retval]*/ enum AgELeadTrailData * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLeadDataType (
        /*[in]*/ enum AgELeadTrailData ELeadData ) = 0;
      virtual HRESULT __stdcall raw_SetTrailDataType (
        /*[in]*/ enum AgELeadTrailData ETrailData ) = 0;
      virtual HRESULT __stdcall get_LeadData (
        /*[out,retval]*/ struct IAgVeLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TrailData (
        /*[out,retval]*/ struct IAgVeLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_HasLeadData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasTrailData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsDataTypeSupported (
        /*[in]*/ enum AgELeadTrailData EData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedDataTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrailSameAsLead ( ) = 0;
};

struct __declspec(uuid("93af5a9a-243e-4dbd-92f8-3915fdc5fff4"))
IAgVeVOOrbitPassData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack))
    IAgVeVOLeadTrailDataPtr GroundTrack;
    __declspec(property(get=GetOrbit))
    IAgVeVOLeadTrailDataPtr Orbit;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOLeadTrailDataPtr GetGroundTrack ( );
    IAgVeVOLeadTrailDataPtr GetOrbit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("3cc77e57-69bd-4cd3-829b-070c96c192a1"))
IAgVeVOOrbitTrackData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFrom2D,put=PutInheritFrom2D))
    VARIANT_BOOL InheritFrom2D;
    __declspec(property(get=GetPassData))
    IAgVeVOOrbitPassDataPtr PassData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFrom2D ( );
    void PutInheritFrom2D (
        VARIANT_BOOL pVal );
    IAgVeVOOrbitPassDataPtr GetPassData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFrom2D (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2D (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeVOOrbitPassData * * ppVal ) = 0;
};

enum AgETickData
{
    eTickDataUnknown = -1,
    eTickDataCrossTrack = 0,
    eTickDataPoint = 1,
    eTickDataRadial = 2,
    eTickDataRadialAndCrossTrack = 3
};

struct __declspec(uuid("3fd985f8-ba8b-4e31-a86f-86a858af71da"))
IAgVeVOTickData : IUnknown
{};

struct __declspec(uuid("a5d57702-9cf2-44d0-9dd6-c69f6350fc21"))
IAgVeVOPathTickMarks : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTickDataType))
    enum AgETickData TickDataType;
    __declspec(property(get=GetTickDataSupportedTypes))
    SAFEARRAY * TickDataSupportedTypes;
    __declspec(property(get=GetTickData))
    IAgVeVOTickDataPtr TickData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    enum AgETickData GetTickDataType ( );
    HRESULT SetTickDataType (
        enum AgETickData TickData );
    VARIANT_BOOL IsTickDataTypeSupported (
        enum AgETickData TickData );
    SAFEARRAY * GetTickDataSupportedTypes ( );
    IAgVeVOTickDataPtr GetTickData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TickDataType (
        /*[out,retval]*/ enum AgETickData * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTickDataType (
        /*[in]*/ enum AgETickData TickData ) = 0;
      virtual HRESULT __stdcall raw_IsTickDataTypeSupported (
        /*[in]*/ enum AgETickData TickData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TickDataSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TickData (
        /*[out,retval]*/ struct IAgVeVOTickData * * ppVal ) = 0;
};

struct __declspec(uuid("4575a39b-1082-4dcd-90cf-1313ff32bb9b"))
IAgVeVOOrbitTickMarks : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeBetweenTicks,put=PutTimeBetweenTicks))
    double TimeBetweenTicks;
    __declspec(property(get=GetGroundTrack))
    IAgVeVOPathTickMarksPtr GroundTrack;
    __declspec(property(get=GetOrbit))
    IAgVeVOPathTickMarksPtr Orbit;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeBetweenTicks ( );
    void PutTimeBetweenTicks (
        double pVal );
    IAgVeVOPathTickMarksPtr GetGroundTrack ( );
    IAgVeVOPathTickMarksPtr GetOrbit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeBetweenTicks (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeBetweenTicks (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeVOPathTickMarks * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ struct IAgVeVOPathTickMarks * * ppVal ) = 0;
};

struct __declspec(uuid("f41b4087-f4eb-42fa-b9ae-f4d4f16b79a6"))
IAgVeVOPass : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTrackData))
    IAgVeVOOrbitTrackDataPtr TrackData;
    __declspec(property(get=GetTickMarks))
    IAgVeVOOrbitTickMarksPtr TickMarks;
    __declspec(property(get=GetEnableDepthCueing,put=PutEnableDepthCueing))
    VARIANT_BOOL EnableDepthCueing;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOOrbitTrackDataPtr GetTrackData ( );
    IAgVeVOOrbitTickMarksPtr GetTickMarks ( );
    VARIANT_BOOL GetEnableDepthCueing ( );
    void PutEnableDepthCueing (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrackData (
        /*[out,retval]*/ struct IAgVeVOOrbitTrackData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TickMarks (
        /*[out,retval]*/ struct IAgVeVOOrbitTickMarks * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EnableDepthCueing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableDepthCueing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("137b5414-404e-47a8-a284-eb144cca5226"))
IAgVeVOCovariance : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSigmaScaleType))
    enum AgEVeVOSigmaScale SigmaScaleType;
    __declspec(property(get=GetSigmaScaleSupportedTypes))
    SAFEARRAY * SigmaScaleSupportedTypes;
    __declspec(property(get=GetSigmaScale))
    IAgVeVOSigmaScalePtr SigmaScale;
    __declspec(property(get=GetAttributesType))
    enum AgEVeVOAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeVOAttributesPtr Attributes;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeVOSigmaScale GetSigmaScaleType ( );
    HRESULT SetSigmaScaleType (
        enum AgEVeVOSigmaScale SigmaScale );
    VARIANT_BOOL IsSigmaScaleTypeSupported (
        enum AgEVeVOSigmaScale SigmaScale );
    SAFEARRAY * GetSigmaScaleSupportedTypes ( );
    IAgVeVOSigmaScalePtr GetSigmaScale ( );
    enum AgEVeVOAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeVOAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeVOAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeVOAttributesPtr GetAttributes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SigmaScaleType (
        /*[out,retval]*/ enum AgEVeVOSigmaScale * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSigmaScaleType (
        /*[in]*/ enum AgEVeVOSigmaScale SigmaScale ) = 0;
      virtual HRESULT __stdcall raw_IsSigmaScaleTypeSupported (
        /*[in]*/ enum AgEVeVOSigmaScale SigmaScale,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SigmaScaleSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SigmaScale (
        /*[out,retval]*/ struct IAgVeVOSigmaScale * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeVOAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeVOAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeVOAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeVOAttributes * * ppVal ) = 0;
};

enum AgEVeVODropLineType
{
    eDropLineMeanSeaLevel = 0,
    eDropLineTerrain = 1,
    eDropLineWGS84Ellipsoid = 2
};

struct __declspec(uuid("498d933f-d7d7-4acb-9b5f-d3e149202b36"))
IAgVeVODropLinePosItem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeVODropLineType Type;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetUse2DColor,put=PutUse2DColor))
    VARIANT_BOOL Use2DColor;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeVODropLineType GetType ( );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUse2DColor ( );
    void PutUse2DColor (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeVODropLineType * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Use2DColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use2DColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
};

struct __declspec(uuid("bad03142-f09d-44ca-a6ec-5c9527536886"))
IAgVeVODropLinePosItemCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeVODropLinePosItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeVODropLinePosItemPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeVODropLinePosItem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("7cb02958-87b9-483c-86ff-ec6081e10e29"))
IAgVeVODropLinePathItem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeVODropLineType Type;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetUse2DColor,put=PutUse2DColor))
    VARIANT_BOOL Use2DColor;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetInterval,put=PutInterval))
    double Interval;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeVODropLineType GetType ( );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUse2DColor ( );
    void PutUse2DColor (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetInterval ( );
    void PutInterval (
        double pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeVODropLineType * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Use2DColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use2DColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_Interval (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Interval (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
};

struct __declspec(uuid("a316a867-f824-4813-bd31-5c99f05a3196"))
IAgVeVODropLinePathItemCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeVODropLinePathItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeVODropLinePathItemPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeVODropLinePathItem * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("9ebaa44a-8749-4e37-9ec0-f74cbeafd9e4"))
IAgVeVOOrbitDropLines : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgVeVODropLinePosItemCollectionPtr Position;
    __declspec(property(get=GetOrbit))
    IAgVeVODropLinePathItemCollectionPtr Orbit;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODropLinePosItemCollectionPtr GetPosition ( );
    IAgVeVODropLinePathItemCollectionPtr GetOrbit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVODropLinePosItemCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ struct IAgVeVODropLinePathItemCollection * * ppVal ) = 0;
};

struct __declspec(uuid("c42a7451-2566-4a05-8f73-21a1f5e95c93"))
IAgVeVOBPlaneTemplateDisplayElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetName ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pVal );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("93e4e123-4224-4a6f-8234-26c6fad500f6"))
IAgVeVOBPlaneTemplateDisplayCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeVOBPlaneTemplateDisplayElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeVOBPlaneTemplateDisplayElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeVOBPlaneTemplateDisplayElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("409c7dbc-62e2-4c37-8c73-1cf47f3a71df"))
IAgVeVOBPlaneTemplate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetAvailableCentralBodies))
    SAFEARRAY * AvailableCentralBodies;
    __declspec(property(get=GetReferenceVector,put=PutReferenceVector))
    _bstr_t ReferenceVector;
    __declspec(property(get=GetAvailableVectors))
    SAFEARRAY * AvailableVectors;
    __declspec(property(get=GetIsCartesianGridVisible,put=PutIsCartesianGridVisible))
    VARIANT_BOOL IsCartesianGridVisible;
    __declspec(property(get=GetIsPolarGridVisible,put=PutIsPolarGridVisible))
    VARIANT_BOOL IsPolarGridVisible;
    __declspec(property(get=GetGridSpacing,put=PutGridSpacing))
    double GridSpacing;
    __declspec(property(get=GetDisplayElements))
    IAgVeVOBPlaneTemplateDisplayCollectionPtr DisplayElements;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableCentralBodies ( );
    _bstr_t GetReferenceVector ( );
    void PutReferenceVector (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableVectors ( );
    VARIANT_BOOL GetIsCartesianGridVisible ( );
    void PutIsCartesianGridVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPolarGridVisible ( );
    void PutIsPolarGridVisible (
        VARIANT_BOOL pVal );
    double GetGridSpacing ( );
    void PutGridSpacing (
        double pVal );
    IAgVeVOBPlaneTemplateDisplayCollectionPtr GetDisplayElements ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceVector (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVectors (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCartesianGridVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsCartesianGridVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPolarGridVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPolarGridVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GridSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GridSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayElements (
        /*[out,retval]*/ struct IAgVeVOBPlaneTemplateDisplayCollection * * ppVal ) = 0;
};

struct __declspec(uuid("1b5b94e3-2109-4363-8337-8653738784f9"))
IAgVeVOBPlaneTemplatesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeVOBPlaneTemplatePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeVOBPlaneTemplatePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeVOBPlaneTemplatePtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeVOBPlaneTemplate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAgVeVOBPlaneTemplate * * ppRetVal ) = 0;
};

struct __declspec(uuid("74b89978-22c9-408e-b2b8-a2a9618a1c78"))
IAgVeVOBPlaneEvent : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEventEpoch,put=PutEventEpoch))
    _variant_t EventEpoch;
    __declspec(property(get=GetBeforeEvent,put=PutBeforeEvent))
    double BeforeEvent;
    __declspec(property(get=GetAfterEvent,put=PutAfterEvent))
    double AfterEvent;
    __declspec(property(get=GetAlwaysDisplay,put=PutAlwaysDisplay))
    VARIANT_BOOL AlwaysDisplay;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEventEpoch ( );
    void PutEventEpoch (
        const _variant_t & pVal );
    double GetBeforeEvent ( );
    void PutBeforeEvent (
        double pVal );
    double GetAfterEvent ( );
    void PutAfterEvent (
        double pVal );
    VARIANT_BOOL GetAlwaysDisplay ( );
    void PutAlwaysDisplay (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EventEpoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_EventEpoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_BeforeEvent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeforeEvent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AfterEvent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AfterEvent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AlwaysDisplay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AlwaysDisplay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

enum AgEVeVOBPlaneTargetPointPosition
{
    ePositionCartesian = 0,
    ePositionPolar = 1
};

struct __declspec(uuid("b7ef65b4-52cf-40f1-a89f-9415d5310c33"))
IAgVeVOBPlaneTargetPointPosition : IUnknown
{};

struct __declspec(uuid("6751d323-34f1-40d0-8926-0b670e1537d4"))
IAgVeVOBPlaneTargetPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPositionType))
    enum AgEVeVOBPlaneTargetPointPosition PositionType;
    __declspec(property(get=GetPositionSupportedTypes))
    SAFEARRAY * PositionSupportedTypes;
    __declspec(property(get=GetPosition))
    IAgVeVOBPlaneTargetPointPositionPtr Position;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgEVeVOBPlaneTargetPointPosition GetPositionType ( );
    HRESULT SetPositionType (
        enum AgEVeVOBPlaneTargetPointPosition Position );
    VARIANT_BOOL IsPositionTypeSupported (
        enum AgEVeVOBPlaneTargetPointPosition Position );
    SAFEARRAY * GetPositionSupportedTypes ( );
    IAgVeVOBPlaneTargetPointPositionPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_PositionType (
        /*[out,retval]*/ enum AgEVeVOBPlaneTargetPointPosition * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPositionType (
        /*[in]*/ enum AgEVeVOBPlaneTargetPointPosition Position ) = 0;
      virtual HRESULT __stdcall raw_IsPositionTypeSupported (
        /*[in]*/ enum AgEVeVOBPlaneTargetPointPosition Position,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVOBPlaneTargetPointPosition * * ppVal ) = 0;
};

struct __declspec(uuid("b9214d79-96cc-4438-8e28-3153e45a835b"))
IAgVeVOBPlanePoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetBMulT,put=PutBMulT))
    double BMulT;
    __declspec(property(get=GetBMulR,put=PutBMulR))
    double BMulR;
    __declspec(property(get=GetBMag,put=PutBMag))
    double BMag;
    __declspec(property(get=GetTheta,put=PutTheta))
    double Theta;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    double GetBMulT ( );
    void PutBMulT (
        double pVal );
    double GetBMulR ( );
    void PutBMulR (
        double pVal );
    double GetBMag ( );
    void PutBMag (
        double pVal );
    double GetTheta ( );
    void PutTheta (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BMulT (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMulT (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BMulR (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMulR (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BMag (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMag (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Theta (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Theta (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f7a0fd3f-599b-46d0-aa66-7cf10a038e83"))
IAgVeVOBPlanePointCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeVOBPlanePointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetPointColor,put=PutPointColor))
    OLE_COLOR PointColor;
    __declspec(property(get=GetFirstPointColor,put=PutFirstPointColor))
    OLE_COLOR FirstPointColor;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeVOBPlanePointPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeVOBPlanePointPtr Add ( );
    OLE_COLOR GetPointColor ( );
    void PutPointColor (
        OLE_COLOR pVal );
    OLE_COLOR GetFirstPointColor ( );
    void PutFirstPointColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeVOBPlanePoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAgVeVOBPlanePoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_PointColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FirstPointColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPointColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("efd7cef3-61ee-43ad-9f7c-cda6ecc477c0"))
IAgVeVOBPlaneInstance : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetDefinition))
    _bstr_t Definition;
    __declspec(property(get=GetEventName,put=PutEventName))
    _bstr_t EventName;
    __declspec(property(get=GetEvent))
    IAgVeVOBPlaneEventPtr Event;
    __declspec(property(get=GetTargetPoint))
    IAgVeVOBPlaneTargetPointPtr TargetPoint;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    double PointSize;
    __declspec(property(get=GetIsConnectPointsVisible,put=PutIsConnectPointsVisible))
    VARIANT_BOOL IsConnectPointsVisible;
    __declspec(property(get=GetConnectPointsColor,put=PutConnectPointsColor))
    OLE_COLOR ConnectPointsColor;
    __declspec(property(get=GetConnectPointLineWidth,put=PutConnectPointLineWidth))
    enum AgELineWidth ConnectPointLineWidth;
    __declspec(property(get=GetVOWindow,put=PutVOWindow))
    _bstr_t VOWindow;
    __declspec(property(get=GetAvailableVOWindows))
    SAFEARRAY * AvailableVOWindows;
    __declspec(property(get=GetAdditionalPoints))
    IAgVeVOBPlanePointCollectionPtr AdditionalPoints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    _bstr_t GetDefinition ( );
    _bstr_t GetEventName ( );
    void PutEventName (
        _bstr_t pVal );
    IAgVeVOBPlaneEventPtr GetEvent ( );
    IAgVeVOBPlaneTargetPointPtr GetTargetPoint ( );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );
    double GetPointSize ( );
    void PutPointSize (
        double pVal );
    VARIANT_BOOL GetIsConnectPointsVisible ( );
    void PutIsConnectPointsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetConnectPointsColor ( );
    void PutConnectPointsColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetConnectPointLineWidth ( );
    void PutConnectPointLineWidth (
        enum AgELineWidth pVal );
    _bstr_t GetVOWindow ( );
    void PutVOWindow (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableVOWindows ( );
    IAgVeVOBPlanePointCollectionPtr GetAdditionalPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Definition (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EventName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EventName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Event (
        /*[out,retval]*/ struct IAgVeVOBPlaneEvent * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TargetPoint (
        /*[out,retval]*/ struct IAgVeVOBPlaneTargetPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsConnectPointsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsConnectPointsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectPointsColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectPointsColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectPointLineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectPointLineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_VOWindow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VOWindow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVOWindows (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalPoints (
        /*[out,retval]*/ struct IAgVeVOBPlanePointCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("7cd6e188-207d-4bb2-9add-e926f78a7f47"))
IAgVeVOBPlaneInstancesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeVOBPlaneInstancePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeVOBPlaneInstancePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeVOBPlaneInstancePtr Add (
        _bstr_t TemplateName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeVOBPlaneInstance * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR TemplateName,
        /*[out,retval]*/ struct IAgVeVOBPlaneInstance * * ppRetVal ) = 0;
};

struct __declspec(uuid("727f6f43-5571-47a7-b97b-e2837b3e5f52"))
IAgVeVOBPlanes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTemplates))
    IAgVeVOBPlaneTemplatesCollectionPtr Templates;
    __declspec(property(get=GetInstances))
    IAgVeVOBPlaneInstancesCollectionPtr Instances;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOBPlaneTemplatesCollectionPtr GetTemplates ( );
    IAgVeVOBPlaneInstancesCollectionPtr GetInstances ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Templates (
        /*[out,retval]*/ struct IAgVeVOBPlaneTemplatesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Instances (
        /*[out,retval]*/ struct IAgVeVOBPlaneInstancesCollection * * ppVal ) = 0;
};

struct __declspec(uuid("d98367d4-e574-4c2e-a368-dc2d12581883"))
IAgVeEclipseBodies : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseCustomizedList,put=PutUseCustomizedList))
    VARIANT_BOOL UseCustomizedList;
    __declspec(property(get=GetAvailableCentralBodies))
    SAFEARRAY * AvailableCentralBodies;
    __declspec(property(get=GetAssignedCentralBodies))
    SAFEARRAY * AssignedCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseCustomizedList ( );
    void PutUseCustomizedList (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetAvailableCentralBodies ( );
    VARIANT_BOOL IsCentralBodyAssigned (
        _bstr_t CentralBody );
    SAFEARRAY * GetAssignedCentralBodies ( );
    HRESULT AssignCentralBody (
        _bstr_t CentralBody );
    HRESULT RemoveCentralBody (
        _bstr_t CentralBody );
    HRESULT RemoveAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseCustomizedList (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomizedList (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsCentralBodyAssigned (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ VARIANT_BOOL * pIsAssigned ) = 0;
      virtual HRESULT __stdcall get_AssignedCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AssignCentralBody (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveCentralBody (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
};

enum AgECCSDSReferenceFrame
{
    eCCSDSReferenceFrameEME2000 = 0,
    eCCSDSReferenceFrameFixed = 1,
    eCCSDSReferenceFrameITRF = 2,
    eCCSDSReferenceFrameInertial = 3,
    eCCSDSReferenceFrameTOD = 4,
    eCCSDSReferenceFrameMeanEarth = 5,
    eCCSDSReferenceFrameICRF = 6
};

enum AgECCSDSDateFormat
{
    eCCSDSDateFormatYDOY = 0,
    eCCSDSDateFormatYMD = 1
};

enum AgECCSDSEphemFormat
{
    eCCSDSEphemFormatFloatingPoint = 0,
    eCCSDSEphemFormatSciNotation = 1
};

enum AgEExportToolStepSize
{
    eExportToolStepSizeEphem = 0,
    eExportToolStepSizeSpecify = 1,
    eExportToolStepSizeNative = 2
};

struct __declspec(uuid("548f1ef5-9aca-47e7-8d20-2ab94ab8d287"))
IAgExportToolStepSize : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetStepSizeType,put=PutStepSizeType))
    enum AgEExportToolStepSize StepSizeType;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );
    enum AgEExportToolStepSize GetStepSizeType ( );
    void PutStepSizeType (
        enum AgEExportToolStepSize pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepSizeType (
        /*[out,retval]*/ enum AgEExportToolStepSize * pVal ) = 0;
      virtual HRESULT __stdcall put_StepSizeType (
        /*[in]*/ enum AgEExportToolStepSize pVal ) = 0;
};

enum AgEExportToolTimePeriod
{
    eExportToolTimePeriodSpecify = 0,
    eExportToolTimePeriodUseEntireEphemeris = 1
};

struct __declspec(uuid("6688c563-0af7-4cbd-a964-38239d382868"))
IAgExportToolTimePeriod : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStart,put=PutStart))
    _variant_t Start;
    __declspec(property(get=GetStop,put=PutStop))
    _variant_t Stop;
    __declspec(property(get=GetTimePeriodType,put=PutTimePeriodType))
    enum AgEExportToolTimePeriod TimePeriodType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStart ( );
    void PutStart (
        const _variant_t & pVal );
    _variant_t GetStop ( );
    void PutStop (
        const _variant_t & pVal );
    enum AgEExportToolTimePeriod GetTimePeriodType ( );
    void PutTimePeriodType (
        enum AgEExportToolTimePeriod pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Stop (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriodType (
        /*[out,retval]*/ enum AgEExportToolTimePeriod * pVal ) = 0;
      virtual HRESULT __stdcall put_TimePeriodType (
        /*[in]*/ enum AgEExportToolTimePeriod pVal ) = 0;
};

struct __declspec(uuid("c3d448db-02a0-4c51-bfe8-9bd5356a2401"))
IAgVeEphemerisCCSDSExportTool : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginator,put=PutOriginator))
    _bstr_t Originator;
    __declspec(property(get=GetObjectID,put=PutObjectID))
    _bstr_t ObjectID;
    __declspec(property(get=GetObjectName,put=PutObjectName))
    _bstr_t ObjectName;
    __declspec(property(get=GetCentralBodyName,put=PutCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    enum AgECCSDSReferenceFrame ReferenceFrame;
    __declspec(property(get=GetDateFormat,put=PutDateFormat))
    enum AgECCSDSDateFormat DateFormat;
    __declspec(property(get=GetEphemerisFormat,put=PutEphemerisFormat))
    enum AgECCSDSEphemFormat EphemerisFormat;
    __declspec(property(get=GetTimePrecision,put=PutTimePrecision))
    long TimePrecision;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;
    __declspec(property(get=GetReferenceFramesSupported))
    SAFEARRAY * ReferenceFramesSupported;
    __declspec(property(get=GetUseSatelliteCenterAndFrame,put=PutUseSatelliteCenterAndFrame))
    VARIANT_BOOL UseSatelliteCenterAndFrame;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetOriginator ( );
    void PutOriginator (
        _bstr_t pVal );
    _bstr_t GetObjectID ( );
    void PutObjectID (
        _bstr_t pVal );
    _bstr_t GetObjectName ( );
    void PutObjectName (
        _bstr_t pVal );
    _bstr_t GetCentralBodyName ( );
    void PutCentralBodyName (
        _bstr_t pVal );
    enum AgECCSDSReferenceFrame GetReferenceFrame ( );
    void PutReferenceFrame (
        enum AgECCSDSReferenceFrame pVal );
    enum AgECCSDSDateFormat GetDateFormat ( );
    void PutDateFormat (
        enum AgECCSDSDateFormat pVal );
    enum AgECCSDSEphemFormat GetEphemerisFormat ( );
    void PutEphemerisFormat (
        enum AgECCSDSEphemFormat pVal );
    long GetTimePrecision ( );
    void PutTimePrecision (
        long pVal );
    IAgExportToolStepSizePtr GetStepSize ( );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    SAFEARRAY * GetReferenceFramesSupported ( );
    VARIANT_BOOL GetUseSatelliteCenterAndFrame ( );
    void PutUseSatelliteCenterAndFrame (
        VARIANT_BOOL pRetVal );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Originator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Originator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ enum AgECCSDSReferenceFrame * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ enum AgECCSDSReferenceFrame pVal ) = 0;
      virtual HRESULT __stdcall get_DateFormat (
        /*[out,retval]*/ enum AgECCSDSDateFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_DateFormat (
        /*[in]*/ enum AgECCSDSDateFormat pVal ) = 0;
      virtual HRESULT __stdcall get_EphemerisFormat (
        /*[out,retval]*/ enum AgECCSDSEphemFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_EphemerisFormat (
        /*[in]*/ enum AgECCSDSEphemFormat pVal ) = 0;
      virtual HRESULT __stdcall get_TimePrecision (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TimePrecision (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceFramesSupported (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSatelliteCenterAndFrame (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSatelliteCenterAndFrame (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

enum AgEStkEphemCoordinateSystem
{
    eStkEphemCoordinateSystemFixed = 0,
    eStkEphemCoordinateSystemInertial = 1,
    eStkEphemCoordinateSystemJ2000 = 2,
    eStkEphemCoordinateSystemICRF = 3
};

enum AgEExportToolVersionFormat
{
    eExportToolVersionFormat410 = 0,
    eExportToolVersionFormat420 = 1,
    eExportToolVersionFormat430 = 2,
    eExportToolVersionFormat600 = 3,
    eExportToolVersionFormat620 = 4,
    eExportToolVersionFormatCurrent = 5,
    eExportToolVersionFormat800 = 6
};

enum AgEStkEphemCovarianceType
{
    eStkEphemCovarianceTypeNone = 0,
    eStkEphemCovarianceTypePosition3x3 = 1,
    eStkEphemCovarianceTypePositionVelocity6x6 = 2
};

struct __declspec(uuid("e573401b-ff2e-4c6d-9e07-9f3690c226fd"))
IAgVeEphemerisStkExportTool : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystem,put=PutCoordinateSystem))
    enum AgEStkEphemCoordinateSystem CoordinateSystem;
    __declspec(property(get=GetCentralBodyName,put=PutCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetVersionFormat,put=PutVersionFormat))
    enum AgEExportToolVersionFormat VersionFormat;
    __declspec(property(get=GetIncludeInterp,put=PutIncludeInterp))
    VARIANT_BOOL IncludeInterp;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetCovarianceType,put=PutCovarianceType))
    enum AgEStkEphemCovarianceType CovarianceType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkEphemCoordinateSystem GetCoordinateSystem ( );
    void PutCoordinateSystem (
        enum AgEStkEphemCoordinateSystem pVal );
    _bstr_t GetCentralBodyName ( );
    void PutCentralBodyName (
        _bstr_t pVal );
    enum AgEExportToolVersionFormat GetVersionFormat ( );
    void PutVersionFormat (
        enum AgEExportToolVersionFormat pVal );
    VARIANT_BOOL GetIncludeInterp ( );
    void PutIncludeInterp (
        VARIANT_BOOL pVal );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    IAgExportToolStepSizePtr GetStepSize ( );
    enum AgEStkEphemCovarianceType GetCovarianceType ( );
    void PutCovarianceType (
        enum AgEStkEphemCovarianceType pVal );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ enum AgEStkEphemCoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystem (
        /*[in]*/ enum AgEStkEphemCoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VersionFormat (
        /*[out,retval]*/ enum AgEExportToolVersionFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_VersionFormat (
        /*[in]*/ enum AgEExportToolVersionFormat pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeInterp (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeInterp (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovarianceType (
        /*[out,retval]*/ enum AgEStkEphemCovarianceType * pVal ) = 0;
      virtual HRESULT __stdcall put_CovarianceType (
        /*[in]*/ enum AgEStkEphemCovarianceType pVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

enum AgESpiceInterpolation
{
    eSpiceInterpolation09Langrangian = 0,
    eSpiceInterpolation13Hermitian = 1
};

struct __declspec(uuid("57033cc5-a19e-402f-9e4e-14194ee77c69"))
IAgVeEphemerisSpiceExportTool : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName,put=PutCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetSatID,put=PutSatID))
    long SatID;
    __declspec(property(get=GetInterpolationType,put=PutInterpolationType))
    enum AgESpiceInterpolation InterpolationType;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    long Interpolation;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBodyName ( );
    void PutCentralBodyName (
        _bstr_t pVal );
    long GetSatID ( );
    void PutSatID (
        long pVal );
    enum AgESpiceInterpolation GetInterpolationType ( );
    void PutInterpolationType (
        enum AgESpiceInterpolation pVal );
    long GetInterpolation ( );
    void PutInterpolation (
        long pVal );
    IAgExportToolStepSizePtr GetStepSize ( );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SatID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SatID (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_InterpolationType (
        /*[out,retval]*/ enum AgESpiceInterpolation * pVal ) = 0;
      virtual HRESULT __stdcall put_InterpolationType (
        /*[in]*/ enum AgESpiceInterpolation pVal ) = 0;
      virtual HRESULT __stdcall get_Interpolation (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Interpolation (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("7e7bc892-34fc-4aaa-8041-87b821de3284"))
IAgVeEphemerisCode500ExportTool : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSatID,put=PutSatID))
    long SatID;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;

    //
    // Wrapper methods for error-handling
    //

    long GetSatID ( );
    void PutSatID (
        long pVal );
    IAgExportToolStepSizePtr GetStepSize ( );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SatID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SatID (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("1465c8a4-8239-43f5-a4ec-90360a767787"))
IAgVePropDefExportTool : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

enum AgEAttCoordinateAxes
{
    eAttCoordinateAxesCustom = 0,
    eAttCoordinateAxesFixed = 1,
    eAttCoordinateAxesJ2000 = 2,
    eAttCoordinateAxesICRF = 3,
    eAttCoordinateAxesInertial = 4
};

struct __declspec(uuid("49759cb1-79e3-4d74-be04-e550d0b934ee"))
IAgVeCoordinateAxes : IUnknown
{};

enum AgEAttInclude
{
    eAttIncludeQuaternions = 0,
    eAttIncludeQuaternionsAngularVelocity = 1
};

struct __declspec(uuid("48caf1e2-bf5d-4e09-95de-dec09d5a4687"))
IAgVeAttitudeExportTool : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateAxesType))
    enum AgEAttCoordinateAxes CoordinateAxesType;
    __declspec(property(get=GetCoordinateAxes))
    IAgVeCoordinateAxesPtr CoordinateAxes;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;
    __declspec(property(get=GetInclude,put=PutInclude))
    enum AgEAttInclude Include;
    __declspec(property(get=GetVersionFormat,put=PutVersionFormat))
    enum AgEExportToolVersionFormat VersionFormat;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetSupportedCoordinateAxes))
    SAFEARRAY * SupportedCoordinateAxes;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAttCoordinateAxes GetCoordinateAxesType ( );
    HRESULT SetCoordinateAxesType (
        enum AgEAttCoordinateAxes CoordinateAxes );
    IAgVeCoordinateAxesPtr GetCoordinateAxes ( );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    enum AgEAttInclude GetInclude ( );
    void PutInclude (
        enum AgEAttInclude pVal );
    enum AgEExportToolVersionFormat GetVersionFormat ( );
    void PutVersionFormat (
        enum AgEExportToolVersionFormat pVal );
    IAgExportToolStepSizePtr GetStepSize ( );
    SAFEARRAY * GetSupportedCoordinateAxes ( );
    _bstr_t GetCentralBodyName ( );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateAxesType (
        /*[out,retval]*/ enum AgEAttCoordinateAxes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoordinateAxesType (
        /*[in]*/ enum AgEAttCoordinateAxes CoordinateAxes ) = 0;
      virtual HRESULT __stdcall get_CoordinateAxes (
        /*[out,retval]*/ struct IAgVeCoordinateAxes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Include (
        /*[out,retval]*/ enum AgEAttInclude * pVal ) = 0;
      virtual HRESULT __stdcall put_Include (
        /*[in]*/ enum AgEAttInclude pVal ) = 0;
      virtual HRESULT __stdcall get_VersionFormat (
        /*[out,retval]*/ enum AgEExportToolVersionFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_VersionFormat (
        /*[in]*/ enum AgEExportToolVersionFormat pVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("2d408a4f-3410-46a1-bb93-2ccd6e4b3e8f"))
IAgSaExportTools : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisCCSDSExportToolPtr GetEphemerisCCSDSExportTool ( );
    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVeEphemerisSpiceExportToolPtr GetEphemerisSpiceExportTool ( );
    IAgVeEphemerisCode500ExportToolPtr GetEphemerisCode500ExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisCCSDSExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisCCSDSExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetEphemerisSpiceExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisSpiceExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetEphemerisCode500ExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisCode500ExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

enum AgESpEnvSAAFluxLevel
{
    eSpEnvSAAFluxLevelUnknown = -1,
    eSpEnvSAAFluxLevelBackground3Sigma = 0,
    eSpEnvSAAFluxLevelHalfOfPeak = 1,
    eSpEnvSAAFluxLevelTenthOfPeak = 2
};

struct __declspec(uuid("c955f92b-bbfe-4b6b-8a3b-27d052a0f65b"))
IAgSpEnvSAAContour : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetChannel,put=PutChannel))
    enum AgESpEnvSAAChannel Channel;
    __declspec(property(get=GetFluxLevel,put=PutFluxLevel))
    enum AgESpEnvSAAFluxLevel FluxLevel;

    //
    // Wrapper methods for error-handling
    //

    enum AgESpEnvSAAChannel GetChannel ( );
    void PutChannel (
        enum AgESpEnvSAAChannel pVal );
    enum AgESpEnvSAAFluxLevel GetFluxLevel ( );
    void PutFluxLevel (
        enum AgESpEnvSAAFluxLevel pVal );
    double ComputeSAAFluxIntensity (
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Channel (
        /*[out,retval]*/ enum AgESpEnvSAAChannel * pVal ) = 0;
      virtual HRESULT __stdcall put_Channel (
        /*[in]*/ enum AgESpEnvSAAChannel pVal ) = 0;
      virtual HRESULT __stdcall get_FluxLevel (
        /*[out,retval]*/ enum AgESpEnvSAAFluxLevel * pVal ) = 0;
      virtual HRESULT __stdcall put_FluxLevel (
        /*[in]*/ enum AgESpEnvSAAFluxLevel pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSAAFluxIntensity (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pSAAFluxIntensity ) = 0;
};

struct __declspec(uuid("5ffb8471-a253-4784-ac63-4a3074abd91b"))
IAgVeSpEnvMagneticField : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMainField,put=PutMainField))
    enum AgESpEnvMagneticMainField MainField;
    __declspec(property(get=GetExternalField,put=PutExternalField))
    enum AgESpEnvMagneticExternalField ExternalField;
    __declspec(property(get=GetIGRF_UpdateRate,put=PutIGRF_UpdateRate))
    double IGRF_UpdateRate;

    //
    // Wrapper methods for error-handling
    //

    enum AgESpEnvMagneticMainField GetMainField ( );
    void PutMainField (
        enum AgESpEnvMagneticMainField pVal );
    enum AgESpEnvMagneticExternalField GetExternalField ( );
    void PutExternalField (
        enum AgESpEnvMagneticExternalField pVal );
    double GetIGRF_UpdateRate ( );
    void PutIGRF_UpdateRate (
        double pVal );
    HRESULT ComputeBField (
        const _variant_t & Time,
        double * pBx,
        double * pBy,
        double * pBz );
    SAFEARRAY * ComputeBFieldAsArray (
        const _variant_t & Time );
    double ComputeDipoleL (
        const _variant_t & Time );
    double ComputeMcIlwainL (
        const _variant_t & Time );
    double ComputeBBeq (
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MainField (
        /*[out,retval]*/ enum AgESpEnvMagneticMainField * pVal ) = 0;
      virtual HRESULT __stdcall put_MainField (
        /*[in]*/ enum AgESpEnvMagneticMainField pVal ) = 0;
      virtual HRESULT __stdcall get_ExternalField (
        /*[out,retval]*/ enum AgESpEnvMagneticExternalField * pVal ) = 0;
      virtual HRESULT __stdcall put_ExternalField (
        /*[in]*/ enum AgESpEnvMagneticExternalField pVal ) = 0;
      virtual HRESULT __stdcall get_IGRF_UpdateRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_IGRF_UpdateRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeBField (
        /*[in]*/ VARIANT Time,
        /*[in,out]*/ double * pBx,
        /*[in,out]*/ double * pBy,
        /*[in,out]*/ double * pBz ) = 0;
      virtual HRESULT __stdcall raw_ComputeBFieldAsArray (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDipoleL (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pL ) = 0;
      virtual HRESULT __stdcall raw_ComputeMcIlwainL (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pL ) = 0;
      virtual HRESULT __stdcall raw_ComputeBBeq (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pBBeq ) = 0;
};

enum AgEVeSpEnvShapeModel
{
    eVeSpEnvShapeModelUnknown = -1,
    eVeSpEnvShapeModelPlate = 0,
    eVeSpEnvShapeModelSphere = 1
};

struct __declspec(uuid("26f9627d-5526-4557-be3e-ee51910bbd0c"))
IAgVeSpEnvVehTemperature : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEarthAlbedo,put=PutEarthAlbedo))
    double EarthAlbedo;
    __declspec(property(get=GetMaterialEmissivity,put=PutMaterialEmissivity))
    double MaterialEmissivity;
    __declspec(property(get=GetMaterialAbsorptivity,put=PutMaterialAbsorptivity))
    double MaterialAbsorptivity;
    __declspec(property(get=GetDissipation,put=PutDissipation))
    double Dissipation;
    __declspec(property(get=GetCrossSectionalArea,put=PutCrossSectionalArea))
    double CrossSectionalArea;
    __declspec(property(get=GetShapeModel,put=PutShapeModel))
    enum AgEVeSpEnvShapeModel ShapeModel;
    __declspec(property(get=GetNormalVector,put=PutNormalVector))
    _bstr_t NormalVector;

    //
    // Wrapper methods for error-handling
    //

    double GetEarthAlbedo ( );
    void PutEarthAlbedo (
        double pVal );
    double GetMaterialEmissivity ( );
    void PutMaterialEmissivity (
        double pVal );
    double GetMaterialAbsorptivity ( );
    void PutMaterialAbsorptivity (
        double pVal );
    double GetDissipation ( );
    void PutDissipation (
        double pVal );
    double GetCrossSectionalArea ( );
    void PutCrossSectionalArea (
        double pVal );
    enum AgEVeSpEnvShapeModel GetShapeModel ( );
    void PutShapeModel (
        enum AgEVeSpEnvShapeModel pVal );
    _bstr_t GetNormalVector ( );
    void PutNormalVector (
        _bstr_t pVal );
    double ComputeTemperature (
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EarthAlbedo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EarthAlbedo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaterialEmissivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaterialEmissivity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaterialAbsorptivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaterialAbsorptivity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Dissipation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Dissipation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CrossSectionalArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossSectionalArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeModel (
        /*[out,retval]*/ enum AgEVeSpEnvShapeModel * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeModel (
        /*[in]*/ enum AgEVeSpEnvShapeModel pVal ) = 0;
      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NormalVector (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTemperature (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pTemperature ) = 0;
};

enum AgEVeSpEnvF10p7Source
{
    eVeSpEnvF10p7SourceUnknown = -1,
    eVeSpEnvF10p7SourceFile = 0,
    eVeSpEnvF10p7SourceSpecify = 1
};

enum AgEVeSpEnvMaterial
{
    eVeSpEnvMaterialUnknown = -1,
    eVeSpEnvMaterialAluminum = 0,
    eVeSpEnvMaterialBeryliumCopper = 1,
    eVeSpEnvMaterialCopper = 2,
    eVeSpEnvMaterialGlass = 3,
    eVeSpEnvMaterialGold = 4,
    eVeSpEnvMaterialIron = 5,
    eVeSpEnvMaterialMylar = 6,
    eVeSpEnvMaterialPlatinum = 7,
    eVeSpEnvMaterialSilver = 8,
    eVeSpEnvMaterialStainlessSteel = 9,
    eVeSpEnvMaterialTitanium = 10,
    eVeSpEnvMaterialUserDefined = 11
};

struct __declspec(uuid("b1198ea7-ad06-4c29-a8b9-82c37c2d8d38"))
IAgVeSpEnvParticleFlux : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetF10p7Source,put=PutF10p7Source))
    enum AgEVeSpEnvF10p7Source F10p7Source;
    __declspec(property(get=GetF10p7,put=PutF10p7))
    double F10p7;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    enum AgEVeSpEnvMaterial Material;
    __declspec(property(get=GetArea,put=PutArea))
    double Area;
    __declspec(property(get=GetPitDepth,put=PutPitDepth))
    double PitDepth;
    __declspec(property(get=GetUseSporadicMeteors,put=PutUseSporadicMeteors))
    VARIANT_BOOL UseSporadicMeteors;
    __declspec(property(get=GetMaterialDensity,put=PutMaterialDensity))
    double MaterialDensity;
    __declspec(property(get=GetTensileStrength,put=PutTensileStrength))
    double TensileStrength;
    __declspec(property(get=GetFluxFile,put=PutFluxFile))
    _bstr_t FluxFile;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeSpEnvF10p7Source GetF10p7Source ( );
    void PutF10p7Source (
        enum AgEVeSpEnvF10p7Source pVal );
    double GetF10p7 ( );
    void PutF10p7 (
        double pVal );
    enum AgEVeSpEnvMaterial GetMaterial ( );
    void PutMaterial (
        enum AgEVeSpEnvMaterial pVal );
    double GetArea ( );
    void PutArea (
        double pVal );
    double GetPitDepth ( );
    void PutPitDepth (
        double pVal );
    VARIANT_BOOL GetUseSporadicMeteors ( );
    void PutUseSporadicMeteors (
        VARIANT_BOOL pVal );
    double GetMaterialDensity ( );
    void PutMaterialDensity (
        double pVal );
    double GetTensileStrength ( );
    void PutTensileStrength (
        double pVal );
    _bstr_t GetFluxFile ( );
    void PutFluxFile (
        _bstr_t pVal );
    SAFEARRAY * GetParticleMassArray ( );
    double ComputeMeteorImpactFlux (
        const _variant_t & Time );
    double ComputeMeteorDamageImpactFlux (
        const _variant_t & Time );
    SAFEARRAY * ComputeMeteorImpactFluxDistribution (
        const _variant_t & Time );
    SAFEARRAY * ComputeMeteorDamageImpactFluxDistribution (
        const _variant_t & Time );
    double ComputeDebrisImpactFlux (
        const _variant_t & Time );
    double ComputeDebrisDamageImpactFlux (
        const _variant_t & Time );
    SAFEARRAY * ComputeDebrisImpactFluxDistribution (
        const _variant_t & Time );
    SAFEARRAY * ComputeDebrisDamageImpactFluxDistribution (
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_F10p7Source (
        /*[out,retval]*/ enum AgEVeSpEnvF10p7Source * pVal ) = 0;
      virtual HRESULT __stdcall put_F10p7Source (
        /*[in]*/ enum AgEVeSpEnvF10p7Source pVal ) = 0;
      virtual HRESULT __stdcall get_F10p7 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_F10p7 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ enum AgEVeSpEnvMaterial * pVal ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ enum AgEVeSpEnvMaterial pVal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Area (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PitDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PitDepth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseSporadicMeteors (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSporadicMeteors (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaterialDensity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaterialDensity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TensileStrength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TensileStrength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FluxFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FluxFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetParticleMassArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeMeteorImpactFlux (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pFlux ) = 0;
      virtual HRESULT __stdcall raw_ComputeMeteorDamageImpactFlux (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pFlux ) = 0;
      virtual HRESULT __stdcall raw_ComputeMeteorImpactFluxDistribution (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeMeteorDamageImpactFluxDistribution (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDebrisImpactFlux (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pFlux ) = 0;
      virtual HRESULT __stdcall raw_ComputeDebrisDamageImpactFlux (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pFlux ) = 0;
      virtual HRESULT __stdcall raw_ComputeDebrisImpactFluxDistribution (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDebrisDamageImpactFluxDistribution (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgEVeSpEnvComputationMode
{
    eVeSpEnvComputationModeUnknown = -1,
    eVeSpEnvComputationModeNASA = 0,
    eVeSpEnvComputationModeCRRES = 1,
    eVeSpEnvComputationModeRadiationOnly = 2,
    eVeSpEnvComputationModeAPEXRAD = 3,
    eVeSpEnvComputationModeCRRESRAD = 4
};

enum AgEVeSpEnvDoseChannel
{
    eVeSpEnvDoseChannelUnknown = -1,
    eVeSpEnvDoseChannelHighLET = 0,
    eVeSpEnvDoseChannelLowLET = 1,
    eVeSpEnvDoseChannelTotal = 2
};

enum AgEVeSpEnvDetectorType
{
    eVeSpEnvDetectorTypeUnknown = -1,
    eVeSpEnvDetectorTypeAir = 0,
    eVeSpEnvDetectorTypeAluminum = 1,
    eVeSpEnvDetectorTypeBone = 2,
    eVeSpEnvDetectorTypeCalcium = 3,
    eVeSpEnvDetectorTypeGallium = 4,
    eVeSpEnvDetectorTypeGraphite = 5,
    eVeSpEnvDetectorTypeLithium = 6,
    eVeSpEnvDetectorTypeSilicon = 7,
    eVeSpEnvDetectorTypeSiliconDioxide = 8,
    eVeSpEnvDetectorTypeTissue = 9,
    eVeSpEnvDetectorTypeWater = 10
};

enum AgEVeSpEnvApSource
{
    eVeSpEnvApSourceUnknown = -1,
    eVeSpEnvApSourceFile = 0,
    eVeSpEnvApSourceSpecify = 1
};

struct __declspec(uuid("59b0d7ba-4547-4e55-8538-145d72322a7b"))
IAgVeSpEnvRadDoseRateElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetShieldingThickness))
    double ShieldingThickness;
    __declspec(property(get=GetIsElectronDoseRateValid))
    VARIANT_BOOL IsElectronDoseRateValid;
    __declspec(property(get=GetIsElectronBremsstrahlungDoseRateValid))
    VARIANT_BOOL IsElectronBremsstrahlungDoseRateValid;
    __declspec(property(get=GetIsProtonDoseRateValid))
    VARIANT_BOOL IsProtonDoseRateValid;
    __declspec(property(get=GetIsTotalDoseRateValid))
    VARIANT_BOOL IsTotalDoseRateValid;

    //
    // Wrapper methods for error-handling
    //

    double GetShieldingThickness ( );
    VARIANT_BOOL GetIsElectronDoseRateValid ( );
    double ElectronDoseRate ( );
    VARIANT_BOOL GetIsElectronBremsstrahlungDoseRateValid ( );
    double ElectronBremsstrahlungDoseRate ( );
    VARIANT_BOOL GetIsProtonDoseRateValid ( );
    double ProtonDoseRate ( );
    VARIANT_BOOL GetIsTotalDoseRateValid ( );
    double TotalDoseRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShieldingThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsElectronDoseRateValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ElectronDoseRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsElectronBremsstrahlungDoseRateValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ElectronBremsstrahlungDoseRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsProtonDoseRateValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ProtonDoseRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsTotalDoseRateValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_TotalDoseRate (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("5cf80768-7701-4fe6-81d7-b2df074cd13a"))
IAgVeSpEnvRadDoseRateCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeSpEnvRadDoseRateElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeSpEnvRadDoseRateElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeSpEnvRadDoseRateElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

enum AgEVeSpEnvDetectorGeometry
{
    eVeSpEnvDetectorGeometryUnknown = -1,
    eVeSpEnvDetectorGeometrySemiInfiniteSlab = 0,
    eVeSpEnvDetectorGeometryFiniteSlab = 1,
    eVeSpEnvDetectorGeometrySpherical = 2
};

struct __declspec(uuid("e487caa4-9582-4091-a6f4-4f75503047b7"))
IAgVeSpEnvRadiation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetComputationMode,put=PutComputationMode))
    enum AgEVeSpEnvComputationMode ComputationMode;
    __declspec(property(get=GetDoseReportStep,put=PutDoseReportStep))
    double DoseReportStep;
    __declspec(property(get=GetFluxStatus))
    _bstr_t FluxStatus;
    __declspec(property(get=GetDoseChannel,put=PutDoseChannel))
    enum AgEVeSpEnvDoseChannel DoseChannel;
    __declspec(property(get=GetUseNuclearAttenuation,put=PutUseNuclearAttenuation))
    VARIANT_BOOL UseNuclearAttenuation;
    __declspec(property(get=GetDetectorType,put=PutDetectorType))
    enum AgEVeSpEnvDetectorType DetectorType;
    __declspec(property(get=GetShieldingThicknesses))
    STKUtil::IAgDoublesCollectionPtr ShieldingThicknesses;
    __declspec(property(get=GetApSource,put=PutApSource))
    enum AgEVeSpEnvApSource ApSource;
    __declspec(property(get=GetAp,put=PutAp))
    double Ap;
    __declspec(property(get=GetFluxFile,put=PutFluxFile))
    _bstr_t FluxFile;
    __declspec(property(get=GetIncludeNuclearAttenNeutrons,put=PutIncludeNuclearAttenNeutrons))
    VARIANT_BOOL IncludeNuclearAttenNeutrons;
    __declspec(property(get=GetDetectorGeometry,put=PutDetectorGeometry))
    enum AgEVeSpEnvDetectorGeometry DetectorGeometry;
    __declspec(property(get=GetUseModelEpoch,put=PutUseModelEpoch))
    VARIANT_BOOL UseModelEpoch;
    __declspec(property(get=GetShiftSAA,put=PutShiftSAA))
    VARIANT_BOOL ShiftSAA;
    __declspec(property(get=GetDoseIntegrationStep,put=PutDoseIntegrationStep))
    double DoseIntegrationStep;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeSpEnvComputationMode GetComputationMode ( );
    void PutComputationMode (
        enum AgEVeSpEnvComputationMode pVal );
    _bstr_t GetFluxStatus ( );
    enum AgEVeSpEnvDoseChannel GetDoseChannel ( );
    void PutDoseChannel (
        enum AgEVeSpEnvDoseChannel pVal );
    VARIANT_BOOL GetUseNuclearAttenuation ( );
    void PutUseNuclearAttenuation (
        VARIANT_BOOL pVal );
    enum AgEVeSpEnvDetectorType GetDetectorType ( );
    void PutDetectorType (
        enum AgEVeSpEnvDetectorType pVal );
    STKUtil::IAgDoublesCollectionPtr GetShieldingThicknesses ( );
    enum AgEVeSpEnvApSource GetApSource ( );
    void PutApSource (
        enum AgEVeSpEnvApSource pVal );
    double GetAp ( );
    void PutAp (
        double pVal );
    _bstr_t GetFluxFile ( );
    void PutFluxFile (
        _bstr_t pVal );
    VARIANT_BOOL GetIncludeNuclearAttenNeutrons ( );
    void PutIncludeNuclearAttenNeutrons (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetElectronEnergies ( );
    SAFEARRAY * GetProtonEnergies ( );
    SAFEARRAY * ComputeElectronFluxes (
        const _variant_t & Time );
    SAFEARRAY * ComputeProtonFluxes (
        const _variant_t & Time );
    IAgVeSpEnvRadDoseRateCollectionPtr ComputeDoseRates (
        const _variant_t & Time );
    enum AgEVeSpEnvDetectorGeometry GetDetectorGeometry ( );
    void PutDetectorGeometry (
        enum AgEVeSpEnvDetectorGeometry pVal );
    SAFEARRAY * ComputeElectronIntegralFluxes (
        const _variant_t & Time );
    SAFEARRAY * ComputeProtonIntegralFluxes (
        const _variant_t & Time );
    VARIANT_BOOL GetUseModelEpoch ( );
    void PutUseModelEpoch (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShiftSAA ( );
    void PutShiftSAA (
        VARIANT_BOOL pVal );
    double GetDoseIntegrationStep ( );
    void PutDoseIntegrationStep (
        double pVal );
    double GetDoseReportStep ( );
    void PutDoseReportStep (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComputationMode (
        /*[out,retval]*/ enum AgEVeSpEnvComputationMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ComputationMode (
        /*[in]*/ enum AgEVeSpEnvComputationMode pVal ) = 0;
      virtual HRESULT __stdcall get_FluxStatus (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DoseChannel (
        /*[out,retval]*/ enum AgEVeSpEnvDoseChannel * pVal ) = 0;
      virtual HRESULT __stdcall put_DoseChannel (
        /*[in]*/ enum AgEVeSpEnvDoseChannel pVal ) = 0;
      virtual HRESULT __stdcall get_UseNuclearAttenuation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseNuclearAttenuation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DetectorType (
        /*[out,retval]*/ enum AgEVeSpEnvDetectorType * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectorType (
        /*[in]*/ enum AgEVeSpEnvDetectorType pVal ) = 0;
      virtual HRESULT __stdcall get_ShieldingThicknesses (
        /*[out,retval]*/ struct STKUtil::IAgDoublesCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ApSource (
        /*[out,retval]*/ enum AgEVeSpEnvApSource * pVal ) = 0;
      virtual HRESULT __stdcall put_ApSource (
        /*[in]*/ enum AgEVeSpEnvApSource pVal ) = 0;
      virtual HRESULT __stdcall get_Ap (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ap (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FluxFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FluxFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeNuclearAttenNeutrons (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeNuclearAttenNeutrons (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetElectronEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetProtonEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeElectronFluxes (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeProtonFluxes (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDoseRates (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgVeSpEnvRadDoseRateCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DetectorGeometry (
        /*[out,retval]*/ enum AgEVeSpEnvDetectorGeometry * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectorGeometry (
        /*[in]*/ enum AgEVeSpEnvDetectorGeometry pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeElectronIntegralFluxes (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeProtonIntegralFluxes (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseModelEpoch (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseModelEpoch (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShiftSAA (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShiftSAA (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DoseIntegrationStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DoseIntegrationStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DoseReportStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DoseReportStep (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b6fc6079-c653-4956-9a37-8bc9ed24aa86"))
IAgVeSpEnvMagFieldLine : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIs2DVisible,put=PutIs2DVisible))
    VARIANT_BOOL Is2DVisible;
    __declspec(property(get=GetIs3DVisible,put=PutIs3DVisible))
    VARIANT_BOOL Is3DVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIs2DVisible ( );
    void PutIs2DVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIs3DVisible ( );
    void PutIs3DVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Is2DVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Is2DVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Is3DVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Is3DVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("8861997e-5c85-42bd-9627-47ba192b891f"))
IAgVeSpEnvGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMagFieldLine))
    IAgVeSpEnvMagFieldLinePtr MagFieldLine;

    //
    // Wrapper methods for error-handling
    //

    IAgVeSpEnvMagFieldLinePtr GetMagFieldLine ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MagFieldLine (
        /*[out,retval]*/ struct IAgVeSpEnvMagFieldLine * * ppVal ) = 0;
};

struct __declspec(uuid("be44a05e-7ee1-4c74-a970-9f2558390eb7"))
IAgVeSpEnvSpaceEnvironment : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSAAContour))
    IAgSpEnvSAAContourPtr SAAContour;
    __declspec(property(get=GetMagneticField))
    IAgVeSpEnvMagneticFieldPtr MagneticField;
    __declspec(property(get=GetVehTemperature))
    IAgVeSpEnvVehTemperaturePtr VehTemperature;
    __declspec(property(get=GetParticleFlux))
    IAgVeSpEnvParticleFluxPtr ParticleFlux;
    __declspec(property(get=GetRadiation))
    IAgVeSpEnvRadiationPtr Radiation;
    __declspec(property(get=GetGraphics))
    IAgVeSpEnvGraphicsPtr Graphics;

    //
    // Wrapper methods for error-handling
    //

    IAgSpEnvSAAContourPtr GetSAAContour ( );
    IAgVeSpEnvMagneticFieldPtr GetMagneticField ( );
    IAgVeSpEnvVehTemperaturePtr GetVehTemperature ( );
    IAgVeSpEnvParticleFluxPtr GetParticleFlux ( );
    IAgVeSpEnvRadiationPtr GetRadiation ( );
    IAgVeSpEnvGraphicsPtr GetGraphics ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SAAContour (
        /*[out,retval]*/ struct IAgSpEnvSAAContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MagneticField (
        /*[out,retval]*/ struct IAgVeSpEnvMagneticField * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VehTemperature (
        /*[out,retval]*/ struct IAgVeSpEnvVehTemperature * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ParticleFlux (
        /*[out,retval]*/ struct IAgVeSpEnvParticleFlux * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Radiation (
        /*[out,retval]*/ struct IAgVeSpEnvRadiation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgVeSpEnvGraphics * * ppVal ) = 0;
};

struct __declspec(uuid("b3bf8aec-86b2-47cf-b880-eaa5efa0eb0d"))
AgVeInertia;
    // [ default ] interface _IAgVeInertia
    // interface IAgVeInertia

struct __declspec(uuid("cd1046b6-36f9-4e99-ac51-0e6203ad61f2"))
_IAgVeInertia : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIxx,put=PutIxx))
    double Ixx;
    __declspec(property(get=GetIyy,put=PutIyy))
    double Iyy;
    __declspec(property(get=GetIzz,put=PutIzz))
    double Izz;
    __declspec(property(get=GetIxy,put=PutIxy))
    double Ixy;
    __declspec(property(get=GetIxz,put=PutIxz))
    double Ixz;
    __declspec(property(get=GetIyz,put=PutIyz))
    double Iyz;

    //
    // Wrapper methods for error-handling
    //

    double GetIxx ( );
    void PutIxx (
        double pVal );
    double GetIyy ( );
    void PutIyy (
        double pVal );
    double GetIzz ( );
    void PutIzz (
        double pVal );
    double GetIxy ( );
    void PutIxy (
        double pVal );
    double GetIxz ( );
    void PutIxz (
        double pVal );
    double GetIyz ( );
    void PutIyz (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Ixx (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ixx (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Iyy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Iyy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Izz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Izz (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Ixy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ixy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Ixz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ixz (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Iyz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Iyz (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("c212050f-b383-46c1-b2d4-e6b386762aec"))
AgVeMassProperties;
    // [ default ] interface _IAgVeMassProperties
    // interface IAgVeMassProperties

struct __declspec(uuid("4769f8b0-2dbb-4f06-b36b-471db0a69fb6"))
_IAgVeMassProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMass,put=PutMass))
    double Mass;
    __declspec(property(get=GetInertia))
    IAgVeInertiaPtr Inertia;

    //
    // Wrapper methods for error-handling
    //

    double GetMass ( );
    void PutMass (
        double pVal );
    IAgVeInertiaPtr GetInertia ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Mass (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Mass (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Inertia (
        /*[out,retval]*/ struct IAgVeInertia * * ppVal ) = 0;
};

struct __declspec(uuid("399b3339-088f-496f-ac9f-9bc8a81a6faf"))
AgVeBreakAngleBreakByLatitude;
    // [ default ] interface _IAgVeBreakAngleBreakByLatitude
    // interface IAgVeBreakAngleBreakByLatitude

struct __declspec(uuid("0fa6bddd-bde1-4287-aeee-2adc953d1363"))
_IAgVeBreakAngleBreakByLatitude : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;

    //
    // Wrapper methods for error-handling
    //

    double GetLatitude ( );
    void PutLatitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5020789b-1c8c-4e92-91d3-ca60d4e7418a"))
IAgVeBreakAngleBreakByLatitude : IAgVeBreakAngle
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;

    //
    // Wrapper methods for error-handling
    //

    double GetLatitude ( );
    void PutLatitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b1c80de8-abe3-4b88-945f-a7e93617e4f7"))
AgVeBreakAngleBreakByLongitude;
    // [ default ] interface _IAgVeBreakAngleBreakByLongitude
    // interface IAgVeBreakAngleBreakByLongitude

struct __declspec(uuid("0f216f05-6f97-449b-8894-8ef83e9a67bb"))
_IAgVeBreakAngleBreakByLongitude : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;

    //
    // Wrapper methods for error-handling
    //

    double GetLongitude ( );
    void PutLongitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("7146b7b0-908d-4e64-8b3a-112865342976"))
IAgVeBreakAngleBreakByLongitude : IAgVeBreakAngle
{
    //
    // Property data
    //

    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;

    //
    // Wrapper methods for error-handling
    //

    double GetLongitude ( );
    void PutLongitude (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("6b26e3f9-6dd2-48bd-a0ef-fea66dbfac19"))
AgVeDefinition;
    // [ default ] interface _IAgVeDefinition
    // interface IAgVeDefinition

struct __declspec(uuid("872689c8-0fc2-46d5-9c45-97cae3b6fd3f"))
_IAgVeDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBreakAngleType))
    enum AgEVeBreakAngleType BreakAngleType;
    __declspec(property(get=GetBreakAngle))
    IAgVeBreakAnglePtr BreakAngle;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgEVeDirection Direction;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeBreakAngleType GetBreakAngleType ( );
    HRESULT SetBreakAngleType (
        enum AgEVeBreakAngleType BreakAngleType );
    IAgVeBreakAnglePtr GetBreakAngle ( );
    enum AgEVeDirection GetDirection ( );
    void PutDirection (
        enum AgEVeDirection pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BreakAngleType (
        /*[out,retval]*/ enum AgEVeBreakAngleType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetBreakAngleType (
        /*[in]*/ enum AgEVeBreakAngleType BreakAngleType ) = 0;
      virtual HRESULT __stdcall get_BreakAngle (
        /*[out,retval]*/ struct IAgVeBreakAngle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgEVeDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgEVeDirection pVal ) = 0;
};

struct __declspec(uuid("630fac76-6a24-4258-9a99-b7dce1976050"))
AgVeRepeatGroundTrackNumbering;
    // [ default ] interface _IAgVeRepeatGroundTrackNumbering
    // interface IAgVeRepeatGroundTrackNumbering

struct __declspec(uuid("87045b18-6a86-4d5c-9dee-a1560a171a92"))
_IAgVeRepeatGroundTrackNumbering : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstPathNum,put=PutFirstPathNum))
    long FirstPathNum;
    __declspec(property(get=GetRevsToRepeat,put=PutRevsToRepeat))
    long RevsToRepeat;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstPathNum ( );
    void PutFirstPathNum (
        long pVal );
    long GetRevsToRepeat ( );
    void PutRevsToRepeat (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstPathNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPathNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RevsToRepeat (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RevsToRepeat (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("d8da38d8-74f7-4201-a02c-2fd907ea52e9"))
AgVePassNumberingDateOfFirstPass;
    // [ default ] interface _IAgVePassNumberingDateOfFirstPass
    // interface IAgVePassNumberingDateOfFirstPass

struct __declspec(uuid("fca1a7a0-5fad-4b80-86d5-87d394736f1f"))
_IAgVePassNumberingDateOfFirstPass : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstPassNum,put=PutFirstPassNum))
    long FirstPassNum;
    __declspec(property(get=GetDate,put=PutDate))
    _variant_t Date;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstPassNum ( );
    void PutFirstPassNum (
        long pVal );
    _variant_t GetDate ( );
    void PutDate (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstPassNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPassNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Date (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Date (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("aabe7b3b-27e8-43df-a8db-d0ee1b313fb3"))
IAgVePassNumberingDateOfFirstPass : IAgVePassNumbering
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstPassNum,put=PutFirstPassNum))
    long FirstPassNum;
    __declspec(property(get=GetDate,put=PutDate))
    _variant_t Date;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstPassNum ( );
    void PutFirstPassNum (
        long pVal );
    _variant_t GetDate ( );
    void PutDate (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstPassNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPassNum (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Date (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Date (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("1c7e7800-e20f-4e05-92b2-236d18b97bd7"))
AgVePassNumberingFirstPassNum;
    // [ default ] interface _IAgVePassNumberingFirstPassNum
    // interface IAgVePassNumberingFirstPassNum

struct __declspec(uuid("2b244e56-2ae8-405b-918a-6a68d54e86b6"))
_IAgVePassNumberingFirstPassNum : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstPassNum,put=PutFirstPassNum))
    long FirstPassNum;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstPassNum ( );
    void PutFirstPassNum (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstPassNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPassNum (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("94d629fb-3c5b-4fd0-9611-06dd36348023"))
IAgVePassNumberingFirstPassNum : IAgVePassNumbering
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstPassNum,put=PutFirstPassNum))
    long FirstPassNum;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstPassNum ( );
    void PutFirstPassNum (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstPassNum (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPassNum (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("d9008bc2-9656-458e-8e40-fec5df4e43f9"))
AgVePassBreak;
    // [ default ] interface _IAgVePassBreak
    // interface IAgVePassBreak

struct __declspec(uuid("c8765378-1e26-47ad-86bf-3d25ed0c41cf"))
_IAgVePassBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefinition))
    IAgVeDefinitionPtr Definition;
    __declspec(property(get=GetPartialPassMeasurement,put=PutPartialPassMeasurement))
    enum AgEVePartialPassMeasurement PartialPassMeasurement;
    __declspec(property(get=GetCoordinateSystem,put=PutCoordinateSystem))
    enum AgEVeCoordinateSystem CoordinateSystem;
    __declspec(property(get=GetRepeatGroundTrackNumbering))
    IAgVeRepeatGroundTrackNumberingPtr RepeatGroundTrackNumbering;
    __declspec(property(get=GetPassNumberingType))
    enum AgEVePassNumbering PassNumberingType;
    __declspec(property(get=GetPassNumbering))
    IAgVePassNumberingPtr PassNumbering;
    __declspec(property(get=GetSupportedCoordinateSystems))
    SAFEARRAY * SupportedCoordinateSystems;

    //
    // Wrapper methods for error-handling
    //

    IAgVeDefinitionPtr GetDefinition ( );
    enum AgEVePartialPassMeasurement GetPartialPassMeasurement ( );
    void PutPartialPassMeasurement (
        enum AgEVePartialPassMeasurement pVal );
    enum AgEVeCoordinateSystem GetCoordinateSystem ( );
    void PutCoordinateSystem (
        enum AgEVeCoordinateSystem pVal );
    IAgVeRepeatGroundTrackNumberingPtr GetRepeatGroundTrackNumbering ( );
    enum AgEVePassNumbering GetPassNumberingType ( );
    HRESULT SetPassNumberingType (
        enum AgEVePassNumbering PassNumbering );
    IAgVePassNumberingPtr GetPassNumbering ( );
    SAFEARRAY * GetSupportedCoordinateSystems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Definition (
        /*[out,retval]*/ struct IAgVeDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PartialPassMeasurement (
        /*[out,retval]*/ enum AgEVePartialPassMeasurement * pVal ) = 0;
      virtual HRESULT __stdcall put_PartialPassMeasurement (
        /*[in]*/ enum AgEVePartialPassMeasurement pVal ) = 0;
      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ enum AgEVeCoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystem (
        /*[in]*/ enum AgEVeCoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_RepeatGroundTrackNumbering (
        /*[out,retval]*/ struct IAgVeRepeatGroundTrackNumbering * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassNumberingType (
        /*[out,retval]*/ enum AgEVePassNumbering * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPassNumberingType (
        /*[in]*/ enum AgEVePassNumbering PassNumbering ) = 0;
      virtual HRESULT __stdcall get_PassNumbering (
        /*[out,retval]*/ struct IAgVePassNumbering * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateSystems (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("cad623f4-c67e-460b-9559-d29c914980b7"))
AgVeCentralBodies;
    // [ default ] interface _IAgVeCentralBodies
    // interface IAgVeCentralBodies

struct __declspec(uuid("e34da831-98ae-4e1a-8027-ae739074eabc"))
_IAgVeCentralBodies : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableCentralBodies))
    SAFEARRAY * AvailableCentralBodies;
    __declspec(property(get=GetAssignedCentralBodies))
    SAFEARRAY * AssignedCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAvailableCentralBodies ( );
    VARIANT_BOOL IsCentralBodyAssigned (
        _bstr_t CentralBody );
    SAFEARRAY * GetAssignedCentralBodies ( );
    HRESULT AssignCentralBody (
        _bstr_t CentralBody );
    HRESULT RemoveCentralBody (
        _bstr_t CentralBody );
    HRESULT RemoveAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AvailableCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsCentralBodyAssigned (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ VARIANT_BOOL * pIsAssigned ) = 0;
      virtual HRESULT __stdcall get_AssignedCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AssignCentralBody (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveCentralBody (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
};

struct __declspec(uuid("f3be7985-e80b-481f-a90b-4602ac946ed9"))
AgSaGraphics;
    // [ default ] interface _IAgSaGraphics
    // interface IAgSaGraphics

struct __declspec(uuid("4901ac71-7d14-42d9-84c0-a4d21eb31b58"))
_IAgSaGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetTimeEvents))
    IAgVeGfxTimeEventsCollectionPtr TimeEvents;
    __declspec(property(get=GetPasses))
    IAgVeGfxPassesPtr Passes;
    __declspec(property(get=GetPassData))
    IAgVeGfxOrbitPassDataPtr PassData;
    __declspec(property(get=GetResolution))
    IAgVeGfxPassResolutionPtr Resolution;
    __declspec(property(get=GetElevContours))
    IAgVeGfxElevContoursPtr ElevContours;
    __declspec(property(get=GetSAA))
    IAgVeGfxSAAPtr SAA;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetSwath))
    IAgVeGfxSwathPtr Swath;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetGroundTrackCentralBodyDisplay))
    IAgVeCentralBodiesPtr GroundTrackCentralBodyDisplay;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxTimeEventsCollectionPtr GetTimeEvents ( );
    IAgVeGfxPassesPtr GetPasses ( );
    IAgVeGfxOrbitPassDataPtr GetPassData ( );
    IAgVeGfxPassResolutionPtr GetResolution ( );
    IAgVeGfxElevContoursPtr GetElevContours ( );
    IAgVeGfxSAAPtr GetSAA ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxSwathPtr GetSwath ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    IAgVeCentralBodiesPtr GetGroundTrackCentralBodyDisplay ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimeEvents (
        /*[out,retval]*/ struct IAgVeGfxTimeEventsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Passes (
        /*[out,retval]*/ struct IAgVeGfxPasses * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxOrbitPassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxPassResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeGfxElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeGfxSAA * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgVeGfxSwath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GroundTrackCentralBodyDisplay (
        /*[out,retval]*/ struct IAgVeCentralBodies * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("d1fa5725-0e6b-4a23-b6fd-e67199987394"))
AgSaVO;
    // [ default ] interface _IAgSaVO
    // interface IAgSaVO

struct __declspec(uuid("de98a9eb-bf7d-43ec-8c44-ca65fc2c8216"))
AgVeEllipseDataElement;
    // [ default ] interface _IAgVeEllipseDataElement
    // interface IAgVeEllipseDataElement

struct __declspec(uuid("337cf074-a2e1-49e4-9a4f-39e0a257051b"))
_IAgVeEllipseDataElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    _variant_t Time;
    __declspec(property(get=GetCustomPosition,put=PutCustomPosition))
    VARIANT_BOOL CustomPosition;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    _variant_t Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    _variant_t Longitude;
    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;
    __declspec(property(get=GetSemiMinorAxis,put=PutSemiMinorAxis))
    double SemiMinorAxis;
    __declspec(property(get=GetBearing,put=PutBearing))
    _variant_t Bearing;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    void PutTime (
        const _variant_t & pVal );
    VARIANT_BOOL GetCustomPosition ( );
    void PutCustomPosition (
        VARIANT_BOOL pVal );
    _variant_t GetLatitude ( );
    void PutLatitude (
        const _variant_t & pVal );
    _variant_t GetLongitude ( );
    void PutLongitude (
        const _variant_t & pVal );
    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pVal );
    double GetSemiMinorAxis ( );
    void PutSemiMinorAxis (
        double pVal );
    _variant_t GetBearing ( );
    void PutBearing (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_CustomPosition (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomPosition (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMinorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMinorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("2914e9d9-3c67-465d-9079-869426b2fbaf"))
AgVeEllipseDataCollection;
    // [ default ] interface IUnknown
    // interface IAgVeEllipseDataCollection

struct __declspec(uuid("f4a5a42b-eaf1-457b-976a-8568e75d1f06"))
AgVeGroundEllipseElement;
    // [ default ] interface _IAgVeGroundEllipseElement
    // interface IAgVeGroundEllipseElement

struct __declspec(uuid("47443d32-e0dd-4c01-bc64-ddb7fa1e94d8"))
_IAgVeGroundEllipseElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEllipseName,put=PutEllipseName))
    _bstr_t EllipseName;
    __declspec(property(get=GetEllipseData))
    IAgVeEllipseDataCollectionPtr EllipseData;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEllipseName ( );
    void PutEllipseName (
        _bstr_t pVal );
    IAgVeEllipseDataCollectionPtr GetEllipseData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EllipseName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EllipseName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EllipseData (
        /*[out,retval]*/ struct IAgVeEllipseDataCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("195fd0ce-d627-489f-b60e-6de22821bcb5"))
AgSaVOModel;
    // [ default ] interface _IAgSaVOModel
    // interface IAgVOModel
    // interface IAgSaVOModel

struct __declspec(uuid("d7f73772-28ca-44fb-b0ad-747e66d3f92f"))
_IAgSaVOModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;
    __declspec(property(get=GetDetailThreshold))
    IAgVODetailThresholdPtr DetailThreshold;
    __declspec(property(get=GetModelData))
    IAgVOModelDataPtr ModelData;
    __declspec(property(get=GetModelType,put=PutModelType))
    enum AgEModelType ModelType;
    __declspec(property(get=GetArticulation))
    IAgVOModelArticPtr Articulation;
    __declspec(property(get=GetOrbitMarker))
    IAgVOMarkerPtr OrbitMarker;
    __declspec(property(get=GetGroundMarker))
    IAgVOMarkerPtr GroundMarker;
    __declspec(property(get=GetSolarPanelsPointAtSun,put=PutSolarPanelsPointAtSun))
    VARIANT_BOOL SolarPanelsPointAtSun;
    __declspec(property(get=GetIsPointVisible,put=PutIsPointVisible))
    VARIANT_BOOL IsPointVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    _variant_t PointSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pShow );
    double GetScaleValue ( );
    void PutScaleValue (
        double pScale );
    IAgVODetailThresholdPtr GetDetailThreshold ( );
    IAgVOModelDataPtr GetModelData ( );
    enum AgEModelType GetModelType ( );
    void PutModelType (
        enum AgEModelType pType );
    IAgVOModelArticPtr GetArticulation ( );
    IAgVOMarkerPtr GetOrbitMarker ( );
    IAgVOMarkerPtr GetGroundMarker ( );
    VARIANT_BOOL GetSolarPanelsPointAtSun ( );
    void PutSolarPanelsPointAtSun (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPointVisible ( );
    void PutIsPointVisible (
        VARIANT_BOOL pVal );
    _variant_t GetPointSize ( );
    void PutPointSize (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pScale ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pScale ) = 0;
      virtual HRESULT __stdcall get_DetailThreshold (
        /*[out,retval]*/ struct IAgVODetailThreshold * * ppAgVODetailThreshold ) = 0;
      virtual HRESULT __stdcall get_ModelData (
        /*[out,retval]*/ struct IAgVOModelData * * pVal ) = 0;
      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ enum AgEModelType * pType ) = 0;
      virtual HRESULT __stdcall put_ModelType (
        /*[in]*/ enum AgEModelType pType ) = 0;
      virtual HRESULT __stdcall get_Articulation (
        /*[out,retval]*/ struct IAgVOModelArtic * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OrbitMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SolarPanelsPointAtSun (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SolarPanelsPointAtSun (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("218c2076-4e36-4e14-91dc-d72ad3c138cd"))
AgVeEclipseBodies;
    // [ default ] interface _IAgVeEclipseBodies
    // interface IAgVeEclipseBodies

struct __declspec(uuid("333638bf-e4e8-496f-8634-8eccef4703a6"))
_IAgVeEclipseBodies : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseCustomizedList,put=PutUseCustomizedList))
    VARIANT_BOOL UseCustomizedList;
    __declspec(property(get=GetAvailableCentralBodies))
    SAFEARRAY * AvailableCentralBodies;
    __declspec(property(get=GetAssignedCentralBodies))
    SAFEARRAY * AssignedCentralBodies;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseCustomizedList ( );
    void PutUseCustomizedList (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetAvailableCentralBodies ( );
    VARIANT_BOOL IsCentralBodyAssigned (
        _bstr_t CentralBody );
    SAFEARRAY * GetAssignedCentralBodies ( );
    HRESULT AssignCentralBody (
        _bstr_t CentralBody );
    HRESULT RemoveCentralBody (
        _bstr_t CentralBody );
    HRESULT RemoveAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseCustomizedList (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseCustomizedList (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsCentralBodyAssigned (
        /*[in]*/ BSTR CentralBody,
        /*[out,retval]*/ VARIANT_BOOL * pIsAssigned ) = 0;
      virtual HRESULT __stdcall get_AssignedCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AssignCentralBody (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveCentralBody (
        /*[in]*/ BSTR CentralBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
};

struct __declspec(uuid("4ea5f8ce-ef9a-4348-895f-8040daf3c433"))
AgVeVector;
    // [ default ] interface _IAgVeVector
    // interface IAgVeVector

struct __declspec(uuid("c346b45c-986a-4048-a50b-f7b7ad8d84c1"))
_IAgVeVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBody))
    STKUtil::IAgDirectionPtr Body;
    __declspec(property(get=GetReferenceVector,put=PutReferenceVector))
    _bstr_t ReferenceVector;
    __declspec(property(get=GetAvailableReferenceVectors))
    SAFEARRAY * AvailableReferenceVectors;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDirectionPtr GetBody ( );
    _bstr_t GetReferenceVector ( );
    void PutReferenceVector (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableReferenceVectors ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceVector (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableReferenceVectors (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("29c3272f-3f37-45b3-97a8-d391d7b2e08b"))
IAgVeVector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBody))
    STKUtil::IAgDirectionPtr Body;
    __declspec(property(get=GetReferenceVector,put=PutReferenceVector))
    _bstr_t ReferenceVector;
    __declspec(property(get=GetAvailableReferenceVectors))
    SAFEARRAY * AvailableReferenceVectors;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDirectionPtr GetBody ( );
    _bstr_t GetReferenceVector ( );
    void PutReferenceVector (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableReferenceVectors ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceVector (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableReferenceVectors (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("2c8bd21e-04ce-46b5-95ba-17b426c55c65"))
AgVeRateOffset;
    // [ default ] interface _IAgVeRateOffset
    // interface IAgVeRateOffset

struct __declspec(uuid("0783f3a6-41d4-4fc7-ad84-40b73c092a5a"))
_IAgVeRateOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRate,put=PutRate))
    double Rate;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;

    //
    // Wrapper methods for error-handling
    //

    double GetRate ( );
    void PutRate (
        double pVal );
    double GetOffset ( );
    void PutOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("7df8af73-2fd6-4a84-8834-9ca72dd9d143"))
IAgVeRateOffset : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRate,put=PutRate))
    double Rate;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;

    //
    // Wrapper methods for error-handling
    //

    double GetRate ( );
    void PutRate (
        double pVal );
    double GetOffset ( );
    void PutOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e15ee143-e6c0-4ad0-a5ff-d4101df55259"))
AgVeProfileAlignedAndConstrained;
    // [ default ] interface _IAgVeProfileAlignedAndConstrained
    // interface IAgVeProfileAlignedAndConstrained
    // interface IAgVeAttProfile

struct __declspec(uuid("e47f535e-acf2-4d3e-9832-960299fd349c"))
_IAgVeProfileAlignedAndConstrained : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetAlignedVector))
    IAgVeVectorPtr AlignedVector;
    __declspec(property(get=GetConstrainedVector))
    IAgVeVectorPtr ConstrainedVector;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    IAgVeVectorPtr GetAlignedVector ( );
    IAgVeVectorPtr GetConstrainedVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AlignedVector (
        /*[out,retval]*/ struct IAgVeVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedVector (
        /*[out,retval]*/ struct IAgVeVector * * ppVal ) = 0;
};

struct __declspec(uuid("11f84bf2-f54e-47af-83a8-15deb421b23f"))
IAgVeAttProfile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("a60965bf-9f59-4836-aee7-d324234790a7"))
IAgVeProfileAlignedAndConstrained : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignedVector))
    IAgVeVectorPtr AlignedVector;
    __declspec(property(get=GetConstrainedVector))
    IAgVeVectorPtr ConstrainedVector;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVectorPtr GetAlignedVector ( );
    IAgVeVectorPtr GetConstrainedVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AlignedVector (
        /*[out,retval]*/ struct IAgVeVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedVector (
        /*[out,retval]*/ struct IAgVeVector * * ppVal ) = 0;
};

struct __declspec(uuid("759a5a9f-fae9-47ce-87e9-da6a237743d9"))
AgVeProfileInertial;
    // [ default ] interface _IAgVeProfileInertial
    // interface IAgVeProfileInertial
    // interface IAgVeAttProfile

struct __declspec(uuid("7099045f-7923-4d53-817b-8c5d210b71c6"))
_IAgVeProfileInertial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetInertial))
    STKUtil::IAgOrientationPtr Inertial;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    STKUtil::IAgOrientationPtr GetInertial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
};

struct __declspec(uuid("be442ae1-405c-476a-82c7-86b76e4e03df"))
IAgVeProfileInertial : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetInertial))
    STKUtil::IAgOrientationPtr Inertial;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgOrientationPtr GetInertial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
};

struct __declspec(uuid("f08aac5c-83eb-498d-ac7f-00560acfeea8"))
AgVeProfileConstraintOffset;
    // [ default ] interface _IAgVeProfileConstraintOffset
    // interface IAgVeProfileConstraintOffset
    // interface IAgVeAttProfile

struct __declspec(uuid("9c51d19c-fffe-465e-be64-8aa3d5767f7c"))
_IAgVeProfileConstraintOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetConstraintOffset,put=PutConstraintOffset))
    double ConstraintOffset;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    double GetConstraintOffset ( );
    void PutConstraintOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintOffset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d682e3bc-c4ba-4156-b324-ca889d9e961b"))
IAgVeProfileConstraintOffset : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraintOffset,put=PutConstraintOffset))
    double ConstraintOffset;

    //
    // Wrapper methods for error-handling
    //

    double GetConstraintOffset ( );
    void PutConstraintOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstraintOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintOffset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d9d11a17-0865-4af9-94f4-f75fa2f299e6"))
AgVeProfileFixedInAxes;
    // [ default ] interface _IAgVeProfileFixedInAxes
    // interface IAgVeProfileFixedInAxes
    // interface IAgVeAttProfile

struct __declspec(uuid("990e48ed-95f7-4b74-9ffb-9b6791cb5f0a"))
_IAgVeProfileFixedInAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    _bstr_t ReferenceAxes;
    __declspec(property(get=GetAvailableReferenceAxes))
    SAFEARRAY * AvailableReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    _bstr_t GetReferenceAxes ( );
    void PutReferenceAxes (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableReferenceAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("0dfa7e9f-cf04-4022-ad58-b663eaf60481"))
IAgVeProfileFixedInAxes : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetReferenceAxes,put=PutReferenceAxes))
    _bstr_t ReferenceAxes;
    __declspec(property(get=GetAvailableReferenceAxes))
    SAFEARRAY * AvailableReferenceAxes;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgOrientationPtr GetOrientation ( );
    _bstr_t GetReferenceAxes ( );
    void PutReferenceAxes (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableReferenceAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceAxes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableReferenceAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("d369d97b-4e9e-4398-bb2c-46cc6c3007fa"))
AgVeProfilePrecessingSpin;
    // [ default ] interface _IAgVeProfilePrecessingSpin
    // interface IAgVeProfilePrecessingSpin
    // interface IAgVeAttProfile

struct __declspec(uuid("6783a70d-b389-4a96-bb2e-b27678c6db95"))
_IAgVeProfilePrecessingSpin : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetBody))
    STKUtil::IAgDirectionPtr Body;
    __declspec(property(get=GetInertialPrecession))
    STKUtil::IAgDirectionPtr InertialPrecession;
    __declspec(property(get=GetPrecession))
    IAgVeRateOffsetPtr Precession;
    __declspec(property(get=GetSpin))
    IAgVeRateOffsetPtr Spin;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetNutationAngle,put=PutNutationAngle))
    double NutationAngle;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    STKUtil::IAgDirectionPtr GetBody ( );
    STKUtil::IAgDirectionPtr GetInertialPrecession ( );
    IAgVeRateOffsetPtr GetPrecession ( );
    IAgVeRateOffsetPtr GetSpin ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    double GetNutationAngle ( );
    void PutNutationAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_InertialPrecession (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Precession (
        /*[out,retval]*/ struct IAgVeRateOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Spin (
        /*[out,retval]*/ struct IAgVeRateOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_NutationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NutationAngle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("07134e39-80e5-43d0-95ff-822e3f36fd3f"))
IAgVeProfilePrecessingSpin : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetBody))
    STKUtil::IAgDirectionPtr Body;
    __declspec(property(get=GetInertialPrecession))
    STKUtil::IAgDirectionPtr InertialPrecession;
    __declspec(property(get=GetPrecession))
    IAgVeRateOffsetPtr Precession;
    __declspec(property(get=GetSpin))
    IAgVeRateOffsetPtr Spin;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetNutationAngle,put=PutNutationAngle))
    double NutationAngle;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDirectionPtr GetBody ( );
    STKUtil::IAgDirectionPtr GetInertialPrecession ( );
    IAgVeRateOffsetPtr GetPrecession ( );
    IAgVeRateOffsetPtr GetSpin ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    double GetNutationAngle ( );
    void PutNutationAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_InertialPrecession (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Precession (
        /*[out,retval]*/ struct IAgVeRateOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Spin (
        /*[out,retval]*/ struct IAgVeRateOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_NutationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NutationAngle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("8998182b-f9c9-4f35-abe9-29fdbcc4407b"))
AgVeProfileSpinAligned;
    // [ default ] interface _IAgVeProfileSpinAligned
    // interface IAgVeProfileSpinAligned
    // interface IAgVeAttProfile

struct __declspec(uuid("b12a6026-8fc2-4bc9-a92e-3176dd7a7e08"))
_IAgVeProfileSpinAligned : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetBody))
    STKUtil::IAgDirectionPtr Body;
    __declspec(property(get=GetPrecession))
    IAgVeRateOffsetPtr Precession;
    __declspec(property(get=GetSpin))
    IAgVeRateOffsetPtr Spin;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetNutationAngle,put=PutNutationAngle))
    double NutationAngle;
    __declspec(property(get=GetReferenceVector,put=PutReferenceVector))
    _bstr_t ReferenceVector;
    __declspec(property(get=GetAvailableReferenceVectors))
    SAFEARRAY * AvailableReferenceVectors;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    STKUtil::IAgDirectionPtr GetBody ( );
    IAgVeRateOffsetPtr GetPrecession ( );
    IAgVeRateOffsetPtr GetSpin ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    double GetNutationAngle ( );
    void PutNutationAngle (
        double pVal );
    _bstr_t GetReferenceVector ( );
    void PutReferenceVector (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableReferenceVectors ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Precession (
        /*[out,retval]*/ struct IAgVeRateOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Spin (
        /*[out,retval]*/ struct IAgVeRateOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_NutationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NutationAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceVector (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableReferenceVectors (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("97d8b598-d4ee-47e2-bb3b-a688a7149e27"))
IAgVeProfileSpinAligned : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetBody))
    STKUtil::IAgDirectionPtr Body;
    __declspec(property(get=GetPrecession))
    IAgVeRateOffsetPtr Precession;
    __declspec(property(get=GetSpin))
    IAgVeRateOffsetPtr Spin;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetNutationAngle,put=PutNutationAngle))
    double NutationAngle;
    __declspec(property(get=GetReferenceVector,put=PutReferenceVector))
    _bstr_t ReferenceVector;
    __declspec(property(get=GetAvailableReferenceVectors))
    SAFEARRAY * AvailableReferenceVectors;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDirectionPtr GetBody ( );
    IAgVeRateOffsetPtr GetPrecession ( );
    IAgVeRateOffsetPtr GetSpin ( );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    double GetNutationAngle ( );
    void PutNutationAngle (
        double pVal );
    _bstr_t GetReferenceVector ( );
    void PutReferenceVector (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableReferenceVectors ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Precession (
        /*[out,retval]*/ struct IAgVeRateOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Spin (
        /*[out,retval]*/ struct IAgVeRateOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_NutationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NutationAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceVector (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableReferenceVectors (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("de160ebe-605e-44aa-b69c-0886e1547562"))
AgVeProfileSpinAboutXXX;
    // [ default ] interface _IAgVeProfileSpinAboutXXX
    // interface IAgVeProfileSpinAboutXXX
    // interface IAgVeAttProfile

struct __declspec(uuid("94a8c15d-1ed6-446e-9d3b-467b8c98da46"))
_IAgVeProfileSpinAboutXXX : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetRate,put=PutRate))
    double Rate;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    double GetRate ( );
    void PutRate (
        double pVal );
    double GetOffset ( );
    void PutOffset (
        double pVal );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("f0cb1966-0b55-489c-9fed-9f06db24bff3"))
IAgVeProfileSpinAboutXXX : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetRate,put=PutRate))
    double Rate;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    double GetRate ( );
    void PutRate (
        double pVal );
    double GetOffset ( );
    void PutOffset (
        double pVal );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("7d3e989b-9fb5-4297-b2ef-fc1cdc61cc04"))
AgVeProfileSpinning;
    // [ default ] interface _IAgVeProfileSpinning
    // interface IAgVeProfileSpinning
    // interface IAgVeAttProfile

struct __declspec(uuid("03b948a9-163b-403f-ad2e-830e72fb1729"))
_IAgVeProfileSpinning : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetBody))
    STKUtil::IAgDirectionPtr Body;
    __declspec(property(get=GetInertial))
    STKUtil::IAgDirectionPtr Inertial;
    __declspec(property(get=GetRate,put=PutRate))
    double Rate;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    STKUtil::IAgDirectionPtr GetBody ( );
    STKUtil::IAgDirectionPtr GetInertial ( );
    double GetRate ( );
    void PutRate (
        double pVal );
    double GetOffset ( );
    void PutOffset (
        double pVal );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("9d60fe05-01a2-4f28-be17-c2cc41d7d09a"))
IAgVeProfileSpinning : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetBody))
    STKUtil::IAgDirectionPtr Body;
    __declspec(property(get=GetInertial))
    STKUtil::IAgDirectionPtr Inertial;
    __declspec(property(get=GetRate,put=PutRate))
    double Rate;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDirectionPtr GetBody ( );
    STKUtil::IAgDirectionPtr GetInertial ( );
    double GetRate ( );
    void PutRate (
        double pVal );
    double GetOffset ( );
    void PutOffset (
        double pVal );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("72e42abb-f5e0-46f9-92d6-61ccd47f7a97"))
AgVeProfileAlignmentOffset;
    // [ default ] interface _IAgVeProfileAlignmentOffset
    // interface IAgVeProfileAlignmentOffset
    // interface IAgVeAttProfile

struct __declspec(uuid("16aef0b3-416d-4bd2-8e6c-515bd97f0544"))
_IAgVeProfileAlignmentOffset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetAlignmentOffset,put=PutAlignmentOffset))
    double AlignmentOffset;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    double GetAlignmentOffset ( );
    void PutAlignmentOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AlignmentOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignmentOffset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e5746a09-b6f8-4c79-8ed4-f7df49410b25"))
IAgVeProfileAlignmentOffset : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignmentOffset,put=PutAlignmentOffset))
    double AlignmentOffset;

    //
    // Wrapper methods for error-handling
    //

    double GetAlignmentOffset ( );
    void PutAlignmentOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AlignmentOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AlignmentOffset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("8f101380-5087-48ca-93e7-4a54cf5beee4"))
AgVeScheduleTimesCollection;
    // [ default ] interface IUnknown
    // interface IAgVeScheduleTimesCollection

struct __declspec(uuid("61777c12-dbcb-4fd1-954c-1f4e16a04f3b"))
AgVeTargetTimes;
    // [ default ] interface _IAgVeTargetTimes
    // interface IAgVeTargetTimes

struct __declspec(uuid("405d672a-ac7d-4448-8887-61d65beee0af"))
AgVeAttPointing;
    // [ default ] interface _IAgVeAttPointing
    // interface IAgVePointing
    // interface IAgVeAttPointing

struct __declspec(uuid("d88716e1-e7be-4660-b4bd-79e4ea52d5b6"))
IAgVeAccessAdvanced : IAgAccessAdvanced
{
    //
    // Property data
    //

    __declspec(property(get=GetUseLightTimeDelay,put=PutUseLightTimeDelay))
    VARIANT_BOOL UseLightTimeDelay;
    __declspec(property(get=GetTimeSense,put=PutTimeSense))
    enum AgEIvTimeSense TimeSense;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLightTimeDelay ( );
    void PutUseLightTimeDelay (
        VARIANT_BOOL pVal );
    enum AgEIvTimeSense GetTimeSense ( );
    void PutTimeSense (
        enum AgEIvTimeSense pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimeSense (
        /*[out,retval]*/ enum AgEIvTimeSense * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeSense (
        /*[in]*/ enum AgEIvTimeSense pVal ) = 0;
};

struct __declspec(uuid("d9359bc9-0b4f-4749-a5f7-ce042ae74ff2"))
AgVeDuration;
    // [ default ] interface _IAgVeDuration
    // interface IAgVeDuration

struct __declspec(uuid("f3ad8921-d05c-4344-8a1c-376351c4e4eb"))
_IAgVeDuration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLookAhead,put=PutLookAhead))
    double LookAhead;
    __declspec(property(get=GetLookBehind,put=PutLookBehind))
    double LookBehind;

    //
    // Wrapper methods for error-handling
    //

    double GetLookAhead ( );
    void PutLookAhead (
        double pVal );
    double GetLookBehind ( );
    void PutLookBehind (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LookAhead (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LookAhead (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LookBehind (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LookBehind (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("8d64554f-f432-4ef5-9b45-24584b3b83bd"))
IAgVeDuration : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLookAhead,put=PutLookAhead))
    double LookAhead;
    __declspec(property(get=GetLookBehind,put=PutLookBehind))
    double LookBehind;

    //
    // Wrapper methods for error-handling
    //

    double GetLookAhead ( );
    void PutLookAhead (
        double pVal );
    double GetLookBehind ( );
    void PutLookBehind (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LookAhead (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LookAhead (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LookBehind (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LookBehind (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("36d366a2-4f84-4c19-ab62-9d39d59fe0b1"))
AgVeStandardBasic;
    // [ default ] interface _IAgVeStandardBasic
    // interface IAgVeStandardBasic

enum AgEVeProfile
{
    eProfileUnknown = -1,
    eProfileAlignedAndConstrained = 0,
    eProfileCentralBodyFixed = 1,
    eProfileECFVelocityAlignmentWithNadirConstraint = 2,
    eProfileECFVelocityAlignmentWithRadialConstraint = 3,
    eProfileECIVelocityAlignmentWithSunConstraint = 4,
    eProfileECIVelocityAlignmentWithNadirConstraint = 5,
    eProfileFixedInAxes = 6,
    eProfileInertiallyFixed = 7,
    eProfileNadirAlignmentWithECFVelocityConstraint = 8,
    eProfileNadirAlignmentWithECIVelocityConstraint = 9,
    eProfileNadirAlignmentWithSunConstraint = 10,
    eProfileNadirAlignmentWithOrbitNormalConstraint = 11,
    eProfilePrecessingSpin = 12,
    eProfileSpinAligned = 13,
    eProfileSpinAboutSunVector = 14,
    eProfileSpinAboutNadir = 15,
    eProfileSpinning = 16,
    eProfileSunAlignmentOccultationNormalConstraint = 17,
    eProfileSunAlignmentWithECIZAxisConstraint = 18,
    eProfileSunAlignmentWithZInOrbitPlane = 19,
    eProfileSunAlignmentWithEclipticNormalConstraint = 20,
    eProfileSunAlignmentWithNadirConstraint = 21,
    eProfileXPOPInertialAttitude = 22,
    eProfileYawToNadir = 23,
    eCoordinatedTurn = 24,
    eProfileGPS = 27
};

struct __declspec(uuid("d744da5d-137a-46a2-9bff-6ef09792f02a"))
_IAgVeStandardBasic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileType))
    enum AgEVeProfile ProfileType;
    __declspec(property(get=GetProfileSupportedTypes))
    SAFEARRAY * ProfileSupportedTypes;
    __declspec(property(get=GetProfile))
    IAgVeAttProfilePtr Profile;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeProfile GetProfileType ( );
    HRESULT SetProfileType (
        enum AgEVeProfile Profile );
    VARIANT_BOOL IsProfileTypeSupported (
        enum AgEVeProfile Profile );
    SAFEARRAY * GetProfileSupportedTypes ( );
    IAgVeAttProfilePtr GetProfile ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileType (
        /*[out,retval]*/ enum AgEVeProfile * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProfileType (
        /*[in]*/ enum AgEVeProfile Profile ) = 0;
      virtual HRESULT __stdcall raw_IsProfileTypeSupported (
        /*[in]*/ enum AgEVeProfile Profile,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProfileSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Profile (
        /*[out,retval]*/ struct IAgVeAttProfile * * ppVal ) = 0;
};

struct __declspec(uuid("a6d34789-6d90-47d4-8cde-7d237471945a"))
IAgVeStandardBasic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileType))
    enum AgEVeProfile ProfileType;
    __declspec(property(get=GetProfileSupportedTypes))
    SAFEARRAY * ProfileSupportedTypes;
    __declspec(property(get=GetProfile))
    IAgVeAttProfilePtr Profile;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeProfile GetProfileType ( );
    HRESULT SetProfileType (
        enum AgEVeProfile Profile );
    VARIANT_BOOL IsProfileTypeSupported (
        enum AgEVeProfile Profile );
    SAFEARRAY * GetProfileSupportedTypes ( );
    IAgVeAttProfilePtr GetProfile ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileType (
        /*[out,retval]*/ enum AgEVeProfile * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProfileType (
        /*[in]*/ enum AgEVeProfile Profile ) = 0;
      virtual HRESULT __stdcall raw_IsProfileTypeSupported (
        /*[in]*/ enum AgEVeProfile Profile,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProfileSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Profile (
        /*[out,retval]*/ struct IAgVeAttProfile * * ppVal ) = 0;
};

struct __declspec(uuid("29516a4b-35f0-4293-a320-ffe4b9ad2469"))
AgVeAttExternal;
    // [ default ] interface _IAgVeAttExternal
    // interface IAgVeAttExternal

struct __declspec(uuid("78519329-f95a-4352-b0c1-150fc62ec41e"))
_IAgVeAttExternal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    _bstr_t GetFilename ( );
    HRESULT Reload ( );
    HRESULT Load (
        _bstr_t Filename );
    HRESULT Disable ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_Disable ( ) = 0;
};

struct __declspec(uuid("41a88efa-a312-4e01-b87a-d7bc8358fe5f"))
IAgVeAttExternal : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    _bstr_t GetFilename ( );
    HRESULT Reload ( );
    HRESULT Load (
        _bstr_t Filename );
    HRESULT Disable ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_Disable ( ) = 0;
};

struct __declspec(uuid("e8b4966a-01b6-42cd-9139-758ee9073319"))
AgVeAttitudeRealTime;
    // [ default ] interface _IAgVeAttitudeRealTime
    // interface IAgVeAttitudeRealTime
    // interface IAgVeAttitude

enum AgEVeLookAheadMethod
{
    eExtrapolate = 0,
    eHold = 1
};

struct __declspec(uuid("5a9d8357-9d9d-4cdc-b497-f7d3c12f04ab"))
IAgVeAttitudeRealTimeDataReference : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileType))
    enum AgEVeProfile ProfileType;
    __declspec(property(get=GetProfileSupportedTypes))
    SAFEARRAY * ProfileSupportedTypes;
    __declspec(property(get=GetProfile))
    IAgVeAttProfilePtr Profile;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeProfile GetProfileType ( );
    HRESULT SetProfileType (
        enum AgEVeProfile Profile );
    VARIANT_BOOL IsProfileTypeSupported (
        enum AgEVeProfile Profile );
    SAFEARRAY * GetProfileSupportedTypes ( );
    IAgVeAttProfilePtr GetProfile ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileType (
        /*[out,retval]*/ enum AgEVeProfile * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProfileType (
        /*[in]*/ enum AgEVeProfile Profile ) = 0;
      virtual HRESULT __stdcall raw_IsProfileTypeSupported (
        /*[in]*/ enum AgEVeProfile Profile,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProfileSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Profile (
        /*[out,retval]*/ struct IAgVeAttProfile * * ppVal ) = 0;
};

struct __declspec(uuid("90e3154a-0ab9-445e-8912-e8c05e93ac2a"))
_IAgVeAttitudeRealTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLookAheadMethod,put=PutLookAheadMethod))
    enum AgEVeLookAheadMethod LookAheadMethod;
    __declspec(property(get=GetDuration))
    IAgVeDurationPtr Duration;
    __declspec(property(get=GetDataReference))
    IAgVeAttitudeRealTimeDataReferencePtr DataReference;
    __declspec(property(get=GetBlockFactor,put=PutBlockFactor))
    int BlockFactor;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Apply ( );
    enum AgEVeLookAheadMethod GetLookAheadMethod ( );
    void PutLookAheadMethod (
        enum AgEVeLookAheadMethod pVal );
    IAgVeDurationPtr GetDuration ( );
    HRESULT AddCBFQuaternion (
        const _variant_t & Time,
        double Q1,
        double Q2,
        double Q3,
        double Q4 );
    HRESULT AddQuaternion (
        const _variant_t & Time,
        double Q1,
        double Q2,
        double Q3,
        double Q4 );
    HRESULT AddYPR (
        const _variant_t & Time,
        _bstr_t Sequence,
        double Yaw,
        double Pitch,
        double Roll );
    HRESULT AddECIYPR (
        const _variant_t & Time,
        _bstr_t Sequence,
        double Yaw,
        double Pitch,
        double Roll );
    HRESULT AddEuler (
        const _variant_t & Time,
        _bstr_t Sequence,
        double Angle1,
        double Angle2,
        double Angle3 );
    HRESULT ClearAll ( );
    IAgVeAttitudeRealTimeDataReferencePtr GetDataReference ( );
    int GetBlockFactor ( );
    void PutBlockFactor (
        int pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall get_LookAheadMethod (
        /*[out,retval]*/ enum AgEVeLookAheadMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_LookAheadMethod (
        /*[in]*/ enum AgEVeLookAheadMethod pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ struct IAgVeDuration * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddCBFQuaternion (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Q1,
        /*[in]*/ double Q2,
        /*[in]*/ double Q3,
        /*[in]*/ double Q4 ) = 0;
      virtual HRESULT __stdcall raw_AddQuaternion (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Q1,
        /*[in]*/ double Q2,
        /*[in]*/ double Q3,
        /*[in]*/ double Q4 ) = 0;
      virtual HRESULT __stdcall raw_AddYPR (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR Sequence,
        /*[in]*/ double Yaw,
        /*[in]*/ double Pitch,
        /*[in]*/ double Roll ) = 0;
      virtual HRESULT __stdcall raw_AddECIYPR (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR Sequence,
        /*[in]*/ double Yaw,
        /*[in]*/ double Pitch,
        /*[in]*/ double Roll ) = 0;
      virtual HRESULT __stdcall raw_AddEuler (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR Sequence,
        /*[in]*/ double Angle1,
        /*[in]*/ double Angle2,
        /*[in]*/ double Angle3 ) = 0;
      virtual HRESULT __stdcall raw_ClearAll ( ) = 0;
      virtual HRESULT __stdcall get_DataReference (
        /*[out,retval]*/ struct IAgVeAttitudeRealTimeDataReference * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BlockFactor (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_BlockFactor (
        /*[in]*/ int pVal ) = 0;
};

struct __declspec(uuid("520d27e6-464c-4b01-8036-4f6fa043a5ed"))
IAgVeAttitudeRealTime : IAgVeAttitude
{
    //
    // Property data
    //

    __declspec(property(get=GetLookAheadMethod,put=PutLookAheadMethod))
    enum AgEVeLookAheadMethod LookAheadMethod;
    __declspec(property(get=GetDuration))
    IAgVeDurationPtr Duration;
    __declspec(property(get=GetDataReference))
    IAgVeAttitudeRealTimeDataReferencePtr DataReference;
    __declspec(property(get=GetBlockFactor,put=PutBlockFactor))
    int BlockFactor;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Apply ( );
    enum AgEVeLookAheadMethod GetLookAheadMethod ( );
    void PutLookAheadMethod (
        enum AgEVeLookAheadMethod pVal );
    IAgVeDurationPtr GetDuration ( );
    HRESULT AddCBFQuaternion (
        const _variant_t & Time,
        double Q1,
        double Q2,
        double Q3,
        double Q4 );
    HRESULT AddQuaternion (
        const _variant_t & Time,
        double Q1,
        double Q2,
        double Q3,
        double Q4 );
    HRESULT AddYPR (
        const _variant_t & Time,
        _bstr_t Sequence,
        double Yaw,
        double Pitch,
        double Roll );
    HRESULT AddECIYPR (
        const _variant_t & Time,
        _bstr_t Sequence,
        double Yaw,
        double Pitch,
        double Roll );
    HRESULT AddEuler (
        const _variant_t & Time,
        _bstr_t Sequence,
        double Angle1,
        double Angle2,
        double Angle3 );
    HRESULT ClearAll ( );
    IAgVeAttitudeRealTimeDataReferencePtr GetDataReference ( );
    int GetBlockFactor ( );
    void PutBlockFactor (
        int pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall get_LookAheadMethod (
        /*[out,retval]*/ enum AgEVeLookAheadMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_LookAheadMethod (
        /*[in]*/ enum AgEVeLookAheadMethod pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ struct IAgVeDuration * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddCBFQuaternion (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Q1,
        /*[in]*/ double Q2,
        /*[in]*/ double Q3,
        /*[in]*/ double Q4 ) = 0;
      virtual HRESULT __stdcall raw_AddQuaternion (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Q1,
        /*[in]*/ double Q2,
        /*[in]*/ double Q3,
        /*[in]*/ double Q4 ) = 0;
      virtual HRESULT __stdcall raw_AddYPR (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR Sequence,
        /*[in]*/ double Yaw,
        /*[in]*/ double Pitch,
        /*[in]*/ double Roll ) = 0;
      virtual HRESULT __stdcall raw_AddECIYPR (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR Sequence,
        /*[in]*/ double Yaw,
        /*[in]*/ double Pitch,
        /*[in]*/ double Roll ) = 0;
      virtual HRESULT __stdcall raw_AddEuler (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR Sequence,
        /*[in]*/ double Angle1,
        /*[in]*/ double Angle2,
        /*[in]*/ double Angle3 ) = 0;
      virtual HRESULT __stdcall raw_ClearAll ( ) = 0;
      virtual HRESULT __stdcall get_DataReference (
        /*[out,retval]*/ struct IAgVeAttitudeRealTimeDataReference * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BlockFactor (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_BlockFactor (
        /*[in]*/ int pVal ) = 0;
};

struct __declspec(uuid("cc278083-b74a-423e-8d57-5c8b01196847"))
AgVeProfileCoordinatedTurn;
    // [ default ] interface _IAgVeProfileCoordinatedTurn
    // interface IAgVeProfileCoordinatedTurn
    // interface IAgVeAttProfile

struct __declspec(uuid("c55f7d06-2aca-4ea9-a0c1-7cf5348ecdc8"))
_IAgVeProfileCoordinatedTurn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetTimeOffset,put=PutTimeOffset))
    double TimeOffset;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    double GetTimeOffset ( );
    void PutTimeOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TimeOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("c3012f1e-730c-47fe-a05e-8f86b915849a"))
IAgVeProfileCoordinatedTurn : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeOffset,put=PutTimeOffset))
    double TimeOffset;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeOffset ( );
    void PutTimeOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeOffset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("3a30eb2f-235a-41ab-ac40-b120d5685e3b"))
AgVeProfileYawToNadir;
    // [ default ] interface _IAgVeProfileYawToNadir
    // interface IAgVeProfileYawToNadir
    // interface IAgVeAttProfile

struct __declspec(uuid("4dbf4b00-e9ed-44e6-8b41-8b533b8dd33b"))
_IAgVeProfileYawToNadir : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetInertial))
    STKUtil::IAgDirectionPtr Inertial;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    STKUtil::IAgDirectionPtr GetInertial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
};

struct __declspec(uuid("af1b714a-c897-4dcc-b7b5-08dbd44b1b47"))
IAgVeProfileYawToNadir : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetInertial))
    STKUtil::IAgDirectionPtr Inertial;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDirectionPtr GetInertial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inertial (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
};

struct __declspec(uuid("7c070a9e-c519-4dac-a23c-73328e7b594a"))
AgVeTargetPointingElement;
    // [ default ] interface _IAgVeTargetPointingElement
    // interface IAgVeTargetPointingElement

struct __declspec(uuid("506acd01-776d-42c9-9a72-8149abc18767"))
AgVeTargetPointingCollection;
    // [ default ] interface IUnknown
    // interface IAgVeTargetPointingCollection

struct __declspec(uuid("151a6f0b-3ef8-4b72-a13c-7c00353940c3"))
AgVeTorque;
    // [ default ] interface _IAgVeTorque
    // interface IAgVeTorque

struct __declspec(uuid("e9fc0a76-b29a-4bc9-b72e-79c32acf2951"))
_IAgVeTorque : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseTorqueFile,put=PutUseTorqueFile))
    VARIANT_BOOL UseTorqueFile;
    __declspec(property(get=GetTorqueFile,put=PutTorqueFile))
    _bstr_t TorqueFile;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseTorqueFile ( );
    void PutUseTorqueFile (
        VARIANT_BOOL pVal );
    _bstr_t GetTorqueFile ( );
    void PutTorqueFile (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseTorqueFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTorqueFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TorqueFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TorqueFile (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("54f5503e-caff-479c-965a-08f418cdc017"))
IAgVeTorque : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseTorqueFile,put=PutUseTorqueFile))
    VARIANT_BOOL UseTorqueFile;
    __declspec(property(get=GetTorqueFile,put=PutTorqueFile))
    _bstr_t TorqueFile;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseTorqueFile ( );
    void PutUseTorqueFile (
        VARIANT_BOOL pVal );
    _bstr_t GetTorqueFile ( );
    void PutTorqueFile (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseTorqueFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTorqueFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TorqueFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TorqueFile (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("6dba5a3a-5313-4a78-ad5b-06ca11cfa1f1"))
AgVeIntegratedAttitude;
    // [ default ] interface _IAgVeIntegratedAttitude
    // interface IAgVeIntegratedAttitude

struct __declspec(uuid("6ce11664-ff3c-4465-a8af-102644ac8b22"))
_IAgVeIntegratedAttitude : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetWx,put=PutWx))
    double Wx;
    __declspec(property(get=GetWy,put=PutWy))
    double Wy;
    __declspec(property(get=GetWz,put=PutWz))
    double Wz;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetTorque))
    IAgVeTorquePtr Torque;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    double GetWx ( );
    void PutWx (
        double pVal );
    double GetWy ( );
    void PutWy (
        double pVal );
    double GetWz ( );
    void PutWz (
        double pVal );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    IAgVeTorquePtr GetTorque ( );
    HRESULT Run ( );
    HRESULT InitFromAtt ( );
    HRESULT SaveToFile (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Wx (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Wx (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Wy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Wy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Wz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Wz (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Torque (
        /*[out,retval]*/ struct IAgVeTorque * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Run ( ) = 0;
      virtual HRESULT __stdcall raw_InitFromAtt ( ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("f65df3bf-3c53-4598-9896-4b9748e134e0"))
IAgVeIntegratedAttitude : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetOrientation))
    STKUtil::IAgOrientationPtr Orientation;
    __declspec(property(get=GetWx,put=PutWx))
    double Wx;
    __declspec(property(get=GetWy,put=PutWy))
    double Wy;
    __declspec(property(get=GetWz,put=PutWz))
    double Wz;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetTorque))
    IAgVeTorquePtr Torque;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    STKUtil::IAgOrientationPtr GetOrientation ( );
    double GetWx ( );
    void PutWx (
        double pVal );
    double GetWy ( );
    void PutWy (
        double pVal );
    double GetWz ( );
    void PutWz (
        double pVal );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    IAgVeTorquePtr GetTorque ( );
    HRESULT Run ( );
    HRESULT InitFromAtt ( );
    HRESULT SaveToFile (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Wx (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Wx (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Wy (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Wy (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Wz (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Wz (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Torque (
        /*[out,retval]*/ struct IAgVeTorque * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Run ( ) = 0;
      virtual HRESULT __stdcall raw_InitFromAtt ( ) = 0;
      virtual HRESULT __stdcall raw_SaveToFile (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("829deb70-dc62-4888-af36-8e3aeb19d2e8"))
AgVeScheduleTimesElement;
    // [ default ] interface _IAgVeScheduleTimesElement
    // interface IAgVeScheduleTimesElement

struct __declspec(uuid("e773429a-a069-4ec7-9b1a-bd250453c958"))
AgVeTrajectoryAttitudeStandard;
    // [ default ] interface _IAgVeTrajectoryAttitudeStandard
    // interface IAgVeAttitudeStandard
    // interface IAgVeTrajectoryAttitudeStandard
    // interface IAgVeAttitude

enum AgEAttitudeStandardType
{
    eRouteAttitudeStandard = 0,
    eTrajectoryAttitudeStandard = 1,
    eOrbitAttitudeStandard = 2
};

struct __declspec(uuid("7f819559-f815-4f8c-bfe8-fa9848b564f5"))
IAgVeAttitudeStandard : IAgVeAttitude
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEAttitudeStandardType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAttitudeStandardType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEAttitudeStandardType * pVal ) = 0;
};

struct __declspec(uuid("12c4734a-71ae-4f73-8334-f17d16e4d79e"))
AgVeOrbitAttitudeStandard;
    // [ default ] interface _IAgVeOrbitAttitudeStandard
    // interface IAgVeAttitudeStandard
    // interface IAgVeOrbitAttitudeStandard
    // interface IAgVeAttitude

struct __declspec(uuid("8752ed94-adc6-48c1-9cab-fc59d458e294"))
AgVeRouteAttitudeStandard;
    // [ default ] interface _IAgVeRouteAttitudeStandard
    // interface IAgVeAttitudeStandard
    // interface IAgVeRouteAttitudeStandard
    // interface IAgVeAttitude

struct __declspec(uuid("22673c34-177d-4dbb-b974-52b08c49b904"))
_IAgVeRouteAttitudeStandard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEAttitudeStandardType Type;
    __declspec(property(get=GetBasic))
    IAgVeStandardBasicPtr Basic;
    __declspec(property(get=GetExternal))
    IAgVeAttExternalPtr External;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAttitudeStandardType GetType ( );
    IAgVeStandardBasicPtr GetBasic ( );
    IAgVeAttExternalPtr GetExternal ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEAttitudeStandardType * pVal ) = 0;
      virtual HRESULT __stdcall get_Basic (
        /*[out,retval]*/ struct IAgVeStandardBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_External (
        /*[out,retval]*/ struct IAgVeAttExternal * * ppVal ) = 0;
};

struct __declspec(uuid("1a4696a0-b711-47f3-ac12-1385edeb1d8f"))
IAgVeRouteAttitudeStandard : IAgVeAttitudeStandard
{
    //
    // Property data
    //

    __declspec(property(get=GetBasic))
    IAgVeStandardBasicPtr Basic;
    __declspec(property(get=GetExternal))
    IAgVeAttExternalPtr External;

    //
    // Wrapper methods for error-handling
    //

    IAgVeStandardBasicPtr GetBasic ( );
    IAgVeAttExternalPtr GetExternal ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Basic (
        /*[out,retval]*/ struct IAgVeStandardBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_External (
        /*[out,retval]*/ struct IAgVeAttExternal * * ppVal ) = 0;
};

struct __declspec(uuid("9f5fc69b-2889-4b61-a85e-ec93da7a9886"))
AgVeGfxLine;
    // [ default ] interface _IAgVeGfxLine
    // interface IAgVeGfxLine

struct __declspec(uuid("ccb3b4fe-26cf-4f47-9be6-df3221622b23"))
_IAgVeGfxLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    enum AgELineWidth Width;

    //
    // Wrapper methods for error-handling
    //

    enum STKUtil::AgELineStyle GetStyle ( );
    void PutStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetWidth ( );
    void PutWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("d668bdde-339e-4c43-afba-9a53abdc1c3d"))
IAgVeGfxLine : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    enum AgELineWidth Width;

    //
    // Wrapper methods for error-handling
    //

    enum STKUtil::AgELineStyle GetStyle ( );
    void PutStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetWidth ( );
    void PutWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("fdabab7e-68d7-4d2a-910a-2642854fff53"))
AgVeGfxIntervalsCollection;
    // [ default ] interface IUnknown
    // interface IAgVeGfxIntervalsCollection

struct __declspec(uuid("16f58aab-fa7a-4b10-b068-78087c609f73"))
IAgVeGfxAttributesBasic : IAgVeGfxAttributes
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLine))
    IAgVeGfxLinePtr Line;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    IAgVeGfxLinePtr GetLine ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IAgVeGfxLine * * ppVal ) = 0;
};

struct __declspec(uuid("7886d953-223a-4186-8aee-f4ee950a31de"))
IAgVeGfxInterval : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGfxAttributes))
    IAgVeGfxAttributesBasicPtr GfxAttributes;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxAttributesBasicPtr GetGfxAttributes ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GfxAttributes (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("cba0d720-ea68-41db-97a1-0506c88519f8"))
IAgVeGfxIntervalsCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeGfxIntervalPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeGfxIntervalPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeGfxIntervalPtr Add (
        const _variant_t & Start,
        const _variant_t & Stop );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeGfxInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[out,retval]*/ struct IAgVeGfxInterval * * ppRetVal ) = 0;
};

struct __declspec(uuid("1e0c2824-072d-4d5d-8990-6e3409f2a6e8"))
AgVeGfxAttributesAccess;
    // [ default ] interface _IAgVeGfxAttributesAccess
    // interface IAgVeGfxAttributesAccess
    // interface IAgVeGfxAttributes

struct __declspec(uuid("45c7d6c8-1b74-4410-9f24-993a19d0e2f1"))
AgVeGfxAttributesCustom;
    // [ default ] interface _IAgVeGfxAttributesCustom
    // interface IAgVeGfxAttributesCustom
    // interface IAgVeGfxAttributes

struct __declspec(uuid("db069e03-76a8-4b81-810a-d6afdf3103d0"))
_IAgVeGfxAttributesCustom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefault))
    IAgVeGfxAttributesBasicPtr Default;
    __declspec(property(get=GetIntervals))
    IAgVeGfxIntervalsCollectionPtr Intervals;
    __declspec(property(get=GetPreemptiveIntervals,put=PutPreemptiveIntervals))
    VARIANT_BOOL PreemptiveIntervals;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxAttributesBasicPtr GetDefault ( );
    IAgVeGfxIntervalsCollectionPtr GetIntervals ( );
    HRESULT Deconflict ( );
    VARIANT_BOOL GetPreemptiveIntervals ( );
    void PutPreemptiveIntervals (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Default (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgVeGfxIntervalsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Deconflict ( ) = 0;
      virtual HRESULT __stdcall get_PreemptiveIntervals (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PreemptiveIntervals (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("4809cd73-ed66-49a0-a9b8-9f0b5b62a946"))
IAgVeGfxAttributesCustom : IAgVeGfxAttributes
{
    //
    // Property data
    //

    __declspec(property(get=GetDefault))
    IAgVeGfxAttributesBasicPtr Default;
    __declspec(property(get=GetIntervals))
    IAgVeGfxIntervalsCollectionPtr Intervals;
    __declspec(property(get=GetPreemptiveIntervals,put=PutPreemptiveIntervals))
    VARIANT_BOOL PreemptiveIntervals;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxAttributesBasicPtr GetDefault ( );
    IAgVeGfxIntervalsCollectionPtr GetIntervals ( );
    HRESULT Deconflict ( );
    VARIANT_BOOL GetPreemptiveIntervals ( );
    void PutPreemptiveIntervals (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Default (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgVeGfxIntervalsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Deconflict ( ) = 0;
      virtual HRESULT __stdcall get_PreemptiveIntervals (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PreemptiveIntervals (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("34d10df5-8125-477b-af3c-a7c97e28c572"))
AgVeGfxAttributesRealtime;
    // [ default ] interface _IAgVeGfxAttributesRealtime
    // interface IAgVeGfxAttributesRealtime
    // interface IAgVeGfxAttributes

struct __declspec(uuid("34559303-7460-47aa-bcbf-a1ada51bd83e"))
_IAgVeGfxAttributesRealtime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHistory))
    IAgVeGfxAttributesBasicPtr History;
    __declspec(property(get=GetSpline))
    IAgVeGfxAttributesBasicPtr Spline;
    __declspec(property(get=GetLookAhead))
    IAgVeGfxAttributesBasicPtr LookAhead;
    __declspec(property(get=GetDropOut))
    IAgVeGfxAttributesBasicPtr DropOut;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxAttributesBasicPtr GetHistory ( );
    IAgVeGfxAttributesBasicPtr GetSpline ( );
    IAgVeGfxAttributesBasicPtr GetLookAhead ( );
    IAgVeGfxAttributesBasicPtr GetDropOut ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_History (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Spline (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LookAhead (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropOut (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
};

struct __declspec(uuid("50c2fa32-211e-46ee-a031-5ff477fd7dec"))
IAgVeGfxAttributesRealtime : IAgVeGfxAttributes
{
    //
    // Property data
    //

    __declspec(property(get=GetHistory))
    IAgVeGfxAttributesBasicPtr History;
    __declspec(property(get=GetSpline))
    IAgVeGfxAttributesBasicPtr Spline;
    __declspec(property(get=GetLookAhead))
    IAgVeGfxAttributesBasicPtr LookAhead;
    __declspec(property(get=GetDropOut))
    IAgVeGfxAttributesBasicPtr DropOut;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxAttributesBasicPtr GetHistory ( );
    IAgVeGfxAttributesBasicPtr GetSpline ( );
    IAgVeGfxAttributesBasicPtr GetLookAhead ( );
    IAgVeGfxAttributesBasicPtr GetDropOut ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_History (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Spline (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LookAhead (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropOut (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
};

struct __declspec(uuid("4beebe34-24fb-4f1a-ad61-2c7778e101f1"))
AgVeGfxLightingElement;
    // [ default ] interface _IAgVeGfxLightingElement
    // interface IAgVeGfxLightingElement

struct __declspec(uuid("aab22d40-8c26-4e67-bf6b-36fa785e9b93"))
_IAgVeGfxLightingElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle ppVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * ppVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle ppVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("bf86cbf3-ac6b-4202-889f-dafa04cff98a"))
AgVeGfxLighting;
    // [ default ] interface _IAgVeGfxLighting
    // interface IAgVeGfxLighting

struct __declspec(uuid("e96613f5-b9cd-4d76-8212-0595eef70efc"))
_IAgVeGfxLighting : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSunlight))
    IAgVeGfxLightingElementPtr Sunlight;
    __declspec(property(get=GetPenumbra))
    IAgVeGfxLightingElementPtr Penumbra;
    __declspec(property(get=GetUmbra))
    IAgVeGfxLightingElementPtr Umbra;
    __declspec(property(get=GetIsSunLightPenumbraVisible,put=PutIsSunLightPenumbraVisible))
    VARIANT_BOOL IsSunLightPenumbraVisible;
    __declspec(property(get=GetIsPenumbraUmbraVisible,put=PutIsPenumbraUmbraVisible))
    VARIANT_BOOL IsPenumbraUmbraVisible;
    __declspec(property(get=GetIsSolarSpecularReflectionPointVisible,put=PutIsSolarSpecularReflectionPointVisible))
    VARIANT_BOOL IsSolarSpecularReflectionPointVisible;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxLightingElementPtr GetSunlight ( );
    IAgVeGfxLightingElementPtr GetPenumbra ( );
    IAgVeGfxLightingElementPtr GetUmbra ( );
    VARIANT_BOOL GetIsSunLightPenumbraVisible ( );
    void PutIsSunLightPenumbraVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPenumbraUmbraVisible ( );
    void PutIsPenumbraUmbraVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsSolarSpecularReflectionPointVisible ( );
    void PutIsSolarSpecularReflectionPointVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Sunlight (
        /*[out,retval]*/ struct IAgVeGfxLightingElement * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Penumbra (
        /*[out,retval]*/ struct IAgVeGfxLightingElement * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Umbra (
        /*[out,retval]*/ struct IAgVeGfxLightingElement * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsSunLightPenumbraVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSunLightPenumbraVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPenumbraUmbraVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPenumbraUmbraVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsSolarSpecularReflectionPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSolarSpecularReflectionPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("d325d779-539c-4ee2-9cfb-1bd6b90ddc45"))
AgVeGfxElevationGroundElevation;
    // [ default ] interface _IAgVeGfxElevationGroundElevation
    // interface IAgVeGfxElevation
    // interface IAgVeGfxElevationGroundElevation

struct __declspec(uuid("6597de69-fde0-4c02-b508-db544603c659"))
_IAgVeGfxElevationGroundElevation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("124ed0e1-627b-49f8-9868-6b9ad9e21ca0"))
IAgVeGfxElevationGroundElevation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e3ef8995-134a-4e3b-b416-5373feb7d14d"))
AgVeGfxElevationSwathHalfWidth;
    // [ default ] interface _IAgVeGfxElevationSwathHalfWidth
    // interface IAgVeGfxElevation
    // interface IAgVeGfxElevationSwathHalfWidth

struct __declspec(uuid("f7f53177-763f-4fd5-bff6-196f4b744952"))
_IAgVeGfxElevationSwathHalfWidth : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;

    //
    // Wrapper methods for error-handling
    //

    double GetDistance ( );
    void PutDistance (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("2dad0db2-2ff6-479d-bd9a-306bfd5c3623"))
IAgVeGfxElevationSwathHalfWidth : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;

    //
    // Wrapper methods for error-handling
    //

    double GetDistance ( );
    void PutDistance (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d2ae8b20-0069-4e7d-bf15-edb7c4334ffe"))
AgVeGfxElevationVehicleHalfAngle;
    // [ default ] interface _IAgVeGfxElevationVehicleHalfAngle
    // interface IAgVeGfxElevation
    // interface IAgVeGfxElevationVehicleHalfAngle

struct __declspec(uuid("f6f2f6c1-fc13-4e40-ad3e-defec710a4d9"))
_IAgVeGfxElevationVehicleHalfAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a2d0f0b5-72d4-48d7-8f38-2aff318ae709"))
IAgVeGfxElevationVehicleHalfAngle : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ca8ee136-6ccc-4a00-9d20-7c3d0bddc7de"))
AgVeGfxSwath;
    // [ default ] interface _IAgVeGfxSwath
    // interface IAgVeGfxSwath

struct __declspec(uuid("2a6ac502-b515-4e31-8d88-ff4f81fb7881"))
_IAgVeGfxSwath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetElevationType))
    enum AgEVeGfxElevation ElevationType;
    __declspec(property(get=GetElevationSupportedTypes))
    SAFEARRAY * ElevationSupportedTypes;
    __declspec(property(get=GetElevation))
    IAgVeGfxElevationPtr Elevation;
    __declspec(property(get=GetOptions,put=PutOptions))
    enum AgEVeGfxOptions Options;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxElevation GetElevationType ( );
    HRESULT SetElevationType (
        enum AgEVeGfxElevation Elevation );
    VARIANT_BOOL IsElevationTypeSupported (
        enum AgEVeGfxElevation Elevation );
    SAFEARRAY * GetElevationSupportedTypes ( );
    IAgVeGfxElevationPtr GetElevation ( );
    enum AgEVeGfxOptions GetOptions ( );
    void PutOptions (
        enum AgEVeGfxOptions pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ElevationType (
        /*[out,retval]*/ enum AgEVeGfxElevation * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetElevationType (
        /*[in]*/ enum AgEVeGfxElevation Elevation ) = 0;
      virtual HRESULT __stdcall raw_IsElevationTypeSupported (
        /*[in]*/ enum AgEVeGfxElevation Elevation,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ElevationSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ struct IAgVeGfxElevation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ enum AgEVeGfxOptions * pVal ) = 0;
      virtual HRESULT __stdcall put_Options (
        /*[in]*/ enum AgEVeGfxOptions pVal ) = 0;
};

struct __declspec(uuid("037cc66e-3233-45d6-8e9a-527fd5e485bc"))
AgVeGfxLeadDataFraction;
    // [ default ] interface _IAgVeGfxLeadDataFraction
    // interface IAgVeLeadTrailData
    // interface IAgVeGfxLeadDataFraction

struct __declspec(uuid("70efa0c3-74fc-49f2-a6bd-d719ec5cce7b"))
_IAgVeGfxLeadDataFraction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFraction,put=PutFraction))
    double Fraction;

    //
    // Wrapper methods for error-handling
    //

    double GetFraction ( );
    void PutFraction (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fraction (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Fraction (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("37e569f4-2518-4fab-8566-21aeb35b9e0b"))
IAgVeGfxLeadDataFraction : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFraction,put=PutFraction))
    double Fraction;

    //
    // Wrapper methods for error-handling
    //

    double GetFraction ( );
    void PutFraction (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fraction (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Fraction (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("2f60552f-78b7-4531-bc69-9c17b34bd6ac"))
AgVeGfxLeadDataTime;
    // [ default ] interface _IAgVeGfxLeadDataTime
    // interface IAgVeLeadTrailData
    // interface IAgVeGfxLeadDataTime

struct __declspec(uuid("79de8f7a-123a-46ca-8d30-3fb9b25270ac"))
_IAgVeGfxLeadDataTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    double Time;

    //
    // Wrapper methods for error-handling
    //

    double GetTime ( );
    void PutTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("05081669-2a8c-408e-9bce-a2309da638f0"))
IAgVeGfxLeadDataTime : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    double Time;

    //
    // Wrapper methods for error-handling
    //

    double GetTime ( );
    void PutTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("4c68484e-9e57-4922-b076-addadb48e28a"))
AgVeGfxTrailDataFraction;
    // [ default ] interface _IAgVeGfxTrailDataFraction
    // interface IAgVeLeadTrailData
    // interface IAgVeGfxTrailDataFraction

struct __declspec(uuid("5a0d93a7-2723-44ed-9723-25fe20bdeafb"))
_IAgVeGfxTrailDataFraction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFraction,put=PutFraction))
    double Fraction;

    //
    // Wrapper methods for error-handling
    //

    double GetFraction ( );
    void PutFraction (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fraction (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Fraction (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("c470ff3b-1e89-4117-8349-2947870b4e03"))
IAgVeGfxTrailDataFraction : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFraction,put=PutFraction))
    double Fraction;

    //
    // Wrapper methods for error-handling
    //

    double GetFraction ( );
    void PutFraction (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fraction (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Fraction (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("02a3013d-f4fd-4da9-866e-494690cc1f2c"))
AgVeGfxTrailDataTime;
    // [ default ] interface _IAgVeGfxTrailDataTime
    // interface IAgVeLeadTrailData
    // interface IAgVeGfxTrailDataTime

struct __declspec(uuid("3d208d44-b936-4f43-9639-2b0a7b2ab557"))
_IAgVeGfxTrailDataTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    double Time;

    //
    // Wrapper methods for error-handling
    //

    double GetTime ( );
    void PutTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("02b1a355-50d7-4cf7-9d26-ccae40e3f085"))
IAgVeGfxTrailDataTime : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    double Time;

    //
    // Wrapper methods for error-handling
    //

    double GetTime ( );
    void PutTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("236d5b45-7005-4c71-8fb3-16a4f40b528c"))
AgVeGfxRoutePassData;
    // [ default ] interface _IAgVeGfxRoutePassData
    // interface IAgVeGfxRoutePassData

struct __declspec(uuid("00f1d3ba-8350-41dd-a0c1-67f93573ae0f"))
_IAgVeGfxRoutePassData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRoute))
    IAgVeGfxLeadTrailDataPtr Route;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxLeadTrailDataPtr GetRoute ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("de4f2900-66e5-4cda-b083-13027f6e4e02"))
IAgVeGfxRoutePassData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRoute))
    IAgVeGfxLeadTrailDataPtr Route;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxLeadTrailDataPtr GetRoute ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("0127bf20-18ba-4785-a57a-274d3a1a2c32"))
AgVeGfxLeadTrailData;
    // [ default ] interface _IAgVeGfxLeadTrailData
    // interface IAgVeGfxLeadTrailData

struct __declspec(uuid("5714a85f-1f40-464b-8a1e-63611f3bbc6b"))
_IAgVeGfxLeadTrailData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLeadDataType))
    enum AgELeadTrailData LeadDataType;
    __declspec(property(get=GetLeadDataSupportedTypes))
    SAFEARRAY * LeadDataSupportedTypes;
    __declspec(property(get=GetLeadData))
    IAgVeLeadTrailDataPtr LeadData;
    __declspec(property(get=GetTrailDataType))
    enum AgELeadTrailData TrailDataType;
    __declspec(property(get=GetTrailDataSupportedTypes))
    SAFEARRAY * TrailDataSupportedTypes;
    __declspec(property(get=GetTrailData))
    IAgVeLeadTrailDataPtr TrailData;
    __declspec(property(get=GetHasLeadData))
    VARIANT_BOOL HasLeadData;
    __declspec(property(get=GetHasTrailData))
    VARIANT_BOOL HasTrailData;

    //
    // Wrapper methods for error-handling
    //

    enum AgELeadTrailData GetLeadDataType ( );
    HRESULT SetLeadDataType (
        enum AgELeadTrailData LeadData );
    VARIANT_BOOL IsLeadDataTypeSupported (
        enum AgELeadTrailData LeadData );
    SAFEARRAY * GetLeadDataSupportedTypes ( );
    IAgVeLeadTrailDataPtr GetLeadData ( );
    enum AgELeadTrailData GetTrailDataType ( );
    HRESULT SetTrailDataType (
        enum AgELeadTrailData TrailData );
    VARIANT_BOOL IsTrailDataTypeSupported (
        enum AgELeadTrailData TrailData );
    SAFEARRAY * GetTrailDataSupportedTypes ( );
    IAgVeLeadTrailDataPtr GetTrailData ( );
    VARIANT_BOOL GetHasLeadData ( );
    VARIANT_BOOL GetHasTrailData ( );
    HRESULT SetTrailSameAsLead ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LeadDataType (
        /*[out,retval]*/ enum AgELeadTrailData * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLeadDataType (
        /*[in]*/ enum AgELeadTrailData LeadData ) = 0;
      virtual HRESULT __stdcall raw_IsLeadDataTypeSupported (
        /*[in]*/ enum AgELeadTrailData LeadData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LeadDataSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LeadData (
        /*[out,retval]*/ struct IAgVeLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TrailDataType (
        /*[out,retval]*/ enum AgELeadTrailData * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrailDataType (
        /*[in]*/ enum AgELeadTrailData TrailData ) = 0;
      virtual HRESULT __stdcall raw_IsTrailDataTypeSupported (
        /*[in]*/ enum AgELeadTrailData TrailData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TrailDataSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TrailData (
        /*[out,retval]*/ struct IAgVeLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_HasLeadData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasTrailData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrailSameAsLead ( ) = 0;
};

struct __declspec(uuid("07a031d2-2b2c-4ea3-b8ec-392ff0341136"))
AgVeGfxOrbitPassData;
    // [ default ] interface _IAgVeGfxOrbitPassData
    // interface IAgVeGfxOrbitPassData

struct __declspec(uuid("15ee84c7-f033-4b2b-9f02-08f81a8516cc"))
_IAgVeGfxOrbitPassData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack))
    IAgVeGfxLeadTrailDataPtr GroundTrack;
    __declspec(property(get=GetOrbit))
    IAgVeGfxLeadTrailDataPtr Orbit;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxLeadTrailDataPtr GetGroundTrack ( );
    IAgVeGfxLeadTrailDataPtr GetOrbit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("9275fccb-89d0-47c2-87a5-6e42e5eb163e"))
AgVeGfxTrajectoryPassData;
    // [ default ] interface _IAgVeGfxTrajectoryPassData
    // interface IAgVeGfxTrajectoryPassData

struct __declspec(uuid("b8a8f620-1ef5-40fb-be57-ddd85a6217c9"))
_IAgVeGfxTrajectoryPassData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack))
    IAgVeGfxLeadTrailDataPtr GroundTrack;
    __declspec(property(get=GetTrajectory))
    IAgVeGfxLeadTrailDataPtr Trajectory;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxLeadTrailDataPtr GetGroundTrack ( );
    IAgVeGfxLeadTrailDataPtr GetTrajectory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("e593cc12-f47c-42d5-97ef-c082428fb7b3"))
IAgVeGfxTrajectoryPassData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack))
    IAgVeGfxLeadTrailDataPtr GroundTrack;
    __declspec(property(get=GetTrajectory))
    IAgVeGfxLeadTrailDataPtr Trajectory;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxLeadTrailDataPtr GetGroundTrack ( );
    IAgVeGfxLeadTrailDataPtr GetTrajectory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeGfxLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("fb5ae73d-034d-4b1b-9832-cd6009c2d7d8"))
AgVeGfxTrajectoryResolution;
    // [ default ] interface _IAgVeGfxTrajectoryResolution
    // interface IAgVeGfxTrajectoryResolution

struct __declspec(uuid("8c568179-190a-4a48-ac51-c059ac9d25c3"))
_IAgVeGfxTrajectoryResolution : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack,put=PutGroundTrack))
    double GroundTrack;
    __declspec(property(get=GetTrajectory,put=PutTrajectory))
    double Trajectory;
    __declspec(property(get=GetMinGroundTrack,put=PutMinGroundTrack))
    double MinGroundTrack;
    __declspec(property(get=GetMinTrajectory,put=PutMinTrajectory))
    double MinTrajectory;

    //
    // Wrapper methods for error-handling
    //

    double GetGroundTrack ( );
    void PutGroundTrack (
        double pVal );
    double GetTrajectory ( );
    void PutTrajectory (
        double pVal );
    double GetMinGroundTrack ( );
    void PutMinGroundTrack (
        double pVal );
    double GetMinTrajectory ( );
    void PutMinTrajectory (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GroundTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Trajectory (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinGroundTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinGroundTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinTrajectory (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinTrajectory (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e61be5ce-af5a-48b4-b660-f6735d353523"))
IAgVeGfxTrajectoryResolution : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack,put=PutGroundTrack))
    double GroundTrack;
    __declspec(property(get=GetTrajectory,put=PutTrajectory))
    double Trajectory;
    __declspec(property(get=GetMinGroundTrack,put=PutMinGroundTrack))
    double MinGroundTrack;
    __declspec(property(get=GetMinTrajectory,put=PutMinTrajectory))
    double MinTrajectory;

    //
    // Wrapper methods for error-handling
    //

    double GetGroundTrack ( );
    void PutGroundTrack (
        double pVal );
    double GetTrajectory ( );
    void PutTrajectory (
        double pVal );
    double GetMinGroundTrack ( );
    void PutMinGroundTrack (
        double pVal );
    double GetMinTrajectory ( );
    void PutMinTrajectory (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GroundTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Trajectory (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinGroundTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinGroundTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinTrajectory (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinTrajectory (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("9828cf27-8312-48b8-bd85-26cf2cdf9d02"))
AgVeGfxGroundEllipsesCollection;
    // [ default ] interface IUnknown
    // interface IAgVeGfxGroundEllipsesCollection

struct __declspec(uuid("81c33ada-a6aa-4306-8e27-761a8a95867b"))
AgVeGfxTimeEventTypeLine;
    // [ default ] interface _IAgVeGfxTimeEventTypeLine
    // interface IAgVeGfxTimeEventType
    // interface IAgVeGfxTimeEventTypeLine

enum AgEVeGfxOffset
{
    eOffsetUnknown = -1,
    eOffsetLeft = 0,
    eOffsetRight = 1
};

struct __declspec(uuid("cc915bdc-0a06-49d5-899e-48cf04bdcd35"))
_IAgVeGfxTimeEventTypeLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetUniqueID,put=PutUniqueID))
    _bstr_t UniqueID;
    __declspec(property(get=GetOffsetType))
    enum AgEVeGfxOffset OffsetType;
    __declspec(property(get=GetOffsetSupportedTypes))
    SAFEARRAY * OffsetSupportedTypes;
    __declspec(property(get=GetOffsetPixels,put=PutOffsetPixels))
    long OffsetPixels;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle ppVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth ppVal );
    _bstr_t GetUniqueID ( );
    void PutUniqueID (
        _bstr_t pVal );
    enum AgEVeGfxOffset GetOffsetType ( );
    HRESULT SetOffsetType (
        enum AgEVeGfxOffset Offset );
    VARIANT_BOOL IsOffsetTypeSupported (
        enum AgEVeGfxOffset Offset );
    SAFEARRAY * GetOffsetSupportedTypes ( );
    long GetOffsetPixels ( );
    void PutOffsetPixels (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * ppVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle ppVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * ppVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth ppVal ) = 0;
      virtual HRESULT __stdcall get_UniqueID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UniqueID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum AgEVeGfxOffset * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetOffsetType (
        /*[in]*/ enum AgEVeGfxOffset Offset ) = 0;
      virtual HRESULT __stdcall raw_IsOffsetTypeSupported (
        /*[in]*/ enum AgEVeGfxOffset Offset,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetPixels (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetPixels (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("dfe5bfe5-695c-4419-a6b5-790fceab9551"))
IAgVeGfxTimeEventTypeLine : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetUniqueID,put=PutUniqueID))
    _bstr_t UniqueID;
    __declspec(property(get=GetOffsetType))
    enum AgEVeGfxOffset OffsetType;
    __declspec(property(get=GetOffsetSupportedTypes))
    SAFEARRAY * OffsetSupportedTypes;
    __declspec(property(get=GetOffsetPixels,put=PutOffsetPixels))
    long OffsetPixels;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    _bstr_t GetUniqueID ( );
    void PutUniqueID (
        _bstr_t pVal );
    enum AgEVeGfxOffset GetOffsetType ( );
    HRESULT SetOffsetType (
        enum AgEVeGfxOffset Offset );
    VARIANT_BOOL IsOffsetTypeSupported (
        enum AgEVeGfxOffset Offset );
    SAFEARRAY * GetOffsetSupportedTypes ( );
    long GetOffsetPixels ( );
    void PutOffsetPixels (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_UniqueID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UniqueID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum AgEVeGfxOffset * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetOffsetType (
        /*[in]*/ enum AgEVeGfxOffset Offset ) = 0;
      virtual HRESULT __stdcall raw_IsOffsetTypeSupported (
        /*[in]*/ enum AgEVeGfxOffset Offset,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetPixels (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetPixels (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("a2023d90-1ec7-4772-819d-7866fa0682ee"))
AgVeGfxTimeEventTypeMarker;
    // [ default ] interface _IAgVeGfxTimeEventTypeMarker
    // interface IAgVeGfxTimeEventType
    // interface IAgVeGfxTimeEventTypeMarker

struct __declspec(uuid("54cd4642-7c6c-49ba-b66e-c3a6bbce0b41"))
_IAgVeGfxTimeEventTypeMarker : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetUniqueID,put=PutUniqueID))
    _bstr_t UniqueID;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    _bstr_t GetUniqueID ( );
    void PutUniqueID (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UniqueID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UniqueID (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("c6f1fd8d-ad5b-4d95-9f95-ba5927dfb2c0"))
IAgVeGfxTimeEventTypeMarker : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetUniqueID,put=PutUniqueID))
    _bstr_t UniqueID;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    _bstr_t GetUniqueID ( );
    void PutUniqueID (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UniqueID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UniqueID (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("e519536a-ad6f-493d-8d25-e503dfcce5e3"))
AgVeGfxTimeEventTypeText;
    // [ default ] interface _IAgVeGfxTimeEventTypeText
    // interface IAgVeGfxTimeEventType
    // interface IAgVeGfxTimeEventTypeText

struct __declspec(uuid("f3f5459e-b122-4223-8b97-3ca1c6d796e6"))
_IAgVeGfxTimeEventTypeText : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetUniqueID,put=PutUniqueID))
    _bstr_t UniqueID;
    __declspec(property(get=GetOffsetType))
    enum AgEVeGfxOffset OffsetType;
    __declspec(property(get=GetOffsetSupportedTypes))
    SAFEARRAY * OffsetSupportedTypes;
    __declspec(property(get=GetOffsetPixels,put=PutOffsetPixels))
    long OffsetPixels;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetUniqueID ( );
    void PutUniqueID (
        _bstr_t pVal );
    enum AgEVeGfxOffset GetOffsetType ( );
    HRESULT SetOffsetType (
        enum AgEVeGfxOffset Offset );
    VARIANT_BOOL IsOffsetTypeSupported (
        enum AgEVeGfxOffset Offset );
    SAFEARRAY * GetOffsetSupportedTypes ( );
    long GetOffsetPixels ( );
    void PutOffsetPixels (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UniqueID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UniqueID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum AgEVeGfxOffset * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetOffsetType (
        /*[in]*/ enum AgEVeGfxOffset Offset ) = 0;
      virtual HRESULT __stdcall raw_IsOffsetTypeSupported (
        /*[in]*/ enum AgEVeGfxOffset Offset,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetPixels (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetPixels (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("06cb253e-cb7d-44da-94fc-8d4eaa847554"))
IAgVeGfxTimeEventTypeText : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetUniqueID,put=PutUniqueID))
    _bstr_t UniqueID;
    __declspec(property(get=GetOffsetType))
    enum AgEVeGfxOffset OffsetType;
    __declspec(property(get=GetOffsetSupportedTypes))
    SAFEARRAY * OffsetSupportedTypes;
    __declspec(property(get=GetOffsetPixels,put=PutOffsetPixels))
    long OffsetPixels;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    _bstr_t GetUniqueID ( );
    void PutUniqueID (
        _bstr_t pVal );
    enum AgEVeGfxOffset GetOffsetType ( );
    HRESULT SetOffsetType (
        enum AgEVeGfxOffset Offset );
    VARIANT_BOOL IsOffsetTypeSupported (
        enum AgEVeGfxOffset Offset );
    SAFEARRAY * GetOffsetSupportedTypes ( );
    long GetOffsetPixels ( );
    void PutOffsetPixels (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UniqueID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UniqueID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum AgEVeGfxOffset * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetOffsetType (
        /*[in]*/ enum AgEVeGfxOffset Offset ) = 0;
      virtual HRESULT __stdcall raw_IsOffsetTypeSupported (
        /*[in]*/ enum AgEVeGfxOffset Offset,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetPixels (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetPixels (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("ce3aca32-b41d-42f0-9f49-85360c92e70c"))
AgVeGfxTimeEventsElement;
    // [ default ] interface _IAgVeGfxTimeEventsElement
    // interface IAgVeGfxTimeEventsElement

struct __declspec(uuid("39dc01b7-3243-4a4a-9a12-6c60a441e3a3"))
_IAgVeGfxTimeEventsElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTimeEventType))
    enum AgEVeGfxTimeEventType TimeEventType;
    __declspec(property(get=GetTimeEventTypeSupportedTypes))
    SAFEARRAY * TimeEventTypeSupportedTypes;
    __declspec(property(get=GetTimeEventTypeData))
    IAgVeGfxTimeEventTypePtr TimeEventTypeData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    enum AgEVeGfxTimeEventType GetTimeEventType ( );
    HRESULT SetTimeEventType (
        enum AgEVeGfxTimeEventType TimeEventType );
    VARIANT_BOOL IsTimeEventTypeSupported (
        enum AgEVeGfxTimeEventType TimeEventType );
    SAFEARRAY * GetTimeEventTypeSupportedTypes ( );
    IAgVeGfxTimeEventTypePtr GetTimeEventTypeData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimeEventType (
        /*[out,retval]*/ enum AgEVeGfxTimeEventType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTimeEventType (
        /*[in]*/ enum AgEVeGfxTimeEventType TimeEventType ) = 0;
      virtual HRESULT __stdcall raw_IsTimeEventTypeSupported (
        /*[in]*/ enum AgEVeGfxTimeEventType TimeEventType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeEventTypeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeEventTypeData (
        /*[out,retval]*/ struct IAgVeGfxTimeEventType * * ppVal ) = 0;
};

struct __declspec(uuid("68d96508-8ffa-44ac-8929-c9e09b6bbf11"))
AgVeGfxTimeEventsCollection;
    // [ default ] interface IUnknown
    // interface IAgVeGfxTimeEventsCollection

struct __declspec(uuid("9136b1fb-7558-4d84-8195-dd96127ca72c"))
AgVeGfxPassShowPasses;
    // [ default ] interface _IAgVeGfxPassShowPasses
    // interface IAgVeGfxPass
    // interface IAgVeGfxPassShowPasses

struct __declspec(uuid("19621556-d15d-4ed5-a294-6b48b9a2bb1a"))
_IAgVeGfxPassShowPasses : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstPass,put=PutFirstPass))
    long FirstPass;
    __declspec(property(get=GetLastPass,put=PutLastPass))
    long LastPass;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstPass ( );
    void PutFirstPass (
        long pVal );
    long GetLastPass ( );
    void PutLastPass (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstPass (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPass (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LastPass (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LastPass (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("12a5ceec-ef30-4ed4-aa28-c38bba83bfa1"))
IAgVeGfxPassShowPasses : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstPass,put=PutFirstPass))
    long FirstPass;
    __declspec(property(get=GetLastPass,put=PutLastPass))
    long LastPass;

    //
    // Wrapper methods for error-handling
    //

    long GetFirstPass ( );
    void PutFirstPass (
        long pVal );
    long GetLastPass ( );
    void PutLastPass (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstPass (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPass (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LastPass (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LastPass (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("6c9291ac-dd77-4e41-8294-ae2b88395ee2"))
AgVeGfxPasses;
    // [ default ] interface _IAgVeGfxPasses
    // interface IAgVeGfxPasses

struct __declspec(uuid("e3edac55-0eb5-43a6-94c6-b583f316f8b1"))
_IAgVeGfxPasses : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPassType))
    enum AgEVeGfxPass PassType;
    __declspec(property(get=GetPassSupportedTypes))
    SAFEARRAY * PassSupportedTypes;
    __declspec(property(get=GetPass))
    IAgVeGfxPassPtr Pass;
    __declspec(property(get=GetVisibleSides,put=PutVisibleSides))
    enum AgEVeGfxVisibleSides VisibleSides;
    __declspec(property(get=GetIsPassLabelsVisible,put=PutIsPassLabelsVisible))
    VARIANT_BOOL IsPassLabelsVisible;
    __declspec(property(get=GetIsPathLabelsVisible,put=PutIsPathLabelsVisible))
    VARIANT_BOOL IsPathLabelsVisible;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxPass GetPassType ( );
    HRESULT SetPassType (
        enum AgEVeGfxPass Pass );
    VARIANT_BOOL IsPassTypeSupported (
        enum AgEVeGfxPass Pass );
    SAFEARRAY * GetPassSupportedTypes ( );
    IAgVeGfxPassPtr GetPass ( );
    enum AgEVeGfxVisibleSides GetVisibleSides ( );
    void PutVisibleSides (
        enum AgEVeGfxVisibleSides pVal );
    VARIANT_BOOL GetIsPassLabelsVisible ( );
    void PutIsPassLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPathLabelsVisible ( );
    void PutIsPathLabelsVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PassType (
        /*[out,retval]*/ enum AgEVeGfxPass * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPassType (
        /*[in]*/ enum AgEVeGfxPass Pass ) = 0;
      virtual HRESULT __stdcall raw_IsPassTypeSupported (
        /*[in]*/ enum AgEVeGfxPass Pass,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PassSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Pass (
        /*[out,retval]*/ struct IAgVeGfxPass * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VisibleSides (
        /*[out,retval]*/ enum AgEVeGfxVisibleSides * pVal ) = 0;
      virtual HRESULT __stdcall put_VisibleSides (
        /*[in]*/ enum AgEVeGfxVisibleSides pVal ) = 0;
      virtual HRESULT __stdcall get_IsPassLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPassLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPathLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPathLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("c72f20c7-904a-4c7a-a0fc-81cec90af265"))
AgVeGfxSAA;
    // [ default ] interface _IAgVeGfxSAA
    // interface IAgVeGfxSAA

struct __declspec(uuid("b916a134-d36f-44e3-8fac-a4f46c29df24"))
_IAgVeGfxSAA : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetUseVehicleAlt,put=PutUseVehicleAlt))
    VARIANT_BOOL UseVehicleAlt;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetIsFillVisible,put=PutIsFillVisible))
    VARIANT_BOOL IsFillVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseVehicleAlt ( );
    void PutUseVehicleAlt (
        VARIANT_BOOL pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    VARIANT_BOOL GetIsFillVisible ( );
    void PutIsFillVisible (
        VARIANT_BOOL pVal );
    enum STKUtil::AgEFillStyle GetFillStyle ( );
    void PutFillStyle (
        enum STKUtil::AgEFillStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseVehicleAlt (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseVehicleAlt (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsFillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ enum STKUtil::AgEFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ enum STKUtil::AgEFillStyle pVal ) = 0;
};

struct __declspec(uuid("efeaa98b-8588-45f6-a6f2-6eaf55074d62"))
AgVeGfxElevationsElement;
    // [ default ] interface _IAgVeGfxElevationsElement
    // interface IAgVeGfxElevationsElement

struct __declspec(uuid("bff6d6ed-6ed5-40a3-8a9b-6cf0ba905c7a"))
_IAgVeGfxElevationsElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetElevation,put=PutElevation))
    double Elevation;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetDistanceVisible,put=PutDistanceVisible))
    VARIANT_BOOL DistanceVisible;
    __declspec(property(get=GetUserTextVisible,put=PutUserTextVisible))
    VARIANT_BOOL UserTextVisible;
    __declspec(property(get=GetUserText,put=PutUserText))
    _bstr_t UserText;
    __declspec(property(get=GetLabelAngle,put=PutLabelAngle))
    long LabelAngle;

    //
    // Wrapper methods for error-handling
    //

    double GetElevation ( );
    void PutElevation (
        double pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetDistanceVisible ( );
    void PutDistanceVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUserTextVisible ( );
    void PutUserTextVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetUserText ( );
    void PutUserText (
        _bstr_t pVal );
    long GetLabelAngle ( );
    void PutLabelAngle (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Elevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_DistanceVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DistanceVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UserTextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UserTextVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UserText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelAngle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelAngle (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("0085d0cc-784b-4029-8786-be840d86469b"))
AgVeGfxElevationsCollection;
    // [ default ] interface IUnknown
    // interface IAgVeGfxElevationsCollection

struct __declspec(uuid("96e7da4d-98a8-49bf-a33b-3b379eb1bb46"))
AgVeGfxElevContours;
    // [ default ] interface _IAgVeGfxElevContours
    // interface IAgVeGfxElevContours

struct __declspec(uuid("fb441fc5-ff1a-4746-ab2e-46969e60b8df"))
_IAgVeGfxElevContours : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsFillVisible,put=PutIsFillVisible))
    VARIANT_BOOL IsFillVisible;
    __declspec(property(get=GetNumOfDecimalDigits,put=PutNumOfDecimalDigits))
    long NumOfDecimalDigits;
    __declspec(property(get=GetElevations))
    IAgVeGfxElevationsCollectionPtr Elevations;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsFillVisible ( );
    void PutIsFillVisible (
        VARIANT_BOOL pVal );
    enum STKUtil::AgEFillStyle GetFillStyle ( );
    void PutFillStyle (
        enum STKUtil::AgEFillStyle pVal );
    long GetNumOfDecimalDigits ( );
    void PutNumOfDecimalDigits (
        long pVal );
    IAgVeGfxElevationsCollectionPtr GetElevations ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsFillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillStyle (
        /*[out,retval]*/ enum STKUtil::AgEFillStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_FillStyle (
        /*[in]*/ enum STKUtil::AgEFillStyle pVal ) = 0;
      virtual HRESULT __stdcall get_NumOfDecimalDigits (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumOfDecimalDigits (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Elevations (
        /*[out,retval]*/ struct IAgVeGfxElevationsCollection * * ppVal ) = 0;
};

struct __declspec(uuid("dec96e73-480b-4981-8fc7-c24691743966"))
AgVeGfxRouteResolution;
    // [ default ] interface _IAgVeGfxRouteResolution
    // interface IAgVeGfxRouteResolution

struct __declspec(uuid("ad68fdec-b250-4d2f-a242-571e2631901d"))
_IAgVeGfxRouteResolution : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRoute,put=PutRoute))
    double Route;
    __declspec(property(get=GetMinRoute,put=PutMinRoute))
    double MinRoute;

    //
    // Wrapper methods for error-handling
    //

    double GetRoute ( );
    void PutRoute (
        double pVal );
    double GetMinRoute ( );
    void PutMinRoute (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Route (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinRoute (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinRoute (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("7108a5d8-8e50-4457-ab2f-edc54fbf4b50"))
IAgVeGfxRouteResolution : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRoute,put=PutRoute))
    double Route;
    __declspec(property(get=GetMinRoute,put=PutMinRoute))
    double MinRoute;

    //
    // Wrapper methods for error-handling
    //

    double GetRoute ( );
    void PutRoute (
        double pVal );
    double GetMinRoute ( );
    void PutMinRoute (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Route (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinRoute (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinRoute (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("50fbbf01-f41d-4a4f-96c4-ef37d0385872"))
AgVeGfxWaypointMarkersElement;
    // [ default ] interface _IAgVeGfxWaypointMarkersElement
    // interface IAgVeGfxWaypointMarkersElement

struct __declspec(uuid("b5857ec7-24b0-4d57-92d0-eb69e8a85d02"))
_IAgVeGfxWaypointMarkersElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime))
    _variant_t Time;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetUseVehColor,put=PutUseVehColor))
    VARIANT_BOOL UseVehColor;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    VARIANT_BOOL GetUseVehColor ( );
    void PutUseVehColor (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UseVehColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseVehColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("a229a60c-d631-4ad4-872e-58a4782d7ecd"))
IAgVeGfxWaypointMarkersElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime))
    _variant_t Time;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetUseVehColor,put=PutUseVehColor))
    VARIANT_BOOL UseVehColor;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t pVal );
    VARIANT_BOOL GetUseVehColor ( );
    void PutUseVehColor (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UseVehColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseVehColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("12a7cfd0-1bb0-42e0-8dcb-f4bbd0e42146"))
AgVeGfxWaypointMarkersCollection;
    // [ default ] interface IUnknown
    // interface IAgVeGfxWaypointMarkersCollection

struct __declspec(uuid("85f8c50d-bc87-4b3a-8157-9118843331dd"))
IAgVeGfxWaypointMarkersCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeGfxWaypointMarkersElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeGfxWaypointMarkersElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeGfxWaypointMarkersElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("c547ab86-4cb0-48bb-b62c-ca5033397c1f"))
AgVeGfxWaypointMarker;
    // [ default ] interface _IAgVeGfxWaypointMarker
    // interface IAgVeGfxWaypointMarker

struct __declspec(uuid("2fb8e0f9-4b4d-4942-933e-3fc363e1b259"))
_IAgVeGfxWaypointMarker : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsWaypointMarkersVisible,put=PutIsWaypointMarkersVisible))
    VARIANT_BOOL IsWaypointMarkersVisible;
    __declspec(property(get=GetIsTurnMarkersVisible,put=PutIsTurnMarkersVisible))
    VARIANT_BOOL IsTurnMarkersVisible;
    __declspec(property(get=GetWaypointMarkers))
    IAgVeGfxWaypointMarkersCollectionPtr WaypointMarkers;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsWaypointMarkersVisible ( );
    void PutIsWaypointMarkersVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTurnMarkersVisible ( );
    void PutIsTurnMarkersVisible (
        VARIANT_BOOL pVal );
    IAgVeGfxWaypointMarkersCollectionPtr GetWaypointMarkers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsWaypointMarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsWaypointMarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTurnMarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTurnMarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WaypointMarkers (
        /*[out,retval]*/ struct IAgVeGfxWaypointMarkersCollection * * ppVal ) = 0;
};

struct __declspec(uuid("d154d018-0f76-42e4-a956-f5fe620658e9"))
IAgVeGfxWaypointMarker : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsWaypointMarkersVisible,put=PutIsWaypointMarkersVisible))
    VARIANT_BOOL IsWaypointMarkersVisible;
    __declspec(property(get=GetIsTurnMarkersVisible,put=PutIsTurnMarkersVisible))
    VARIANT_BOOL IsTurnMarkersVisible;
    __declspec(property(get=GetWaypointMarkers))
    IAgVeGfxWaypointMarkersCollectionPtr WaypointMarkers;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsWaypointMarkersVisible ( );
    void PutIsWaypointMarkersVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTurnMarkersVisible ( );
    void PutIsTurnMarkersVisible (
        VARIANT_BOOL pVal );
    IAgVeGfxWaypointMarkersCollectionPtr GetWaypointMarkers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsWaypointMarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsWaypointMarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTurnMarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTurnMarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WaypointMarkers (
        /*[out,retval]*/ struct IAgVeGfxWaypointMarkersCollection * * ppVal ) = 0;
};

struct __declspec(uuid("9f2fab98-0056-4a98-a65b-fcb1ebfd74d1"))
AgVeGfxInterval;
    // [ default ] interface _IAgVeGfxInterval
    // interface IAgVeGfxInterval

struct __declspec(uuid("2d0d01f1-2658-408b-af2e-1f469f2f9bfb"))
_IAgVeGfxInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGfxAttributes))
    IAgVeGfxAttributesBasicPtr GfxAttributes;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxAttributesBasicPtr GetGfxAttributes ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GfxAttributes (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("8460469c-764c-4a88-a801-238bf5b17eff"))
AgVeGfxPassResolution;
    // [ default ] interface _IAgVeGfxPassResolution
    // interface IAgVeGfxPassResolution

struct __declspec(uuid("57ae70ff-72ad-4b0e-9b04-bfe6e4b032b6"))
_IAgVeGfxPassResolution : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack,put=PutGroundTrack))
    double GroundTrack;
    __declspec(property(get=GetOrbit,put=PutOrbit))
    double Orbit;
    __declspec(property(get=GetMinGroundTrack,put=PutMinGroundTrack))
    double MinGroundTrack;
    __declspec(property(get=GetMinOrbit,put=PutMinOrbit))
    double MinOrbit;

    //
    // Wrapper methods for error-handling
    //

    double GetGroundTrack ( );
    void PutGroundTrack (
        double pVal );
    double GetOrbit ( );
    void PutOrbit (
        double pVal );
    double GetMinGroundTrack ( );
    void PutMinGroundTrack (
        double pVal );
    double GetMinOrbit ( );
    void PutMinOrbit (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GroundTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Orbit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinGroundTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinGroundTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinOrbit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinOrbit (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("4983b9fd-4543-4475-8f85-98dbdcddc26a"))
AgVeGfxGroundEllipsesElement;
    // [ default ] interface _IAgVeGfxGroundEllipsesElement
    // interface IAgVeGfxGroundEllipsesElement

struct __declspec(uuid("7dbc86a7-e30a-434a-8b46-3d6f4d7f5c0b"))
_IAgVeGfxGroundEllipsesElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEllipseSetName))
    _bstr_t EllipseSetName;
    __declspec(property(get=GetStaticGfx,put=PutStaticGfx))
    VARIANT_BOOL StaticGfx;
    __declspec(property(get=GetDynamicGfx,put=PutDynamicGfx))
    VARIANT_BOOL DynamicGfx;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    VARIANT_BOOL Interpolate;
    __declspec(property(get=GetIsNameVisible,put=PutIsNameVisible))
    VARIANT_BOOL IsNameVisible;
    __declspec(property(get=GetIsCenterVisible,put=PutIsCenterVisible))
    VARIANT_BOOL IsCenterVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEllipseSetName ( );
    VARIANT_BOOL GetStaticGfx ( );
    void PutStaticGfx (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDynamicGfx ( );
    void PutDynamicGfx (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInterpolate ( );
    void PutInterpolate (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsNameVisible ( );
    void PutIsNameVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsCenterVisible ( );
    void PutIsCenterVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EllipseSetName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StaticGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_StaticGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DynamicGfx (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DynamicGfx (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsNameVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsNameVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsCenterVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsCenterVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("16a6ca90-2633-4d59-8037-b28901c1737d"))
AgVeGfxAttributesRoute;
    // [ default ] interface _IAgVeGfxAttributesRoute
    // interface IAgVeGfxAttributesBasic
    // interface IAgVeGfxAttributesRoute
    // interface IAgVeGfxAttributes

struct __declspec(uuid("960562ea-b483-4bbc-8cb0-61e96d203e56"))
_IAgVeGfxAttributesRoute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLine))
    IAgVeGfxLinePtr Line;
    __declspec(property(get=GetIsRouteVisible,put=PutIsRouteVisible))
    VARIANT_BOOL IsRouteVisible;
    __declspec(property(get=GetIsRouteMarkerVisible,put=PutIsRouteMarkerVisible))
    VARIANT_BOOL IsRouteMarkerVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    IAgVeGfxLinePtr GetLine ( );
    VARIANT_BOOL GetIsRouteVisible ( );
    void PutIsRouteVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsRouteMarkerVisible ( );
    void PutIsRouteMarkerVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IAgVeGfxLine * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsRouteVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsRouteVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsRouteMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsRouteMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("2443cef4-f4d5-4c1e-b889-b5637a63a42f"))
IAgVeGfxAttributesRoute : IAgVeGfxAttributesBasic
{
    //
    // Property data
    //

    __declspec(property(get=GetIsRouteVisible,put=PutIsRouteVisible))
    VARIANT_BOOL IsRouteVisible;
    __declspec(property(get=GetIsRouteMarkerVisible,put=PutIsRouteMarkerVisible))
    VARIANT_BOOL IsRouteMarkerVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsRouteVisible ( );
    void PutIsRouteVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsRouteMarkerVisible ( );
    void PutIsRouteMarkerVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsRouteVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsRouteVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsRouteMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsRouteMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("f0060fed-7148-410a-b6ff-c8ddcf573a69"))
AgVeGfxAttributesTrajectory;
    // [ default ] interface _IAgVeGfxAttributesTrajectory
    // interface IAgVeGfxAttributesBasic
    // interface IAgVeGfxAttributesTrajectory
    // interface IAgVeGfxAttributes

struct __declspec(uuid("4a3923c3-2932-43fc-86e0-433bc24f5e64"))
_IAgVeGfxAttributesTrajectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLine))
    IAgVeGfxLinePtr Line;
    __declspec(property(get=GetIsGroundTrackVisible,put=PutIsGroundTrackVisible))
    VARIANT_BOOL IsGroundTrackVisible;
    __declspec(property(get=GetIsGroundMarkerVisible,put=PutIsGroundMarkerVisible))
    VARIANT_BOOL IsGroundMarkerVisible;
    __declspec(property(get=GetIsTrajectoryVisible,put=PutIsTrajectoryVisible))
    VARIANT_BOOL IsTrajectoryVisible;
    __declspec(property(get=GetIsTrajectoryMarkerVisible,put=PutIsTrajectoryMarkerVisible))
    VARIANT_BOOL IsTrajectoryMarkerVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    IAgVeGfxLinePtr GetLine ( );
    VARIANT_BOOL GetIsGroundTrackVisible ( );
    void PutIsGroundTrackVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsGroundMarkerVisible ( );
    void PutIsGroundMarkerVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTrajectoryVisible ( );
    void PutIsTrajectoryVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTrajectoryMarkerVisible ( );
    void PutIsTrajectoryMarkerVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IAgVeGfxLine * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsGroundTrackVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsGroundTrackVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsGroundMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsGroundMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTrajectoryVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTrajectoryVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTrajectoryMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTrajectoryMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("1980c727-9856-4940-97d0-751f809f986c"))
IAgVeGfxAttributesTrajectory : IAgVeGfxAttributesBasic
{
    //
    // Property data
    //

    __declspec(property(get=GetIsGroundTrackVisible,put=PutIsGroundTrackVisible))
    VARIANT_BOOL IsGroundTrackVisible;
    __declspec(property(get=GetIsGroundMarkerVisible,put=PutIsGroundMarkerVisible))
    VARIANT_BOOL IsGroundMarkerVisible;
    __declspec(property(get=GetIsTrajectoryVisible,put=PutIsTrajectoryVisible))
    VARIANT_BOOL IsTrajectoryVisible;
    __declspec(property(get=GetIsTrajectoryMarkerVisible,put=PutIsTrajectoryMarkerVisible))
    VARIANT_BOOL IsTrajectoryMarkerVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsGroundTrackVisible ( );
    void PutIsGroundTrackVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsGroundMarkerVisible ( );
    void PutIsGroundMarkerVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTrajectoryVisible ( );
    void PutIsTrajectoryVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTrajectoryMarkerVisible ( );
    void PutIsTrajectoryMarkerVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsGroundTrackVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsGroundTrackVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsGroundMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsGroundMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTrajectoryVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTrajectoryVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTrajectoryMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTrajectoryMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("88309e14-7c91-4276-9323-c973e4784a49"))
AgVeGfxAttributesOrbit;
    // [ default ] interface _IAgVeGfxAttributesOrbit
    // interface IAgVeGfxAttributesBasic
    // interface IAgVeGfxAttributesOrbit
    // interface IAgVeGfxAttributes

struct __declspec(uuid("5f20a919-05c2-4bf2-a63a-37b80f29abc7"))
_IAgVeGfxAttributesOrbit : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLine))
    IAgVeGfxLinePtr Line;
    __declspec(property(get=GetIsGroundTrackVisible,put=PutIsGroundTrackVisible))
    VARIANT_BOOL IsGroundTrackVisible;
    __declspec(property(get=GetIsGroundMarkerVisible,put=PutIsGroundMarkerVisible))
    VARIANT_BOOL IsGroundMarkerVisible;
    __declspec(property(get=GetIsOrbitVisible,put=PutIsOrbitVisible))
    VARIANT_BOOL IsOrbitVisible;
    __declspec(property(get=GetIsOrbitMarkerVisible,put=PutIsOrbitMarkerVisible))
    VARIANT_BOOL IsOrbitMarkerVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    IAgVeGfxLinePtr GetLine ( );
    VARIANT_BOOL GetIsGroundTrackVisible ( );
    void PutIsGroundTrackVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsGroundMarkerVisible ( );
    void PutIsGroundMarkerVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsOrbitVisible ( );
    void PutIsOrbitVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsOrbitMarkerVisible ( );
    void PutIsOrbitMarkerVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IAgVeGfxLine * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsGroundTrackVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsGroundTrackVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsGroundMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsGroundMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsOrbitVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsOrbitVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsOrbitMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsOrbitMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("3eb64a12-3ffe-4602-99f6-56c6d10cfeae"))
IAgVeGfxAttributesOrbit : IAgVeGfxAttributesBasic
{
    //
    // Property data
    //

    __declspec(property(get=GetIsGroundTrackVisible,put=PutIsGroundTrackVisible))
    VARIANT_BOOL IsGroundTrackVisible;
    __declspec(property(get=GetIsGroundMarkerVisible,put=PutIsGroundMarkerVisible))
    VARIANT_BOOL IsGroundMarkerVisible;
    __declspec(property(get=GetIsOrbitVisible,put=PutIsOrbitVisible))
    VARIANT_BOOL IsOrbitVisible;
    __declspec(property(get=GetIsOrbitMarkerVisible,put=PutIsOrbitMarkerVisible))
    VARIANT_BOOL IsOrbitMarkerVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsGroundTrackVisible ( );
    void PutIsGroundTrackVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsGroundMarkerVisible ( );
    void PutIsGroundMarkerVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsOrbitVisible ( );
    void PutIsOrbitVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsOrbitMarkerVisible ( );
    void PutIsOrbitMarkerVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsGroundTrackVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsGroundTrackVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsGroundMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsGroundMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsOrbitVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsOrbitVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsOrbitMarkerVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsOrbitMarkerVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("fe287b9c-d1b9-4ca5-9387-f8fb97a40cdf"))
AgVOPointableElementsElement;
    // [ default ] interface _IAgVOPointableElementsElement
    // interface IAgVOPointableElementsElement

struct __declspec(uuid("3d40ee7b-ab35-4bad-8017-9712d04f6806"))
AgVOPointableElementsCollection;
    // [ default ] interface IUnknown
    // interface IAgVOPointableElementsCollection

struct __declspec(uuid("660dcedb-4482-4531-b5dc-09f4c3ce25af"))
AgVeVOSystemsElement;
    // [ default ] interface _IAgVeVOSystemsElement
    // interface IAgVeVOSystemsElementBase
    // interface IAgVeVOSystemsElement

struct __declspec(uuid("f7e6ab74-55e3-4e2c-b4c1-2c2df01d0c45"))
_IAgVeVOSystemsElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetVOWindow,put=PutVOWindow))
    _bstr_t VOWindow;
    __declspec(property(get=GetAvailableVOWindows))
    SAFEARRAY * AvailableVOWindows;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetVOWindow ( );
    void PutVOWindow (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableVOWindows ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetVOWindowIds ( );
    HRESULT SetVOWindowIds (
        SAFEARRAY * * WindowIds );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_VOWindow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VOWindow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVOWindows (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetVOWindowIds (
        /*[out,retval]*/ SAFEARRAY * * ppWindowIds ) = 0;
      virtual HRESULT __stdcall raw_SetVOWindowIds (
        /*[in]*/ SAFEARRAY * * WindowIds ) = 0;
};

struct __declspec(uuid("68d2ac0e-120e-468a-90fc-4440d6431c14"))
AgVeVOSystemsSpecialElement;
    // [ default ] interface _IAgVeVOSystemsSpecialElement
    // interface IAgVeVOSystemsElementBase
    // interface IAgVeVOSystemsSpecialElement

struct __declspec(uuid("d073d53c-2c73-46e8-b121-ca1b2018f8b4"))
_IAgVeVOSystemsSpecialElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetVOWindow,put=PutVOWindow))
    _bstr_t VOWindow;
    __declspec(property(get=GetAvailableVOWindows))
    SAFEARRAY * AvailableVOWindows;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetVOWindow ( );
    void PutVOWindow (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableVOWindows ( );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetVOWindowIds ( );
    HRESULT SetVOWindowIds (
        SAFEARRAY * * WindowIds );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_VOWindow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VOWindow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVOWindows (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetVOWindowIds (
        /*[out,retval]*/ SAFEARRAY * * ppWindowIds ) = 0;
      virtual HRESULT __stdcall raw_SetVOWindowIds (
        /*[in]*/ SAFEARRAY * * WindowIds ) = 0;
};

struct __declspec(uuid("b26da81d-ade6-4379-98ff-933d5ad7a3f1"))
AgVeVOSystemsCollection;
    // [ default ] interface IUnknown
    // interface IAgVeVOSystemsCollection

struct __declspec(uuid("c54a18c2-2c70-4f36-8450-2218220def32"))
AgVeVOControlBox;
    // [ default ] interface _IAgVeVOControlBox
    // interface IAgVeVOProximityAreaObject
    // interface IAgVeVOControlBox

struct __declspec(uuid("f580bd8c-b9ef-4410-b8b1-2ce7c1506b2e"))
_IAgVeVOControlBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;
    __declspec(property(get=GetIsTextVisible,put=PutIsTextVisible))
    VARIANT_BOOL IsTextVisible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCrossTrack,put=PutCrossTrack))
    double CrossTrack;
    __declspec(property(get=GetTangential,put=PutTangential))
    double Tangential;
    __declspec(property(get=GetNormal,put=PutNormal))
    double Normal;
    __declspec(property(get=GetCrossTrackOffset,put=PutCrossTrackOffset))
    double CrossTrackOffset;
    __declspec(property(get=GetTangentialOffset,put=PutTangentialOffset))
    double TangentialOffset;
    __declspec(property(get=GetNormalOffset,put=PutNormalOffset))
    double NormalOffset;
    __declspec(property(get=GetUseTranslucency,put=PutUseTranslucency))
    VARIANT_BOOL UseTranslucency;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTextVisible ( );
    void PutIsTextVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    double GetCrossTrack ( );
    void PutCrossTrack (
        double pVal );
    double GetTangential ( );
    void PutTangential (
        double pVal );
    double GetNormal ( );
    void PutNormal (
        double pVal );
    double GetCrossTrackOffset ( );
    void PutCrossTrackOffset (
        double pVal );
    double GetTangentialOffset ( );
    void PutTangentialOffset (
        double pVal );
    double GetNormalOffset ( );
    void PutNormalOffset (
        double pVal );
    VARIANT_BOOL GetUseTranslucency ( );
    void PutUseTranslucency (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTextVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_CrossTrack (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossTrack (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Tangential (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Tangential (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Normal (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CrossTrackOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossTrackOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TangentialOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TangentialOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NormalOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NormalOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTranslucency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("90da875b-d0ea-4352-8086-dc617a56765a"))
AgVeVOBearingBox;
    // [ default ] interface _IAgVeVOBearingBox
    // interface IAgVeVOProximityAreaObject
    // interface IAgVeVOBearingBox

struct __declspec(uuid("7bd6e1c9-2ff2-4c89-833e-8620e7396613"))
_IAgVeVOBearingBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;
    __declspec(property(get=GetIsTextVisible,put=PutIsTextVisible))
    VARIANT_BOOL IsTextVisible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetBearing,put=PutBearing))
    double Bearing;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetLengthOffset,put=PutLengthOffset))
    double LengthOffset;
    __declspec(property(get=GetWidthOffset,put=PutWidthOffset))
    double WidthOffset;
    __declspec(property(get=GetHeightOffset,put=PutHeightOffset))
    double HeightOffset;
    __declspec(property(get=GetUseTranslucency,put=PutUseTranslucency))
    VARIANT_BOOL UseTranslucency;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTextVisible ( );
    void PutIsTextVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    double GetBearing ( );
    void PutBearing (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    double GetLengthOffset ( );
    void PutLengthOffset (
        double pVal );
    double GetWidthOffset ( );
    void PutWidthOffset (
        double pVal );
    double GetHeightOffset ( );
    void PutHeightOffset (
        double pVal );
    VARIANT_BOOL GetUseTranslucency ( );
    void PutUseTranslucency (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTextVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LengthOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LengthOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WidthOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WidthOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HeightOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseTranslucency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTranslucency (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e04c7612-b2cb-4cc3-9410-5286b8a8e86b"))
AgVeVOBearingEllipse;
    // [ default ] interface _IAgVeVOBearingEllipse
    // interface IAgVeVOProximityAreaObject
    // interface IAgVeVOBearingEllipse

struct __declspec(uuid("dd0306ac-4995-4a91-a814-9a33e177b5a7"))
_IAgVeVOBearingEllipse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;
    __declspec(property(get=GetIsTextVisible,put=PutIsTextVisible))
    VARIANT_BOOL IsTextVisible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetBearing,put=PutBearing))
    double Bearing;
    __declspec(property(get=GetSemiMajorAxis,put=PutSemiMajorAxis))
    double SemiMajorAxis;
    __declspec(property(get=GetSemiMinorAxis,put=PutSemiMinorAxis))
    double SemiMinorAxis;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;
    __declspec(property(get=GetMajorAxisOffset,put=PutMajorAxisOffset))
    double MajorAxisOffset;
    __declspec(property(get=GetMinorAxisOffset,put=PutMinorAxisOffset))
    double MinorAxisOffset;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTextVisible ( );
    void PutIsTextVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    double GetBearing ( );
    void PutBearing (
        double pVal );
    double GetSemiMajorAxis ( );
    void PutSemiMajorAxis (
        double pVal );
    double GetSemiMinorAxis ( );
    void PutSemiMinorAxis (
        double pVal );
    double GetGranularity ( );
    void PutGranularity (
        double pVal );
    double GetMajorAxisOffset ( );
    void PutMajorAxisOffset (
        double pVal );
    double GetMinorAxisOffset ( );
    void PutMinorAxisOffset (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTextVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMajorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMajorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMinorAxis (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SemiMinorAxis (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MajorAxisOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MajorAxisOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinorAxisOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinorAxisOffset (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("cbd0eeaf-1e76-4ce3-ac58-7f12d15b1275"))
AgVeVOLineOfBearing;
    // [ default ] interface _IAgVeVOLineOfBearing
    // interface IAgVeVOProximityAreaObject
    // interface IAgVeVOLineOfBearing

struct __declspec(uuid("bc476e13-8ad2-44f3-b6ec-9502aa22a61f"))
_IAgVeVOLineOfBearing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;
    __declspec(property(get=GetIsTextVisible,put=PutIsTextVisible))
    VARIANT_BOOL IsTextVisible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetBearing,put=PutBearing))
    double Bearing;
    __declspec(property(get=GetOriginLatitude,put=PutOriginLatitude))
    double OriginLatitude;
    __declspec(property(get=GetOriginLongitude,put=PutOriginLongitude))
    double OriginLongitude;
    __declspec(property(get=GetOriginAltitude,put=PutOriginAltitude))
    double OriginAltitude;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetBearingError,put=PutBearingError))
    double BearingError;
    __declspec(property(get=GetErrorColor,put=PutErrorColor))
    OLE_COLOR ErrorColor;
    __declspec(property(get=GetErrorLineWidth,put=PutErrorLineWidth))
    enum AgELineWidth ErrorLineWidth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTextVisible ( );
    void PutIsTextVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    double GetBearing ( );
    void PutBearing (
        double pVal );
    double GetOriginLatitude ( );
    void PutOriginLatitude (
        double pVal );
    double GetOriginLongitude ( );
    void PutOriginLongitude (
        double pVal );
    double GetOriginAltitude ( );
    void PutOriginAltitude (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetBearingError ( );
    void PutBearingError (
        double pVal );
    OLE_COLOR GetErrorColor ( );
    void PutErrorColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetErrorLineWidth ( );
    void PutErrorLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTextVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTextVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Bearing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Bearing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginLatitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginLatitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginLongitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginLongitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BearingError (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BearingError (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ErrorColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorLineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_ErrorLineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("c204f3dd-0f0c-4681-98da-208f074e08da"))
AgVeVOGeoBox;
    // [ default ] interface _IAgVeVOGeoBox
    // interface IAgVeVOGeoBox

struct __declspec(uuid("61a302ce-9bd4-4497-89a6-88df7203110d"))
_IAgVeVOGeoBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetNorthSouth,put=PutNorthSouth))
    double NorthSouth;
    __declspec(property(get=GetEastWest,put=PutEastWest))
    double EastWest;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetNorthSouth ( );
    void PutNorthSouth (
        double pVal );
    double GetEastWest ( );
    void PutEastWest (
        double pVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    HRESULT Reposition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NorthSouth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NorthSouth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EastWest (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EastWest (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall raw_Reposition ( ) = 0;
};

struct __declspec(uuid("9fb20d99-7ef4-4f49-b8ee-065a4090074e"))
AgVeVORouteProximity;
    // [ default ] interface _IAgVeVORouteProximity
    // interface IAgVeVOProximity
    // interface IAgVeVORouteProximity

struct __declspec(uuid("a5287f12-da93-4a56-883b-d3785b09d42c"))
_IAgVeVORouteProximity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControlBox))
    IAgVeVOControlBoxPtr ControlBox;
    __declspec(property(get=GetBearingBox))
    IAgVeVOBearingBoxPtr BearingBox;
    __declspec(property(get=GetBearingEllipse))
    IAgVeVOBearingEllipsePtr BearingEllipse;
    __declspec(property(get=GetLineOfBearing))
    IAgVeVOLineOfBearingPtr LineOfBearing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOControlBoxPtr GetControlBox ( );
    IAgVeVOBearingBoxPtr GetBearingBox ( );
    IAgVeVOBearingEllipsePtr GetBearingEllipse ( );
    IAgVeVOLineOfBearingPtr GetLineOfBearing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlBox (
        /*[out,retval]*/ struct IAgVeVOControlBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingBox (
        /*[out,retval]*/ struct IAgVeVOBearingBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingEllipse (
        /*[out,retval]*/ struct IAgVeVOBearingEllipse * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LineOfBearing (
        /*[out,retval]*/ struct IAgVeVOLineOfBearing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("654ee75b-f5c4-4717-b181-7ed012f35dce"))
IAgVeVORouteProximity : IAgVeVOProximity
{
    //
    // Property data
    //

    __declspec(property(get=GetControlBox))
    IAgVeVOControlBoxPtr ControlBox;
    __declspec(property(get=GetBearingBox))
    IAgVeVOBearingBoxPtr BearingBox;
    __declspec(property(get=GetBearingEllipse))
    IAgVeVOBearingEllipsePtr BearingEllipse;
    __declspec(property(get=GetLineOfBearing))
    IAgVeVOLineOfBearingPtr LineOfBearing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOControlBoxPtr GetControlBox ( );
    IAgVeVOBearingBoxPtr GetBearingBox ( );
    IAgVeVOBearingEllipsePtr GetBearingEllipse ( );
    IAgVeVOLineOfBearingPtr GetLineOfBearing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlBox (
        /*[out,retval]*/ struct IAgVeVOControlBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingBox (
        /*[out,retval]*/ struct IAgVeVOBearingBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingEllipse (
        /*[out,retval]*/ struct IAgVeVOBearingEllipse * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LineOfBearing (
        /*[out,retval]*/ struct IAgVeVOLineOfBearing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("abc1fa81-0982-4fd3-8d8b-dff5caf3bcde"))
AgVeVOOrbitProximity;
    // [ default ] interface _IAgVeVOOrbitProximity
    // interface IAgVeVOProximity
    // interface IAgVeVOOrbitProximity

struct __declspec(uuid("f711f107-abff-4a64-be05-d493034aa750"))
_IAgVeVOOrbitProximity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGeoBox))
    IAgVeVOGeoBoxPtr GeoBox;
    __declspec(property(get=GetControlBox))
    IAgVeVOControlBoxPtr ControlBox;
    __declspec(property(get=GetBearingBox))
    IAgVeVOBearingBoxPtr BearingBox;
    __declspec(property(get=GetBearingEllipse))
    IAgVeVOBearingEllipsePtr BearingEllipse;
    __declspec(property(get=GetLineOfBearing))
    IAgVeVOLineOfBearingPtr LineOfBearing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOGeoBoxPtr GetGeoBox ( );
    IAgVeVOControlBoxPtr GetControlBox ( );
    IAgVeVOBearingBoxPtr GetBearingBox ( );
    IAgVeVOBearingEllipsePtr GetBearingEllipse ( );
    IAgVeVOLineOfBearingPtr GetLineOfBearing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GeoBox (
        /*[out,retval]*/ struct IAgVeVOGeoBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ControlBox (
        /*[out,retval]*/ struct IAgVeVOControlBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingBox (
        /*[out,retval]*/ struct IAgVeVOBearingBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingEllipse (
        /*[out,retval]*/ struct IAgVeVOBearingEllipse * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LineOfBearing (
        /*[out,retval]*/ struct IAgVeVOLineOfBearing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("507a8fa3-f100-4c6c-bb19-c75be2fb6866"))
AgVeVOElevContours;
    // [ default ] interface _IAgVeVOElevContours
    // interface IAgVeVOElevContours

struct __declspec(uuid("0a9ad7cb-f889-4ddc-bd0a-a50109bcff96"))
_IAgVeVOElevContours : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsConesVisible,put=PutIsConesVisible))
    VARIANT_BOOL IsConesVisible;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;
    __declspec(property(get=GetFill,put=PutFill))
    VARIANT_BOOL Fill;
    __declspec(property(get=GetFillTranslucency,put=PutFillTranslucency))
    double FillTranslucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsConesVisible ( );
    void PutIsConesVisible (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );
    VARIANT_BOOL GetFill ( );
    void PutFill (
        VARIANT_BOOL pVal );
    double GetFillTranslucency ( );
    void PutFillTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsConesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsConesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Fill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillTranslucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillTranslucency (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a13bb227-f045-4842-a7f3-085ebbae4dec"))
AgVeVOSAA;
    // [ default ] interface _IAgVeVOSAA
    // interface IAgVeVOSAA

struct __declspec(uuid("66c57e5b-6470-47a5-a5b4-c6dac9726a9b"))
_IAgVeVOSAA : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("00c88117-8a47-4bc2-b581-132fb77b3179"))
AgVeVOSigmaScaleProbability;
    // [ default ] interface _IAgVeVOSigmaScaleProbability
    // interface IAgVeVOSigmaScale
    // interface IAgVeVOSigmaScaleProbability

struct __declspec(uuid("bd387ef3-d992-43df-8024-7d8becb8601b"))
_IAgVeVOSigmaScaleProbability : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProbability,put=PutProbability))
    double Probability;

    //
    // Wrapper methods for error-handling
    //

    double GetProbability ( );
    void PutProbability (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Probability (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Probability (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("28f9219a-a414-4b43-938e-e742572b4043"))
IAgVeVOSigmaScaleProbability : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProbability,put=PutProbability))
    double Probability;

    //
    // Wrapper methods for error-handling
    //

    double GetProbability ( );
    void PutProbability (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Probability (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Probability (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a9e68c5f-b3c8-4304-baf1-e6fceea728c1"))
AgVeVOSigmaScaleScale;
    // [ default ] interface _IAgVeVOSigmaScaleScale
    // interface IAgVeVOSigmaScale
    // interface IAgVeVOSigmaScaleScale

struct __declspec(uuid("ce406066-d20f-4480-8d63-96932f378d1c"))
_IAgVeVOSigmaScaleScale : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;

    //
    // Wrapper methods for error-handling
    //

    double GetScaleValue ( );
    void PutScaleValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("94877b45-cb73-471d-aa1c-04f594f94b6c"))
IAgVeVOSigmaScaleScale : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;

    //
    // Wrapper methods for error-handling
    //

    double GetScaleValue ( );
    void PutScaleValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("341f6645-0299-4528-8448-594b8242ed61"))
AgVeVODefaultAttributes;
    // [ default ] interface _IAgVeVODefaultAttributes
    // interface IAgVeVODefaultAttributes

struct __declspec(uuid("1bade691-fe64-47aa-b95f-c89a74fd8565"))
_IAgVeVODefaultAttributes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pTranslucency );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pTranslucency ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pTranslucency ) = 0;
};

struct __declspec(uuid("a045b122-d0fc-47a8-98c9-bbad264b2a39"))
IAgVeVODefaultAttributes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pTranslucency );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pTranslucency ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pTranslucency ) = 0;
};

struct __declspec(uuid("6df7c867-d73d-4dd5-aa17-d4b57d5156ed"))
AgVeVOIntervalsElement;
    // [ default ] interface _IAgVeVOIntervalsElement
    // interface IAgVeVOIntervalsElement

struct __declspec(uuid("a4de3e44-5cde-4022-b724-75b39b1fba99"))
_IAgVeVOIntervalsElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pTranslucency );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pTranslucency ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pTranslucency ) = 0;
};

struct __declspec(uuid("825e2f1e-2df1-426d-9c56-a20a2ede3be4"))
IAgVeVOIntervalsElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pTranslucency );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pTranslucency ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pTranslucency ) = 0;
};

struct __declspec(uuid("d795b689-7832-43e4-9a12-f017a815df77"))
AgVeVOIntervalsCollection;
    // [ default ] interface IUnknown
    // interface IAgVeVOIntervalsCollection

struct __declspec(uuid("a9dbed44-4a7a-4f26-9064-c88857b7d9e7"))
IAgVeVOIntervalsCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeVOIntervalsElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeVOIntervalsElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeVOIntervalsElementPtr Add (
        const _variant_t & Start,
        const _variant_t & Stop );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeVOIntervalsElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop,
        /*[out,retval]*/ struct IAgVeVOIntervalsElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("0c1dc575-b507-438c-9609-578b26947646"))
AgVeVOAttributesBasic;
    // [ default ] interface _IAgVeVOAttributesBasic
    // interface IAgVeVOAttributes
    // interface IAgVeVOAttributesBasic

struct __declspec(uuid("f027c43f-ea60-441a-8c5c-7f5a563c4969"))
_IAgVeVOAttributesBasic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pTranslucency );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pTranslucency ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pTranslucency ) = 0;
};

struct __declspec(uuid("0a073acb-2aa8-4237-ac40-dad6ffee88f2"))
IAgVeVOAttributesBasic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pTranslucency );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pTranslucency ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pTranslucency ) = 0;
};

struct __declspec(uuid("34adc2f6-0f21-4f6e-812b-c193fdd1b7df"))
AgVeVOAttributesIntervals;
    // [ default ] interface _IAgVeVOAttributesIntervals
    // interface IAgVeVOAttributes
    // interface IAgVeVOAttributesIntervals

struct __declspec(uuid("ec093d20-1f45-4812-8a18-9e94f06fa181"))
_IAgVeVOAttributesIntervals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultAttributes))
    IAgVeVODefaultAttributesPtr DefaultAttributes;
    __declspec(property(get=GetIntervals))
    IAgVeVOIntervalsCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODefaultAttributesPtr GetDefaultAttributes ( );
    IAgVeVOIntervalsCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefaultAttributes (
        /*[out,retval]*/ struct IAgVeVODefaultAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgVeVOIntervalsCollection * * ppVal ) = 0;
};

struct __declspec(uuid("b613cdd4-ab9c-4962-bce8-2abef18248c9"))
IAgVeVOAttributesIntervals : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultAttributes))
    IAgVeVODefaultAttributesPtr DefaultAttributes;
    __declspec(property(get=GetIntervals))
    IAgVeVOIntervalsCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODefaultAttributesPtr GetDefaultAttributes ( );
    IAgVeVOIntervalsCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefaultAttributes (
        /*[out,retval]*/ struct IAgVeVODefaultAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgVeVOIntervalsCollection * * ppVal ) = 0;
};

struct __declspec(uuid("4158e755-261b-4e81-8b17-5ab62a7778f0"))
AgVeVOSize;
    // [ default ] interface _IAgVeVOSize
    // interface IAgVeVOSize

struct __declspec(uuid("ebb70ecd-0bb5-4e3c-8968-d8a34220dc6a"))
_IAgVeVOSize : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleToAttitudeSphere,put=PutScaleToAttitudeSphere))
    VARIANT_BOOL ScaleToAttitudeSphere;
    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetScaleToAttitudeSphere ( );
    void PutScaleToAttitudeSphere (
        VARIANT_BOOL pVal );
    double GetScaleValue ( );
    void PutScaleValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleToAttitudeSphere (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleToAttitudeSphere (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("39e06cd9-68bc-4f73-a7ac-d06159f174c0"))
AgVeVOCovariancePointingContour;
    // [ default ] interface _IAgVeVOCovariancePointingContour
    // interface IAgVeVOCovariancePointingContour

struct __declspec(uuid("9d5f83b7-1a18-4877-897b-f65637b63407"))
AgVeVODataFraction;
    // [ default ] interface _IAgVeVODataFraction
    // interface IAgVeLeadTrailData
    // interface IAgVeVODataFraction

struct __declspec(uuid("43d264e9-26d3-4db6-90e0-dce80e9f2801"))
_IAgVeVODataFraction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFraction,put=PutFraction))
    double Fraction;

    //
    // Wrapper methods for error-handling
    //

    double GetFraction ( );
    void PutFraction (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fraction (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Fraction (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d2af3e25-9a0e-476e-9f05-e8e0c9d7de29"))
IAgVeVODataFraction : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFraction,put=PutFraction))
    double Fraction;

    //
    // Wrapper methods for error-handling
    //

    double GetFraction ( );
    void PutFraction (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fraction (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Fraction (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("715f1314-3e60-43b3-a845-5cc4741a4cf6"))
AgVeVODataTime;
    // [ default ] interface _IAgVeVODataTime
    // interface IAgVeLeadTrailData
    // interface IAgVeVODataTime

struct __declspec(uuid("73f2ce05-3589-4340-841d-c51f51cd7959"))
_IAgVeVODataTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    double Time;

    //
    // Wrapper methods for error-handling
    //

    double GetTime ( );
    void PutTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f95bf531-8e3d-404a-af6b-925dfc8795d6"))
IAgVeVODataTime : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    double Time;

    //
    // Wrapper methods for error-handling
    //

    double GetTime ( );
    void PutTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("3fb838eb-4e47-47ba-8f4b-93f254d24de6"))
AgVeVOOrbitPassData;
    // [ default ] interface _IAgVeVOOrbitPassData
    // interface IAgVeVOOrbitPassData

struct __declspec(uuid("3a3d9ad8-5124-4b36-9912-7abc04bb6cc6"))
_IAgVeVOOrbitPassData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack))
    IAgVeVOLeadTrailDataPtr GroundTrack;
    __declspec(property(get=GetOrbit))
    IAgVeVOLeadTrailDataPtr Orbit;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOLeadTrailDataPtr GetGroundTrack ( );
    IAgVeVOLeadTrailDataPtr GetOrbit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("0321c886-7181-4618-bc94-f93b73621f3b"))
AgVeVOOrbitTrackData;
    // [ default ] interface _IAgVeVOOrbitTrackData
    // interface IAgVeVOOrbitTrackData

struct __declspec(uuid("10533def-97a7-44f1-9f06-dca2a537f7ea"))
_IAgVeVOOrbitTrackData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFrom2D,put=PutInheritFrom2D))
    VARIANT_BOOL InheritFrom2D;
    __declspec(property(get=GetPassData))
    IAgVeVOOrbitPassDataPtr PassData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFrom2D ( );
    void PutInheritFrom2D (
        VARIANT_BOOL pVal );
    IAgVeVOOrbitPassDataPtr GetPassData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFrom2D (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2D (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeVOOrbitPassData * * ppVal ) = 0;
};

struct __declspec(uuid("a5e5ca00-0a57-4273-9dd5-e0c8a7f2e835"))
AgVeVOTickDataLine;
    // [ default ] interface _IAgVeVOTickDataLine
    // interface IAgVeVOTickData
    // interface IAgVeVOTickDataLine

struct __declspec(uuid("9ed132d8-b243-4501-b00b-9a3a554bcb45"))
_IAgVeVOTickDataLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    double GetLength ( );
    void PutLength (
        double pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("532ed1a7-7f22-4797-b4b5-76b4ded15a3c"))
IAgVeVOTickDataLine : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    double GetLength ( );
    void PutLength (
        double pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("0727cebf-e404-4339-838b-d8cdc7f32769"))
AgVeVOTickDataPoint;
    // [ default ] interface _IAgVeVOTickDataPoint
    // interface IAgVeVOTickData
    // interface IAgVeVOTickDataPoint

struct __declspec(uuid("c0880d89-6283-4bc5-872e-bd11ffb95e61"))
_IAgVeVOTickDataPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSize,put=PutSize))
    double Size;

    //
    // Wrapper methods for error-handling
    //

    double GetSize ( );
    void PutSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("6da9f471-71f6-4b75-93d6-18682276ac06"))
IAgVeVOTickDataPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSize,put=PutSize))
    double Size;

    //
    // Wrapper methods for error-handling
    //

    double GetSize ( );
    void PutSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("89def847-e558-40ab-9222-219a15884864"))
AgVeVOOrbitTickMarks;
    // [ default ] interface _IAgVeVOOrbitTickMarks
    // interface IAgVeVOOrbitTickMarks

struct __declspec(uuid("64e07dab-d1a4-44c4-b17f-63a966f48f5f"))
_IAgVeVOOrbitTickMarks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeBetweenTicks,put=PutTimeBetweenTicks))
    double TimeBetweenTicks;
    __declspec(property(get=GetGroundTrack))
    IAgVeVOPathTickMarksPtr GroundTrack;
    __declspec(property(get=GetOrbit))
    IAgVeVOPathTickMarksPtr Orbit;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeBetweenTicks ( );
    void PutTimeBetweenTicks (
        double pVal );
    IAgVeVOPathTickMarksPtr GetGroundTrack ( );
    IAgVeVOPathTickMarksPtr GetOrbit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeBetweenTicks (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeBetweenTicks (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeVOPathTickMarks * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ struct IAgVeVOPathTickMarks * * ppVal ) = 0;
};

struct __declspec(uuid("034bd989-3524-4fb1-a745-2b0dae503070"))
AgVeVOPass;
    // [ default ] interface _IAgVeVOPass
    // interface IAgVeVOPass

struct __declspec(uuid("1cde745f-2372-4592-9b0a-dbdb509cf7bd"))
_IAgVeVOPass : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTrackData))
    IAgVeVOOrbitTrackDataPtr TrackData;
    __declspec(property(get=GetTickMarks))
    IAgVeVOOrbitTickMarksPtr TickMarks;
    __declspec(property(get=GetEnableDepthCueing,put=PutEnableDepthCueing))
    VARIANT_BOOL EnableDepthCueing;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOOrbitTrackDataPtr GetTrackData ( );
    IAgVeVOOrbitTickMarksPtr GetTickMarks ( );
    VARIANT_BOOL GetEnableDepthCueing ( );
    void PutEnableDepthCueing (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrackData (
        /*[out,retval]*/ struct IAgVeVOOrbitTrackData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TickMarks (
        /*[out,retval]*/ struct IAgVeVOOrbitTickMarks * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EnableDepthCueing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableDepthCueing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("f11bc3d0-914e-4797-8ea2-51d7e41b08a1"))
AgVeVOCovariance;
    // [ default ] interface _IAgVeVOCovariance
    // interface IAgVeVOCovariance

struct __declspec(uuid("25c7df69-ea21-454d-9e59-edbf720d8aca"))
_IAgVeVOCovariance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSigmaScaleType))
    enum AgEVeVOSigmaScale SigmaScaleType;
    __declspec(property(get=GetSigmaScaleSupportedTypes))
    SAFEARRAY * SigmaScaleSupportedTypes;
    __declspec(property(get=GetSigmaScale))
    IAgVeVOSigmaScalePtr SigmaScale;
    __declspec(property(get=GetAttributesType))
    enum AgEVeVOAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeVOAttributesPtr Attributes;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeVOSigmaScale GetSigmaScaleType ( );
    HRESULT SetSigmaScaleType (
        enum AgEVeVOSigmaScale SigmaScale );
    VARIANT_BOOL IsSigmaScaleTypeSupported (
        enum AgEVeVOSigmaScale SigmaScale );
    SAFEARRAY * GetSigmaScaleSupportedTypes ( );
    IAgVeVOSigmaScalePtr GetSigmaScale ( );
    enum AgEVeVOAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeVOAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeVOAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeVOAttributesPtr GetAttributes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SigmaScaleType (
        /*[out,retval]*/ enum AgEVeVOSigmaScale * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSigmaScaleType (
        /*[in]*/ enum AgEVeVOSigmaScale SigmaScale ) = 0;
      virtual HRESULT __stdcall raw_IsSigmaScaleTypeSupported (
        /*[in]*/ enum AgEVeVOSigmaScale SigmaScale,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SigmaScaleSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SigmaScale (
        /*[out,retval]*/ struct IAgVeVOSigmaScale * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeVOAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeVOAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeVOAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeVOAttributes * * ppVal ) = 0;
};

struct __declspec(uuid("7bc12d39-6dff-49d0-acd8-394103afc8e0"))
AgVeVOTrajectoryProximity;
    // [ default ] interface _IAgVeVOTrajectoryProximity
    // interface IAgVeVOProximity
    // interface IAgVeVOTrajectoryProximity

struct __declspec(uuid("2585071e-4535-4990-ae69-ac5cd4e7ddeb"))
_IAgVeVOTrajectoryProximity : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControlBox))
    IAgVeVOControlBoxPtr ControlBox;
    __declspec(property(get=GetBearingBox))
    IAgVeVOBearingBoxPtr BearingBox;
    __declspec(property(get=GetBearingEllipse))
    IAgVeVOBearingEllipsePtr BearingEllipse;
    __declspec(property(get=GetLineOfBearing))
    IAgVeVOLineOfBearingPtr LineOfBearing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOControlBoxPtr GetControlBox ( );
    IAgVeVOBearingBoxPtr GetBearingBox ( );
    IAgVeVOBearingEllipsePtr GetBearingEllipse ( );
    IAgVeVOLineOfBearingPtr GetLineOfBearing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlBox (
        /*[out,retval]*/ struct IAgVeVOControlBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingBox (
        /*[out,retval]*/ struct IAgVeVOBearingBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingEllipse (
        /*[out,retval]*/ struct IAgVeVOBearingEllipse * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LineOfBearing (
        /*[out,retval]*/ struct IAgVeVOLineOfBearing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("7ddac3f5-9cb8-499b-9e8f-9e3762acd4a6"))
IAgVeVOTrajectoryProximity : IAgVeVOProximity
{
    //
    // Property data
    //

    __declspec(property(get=GetControlBox))
    IAgVeVOControlBoxPtr ControlBox;
    __declspec(property(get=GetBearingBox))
    IAgVeVOBearingBoxPtr BearingBox;
    __declspec(property(get=GetBearingEllipse))
    IAgVeVOBearingEllipsePtr BearingEllipse;
    __declspec(property(get=GetLineOfBearing))
    IAgVeVOLineOfBearingPtr LineOfBearing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOControlBoxPtr GetControlBox ( );
    IAgVeVOBearingBoxPtr GetBearingBox ( );
    IAgVeVOBearingEllipsePtr GetBearingEllipse ( );
    IAgVeVOLineOfBearingPtr GetLineOfBearing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlBox (
        /*[out,retval]*/ struct IAgVeVOControlBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingBox (
        /*[out,retval]*/ struct IAgVeVOBearingBox * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BearingEllipse (
        /*[out,retval]*/ struct IAgVeVOBearingEllipse * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LineOfBearing (
        /*[out,retval]*/ struct IAgVeVOLineOfBearing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
};

struct __declspec(uuid("97f84226-0c63-4e69-9242-9781671882b3"))
AgVeVOTrajectory;
    // [ default ] interface _IAgVeVOTrajectory
    // interface IAgVeVOTrajectory

struct __declspec(uuid("315a033c-9d5b-40e0-8e7a-523a27c21dc8"))
IAgVeVOTrajectoryPassData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack))
    IAgVeVOLeadTrailDataPtr GroundTrack;
    __declspec(property(get=GetTrajectory))
    IAgVeVOLeadTrailDataPtr Trajectory;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOLeadTrailDataPtr GetGroundTrack ( );
    IAgVeVOLeadTrailDataPtr GetTrajectory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("a95dc662-5c05-43ac-a109-feaa93224fea"))
IAgVeVOTrajectoryTrackData : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFrom2D,put=PutInheritFrom2D))
    VARIANT_BOOL InheritFrom2D;
    __declspec(property(get=GetPassData))
    IAgVeVOTrajectoryPassDataPtr PassData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFrom2D ( );
    void PutInheritFrom2D (
        VARIANT_BOOL pVal );
    IAgVeVOTrajectoryPassDataPtr GetPassData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFrom2D (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2D (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeVOTrajectoryPassData * * ppVal ) = 0;
};

struct __declspec(uuid("763d6a4d-fd39-4241-8387-22df8b330c23"))
IAgVeVOTrajectoryTickMarks : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeBetweenTicks,put=PutTimeBetweenTicks))
    double TimeBetweenTicks;
    __declspec(property(get=GetGroundTrack))
    IAgVeVOPathTickMarksPtr GroundTrack;
    __declspec(property(get=GetTrajectory))
    IAgVeVOPathTickMarksPtr Trajectory;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeBetweenTicks ( );
    void PutTimeBetweenTicks (
        double pVal );
    IAgVeVOPathTickMarksPtr GetGroundTrack ( );
    IAgVeVOPathTickMarksPtr GetTrajectory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeBetweenTicks (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeBetweenTicks (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeVOPathTickMarks * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVOPathTickMarks * * ppVal ) = 0;
};

struct __declspec(uuid("66b406ff-7650-4cd4-8d57-f0c7eddacc17"))
_IAgVeVOTrajectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTrackData))
    IAgVeVOTrajectoryTrackDataPtr TrackData;
    __declspec(property(get=GetTickMarks))
    IAgVeVOTrajectoryTickMarksPtr TickMarks;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOTrajectoryTrackDataPtr GetTrackData ( );
    IAgVeVOTrajectoryTickMarksPtr GetTickMarks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrackData (
        /*[out,retval]*/ struct IAgVeVOTrajectoryTrackData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TickMarks (
        /*[out,retval]*/ struct IAgVeVOTrajectoryTickMarks * * ppVal ) = 0;
};

struct __declspec(uuid("763b30cd-11a8-4027-a949-dc583d58f04b"))
IAgVeVOTrajectory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTrackData))
    IAgVeVOTrajectoryTrackDataPtr TrackData;
    __declspec(property(get=GetTickMarks))
    IAgVeVOTrajectoryTickMarksPtr TickMarks;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOTrajectoryTrackDataPtr GetTrackData ( );
    IAgVeVOTrajectoryTickMarksPtr GetTickMarks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrackData (
        /*[out,retval]*/ struct IAgVeVOTrajectoryTrackData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TickMarks (
        /*[out,retval]*/ struct IAgVeVOTrajectoryTickMarks * * ppVal ) = 0;
};

struct __declspec(uuid("38369cf5-5868-4295-887d-90b7885d446d"))
AgVeVOTrajectoryTrackData;
    // [ default ] interface _IAgVeVOTrajectoryTrackData
    // interface IAgVeVOTrajectoryTrackData

struct __declspec(uuid("6b2707f0-bfa4-45f6-83cb-7d0f6a7a6b0c"))
_IAgVeVOTrajectoryTrackData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritFrom2D,put=PutInheritFrom2D))
    VARIANT_BOOL InheritFrom2D;
    __declspec(property(get=GetPassData))
    IAgVeVOTrajectoryPassDataPtr PassData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritFrom2D ( );
    void PutInheritFrom2D (
        VARIANT_BOOL pVal );
    IAgVeVOTrajectoryPassDataPtr GetPassData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritFrom2D (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritFrom2D (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeVOTrajectoryPassData * * ppVal ) = 0;
};

struct __declspec(uuid("34d0ef4c-9c00-4cc3-8975-4fd128ad42d0"))
AgVeVOTrajectoryPassData;
    // [ default ] interface _IAgVeVOTrajectoryPassData
    // interface IAgVeVOTrajectoryPassData

struct __declspec(uuid("86ead523-ecd1-432f-a3a4-0e3299b1b601"))
_IAgVeVOTrajectoryPassData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGroundTrack))
    IAgVeVOLeadTrailDataPtr GroundTrack;
    __declspec(property(get=GetTrajectory))
    IAgVeVOLeadTrailDataPtr Trajectory;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOLeadTrailDataPtr GetGroundTrack ( );
    IAgVeVOLeadTrailDataPtr GetTrajectory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
};

struct __declspec(uuid("1993ca32-e507-4518-b3c5-d91c98f233f7"))
AgVeVOLeadTrailData;
    // [ default ] interface _IAgVeVOLeadTrailData
    // interface IAgVeVOLeadTrailData

struct __declspec(uuid("afacca9f-2662-45dd-81fd-4cd83d6a5c84"))
_IAgVeVOLeadTrailData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLeadDataType))
    enum AgELeadTrailData LeadDataType;
    __declspec(property(get=GetTrailDataType))
    enum AgELeadTrailData TrailDataType;
    __declspec(property(get=GetLeadData))
    IAgVeLeadTrailDataPtr LeadData;
    __declspec(property(get=GetTrailData))
    IAgVeLeadTrailDataPtr TrailData;
    __declspec(property(get=GetHasLeadData))
    VARIANT_BOOL HasLeadData;
    __declspec(property(get=GetHasTrailData))
    VARIANT_BOOL HasTrailData;
    __declspec(property(get=GetSupportedDataTypes))
    SAFEARRAY * SupportedDataTypes;

    //
    // Wrapper methods for error-handling
    //

    enum AgELeadTrailData GetLeadDataType ( );
    enum AgELeadTrailData GetTrailDataType ( );
    HRESULT SetLeadDataType (
        enum AgELeadTrailData ELeadData );
    HRESULT SetTrailDataType (
        enum AgELeadTrailData ETrailData );
    IAgVeLeadTrailDataPtr GetLeadData ( );
    IAgVeLeadTrailDataPtr GetTrailData ( );
    VARIANT_BOOL GetHasLeadData ( );
    VARIANT_BOOL GetHasTrailData ( );
    VARIANT_BOOL IsDataTypeSupported (
        enum AgELeadTrailData EData );
    SAFEARRAY * GetSupportedDataTypes ( );
    HRESULT SetTrailSameAsLead ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LeadDataType (
        /*[out,retval]*/ enum AgELeadTrailData * pVal ) = 0;
      virtual HRESULT __stdcall get_TrailDataType (
        /*[out,retval]*/ enum AgELeadTrailData * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLeadDataType (
        /*[in]*/ enum AgELeadTrailData ELeadData ) = 0;
      virtual HRESULT __stdcall raw_SetTrailDataType (
        /*[in]*/ enum AgELeadTrailData ETrailData ) = 0;
      virtual HRESULT __stdcall get_LeadData (
        /*[out,retval]*/ struct IAgVeLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TrailData (
        /*[out,retval]*/ struct IAgVeLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_HasLeadData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasTrailData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsDataTypeSupported (
        /*[in]*/ enum AgELeadTrailData EData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedDataTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrailSameAsLead ( ) = 0;
};

struct __declspec(uuid("a947e10f-c2f5-4a36-b2c4-7c3d27d0fca0"))
AgVeVOTrajectoryTickMarks;
    // [ default ] interface _IAgVeVOTrajectoryTickMarks
    // interface IAgVeVOTrajectoryTickMarks

struct __declspec(uuid("40bd3e1d-f6c9-414c-90b9-2e22f7091f79"))
_IAgVeVOTrajectoryTickMarks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeBetweenTicks,put=PutTimeBetweenTicks))
    double TimeBetweenTicks;
    __declspec(property(get=GetGroundTrack))
    IAgVeVOPathTickMarksPtr GroundTrack;
    __declspec(property(get=GetTrajectory))
    IAgVeVOPathTickMarksPtr Trajectory;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeBetweenTicks ( );
    void PutTimeBetweenTicks (
        double pVal );
    IAgVeVOPathTickMarksPtr GetGroundTrack ( );
    IAgVeVOPathTickMarksPtr GetTrajectory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeBetweenTicks (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeBetweenTicks (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_GroundTrack (
        /*[out,retval]*/ struct IAgVeVOPathTickMarks * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVOPathTickMarks * * ppVal ) = 0;
};

struct __declspec(uuid("61a12c6e-7a19-4f4b-9864-b7c0230f8598"))
AgVeVOPathTickMarks;
    // [ default ] interface _IAgVeVOPathTickMarks
    // interface IAgVeVOPathTickMarks

struct __declspec(uuid("1feef209-0ed1-4baa-b85e-91b6941f04f6"))
_IAgVeVOPathTickMarks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTickDataType))
    enum AgETickData TickDataType;
    __declspec(property(get=GetTickDataSupportedTypes))
    SAFEARRAY * TickDataSupportedTypes;
    __declspec(property(get=GetTickData))
    IAgVeVOTickDataPtr TickData;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    enum AgETickData GetTickDataType ( );
    HRESULT SetTickDataType (
        enum AgETickData TickData );
    VARIANT_BOOL IsTickDataTypeSupported (
        enum AgETickData TickData );
    SAFEARRAY * GetTickDataSupportedTypes ( );
    IAgVeVOTickDataPtr GetTickData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TickDataType (
        /*[out,retval]*/ enum AgETickData * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTickDataType (
        /*[in]*/ enum AgETickData TickData ) = 0;
      virtual HRESULT __stdcall raw_IsTickDataTypeSupported (
        /*[in]*/ enum AgETickData TickData,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TickDataSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TickData (
        /*[out,retval]*/ struct IAgVeVOTickData * * ppVal ) = 0;
};

struct __declspec(uuid("f1246cdd-1a71-4aef-83e6-431800cbd9a3"))
AgVeVOWaypointMarkersElement;
    // [ default ] interface _IAgVeVOWaypointMarkersElement
    // interface IAgVeVOWaypointMarkersElement

enum AgERouteVOMarkerType
{
    eImage = 0,
    eMarker = 1
};

struct __declspec(uuid("86e85c1a-fc27-4a5c-ad95-e0e4a05442d1"))
_IAgVeVOWaypointMarkersElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime))
    _variant_t Time;
    __declspec(property(get=GetMarkerType,put=PutMarkerType))
    enum AgERouteVOMarkerType MarkerType;
    __declspec(property(get=GetShape,put=PutShape))
    enum AgE3dMarkerShape Shape;
    __declspec(property(get=GetMarkerFile,put=PutMarkerFile))
    _bstr_t MarkerFile;
    __declspec(property(get=GetPixelSize,put=PutPixelSize))
    long PixelSize;
    __declspec(property(get=GetIsTransparent,put=PutIsTransparent))
    VARIANT_BOOL IsTransparent;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    enum AgERouteVOMarkerType GetMarkerType ( );
    void PutMarkerType (
        enum AgERouteVOMarkerType pVal );
    enum AgE3dMarkerShape GetShape ( );
    void PutShape (
        enum AgE3dMarkerShape pVal );
    _bstr_t GetMarkerFile ( );
    void PutMarkerFile (
        _bstr_t pVal );
    long GetPixelSize ( );
    void PutPixelSize (
        long pVal );
    VARIANT_BOOL GetIsTransparent ( );
    void PutIsTransparent (
        VARIANT_BOOL pVal );
    HRESULT SetImageFile (
        _bstr_t MarkerFile );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerType (
        /*[out,retval]*/ enum AgERouteVOMarkerType * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerType (
        /*[in]*/ enum AgERouteVOMarkerType pVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ enum AgE3dMarkerShape * pVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ enum AgE3dMarkerShape pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PixelSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PixelSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IsTransparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTransparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetImageFile (
        /*[in]*/ BSTR MarkerFile ) = 0;
};

struct __declspec(uuid("ba6b5c10-2f7d-4304-b012-8133bc611b3e"))
IAgVeVOWaypointMarkersElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime))
    _variant_t Time;
    __declspec(property(get=GetMarkerType,put=PutMarkerType))
    enum AgERouteVOMarkerType MarkerType;
    __declspec(property(get=GetShape,put=PutShape))
    enum AgE3dMarkerShape Shape;
    __declspec(property(get=GetMarkerFile,put=PutMarkerFile))
    _bstr_t MarkerFile;
    __declspec(property(get=GetPixelSize,put=PutPixelSize))
    long PixelSize;
    __declspec(property(get=GetIsTransparent,put=PutIsTransparent))
    VARIANT_BOOL IsTransparent;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    enum AgERouteVOMarkerType GetMarkerType ( );
    void PutMarkerType (
        enum AgERouteVOMarkerType pVal );
    enum AgE3dMarkerShape GetShape ( );
    void PutShape (
        enum AgE3dMarkerShape pVal );
    _bstr_t GetMarkerFile ( );
    void PutMarkerFile (
        _bstr_t pVal );
    long GetPixelSize ( );
    void PutPixelSize (
        long pVal );
    VARIANT_BOOL GetIsTransparent ( );
    void PutIsTransparent (
        VARIANT_BOOL pVal );
    HRESULT SetImageFile (
        _bstr_t MarkerFile );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerType (
        /*[out,retval]*/ enum AgERouteVOMarkerType * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerType (
        /*[in]*/ enum AgERouteVOMarkerType pVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ enum AgE3dMarkerShape * pVal ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ enum AgE3dMarkerShape pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PixelSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PixelSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IsTransparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsTransparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetImageFile (
        /*[in]*/ BSTR MarkerFile ) = 0;
};

struct __declspec(uuid("467ba9d2-441c-4b13-acc3-2d2e0091f4dc"))
AgVeVOWaypointMarkersCollection;
    // [ default ] interface IUnknown
    // interface IAgVeVOWaypointMarkersCollection

struct __declspec(uuid("d976a7a7-ca48-4b4e-a2da-d7b39536047c"))
IAgVeVOWaypointMarkersCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeVOWaypointMarkersElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeVOWaypointMarkersElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeVOWaypointMarkersElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
};

struct __declspec(uuid("8230ac65-65d9-4bcf-ab22-78637d251737"))
AgVeVORoute;
    // [ default ] interface _IAgVeVORoute
    // interface IAgVeVORoute

struct __declspec(uuid("101d06c3-d284-4faf-92c0-dec35a517665"))
_IAgVeVORoute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritTrackDataFrom2D,put=PutInheritTrackDataFrom2D))
    VARIANT_BOOL InheritTrackDataFrom2D;
    __declspec(property(get=GetTrackData))
    IAgVeVOLeadTrailDataPtr TrackData;
    __declspec(property(get=GetWaypointMarkers))
    IAgVeVOWaypointMarkersCollectionPtr WaypointMarkers;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritTrackDataFrom2D ( );
    void PutInheritTrackDataFrom2D (
        VARIANT_BOOL pVal );
    IAgVeVOLeadTrailDataPtr GetTrackData ( );
    IAgVeVOWaypointMarkersCollectionPtr GetWaypointMarkers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritTrackDataFrom2D (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritTrackDataFrom2D (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TrackData (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_WaypointMarkers (
        /*[out,retval]*/ struct IAgVeVOWaypointMarkersCollection * * ppVal ) = 0;
};

struct __declspec(uuid("ca90ee32-03aa-49d5-981c-a290235dd039"))
IAgVeVORoute : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetInheritTrackDataFrom2D,put=PutInheritTrackDataFrom2D))
    VARIANT_BOOL InheritTrackDataFrom2D;
    __declspec(property(get=GetTrackData))
    IAgVeVOLeadTrailDataPtr TrackData;
    __declspec(property(get=GetWaypointMarkers))
    IAgVeVOWaypointMarkersCollectionPtr WaypointMarkers;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInheritTrackDataFrom2D ( );
    void PutInheritTrackDataFrom2D (
        VARIANT_BOOL pVal );
    IAgVeVOLeadTrailDataPtr GetTrackData ( );
    IAgVeVOWaypointMarkersCollectionPtr GetWaypointMarkers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InheritTrackDataFrom2D (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InheritTrackDataFrom2D (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TrackData (
        /*[out,retval]*/ struct IAgVeVOLeadTrailData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_WaypointMarkers (
        /*[out,retval]*/ struct IAgVeVOWaypointMarkersCollection * * ppVal ) = 0;
};

struct __declspec(uuid("ba067a93-add1-4b50-abbb-c9c417804e02"))
AgVOModelPointing;
    // [ default ] interface _IAgVOModelPointing
    // interface IAgVOModelPointing

struct __declspec(uuid("38f37319-2dc8-441c-bb40-19b8a1ff9505"))
AgVOLabelSwapDistance;
    // [ default ] interface _IAgVOLabelSwapDistance
    // interface IAgVOLabelSwapDistance

struct __declspec(uuid("cb952592-0b0a-4f2b-94e9-7afbf86159d2"))
_IAgVOLabelSwapDistance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDistanceValue,put=PutDistanceValue))
    double DistanceValue;
    __declspec(property(get=GetDistanceLevel))
    enum AgEVOLabelSwapDistance DistanceLevel;

    //
    // Wrapper methods for error-handling
    //

    double GetDistanceValue ( );
    void PutDistanceValue (
        double pVal );
    HRESULT SetDistanceLevel (
        enum AgEVOLabelSwapDistance Val );
    enum AgEVOLabelSwapDistance GetDistanceLevel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DistanceValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DistanceValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDistanceLevel (
        /*[in]*/ enum AgEVOLabelSwapDistance Val ) = 0;
      virtual HRESULT __stdcall get_DistanceLevel (
        /*[out,retval]*/ enum AgEVOLabelSwapDistance * pVal ) = 0;
};

struct __declspec(uuid("4cad03c8-65bc-48dc-a5ed-a1021a003ef1"))
AgVeVODropLinePosItem;
    // [ default ] interface _IAgVeVODropLinePosItem
    // interface IAgVeVODropLinePosItem

struct __declspec(uuid("217061bd-eafc-424c-93ad-356a1f825a66"))
_IAgVeVODropLinePosItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeVODropLineType Type;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetUse2DColor,put=PutUse2DColor))
    VARIANT_BOOL Use2DColor;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeVODropLineType GetType ( );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUse2DColor ( );
    void PutUse2DColor (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeVODropLineType * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Use2DColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use2DColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
};

struct __declspec(uuid("9f8dc766-1f37-4a2f-b6a4-19630e48977e"))
AgVeVODropLinePosItemCollection;
    // [ default ] interface IUnknown
    // interface IAgVeVODropLinePosItemCollection

struct __declspec(uuid("7f1e7260-801e-4891-a817-48caf99a23a9"))
AgVeVODropLinePathItem;
    // [ default ] interface _IAgVeVODropLinePathItem
    // interface IAgVeVODropLinePathItem

struct __declspec(uuid("68e0e290-0d28-4a76-9376-5a675e4f5019"))
_IAgVeVODropLinePathItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeVODropLineType Type;
    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetUse2DColor,put=PutUse2DColor))
    VARIANT_BOOL Use2DColor;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetInterval,put=PutInterval))
    double Interval;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeVODropLineType GetType ( );
    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUse2DColor ( );
    void PutUse2DColor (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetInterval ( );
    void PutInterval (
        double pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeVODropLineType * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Use2DColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use2DColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_Interval (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Interval (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
};

struct __declspec(uuid("3949da88-e457-4775-bfb2-339ae4b447ff"))
AgVeVODropLinePathItemCollection;
    // [ default ] interface IUnknown
    // interface IAgVeVODropLinePathItemCollection

struct __declspec(uuid("5c9b7952-1b7a-4c10-8fa5-532e5c5c7d3e"))
AgVeVOOrbitDropLines;
    // [ default ] interface _IAgVeVOOrbitDropLines
    // interface IAgVeVOOrbitDropLines

struct __declspec(uuid("d6ce9486-cdcf-469d-b669-db4ee8e29d51"))
_IAgVeVOOrbitDropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgVeVODropLinePosItemCollectionPtr Position;
    __declspec(property(get=GetOrbit))
    IAgVeVODropLinePathItemCollectionPtr Orbit;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODropLinePosItemCollectionPtr GetPosition ( );
    IAgVeVODropLinePathItemCollectionPtr GetOrbit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVODropLinePosItemCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Orbit (
        /*[out,retval]*/ struct IAgVeVODropLinePathItemCollection * * ppVal ) = 0;
};

struct __declspec(uuid("5550e08a-1f6d-4c5e-9728-19fe674d402d"))
AgVeVORouteDropLines;
    // [ default ] interface _IAgVeVORouteDropLines
    // interface IAgVeVORouteDropLines

struct __declspec(uuid("303e60e1-5452-43ab-b789-d1f589b0956c"))
_IAgVeVORouteDropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgVeVODropLinePosItemCollectionPtr Position;
    __declspec(property(get=GetRoute))
    IAgVeVODropLinePathItemCollectionPtr Route;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODropLinePosItemCollectionPtr GetPosition ( );
    IAgVeVODropLinePathItemCollectionPtr GetRoute ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVODropLinePosItemCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVeVODropLinePathItemCollection * * ppVal ) = 0;
};

struct __declspec(uuid("d9e31106-9825-4068-87d5-cd4acf8c5ee6"))
IAgVeVORouteDropLines : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgVeVODropLinePosItemCollectionPtr Position;
    __declspec(property(get=GetRoute))
    IAgVeVODropLinePathItemCollectionPtr Route;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODropLinePosItemCollectionPtr GetPosition ( );
    IAgVeVODropLinePathItemCollectionPtr GetRoute ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVODropLinePosItemCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVeVODropLinePathItemCollection * * ppVal ) = 0;
};

struct __declspec(uuid("45bdd0ff-5d1b-4fc2-9ef5-73493f35d4b4"))
AgVeVOTrajectoryDropLines;
    // [ default ] interface _IAgVeVOTrajectoryDropLines
    // interface IAgVeVOTrajectoryDropLines

struct __declspec(uuid("d44bff82-8915-47b1-bb1e-4d43dc075a3a"))
_IAgVeVOTrajectoryDropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgVeVODropLinePosItemCollectionPtr Position;
    __declspec(property(get=GetTrajectory))
    IAgVeVODropLinePathItemCollectionPtr Trajectory;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODropLinePosItemCollectionPtr GetPosition ( );
    IAgVeVODropLinePathItemCollectionPtr GetTrajectory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVODropLinePosItemCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVODropLinePathItemCollection * * ppVal ) = 0;
};

struct __declspec(uuid("ba371c59-b933-43ae-b3f8-bd945b90bfdf"))
IAgVeVOTrajectoryDropLines : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgVeVODropLinePosItemCollectionPtr Position;
    __declspec(property(get=GetTrajectory))
    IAgVeVODropLinePathItemCollectionPtr Trajectory;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODropLinePosItemCollectionPtr GetPosition ( );
    IAgVeVODropLinePathItemCollectionPtr GetTrajectory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVODropLinePosItemCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVODropLinePathItemCollection * * ppVal ) = 0;
};

struct __declspec(uuid("e5ecf6e8-5d2c-4f31-83e2-9dfb99953fde"))
AgVeTrajectoryVOModel;
    // [ default ] interface _IAgVeTrajectoryVOModel
    // interface IAgVOModel
    // interface IAgVeTrajectoryVOModel

struct __declspec(uuid("accd879b-01f3-4fd8-9ecf-01b2bcfcaa25"))
_IAgVeTrajectoryVOModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;
    __declspec(property(get=GetDetailThreshold))
    IAgVODetailThresholdPtr DetailThreshold;
    __declspec(property(get=GetModelData))
    IAgVOModelDataPtr ModelData;
    __declspec(property(get=GetModelType,put=PutModelType))
    enum AgEModelType ModelType;
    __declspec(property(get=GetArticulation))
    IAgVOModelArticPtr Articulation;
    __declspec(property(get=GetTrajectoryMarker))
    IAgVOMarkerPtr TrajectoryMarker;
    __declspec(property(get=GetGroundMarker))
    IAgVOMarkerPtr GroundMarker;
    __declspec(property(get=GetIsPointVisible,put=PutIsPointVisible))
    VARIANT_BOOL IsPointVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    _variant_t PointSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pShow );
    double GetScaleValue ( );
    void PutScaleValue (
        double pScale );
    IAgVODetailThresholdPtr GetDetailThreshold ( );
    IAgVOModelDataPtr GetModelData ( );
    enum AgEModelType GetModelType ( );
    void PutModelType (
        enum AgEModelType pType );
    IAgVOModelArticPtr GetArticulation ( );
    IAgVOMarkerPtr GetTrajectoryMarker ( );
    IAgVOMarkerPtr GetGroundMarker ( );
    VARIANT_BOOL GetIsPointVisible ( );
    void PutIsPointVisible (
        VARIANT_BOOL pVal );
    _variant_t GetPointSize ( );
    void PutPointSize (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pScale ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pScale ) = 0;
      virtual HRESULT __stdcall get_DetailThreshold (
        /*[out,retval]*/ struct IAgVODetailThreshold * * ppAgVODetailThreshold ) = 0;
      virtual HRESULT __stdcall get_ModelData (
        /*[out,retval]*/ struct IAgVOModelData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ enum AgEModelType * pType ) = 0;
      virtual HRESULT __stdcall put_ModelType (
        /*[in]*/ enum AgEModelType pType ) = 0;
      virtual HRESULT __stdcall get_Articulation (
        /*[out,retval]*/ struct IAgVOModelArtic * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectoryMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("f4578160-45ca-4401-ab63-19b047b715c3"))
IAgVeTrajectoryVOModel : IAgVOModel
{
    //
    // Property data
    //

    __declspec(property(get=GetTrajectoryMarker))
    IAgVOMarkerPtr TrajectoryMarker;
    __declspec(property(get=GetGroundMarker))
    IAgVOMarkerPtr GroundMarker;
    __declspec(property(get=GetIsPointVisible,put=PutIsPointVisible))
    VARIANT_BOOL IsPointVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    _variant_t PointSize;

    //
    // Wrapper methods for error-handling
    //

    IAgVOMarkerPtr GetTrajectoryMarker ( );
    IAgVOMarkerPtr GetGroundMarker ( );
    VARIANT_BOOL GetIsPointVisible ( );
    void PutIsPointVisible (
        VARIANT_BOOL pVal );
    _variant_t GetPointSize ( );
    void PutPointSize (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrajectoryMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("6f19b18f-0d66-4476-8706-28a4c489822b"))
AgVeRouteVOModel;
    // [ default ] interface _IAgVeRouteVOModel
    // interface IAgVOModel
    // interface IAgVeRouteVOModel

struct __declspec(uuid("0d911d18-138f-4f61-b46d-d86bf5b0b1d5"))
_IAgVeRouteVOModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;
    __declspec(property(get=GetDetailThreshold))
    IAgVODetailThresholdPtr DetailThreshold;
    __declspec(property(get=GetModelData))
    IAgVOModelDataPtr ModelData;
    __declspec(property(get=GetModelType,put=PutModelType))
    enum AgEModelType ModelType;
    __declspec(property(get=GetArticulation))
    IAgVOModelArticPtr Articulation;
    __declspec(property(get=GetRouteMarker))
    IAgVOMarkerPtr RouteMarker;
    __declspec(property(get=GetIsPointVisible,put=PutIsPointVisible))
    VARIANT_BOOL IsPointVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    _variant_t PointSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pShow );
    double GetScaleValue ( );
    void PutScaleValue (
        double pScale );
    IAgVODetailThresholdPtr GetDetailThreshold ( );
    IAgVOModelDataPtr GetModelData ( );
    enum AgEModelType GetModelType ( );
    void PutModelType (
        enum AgEModelType pType );
    IAgVOModelArticPtr GetArticulation ( );
    IAgVOMarkerPtr GetRouteMarker ( );
    VARIANT_BOOL GetIsPointVisible ( );
    void PutIsPointVisible (
        VARIANT_BOOL pVal );
    _variant_t GetPointSize ( );
    void PutPointSize (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pScale ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pScale ) = 0;
      virtual HRESULT __stdcall get_DetailThreshold (
        /*[out,retval]*/ struct IAgVODetailThreshold * * ppAgVODetailThreshold ) = 0;
      virtual HRESULT __stdcall get_ModelData (
        /*[out,retval]*/ struct IAgVOModelData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ enum AgEModelType * pType ) = 0;
      virtual HRESULT __stdcall put_ModelType (
        /*[in]*/ enum AgEModelType pType ) = 0;
      virtual HRESULT __stdcall get_Articulation (
        /*[out,retval]*/ struct IAgVOModelArtic * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RouteMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("56345edb-1a42-4994-b86a-f6802f531bf7"))
IAgVeRouteVOModel : IAgVOModel
{
    //
    // Property data
    //

    __declspec(property(get=GetRouteMarker))
    IAgVOMarkerPtr RouteMarker;
    __declspec(property(get=GetIsPointVisible,put=PutIsPointVisible))
    VARIANT_BOOL IsPointVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    _variant_t PointSize;

    //
    // Wrapper methods for error-handling
    //

    IAgVOMarkerPtr GetRouteMarker ( );
    VARIANT_BOOL GetIsPointVisible ( );
    void PutIsPointVisible (
        VARIANT_BOOL pVal );
    _variant_t GetPointSize ( );
    void PutPointSize (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RouteMarker (
        /*[out,retval]*/ struct IAgVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsPointVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("2e39506c-9bfd-4e35-bd53-de0c325203f9"))
AgVeVOBPlaneTemplateDisplayElement;
    // [ default ] interface _IAgVeVOBPlaneTemplateDisplayElement
    // interface IAgVeVOBPlaneTemplateDisplayElement

struct __declspec(uuid("ccf67c79-b73a-4e28-9640-29cf1ae80e66"))
_IAgVeVOBPlaneTemplateDisplayElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetName ( );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double pVal );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b879c351-637e-4708-ac80-4bcdce3d4105"))
AgVeVOBPlaneTemplateDisplayCollection;
    // [ default ] interface IUnknown
    // interface IAgVeVOBPlaneTemplateDisplayCollection

struct __declspec(uuid("d6704285-d4e7-4f3c-b979-430b34c14a76"))
AgVeVOBPlaneTemplate;
    // [ default ] interface _IAgVeVOBPlaneTemplate
    // interface IAgVeVOBPlaneTemplate

struct __declspec(uuid("226f8e63-c3ca-423a-b718-f8c6c2662ef4"))
_IAgVeVOBPlaneTemplate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetCentralBody,put=PutCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetAvailableCentralBodies))
    SAFEARRAY * AvailableCentralBodies;
    __declspec(property(get=GetReferenceVector,put=PutReferenceVector))
    _bstr_t ReferenceVector;
    __declspec(property(get=GetAvailableVectors))
    SAFEARRAY * AvailableVectors;
    __declspec(property(get=GetIsCartesianGridVisible,put=PutIsCartesianGridVisible))
    VARIANT_BOOL IsCartesianGridVisible;
    __declspec(property(get=GetIsPolarGridVisible,put=PutIsPolarGridVisible))
    VARIANT_BOOL IsPolarGridVisible;
    __declspec(property(get=GetGridSpacing,put=PutGridSpacing))
    double GridSpacing;
    __declspec(property(get=GetDisplayElements))
    IAgVeVOBPlaneTemplateDisplayCollectionPtr DisplayElements;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    _bstr_t GetCentralBody ( );
    void PutCentralBody (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableCentralBodies ( );
    _bstr_t GetReferenceVector ( );
    void PutReferenceVector (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableVectors ( );
    VARIANT_BOOL GetIsCartesianGridVisible ( );
    void PutIsCartesianGridVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPolarGridVisible ( );
    void PutIsPolarGridVisible (
        VARIANT_BOOL pVal );
    double GetGridSpacing ( );
    void PutGridSpacing (
        double pVal );
    IAgVeVOBPlaneTemplateDisplayCollectionPtr GetDisplayElements ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBody (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableCentralBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceVector (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceVector (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVectors (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCartesianGridVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsCartesianGridVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPolarGridVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPolarGridVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GridSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_GridSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayElements (
        /*[out,retval]*/ struct IAgVeVOBPlaneTemplateDisplayCollection * * ppVal ) = 0;
};

struct __declspec(uuid("ae6d062b-20cc-4fb7-8ec0-4e48b9f1df15"))
AgVeVOBPlaneTemplatesCollection;
    // [ default ] interface IUnknown
    // interface IAgVeVOBPlaneTemplatesCollection

struct __declspec(uuid("2474b28d-1c85-4a4f-a0d8-f4677f2576da"))
AgVeVOBPlaneEvent;
    // [ default ] interface _IAgVeVOBPlaneEvent
    // interface IAgVeVOBPlaneEvent

struct __declspec(uuid("8a6f0f67-b6a9-47dc-90fa-cb86ceaf255a"))
_IAgVeVOBPlaneEvent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEventEpoch,put=PutEventEpoch))
    _variant_t EventEpoch;
    __declspec(property(get=GetBeforeEvent,put=PutBeforeEvent))
    double BeforeEvent;
    __declspec(property(get=GetAfterEvent,put=PutAfterEvent))
    double AfterEvent;
    __declspec(property(get=GetAlwaysDisplay,put=PutAlwaysDisplay))
    VARIANT_BOOL AlwaysDisplay;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEventEpoch ( );
    void PutEventEpoch (
        const _variant_t & pVal );
    double GetBeforeEvent ( );
    void PutBeforeEvent (
        double pVal );
    double GetAfterEvent ( );
    void PutAfterEvent (
        double pVal );
    VARIANT_BOOL GetAlwaysDisplay ( );
    void PutAlwaysDisplay (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EventEpoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_EventEpoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_BeforeEvent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BeforeEvent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AfterEvent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AfterEvent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AlwaysDisplay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AlwaysDisplay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("307281b2-c92c-493d-b571-7424ccb520e0"))
AgVeVOBPlanePoint;
    // [ default ] interface _IAgVeVOBPlanePoint
    // interface IAgVeVOBPlanePoint

struct __declspec(uuid("1463b899-7366-4845-a686-144545692e4d"))
_IAgVeVOBPlanePoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetBMulT,put=PutBMulT))
    double BMulT;
    __declspec(property(get=GetBMulR,put=PutBMulR))
    double BMulR;
    __declspec(property(get=GetBMag,put=PutBMag))
    double BMag;
    __declspec(property(get=GetTheta,put=PutTheta))
    double Theta;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    double GetBMulT ( );
    void PutBMulT (
        double pVal );
    double GetBMulR ( );
    void PutBMulR (
        double pVal );
    double GetBMag ( );
    void PutBMag (
        double pVal );
    double GetTheta ( );
    void PutTheta (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BMulT (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMulT (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BMulR (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMulR (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BMag (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMag (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Theta (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Theta (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("8ef092d0-855b-4974-9026-5c9e1a440ca6"))
AgVeVOBPlaneTargetPointPositionCartesian;
    // [ default ] interface _IAgVeVOBPlaneTargetPointPositionCartesian
    // interface IAgVeVOBPlaneTargetPointPositionCartesian

struct __declspec(uuid("3ad07070-b8ca-4edc-9df3-471ee96f54d3"))
_IAgVeVOBPlaneTargetPointPositionCartesian : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBMulT,put=PutBMulT))
    double BMulT;
    __declspec(property(get=GetBMulR,put=PutBMulR))
    double BMulR;

    //
    // Wrapper methods for error-handling
    //

    double GetBMulT ( );
    void PutBMulT (
        double pVal );
    double GetBMulR ( );
    void PutBMulR (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BMulT (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMulT (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BMulR (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMulR (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("943659d7-1c86-4645-af76-4bc1d6376036"))
IAgVeVOBPlaneTargetPointPositionCartesian : IAgVeVOBPlaneTargetPointPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetBMulT,put=PutBMulT))
    double BMulT;
    __declspec(property(get=GetBMulR,put=PutBMulR))
    double BMulR;

    //
    // Wrapper methods for error-handling
    //

    double GetBMulT ( );
    void PutBMulT (
        double pVal );
    double GetBMulR ( );
    void PutBMulR (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BMulT (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMulT (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BMulR (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMulR (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d7f6e7e5-9003-4a44-8cf5-65d30b90ad24"))
AgVeVOBPlaneTargetPointPositionPolar;
    // [ default ] interface _IAgVeVOBPlaneTargetPointPositionPolar
    // interface IAgVeVOBPlaneTargetPointPositionPolar

struct __declspec(uuid("d658f9a9-674b-4f90-83d5-b6c880f37bbf"))
_IAgVeVOBPlaneTargetPointPositionPolar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBMag,put=PutBMag))
    double BMag;
    __declspec(property(get=GetTheta,put=PutTheta))
    double Theta;

    //
    // Wrapper methods for error-handling
    //

    double GetBMag ( );
    void PutBMag (
        double pVal );
    double GetTheta ( );
    void PutTheta (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BMag (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMag (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Theta (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Theta (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a15274e6-e775-4150-8272-f40fcbb75d16"))
IAgVeVOBPlaneTargetPointPositionPolar : IAgVeVOBPlaneTargetPointPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetBMag,put=PutBMag))
    double BMag;
    __declspec(property(get=GetTheta,put=PutTheta))
    double Theta;

    //
    // Wrapper methods for error-handling
    //

    double GetBMag ( );
    void PutBMag (
        double pVal );
    double GetTheta ( );
    void PutTheta (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BMag (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BMag (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Theta (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Theta (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("76762389-2721-4a8d-96b0-b6b2ebed53c5"))
AgVeVOBPlaneTargetPoint;
    // [ default ] interface _IAgVeVOBPlaneTargetPoint
    // interface IAgVeVOBPlaneTargetPoint

struct __declspec(uuid("f933731e-ee25-4101-8d17-87cec99eda67"))
_IAgVeVOBPlaneTargetPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetPositionType))
    enum AgEVeVOBPlaneTargetPointPosition PositionType;
    __declspec(property(get=GetPositionSupportedTypes))
    SAFEARRAY * PositionSupportedTypes;
    __declspec(property(get=GetPosition))
    IAgVeVOBPlaneTargetPointPositionPtr Position;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgEVeVOBPlaneTargetPointPosition GetPositionType ( );
    HRESULT SetPositionType (
        enum AgEVeVOBPlaneTargetPointPosition Position );
    VARIANT_BOOL IsPositionTypeSupported (
        enum AgEVeVOBPlaneTargetPointPosition Position );
    SAFEARRAY * GetPositionSupportedTypes ( );
    IAgVeVOBPlaneTargetPointPositionPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_PositionType (
        /*[out,retval]*/ enum AgEVeVOBPlaneTargetPointPosition * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPositionType (
        /*[in]*/ enum AgEVeVOBPlaneTargetPointPosition Position ) = 0;
      virtual HRESULT __stdcall raw_IsPositionTypeSupported (
        /*[in]*/ enum AgEVeVOBPlaneTargetPointPosition Position,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PositionSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVOBPlaneTargetPointPosition * * ppVal ) = 0;
};

struct __declspec(uuid("fb952ee0-e864-42b3-a634-03a898f92b6d"))
AgVeVOBPlaneInstance;
    // [ default ] interface _IAgVeVOBPlaneInstance
    // interface IAgVeVOBPlaneInstance

struct __declspec(uuid("040906ae-c858-4f1d-8535-a2e72bb725de"))
_IAgVeVOBPlaneInstance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetDefinition))
    _bstr_t Definition;
    __declspec(property(get=GetEventName,put=PutEventName))
    _bstr_t EventName;
    __declspec(property(get=GetEvent))
    IAgVeVOBPlaneEventPtr Event;
    __declspec(property(get=GetTargetPoint))
    IAgVeVOBPlaneTargetPointPtr TargetPoint;
    __declspec(property(get=GetIsLabelVisible,put=PutIsLabelVisible))
    VARIANT_BOOL IsLabelVisible;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    double PointSize;
    __declspec(property(get=GetIsConnectPointsVisible,put=PutIsConnectPointsVisible))
    VARIANT_BOOL IsConnectPointsVisible;
    __declspec(property(get=GetConnectPointsColor,put=PutConnectPointsColor))
    OLE_COLOR ConnectPointsColor;
    __declspec(property(get=GetConnectPointLineWidth,put=PutConnectPointLineWidth))
    enum AgELineWidth ConnectPointLineWidth;
    __declspec(property(get=GetVOWindow,put=PutVOWindow))
    _bstr_t VOWindow;
    __declspec(property(get=GetAvailableVOWindows))
    SAFEARRAY * AvailableVOWindows;
    __declspec(property(get=GetAdditionalPoints))
    IAgVeVOBPlanePointCollectionPtr AdditionalPoints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    _bstr_t GetDefinition ( );
    _bstr_t GetEventName ( );
    void PutEventName (
        _bstr_t pVal );
    IAgVeVOBPlaneEventPtr GetEvent ( );
    IAgVeVOBPlaneTargetPointPtr GetTargetPoint ( );
    VARIANT_BOOL GetIsLabelVisible ( );
    void PutIsLabelVisible (
        VARIANT_BOOL pVal );
    double GetPointSize ( );
    void PutPointSize (
        double pVal );
    VARIANT_BOOL GetIsConnectPointsVisible ( );
    void PutIsConnectPointsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetConnectPointsColor ( );
    void PutConnectPointsColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetConnectPointLineWidth ( );
    void PutConnectPointLineWidth (
        enum AgELineWidth pVal );
    _bstr_t GetVOWindow ( );
    void PutVOWindow (
        _bstr_t pVal );
    SAFEARRAY * GetAvailableVOWindows ( );
    IAgVeVOBPlanePointCollectionPtr GetAdditionalPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Definition (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EventName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EventName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Event (
        /*[out,retval]*/ struct IAgVeVOBPlaneEvent * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TargetPoint (
        /*[out,retval]*/ struct IAgVeVOBPlaneTargetPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsConnectPointsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsConnectPointsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectPointsColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectPointsColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectPointLineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_ConnectPointLineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_VOWindow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VOWindow (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableVOWindows (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AdditionalPoints (
        /*[out,retval]*/ struct IAgVeVOBPlanePointCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("da7ca497-abd5-4fb3-a7c8-dc28a2e0cccd"))
AgVeVOBPlaneInstancesCollection;
    // [ default ] interface IUnknown
    // interface IAgVeVOBPlaneInstancesCollection

struct __declspec(uuid("0a3eb50f-76b0-4172-a53f-dc361b0d8af4"))
AgVeVOBPlanePointCollection;
    // [ default ] interface IUnknown
    // interface IAgVeVOBPlanePointCollection

struct __declspec(uuid("19c5010e-d0e9-4b45-af40-6198f8d7bca9"))
AgVeVOBPlanes;
    // [ default ] interface _IAgVeVOBPlanes
    // interface IAgVeVOBPlanes

struct __declspec(uuid("c402de11-df87-4b19-b323-5a3a6c976881"))
_IAgVeVOBPlanes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTemplates))
    IAgVeVOBPlaneTemplatesCollectionPtr Templates;
    __declspec(property(get=GetInstances))
    IAgVeVOBPlaneInstancesCollectionPtr Instances;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVOBPlaneTemplatesCollectionPtr GetTemplates ( );
    IAgVeVOBPlaneInstancesCollectionPtr GetInstances ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Templates (
        /*[out,retval]*/ struct IAgVeVOBPlaneTemplatesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Instances (
        /*[out,retval]*/ struct IAgVeVOBPlaneInstancesCollection * * ppVal ) = 0;
};

struct __declspec(uuid("a7cb8c7d-fa13-4a40-b3b9-98249a010b20"))
AgLaunchVehicle;
    // [ default ] interface _IAgLaunchVehicle
    // interface IAgLaunchVehicle
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgProvideSpatialInfo

struct __declspec(uuid("6b3bc28f-dfbf-4819-b879-ae71370346a0"))
IAgLvGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetPassData))
    IAgVeGfxTrajectoryPassDataPtr PassData;
    __declspec(property(get=GetResolution))
    IAgVeGfxTrajectoryResolutionPtr Resolution;
    __declspec(property(get=GetElevContours))
    IAgVeGfxElevContoursPtr ElevContours;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetSwath))
    IAgVeGfxSwathPtr Swath;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetUseInstName,put=PutUseInstName))
    VARIANT_BOOL UseInstName;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetSAA))
    IAgVeGfxSAAPtr SAA;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxTrajectoryPassDataPtr GetPassData ( );
    IAgVeGfxTrajectoryResolutionPtr GetResolution ( );
    IAgVeGfxElevContoursPtr GetElevContours ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxSwathPtr GetSwath ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    VARIANT_BOOL GetUseInstName ( );
    void PutUseInstName (
        VARIANT_BOOL pVal );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    IAgVeGfxSAAPtr GetSAA ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxTrajectoryPassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxTrajectoryResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeGfxElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgVeGfxSwath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseInstName (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseInstName (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeGfxSAA * * ppVal ) = 0;
};

struct __declspec(uuid("1f63cd9c-69bf-48a4-ac73-26b8d29cb15e"))
IAgLvExportTools : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("f2ec2ea5-97ad-4971-a0b0-02ddfc8e968e"))
AgLvGraphics;
    // [ default ] interface _IAgLvGraphics
    // interface IAgLvGraphics

struct __declspec(uuid("b43ed712-ac12-4e3a-ba3e-82c18f7e8f2b"))
_IAgLvGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetPassData))
    IAgVeGfxTrajectoryPassDataPtr PassData;
    __declspec(property(get=GetResolution))
    IAgVeGfxTrajectoryResolutionPtr Resolution;
    __declspec(property(get=GetElevContours))
    IAgVeGfxElevContoursPtr ElevContours;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetSwath))
    IAgVeGfxSwathPtr Swath;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetUseInstName,put=PutUseInstName))
    VARIANT_BOOL UseInstName;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetSAA))
    IAgVeGfxSAAPtr SAA;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxTrajectoryPassDataPtr GetPassData ( );
    IAgVeGfxTrajectoryResolutionPtr GetResolution ( );
    IAgVeGfxElevContoursPtr GetElevContours ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxSwathPtr GetSwath ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    VARIANT_BOOL GetUseInstName ( );
    void PutUseInstName (
        VARIANT_BOOL pVal );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    IAgVeGfxSAAPtr GetSAA ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxTrajectoryPassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxTrajectoryResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeGfxElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgVeGfxSwath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseInstName (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseInstName (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeGfxSAA * * ppVal ) = 0;
};

struct __declspec(uuid("1ae03e4e-d973-46c6-9cda-1aa7415a1c4a"))
AgLvVO;
    // [ default ] interface _IAgLvVO
    // interface IAgLvVO

struct __declspec(uuid("6225f586-3fa9-45c6-80d2-9130d114889a"))
AgGroundVehicle;
    // [ default ] interface _IAgGroundVehicle
    // interface IAgGroundVehicle
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgGreatArcVehicle
    // interface IAgProvideSpatialInfo

struct __declspec(uuid("eeff8bd1-f93d-4dec-86d6-bccd52cb7bb4"))
IAgGreatArcGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetPassData))
    IAgVeGfxRoutePassDataPtr PassData;
    __declspec(property(get=GetWaypointMarker))
    IAgVeGfxWaypointMarkerPtr WaypointMarker;
    __declspec(property(get=GetResolution))
    IAgVeGfxRouteResolutionPtr Resolution;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxRoutePassDataPtr GetPassData ( );
    IAgVeGfxWaypointMarkerPtr GetWaypointMarker ( );
    IAgVeGfxRouteResolutionPtr GetResolution ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxRoutePassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_WaypointMarker (
        /*[out,retval]*/ struct IAgVeGfxWaypointMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxRouteResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("16fc038e-f0da-4a71-8603-9ccec7e4085b"))
IAgGvGraphics : IAgGreatArcGraphics
{};

struct __declspec(uuid("07d6ce34-851f-4fa1-a102-34924e378ad9"))
IAgGvExportTools : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("3055d65a-e378-463a-949e-cb2383279246"))
IAgGreatArcVehicle : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRouteType))
    enum AgEVePropagatorType RouteType;
    __declspec(property(get=GetRouteSupportedTypes))
    SAFEARRAY * RouteSupportedTypes;
    __declspec(property(get=GetRoute))
    IAgVePropagatorPtr Route;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetRouteType ( );
    HRESULT SetRouteType (
        enum AgEVePropagatorType Route );
    VARIANT_BOOL IsRouteTypeSupported (
        enum AgEVePropagatorType Route );
    SAFEARRAY * GetRouteSupportedTypes ( );
    IAgVePropagatorPtr GetRoute ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RouteType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRouteType (
        /*[in]*/ enum AgEVePropagatorType Route ) = 0;
      virtual HRESULT __stdcall raw_IsRouteTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Route,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RouteSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("39f0af47-c357-4f50-bfc0-23fd3d8fdad6"))
AgGvGraphics;
    // [ default ] interface _IAgGvGraphics
    // interface IAgGvGraphics
    // interface IAgGreatArcGraphics

struct __declspec(uuid("a2d5a811-d799-40b3-8329-58a1d0d92c12"))
_IAgGvGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetPassData))
    IAgVeGfxRoutePassDataPtr PassData;
    __declspec(property(get=GetWaypointMarker))
    IAgVeGfxWaypointMarkerPtr WaypointMarker;
    __declspec(property(get=GetResolution))
    IAgVeGfxRouteResolutionPtr Resolution;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxRoutePassDataPtr GetPassData ( );
    IAgVeGfxWaypointMarkerPtr GetWaypointMarker ( );
    IAgVeGfxRouteResolutionPtr GetResolution ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxRoutePassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_WaypointMarker (
        /*[out,retval]*/ struct IAgVeGfxWaypointMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxRouteResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("143fb78e-99cb-4e9d-b303-7af9ee8d2c44"))
AgGvVO;
    // [ default ] interface _IAgGvVO
    // interface IAgGvVO
    // interface IAgGreatArcVO

struct __declspec(uuid("99f2475c-990c-4f82-b166-98c4dc97aa00"))
AgMissile;
    // [ default ] interface _IAgMissile
    // interface IAgMissile
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgProvideSpatialInfo

struct __declspec(uuid("d8ad9573-a523-428b-979c-ee7d2f48a67d"))
IAgMsGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetPassData))
    IAgVeGfxTrajectoryPassDataPtr PassData;
    __declspec(property(get=GetResolution))
    IAgVeGfxTrajectoryResolutionPtr Resolution;
    __declspec(property(get=GetElevContours))
    IAgVeGfxElevContoursPtr ElevContours;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetSwath))
    IAgVeGfxSwathPtr Swath;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetSAA))
    IAgVeGfxSAAPtr SAA;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxTrajectoryPassDataPtr GetPassData ( );
    IAgVeGfxTrajectoryResolutionPtr GetResolution ( );
    IAgVeGfxElevContoursPtr GetElevContours ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxSwathPtr GetSwath ( );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    IAgVeGfxSAAPtr GetSAA ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxTrajectoryPassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxTrajectoryResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeGfxElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgVeGfxSwath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeGfxSAA * * ppVal ) = 0;
};

struct __declspec(uuid("812694fc-feb0-4499-be7d-38614ddcc1ca"))
IAgMsExportTools : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("1e641af0-4c2c-41a2-bf1d-e277ef6a5448"))
AgMsGraphics;
    // [ default ] interface _IAgMsGraphics
    // interface IAgMsGraphics

struct __declspec(uuid("72c871b7-626a-4a24-81d9-c22fb98101f2"))
_IAgMsGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetPassData))
    IAgVeGfxTrajectoryPassDataPtr PassData;
    __declspec(property(get=GetResolution))
    IAgVeGfxTrajectoryResolutionPtr Resolution;
    __declspec(property(get=GetElevContours))
    IAgVeGfxElevContoursPtr ElevContours;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetSwath))
    IAgVeGfxSwathPtr Swath;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetSAA))
    IAgVeGfxSAAPtr SAA;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxTrajectoryPassDataPtr GetPassData ( );
    IAgVeGfxTrajectoryResolutionPtr GetResolution ( );
    IAgVeGfxElevContoursPtr GetElevContours ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxSwathPtr GetSwath ( );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    IAgVeGfxSAAPtr GetSAA ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxTrajectoryPassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxTrajectoryResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeGfxElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgVeGfxSwath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeGfxSAA * * ppVal ) = 0;
};

struct __declspec(uuid("b94dd247-15b7-4c95-b18c-49b5c7ea7c60"))
AgMsVO;
    // [ default ] interface _IAgMsVO
    // interface IAgMsVO

struct __declspec(uuid("7545791f-7e38-4547-ae3d-84c58fbc6f86"))
AgAircraft;
    // [ default ] interface _IAgAircraft
    // interface IAgAircraft
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgGreatArcVehicle
    // interface IAgProvideSpatialInfo

struct __declspec(uuid("1651076a-f474-42ae-a80e-4717b1e61aa4"))
IAgAcGraphics : IAgGreatArcGraphics
{
    //
    // Property data
    //

    __declspec(property(get=GetElevContours))
    IAgVeGfxElevContoursPtr ElevContours;
    __declspec(property(get=GetSwath))
    IAgVeGfxSwathPtr Swath;

    //
    // Wrapper methods for error-handling
    //

    IAgVeGfxElevContoursPtr GetElevContours ( );
    IAgVeGfxSwathPtr GetSwath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeGfxElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgVeGfxSwath * * ppVal ) = 0;
};

struct __declspec(uuid("89567918-5e70-4e30-861f-728589fa3f2b"))
IAgAcExportTools : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("3d185d6c-fe6d-4cfc-b2dc-9a8c0aa6b03e"))
AgAcGraphics;
    // [ default ] interface _IAgAcGraphics
    // interface IAgAcGraphics
    // interface IAgGreatArcGraphics

struct __declspec(uuid("6ce94e00-deb5-4df9-9374-575fccafa2e3"))
_IAgAcGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetPassData))
    IAgVeGfxRoutePassDataPtr PassData;
    __declspec(property(get=GetWaypointMarker))
    IAgVeGfxWaypointMarkerPtr WaypointMarker;
    __declspec(property(get=GetResolution))
    IAgVeGfxRouteResolutionPtr Resolution;
    __declspec(property(get=GetElevContours))
    IAgVeGfxElevContoursPtr ElevContours;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetSwath))
    IAgVeGfxSwathPtr Swath;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxRoutePassDataPtr GetPassData ( );
    IAgVeGfxWaypointMarkerPtr GetWaypointMarker ( );
    IAgVeGfxRouteResolutionPtr GetResolution ( );
    IAgVeGfxElevContoursPtr GetElevContours ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxSwathPtr GetSwath ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxRoutePassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_WaypointMarker (
        /*[out,retval]*/ struct IAgVeGfxWaypointMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxRouteResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeGfxElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgVeGfxSwath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("c0717592-8b1f-4307-8ff2-c93d5fa7e5a9"))
AgAcVO;
    // [ default ] interface _IAgAcVO
    // interface IAgAcVO
    // interface IAgGreatArcVO

struct __declspec(uuid("8554b0f2-8263-4403-8068-b9113771901e"))
AgShip;
    // [ default ] interface _IAgShip
    // interface IAgShip
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgGreatArcVehicle
    // interface IAgProvideSpatialInfo

struct __declspec(uuid("9de26f27-6d9b-4655-ac7b-e4e8b6bbbd79"))
IAgShGraphics : IAgGreatArcGraphics
{};

struct __declspec(uuid("70e2dc4f-09f1-4dc5-a827-719fa7259f09"))
IAgShExportTools : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("77237c7f-e2fe-4dcb-8db3-083a14cf0c81"))
AgShGraphics;
    // [ default ] interface _IAgShGraphics
    // interface IAgShGraphics
    // interface IAgGreatArcGraphics

struct __declspec(uuid("27d9b125-dd59-4e0d-9865-5182f08ec786"))
_IAgShGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributesType))
    enum AgEVeGfxAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeGfxAttributesPtr Attributes;
    __declspec(property(get=GetPassData))
    IAgVeGfxRoutePassDataPtr PassData;
    __declspec(property(get=GetWaypointMarker))
    IAgVeGfxWaypointMarkerPtr WaypointMarker;
    __declspec(property(get=GetResolution))
    IAgVeGfxRouteResolutionPtr Resolution;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetLighting))
    IAgVeGfxLightingPtr Lighting;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGfxGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGfxAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeGfxAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeGfxAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeGfxAttributesPtr GetAttributes ( );
    IAgVeGfxRoutePassDataPtr GetPassData ( );
    IAgVeGfxWaypointMarkerPtr GetWaypointMarker ( );
    IAgVeGfxRouteResolutionPtr GetResolution ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    IAgVeGfxLightingPtr GetLighting ( );
    IAgVeGfxGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pUseInstName );
    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeGfxAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeGfxAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeGfxAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassData (
        /*[out,retval]*/ struct IAgVeGfxRoutePassData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_WaypointMarker (
        /*[out,retval]*/ struct IAgVeGfxWaypointMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgVeGfxRouteResolution * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lighting (
        /*[out,retval]*/ struct IAgVeGfxLighting * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGfxGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pUseInstName ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pUseInstName ) = 0;
      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("bd051968-3155-4af0-8f9d-51dcd86d7b2d"))
AgShVO;
    // [ default ] interface _IAgShVO
    // interface IAgShVO
    // interface IAgGreatArcVO

struct __declspec(uuid("7b3c68a6-a153-4b04-af3d-77e5c13ffc4c"))
AgMtoTrackPoint;
    // [ default ] interface _IAgMtoTrackPoint
    // interface IAgMtoTrackPoint

struct __declspec(uuid("7a19ad2d-f9aa-473c-830e-e35429b07b96"))
_IAgMtoTrackPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime))
    _variant_t Time;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetId))
    int Id;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    double GetLatitude ( );
    void PutLatitude (
        double pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    STKUtil::IAgPositionPtr GetPosition ( );
    int GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pId ) = 0;
};

struct __declspec(uuid("b118ad0e-a0ca-4b34-9e67-3bf0a340d838"))
IAgMtoTrackPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTime))
    _variant_t Time;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetId))
    int Id;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    double GetLatitude ( );
    void PutLatitude (
        double pVal );
    double GetLongitude ( );
    void PutLongitude (
        double pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pVal );
    STKUtil::IAgPositionPtr GetPosition ( );
    int GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pId ) = 0;
};

struct __declspec(uuid("0df49500-6d9a-44ed-b75b-78462ffce9d4"))
AgMtoTrackPointCollection;
    // [ default ] interface IUnknown
    // interface IAgMtoTrackPointCollection

struct __declspec(uuid("2a6833f3-27a9-46e5-a17d-b9435dd7b3a5"))
IAgMtoTrackPointCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgMtoTrackPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetRecycling,put=PutRecycling))
    VARIANT_BOOL Recycling;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgMtoTrackPointPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgMtoTrackPointPtr Add (
        const _variant_t & Time );
    IAgMtoTrackPointPtr AddPoint (
        const _variant_t & Time,
        double Latitude,
        double Longitude,
        double Altitude );
    HRESULT LoadPoints (
        _bstr_t MTOTrackPoints );
    HRESULT Extend (
        SAFEARRAY * * TimeVals,
        SAFEARRAY * * LatVals,
        SAFEARRAY * * LonVals,
        SAFEARRAY * * AltVals );
    VARIANT_BOOL GetRecycling ( );
    void PutRecycling (
        VARIANT_BOOL pVal );
    HRESULT InsertPoint (
        const _variant_t & Time,
        double Latitude,
        double Longitude,
        double Altitude );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgMtoTrackPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgMtoTrackPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgMtoTrackPoint * * ppIAgMtoTrackPoint ) = 0;
      virtual HRESULT __stdcall raw_LoadPoints (
        /*[in]*/ BSTR MTOTrackPoints ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ SAFEARRAY * * TimeVals,
        /*[in]*/ SAFEARRAY * * LatVals,
        /*[in]*/ SAFEARRAY * * LonVals,
        /*[in]*/ SAFEARRAY * * AltVals ) = 0;
      virtual HRESULT __stdcall get_Recycling (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Recycling (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertPoint (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude ) = 0;
};

struct __declspec(uuid("8b65e664-10e9-4a36-a774-26d167e57df5"))
AgMtoTrack;
    // [ default ] interface _IAgMtoTrack
    // interface IAgMtoTrack

struct __declspec(uuid("dbe4c885-947e-420d-ac6d-816542ea9631"))
_IAgMtoTrack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    VARIANT_BOOL Interpolate;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetPoints))
    IAgMtoTrackPointCollectionPtr Points;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    VARIANT_BOOL GetInterpolate ( );
    void PutInterpolate (
        VARIANT_BOOL pVal );
    long GetId ( );
    IAgMtoTrackPointCollectionPtr GetPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct IAgMtoTrackPointCollection * * ppVal ) = 0;
};

struct __declspec(uuid("ec9d89cf-249b-4c3b-9ec5-d5d76ada77a5"))
IAgMtoTrack : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    VARIANT_BOOL Interpolate;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetPoints))
    IAgMtoTrackPointCollectionPtr Points;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    VARIANT_BOOL GetInterpolate ( );
    void PutInterpolate (
        VARIANT_BOOL pVal );
    long GetId ( );
    IAgMtoTrackPointCollectionPtr GetPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct IAgMtoTrackPointCollection * * ppVal ) = 0;
};

struct __declspec(uuid("8bad1d5a-91cf-44d6-9120-782bc48c1097"))
AgMtoTrackCollection;
    // [ default ] interface IUnknown
    // interface IAgMtoTrackCollection

struct __declspec(uuid("7ab1ea72-418c-47c0-a9d7-c35ca232e45c"))
IAgMtoTrackCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgMtoTrackPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetRecycling,put=PutRecycling))
    VARIANT_BOOL Recycling;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgMtoTrackPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgMtoTrackPtr Add (
        long TrackId );
    IAgMtoTrackPtr AddTrack (
        long TrackId,
        SAFEARRAY * * TimeVals,
        SAFEARRAY * * LatVals,
        SAFEARRAY * * LonVals,
        SAFEARRAY * * AltVals );
    HRESULT LoadCommandFile (
        _bstr_t CommandFile );
    IAgMtoTrackPtr GetTrackFromId (
        long TrackId );
    VARIANT_BOOL GetRecycling ( );
    void PutRecycling (
        VARIANT_BOOL pVal );
    HRESULT Remove (
        struct IAgMtoTrack * pTrack );
    HRESULT RemoveById (
        long TrackId );
    SAFEARRAY * AddTracks (
        long StartingTrackId,
        long NumberofTracks );
    HRESULT RemoveTracks (
        SAFEARRAY * * Tracks );
    HRESULT RemoveTracksById (
        SAFEARRAY * * TrackIds );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgMtoTrack * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long TrackId,
        /*[out,retval]*/ struct IAgMtoTrack * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddTrack (
        /*[in]*/ long TrackId,
        /*[in]*/ SAFEARRAY * * TimeVals,
        /*[in]*/ SAFEARRAY * * LatVals,
        /*[in]*/ SAFEARRAY * * LonVals,
        /*[in]*/ SAFEARRAY * * AltVals,
        /*[out,retval]*/ struct IAgMtoTrack * * ppIAgMtoTrack ) = 0;
      virtual HRESULT __stdcall raw_LoadCommandFile (
        /*[in]*/ BSTR CommandFile ) = 0;
      virtual HRESULT __stdcall raw_GetTrackFromId (
        /*[in]*/ long TrackId,
        /*[out,retval]*/ struct IAgMtoTrack * * ppIAgMtoTrack ) = 0;
      virtual HRESULT __stdcall get_Recycling (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Recycling (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct IAgMtoTrack * pTrack ) = 0;
      virtual HRESULT __stdcall raw_RemoveById (
        /*[in]*/ long TrackId ) = 0;
      virtual HRESULT __stdcall raw_AddTracks (
        /*[in]*/ long StartingTrackId,
        /*[in]*/ long NumberofTracks,
        /*[out,retval]*/ SAFEARRAY * * ppTracks ) = 0;
      virtual HRESULT __stdcall raw_RemoveTracks (
        /*[in]*/ SAFEARRAY * * Tracks ) = 0;
      virtual HRESULT __stdcall raw_RemoveTracksById (
        /*[in]*/ SAFEARRAY * * TrackIds ) = 0;
};

struct __declspec(uuid("820f79db-2427-4833-890f-684680314109"))
AgMtoDefaultTrack;
    // [ default ] interface _IAgMtoDefaultTrack
    // interface IAgMtoDefaultTrack

struct __declspec(uuid("d9050b91-941f-49f5-a2c2-7e37e0b1c64c"))
_IAgMtoDefaultTrack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    VARIANT_BOOL Interpolate;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    VARIANT_BOOL GetInterpolate ( );
    void PutInterpolate (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("4adfa743-3377-47fb-a67e-6d7a805e015e"))
IAgMtoDefaultTrack : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetInterpolate,put=PutInterpolate))
    VARIANT_BOOL Interpolate;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    VARIANT_BOOL GetInterpolate ( );
    void PutInterpolate (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Interpolate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Interpolate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("01a3f4d8-98c0-4979-a87e-0f6da18245df"))
AgMtoGlobalTrackOptions;
    // [ default ] interface _IAgMtoGlobalTrackOptions
    // interface IAgMtoGlobalTrackOptions

struct __declspec(uuid("858e5d0b-bcca-451c-8da1-a01c0adc3b3b"))
_IAgMtoGlobalTrackOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSaveTrackData,put=PutSaveTrackData))
    VARIANT_BOOL SaveTrackData;
    __declspec(property(get=GetComputationTrackId,put=PutComputationTrackId))
    long ComputationTrackId;
    __declspec(property(get=GetBlockSize,put=PutBlockSize))
    long BlockSize;
    __declspec(property(get=GetAltitudeRef,put=PutAltitudeRef))
    enum AgEAltRefType AltitudeRef;
    __declspec(property(get=GetIsStatic,put=PutIsStatic))
    VARIANT_BOOL IsStatic;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSaveTrackData ( );
    void PutSaveTrackData (
        VARIANT_BOOL pVal );
    long GetComputationTrackId ( );
    void PutComputationTrackId (
        long pVal );
    long GetBlockSize ( );
    void PutBlockSize (
        long pVal );
    enum AgEAltRefType GetAltitudeRef ( );
    void PutAltitudeRef (
        enum AgEAltRefType pAltRef );
    VARIANT_BOOL GetIsStatic ( );
    void PutIsStatic (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SaveTrackData (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SaveTrackData (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ComputationTrackId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ComputationTrackId (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BlockSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BlockSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeRef (
        /*[out,retval]*/ enum AgEAltRefType * pAltRef ) = 0;
      virtual HRESULT __stdcall put_AltitudeRef (
        /*[in]*/ enum AgEAltRefType pAltRef ) = 0;
      virtual HRESULT __stdcall get_IsStatic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsStatic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("c800c7eb-5866-49cb-b7d1-a3dbe1e6ab6a"))
IAgMtoGlobalTrackOptions : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSaveTrackData,put=PutSaveTrackData))
    VARIANT_BOOL SaveTrackData;
    __declspec(property(get=GetComputationTrackId,put=PutComputationTrackId))
    long ComputationTrackId;
    __declspec(property(get=GetBlockSize,put=PutBlockSize))
    long BlockSize;
    __declspec(property(get=GetAltitudeRef,put=PutAltitudeRef))
    enum AgEAltRefType AltitudeRef;
    __declspec(property(get=GetIsStatic,put=PutIsStatic))
    VARIANT_BOOL IsStatic;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSaveTrackData ( );
    void PutSaveTrackData (
        VARIANT_BOOL pVal );
    long GetComputationTrackId ( );
    void PutComputationTrackId (
        long pVal );
    long GetBlockSize ( );
    void PutBlockSize (
        long pVal );
    enum AgEAltRefType GetAltitudeRef ( );
    void PutAltitudeRef (
        enum AgEAltRefType pAltRef );
    VARIANT_BOOL GetIsStatic ( );
    void PutIsStatic (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SaveTrackData (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SaveTrackData (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ComputationTrackId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ComputationTrackId (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BlockSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BlockSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeRef (
        /*[out,retval]*/ enum AgEAltRefType * pAltRef ) = 0;
      virtual HRESULT __stdcall put_AltitudeRef (
        /*[in]*/ enum AgEAltRefType pAltRef ) = 0;
      virtual HRESULT __stdcall get_IsStatic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsStatic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("7ffef368-2c51-480a-8ef2-621aa4ff94ed"))
AgMto;
    // [ default ] interface _IAgMto
    // interface IAgMto
    // interface IAgStkObject
    // interface IAgLifetimeInformation

struct __declspec(uuid("ecff35da-293e-4581-b8ff-26e0e17816e9"))
IAgMtoGfxMarker : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("729ea6c9-4ad5-4c30-a490-71cc956fd4cb"))
IAgMtoGfxLine : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    enum AgELineWidth Width;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetStyle ( );
    void PutStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetWidth ( );
    void PutWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("c7255fc8-d634-4309-a2a7-ea76e2d45c04"))
IAgMtoGfxFadeTimes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUsePreFade,put=PutUsePreFade))
    VARIANT_BOOL UsePreFade;
    __declspec(property(get=GetPreFadeTime,put=PutPreFadeTime))
    double PreFadeTime;
    __declspec(property(get=GetUsePostFade,put=PutUsePostFade))
    VARIANT_BOOL UsePostFade;
    __declspec(property(get=GetPostFadeTime,put=PutPostFadeTime))
    double PostFadeTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUsePreFade ( );
    void PutUsePreFade (
        VARIANT_BOOL pVal );
    double GetPreFadeTime ( );
    void PutPreFadeTime (
        double pVal );
    VARIANT_BOOL GetUsePostFade ( );
    void PutUsePostFade (
        VARIANT_BOOL pVal );
    double GetPostFadeTime ( );
    void PutPostFadeTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UsePreFade (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePreFade (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PreFadeTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PreFadeTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UsePostFade (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePostFade (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PostFadeTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PostFadeTime (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("84fc01eb-0f9e-407b-8739-395ec18d36de"))
IAgMtoGfxLeadTrailTimes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseLeadTrail,put=PutUseLeadTrail))
    VARIANT_BOOL UseLeadTrail;
    __declspec(property(get=GetLeadTime,put=PutLeadTime))
    double LeadTime;
    __declspec(property(get=GetTrailTime,put=PutTrailTime))
    double TrailTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLeadTrail ( );
    void PutUseLeadTrail (
        VARIANT_BOOL pVal );
    double GetLeadTime ( );
    void PutLeadTime (
        double pVal );
    double GetTrailTime ( );
    void PutTrailTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLeadTrail (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLeadTrail (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LeadTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeadTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TrailTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TrailTime (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d3472cc2-d6e4-4ca9-b7ba-de26d08e7204"))
IAgMtoGfxTrack : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetMarker))
    IAgMtoGfxMarkerPtr Marker;
    __declspec(property(get=GetLine))
    IAgMtoGfxLinePtr Line;
    __declspec(property(get=GetFadeTimes))
    IAgMtoGfxFadeTimesPtr FadeTimes;
    __declspec(property(get=GetLeadTrailTimes))
    IAgMtoGfxLeadTrailTimesPtr LeadTrailTimes;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetId))
    long Id;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pVal );
    IAgMtoGfxMarkerPtr GetMarker ( );
    IAgMtoGfxLinePtr GetLine ( );
    IAgMtoGfxFadeTimesPtr GetFadeTimes ( );
    IAgMtoGfxLeadTrailTimesPtr GetLeadTrailTimes ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    long GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgMtoGfxMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IAgMtoGfxLine * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FadeTimes (
        /*[out,retval]*/ struct IAgMtoGfxFadeTimes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LeadTrailTimes (
        /*[out,retval]*/ struct IAgMtoGfxLeadTrailTimes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("5adb2e98-3337-4c6f-9cfd-efd6056c3def"))
IAgMtoGfxTrackCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgMtoGfxTrackPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetRecycling,put=PutRecycling))
    VARIANT_BOOL Recycling;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgMtoGfxTrackPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IAgMtoGfxTrackPtr GetTrackFromId (
        long TrackId );
    VARIANT_BOOL GetRecycling ( );
    void PutRecycling (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgMtoGfxTrack * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTrackFromId (
        /*[in]*/ long TrackId,
        /*[out,retval]*/ struct IAgMtoGfxTrack * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Recycling (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Recycling (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("c9d2adde-d51a-423c-8941-6d86e793422a"))
IAgMtoDefaultGfxTrack : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetMarker))
    IAgMtoGfxMarkerPtr Marker;
    __declspec(property(get=GetLine))
    IAgMtoGfxLinePtr Line;
    __declspec(property(get=GetFadeTimes))
    IAgMtoGfxFadeTimesPtr FadeTimes;
    __declspec(property(get=GetLeadTrailTimes))
    IAgMtoGfxLeadTrailTimesPtr LeadTrailTimes;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pVal );
    IAgMtoGfxMarkerPtr GetMarker ( );
    IAgMtoGfxLinePtr GetLine ( );
    IAgMtoGfxFadeTimesPtr GetFadeTimes ( );
    IAgMtoGfxLeadTrailTimesPtr GetLeadTrailTimes ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgMtoGfxMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IAgMtoGfxLine * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FadeTimes (
        /*[out,retval]*/ struct IAgMtoGfxFadeTimes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LeadTrailTimes (
        /*[out,retval]*/ struct IAgMtoGfxLeadTrailTimes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
};

struct __declspec(uuid("fe211b8f-20a9-46d7-bb9e-45957c741577"))
IAgMtoGfxGlobalTrackOptions : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTracksVisible,put=PutTracksVisible))
    VARIANT_BOOL TracksVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetTracksVisible ( );
    void PutTracksVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TracksVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TracksVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b13944e9-a5cb-4d6a-9a14-ec4faeea59be"))
IAgMtoGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTracks))
    IAgMtoGfxTrackCollectionPtr Tracks;
    __declspec(property(get=GetDefaultTrack))
    IAgMtoDefaultGfxTrackPtr DefaultTrack;
    __declspec(property(get=GetGlobalTrackOptions))
    IAgMtoGfxGlobalTrackOptionsPtr GlobalTrackOptions;

    //
    // Wrapper methods for error-handling
    //

    IAgMtoGfxTrackCollectionPtr GetTracks ( );
    IAgMtoDefaultGfxTrackPtr GetDefaultTrack ( );
    IAgMtoGfxGlobalTrackOptionsPtr GetGlobalTrackOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tracks (
        /*[out,retval]*/ struct IAgMtoGfxTrackCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultTrack (
        /*[out,retval]*/ struct IAgMtoDefaultGfxTrack * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GlobalTrackOptions (
        /*[out,retval]*/ struct IAgMtoGfxGlobalTrackOptions * * ppVal ) = 0;
};

struct __declspec(uuid("4203caa6-012b-4232-b603-383933e9fe4b"))
IAgMtoVOMarker : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPixelSize,put=PutPixelSize))
    long PixelSize;
    __declspec(property(get=GetMarkerType,put=PutMarkerType))
    enum AgEMarkerType MarkerType;
    __declspec(property(get=GetEnableRotate,put=PutEnableRotate))
    VARIANT_BOOL EnableRotate;
    __declspec(property(get=GetAngle,put=PutAngle))
    _variant_t Angle;
    __declspec(property(get=GetXOrigin,put=PutXOrigin))
    enum AgEVOMarkerOriginType XOrigin;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    enum AgEVOMarkerOriginType YOrigin;
    __declspec(property(get=GetMarkerData))
    IAgVOMarkerDataPtr MarkerData;
    __declspec(property(get=GetRotateFromNorth,put=PutRotateFromNorth))
    VARIANT_BOOL RotateFromNorth;
    __declspec(property(get=GetOrientationMode,put=PutOrientationMode))
    enum AgEVOMarkerOrientation OrientationMode;

    //
    // Wrapper methods for error-handling
    //

    long GetPixelSize ( );
    void PutPixelSize (
        long pSize );
    enum AgEMarkerType GetMarkerType ( );
    void PutMarkerType (
        enum AgEMarkerType pMarkerType );
    VARIANT_BOOL GetEnableRotate ( );
    void PutEnableRotate (
        VARIANT_BOOL pRotate );
    _variant_t GetAngle ( );
    void PutAngle (
        const _variant_t & pAngle );
    enum AgEVOMarkerOriginType GetXOrigin ( );
    void PutXOrigin (
        enum AgEVOMarkerOriginType pXOrigin );
    enum AgEVOMarkerOriginType GetYOrigin ( );
    void PutYOrigin (
        enum AgEVOMarkerOriginType pYOrigin );
    IAgVOMarkerDataPtr GetMarkerData ( );
    HRESULT SetMarkerImageFile (
        _bstr_t ImageFile );
    VARIANT_BOOL GetRotateFromNorth ( );
    void PutRotateFromNorth (
        VARIANT_BOOL pVal );
    enum AgEVOMarkerOrientation GetOrientationMode ( );
    void PutOrientationMode (
        enum AgEVOMarkerOrientation pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PixelSize (
        /*[out,retval]*/ long * pSize ) = 0;
      virtual HRESULT __stdcall put_PixelSize (
        /*[in]*/ long pSize ) = 0;
      virtual HRESULT __stdcall get_MarkerType (
        /*[out,retval]*/ enum AgEMarkerType * pMarkerType ) = 0;
      virtual HRESULT __stdcall put_MarkerType (
        /*[in]*/ enum AgEMarkerType pMarkerType ) = 0;
      virtual HRESULT __stdcall get_EnableRotate (
        /*[out,retval]*/ VARIANT_BOOL * pRotate ) = 0;
      virtual HRESULT __stdcall put_EnableRotate (
        /*[in]*/ VARIANT_BOOL pRotate ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pAngle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ VARIANT pAngle ) = 0;
      virtual HRESULT __stdcall get_XOrigin (
        /*[out,retval]*/ enum AgEVOMarkerOriginType * pXOrigin ) = 0;
      virtual HRESULT __stdcall put_XOrigin (
        /*[in]*/ enum AgEVOMarkerOriginType pXOrigin ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ enum AgEVOMarkerOriginType * pYOrigin ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ enum AgEVOMarkerOriginType pYOrigin ) = 0;
      virtual HRESULT __stdcall get_MarkerData (
        /*[out,retval]*/ struct IAgVOMarkerData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetMarkerImageFile (
        /*[in]*/ BSTR ImageFile ) = 0;
      virtual HRESULT __stdcall get_RotateFromNorth (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RotateFromNorth (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OrientationMode (
        /*[out,retval]*/ enum AgEVOMarkerOrientation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OrientationMode (
        /*[in]*/ enum AgEVOMarkerOrientation pRetVal ) = 0;
};

struct __declspec(uuid("4eb9ef07-280f-4857-bf8d-5956ee3d8c7f"))
IAgMtoVOPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetSize,put=PutSize))
    double Size;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetSize ( );
    void PutSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("3f60ad45-9306-43b2-88fd-6e8603a01ed3"))
IAgMtoVOModel : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;
    __declspec(property(get=GetInitialBearing,put=PutInitialBearing))
    double InitialBearing;
    __declspec(property(get=GetZPointsNadir,put=PutZPointsNadir))
    VARIANT_BOOL ZPointsNadir;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    double GetScaleValue ( );
    void PutScaleValue (
        double pVal );
    double GetInitialBearing ( );
    void PutInitialBearing (
        double pVal );
    VARIANT_BOOL GetZPointsNadir ( );
    void PutZPointsNadir (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialBearing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InitialBearing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ZPointsNadir (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ZPointsNadir (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("7c8e14e4-0499-4daa-8e6c-d458c340223c"))
IAgMtoVOSwapDistances : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseSwapDistances,put=PutUseSwapDistances))
    VARIANT_BOOL UseSwapDistances;
    __declspec(property(get=GetLabelFrom,put=PutLabelFrom))
    double LabelFrom;
    __declspec(property(get=GetLabelTo,put=PutLabelTo))
    double LabelTo;
    __declspec(property(get=GetModelFrom,put=PutModelFrom))
    double ModelFrom;
    __declspec(property(get=GetModelTo,put=PutModelTo))
    double ModelTo;
    __declspec(property(get=GetMarkerFrom,put=PutMarkerFrom))
    double MarkerFrom;
    __declspec(property(get=GetMarkerTo,put=PutMarkerTo))
    double MarkerTo;
    __declspec(property(get=GetPointFrom,put=PutPointFrom))
    double PointFrom;
    __declspec(property(get=GetPointTo,put=PutPointTo))
    double PointTo;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseSwapDistances ( );
    void PutUseSwapDistances (
        VARIANT_BOOL pVal );
    double GetLabelFrom ( );
    void PutLabelFrom (
        double pVal );
    double GetLabelTo ( );
    void PutLabelTo (
        double pVal );
    double GetModelFrom ( );
    void PutModelFrom (
        double pVal );
    double GetModelTo ( );
    void PutModelTo (
        double pVal );
    double GetMarkerFrom ( );
    void PutMarkerFrom (
        double pVal );
    double GetMarkerTo ( );
    void PutMarkerTo (
        double pVal );
    double GetPointFrom ( );
    void PutPointFrom (
        double pVal );
    double GetPointTo ( );
    void PutPointTo (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseSwapDistances (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSwapDistances (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelFrom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelFrom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LabelTo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelTo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ModelFrom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ModelFrom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ModelTo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ModelTo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerFrom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerFrom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerTo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerTo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointFrom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointFrom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointTo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointTo (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("be2f04ce-8c88-48ec-ad94-d13c5c4d1144"))
IAgMtoVODropLines : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgVeVODropLinePosItemCollectionPtr Position;
    __declspec(property(get=GetEphemeris))
    IAgVeVODropLinePathItemCollectionPtr Ephemeris;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODropLinePosItemCollectionPtr GetPosition ( );
    IAgVeVODropLinePathItemCollectionPtr GetEphemeris ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVODropLinePosItemCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Ephemeris (
        /*[out,retval]*/ struct IAgVeVODropLinePathItemCollection * * ppVal ) = 0;
};

struct __declspec(uuid("68265a0e-991d-4d66-8022-28418509924d"))
IAgMtoVOTrack : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetMarker))
    IAgMtoVOMarkerPtr Marker;
    __declspec(property(get=GetPoint))
    IAgMtoVOPointPtr Point;
    __declspec(property(get=GetModel))
    IAgMtoVOModelPtr Model;
    __declspec(property(get=GetLabel))
    IAgVOOffsetLabelPtr Label;
    __declspec(property(get=GetSwapDistances))
    IAgMtoVOSwapDistancesPtr SwapDistances;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetDropLines))
    IAgMtoVODropLinesPtr DropLines;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetShouldFadeOverTrailTime,put=PutShouldFadeOverTrailTime))
    VARIANT_BOOL ShouldFadeOverTrailTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    IAgMtoVOMarkerPtr GetMarker ( );
    IAgMtoVOPointPtr GetPoint ( );
    IAgMtoVOModelPtr GetModel ( );
    IAgVOOffsetLabelPtr GetLabel ( );
    IAgMtoVOSwapDistancesPtr GetSwapDistances ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgMtoVODropLinesPtr GetDropLines ( );
    long GetId ( );
    VARIANT_BOOL GetShouldFadeOverTrailTime ( );
    void PutShouldFadeOverTrailTime (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgMtoVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgMtoVOPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgMtoVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ struct IAgVOOffsetLabel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SwapDistances (
        /*[out,retval]*/ struct IAgMtoVOSwapDistances * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgMtoVODropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ShouldFadeOverTrailTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShouldFadeOverTrailTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("6ca2610c-a0b5-49c0-8719-b26ddc844593"))
IAgMtoVOTrackCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgMtoVOTrackPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetRecycling,put=PutRecycling))
    VARIANT_BOOL Recycling;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgMtoVOTrackPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IAgMtoVOTrackPtr GetTrackFromId (
        long TrackId );
    VARIANT_BOOL GetRecycling ( );
    void PutRecycling (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgMtoVOTrack * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTrackFromId (
        /*[in]*/ long TrackId,
        /*[out,retval]*/ struct IAgMtoVOTrack * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Recycling (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Recycling (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("61aa7092-51c9-406d-bf1f-2e46664a4676"))
IAgMtoDefaultVOTrack : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetMarker))
    IAgMtoVOMarkerPtr Marker;
    __declspec(property(get=GetPoint))
    IAgMtoVOPointPtr Point;
    __declspec(property(get=GetModel))
    IAgMtoVOModelPtr Model;
    __declspec(property(get=GetLabel))
    IAgVOOffsetLabelPtr Label;
    __declspec(property(get=GetSwapDistances))
    IAgMtoVOSwapDistancesPtr SwapDistances;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetDropLines))
    IAgMtoVODropLinesPtr DropLines;
    __declspec(property(get=GetShouldFadeOverTrailTime,put=PutShouldFadeOverTrailTime))
    VARIANT_BOOL ShouldFadeOverTrailTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    IAgMtoVOMarkerPtr GetMarker ( );
    IAgMtoVOPointPtr GetPoint ( );
    IAgMtoVOModelPtr GetModel ( );
    IAgVOOffsetLabelPtr GetLabel ( );
    IAgMtoVOSwapDistancesPtr GetSwapDistances ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgMtoVODropLinesPtr GetDropLines ( );
    VARIANT_BOOL GetShouldFadeOverTrailTime ( );
    void PutShouldFadeOverTrailTime (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgMtoVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgMtoVOPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgMtoVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ struct IAgVOOffsetLabel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SwapDistances (
        /*[out,retval]*/ struct IAgMtoVOSwapDistances * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgMtoVODropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ShouldFadeOverTrailTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShouldFadeOverTrailTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("3f37bf9d-19ee-4d47-9e8a-f988e4967385"))
IAgMtoVOGlobalTrackOptions : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTracksVisible,put=PutTracksVisible))
    VARIANT_BOOL TracksVisible;
    __declspec(property(get=GetLabelsVisible,put=PutLabelsVisible))
    VARIANT_BOOL LabelsVisible;
    __declspec(property(get=GetMarkersVisible,put=PutMarkersVisible))
    VARIANT_BOOL MarkersVisible;
    __declspec(property(get=GetLinesVisible,put=PutLinesVisible))
    VARIANT_BOOL LinesVisible;
    __declspec(property(get=GetPointsVisible,put=PutPointsVisible))
    VARIANT_BOOL PointsVisible;
    __declspec(property(get=GetOptimizeLines,put=PutOptimizeLines))
    VARIANT_BOOL OptimizeLines;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetTracksVisible ( );
    void PutTracksVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLabelsVisible ( );
    void PutLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMarkersVisible ( );
    void PutMarkersVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLinesVisible ( );
    void PutLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPointsVisible ( );
    void PutPointsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOptimizeLines ( );
    void PutOptimizeLines (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TracksVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TracksVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PointsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OptimizeLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OptimizeLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("bb49c310-78ee-4440-9b01-fdf36bad1cd6"))
IAgMtoVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTracks))
    IAgMtoVOTrackCollectionPtr Tracks;
    __declspec(property(get=GetDefaultTrack))
    IAgMtoDefaultVOTrackPtr DefaultTrack;
    __declspec(property(get=GetGlobalTrackOptions))
    IAgMtoVOGlobalTrackOptionsPtr GlobalTrackOptions;

    //
    // Wrapper methods for error-handling
    //

    IAgMtoVOTrackCollectionPtr GetTracks ( );
    IAgMtoDefaultVOTrackPtr GetDefaultTrack ( );
    IAgMtoVOGlobalTrackOptionsPtr GetGlobalTrackOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tracks (
        /*[out,retval]*/ struct IAgMtoVOTrackCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultTrack (
        /*[out,retval]*/ struct IAgMtoDefaultVOTrack * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GlobalTrackOptions (
        /*[out,retval]*/ struct IAgMtoVOGlobalTrackOptions * * ppVal ) = 0;
};

struct __declspec(uuid("e33b6720-53d7-4291-90bf-82657c8db4cf"))
IAgMtoAnalysisPosition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAltRef,put=PutAltRef))
    enum AgEAltRefType AltRef;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAltRefType GetAltRef ( );
    void PutAltRef (
        enum AgEAltRefType pVal );
    IAgMtoTrackPointCollectionPtr ComputeAllTracks (
        const _variant_t & Time );
    IAgMtoTrackPointCollectionPtr ComputeTracks (
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );
    IAgMtoTrackPointPtr ComputeTrack (
        int TrackId,
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltRef (
        /*[out,retval]*/ enum AgEAltRefType * pVal ) = 0;
      virtual HRESULT __stdcall put_AltRef (
        /*[in]*/ enum AgEAltRefType pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAllTracks (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgMtoTrackPointCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTracks (
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgMtoTrackPointCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTrack (
        /*[in]*/ int TrackId,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgMtoTrackPoint * * ppRetVal ) = 0;
};

enum AgEMtoObjectInterval
{
    eMtoObjectIntervalNormal = 0,
    eMtoObjectIntervalExtended = 1
};

enum AgEMtoRangeMode
{
    eMtoRangeModeEach = 2,
    eMtoRangeModeEachInRange = 3,
    eMtoRangeModeEachNotInRange = 4
};

enum AgEMtoEntirety
{
    eMtoEntiretyAll = 0,
    eMtoEntiretyPartial = 1
};

enum AgEMtoTrackEval
{
    eMtoTrackEvalAll = 0,
    eMtoTrackEvalAny = 1
};

struct __declspec(uuid("9e955910-a010-4391-a75b-5a982b7b1b2c"))
IAgMtoAnalysisRange : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLowerLimit,put=PutLowerLimit))
    double LowerLimit;
    __declspec(property(get=GetUpperLimit,put=PutUpperLimit))
    double UpperLimit;
    __declspec(property(get=GetObjectInterval,put=PutObjectInterval))
    enum AgEMtoObjectInterval ObjectInterval;
    __declspec(property(get=GetObjectData,put=PutObjectData))
    int ObjectData;
    __declspec(property(get=GetStkObjectPath,put=PutStkObjectPath))
    _bstr_t StkObjectPath;
    __declspec(property(get=GetEntirety,put=PutEntirety))
    enum AgEMtoEntirety Entirety;

    //
    // Wrapper methods for error-handling
    //

    double GetLowerLimit ( );
    void PutLowerLimit (
        double pVal );
    double GetUpperLimit ( );
    void PutUpperLimit (
        double pVal );
    enum AgEMtoObjectInterval GetObjectInterval ( );
    void PutObjectInterval (
        enum AgEMtoObjectInterval pVal );
    int GetObjectData ( );
    void PutObjectData (
        int pVal );
    _bstr_t GetStkObjectPath ( );
    void PutStkObjectPath (
        _bstr_t pRetVal );
    VARIANT_BOOL IsAnyTrackInRange (
        const _variant_t & Time );
    VARIANT_BOOL AreAllTracksInRange (
        const _variant_t & Time );
    VARIANT_BOOL IsTrackInRange (
        int TrackId,
        const _variant_t & Time );
    SAFEARRAY * ComputeRanges (
        enum AgEMtoRangeMode Mode,
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );
    SAFEARRAY * ComputeAllRanges (
        enum AgEMtoRangeMode Mode,
        const _variant_t & Time );
    enum AgEMtoEntirety GetEntirety ( );
    void PutEntirety (
        enum AgEMtoEntirety pEntirety );
    VARIANT_BOOL AreTracksInRange (
        enum AgEMtoTrackEval AllOrAny,
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LowerLimit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LowerLimit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UpperLimit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UpperLimit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectInterval (
        /*[out,retval]*/ enum AgEMtoObjectInterval * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectInterval (
        /*[in]*/ enum AgEMtoObjectInterval pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectData (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectData (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_StkObjectPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StkObjectPath (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAnyTrackInRange (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AreAllTracksInRange (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTrackInRange (
        /*[in]*/ int TrackId,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeRanges (
        /*[in]*/ enum AgEMtoRangeMode Mode,
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAllRanges (
        /*[in]*/ enum AgEMtoRangeMode Mode,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Entirety (
        /*[out,retval]*/ enum AgEMtoEntirety * pEntirety ) = 0;
      virtual HRESULT __stdcall put_Entirety (
        /*[in]*/ enum AgEMtoEntirety pEntirety ) = 0;
      virtual HRESULT __stdcall raw_AreTracksInRange (
        /*[in]*/ enum AgEMtoTrackEval AllOrAny,
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

enum AgEMtoVisibilityMode
{
    eVisibilityModeEach = 2,
    eVisibilityModeEachVisible = 3,
    eVisibilityModeEachNotVisible = 4
};

struct __declspec(uuid("ce8bee27-9a07-458a-9047-773e6fd43209"))
IAgMtoAnalysisFieldOfView : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSensor,put=PutSensor))
    _bstr_t Sensor;
    __declspec(property(get=GetEntirety,put=PutEntirety))
    enum AgEMtoEntirety Entirety;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsAnyTrackInFOV (
        const _variant_t & Time );
    VARIANT_BOOL AreAllTracksInFOV (
        const _variant_t & Time );
    VARIANT_BOOL IsTrackInFOV (
        int TrackId,
        const _variant_t & Time );
    SAFEARRAY * ComputeTracks (
        enum AgEMtoVisibilityMode Mode,
        SAFEARRAY * * Tracks,
        const _variant_t & Time );
    SAFEARRAY * ComputeAllTracks (
        enum AgEMtoVisibilityMode Mode,
        const _variant_t & Time );
    _bstr_t GetSensor ( );
    void PutSensor (
        _bstr_t pRetVal );
    enum AgEMtoEntirety GetEntirety ( );
    void PutEntirety (
        enum AgEMtoEntirety pEntirety );
    VARIANT_BOOL AreTracksInFOV (
        enum AgEMtoTrackEval AnyOrAll,
        SAFEARRAY * * Tracks,
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsAnyTrackInFOV (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AreAllTracksInFOV (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTrackInFOV (
        /*[in]*/ int TrackId,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTracks (
        /*[in]*/ enum AgEMtoVisibilityMode Mode,
        /*[in]*/ SAFEARRAY * * Tracks,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAllTracks (
        /*[in]*/ enum AgEMtoVisibilityMode Mode,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sensor (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sensor (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Entirety (
        /*[out,retval]*/ enum AgEMtoEntirety * pEntirety ) = 0;
      virtual HRESULT __stdcall put_Entirety (
        /*[in]*/ enum AgEMtoEntirety pEntirety ) = 0;
      virtual HRESULT __stdcall raw_AreTracksInFOV (
        /*[in]*/ enum AgEMtoTrackEval AnyOrAll,
        /*[in]*/ SAFEARRAY * * Tracks,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("2530b726-5c3f-4051-98df-87d89e2461c2"))
IAgMtoAnalysisVisibility : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseTerrain,put=PutUseTerrain))
    VARIANT_BOOL UseTerrain;
    __declspec(property(get=GetEntirety,put=PutEntirety))
    enum AgEMtoEntirety Entirety;
    __declspec(property(get=GetObjectInterval,put=PutObjectInterval))
    enum AgEMtoObjectInterval ObjectInterval;
    __declspec(property(get=GetObjectData,put=PutObjectData))
    int ObjectData;
    __declspec(property(get=GetStkObjectPath,put=PutStkObjectPath))
    _bstr_t StkObjectPath;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsAnyTrackVisible (
        const _variant_t & Time );
    VARIANT_BOOL AreAllTracksVisible (
        const _variant_t & Time );
    VARIANT_BOOL GetUseTerrain ( );
    void PutUseTerrain (
        VARIANT_BOOL pVal );
    enum AgEMtoEntirety GetEntirety ( );
    void PutEntirety (
        enum AgEMtoEntirety pEntirety );
    enum AgEMtoObjectInterval GetObjectInterval ( );
    void PutObjectInterval (
        enum AgEMtoObjectInterval pVal );
    int GetObjectData ( );
    void PutObjectData (
        int pVal );
    VARIANT_BOOL IsTrackVisible (
        int TrackId,
        const _variant_t & Time );
    _bstr_t GetStkObjectPath ( );
    void PutStkObjectPath (
        _bstr_t pRetVal );
    VARIANT_BOOL AreTracksVisible (
        enum AgEMtoTrackEval Eval,
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );
    SAFEARRAY * ComputeTracks (
        enum AgEMtoVisibilityMode Mode,
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );
    SAFEARRAY * ComputeAllTracks (
        enum AgEMtoVisibilityMode Mode,
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsAnyTrackVisible (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AreAllTracksVisible (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTerrain (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Entirety (
        /*[out,retval]*/ enum AgEMtoEntirety * pEntirety ) = 0;
      virtual HRESULT __stdcall put_Entirety (
        /*[in]*/ enum AgEMtoEntirety pEntirety ) = 0;
      virtual HRESULT __stdcall get_ObjectInterval (
        /*[out,retval]*/ enum AgEMtoObjectInterval * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectInterval (
        /*[in]*/ enum AgEMtoObjectInterval pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectData (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectData (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall raw_IsTrackVisible (
        /*[in]*/ int TrackId,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StkObjectPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StkObjectPath (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AreTracksVisible (
        /*[in]*/ enum AgEMtoTrackEval Eval,
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTracks (
        /*[in]*/ enum AgEMtoVisibilityMode Mode,
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppArray ) = 0;
      virtual HRESULT __stdcall raw_ComputeAllTracks (
        /*[in]*/ enum AgEMtoVisibilityMode Mode,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppArray ) = 0;
};

struct __declspec(uuid("3da02586-63d0-4f27-91f3-1c577ace22b3"))
IAgMtoAnalysis : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgMtoAnalysisPositionPtr Position;
    __declspec(property(get=GetRange))
    IAgMtoAnalysisRangePtr Range;
    __declspec(property(get=GetFieldOfView))
    IAgMtoAnalysisFieldOfViewPtr FieldOfView;
    __declspec(property(get=GetVisibility))
    IAgMtoAnalysisVisibilityPtr Visibility;

    //
    // Wrapper methods for error-handling
    //

    IAgMtoAnalysisPositionPtr GetPosition ( );
    IAgMtoAnalysisRangePtr GetRange ( );
    IAgMtoAnalysisFieldOfViewPtr GetFieldOfView ( );
    IAgMtoAnalysisVisibilityPtr GetVisibility ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgMtoAnalysisPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct IAgMtoAnalysisRange * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ struct IAgMtoAnalysisFieldOfView * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Visibility (
        /*[out,retval]*/ struct IAgMtoAnalysisVisibility * * ppRetVal ) = 0;
};

struct __declspec(uuid("e8922ccb-ecb9-4451-ac85-1bc9f21c15fd"))
IAgMto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTracks))
    IAgMtoTrackCollectionPtr Tracks;
    __declspec(property(get=GetDefaultTrack))
    IAgMtoDefaultTrackPtr DefaultTrack;
    __declspec(property(get=GetGlobalTrackOptions))
    IAgMtoGlobalTrackOptionsPtr GlobalTrackOptions;
    __declspec(property(get=GetGraphics))
    IAgMtoGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgMtoVOPtr VO;
    __declspec(property(get=GetAnalysis))
    IAgMtoAnalysisPtr Analysis;

    //
    // Wrapper methods for error-handling
    //

    IAgMtoTrackCollectionPtr GetTracks ( );
    IAgMtoDefaultTrackPtr GetDefaultTrack ( );
    IAgMtoGlobalTrackOptionsPtr GetGlobalTrackOptions ( );
    IAgMtoGraphicsPtr GetGraphics ( );
    IAgMtoVOPtr GetVO ( );
    IAgMtoAnalysisPtr GetAnalysis ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tracks (
        /*[out,retval]*/ struct IAgMtoTrackCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultTrack (
        /*[out,retval]*/ struct IAgMtoDefaultTrack * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GlobalTrackOptions (
        /*[out,retval]*/ struct IAgMtoGlobalTrackOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgMtoGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgMtoVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Analysis (
        /*[out,retval]*/ struct IAgMtoAnalysis * * ppRetVal ) = 0;
};

struct __declspec(uuid("aa2148c8-0eb2-456e-8a52-1f1be7de6b01"))
AgMtoGfxMarker;
    // [ default ] interface _IAgMtoGfxMarker
    // interface IAgMtoGfxMarker

struct __declspec(uuid("9bfcac44-14d3-460c-8133-d7d13530dfef"))
_IAgMtoGfxMarker : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("53c0db47-4845-4074-868e-7d6ea5023f6e"))
AgMtoGfxLine;
    // [ default ] interface _IAgMtoGfxLine
    // interface IAgMtoGfxLine

struct __declspec(uuid("28f04d3c-035b-4c9f-a2da-28126ad5218b"))
_IAgMtoGfxLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    enum AgELineWidth Width;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetStyle ( );
    void PutStyle (
        enum STKUtil::AgELineStyle ppVal );
    enum AgELineWidth GetWidth ( );
    void PutWidth (
        enum AgELineWidth ppVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * ppVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum STKUtil::AgELineStyle ppVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ enum AgELineWidth * ppVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ enum AgELineWidth ppVal ) = 0;
};

struct __declspec(uuid("62059f78-dd33-4cce-a43b-50b50a806ba3"))
AgMtoGfxFadeTimes;
    // [ default ] interface _IAgMtoGfxFadeTimes
    // interface IAgMtoGfxFadeTimes

struct __declspec(uuid("b0b399bf-f777-4947-adc3-81ef2a1bbfeb"))
_IAgMtoGfxFadeTimes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUsePreFade,put=PutUsePreFade))
    VARIANT_BOOL UsePreFade;
    __declspec(property(get=GetPreFadeTime,put=PutPreFadeTime))
    double PreFadeTime;
    __declspec(property(get=GetUsePostFade,put=PutUsePostFade))
    VARIANT_BOOL UsePostFade;
    __declspec(property(get=GetPostFadeTime,put=PutPostFadeTime))
    double PostFadeTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUsePreFade ( );
    void PutUsePreFade (
        VARIANT_BOOL pVal );
    double GetPreFadeTime ( );
    void PutPreFadeTime (
        double pVal );
    VARIANT_BOOL GetUsePostFade ( );
    void PutUsePostFade (
        VARIANT_BOOL pVal );
    double GetPostFadeTime ( );
    void PutPostFadeTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UsePreFade (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePreFade (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PreFadeTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PreFadeTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UsePostFade (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePostFade (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PostFadeTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PostFadeTime (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b8ce068b-6191-489b-ab1c-7a53952e22c5"))
AgMtoGfxLeadTrailTimes;
    // [ default ] interface _IAgMtoGfxLeadTrailTimes
    // interface IAgMtoGfxLeadTrailTimes

struct __declspec(uuid("aa14691f-8bff-4eef-b7ea-04b2774da5eb"))
_IAgMtoGfxLeadTrailTimes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseLeadTrail,put=PutUseLeadTrail))
    VARIANT_BOOL UseLeadTrail;
    __declspec(property(get=GetLeadTime,put=PutLeadTime))
    double LeadTime;
    __declspec(property(get=GetTrailTime,put=PutTrailTime))
    double TrailTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLeadTrail ( );
    void PutUseLeadTrail (
        VARIANT_BOOL pVal );
    double GetLeadTime ( );
    void PutLeadTime (
        double pVal );
    double GetTrailTime ( );
    void PutTrailTime (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLeadTrail (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLeadTrail (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LeadTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeadTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TrailTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TrailTime (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("fa26653d-a534-4630-a6ca-7873f99d4fde"))
AgMtoGfxTrack;
    // [ default ] interface _IAgMtoGfxTrack
    // interface IAgMtoGfxTrack

struct __declspec(uuid("9c97f102-1c88-4581-ad69-73507b420f21"))
_IAgMtoGfxTrack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetMarker))
    IAgMtoGfxMarkerPtr Marker;
    __declspec(property(get=GetLine))
    IAgMtoGfxLinePtr Line;
    __declspec(property(get=GetFadeTimes))
    IAgMtoGfxFadeTimesPtr FadeTimes;
    __declspec(property(get=GetLeadTrailTimes))
    IAgMtoGfxLeadTrailTimesPtr LeadTrailTimes;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;
    __declspec(property(get=GetId))
    long Id;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pVal );
    IAgMtoGfxMarkerPtr GetMarker ( );
    IAgMtoGfxLinePtr GetLine ( );
    IAgMtoGfxFadeTimesPtr GetFadeTimes ( );
    IAgMtoGfxLeadTrailTimesPtr GetLeadTrailTimes ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );
    long GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgMtoGfxMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IAgMtoGfxLine * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FadeTimes (
        /*[out,retval]*/ struct IAgMtoGfxFadeTimes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LeadTrailTimes (
        /*[out,retval]*/ struct IAgMtoGfxLeadTrailTimes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("ef35bcdc-485d-4195-bf29-be0fcb394ab0"))
AgMtoGfxTrackCollection;
    // [ default ] interface IUnknown
    // interface IAgMtoGfxTrackCollection

struct __declspec(uuid("b012d85d-bf1d-4611-98d9-9e5d47f41e97"))
AgMtoDefaultGfxTrack;
    // [ default ] interface _IAgMtoDefaultGfxTrack
    // interface IAgMtoDefaultGfxTrack

struct __declspec(uuid("491f3a4a-4f9c-4b05-b73c-07fcacd8e1de"))
_IAgMtoDefaultGfxTrack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetMarker))
    IAgMtoGfxMarkerPtr Marker;
    __declspec(property(get=GetLine))
    IAgMtoGfxLinePtr Line;
    __declspec(property(get=GetFadeTimes))
    IAgMtoGfxFadeTimesPtr FadeTimes;
    __declspec(property(get=GetLeadTrailTimes))
    IAgMtoGfxLeadTrailTimesPtr LeadTrailTimes;
    __declspec(property(get=GetRangeContours))
    IAgGfxRangeContoursPtr RangeContours;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pVal );
    IAgMtoGfxMarkerPtr GetMarker ( );
    IAgMtoGfxLinePtr GetLine ( );
    IAgMtoGfxFadeTimesPtr GetFadeTimes ( );
    IAgMtoGfxLeadTrailTimesPtr GetLeadTrailTimes ( );
    IAgGfxRangeContoursPtr GetRangeContours ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgMtoGfxMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct IAgMtoGfxLine * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FadeTimes (
        /*[out,retval]*/ struct IAgMtoGfxFadeTimes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LeadTrailTimes (
        /*[out,retval]*/ struct IAgMtoGfxLeadTrailTimes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgGfxRangeContours * * ppVal ) = 0;
};

struct __declspec(uuid("fed8e6c5-fe39-4bf5-816c-37dffa05f199"))
AgMtoGfxGlobalTrackOptions;
    // [ default ] interface _IAgMtoGfxGlobalTrackOptions
    // interface IAgMtoGfxGlobalTrackOptions

struct __declspec(uuid("26844fd7-8104-4513-9121-6edcdaef8213"))
_IAgMtoGfxGlobalTrackOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTracksVisible,put=PutTracksVisible))
    VARIANT_BOOL TracksVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetTracksVisible ( );
    void PutTracksVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TracksVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TracksVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("f63a0ce0-5e14-4556-bd81-b2485129d4ae"))
AgMtoGraphics;
    // [ default ] interface _IAgMtoGraphics
    // interface IAgMtoGraphics

struct __declspec(uuid("15d768f3-1f00-4e09-8c0e-2dbc5bb33473"))
_IAgMtoGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTracks))
    IAgMtoGfxTrackCollectionPtr Tracks;
    __declspec(property(get=GetDefaultTrack))
    IAgMtoDefaultGfxTrackPtr DefaultTrack;
    __declspec(property(get=GetGlobalTrackOptions))
    IAgMtoGfxGlobalTrackOptionsPtr GlobalTrackOptions;

    //
    // Wrapper methods for error-handling
    //

    IAgMtoGfxTrackCollectionPtr GetTracks ( );
    IAgMtoDefaultGfxTrackPtr GetDefaultTrack ( );
    IAgMtoGfxGlobalTrackOptionsPtr GetGlobalTrackOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tracks (
        /*[out,retval]*/ struct IAgMtoGfxTrackCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultTrack (
        /*[out,retval]*/ struct IAgMtoDefaultGfxTrack * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GlobalTrackOptions (
        /*[out,retval]*/ struct IAgMtoGfxGlobalTrackOptions * * ppVal ) = 0;
};

struct __declspec(uuid("d8144c9e-2139-4142-94dc-c3f0e09e0dd8"))
AgMtoVOMarker;
    // [ default ] interface _IAgMtoVOMarker
    // interface IAgMtoVOMarker

struct __declspec(uuid("485faf01-713a-4bf0-ab6b-c43218adde5d"))
_IAgMtoVOMarker : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPixelSize,put=PutPixelSize))
    long PixelSize;
    __declspec(property(get=GetMarkerType,put=PutMarkerType))
    enum AgEMarkerType MarkerType;
    __declspec(property(get=GetEnableRotate,put=PutEnableRotate))
    VARIANT_BOOL EnableRotate;
    __declspec(property(get=GetAngle,put=PutAngle))
    _variant_t Angle;
    __declspec(property(get=GetXOrigin,put=PutXOrigin))
    enum AgEVOMarkerOriginType XOrigin;
    __declspec(property(get=GetYOrigin,put=PutYOrigin))
    enum AgEVOMarkerOriginType YOrigin;
    __declspec(property(get=GetMarkerData))
    IAgVOMarkerDataPtr MarkerData;
    __declspec(property(get=GetRotateFromNorth,put=PutRotateFromNorth))
    VARIANT_BOOL RotateFromNorth;
    __declspec(property(get=GetOrientationMode,put=PutOrientationMode))
    enum AgEVOMarkerOrientation OrientationMode;

    //
    // Wrapper methods for error-handling
    //

    long GetPixelSize ( );
    void PutPixelSize (
        long pSize );
    enum AgEMarkerType GetMarkerType ( );
    void PutMarkerType (
        enum AgEMarkerType pMarkerType );
    VARIANT_BOOL GetEnableRotate ( );
    void PutEnableRotate (
        VARIANT_BOOL pRotate );
    _variant_t GetAngle ( );
    void PutAngle (
        const _variant_t & pAngle );
    enum AgEVOMarkerOriginType GetXOrigin ( );
    void PutXOrigin (
        enum AgEVOMarkerOriginType pXOrigin );
    enum AgEVOMarkerOriginType GetYOrigin ( );
    void PutYOrigin (
        enum AgEVOMarkerOriginType pYOrigin );
    IAgVOMarkerDataPtr GetMarkerData ( );
    HRESULT SetMarkerImageFile (
        _bstr_t ImageFile );
    VARIANT_BOOL GetRotateFromNorth ( );
    void PutRotateFromNorth (
        VARIANT_BOOL pVal );
    enum AgEVOMarkerOrientation GetOrientationMode ( );
    void PutOrientationMode (
        enum AgEVOMarkerOrientation pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PixelSize (
        /*[out,retval]*/ long * pSize ) = 0;
      virtual HRESULT __stdcall put_PixelSize (
        /*[in]*/ long pSize ) = 0;
      virtual HRESULT __stdcall get_MarkerType (
        /*[out,retval]*/ enum AgEMarkerType * pMarkerType ) = 0;
      virtual HRESULT __stdcall put_MarkerType (
        /*[in]*/ enum AgEMarkerType pMarkerType ) = 0;
      virtual HRESULT __stdcall get_EnableRotate (
        /*[out,retval]*/ VARIANT_BOOL * pRotate ) = 0;
      virtual HRESULT __stdcall put_EnableRotate (
        /*[in]*/ VARIANT_BOOL pRotate ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ VARIANT * pAngle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ VARIANT pAngle ) = 0;
      virtual HRESULT __stdcall get_XOrigin (
        /*[out,retval]*/ enum AgEVOMarkerOriginType * pXOrigin ) = 0;
      virtual HRESULT __stdcall put_XOrigin (
        /*[in]*/ enum AgEVOMarkerOriginType pXOrigin ) = 0;
      virtual HRESULT __stdcall get_YOrigin (
        /*[out,retval]*/ enum AgEVOMarkerOriginType * pYOrigin ) = 0;
      virtual HRESULT __stdcall put_YOrigin (
        /*[in]*/ enum AgEVOMarkerOriginType pYOrigin ) = 0;
      virtual HRESULT __stdcall get_MarkerData (
        /*[out,retval]*/ struct IAgVOMarkerData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetMarkerImageFile (
        /*[in]*/ BSTR ImageFile ) = 0;
      virtual HRESULT __stdcall get_RotateFromNorth (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RotateFromNorth (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OrientationMode (
        /*[out,retval]*/ enum AgEVOMarkerOrientation * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OrientationMode (
        /*[in]*/ enum AgEVOMarkerOrientation pRetVal ) = 0;
};

struct __declspec(uuid("df19918d-6ac8-4ac1-9279-7e8383ca1d80"))
AgMtoVOPoint;
    // [ default ] interface _IAgMtoVOPoint
    // interface IAgMtoVOPoint

struct __declspec(uuid("0c0be173-f385-47bd-af11-678ae6d3e54e"))
_IAgMtoVOPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetSize,put=PutSize))
    double Size;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetSize ( );
    void PutSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("165d6780-64f1-4118-a346-e51734f89813"))
AgMtoVOModel;
    // [ default ] interface _IAgMtoVOModel
    // interface IAgMtoVOModel

struct __declspec(uuid("b0d2a3e7-a95b-496c-b443-05a031494556"))
_IAgMtoVOModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetScaleValue,put=PutScaleValue))
    double ScaleValue;
    __declspec(property(get=GetInitialBearing,put=PutInitialBearing))
    double InitialBearing;
    __declspec(property(get=GetZPointsNadir,put=PutZPointsNadir))
    VARIANT_BOOL ZPointsNadir;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    double GetScaleValue ( );
    void PutScaleValue (
        double pVal );
    double GetInitialBearing ( );
    void PutInitialBearing (
        double pVal );
    VARIANT_BOOL GetZPointsNadir ( );
    void PutZPointsNadir (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_InitialBearing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InitialBearing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ZPointsNadir (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ZPointsNadir (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("13d4997f-9b5a-4871-98c3-2f1dbf4a444c"))
AgMtoVOSwapDistances;
    // [ default ] interface _IAgMtoVOSwapDistances
    // interface IAgMtoVOSwapDistances

struct __declspec(uuid("de98f942-158f-4d27-b14d-8f0cb4b94673"))
_IAgMtoVOSwapDistances : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseSwapDistances,put=PutUseSwapDistances))
    VARIANT_BOOL UseSwapDistances;
    __declspec(property(get=GetLabelFrom,put=PutLabelFrom))
    double LabelFrom;
    __declspec(property(get=GetLabelTo,put=PutLabelTo))
    double LabelTo;
    __declspec(property(get=GetModelFrom,put=PutModelFrom))
    double ModelFrom;
    __declspec(property(get=GetModelTo,put=PutModelTo))
    double ModelTo;
    __declspec(property(get=GetMarkerFrom,put=PutMarkerFrom))
    double MarkerFrom;
    __declspec(property(get=GetMarkerTo,put=PutMarkerTo))
    double MarkerTo;
    __declspec(property(get=GetPointFrom,put=PutPointFrom))
    double PointFrom;
    __declspec(property(get=GetPointTo,put=PutPointTo))
    double PointTo;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseSwapDistances ( );
    void PutUseSwapDistances (
        VARIANT_BOOL pVal );
    double GetLabelFrom ( );
    void PutLabelFrom (
        double pVal );
    double GetLabelTo ( );
    void PutLabelTo (
        double pVal );
    double GetModelFrom ( );
    void PutModelFrom (
        double pVal );
    double GetModelTo ( );
    void PutModelTo (
        double pVal );
    double GetMarkerFrom ( );
    void PutMarkerFrom (
        double pVal );
    double GetMarkerTo ( );
    void PutMarkerTo (
        double pVal );
    double GetPointFrom ( );
    void PutPointFrom (
        double pVal );
    double GetPointTo ( );
    void PutPointTo (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseSwapDistances (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSwapDistances (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelFrom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelFrom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LabelTo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelTo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ModelFrom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ModelFrom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ModelTo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ModelTo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerFrom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerFrom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerTo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerTo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointFrom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointFrom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointTo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointTo (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("02091c80-26ff-4b6a-8656-2a4cf17f7601"))
AgMtoVODropLines;
    // [ default ] interface _IAgMtoVODropLines
    // interface IAgMtoVODropLines

struct __declspec(uuid("559bddd2-3e67-46b8-896c-8240fbbe4694"))
_IAgMtoVODropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgVeVODropLinePosItemCollectionPtr Position;
    __declspec(property(get=GetEphemeris))
    IAgVeVODropLinePathItemCollectionPtr Ephemeris;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVODropLinePosItemCollectionPtr GetPosition ( );
    IAgVeVODropLinePathItemCollectionPtr GetEphemeris ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgVeVODropLinePosItemCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Ephemeris (
        /*[out,retval]*/ struct IAgVeVODropLinePathItemCollection * * ppVal ) = 0;
};

struct __declspec(uuid("3f15927f-bb34-485d-9813-93e1934dd15d"))
AgMtoVOTrack;
    // [ default ] interface _IAgMtoVOTrack
    // interface IAgMtoVOTrack

struct __declspec(uuid("4e6174ed-0f68-4cd9-9d68-ed6f54c4eb92"))
_IAgMtoVOTrack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetMarker))
    IAgMtoVOMarkerPtr Marker;
    __declspec(property(get=GetPoint))
    IAgMtoVOPointPtr Point;
    __declspec(property(get=GetModel))
    IAgMtoVOModelPtr Model;
    __declspec(property(get=GetLabel))
    IAgVOOffsetLabelPtr Label;
    __declspec(property(get=GetSwapDistances))
    IAgMtoVOSwapDistancesPtr SwapDistances;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetDropLines))
    IAgMtoVODropLinesPtr DropLines;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetShouldFadeOverTrailTime,put=PutShouldFadeOverTrailTime))
    VARIANT_BOOL ShouldFadeOverTrailTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    IAgMtoVOMarkerPtr GetMarker ( );
    IAgMtoVOPointPtr GetPoint ( );
    IAgMtoVOModelPtr GetModel ( );
    IAgVOOffsetLabelPtr GetLabel ( );
    IAgMtoVOSwapDistancesPtr GetSwapDistances ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgMtoVODropLinesPtr GetDropLines ( );
    long GetId ( );
    VARIANT_BOOL GetShouldFadeOverTrailTime ( );
    void PutShouldFadeOverTrailTime (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgMtoVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgMtoVOPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgMtoVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ struct IAgVOOffsetLabel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SwapDistances (
        /*[out,retval]*/ struct IAgMtoVOSwapDistances * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgMtoVODropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ShouldFadeOverTrailTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShouldFadeOverTrailTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("ace9bbed-6146-44e7-bcec-f55fced79f96"))
AgMtoVOTrackCollection;
    // [ default ] interface IUnknown
    // interface IAgMtoVOTrackCollection

struct __declspec(uuid("1cdb5407-27ed-4409-afef-d7ba5a08f7e4"))
AgMtoDefaultVOTrack;
    // [ default ] interface _IAgMtoDefaultVOTrack
    // interface IAgMtoDefaultVOTrack

struct __declspec(uuid("7dce94c2-b54e-493f-89ee-3c803d99485f"))
_IAgMtoDefaultVOTrack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetMarker))
    IAgMtoVOMarkerPtr Marker;
    __declspec(property(get=GetPoint))
    IAgMtoVOPointPtr Point;
    __declspec(property(get=GetModel))
    IAgMtoVOModelPtr Model;
    __declspec(property(get=GetLabel))
    IAgVOOffsetLabelPtr Label;
    __declspec(property(get=GetSwapDistances))
    IAgMtoVOSwapDistancesPtr SwapDistances;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetDropLines))
    IAgMtoVODropLinesPtr DropLines;
    __declspec(property(get=GetShouldFadeOverTrailTime,put=PutShouldFadeOverTrailTime))
    VARIANT_BOOL ShouldFadeOverTrailTime;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    IAgMtoVOMarkerPtr GetMarker ( );
    IAgMtoVOPointPtr GetPoint ( );
    IAgMtoVOModelPtr GetModel ( );
    IAgVOOffsetLabelPtr GetLabel ( );
    IAgMtoVOSwapDistancesPtr GetSwapDistances ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgMtoVODropLinesPtr GetDropLines ( );
    VARIANT_BOOL GetShouldFadeOverTrailTime ( );
    void PutShouldFadeOverTrailTime (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct IAgMtoVOMarker * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IAgMtoVOPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgMtoVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ struct IAgVOOffsetLabel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SwapDistances (
        /*[out,retval]*/ struct IAgMtoVOSwapDistances * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgMtoVODropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ShouldFadeOverTrailTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShouldFadeOverTrailTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("1bfc19c6-18f7-4b97-93eb-26476d263bab"))
AgMtoVOGlobalTrackOptions;
    // [ default ] interface _IAgMtoVOGlobalTrackOptions
    // interface IAgMtoVOGlobalTrackOptions

struct __declspec(uuid("7cb1a6f2-1736-4471-bf3e-d094665be2b6"))
_IAgMtoVOGlobalTrackOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTracksVisible,put=PutTracksVisible))
    VARIANT_BOOL TracksVisible;
    __declspec(property(get=GetLabelsVisible,put=PutLabelsVisible))
    VARIANT_BOOL LabelsVisible;
    __declspec(property(get=GetMarkersVisible,put=PutMarkersVisible))
    VARIANT_BOOL MarkersVisible;
    __declspec(property(get=GetLinesVisible,put=PutLinesVisible))
    VARIANT_BOOL LinesVisible;
    __declspec(property(get=GetPointsVisible,put=PutPointsVisible))
    VARIANT_BOOL PointsVisible;
    __declspec(property(get=GetOptimizeLines,put=PutOptimizeLines))
    VARIANT_BOOL OptimizeLines;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetTracksVisible ( );
    void PutTracksVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLabelsVisible ( );
    void PutLabelsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMarkersVisible ( );
    void PutMarkersVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLinesVisible ( );
    void PutLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPointsVisible ( );
    void PutPointsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOptimizeLines ( );
    void PutOptimizeLines (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TracksVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TracksVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MarkersVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkersVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PointsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PointsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OptimizeLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OptimizeLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b275390c-e521-4b24-a5d4-70880b571422"))
AgMtoVO;
    // [ default ] interface _IAgMtoVO
    // interface IAgMtoVO

struct __declspec(uuid("6b6a8998-c669-4afe-9d67-f1c34f066382"))
_IAgMtoVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTracks))
    IAgMtoVOTrackCollectionPtr Tracks;
    __declspec(property(get=GetDefaultTrack))
    IAgMtoDefaultVOTrackPtr DefaultTrack;
    __declspec(property(get=GetGlobalTrackOptions))
    IAgMtoVOGlobalTrackOptionsPtr GlobalTrackOptions;

    //
    // Wrapper methods for error-handling
    //

    IAgMtoVOTrackCollectionPtr GetTracks ( );
    IAgMtoDefaultVOTrackPtr GetDefaultTrack ( );
    IAgMtoVOGlobalTrackOptionsPtr GetGlobalTrackOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tracks (
        /*[out,retval]*/ struct IAgMtoVOTrackCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultTrack (
        /*[out,retval]*/ struct IAgMtoDefaultVOTrack * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GlobalTrackOptions (
        /*[out,retval]*/ struct IAgMtoVOGlobalTrackOptions * * ppVal ) = 0;
};

struct __declspec(uuid("557a0729-e9ea-45e0-a7c5-a3a15d3d5440"))
AgLLAGeocentric;
    // [ default ] interface _IAgLLAGeocentric
    // interface IAgLLAGeocentric
    // interface IAgLLAPosition

struct __declspec(uuid("2a65a82e-f30b-4c8e-ba18-e6c6aadaaaff"))
_IAgLLAGeocentric : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetRad,put=PutRad))
    double Rad;
    __declspec(property(get=GetType))
    enum AgELLAPositionType Type;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetRad ( );
    void PutRad (
        double pVal );
    IAgLLAPositionPtr ConvertTo (
        enum AgELLAPositionType Type );
    enum AgELLAPositionType GetType ( );
    HRESULT Assign (
        struct IAgLLAPosition * pPos );
    HRESULT AssignGeocentric (
        double Lat,
        double Lon,
        double Rad );
    HRESULT AssignGeodetic (
        double Lat,
        double Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rad (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rad (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgELLAPositionType Type,
        /*[out,retval]*/ struct IAgLLAPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgELLAPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgLLAPosition * pPos ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Rad ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt ) = 0;
};

struct __declspec(uuid("43ac4fe6-c8f7-482f-a1b9-9326bf3aa97b"))
IAgLLAGeocentric : IAgLLAPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetRad,put=PutRad))
    double Rad;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetRad ( );
    void PutRad (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Rad (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Rad (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e06577f6-6065-488a-bcf4-4ed02fff449d"))
AgLLAGeodetic;
    // [ default ] interface _IAgLLAGeodetic
    // interface IAgLLAGeodetic
    // interface IAgLLAPosition

struct __declspec(uuid("67c36044-e9c9-4a3f-84b1-9aacb7d6f8e0"))
_IAgLLAGeodetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;
    __declspec(property(get=GetType))
    enum AgELLAPositionType Type;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );
    IAgLLAPositionPtr ConvertTo (
        enum AgELLAPositionType Type );
    enum AgELLAPositionType GetType ( );
    HRESULT Assign (
        struct IAgLLAPosition * pPos );
    HRESULT AssignGeocentric (
        double Lat,
        double Lon,
        double Rad );
    HRESULT AssignGeodetic (
        double Lat,
        double Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum AgELLAPositionType Type,
        /*[out,retval]*/ struct IAgLLAPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgELLAPositionType * pType ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IAgLLAPosition * pPos ) = 0;
      virtual HRESULT __stdcall raw_AssignGeocentric (
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Rad ) = 0;
      virtual HRESULT __stdcall raw_AssignGeodetic (
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt ) = 0;
};

struct __declspec(uuid("f29e9d78-1e82-429e-a1be-a087f804d421"))
IAgLLAGeodetic : IAgLLAPosition
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    double Lat;
    __declspec(property(get=GetLon,put=PutLon))
    double Lon;
    __declspec(property(get=GetAlt,put=PutAlt))
    double Alt;

    //
    // Wrapper methods for error-handling
    //

    double GetLat ( );
    void PutLat (
        double pVal );
    double GetLon ( );
    void PutLon (
        double pVal );
    double GetAlt ( );
    void PutAlt (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Alt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Alt (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1aa18a4e-abbb-4c77-a132-b8e98304256f"))
AgLtPoint;
    // [ default ] interface _IAgLtPoint
    // interface IAgLtPoint

struct __declspec(uuid("221dc5ef-651b-4737-9d08-1f188931d41f"))
_IAgLtPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
};

struct __declspec(uuid("a028ea94-fcfb-44f4-aad0-df0dfb3fd5d4"))
IAgLtPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLat,put=PutLat))
    _variant_t Lat;
    __declspec(property(get=GetLon,put=PutLon))
    _variant_t Lon;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLat ( );
    void PutLat (
        const _variant_t & pLat );
    _variant_t GetLon ( );
    void PutLon (
        const _variant_t & pLon );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Lat (
        /*[out,retval]*/ VARIANT * pLat ) = 0;
      virtual HRESULT __stdcall put_Lat (
        /*[in]*/ VARIANT pLat ) = 0;
      virtual HRESULT __stdcall get_Lon (
        /*[out,retval]*/ VARIANT * pLon ) = 0;
      virtual HRESULT __stdcall put_Lon (
        /*[in]*/ VARIANT pLon ) = 0;
};

struct __declspec(uuid("192d52f3-9343-4d91-bc99-e55196ddf532"))
AgLtPointCollection;
    // [ default ] interface IUnknown
    // interface IAgLtPointCollection

struct __declspec(uuid("46a41db5-e117-4b9f-9ab3-f5263fea9155"))
IAgLtPointCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgLtPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAnchorPoint,put=PutAnchorPoint))
    long AnchorPoint;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IAgLtPointPtr GetItem (
        long Index );
    IAgLtPointPtr Add (
        const _variant_t & Lat,
        const _variant_t & Lon );
    HRESULT Remove (
        long ItemIndex );
    HRESULT RemoveAll ( );
    long GetAnchorPoint ( );
    void PutAnchorPoint (
        long pAnchorPt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgLtPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon,
        /*[out,retval]*/ struct IAgLtPoint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long ItemIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_AnchorPoint (
        /*[out,retval]*/ long * pAnchorPt ) = 0;
      virtual HRESULT __stdcall put_AnchorPoint (
        /*[in]*/ long pAnchorPt ) = 0;
};

struct __declspec(uuid("fa35ba75-b23f-4abd-a482-542f09251522"))
AgLineTarget;
    // [ default ] interface _IAgLineTarget
    // interface IAgLineTarget
    // interface IAgStkObject
    // interface IAgLifetimeInformation
    // interface IAgDisplayTm

struct __declspec(uuid("bb00f3a3-20e5-4d7e-aaa2-564cd820143a"))
IAgLtGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetBoundingRectVisible,put=PutBoundingRectVisible))
    VARIANT_BOOL BoundingRectVisible;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetLinePtsVisible,put=PutLinePtsVisible))
    VARIANT_BOOL LinePtsVisible;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    VARIANT_BOOL GetBoundingRectVisible ( );
    void PutBoundingRectVisible (
        VARIANT_BOOL pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    VARIANT_BOOL GetLinePtsVisible ( );
    void PutLinePtsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BoundingRectVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BoundingRectVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LinePtsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LinePtsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("7275941e-fcc3-4005-a5bd-e15447930ca6"))
IAgLtVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableLabelMaxViewingDist,put=PutEnableLabelMaxViewingDist))
    VARIANT_BOOL EnableLabelMaxViewingDist;
    __declspec(property(get=GetLabelMaxViewingDist,put=PutLabelMaxViewingDist))
    double LabelMaxViewingDist;
    __declspec(property(get=GetBorderWall))
    IAgVOBorderWallPtr BorderWall;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableLabelMaxViewingDist ( );
    void PutEnableLabelMaxViewingDist (
        VARIANT_BOOL pUse );
    double GetLabelMaxViewingDist ( );
    void PutLabelMaxViewingDist (
        double pLabelMaxViewingDist );
    IAgVOBorderWallPtr GetBorderWall ( );
    IAgVOVectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableLabelMaxViewingDist (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_EnableLabelMaxViewingDist (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_LabelMaxViewingDist (
        /*[out,retval]*/ double * pLabelMaxViewingDist ) = 0;
      virtual HRESULT __stdcall put_LabelMaxViewingDist (
        /*[in]*/ double pLabelMaxViewingDist ) = 0;
      virtual HRESULT __stdcall get_BorderWall (
        /*[out,retval]*/ struct IAgVOBorderWall * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVector ) = 0;
};

struct __declspec(uuid("d4f5bae3-01c5-4288-9c61-b1f3328edf08"))
IAgLineTarget : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPoints))
    IAgLtPointCollectionPtr Points;
    __declspec(property(get=GetGraphics))
    IAgLtGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgLtVOPtr VO;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetAllowObjectAccess,put=PutAllowObjectAccess))
    VARIANT_BOOL AllowObjectAccess;

    //
    // Wrapper methods for error-handling
    //

    IAgLtPointCollectionPtr GetPoints ( );
    IAgLtGraphicsPtr GetGraphics ( );
    IAgLtVOPtr GetVO ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    VARIANT_BOOL GetAllowObjectAccess ( );
    void PutAllowObjectAccess (
        VARIANT_BOOL pAllowAccess );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct IAgLtPointCollection * * ppIAgLtPointCollection ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgLtGraphics * * ppIAgLtGraphics ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgLtVO * * ppIAgVO ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppIAgAccessConstraintCollection ) = 0;
      virtual HRESULT __stdcall get_AllowObjectAccess (
        /*[out,retval]*/ VARIANT_BOOL * pAllowAccess ) = 0;
      virtual HRESULT __stdcall put_AllowObjectAccess (
        /*[in]*/ VARIANT_BOOL pAllowAccess ) = 0;
};

struct __declspec(uuid("ff9646f7-ab57-41a4-bdd6-5eb17be2485a"))
AgLtGraphics;
    // [ default ] interface _IAgLtGraphics
    // interface IAgLtGraphics

struct __declspec(uuid("8883477e-573d-4f20-b87b-50506071cb5a"))
_IAgLtGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLabelName,put=PutLabelName))
    _bstr_t LabelName;
    __declspec(property(get=GetBoundingRectVisible,put=PutBoundingRectVisible))
    VARIANT_BOOL BoundingRectVisible;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetLinePtsVisible,put=PutLinePtsVisible))
    VARIANT_BOOL LinePtsVisible;
    __declspec(property(get=GetUseInstNameLabel,put=PutUseInstNameLabel))
    VARIANT_BOOL UseInstNameLabel;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;
    __declspec(property(get=GetLabelColor,put=PutLabelColor))
    OLE_COLOR LabelColor;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetInherit,put=PutInherit))
    VARIANT_BOOL Inherit;
    __declspec(property(get=GetLabelNotes))
    IAgLabelNoteCollectionPtr LabelNotes;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLabelName ( );
    void PutLabelName (
        _bstr_t pVal );
    VARIANT_BOOL GetBoundingRectVisible ( );
    void PutBoundingRectVisible (
        VARIANT_BOOL pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    VARIANT_BOOL GetLinePtsVisible ( );
    void PutLinePtsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseInstNameLabel ( );
    void PutUseInstNameLabel (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetLabelColor ( );
    void PutLabelColor (
        OLE_COLOR pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetInherit ( );
    void PutInherit (
        VARIANT_BOOL pVal );
    IAgLabelNoteCollectionPtr GetLabelNotes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LabelName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BoundingRectVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BoundingRectVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LinePtsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LinePtsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseInstNameLabel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseInstNameLabel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Inherit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Inherit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LabelNotes (
        /*[out,retval]*/ struct IAgLabelNoteCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("4d77ef44-1b68-464f-b817-4bf26de8809c"))
AgLtVO;
    // [ default ] interface _IAgLtVO
    // interface IAgLtVO

struct __declspec(uuid("b401d386-09fd-4f80-a2ef-16f66c93a85c"))
_IAgLtVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableLabelMaxViewingDist,put=PutEnableLabelMaxViewingDist))
    VARIANT_BOOL EnableLabelMaxViewingDist;
    __declspec(property(get=GetLabelMaxViewingDist,put=PutLabelMaxViewingDist))
    double LabelMaxViewingDist;
    __declspec(property(get=GetBorderWall))
    IAgVOBorderWallPtr BorderWall;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableLabelMaxViewingDist ( );
    void PutEnableLabelMaxViewingDist (
        VARIANT_BOOL pUse );
    double GetLabelMaxViewingDist ( );
    void PutLabelMaxViewingDist (
        double pLabelMaxViewingDist );
    IAgVOBorderWallPtr GetBorderWall ( );
    IAgVOVectorPtr GetVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableLabelMaxViewingDist (
        /*[out,retval]*/ VARIANT_BOOL * pUse ) = 0;
      virtual HRESULT __stdcall put_EnableLabelMaxViewingDist (
        /*[in]*/ VARIANT_BOOL pUse ) = 0;
      virtual HRESULT __stdcall get_LabelMaxViewingDist (
        /*[out,retval]*/ double * pLabelMaxViewingDist ) = 0;
      virtual HRESULT __stdcall put_LabelMaxViewingDist (
        /*[in]*/ double pLabelMaxViewingDist ) = 0;
      virtual HRESULT __stdcall get_BorderWall (
        /*[out,retval]*/ struct IAgVOBorderWall * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVector ) = 0;
};

struct __declspec(uuid("b04c3011-8f08-4a74-aea0-ebe4c24899c9"))
AgCoverageDefinition;
    // [ default ] interface _IAgCoverageDefinition
    // interface IAgCoverageDefinition
    // interface IAgStkObject
    // interface IAgLifetimeInformation

enum AgECvBounds
{
    eBoundsCustomRegions = 0,
    eBoundsGlobal = 1,
    eBoundsLat = 2,
    eBoundsLatLine = 3,
    eBoundsLonLine = 4,
    eBoundsCustomBoundary = 5
};

struct __declspec(uuid("bbc0169f-0249-4a4c-9c88-7f1a34e926a0"))
IAgCvBounds : IUnknown
{};

enum AgECvResolution
{
    eResolutionArea = 0,
    eResolutionDistance = 1,
    eResolutionLatLon = 2
};

struct __declspec(uuid("5272fabe-a397-4c64-84ed-2041f2dde9b6"))
IAgCvResolution : IUnknown
{};

struct __declspec(uuid("b0547d0b-5a35-46ff-b4dc-637958e54800"))
IAgCvGrid : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBoundsType,put=PutBoundsType))
    enum AgECvBounds BoundsType;
    __declspec(property(get=GetBounds))
    IAgCvBoundsPtr Bounds;
    __declspec(property(get=GetResolutionType,put=PutResolutionType))
    enum AgECvResolution ResolutionType;
    __declspec(property(get=GetResolution))
    IAgCvResolutionPtr Resolution;

    //
    // Wrapper methods for error-handling
    //

    enum AgECvBounds GetBoundsType ( );
    void PutBoundsType (
        enum AgECvBounds pVal );
    IAgCvBoundsPtr GetBounds ( );
    enum AgECvResolution GetResolutionType ( );
    void PutResolutionType (
        enum AgECvResolution pVal );
    IAgCvResolutionPtr GetResolution ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BoundsType (
        /*[out,retval]*/ enum AgECvBounds * pVal ) = 0;
      virtual HRESULT __stdcall put_BoundsType (
        /*[in]*/ enum AgECvBounds pVal ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ struct IAgCvBounds * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ResolutionType (
        /*[out,retval]*/ enum AgECvResolution * pVal ) = 0;
      virtual HRESULT __stdcall put_ResolutionType (
        /*[in]*/ enum AgECvResolution pVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgCvResolution * * ppRetVal ) = 0;
};

enum AgECvPointLocMethod
{
    ePointLocMethodUnknown = -1,
    eComputeBasedOnResolution = 0,
    eSpecifyCustomLocations = 1
};

struct __declspec(uuid("0ea41f51-4ba0-434a-a367-0d718aa2495d"))
IAgCvPointFileListCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT Add (
        _bstr_t Filename );
    HRESULT Remove (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pFileName ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Filename ) = 0;
};

enum AgECvGridClass
{
    eGridClassUnknown = -1,
    eGridClassAircraft = 0,
    eGridClassFacility = 1,
    eGridClassRadar = 2,
    eGridClassReceiver = 3,
    eGridClassSatellite = 4,
    eGridClassSubmarine = 5,
    eGridClassTarget = 6,
    eGridClassTransmitter = 7,
    eGridClassGroundVehicle = 8,
    eGridClassShip = 9
};

enum AgECvAltitudeMethod
{
    eAltitudeMethodUnknown = -1,
    eAltAboveTerrain = 0,
    eAltitude = 1,
    eRadius = 2,
    eAltitudeAboveMSL = 3,
    eAltitudeDepth = 4
};

enum AgECvGroundAltitudeMethod
{
    eCvGroundAltitudeMethodUnknown = -1,
    eCvGroundAltitudeMethodDepth = 0,
    eCvGroundAltitudeMethodAltitude = 1,
    eCvGroundAltitudeMethodAltAtTerrain = 2,
    eCvGroundAltitudeMethodAltAboveMSL = 3,
    eCvGroundAltitudeMethodUsePointAlt = 4
};

struct __declspec(uuid("1e183dc2-ae65-4496-ab1e-812fad599129"))
IAgCvPointDefinition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointLocationMethod,put=PutPointLocationMethod))
    enum AgECvPointLocMethod PointLocationMethod;
    __declspec(property(get=GetPointFileList))
    IAgCvPointFileListCollectionPtr PointFileList;
    __declspec(property(get=GetGridClass,put=PutGridClass))
    enum AgECvGridClass GridClass;
    __declspec(property(get=GetUseGridSeed,put=PutUseGridSeed))
    VARIANT_BOOL UseGridSeed;
    __declspec(property(get=GetUseObjectAsSeed,put=PutUseObjectAsSeed))
    VARIANT_BOOL UseObjectAsSeed;
    __declspec(property(get=GetAltitudeMethod,put=PutAltitudeMethod))
    enum AgECvAltitudeMethod AltitudeMethod;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetSeedInstance,put=PutSeedInstance))
    _bstr_t SeedInstance;
    __declspec(property(get=GetAvailableSeeds))
    SAFEARRAY * AvailableSeeds;
    __declspec(property(get=GetGroundAltitudeMethod,put=PutGroundAltitudeMethod))
    enum AgECvGroundAltitudeMethod GroundAltitudeMethod;
    __declspec(property(get=GetGroundAltitude,put=PutGroundAltitude))
    double GroundAltitude;

    //
    // Wrapper methods for error-handling
    //

    enum AgECvPointLocMethod GetPointLocationMethod ( );
    void PutPointLocationMethod (
        enum AgECvPointLocMethod pVal );
    IAgCvPointFileListCollectionPtr GetPointFileList ( );
    enum AgECvGridClass GetGridClass ( );
    void PutGridClass (
        enum AgECvGridClass pVal );
    VARIANT_BOOL GetUseGridSeed ( );
    void PutUseGridSeed (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseObjectAsSeed ( );
    void PutUseObjectAsSeed (
        VARIANT_BOOL pVal );
    enum AgECvAltitudeMethod GetAltitudeMethod ( );
    void PutAltitudeMethod (
        enum AgECvAltitudeMethod pVal );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );
    _bstr_t GetSeedInstance ( );
    void PutSeedInstance (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableSeeds ( );
    HRESULT SetPointsLLA (
        SAFEARRAY * * LLAPoints );
    enum AgECvGroundAltitudeMethod GetGroundAltitudeMethod ( );
    void PutGroundAltitudeMethod (
        enum AgECvGroundAltitudeMethod pVal );
    double GetGroundAltitude ( );
    void PutGroundAltitude (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointLocationMethod (
        /*[out,retval]*/ enum AgECvPointLocMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_PointLocationMethod (
        /*[in]*/ enum AgECvPointLocMethod pVal ) = 0;
      virtual HRESULT __stdcall get_PointFileList (
        /*[out,retval]*/ struct IAgCvPointFileListCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GridClass (
        /*[out,retval]*/ enum AgECvGridClass * pVal ) = 0;
      virtual HRESULT __stdcall put_GridClass (
        /*[in]*/ enum AgECvGridClass pVal ) = 0;
      virtual HRESULT __stdcall get_UseGridSeed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseGridSeed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseObjectAsSeed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseObjectAsSeed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeMethod (
        /*[out,retval]*/ enum AgECvAltitudeMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeMethod (
        /*[in]*/ enum AgECvAltitudeMethod pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SeedInstance (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SeedInstance (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableSeeds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPointsLLA (
        /*[in]*/ SAFEARRAY * * LLAPoints ) = 0;
      virtual HRESULT __stdcall get_GroundAltitudeMethod (
        /*[out,retval]*/ enum AgECvGroundAltitudeMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_GroundAltitudeMethod (
        /*[in]*/ enum AgECvGroundAltitudeMethod pVal ) = 0;
      virtual HRESULT __stdcall get_GroundAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GroundAltitude (
        /*[in]*/ double pRetVal ) = 0;
};

enum AgECvDataRetention
{
    eDataRetentionUnknown = -1,
    eAllData = 0,
    eStaticDataOnly = 1
};

enum AgEDataSaveMode
{
    eDataSaveModeUnknown = -1,
    eDontSaveAccesses = 0,
    eDontSaveComputeOnLoad = 1,
    eSaveAccesses = 2
};

enum AgECvRegionAccessAccel
{
    eRegionAccessUnknown = -1,
    eRegionAccessAutomatic = 0,
    eRegionAccessOff = 1
};

enum AgECvSatisfactionType
{
    eCvSatisfactionTypeUnknown = -1,
    eCvAtLeast = 0,
    eCvEqualTo = 1
};

struct __declspec(uuid("dc75a606-a3d8-4439-aa69-42bbd4615faf"))
IAgCvAdvanced : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDataRetention,put=PutDataRetention))
    enum AgECvDataRetention DataRetention;
    __declspec(property(get=GetAutoRecompute,put=PutAutoRecompute))
    VARIANT_BOOL AutoRecompute;
    __declspec(property(get=GetSaveMode,put=PutSaveMode))
    enum AgEDataSaveMode SaveMode;
    __declspec(property(get=GetRegionAccessAcceleration,put=PutRegionAccessAcceleration))
    enum AgECvRegionAccessAccel RegionAccessAcceleration;
    __declspec(property(get=GetTimeConvergence,put=PutTimeConvergence))
    double TimeConvergence;
    __declspec(property(get=GetEnableLightTimeDelay,put=PutEnableLightTimeDelay))
    VARIANT_BOOL EnableLightTimeDelay;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetEventDetection))
    IAgAccessEventDetectionPtr EventDetection;
    __declspec(property(get=GetSampling))
    IAgAccessSamplingPtr Sampling;
    __declspec(property(get=GetNAssetsSatisfactionThreshold,put=PutNAssetsSatisfactionThreshold))
    long NAssetsSatisfactionThreshold;
    __declspec(property(get=GetNAssetsSatisfactionType,put=PutNAssetsSatisfactionType))
    enum AgECvSatisfactionType NAssetsSatisfactionType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECvDataRetention GetDataRetention ( );
    void PutDataRetention (
        enum AgECvDataRetention pVal );
    VARIANT_BOOL GetAutoRecompute ( );
    void PutAutoRecompute (
        VARIANT_BOOL pVal );
    enum AgEDataSaveMode GetSaveMode ( );
    void PutSaveMode (
        enum AgEDataSaveMode pVal );
    enum AgECvRegionAccessAccel GetRegionAccessAcceleration ( );
    void PutRegionAccessAcceleration (
        enum AgECvRegionAccessAccel pVal );
    double GetTimeConvergence ( );
    void PutTimeConvergence (
        double pVal );
    VARIANT_BOOL GetEnableLightTimeDelay ( );
    void PutEnableLightTimeDelay (
        VARIANT_BOOL pVal );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    IAgAccessEventDetectionPtr GetEventDetection ( );
    IAgAccessSamplingPtr GetSampling ( );
    long GetNAssetsSatisfactionThreshold ( );
    void PutNAssetsSatisfactionThreshold (
        long pVal );
    enum AgECvSatisfactionType GetNAssetsSatisfactionType ( );
    void PutNAssetsSatisfactionType (
        enum AgECvSatisfactionType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataRetention (
        /*[out,retval]*/ enum AgECvDataRetention * pVal ) = 0;
      virtual HRESULT __stdcall put_DataRetention (
        /*[in]*/ enum AgECvDataRetention pVal ) = 0;
      virtual HRESULT __stdcall get_AutoRecompute (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRecompute (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SaveMode (
        /*[out,retval]*/ enum AgEDataSaveMode * pVal ) = 0;
      virtual HRESULT __stdcall put_SaveMode (
        /*[in]*/ enum AgEDataSaveMode pVal ) = 0;
      virtual HRESULT __stdcall get_RegionAccessAcceleration (
        /*[out,retval]*/ enum AgECvRegionAccessAccel * pVal ) = 0;
      virtual HRESULT __stdcall put_RegionAccessAcceleration (
        /*[in]*/ enum AgECvRegionAccessAccel pVal ) = 0;
      virtual HRESULT __stdcall get_TimeConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EnableLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EventDetection (
        /*[out,retval]*/ struct IAgAccessEventDetection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgAccessSampling * * ppVal ) = 0;
      virtual HRESULT __stdcall get_NAssetsSatisfactionThreshold (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NAssetsSatisfactionThreshold (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NAssetsSatisfactionType (
        /*[out,retval]*/ enum AgECvSatisfactionType * pVal ) = 0;
      virtual HRESULT __stdcall put_NAssetsSatisfactionType (
        /*[in]*/ enum AgECvSatisfactionType pVal ) = 0;
};

struct __declspec(uuid("ec52a477-585b-40d5-a3e0-f65bae8cffb3"))
IAgCvInterval : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseScenarioInterval,put=PutUseScenarioInterval))
    VARIANT_BOOL UseScenarioInterval;
    __declspec(property(get=GetStart,put=PutStart))
    _variant_t Start;
    __declspec(property(get=GetStop,put=PutStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseScenarioInterval ( );
    void PutUseScenarioInterval (
        VARIANT_BOOL pVal );
    _variant_t GetStart ( );
    void PutStart (
        const _variant_t & pVal );
    _variant_t GetStop ( );
    void PutStop (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseScenarioInterval (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioInterval (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Stop (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("990a71cf-5b4b-400e-bf0b-f54d6392b8ae"))
IAgCvGfxStatic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsRegionVisible,put=PutIsRegionVisible))
    VARIANT_BOOL IsRegionVisible;
    __declspec(property(get=GetIsPointsVisible,put=PutIsPointsVisible))
    VARIANT_BOOL IsPointsVisible;
    __declspec(property(get=GetIsLabelsVisible,put=PutIsLabelsVisible))
    VARIANT_BOOL IsLabelsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetFillPoints,put=PutFillPoints))
    VARIANT_BOOL FillPoints;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsRegionVisible ( );
    void PutIsRegionVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPointsVisible ( );
    void PutIsPointsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsLabelsVisible ( );
    void PutIsLabelsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetFillPoints ( );
    void PutFillPoints (
        VARIANT_BOOL pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsRegionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsRegionVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPointsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FillPoints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillPoints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f09016a7-0bcc-4a58-ac5a-fc7315a5b070"))
IAgCvGfxAnimation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsSatisfactionVisible,put=PutIsSatisfactionVisible))
    VARIANT_BOOL IsSatisfactionVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsSatisfactionVisible ( );
    void PutIsSatisfactionVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsSatisfactionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSatisfactionVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("2d513808-d69b-4285-b197-ca504395ff3d"))
IAgCvGfxProgress : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("c410b828-6c0c-4a60-93f3-721a6b689655"))
IAgCvGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgCvGfxStaticPtr Static;
    __declspec(property(get=GetAnimation))
    IAgCvGfxAnimationPtr Animation;
    __declspec(property(get=GetProgress))
    IAgCvGfxProgressPtr Progress;

    //
    // Wrapper methods for error-handling
    //

    IAgCvGfxStaticPtr GetStatic ( );
    IAgCvGfxAnimationPtr GetAnimation ( );
    IAgCvGfxProgressPtr GetProgress ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgCvGfxStatic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgCvGfxAnimation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Progress (
        /*[out,retval]*/ struct IAgCvGfxProgress * * ppVal ) = 0;
};

struct __declspec(uuid("ebae1a74-67e0-4a38-a7c2-e5e92404e808"))
IAgCvVOAttributes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    double PointSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );
    double GetPointSize ( );
    void PutPointSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("acc567c7-d832-451b-b066-75227881f5a9"))
IAgCvVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgCvVOAttributesPtr Static;
    __declspec(property(get=GetAnimation))
    IAgCvVOAttributesPtr Animation;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;

    //
    // Wrapper methods for error-handling
    //

    IAgCvVOAttributesPtr GetStatic ( );
    IAgCvVOAttributesPtr GetAnimation ( );
    double GetGranularity ( );
    void PutGranularity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgCvVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgCvVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("8c454bbc-a6c6-4804-9001-d5696cb4eb7d"))
IAgCvGridPointSelection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    SAFEARRAY * ToArray ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ToArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("5d256dcc-b473-4b54-93b9-88b32d0513d6"))
IAgCvGridInspector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointCoverage))
    IAgDataProviderInfoPtr PointCoverage;
    __declspec(property(get=GetPointDailyCoverage))
    IAgDataProviderInfoPtr PointDailyCoverage;
    __declspec(property(get=GetPointProbOfCoverage))
    IAgDataProviderInfoPtr PointProbOfCoverage;
    __declspec(property(get=GetRegionCoverage))
    IAgDataProviderInfoPtr RegionCoverage;
    __declspec(property(get=GetRegionFullCoverage))
    IAgDataProviderInfoPtr RegionFullCoverage;
    __declspec(property(get=GetRegionPassCoverage))
    IAgDataProviderInfoPtr RegionPassCoverage;
    __declspec(property(get=GetMessage))
    _bstr_t Message;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectPoint (
        const _variant_t & Lat,
        const _variant_t & Lon );
    HRESULT SelectRegion (
        _bstr_t RegionName );
    IAgDataProviderInfoPtr GetPointCoverage ( );
    IAgDataProviderInfoPtr GetPointDailyCoverage ( );
    IAgDataProviderInfoPtr GetPointProbOfCoverage ( );
    IAgDataProviderInfoPtr GetRegionCoverage ( );
    IAgDataProviderInfoPtr GetRegionFullCoverage ( );
    IAgDataProviderInfoPtr GetRegionPassCoverage ( );
    HRESULT ClearSelection ( );
    _bstr_t GetMessage ( );
    IAgCvGridPointSelectionPtr GetGridPointSelection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SelectPoint (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_SelectRegion (
        /*[in]*/ BSTR RegionName ) = 0;
      virtual HRESULT __stdcall get_PointCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointDailyCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointProbOfCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RegionCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RegionFullCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RegionPassCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearSelection ( ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetGridPointSelection (
        /*[out,retval]*/ struct IAgCvGridPointSelection * * ppRetVal ) = 0;
};

struct __declspec(uuid("2bf45fd6-a6d5-4cbf-aa0c-5c35e96673b2"))
AgCvBoundsCustomRegions;
    // [ default ] interface _IAgCvBoundsCustomRegions
    // interface IAgCvBounds
    // interface IAgCvBoundsCustomRegions

struct __declspec(uuid("e5d3ea59-01af-4f33-9503-b8fd0e8ab5ff"))
IAgCvRegionFilesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT Add (
        _bstr_t Filename );
    HRESULT Remove (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pFileName ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("2351e374-877b-489f-9fdc-009a29302c23"))
IAgCvAreaTargetsCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAvailableAreaTargets))
    SAFEARRAY * AvailableAreaTargets;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT Add (
        _bstr_t TargetName );
    HRESULT Remove (
        _bstr_t TargetName );
    SAFEARRAY * GetAvailableAreaTargets ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR TargetName ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR TargetName ) = 0;
      virtual HRESULT __stdcall get_AvailableAreaTargets (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

enum AgECvCustomRegionAlgorithm
{
    eCvCustomRegionAlgorithmUnknown = -1,
    eCvCustomRegionAlgorithmDisabled = 0,
    eCvCustomRegionAlgorithmAnisotropic = 1,
    eCvCustomRegionAlgorithmIsotropic = 2
};

struct __declspec(uuid("21c05dd1-f8a1-459c-a17a-ecbb50ec33d6"))
_IAgCvBoundsCustomRegions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRegionFiles))
    IAgCvRegionFilesCollectionPtr RegionFiles;
    __declspec(property(get=GetAreaTargets))
    IAgCvAreaTargetsCollectionPtr AreaTargets;
    __declspec(property(get=GetCheckForHoles,put=PutCheckForHoles))
    VARIANT_BOOL CheckForHoles;
    __declspec(property(get=GetSmallRegionAlgorithm,put=PutSmallRegionAlgorithm))
    enum AgECvCustomRegionAlgorithm SmallRegionAlgorithm;

    //
    // Wrapper methods for error-handling
    //

    IAgCvRegionFilesCollectionPtr GetRegionFiles ( );
    IAgCvAreaTargetsCollectionPtr GetAreaTargets ( );
    VARIANT_BOOL GetCheckForHoles ( );
    void PutCheckForHoles (
        VARIANT_BOOL pRetVal );
    enum AgECvCustomRegionAlgorithm GetSmallRegionAlgorithm ( );
    void PutSmallRegionAlgorithm (
        enum AgECvCustomRegionAlgorithm pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RegionFiles (
        /*[out,retval]*/ struct IAgCvRegionFilesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AreaTargets (
        /*[out,retval]*/ struct IAgCvAreaTargetsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CheckForHoles (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CheckForHoles (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SmallRegionAlgorithm (
        /*[out,retval]*/ enum AgECvCustomRegionAlgorithm * pVal ) = 0;
      virtual HRESULT __stdcall put_SmallRegionAlgorithm (
        /*[in]*/ enum AgECvCustomRegionAlgorithm pVal ) = 0;
};

struct __declspec(uuid("1e050e10-b37e-4256-89a0-3766044ddd9f"))
IAgCvBoundsCustomRegions : IAgCvBounds
{
    //
    // Property data
    //

    __declspec(property(get=GetRegionFiles))
    IAgCvRegionFilesCollectionPtr RegionFiles;
    __declspec(property(get=GetAreaTargets))
    IAgCvAreaTargetsCollectionPtr AreaTargets;
    __declspec(property(get=GetCheckForHoles,put=PutCheckForHoles))
    VARIANT_BOOL CheckForHoles;
    __declspec(property(get=GetSmallRegionAlgorithm,put=PutSmallRegionAlgorithm))
    enum AgECvCustomRegionAlgorithm SmallRegionAlgorithm;

    //
    // Wrapper methods for error-handling
    //

    IAgCvRegionFilesCollectionPtr GetRegionFiles ( );
    IAgCvAreaTargetsCollectionPtr GetAreaTargets ( );
    VARIANT_BOOL GetCheckForHoles ( );
    void PutCheckForHoles (
        VARIANT_BOOL pRetVal );
    enum AgECvCustomRegionAlgorithm GetSmallRegionAlgorithm ( );
    void PutSmallRegionAlgorithm (
        enum AgECvCustomRegionAlgorithm pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RegionFiles (
        /*[out,retval]*/ struct IAgCvRegionFilesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AreaTargets (
        /*[out,retval]*/ struct IAgCvAreaTargetsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CheckForHoles (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CheckForHoles (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SmallRegionAlgorithm (
        /*[out,retval]*/ enum AgECvCustomRegionAlgorithm * pVal ) = 0;
      virtual HRESULT __stdcall put_SmallRegionAlgorithm (
        /*[in]*/ enum AgECvCustomRegionAlgorithm pVal ) = 0;
};

struct __declspec(uuid("14303edb-7c08-4bf7-9ed2-8be4bbfefdc6"))
AgCvBoundsCustomBoundary;
    // [ default ] interface _IAgCvBoundsCustomBoundary
    // interface IAgCvBounds
    // interface IAgCvBoundsCustomBoundary

struct __declspec(uuid("b4974895-ad10-4828-915a-25cc47e9f0a4"))
AgCvBoundsGlobal;
    // [ default ] interface _IAgCvBoundsGlobal
    // interface IAgCvBounds
    // interface IAgCvBoundsGlobal

struct __declspec(uuid("419b697c-b699-433c-9c48-dcc099daee06"))
_IAgCvBoundsGlobal : IDispatch
{};

struct __declspec(uuid("6bf266b2-794d-4b38-9165-110d9fbb90a8"))
IAgCvBoundsGlobal : IAgCvBounds
{};

struct __declspec(uuid("8dbc9a99-ef99-4029-9189-d26d59e79ad3"))
AgCvBoundsLat;
    // [ default ] interface _IAgCvBoundsLat
    // interface IAgCvBounds
    // interface IAgCvBoundsLat

struct __declspec(uuid("28d35dae-f2af-4e91-acc9-3986dd0b8351"))
_IAgCvBoundsLat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinLatitude,put=PutMinLatitude))
    _variant_t MinLatitude;
    __declspec(property(get=GetMaxLatitude,put=PutMaxLatitude))
    _variant_t MaxLatitude;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinLatitude ( );
    void PutMinLatitude (
        const _variant_t & pVal );
    _variant_t GetMaxLatitude ( );
    void PutMaxLatitude (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLatitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxLatitude (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("f0453000-8fe5-4928-8ac3-870189dd46c8"))
IAgCvBoundsLat : IAgCvBounds
{
    //
    // Property data
    //

    __declspec(property(get=GetMinLatitude,put=PutMinLatitude))
    _variant_t MinLatitude;
    __declspec(property(get=GetMaxLatitude,put=PutMaxLatitude))
    _variant_t MaxLatitude;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinLatitude ( );
    void PutMinLatitude (
        const _variant_t & pVal );
    _variant_t GetMaxLatitude ( );
    void PutMaxLatitude (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLatitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxLatitude (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("1a3744d8-8ffc-4026-9af1-cc81bf00d756"))
AgCvBoundsLatLine;
    // [ default ] interface _IAgCvBoundsLatLine
    // interface IAgCvBounds
    // interface IAgCvBoundsLatLine

struct __declspec(uuid("ac49c928-81bc-4fc4-8c20-ed05cd754974"))
_IAgCvBoundsLatLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartLongitude,put=PutStartLongitude))
    _variant_t StartLongitude;
    __declspec(property(get=GetStopLongitude,put=PutStopLongitude))
    _variant_t StopLongitude;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    _variant_t Latitude;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartLongitude ( );
    void PutStartLongitude (
        const _variant_t & pVal );
    _variant_t GetStopLongitude ( );
    void PutStopLongitude (
        const _variant_t & pVal );
    _variant_t GetLatitude ( );
    void PutLatitude (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartLongitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartLongitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopLongitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopLongitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("ac13708e-568d-4ed0-a558-3a7833907a49"))
IAgCvBoundsLatLine : IAgCvBounds
{
    //
    // Property data
    //

    __declspec(property(get=GetStartLongitude,put=PutStartLongitude))
    _variant_t StartLongitude;
    __declspec(property(get=GetStopLongitude,put=PutStopLongitude))
    _variant_t StopLongitude;
    __declspec(property(get=GetLatitude,put=PutLatitude))
    _variant_t Latitude;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartLongitude ( );
    void PutStartLongitude (
        const _variant_t & pVal );
    _variant_t GetStopLongitude ( );
    void PutStopLongitude (
        const _variant_t & pVal );
    _variant_t GetLatitude ( );
    void PutLatitude (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartLongitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartLongitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopLongitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopLongitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Latitude (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("ca0206ef-8667-47af-82bd-aeb899b79ffc"))
AgCvBoundsLonLine;
    // [ default ] interface _IAgCvBoundsLonLine
    // interface IAgCvBounds
    // interface IAgCvBoundsLonLine

struct __declspec(uuid("3f5dac31-1cb8-490d-b3b7-bf9da36528e0"))
_IAgCvBoundsLonLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinLatitude,put=PutMinLatitude))
    _variant_t MinLatitude;
    __declspec(property(get=GetMaxLatitude,put=PutMaxLatitude))
    _variant_t MaxLatitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    _variant_t Longitude;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinLatitude ( );
    void PutMinLatitude (
        const _variant_t & pVal );
    _variant_t GetMaxLatitude ( );
    void PutMaxLatitude (
        const _variant_t & pVal );
    _variant_t GetLongitude ( );
    void PutLongitude (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLatitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxLatitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("4c5f1218-6e1e-4c45-ae4c-68cf077a98b0"))
IAgCvBoundsLonLine : IAgCvBounds
{
    //
    // Property data
    //

    __declspec(property(get=GetMinLatitude,put=PutMinLatitude))
    _variant_t MinLatitude;
    __declspec(property(get=GetMaxLatitude,put=PutMaxLatitude))
    _variant_t MaxLatitude;
    __declspec(property(get=GetLongitude,put=PutLongitude))
    _variant_t Longitude;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetMinLatitude ( );
    void PutMinLatitude (
        const _variant_t & pVal );
    _variant_t GetMaxLatitude ( );
    void PutMaxLatitude (
        const _variant_t & pVal );
    _variant_t GetLongitude ( );
    void PutLongitude (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLatitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxLatitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxLatitude (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Longitude (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("c0f05979-cc5f-4e67-b2e9-a77e5a014f61"))
AgCvGrid;
    // [ default ] interface _IAgCvGrid
    // interface IAgCvGrid

struct __declspec(uuid("5d9b2ced-8ff8-493c-8833-88fc0d071302"))
_IAgCvGrid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBoundsType,put=PutBoundsType))
    enum AgECvBounds BoundsType;
    __declspec(property(get=GetBounds))
    IAgCvBoundsPtr Bounds;
    __declspec(property(get=GetResolutionType,put=PutResolutionType))
    enum AgECvResolution ResolutionType;
    __declspec(property(get=GetResolution))
    IAgCvResolutionPtr Resolution;

    //
    // Wrapper methods for error-handling
    //

    enum AgECvBounds GetBoundsType ( );
    void PutBoundsType (
        enum AgECvBounds pRetVal );
    IAgCvBoundsPtr GetBounds ( );
    enum AgECvResolution GetResolutionType ( );
    void PutResolutionType (
        enum AgECvResolution pVal );
    IAgCvResolutionPtr GetResolution ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BoundsType (
        /*[out,retval]*/ enum AgECvBounds * pRetVal ) = 0;
      virtual HRESULT __stdcall put_BoundsType (
        /*[in]*/ enum AgECvBounds pRetVal ) = 0;
      virtual HRESULT __stdcall get_Bounds (
        /*[out,retval]*/ struct IAgCvBounds * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ResolutionType (
        /*[out,retval]*/ enum AgECvResolution * pVal ) = 0;
      virtual HRESULT __stdcall put_ResolutionType (
        /*[in]*/ enum AgECvResolution pVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ struct IAgCvResolution * * ppRetVal ) = 0;
};

struct __declspec(uuid("35ab93ee-21f4-41ed-9b28-957bdd08308b"))
AgCvAssetListElement;
    // [ default ] interface _IAgCvAssetListElement
    // interface IAgCvAssetListElement

struct __declspec(uuid("7c0cb741-e7c0-466b-9e54-b9e22f4465d8"))
AgCvAssetListCollection;
    // [ default ] interface IUnknown
    // interface IAgCvAssetListCollection

struct __declspec(uuid("8ef886e5-93a2-49f8-bd72-7123612ef6cb"))
AgCvRegionFilesCollection;
    // [ default ] interface IUnknown
    // interface IAgCvRegionFilesCollection

struct __declspec(uuid("d6a2febd-aaf3-4747-807b-523943729944"))
AgCvAreaTargetsCollection;
    // [ default ] interface IUnknown
    // interface IAgCvAreaTargetsCollection

struct __declspec(uuid("0dc4bbe9-8d0e-483a-a89f-65f78af6675d"))
AgCvPointDefinition;
    // [ default ] interface _IAgCvPointDefinition
    // interface IAgCvPointDefinition

struct __declspec(uuid("1d6f650a-8b57-4c61-b5c8-72cf1d764d3e"))
_IAgCvPointDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPointLocationMethod,put=PutPointLocationMethod))
    enum AgECvPointLocMethod PointLocationMethod;
    __declspec(property(get=GetGridClass,put=PutGridClass))
    enum AgECvGridClass GridClass;
    __declspec(property(get=GetUseGridSeed,put=PutUseGridSeed))
    VARIANT_BOOL UseGridSeed;
    __declspec(property(get=GetUseObjectAsSeed,put=PutUseObjectAsSeed))
    VARIANT_BOOL UseObjectAsSeed;
    __declspec(property(get=GetAltitudeMethod,put=PutAltitudeMethod))
    enum AgECvAltitudeMethod AltitudeMethod;
    __declspec(property(get=GetPointFileList))
    IAgCvPointFileListCollectionPtr PointFileList;
    __declspec(property(get=GetAltitude,put=PutAltitude))
    double Altitude;
    __declspec(property(get=GetSeedInstance,put=PutSeedInstance))
    _bstr_t SeedInstance;
    __declspec(property(get=GetAvailableSeeds))
    SAFEARRAY * AvailableSeeds;
    __declspec(property(get=GetGroundAltitudeMethod,put=PutGroundAltitudeMethod))
    enum AgECvGroundAltitudeMethod GroundAltitudeMethod;
    __declspec(property(get=GetGroundAltitude,put=PutGroundAltitude))
    double GroundAltitude;

    //
    // Wrapper methods for error-handling
    //

    enum AgECvPointLocMethod GetPointLocationMethod ( );
    void PutPointLocationMethod (
        enum AgECvPointLocMethod pRetVal );
    enum AgECvGridClass GetGridClass ( );
    void PutGridClass (
        enum AgECvGridClass pRetVal );
    VARIANT_BOOL GetUseGridSeed ( );
    void PutUseGridSeed (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseObjectAsSeed ( );
    void PutUseObjectAsSeed (
        VARIANT_BOOL pRetVal );
    enum AgECvAltitudeMethod GetAltitudeMethod ( );
    void PutAltitudeMethod (
        enum AgECvAltitudeMethod pRetVal );
    IAgCvPointFileListCollectionPtr GetPointFileList ( );
    double GetAltitude ( );
    void PutAltitude (
        double pRetVal );
    _bstr_t GetSeedInstance ( );
    void PutSeedInstance (
        _bstr_t pRetVal );
    SAFEARRAY * GetAvailableSeeds ( );
    HRESULT SetPointsLLA (
        SAFEARRAY * * LLAPoints );
    enum AgECvGroundAltitudeMethod GetGroundAltitudeMethod ( );
    void PutGroundAltitudeMethod (
        enum AgECvGroundAltitudeMethod pVal );
    double GetGroundAltitude ( );
    void PutGroundAltitude (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointLocationMethod (
        /*[out,retval]*/ enum AgECvPointLocMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_PointLocationMethod (
        /*[in]*/ enum AgECvPointLocMethod pRetVal ) = 0;
      virtual HRESULT __stdcall get_GridClass (
        /*[out,retval]*/ enum AgECvGridClass * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GridClass (
        /*[in]*/ enum AgECvGridClass pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseGridSeed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseGridSeed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseObjectAsSeed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseObjectAsSeed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AltitudeMethod (
        /*[out,retval]*/ enum AgECvAltitudeMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AltitudeMethod (
        /*[in]*/ enum AgECvAltitudeMethod pRetVal ) = 0;
      virtual HRESULT __stdcall get_PointFileList (
        /*[out,retval]*/ struct IAgCvPointFileListCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Altitude (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_SeedInstance (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SeedInstance (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableSeeds (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetPointsLLA (
        /*[in]*/ SAFEARRAY * * LLAPoints ) = 0;
      virtual HRESULT __stdcall get_GroundAltitudeMethod (
        /*[out,retval]*/ enum AgECvGroundAltitudeMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_GroundAltitudeMethod (
        /*[in]*/ enum AgECvGroundAltitudeMethod pVal ) = 0;
      virtual HRESULT __stdcall get_GroundAltitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_GroundAltitude (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("c06ca9b8-082e-4985-b27f-076db27f7d4f"))
AgCvPointFileListCollection;
    // [ default ] interface IUnknown
    // interface IAgCvPointFileListCollection

struct __declspec(uuid("f6f2e0e2-ba7b-4971-91f7-990d51f65a43"))
AgCvAdvanced;
    // [ default ] interface _IAgCvAdvanced
    // interface IAgCvAdvanced

struct __declspec(uuid("2927cd20-8840-45c8-a2ff-266b5c228d98"))
_IAgCvAdvanced : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDataRetention,put=PutDataRetention))
    enum AgECvDataRetention DataRetention;
    __declspec(property(get=GetAutoRecompute,put=PutAutoRecompute))
    VARIANT_BOOL AutoRecompute;
    __declspec(property(get=GetSaveMode,put=PutSaveMode))
    enum AgEDataSaveMode SaveMode;
    __declspec(property(get=GetRegionAccessAcceleration,put=PutRegionAccessAcceleration))
    enum AgECvRegionAccessAccel RegionAccessAcceleration;
    __declspec(property(get=GetTimeConvergence,put=PutTimeConvergence))
    double TimeConvergence;
    __declspec(property(get=GetEnableLightTimeDelay,put=PutEnableLightTimeDelay))
    VARIANT_BOOL EnableLightTimeDelay;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetEventDetection))
    IAgAccessEventDetectionPtr EventDetection;
    __declspec(property(get=GetSampling))
    IAgAccessSamplingPtr Sampling;
    __declspec(property(get=GetNAssetsSatisfactionThreshold,put=PutNAssetsSatisfactionThreshold))
    long NAssetsSatisfactionThreshold;
    __declspec(property(get=GetNAssetsSatisfactionType,put=PutNAssetsSatisfactionType))
    enum AgECvSatisfactionType NAssetsSatisfactionType;

    //
    // Wrapper methods for error-handling
    //

    enum AgECvDataRetention GetDataRetention ( );
    void PutDataRetention (
        enum AgECvDataRetention pVal );
    VARIANT_BOOL GetAutoRecompute ( );
    void PutAutoRecompute (
        VARIANT_BOOL pVal );
    enum AgEDataSaveMode GetSaveMode ( );
    void PutSaveMode (
        enum AgEDataSaveMode pVal );
    enum AgECvRegionAccessAccel GetRegionAccessAcceleration ( );
    void PutRegionAccessAcceleration (
        enum AgECvRegionAccessAccel pVal );
    double GetTimeConvergence ( );
    void PutTimeConvergence (
        double pVal );
    VARIANT_BOOL GetEnableLightTimeDelay ( );
    void PutEnableLightTimeDelay (
        VARIANT_BOOL pVal );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    IAgAccessEventDetectionPtr GetEventDetection ( );
    IAgAccessSamplingPtr GetSampling ( );
    long GetNAssetsSatisfactionThreshold ( );
    void PutNAssetsSatisfactionThreshold (
        long pVal );
    enum AgECvSatisfactionType GetNAssetsSatisfactionType ( );
    void PutNAssetsSatisfactionType (
        enum AgECvSatisfactionType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataRetention (
        /*[out,retval]*/ enum AgECvDataRetention * pVal ) = 0;
      virtual HRESULT __stdcall put_DataRetention (
        /*[in]*/ enum AgECvDataRetention pVal ) = 0;
      virtual HRESULT __stdcall get_AutoRecompute (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRecompute (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SaveMode (
        /*[out,retval]*/ enum AgEDataSaveMode * pVal ) = 0;
      virtual HRESULT __stdcall put_SaveMode (
        /*[in]*/ enum AgEDataSaveMode pVal ) = 0;
      virtual HRESULT __stdcall get_RegionAccessAcceleration (
        /*[out,retval]*/ enum AgECvRegionAccessAccel * pVal ) = 0;
      virtual HRESULT __stdcall put_RegionAccessAcceleration (
        /*[in]*/ enum AgECvRegionAccessAccel pVal ) = 0;
      virtual HRESULT __stdcall get_TimeConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EnableLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EventDetection (
        /*[out,retval]*/ struct IAgAccessEventDetection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgAccessSampling * * ppVal ) = 0;
      virtual HRESULT __stdcall get_NAssetsSatisfactionThreshold (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NAssetsSatisfactionThreshold (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NAssetsSatisfactionType (
        /*[out,retval]*/ enum AgECvSatisfactionType * pVal ) = 0;
      virtual HRESULT __stdcall put_NAssetsSatisfactionType (
        /*[in]*/ enum AgECvSatisfactionType pVal ) = 0;
};

struct __declspec(uuid("b9e9aa73-e230-44d1-8d5d-3634c468c3e3"))
AgCvInterval;
    // [ default ] interface _IAgCvInterval
    // interface IAgCvInterval

struct __declspec(uuid("837547fb-b543-41be-b46f-c11d39eef7e5"))
_IAgCvInterval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseScenarioInterval,put=PutUseScenarioInterval))
    VARIANT_BOOL UseScenarioInterval;
    __declspec(property(get=GetStart,put=PutStart))
    _variant_t Start;
    __declspec(property(get=GetStop,put=PutStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseScenarioInterval ( );
    void PutUseScenarioInterval (
        VARIANT_BOOL pRetVal );
    _variant_t GetStart ( );
    void PutStart (
        const _variant_t & pVal );
    _variant_t GetStop ( );
    void PutStop (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseScenarioInterval (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioInterval (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Stop (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("c3fc7663-55c1-4e3f-9502-e9bafe3085db"))
AgCvResolutionArea;
    // [ default ] interface _IAgCvResolutionArea
    // interface IAgCvResolution
    // interface IAgCvResolutionArea

struct __declspec(uuid("f663e8a3-c42e-4e3d-bb92-28e41461a3aa"))
_IAgCvResolutionArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetArea,put=PutArea))
    double Area;

    //
    // Wrapper methods for error-handling
    //

    double GetArea ( );
    void PutArea (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Area (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e7f6f309-5fcb-4513-ab98-b3a571e5bcdc"))
IAgCvResolutionArea : IAgCvResolution
{
    //
    // Property data
    //

    __declspec(property(get=GetArea,put=PutArea))
    double Area;

    //
    // Wrapper methods for error-handling
    //

    double GetArea ( );
    void PutArea (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Area (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("52146925-b2ba-4f30-b2c6-0c6a0efd9d88"))
AgCvResolutionDistance;
    // [ default ] interface _IAgCvResolutionDistance
    // interface IAgCvResolution
    // interface IAgCvResolutionDistance

struct __declspec(uuid("0b665f2b-2d52-45a3-bb7b-74272841378f"))
_IAgCvResolutionDistance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;

    //
    // Wrapper methods for error-handling
    //

    double GetDistance ( );
    void PutDistance (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("60cfff03-645e-4494-9a06-8f7c6cc74912"))
IAgCvResolutionDistance : IAgCvResolution
{
    //
    // Property data
    //

    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;

    //
    // Wrapper methods for error-handling
    //

    double GetDistance ( );
    void PutDistance (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("5ad2056a-11ff-4c43-9986-6e486a3b622a"))
AgCvResolutionLatLon;
    // [ default ] interface _IAgCvResolutionLatLon
    // interface IAgCvResolution
    // interface IAgCvResolutionLatLon

struct __declspec(uuid("2b96b9f5-0461-41b7-956b-899c6521f7c7"))
_IAgCvResolutionLatLon : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLatLon,put=PutLatLon))
    _variant_t LatLon;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLatLon ( );
    void PutLatLon (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LatLon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_LatLon (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("277b42a3-fd4d-42de-828a-d35320007524"))
IAgCvResolutionLatLon : IAgCvResolution
{
    //
    // Property data
    //

    __declspec(property(get=GetLatLon,put=PutLatLon))
    _variant_t LatLon;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLatLon ( );
    void PutLatLon (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LatLon (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_LatLon (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("a3b5b134-8aa4-416b-8bdb-9d9f71131526"))
AgCvGfxStatic;
    // [ default ] interface _IAgCvGfxStatic
    // interface IAgCvGfxStatic

struct __declspec(uuid("d2e63b1b-cb65-409c-b2e3-71aca40e32c5"))
_IAgCvGfxStatic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsRegionVisible,put=PutIsRegionVisible))
    VARIANT_BOOL IsRegionVisible;
    __declspec(property(get=GetIsPointsVisible,put=PutIsPointsVisible))
    VARIANT_BOOL IsPointsVisible;
    __declspec(property(get=GetIsLabelsVisible,put=PutIsLabelsVisible))
    VARIANT_BOOL IsLabelsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetFillPoints,put=PutFillPoints))
    VARIANT_BOOL FillPoints;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsRegionVisible ( );
    void PutIsRegionVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsPointsVisible ( );
    void PutIsPointsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsLabelsVisible ( );
    void PutIsLabelsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetFillPoints ( );
    void PutFillPoints (
        VARIANT_BOOL pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsRegionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsRegionVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsPointsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsPointsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsLabelsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLabelsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FillPoints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillPoints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("1fece2d3-f39f-427a-a7b0-e9ad7c5bbc6d"))
AgCvGfxAnimation;
    // [ default ] interface _IAgCvGfxAnimation
    // interface IAgCvGfxAnimation

struct __declspec(uuid("7a10cba1-b1c9-416e-a8ff-1286bd7574ee"))
_IAgCvGfxAnimation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsSatisfactionVisible,put=PutIsSatisfactionVisible))
    VARIANT_BOOL IsSatisfactionVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsSatisfactionVisible ( );
    void PutIsSatisfactionVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsSatisfactionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsSatisfactionVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("1b612b2f-0559-49da-b2d7-c93a4cdc64f0"))
AgCvGfxProgress;
    // [ default ] interface _IAgCvGfxProgress
    // interface IAgCvGfxProgress

struct __declspec(uuid("fd999025-7e77-43a7-908f-1a570a54848b"))
_IAgCvGfxProgress : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("abf936c3-74d5-4e84-b930-d95e9b533517"))
AgCvGraphics;
    // [ default ] interface _IAgCvGraphics
    // interface IAgCvGraphics

struct __declspec(uuid("2e4f382f-860a-44d8-abde-70dcee9ef30c"))
_IAgCvGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgCvGfxStaticPtr Static;
    __declspec(property(get=GetAnimation))
    IAgCvGfxAnimationPtr Animation;
    __declspec(property(get=GetProgress))
    IAgCvGfxProgressPtr Progress;

    //
    // Wrapper methods for error-handling
    //

    IAgCvGfxStaticPtr GetStatic ( );
    IAgCvGfxAnimationPtr GetAnimation ( );
    IAgCvGfxProgressPtr GetProgress ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgCvGfxStatic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgCvGfxAnimation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Progress (
        /*[out,retval]*/ struct IAgCvGfxProgress * * ppVal ) = 0;
};

struct __declspec(uuid("12b25e86-0b35-44d0-9e4f-a7a11720134a"))
AgCvVO;
    // [ default ] interface _IAgCvVO
    // interface IAgCvVO

struct __declspec(uuid("ec6c1108-29e7-4c44-9263-3728a6a07dcb"))
_IAgCvVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgCvVOAttributesPtr Static;
    __declspec(property(get=GetAnimation))
    IAgCvVOAttributesPtr Animation;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;

    //
    // Wrapper methods for error-handling
    //

    IAgCvVOAttributesPtr GetStatic ( );
    IAgCvVOAttributesPtr GetAnimation ( );
    double GetGranularity ( );
    void PutGranularity (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgCvVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgCvVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1e236890-3e8f-4059-868e-4bf2c32b5300"))
AgCvVOAttributes;
    // [ default ] interface _IAgCvVOAttributes
    // interface IAgCvVOAttributes

struct __declspec(uuid("0d349b54-f1d8-4d75-adde-0a8f3a1e7b7b"))
_IAgCvVOAttributes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    double PointSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );
    double GetPointSize ( );
    void PutPointSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("2e65697a-735f-4df7-907f-10508592b4f1"))
AgChTimePeriodBase;
    // [ default ] interface _IAgChTimePeriodBase
    // interface IAgChTimePeriodBase

enum AgEChTimePeriodType
{
    eTimePeriodUnknown = -1,
    eUseObjectTimePeriods = 0,
    eUseScenarioTimePeriod = 1,
    eUserSpecifiedTimePeriod = 2
};

struct __declspec(uuid("90ba38b3-ae7d-43bb-ac7c-3ddfd38d4d29"))
_IAgChTimePeriodBase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEChTimePeriodType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgEChTimePeriodType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEChTimePeriodType * pRetVal ) = 0;
};

struct __declspec(uuid("85fcba60-68f8-4486-8a58-aa8906903d59"))
IAgChTimePeriodBase : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEChTimePeriodType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgEChTimePeriodType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEChTimePeriodType * pRetVal ) = 0;
};

struct __declspec(uuid("6e632231-144e-48de-b03d-573ca3fff389"))
AgChUserSpecifiedTimePeriod;
    // [ default ] interface _IAgChUserSpecifiedTimePeriod
    // interface IAgChUserSpecifiedTimePeriod
    // interface IAgChTimePeriodBase

struct __declspec(uuid("3090de50-ab05-46af-bf5c-226641e7a355"))
_IAgChUserSpecifiedTimePeriod : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEChTimePeriodType Type;
    __declspec(property(get=GetStart,put=PutStart))
    _variant_t Start;
    __declspec(property(get=GetStop,put=PutStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    enum AgEChTimePeriodType GetType ( );
    _variant_t GetStart ( );
    void PutStart (
        const _variant_t & pVal );
    _variant_t GetStop ( );
    void PutStop (
        const _variant_t & pVal );
    HRESULT SetTimePeriod (
        const _variant_t & Start,
        const _variant_t & Stop );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEChTimePeriodType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Stop (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTimePeriod (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
};

struct __declspec(uuid("beda885e-8338-4acc-b425-683f4fbbf6eb"))
IAgChUserSpecifiedTimePeriod : IAgChTimePeriodBase
{
    //
    // Property data
    //

    __declspec(property(get=GetStart,put=PutStart))
    _variant_t Start;
    __declspec(property(get=GetStop,put=PutStop))
    _variant_t Stop;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStart ( );
    void PutStart (
        const _variant_t & pVal );
    _variant_t GetStop ( );
    void PutStop (
        const _variant_t & pVal );
    HRESULT SetTimePeriod (
        const _variant_t & Start,
        const _variant_t & Stop );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Stop (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTimePeriod (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
};

struct __declspec(uuid("4409c63f-4da3-408e-8c99-eee5cfd70643"))
AgChConstraints;
    // [ default ] interface _IAgChConstraints
    // interface IAgChConstraints

struct __declspec(uuid("f21a0bf2-caf8-4b88-a735-52136407b79d"))
_IAgChConstraints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseMinAngle,put=PutUseMinAngle))
    VARIANT_BOOL UseMinAngle;
    __declspec(property(get=GetMinAngle,put=PutMinAngle))
    double MinAngle;
    __declspec(property(get=GetUseMaxAngle,put=PutUseMaxAngle))
    VARIANT_BOOL UseMaxAngle;
    __declspec(property(get=GetMaxAngle,put=PutMaxAngle))
    double MaxAngle;
    __declspec(property(get=GetUseMinLinkTime,put=PutUseMinLinkTime))
    VARIANT_BOOL UseMinLinkTime;
    __declspec(property(get=GetMinLinkTime,put=PutMinLinkTime))
    double MinLinkTime;
    __declspec(property(get=GetUseLoadIntervalFile,put=PutUseLoadIntervalFile))
    VARIANT_BOOL UseLoadIntervalFile;
    __declspec(property(get=GetLoadIntervalFile,put=PutLoadIntervalFile))
    _bstr_t LoadIntervalFile;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseMinAngle ( );
    void PutUseMinAngle (
        VARIANT_BOOL pVal );
    double GetMinAngle ( );
    void PutMinAngle (
        double pVal );
    VARIANT_BOOL GetUseMaxAngle ( );
    void PutUseMaxAngle (
        VARIANT_BOOL pVal );
    double GetMaxAngle ( );
    void PutMaxAngle (
        double pVal );
    VARIANT_BOOL GetUseMinLinkTime ( );
    void PutUseMinLinkTime (
        VARIANT_BOOL pVal );
    double GetMinLinkTime ( );
    void PutMinLinkTime (
        double pVal );
    VARIANT_BOOL GetUseLoadIntervalFile ( );
    void PutUseLoadIntervalFile (
        VARIANT_BOOL pVal );
    _bstr_t GetLoadIntervalFile ( );
    void PutLoadIntervalFile (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseMinAngle (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseMinAngle (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseMaxAngle (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseMaxAngle (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseMinLinkTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseMinLinkTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinLinkTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLinkTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseLoadIntervalFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLoadIntervalFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LoadIntervalFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LoadIntervalFile (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("2e590d0e-1b71-40fa-b9cc-b771372d540f"))
IAgChConstraints : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseMinAngle,put=PutUseMinAngle))
    VARIANT_BOOL UseMinAngle;
    __declspec(property(get=GetMinAngle,put=PutMinAngle))
    double MinAngle;
    __declspec(property(get=GetUseMaxAngle,put=PutUseMaxAngle))
    VARIANT_BOOL UseMaxAngle;
    __declspec(property(get=GetMaxAngle,put=PutMaxAngle))
    double MaxAngle;
    __declspec(property(get=GetUseMinLinkTime,put=PutUseMinLinkTime))
    VARIANT_BOOL UseMinLinkTime;
    __declspec(property(get=GetMinLinkTime,put=PutMinLinkTime))
    double MinLinkTime;
    __declspec(property(get=GetUseLoadIntervalFile,put=PutUseLoadIntervalFile))
    VARIANT_BOOL UseLoadIntervalFile;
    __declspec(property(get=GetLoadIntervalFile,put=PutLoadIntervalFile))
    _bstr_t LoadIntervalFile;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseMinAngle ( );
    void PutUseMinAngle (
        VARIANT_BOOL pVal );
    double GetMinAngle ( );
    void PutMinAngle (
        double pVal );
    VARIANT_BOOL GetUseMaxAngle ( );
    void PutUseMaxAngle (
        VARIANT_BOOL pVal );
    double GetMaxAngle ( );
    void PutMaxAngle (
        double pVal );
    VARIANT_BOOL GetUseMinLinkTime ( );
    void PutUseMinLinkTime (
        VARIANT_BOOL pVal );
    double GetMinLinkTime ( );
    void PutMinLinkTime (
        double pVal );
    VARIANT_BOOL GetUseLoadIntervalFile ( );
    void PutUseLoadIntervalFile (
        VARIANT_BOOL pVal );
    _bstr_t GetLoadIntervalFile ( );
    void PutLoadIntervalFile (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseMinAngle (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseMinAngle (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseMaxAngle (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseMaxAngle (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseMinLinkTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseMinLinkTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinLinkTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinLinkTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseLoadIntervalFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLoadIntervalFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LoadIntervalFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LoadIntervalFile (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("72781a8b-5c0a-4c13-a94e-cc4281697a87"))
AgChain;
    // [ default ] interface _IAgChain
    // interface IAgChain
    // interface IAgStkObject
    // interface IAgLifetimeInformation

struct __declspec(uuid("d73522bc-3aba-4168-b6a2-68ec5391ba74"))
IAgChGfxStatic : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("ceb487fd-90f5-4e8e-9360-31efd5bd0840"))
IAgChGfxAnimation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsHighlightVisible,put=PutIsHighlightVisible))
    VARIANT_BOOL IsHighlightVisible;
    __declspec(property(get=GetIsLineVisible,put=PutIsLineVisible))
    VARIANT_BOOL IsLineVisible;
    __declspec(property(get=GetIsDirectionVisible,put=PutIsDirectionVisible))
    VARIANT_BOOL IsDirectionVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsHighlightVisible ( );
    void PutIsHighlightVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsLineVisible ( );
    void PutIsLineVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsDirectionVisible ( );
    void PutIsDirectionVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsHighlightVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsHighlightVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsLineVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLineVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsDirectionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDirectionVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("77e1f748-c8b0-404a-bbda-7d5ad72d1cdf"))
IAgChGraphics : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgChGfxStaticPtr Static;
    __declspec(property(get=GetAnimation))
    IAgChGfxAnimationPtr Animation;

    //
    // Wrapper methods for error-handling
    //

    IAgChGfxStaticPtr GetStatic ( );
    IAgChGfxAnimationPtr GetAnimation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgChGfxStatic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgChGfxAnimation * * ppVal ) = 0;
};

struct __declspec(uuid("a8a24d96-802d-487a-9278-f878f200ff37"))
IAgChVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;

    //
    // Wrapper methods for error-handling
    //

    IAgVODataDisplayCollectionPtr GetDataDisplay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
};

struct __declspec(uuid("6e7f3eac-81e0-484f-a9ba-065a8e877ec2"))
AgChGfxStatic;
    // [ default ] interface _IAgChGfxStatic
    // interface IAgChGfxStatic

struct __declspec(uuid("97f716b7-19f2-485f-8d91-f920c4f5092d"))
_IAgChGfxStatic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("7c97f4de-ea8d-453b-83b1-830ab856fea5"))
AgChGfxAnimation;
    // [ default ] interface _IAgChGfxAnimation
    // interface IAgChGfxAnimation

struct __declspec(uuid("38fa5998-dc9f-4b8d-9015-b44a241d9635"))
_IAgChGfxAnimation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsHighlightVisible,put=PutIsHighlightVisible))
    VARIANT_BOOL IsHighlightVisible;
    __declspec(property(get=GetIsLineVisible,put=PutIsLineVisible))
    VARIANT_BOOL IsLineVisible;
    __declspec(property(get=GetIsDirectionVisible,put=PutIsDirectionVisible))
    VARIANT_BOOL IsDirectionVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsHighlightVisible ( );
    void PutIsHighlightVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsLineVisible ( );
    void PutIsLineVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsDirectionVisible ( );
    void PutIsDirectionVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsHighlightVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsHighlightVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsLineVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsLineVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsDirectionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsDirectionVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
};

struct __declspec(uuid("4ee984e9-ae3a-40e9-bae2-9f9d8119b4a8"))
AgChGraphics;
    // [ default ] interface _IAgChGraphics
    // interface IAgChGraphics

struct __declspec(uuid("29dfd9b5-09da-4e6e-8579-14c9d1109324"))
_IAgChGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgChGfxStaticPtr Static;
    __declspec(property(get=GetAnimation))
    IAgChGfxAnimationPtr Animation;

    //
    // Wrapper methods for error-handling
    //

    IAgChGfxStaticPtr GetStatic ( );
    IAgChGfxAnimationPtr GetAnimation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgChGfxStatic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgChGfxAnimation * * ppVal ) = 0;
};

struct __declspec(uuid("c9ef0e36-2f32-4e26-9856-b16133d3b279"))
AgChVO;
    // [ default ] interface _IAgChVO
    // interface IAgChVO

struct __declspec(uuid("7d3bfcd8-bda8-4223-a031-7134fb310c0e"))
_IAgChVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;

    //
    // Wrapper methods for error-handling
    //

    IAgVODataDisplayCollectionPtr GetDataDisplay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
};

struct __declspec(uuid("65f86f93-6a9d-416e-8d31-e123c5505bca"))
AgRfCoefficients;
    // [ default ] interface _IAgRfCoefficients
    // interface IAgRfCoefficients

struct __declspec(uuid("8012c442-555d-4df7-9bf6-943d1f0c5247"))
_IAgRfCoefficients : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetC0,put=PutC0))
    double C0;
    __declspec(property(get=GetC1,put=PutC1))
    double C1;
    __declspec(property(get=GetC2,put=PutC2))
    double C2;
    __declspec(property(get=GetC3,put=PutC3))
    double C3;
    __declspec(property(get=GetC4,put=PutC4))
    double C4;
    __declspec(property(get=GetC5,put=PutC5))
    double C5;
    __declspec(property(get=GetC6,put=PutC6))
    double C6;
    __declspec(property(get=GetC7,put=PutC7))
    double C7;
    __declspec(property(get=GetC8,put=PutC8))
    double C8;
    __declspec(property(get=GetC9,put=PutC9))
    double C9;
    __declspec(property(get=GetC10,put=PutC10))
    double C10;

    //
    // Wrapper methods for error-handling
    //

    double GetC0 ( );
    void PutC0 (
        double pVal );
    double GetC1 ( );
    void PutC1 (
        double pVal );
    double GetC2 ( );
    void PutC2 (
        double pVal );
    double GetC3 ( );
    void PutC3 (
        double pVal );
    double GetC4 ( );
    void PutC4 (
        double pVal );
    double GetC5 ( );
    void PutC5 (
        double pVal );
    double GetC6 ( );
    void PutC6 (
        double pVal );
    double GetC7 ( );
    void PutC7 (
        double pVal );
    double GetC8 ( );
    void PutC8 (
        double pVal );
    double GetC9 ( );
    void PutC9 (
        double pVal );
    double GetC10 ( );
    void PutC10 (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_C0 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C0 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C3 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C3 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C4 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C4 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C5 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C5 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C6 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C6 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C7 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C7 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C8 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C8 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C9 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C9 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C10 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C10 (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("d6934a35-ede7-446a-a1ad-87eb832097bc"))
IAgRfCoefficients : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetC0,put=PutC0))
    double C0;
    __declspec(property(get=GetC1,put=PutC1))
    double C1;
    __declspec(property(get=GetC2,put=PutC2))
    double C2;
    __declspec(property(get=GetC3,put=PutC3))
    double C3;
    __declspec(property(get=GetC4,put=PutC4))
    double C4;
    __declspec(property(get=GetC5,put=PutC5))
    double C5;
    __declspec(property(get=GetC6,put=PutC6))
    double C6;
    __declspec(property(get=GetC7,put=PutC7))
    double C7;
    __declspec(property(get=GetC8,put=PutC8))
    double C8;
    __declspec(property(get=GetC9,put=PutC9))
    double C9;
    __declspec(property(get=GetC10,put=PutC10))
    double C10;

    //
    // Wrapper methods for error-handling
    //

    double GetC0 ( );
    void PutC0 (
        double pVal );
    double GetC1 ( );
    void PutC1 (
        double pVal );
    double GetC2 ( );
    void PutC2 (
        double pVal );
    double GetC3 ( );
    void PutC3 (
        double pVal );
    double GetC4 ( );
    void PutC4 (
        double pVal );
    double GetC5 ( );
    void PutC5 (
        double pVal );
    double GetC6 ( );
    void PutC6 (
        double pVal );
    double GetC7 ( );
    void PutC7 (
        double pVal );
    double GetC8 ( );
    void PutC8 (
        double pVal );
    double GetC9 ( );
    void PutC9 (
        double pVal );
    double GetC10 ( );
    void PutC10 (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_C0 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C0 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C1 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C2 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C2 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C3 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C3 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C4 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C4 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C5 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C5 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C6 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C6 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C7 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C7 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C8 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C8 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C9 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C9 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_C10 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_C10 (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b6aa49af-181e-4f56-99eb-152461ae2de7"))
AgRfModelEffectiveRadiusMethod;
    // [ default ] interface _IAgRfModelEffectiveRadiusMethod
    // interface IAgRfModelEffectiveRadiusMethod

struct __declspec(uuid("e8b5063e-33ea-4fcc-bb3d-34225d354624"))
_IAgRfModelEffectiveRadiusMethod : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEffRad,put=PutEffRad))
    double EffRad;
    __declspec(property(get=GetMaxTargetAltitude,put=PutMaxTargetAltitude))
    double MaxTargetAltitude;
    __declspec(property(get=GetUseExtrapolation,put=PutUseExtrapolation))
    VARIANT_BOOL UseExtrapolation;
    __declspec(property(get=GetCeiling,put=PutCeiling))
    double Ceiling;

    //
    // Wrapper methods for error-handling
    //

    double GetEffRad ( );
    void PutEffRad (
        double pVal );
    double GetMaxTargetAltitude ( );
    void PutMaxTargetAltitude (
        double pVal );
    VARIANT_BOOL GetUseExtrapolation ( );
    void PutUseExtrapolation (
        VARIANT_BOOL pVal );
    double GetCeiling ( );
    void PutCeiling (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EffRad (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EffRad (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTargetAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTargetAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseExtrapolation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseExtrapolation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Ceiling (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ceiling (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("52cac135-3ebe-4d10-b75d-b81313861c18"))
IAgRfModelEffectiveRadiusMethod : IAgRfModelBase
{
    //
    // Property data
    //

    __declspec(property(get=GetEffRad,put=PutEffRad))
    double EffRad;
    __declspec(property(get=GetMaxTargetAltitude,put=PutMaxTargetAltitude))
    double MaxTargetAltitude;
    __declspec(property(get=GetUseExtrapolation,put=PutUseExtrapolation))
    VARIANT_BOOL UseExtrapolation;
    __declspec(property(get=GetCeiling,put=PutCeiling))
    double Ceiling;

    //
    // Wrapper methods for error-handling
    //

    double GetEffRad ( );
    void PutEffRad (
        double pVal );
    double GetMaxTargetAltitude ( );
    void PutMaxTargetAltitude (
        double pVal );
    VARIANT_BOOL GetUseExtrapolation ( );
    void PutUseExtrapolation (
        VARIANT_BOOL pVal );
    double GetCeiling ( );
    void PutCeiling (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EffRad (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EffRad (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTargetAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTargetAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseExtrapolation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseExtrapolation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Ceiling (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ceiling (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1b1ed672-f7b1-4150-b20e-8a4eec009202"))
AgRfModelITURP8344;
    // [ default ] interface _IAgRfModelITURP8344
    // interface IAgRfModelITURP8344

struct __declspec(uuid("431ba762-f73e-4262-91df-a6e9564625da"))
_IAgRfModelITURP8344 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCeiling,put=PutCeiling))
    double Ceiling;
    __declspec(property(get=GetAtmosAltitude,put=PutAtmosAltitude))
    double AtmosAltitude;
    __declspec(property(get=GetKneeBendFactor,put=PutKneeBendFactor))
    double KneeBendFactor;

    //
    // Wrapper methods for error-handling
    //

    double GetCeiling ( );
    void PutCeiling (
        double pVal );
    double GetAtmosAltitude ( );
    void PutAtmosAltitude (
        double pVal );
    double GetKneeBendFactor ( );
    void PutKneeBendFactor (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Ceiling (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ceiling (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_KneeBendFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_KneeBendFactor (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("e73a63dc-5a90-48de-a370-6b2fe1eeebd9"))
IAgRfModelITURP8344 : IAgRfModelBase
{
    //
    // Property data
    //

    __declspec(property(get=GetCeiling,put=PutCeiling))
    double Ceiling;
    __declspec(property(get=GetAtmosAltitude,put=PutAtmosAltitude))
    double AtmosAltitude;
    __declspec(property(get=GetKneeBendFactor,put=PutKneeBendFactor))
    double KneeBendFactor;

    //
    // Wrapper methods for error-handling
    //

    double GetCeiling ( );
    void PutCeiling (
        double pVal );
    double GetAtmosAltitude ( );
    void PutAtmosAltitude (
        double pVal );
    double GetKneeBendFactor ( );
    void PutKneeBendFactor (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Ceiling (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ceiling (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_KneeBendFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_KneeBendFactor (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("581ac427-8ddf-4df6-b6a5-0a6928ec7e06"))
AgRfModelSCFMethod;
    // [ default ] interface _IAgRfModelSCFMethod
    // interface IAgRfModelSCFMethod

struct __declspec(uuid("a6ae0ca0-2705-4fed-9b79-f00e2bace40f"))
_IAgRfModelSCFMethod : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinTargetAltitude,put=PutMinTargetAltitude))
    double MinTargetAltitude;
    __declspec(property(get=GetUseExtrapolation,put=PutUseExtrapolation))
    VARIANT_BOOL UseExtrapolation;
    __declspec(property(get=GetCeiling,put=PutCeiling))
    double Ceiling;
    __declspec(property(get=GetAtmosAltitude,put=PutAtmosAltitude))
    double AtmosAltitude;
    __declspec(property(get=GetKneeBendFactor,put=PutKneeBendFactor))
    double KneeBendFactor;
    __declspec(property(get=GetUseRefractionIndex,put=PutUseRefractionIndex))
    VARIANT_BOOL UseRefractionIndex;
    __declspec(property(get=GetRefractionIndex,put=PutRefractionIndex))
    double RefractionIndex;
    __declspec(property(get=GetCoefficients))
    IAgRfCoefficientsPtr Coefficients;

    //
    // Wrapper methods for error-handling
    //

    double GetMinTargetAltitude ( );
    void PutMinTargetAltitude (
        double pVal );
    VARIANT_BOOL GetUseExtrapolation ( );
    void PutUseExtrapolation (
        VARIANT_BOOL pVal );
    double GetCeiling ( );
    void PutCeiling (
        double pVal );
    double GetAtmosAltitude ( );
    void PutAtmosAltitude (
        double pVal );
    double GetKneeBendFactor ( );
    void PutKneeBendFactor (
        double pVal );
    VARIANT_BOOL GetUseRefractionIndex ( );
    void PutUseRefractionIndex (
        VARIANT_BOOL pVal );
    double GetRefractionIndex ( );
    void PutRefractionIndex (
        double pVal );
    IAgRfCoefficientsPtr GetCoefficients ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinTargetAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinTargetAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseExtrapolation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseExtrapolation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Ceiling (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ceiling (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_KneeBendFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_KneeBendFactor (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseRefractionIndex (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseRefractionIndex (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RefractionIndex (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefractionIndex (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Coefficients (
        /*[out,retval]*/ struct IAgRfCoefficients * * ppVal ) = 0;
};

struct __declspec(uuid("6a26c0e8-af06-45e2-81bf-40ce4604985c"))
IAgRfModelSCFMethod : IAgRfModelBase
{
    //
    // Property data
    //

    __declspec(property(get=GetMinTargetAltitude,put=PutMinTargetAltitude))
    double MinTargetAltitude;
    __declspec(property(get=GetUseExtrapolation,put=PutUseExtrapolation))
    VARIANT_BOOL UseExtrapolation;
    __declspec(property(get=GetCeiling,put=PutCeiling))
    double Ceiling;
    __declspec(property(get=GetAtmosAltitude,put=PutAtmosAltitude))
    double AtmosAltitude;
    __declspec(property(get=GetKneeBendFactor,put=PutKneeBendFactor))
    double KneeBendFactor;
    __declspec(property(get=GetUseRefractionIndex,put=PutUseRefractionIndex))
    VARIANT_BOOL UseRefractionIndex;
    __declspec(property(get=GetRefractionIndex,put=PutRefractionIndex))
    double RefractionIndex;
    __declspec(property(get=GetCoefficients))
    IAgRfCoefficientsPtr Coefficients;

    //
    // Wrapper methods for error-handling
    //

    double GetMinTargetAltitude ( );
    void PutMinTargetAltitude (
        double pVal );
    VARIANT_BOOL GetUseExtrapolation ( );
    void PutUseExtrapolation (
        VARIANT_BOOL pVal );
    double GetCeiling ( );
    void PutCeiling (
        double pVal );
    double GetAtmosAltitude ( );
    void PutAtmosAltitude (
        double pVal );
    double GetKneeBendFactor ( );
    void PutKneeBendFactor (
        double pVal );
    VARIANT_BOOL GetUseRefractionIndex ( );
    void PutUseRefractionIndex (
        VARIANT_BOOL pVal );
    double GetRefractionIndex ( );
    void PutRefractionIndex (
        double pVal );
    IAgRfCoefficientsPtr GetCoefficients ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinTargetAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinTargetAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseExtrapolation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseExtrapolation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Ceiling (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ceiling (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AtmosAltitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AtmosAltitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_KneeBendFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_KneeBendFactor (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseRefractionIndex (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseRefractionIndex (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RefractionIndex (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefractionIndex (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Coefficients (
        /*[out,retval]*/ struct IAgRfCoefficients * * ppVal ) = 0;
};

struct __declspec(uuid("be67bd86-306f-47e5-bc31-53e76595c717"))
AgFmDefCompute;
    // [ default ] interface _IAgFmDefCompute
    // interface IAgFmDefCompute
    // interface IAgFmDefinition

struct __declspec(uuid("167a2117-2aa4-40b4-8076-759489920d88"))
_IAgFmDefCompute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComputeType))
    enum AgEFmCompute ComputeType;
    __declspec(property(get=GetComputeSupportedTypes))
    SAFEARRAY * ComputeSupportedTypes;
    __declspec(property(get=GetCompute))
    IAgFmDefinitionDataPtr Compute;
    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmCompute GetComputeType ( );
    HRESULT SetComputeType (
        enum AgEFmCompute CompteType );
    VARIANT_BOOL IsComputeTypeSupported (
        enum AgEFmCompute ComputeType );
    SAFEARRAY * GetComputeSupportedTypes ( );
    IAgFmDefinitionDataPtr GetCompute ( );
    IAgFmSatisfactionPtr GetSatisfaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComputeType (
        /*[out,retval]*/ enum AgEFmCompute * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetComputeType (
        /*[in]*/ enum AgEFmCompute CompteType ) = 0;
      virtual HRESULT __stdcall raw_IsComputeTypeSupported (
        /*[in]*/ enum AgEFmCompute ComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Compute (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppVal ) = 0;
};

struct __declspec(uuid("f1591bd9-87fd-45eb-b22e-fc8843c3f23b"))
AgFmDefDataMinMax;
    // [ default ] interface _IAgFmDefDataMinMax
    // interface IAgFmDefDataMinMax
    // interface IAgFmDefinitionData

struct __declspec(uuid("be7c4bdb-4fba-40b5-ae63-feb866e26323"))
_IAgFmDefDataMinMax : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinValue,put=PutMinValue))
    double MinValue;
    __declspec(property(get=GetMaxValue,put=PutMaxValue))
    double MaxValue;

    //
    // Wrapper methods for error-handling
    //

    double GetMinValue ( );
    void PutMinValue (
        double pVal );
    double GetMaxValue ( );
    void PutMaxValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxValue (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("4b0426e4-9108-4227-b6ff-fab340b74967"))
IAgFmDefDataMinMax : IAgFmDefinitionData
{
    //
    // Property data
    //

    __declspec(property(get=GetMinValue,put=PutMinValue))
    double MinValue;
    __declspec(property(get=GetMaxValue,put=PutMaxValue))
    double MaxValue;

    //
    // Wrapper methods for error-handling
    //

    double GetMinValue ( );
    void PutMinValue (
        double pVal );
    double GetMaxValue ( );
    void PutMaxValue (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxValue (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("77edad43-67ce-450a-be42-b2f3eff90eef"))
AgFmDefDataMinAssets;
    // [ default ] interface _IAgFmDefDataMinAssets
    // interface IAgFmDefDataMinAssets
    // interface IAgFmDefinitionData

struct __declspec(uuid("ecfc392b-15c4-462b-922a-973a2fb0e0a2"))
_IAgFmDefDataMinAssets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMinAssets,put=PutMinAssets))
    long MinAssets;

    //
    // Wrapper methods for error-handling
    //

    long GetMinAssets ( );
    void PutMinAssets (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinAssets (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAssets (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("c558678f-a8e6-4f33-bf72-a8ed5d17ffd6"))
IAgFmDefDataMinAssets : IAgFmDefinitionData
{
    //
    // Property data
    //

    __declspec(property(get=GetMinAssets,put=PutMinAssets))
    long MinAssets;

    //
    // Wrapper methods for error-handling
    //

    long GetMinAssets ( );
    void PutMinAssets (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinAssets (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAssets (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("afd253d1-36bc-4c68-9bd0-0a120aaff011"))
AgFmDefDataPercentLevel;
    // [ default ] interface _IAgFmDefDataPercentLevel
    // interface IAgFmDefDataPercentLevel
    // interface IAgFmDefinitionData

struct __declspec(uuid("eaab9fd7-fa8e-457f-8733-6dc7a087a7c4"))
_IAgFmDefDataPercentLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPercentLevel,put=PutPercentLevel))
    double PercentLevel;

    //
    // Wrapper methods for error-handling
    //

    double GetPercentLevel ( );
    void PutPercentLevel (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PercentLevel (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PercentLevel (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("93dd0cf2-416d-4ef9-acea-1a54704ba068"))
IAgFmDefDataPercentLevel : IAgFmDefinitionData
{
    //
    // Property data
    //

    __declspec(property(get=GetPercentLevel,put=PutPercentLevel))
    double PercentLevel;

    //
    // Wrapper methods for error-handling
    //

    double GetPercentLevel ( );
    void PutPercentLevel (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PercentLevel (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PercentLevel (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("edec5898-549c-40cd-9caa-fcc1e92db1a3"))
AgFmDefDataBestN;
    // [ default ] interface _IAgFmDefDataBestN
    // interface IAgFmDefDataBestN
    // interface IAgFmDefinitionData

struct __declspec(uuid("b7b4940c-5e53-462b-88b5-42e19f0693ba"))
_IAgFmDefDataBestN : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBestN,put=PutBestN))
    long BestN;

    //
    // Wrapper methods for error-handling
    //

    long GetBestN ( );
    void PutBestN (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BestN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BestN (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("da4eddf9-59a5-4601-a9cf-c3d69702981f"))
IAgFmDefDataBestN : IAgFmDefinitionData
{
    //
    // Property data
    //

    __declspec(property(get=GetBestN,put=PutBestN))
    long BestN;

    //
    // Wrapper methods for error-handling
    //

    long GetBestN ( );
    void PutBestN (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BestN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BestN (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("43796d08-e0c8-44b3-bef5-c620adc3fcb9"))
AgFmDefAccessConstraint;
    // [ default ] interface _IAgFmDefAccessConstraint
    // interface IAgFmDefCompute
    // interface IAgFmDefinition
    // interface IAgFmDefAccessConstraint

struct __declspec(uuid("4201d359-b8b3-4437-9149-c6f05a6193c5"))
_IAgFmDefAccessConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComputeType))
    enum AgEFmCompute ComputeType;
    __declspec(property(get=GetComputeSupportedTypes))
    SAFEARRAY * ComputeSupportedTypes;
    __declspec(property(get=GetCompute))
    IAgFmDefinitionDataPtr Compute;
    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;
    __declspec(property(get=GetAcrossAssets,put=PutAcrossAssets))
    enum AgEFmAcrossAssets AcrossAssets;
    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;
    __declspec(property(get=GetConstraintName,put=PutConstraintName))
    enum AgEFmConstraintName ConstraintName;
    __declspec(property(get=GetConstraint,put=PutConstraint))
    _bstr_t Constraint;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmCompute GetComputeType ( );
    HRESULT SetComputeType (
        enum AgEFmCompute ComputeType );
    VARIANT_BOOL IsComputeTypeSupported (
        enum AgEFmCompute ComputeType );
    SAFEARRAY * GetComputeSupportedTypes ( );
    IAgFmDefinitionDataPtr GetCompute ( );
    IAgFmSatisfactionPtr GetSatisfaction ( );
    enum AgEFmAcrossAssets GetAcrossAssets ( );
    void PutAcrossAssets (
        enum AgEFmAcrossAssets pVal );
    double GetTimeStep ( );
    void PutTimeStep (
        double pVal );
    enum AgEFmConstraintName GetConstraintName ( );
    void PutConstraintName (
        enum AgEFmConstraintName pVal );
    _bstr_t GetConstraint ( );
    void PutConstraint (
        _bstr_t pConstraintName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComputeType (
        /*[out,retval]*/ enum AgEFmCompute * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetComputeType (
        /*[in]*/ enum AgEFmCompute ComputeType ) = 0;
      virtual HRESULT __stdcall raw_IsComputeTypeSupported (
        /*[in]*/ enum AgEFmCompute ComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Compute (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AcrossAssets (
        /*[out,retval]*/ enum AgEFmAcrossAssets * pVal ) = 0;
      virtual HRESULT __stdcall put_AcrossAssets (
        /*[in]*/ enum AgEFmAcrossAssets pVal ) = 0;
      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ enum AgEFmConstraintName * pVal ) = 0;
      virtual HRESULT __stdcall put_ConstraintName (
        /*[in]*/ enum AgEFmConstraintName pVal ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[out,retval]*/ BSTR * pConstraintName ) = 0;
      virtual HRESULT __stdcall put_Constraint (
        /*[in]*/ BSTR pConstraintName ) = 0;
};

struct __declspec(uuid("4a7b0b82-9ad1-4095-a208-42114d203521"))
AgFmSatisfaction;
    // [ default ] interface _IAgFmSatisfaction
    // interface IAgFmSatisfaction

struct __declspec(uuid("4fdb88ff-54fe-413d-995a-013d35a987b2"))
_IAgFmSatisfaction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableSatisfaction,put=PutEnableSatisfaction))
    VARIANT_BOOL EnableSatisfaction;
    __declspec(property(get=GetSatisfactionType,put=PutSatisfactionType))
    enum AgEFmSatisfactionType SatisfactionType;
    __declspec(property(get=GetSatisfactionThreshold,put=PutSatisfactionThreshold))
    _variant_t SatisfactionThreshold;
    __declspec(property(get=GetInvalidDataIndicator,put=PutInvalidDataIndicator))
    _variant_t InvalidDataIndicator;
    __declspec(property(get=GetUseValueRangeCheck,put=PutUseValueRangeCheck))
    VARIANT_BOOL UseValueRangeCheck;
    __declspec(property(get=GetMinValueRange,put=PutMinValueRange))
    _variant_t MinValueRange;
    __declspec(property(get=GetMaxValueRange,put=PutMaxValueRange))
    _variant_t MaxValueRange;
    __declspec(property(get=GetExcludeValueRange,put=PutExcludeValueRange))
    VARIANT_BOOL ExcludeValueRange;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableSatisfaction ( );
    void PutEnableSatisfaction (
        VARIANT_BOOL pVal );
    enum AgEFmSatisfactionType GetSatisfactionType ( );
    void PutSatisfactionType (
        enum AgEFmSatisfactionType pVal );
    _variant_t GetSatisfactionThreshold ( );
    void PutSatisfactionThreshold (
        const _variant_t & pVal );
    _variant_t GetInvalidDataIndicator ( );
    void PutInvalidDataIndicator (
        const _variant_t & pVal );
    VARIANT_BOOL GetUseValueRangeCheck ( );
    void PutUseValueRangeCheck (
        VARIANT_BOOL pVal );
    _variant_t GetMinValueRange ( );
    void PutMinValueRange (
        const _variant_t & pInVal );
    _variant_t GetMaxValueRange ( );
    void PutMaxValueRange (
        const _variant_t & pInVal );
    VARIANT_BOOL GetExcludeValueRange ( );
    void PutExcludeValueRange (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableSatisfaction (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableSatisfaction (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SatisfactionType (
        /*[out,retval]*/ enum AgEFmSatisfactionType * pVal ) = 0;
      virtual HRESULT __stdcall put_SatisfactionType (
        /*[in]*/ enum AgEFmSatisfactionType pVal ) = 0;
      virtual HRESULT __stdcall get_SatisfactionThreshold (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_SatisfactionThreshold (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_InvalidDataIndicator (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_InvalidDataIndicator (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_UseValueRangeCheck (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseValueRangeCheck (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinValueRange (
        /*[out,retval]*/ VARIANT * pInVal ) = 0;
      virtual HRESULT __stdcall put_MinValueRange (
        /*[in]*/ VARIANT pInVal ) = 0;
      virtual HRESULT __stdcall get_MaxValueRange (
        /*[out,retval]*/ VARIANT * pInVal ) = 0;
      virtual HRESULT __stdcall put_MaxValueRange (
        /*[in]*/ VARIANT pInVal ) = 0;
      virtual HRESULT __stdcall get_ExcludeValueRange (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExcludeValueRange (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b2505186-fdb7-4959-a120-53eae47823e4"))
AgFigureOfMerit;
    // [ default ] interface _IAgFigureOfMerit
    // interface IAgFigureOfMerit
    // interface IAgStkObject
    // interface IAgLifetimeInformation

struct __declspec(uuid("2a510243-dc8c-49f1-8434-6f207ee086d2"))
IAgFmVOAttributes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    double PointSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );
    double GetPointSize ( );
    void PutPointSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b3b90e8c-6d72-4e22-89f9-75ae7bf76f68"))
IAgFmVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgFmVOAttributesPtr Static;
    __declspec(property(get=GetAnimation))
    IAgFmVOAttributesPtr Animation;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;
    __declspec(property(get=GetPixelsPerDeg,put=PutPixelsPerDeg))
    double PixelsPerDeg;
    __declspec(property(get=GetTempInlayDir,put=PutTempInlayDir))
    _bstr_t TempInlayDir;

    //
    // Wrapper methods for error-handling
    //

    IAgFmVOAttributesPtr GetStatic ( );
    IAgFmVOAttributesPtr GetAnimation ( );
    double GetGranularity ( );
    void PutGranularity (
        double pVal );
    double GetPixelsPerDeg ( );
    void PutPixelsPerDeg (
        double pVal );
    _bstr_t GetTempInlayDir ( );
    void PutTempInlayDir (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgFmVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgFmVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PixelsPerDeg (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PixelsPerDeg (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TempInlayDir (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TempInlayDir (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("64e13cd1-0b17-4725-a10d-2aa1f565e2a2"))
IAgFmGridInspector : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRegionFOM))
    IAgDataProviderInfoPtr RegionFOM;
    __declspec(property(get=GetRegionSatisfaction))
    IAgDataProviderInfoPtr RegionSatisfaction;
    __declspec(property(get=GetPointFOM))
    IAgDataProviderInfoPtr PointFOM;
    __declspec(property(get=GetPointSatisfaction))
    IAgDataProviderInfoPtr PointSatisfaction;
    __declspec(property(get=GetMessage))
    _bstr_t Message;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectPoint (
        const _variant_t & Lat,
        const _variant_t & Lon );
    HRESULT ClearSelection ( );
    HRESULT SelectRegion (
        _bstr_t RegionName );
    IAgDataProviderInfoPtr GetRegionFOM ( );
    IAgDataProviderInfoPtr GetRegionSatisfaction ( );
    IAgDataProviderInfoPtr GetPointFOM ( );
    IAgDataProviderInfoPtr GetPointSatisfaction ( );
    _bstr_t GetMessage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SelectPoint (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_ClearSelection ( ) = 0;
      virtual HRESULT __stdcall raw_SelectRegion (
        /*[in]*/ BSTR RegionName ) = 0;
      virtual HRESULT __stdcall get_RegionFOM (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RegionSatisfaction (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointFOM (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointSatisfaction (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("1e0f1617-8f51-43c4-952a-7547741b4fa0"))
IAgFigureOfMerit : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDefinitionType))
    enum AgEFmDefinitionType DefinitionType;
    __declspec(property(get=GetDefinitionSupportedTypes))
    SAFEARRAY * DefinitionSupportedTypes;
    __declspec(property(get=GetDefinition))
    IAgFmDefinitionPtr Definition;
    __declspec(property(get=GetGraphics))
    IAgFmGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgFmVOPtr VO;
    __declspec(property(get=GetGridInspector))
    IAgFmGridInspectorPtr GridInspector;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmDefinitionType GetDefinitionType ( );
    HRESULT SetDefinitionType (
        enum AgEFmDefinitionType Def );
    VARIANT_BOOL IsDefinitionTypeSupported (
        enum AgEFmDefinitionType Def );
    SAFEARRAY * GetDefinitionSupportedTypes ( );
    IAgFmDefinitionPtr GetDefinition ( );
    IAgFmDefAccessConstraintPtr SetAccessConstraintDefinition (
        enum AgEFmConstraintName ConstraintName );
    IAgFmGraphicsPtr GetGraphics ( );
    IAgFmVOPtr GetVO ( );
    IAgFmGridInspectorPtr GetGridInspector ( );
    IAgFmDefAccessConstraintPtr SetAccessConstraintDefinitionName (
        _bstr_t ConstraintName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefinitionType (
        /*[out,retval]*/ enum AgEFmDefinitionType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDefinitionType (
        /*[in]*/ enum AgEFmDefinitionType Def ) = 0;
      virtual HRESULT __stdcall raw_IsDefinitionTypeSupported (
        /*[in]*/ enum AgEFmDefinitionType Def,
        /*[out,retval]*/ VARIANT_BOOL * pSupported ) = 0;
      virtual HRESULT __stdcall get_DefinitionSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Definition (
        /*[out,retval]*/ struct IAgFmDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessConstraintDefinition (
        /*[in]*/ enum AgEFmConstraintName ConstraintName,
        /*[out,retval]*/ struct IAgFmDefAccessConstraint * * ppIAgFmDefAccessConstraint ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgFmGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgFmVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GridInspector (
        /*[out,retval]*/ struct IAgFmGridInspector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessConstraintDefinitionName (
        /*[in]*/ BSTR ConstraintName,
        /*[out,retval]*/ struct IAgFmDefAccessConstraint * * ppIAgFmDefAccessConstraint ) = 0;
};

struct __declspec(uuid("46c4458e-903d-4d81-a75f-65afe72548fb"))
AgFmDefAccessSeparation;
    // [ default ] interface _IAgFmDefAccessSeparation
    // interface IAgFmDefinition
    // interface IAgFmDefAccessSeparation

struct __declspec(uuid("6684fe68-e2e4-4654-bd36-4d2dccdc80f0"))
_IAgFmDefAccessSeparation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;
    __declspec(property(get=GetMinMaxData))
    IAgFmDefDataMinMaxPtr MinMaxData;

    //
    // Wrapper methods for error-handling
    //

    IAgFmSatisfactionPtr GetSatisfaction ( );
    IAgFmDefDataMinMaxPtr GetMinMaxData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MinMaxData (
        /*[out,retval]*/ struct IAgFmDefDataMinMax * * ppVal ) = 0;
};

struct __declspec(uuid("388d109c-14e4-41df-b1dc-4eb46affe3ab"))
IAgFmDefAccessSeparation : IAgFmDefinition
{
    //
    // Property data
    //

    __declspec(property(get=GetMinMaxData))
    IAgFmDefDataMinMaxPtr MinMaxData;

    //
    // Wrapper methods for error-handling
    //

    IAgFmDefDataMinMaxPtr GetMinMaxData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinMaxData (
        /*[out,retval]*/ struct IAgFmDefDataMinMax * * ppVal ) = 0;
};

struct __declspec(uuid("0636ac84-6b2e-4e0c-bb58-83d4bd105738"))
AgFmDefDilutionOfPrecision;
    // [ default ] interface _IAgFmDefDilutionOfPrecision
    // interface IAgFmDefinition
    // interface IAgFmDefCompute
    // interface IAgFmDefDilutionOfPrecision

enum AgEFmMethod
{
    eGDOP = 0,
    eHDOP = 1,
    eHDOP3 = 2,
    ePDOP = 3,
    ePDOP3 = 4,
    eTDOP = 5,
    eVDOP = 6,
    eVDOP3 = 7,
    eGACC = 8,
    eHACC = 9,
    eHACC3 = 10,
    ePACC = 11,
    ePACC3 = 12,
    eTACC = 13,
    eVACC = 14,
    eVACC3 = 15
};

enum AgEFmComputeType
{
    eBest4 = 0,
    eBestN = 1,
    eOverDetermined = 2,
    eBestFourAcc = 3,
    eBestNAcc = 4
};

struct __declspec(uuid("9947d749-6b23-41ed-8c48-031978242569"))
_IAgFmDefDilutionOfPrecision : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;
    __declspec(property(get=GetTypeData))
    IAgFmDefinitionDataPtr TypeData;
    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;
    __declspec(property(get=GetComputeType))
    enum AgEFmCompute ComputeType;
    __declspec(property(get=GetComputeSupportedTypes))
    SAFEARRAY * ComputeSupportedTypes;
    __declspec(property(get=GetCompute))
    IAgFmDefinitionDataPtr Compute;
    __declspec(property(get=GetMethod))
    enum AgEFmMethod Method;
    __declspec(property(get=GetSupportedMethods))
    SAFEARRAY * SupportedMethods;
    __declspec(property(get=GetType))
    enum AgEFmComputeType Type;
    __declspec(property(get=GetSupportedTypes))
    SAFEARRAY * SupportedTypes;

    //
    // Wrapper methods for error-handling
    //

    IAgFmSatisfactionPtr GetSatisfaction ( );
    enum AgEFmCompute GetComputeType ( );
    HRESULT SetComputeType (
        enum AgEFmCompute ComputeType );
    VARIANT_BOOL IsComputeTypeSupported (
        enum AgEFmCompute ComputeType );
    SAFEARRAY * GetComputeSupportedTypes ( );
    IAgFmDefinitionDataPtr GetCompute ( );
    enum AgEFmMethod GetMethod ( );
    HRESULT SetMethod (
        enum AgEFmMethod AgEFmMethod );
    VARIANT_BOOL IsMethodSupported (
        enum AgEFmMethod AgEFmMethod );
    SAFEARRAY * GetSupportedMethods ( );
    enum AgEFmComputeType GetType ( );
    HRESULT SetType (
        enum AgEFmComputeType AgEFmComputeType );
    VARIANT_BOOL IsTypeSupported (
        enum AgEFmComputeType AgEFmComputeType );
    SAFEARRAY * GetSupportedTypes ( );
    double GetTimeStep ( );
    void PutTimeStep (
        double pVal );
    IAgFmDefinitionDataPtr GetTypeData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ComputeType (
        /*[out,retval]*/ enum AgEFmCompute * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetComputeType (
        /*[in]*/ enum AgEFmCompute ComputeType ) = 0;
      virtual HRESULT __stdcall raw_IsComputeTypeSupported (
        /*[in]*/ enum AgEFmCompute ComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Compute (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEFmMethod * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetMethod (
        /*[in]*/ enum AgEFmMethod AgEFmMethod ) = 0;
      virtual HRESULT __stdcall raw_IsMethodSupported (
        /*[in]*/ enum AgEFmMethod AgEFmMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedMethods (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEFmComputeType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum AgEFmComputeType AgEFmComputeType ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgEFmComputeType AgEFmComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TypeData (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppPRetVal ) = 0;
};

struct __declspec(uuid("b52d7505-dce5-4d6a-9da2-8a03eacb3afd"))
IAgFmDefDilutionOfPrecision : IAgFmDefCompute
{
    //
    // Property data
    //

    __declspec(property(get=GetMethod))
    enum AgEFmMethod Method;
    __declspec(property(get=GetSupportedMethods))
    SAFEARRAY * SupportedMethods;
    __declspec(property(get=GetType))
    enum AgEFmComputeType Type;
    __declspec(property(get=GetSupportedTypes))
    SAFEARRAY * SupportedTypes;
    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;
    __declspec(property(get=GetTypeData))
    IAgFmDefinitionDataPtr TypeData;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmMethod GetMethod ( );
    HRESULT SetMethod (
        enum AgEFmMethod AgEFmMethod );
    VARIANT_BOOL IsMethodSupported (
        enum AgEFmMethod AgEFmMethod );
    SAFEARRAY * GetSupportedMethods ( );
    enum AgEFmComputeType GetType ( );
    HRESULT SetType (
        enum AgEFmComputeType AgEFmComputeType );
    VARIANT_BOOL IsTypeSupported (
        enum AgEFmComputeType AgEFmComputeType );
    SAFEARRAY * GetSupportedTypes ( );
    double GetTimeStep ( );
    void PutTimeStep (
        double pVal );
    IAgFmDefinitionDataPtr GetTypeData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEFmMethod * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetMethod (
        /*[in]*/ enum AgEFmMethod AgEFmMethod ) = 0;
      virtual HRESULT __stdcall raw_IsMethodSupported (
        /*[in]*/ enum AgEFmMethod AgEFmMethod,
        /*[out,retval]*/ VARIANT_BOOL * pSupported ) = 0;
      virtual HRESULT __stdcall get_SupportedMethods (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEFmComputeType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum AgEFmComputeType AgEFmComputeType ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgEFmComputeType AgEFmComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pSupported ) = 0;
      virtual HRESULT __stdcall get_SupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TypeData (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppRetVal ) = 0;
};

struct __declspec(uuid("402ea09f-91e7-47b5-bd91-0a15595b16e2"))
AgFmDefNavigationAccuracy;
    // [ default ] interface _IAgFmDefNavigationAccuracy
    // interface IAgFmDefinition
    // interface IAgFmDefCompute
    // interface IAgFmDefDilutionOfPrecision
    // interface IAgFmDefNavigationAccuracy

enum AgEFmNAMethodType
{
    eFmNAConstant = 0,
    eFmNAElevationAngle = 1
};

struct __declspec(uuid("126d0c5b-8a16-4989-ad54-f19dc7b28514"))
IAgFmNAMethod : IUnknown
{};

struct __declspec(uuid("59c14c15-c3c8-4448-a47d-c39141f2cd1f"))
IAgFmAssetListElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMethodType,put=PutMethodType))
    enum AgEFmNAMethodType MethodType;
    __declspec(property(get=GetMethod))
    IAgFmNAMethodPtr Method;
    __declspec(property(get=GetAsset))
    _bstr_t Asset;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmNAMethodType GetMethodType ( );
    void PutMethodType (
        enum AgEFmNAMethodType pVal );
    IAgFmNAMethodPtr GetMethod ( );
    _bstr_t GetAsset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgEFmNAMethodType * pVal ) = 0;
      virtual HRESULT __stdcall put_MethodType (
        /*[in]*/ enum AgEFmNAMethodType pVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ struct IAgFmNAMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Asset (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("8e3e3b16-8e8b-49e7-a427-4135a56777a1"))
IAgFmAssetListCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgFmAssetListElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgFmAssetListElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgFmAssetListElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("5e74186c-b597-4d28-9ff2-95c020df4cde"))
IAgFmUncertainties : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetReceiverRange,put=PutReceiverRange))
    double ReceiverRange;
    __declspec(property(get=GetAssetList))
    IAgFmAssetListCollectionPtr AssetList;

    //
    // Wrapper methods for error-handling
    //

    double GetReceiverRange ( );
    void PutReceiverRange (
        double pVal );
    IAgFmAssetListCollectionPtr GetAssetList ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReceiverRange (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReceiverRange (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AssetList (
        /*[out,retval]*/ struct IAgFmAssetListCollection * * ppVal ) = 0;
};

struct __declspec(uuid("07dd1b61-82db-415b-b56e-f0ee3be91c8e"))
_IAgFmDefNavigationAccuracy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;
    __declspec(property(get=GetUncertainties))
    IAgFmUncertaintiesPtr Uncertainties;
    __declspec(property(get=GetTypeData))
    IAgFmDefinitionDataPtr TypeData;
    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;
    __declspec(property(get=GetComputeType))
    enum AgEFmCompute ComputeType;
    __declspec(property(get=GetComputeSupportedTypes))
    SAFEARRAY * ComputeSupportedTypes;
    __declspec(property(get=GetCompute))
    IAgFmDefinitionDataPtr Compute;
    __declspec(property(get=GetMethod))
    enum AgEFmMethod Method;
    __declspec(property(get=GetSupportedMethods))
    SAFEARRAY * SupportedMethods;
    __declspec(property(get=GetType))
    enum AgEFmComputeType Type;
    __declspec(property(get=GetSupportedTypes))
    SAFEARRAY * SupportedTypes;

    //
    // Wrapper methods for error-handling
    //

    IAgFmSatisfactionPtr GetSatisfaction ( );
    enum AgEFmCompute GetComputeType ( );
    HRESULT SetComputeType (
        enum AgEFmCompute ComputeType );
    VARIANT_BOOL IsComputeTypeSupported (
        enum AgEFmCompute ComputeType );
    SAFEARRAY * GetComputeSupportedTypes ( );
    IAgFmDefinitionDataPtr GetCompute ( );
    enum AgEFmMethod GetMethod ( );
    HRESULT SetMethod (
        enum AgEFmMethod AgEFmMethod );
    VARIANT_BOOL IsMethodSupported (
        enum AgEFmMethod AgEFmMethod );
    SAFEARRAY * GetSupportedMethods ( );
    enum AgEFmComputeType GetType ( );
    HRESULT SetType (
        enum AgEFmComputeType AgEFmComputeType );
    VARIANT_BOOL IsTypeSupported (
        enum AgEFmComputeType AgEFmComputeType );
    SAFEARRAY * GetSupportedTypes ( );
    double GetTimeStep ( );
    void PutTimeStep (
        double pRetVal );
    IAgFmUncertaintiesPtr GetUncertainties ( );
    IAgFmDefinitionDataPtr GetTypeData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeType (
        /*[out,retval]*/ enum AgEFmCompute * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetComputeType (
        /*[in]*/ enum AgEFmCompute ComputeType ) = 0;
      virtual HRESULT __stdcall raw_IsComputeTypeSupported (
        /*[in]*/ enum AgEFmCompute ComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Compute (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ enum AgEFmMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetMethod (
        /*[in]*/ enum AgEFmMethod AgEFmMethod ) = 0;
      virtual HRESULT __stdcall raw_IsMethodSupported (
        /*[in]*/ enum AgEFmMethod AgEFmMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedMethods (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEFmComputeType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum AgEFmComputeType AgEFmComputeType ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgEFmComputeType AgEFmComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Uncertainties (
        /*[out,retval]*/ struct IAgFmUncertainties * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TypeData (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppRetVal ) = 0;
};

struct __declspec(uuid("f44fa6fc-b12e-425e-a435-d3b84355e082"))
IAgFmDefNavigationAccuracy : IAgFmDefDilutionOfPrecision
{
    //
    // Property data
    //

    __declspec(property(get=GetUncertainties))
    IAgFmUncertaintiesPtr Uncertainties;

    //
    // Wrapper methods for error-handling
    //

    IAgFmUncertaintiesPtr GetUncertainties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Uncertainties (
        /*[out,retval]*/ struct IAgFmUncertainties * * ppVal ) = 0;
};

struct __declspec(uuid("f619836e-d0cd-49e4-a806-c7e99d2edd6d"))
AgFmAssetListElement;
    // [ default ] interface _IAgFmAssetListElement
    // interface IAgFmAssetListElement

struct __declspec(uuid("c1976f5b-fd43-4b33-a849-8127232e4754"))
_IAgFmAssetListElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMethodType,put=PutMethodType))
    enum AgEFmNAMethodType MethodType;
    __declspec(property(get=GetMethod))
    IAgFmNAMethodPtr Method;
    __declspec(property(get=GetAsset))
    _bstr_t Asset;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmNAMethodType GetMethodType ( );
    void PutMethodType (
        enum AgEFmNAMethodType pVal );
    IAgFmNAMethodPtr GetMethod ( );
    _bstr_t GetAsset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MethodType (
        /*[out,retval]*/ enum AgEFmNAMethodType * pVal ) = 0;
      virtual HRESULT __stdcall put_MethodType (
        /*[in]*/ enum AgEFmNAMethodType pVal ) = 0;
      virtual HRESULT __stdcall get_Method (
        /*[out,retval]*/ struct IAgFmNAMethod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Asset (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("734aafbd-0b51-4cfe-8d68-8c4ad4f15169"))
AgFmAssetListCollection;
    // [ default ] interface IUnknown
    // interface IAgFmAssetListCollection

struct __declspec(uuid("d20cf5ab-bad8-4097-a43c-d1bc453eb169"))
AgFmUncertainties;
    // [ default ] interface _IAgFmUncertainties
    // interface IAgFmUncertainties

struct __declspec(uuid("902e2267-dff9-4c9d-9b1d-faa73924c828"))
_IAgFmUncertainties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReceiverRange,put=PutReceiverRange))
    double ReceiverRange;
    __declspec(property(get=GetAssetList))
    IAgFmAssetListCollectionPtr AssetList;

    //
    // Wrapper methods for error-handling
    //

    double GetReceiverRange ( );
    void PutReceiverRange (
        double pVal );
    IAgFmAssetListCollectionPtr GetAssetList ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReceiverRange (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ReceiverRange (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AssetList (
        /*[out,retval]*/ struct IAgFmAssetListCollection * * ppVal ) = 0;
};

struct __declspec(uuid("9a1c72a3-92ff-478a-bd26-cf20acfba683"))
AgFmDefResponseTime;
    // [ default ] interface _IAgFmDefResponseTime
    // interface IAgFmDefCompute
    // interface IAgFmDefinition
    // interface IAgFmDefResponseTime

struct __declspec(uuid("72853088-0dc6-4484-99d2-289321df8d23"))
_IAgFmDefResponseTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComputeType))
    enum AgEFmCompute ComputeType;
    __declspec(property(get=GetComputeSupportedTypes))
    SAFEARRAY * ComputeSupportedTypes;
    __declspec(property(get=GetCompute))
    IAgFmDefinitionDataPtr Compute;
    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;
    __declspec(property(get=GetMinAssets,put=PutMinAssets))
    long MinAssets;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmCompute GetComputeType ( );
    HRESULT SetComputeType (
        enum AgEFmCompute ComputeType );
    VARIANT_BOOL IsComputeTypeSupported (
        enum AgEFmCompute ComputeType );
    SAFEARRAY * GetComputeSupportedTypes ( );
    IAgFmDefinitionDataPtr GetCompute ( );
    IAgFmSatisfactionPtr GetSatisfaction ( );
    long GetMinAssets ( );
    void PutMinAssets (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComputeType (
        /*[out,retval]*/ enum AgEFmCompute * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetComputeType (
        /*[in]*/ enum AgEFmCompute ComputeType ) = 0;
      virtual HRESULT __stdcall raw_IsComputeTypeSupported (
        /*[in]*/ enum AgEFmCompute ComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Compute (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MinAssets (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAssets (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("57ae8274-b0a2-4cdb-ae57-d4e36132de3b"))
IAgFmDefResponseTime : IAgFmDefCompute
{
    //
    // Property data
    //

    __declspec(property(get=GetMinAssets,put=PutMinAssets))
    long MinAssets;

    //
    // Wrapper methods for error-handling
    //

    long GetMinAssets ( );
    void PutMinAssets (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinAssets (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAssets (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("ae8f9b79-3c1c-4d69-adba-fa6c3450d0f6"))
AgFmDefRevisitTime;
    // [ default ] interface _IAgFmDefRevisitTime
    // interface IAgFmDefinition
    // interface IAgFmDefCompute
    // interface IAgFmDefResponseTime
    // interface IAgFmDefRevisitTime

enum AgEFmEndGapOption
{
    eIgnore = 0,
    eInclude = 1
};

struct __declspec(uuid("0a981da3-66ec-45cb-8f49-31eaf1e595e6"))
_IAgFmDefRevisitTime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndGapOption,put=PutEndGapOption))
    enum AgEFmEndGapOption EndGapOption;
    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;
    __declspec(property(get=GetComputeType))
    enum AgEFmCompute ComputeType;
    __declspec(property(get=GetComputeSupportedTypes))
    SAFEARRAY * ComputeSupportedTypes;
    __declspec(property(get=GetCompute))
    IAgFmDefinitionDataPtr Compute;
    __declspec(property(get=GetMinAssets,put=PutMinAssets))
    long MinAssets;

    //
    // Wrapper methods for error-handling
    //

    IAgFmSatisfactionPtr GetSatisfaction ( );
    enum AgEFmCompute GetComputeType ( );
    HRESULT SetComputeType (
        enum AgEFmCompute ComputeType );
    VARIANT_BOOL IsComputeTypeSupported (
        enum AgEFmCompute ComputeType );
    SAFEARRAY * GetComputeSupportedTypes ( );
    IAgFmDefinitionDataPtr GetCompute ( );
    long GetMinAssets ( );
    void PutMinAssets (
        long pVal );
    enum AgEFmEndGapOption GetEndGapOption ( );
    void PutEndGapOption (
        enum AgEFmEndGapOption pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ComputeType (
        /*[out,retval]*/ enum AgEFmCompute * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetComputeType (
        /*[in]*/ enum AgEFmCompute ComputeType ) = 0;
      virtual HRESULT __stdcall raw_IsComputeTypeSupported (
        /*[in]*/ enum AgEFmCompute ComputeType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ComputeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Compute (
        /*[out,retval]*/ struct IAgFmDefinitionData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MinAssets (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinAssets (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_EndGapOption (
        /*[out,retval]*/ enum AgEFmEndGapOption * pVal ) = 0;
      virtual HRESULT __stdcall put_EndGapOption (
        /*[in]*/ enum AgEFmEndGapOption pVal ) = 0;
};

struct __declspec(uuid("9270cfcc-d550-4f26-9396-43fb8f40b335"))
IAgFmDefRevisitTime : IAgFmDefResponseTime
{
    //
    // Property data
    //

    __declspec(property(get=GetEndGapOption,put=PutEndGapOption))
    enum AgEFmEndGapOption EndGapOption;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmEndGapOption GetEndGapOption ( );
    void PutEndGapOption (
        enum AgEFmEndGapOption pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EndGapOption (
        /*[out,retval]*/ enum AgEFmEndGapOption * pVal ) = 0;
      virtual HRESULT __stdcall put_EndGapOption (
        /*[in]*/ enum AgEFmEndGapOption pVal ) = 0;
};

struct __declspec(uuid("60fc5df9-6b4b-48f0-b9ad-a5dc04360d2c"))
AgFmDefSimpleCoverage;
    // [ default ] interface _IAgFmDefSimpleCoverage
    // interface IAgFmDefinition
    // interface IAgFmDefSimpleCoverage

struct __declspec(uuid("a2c1bbce-ae48-4ec2-8c1e-29b7aa8d0669"))
_IAgFmDefSimpleCoverage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;

    //
    // Wrapper methods for error-handling
    //

    IAgFmSatisfactionPtr GetSatisfaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppVal ) = 0;
};

struct __declspec(uuid("54ca993b-af7f-4963-a483-5c1e84674677"))
IAgFmDefSimpleCoverage : IAgFmDefinition
{};

struct __declspec(uuid("87891eb9-4b6b-4e48-aa8c-147faa7d9bbb"))
AgFmDefTimeAverageGap;
    // [ default ] interface _IAgFmDefTimeAverageGap
    // interface IAgFmDefinition
    // interface IAgFmDefTimeAverageGap

struct __declspec(uuid("3263c4c7-847e-40e7-8cc4-7e9a8f7acab6"))
_IAgFmDefTimeAverageGap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSatisfaction))
    IAgFmSatisfactionPtr Satisfaction;

    //
    // Wrapper methods for error-handling
    //

    IAgFmSatisfactionPtr GetSatisfaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Satisfaction (
        /*[out,retval]*/ struct IAgFmSatisfaction * * ppVal ) = 0;
};

struct __declspec(uuid("be96e90c-3db6-403f-9332-ddb80d752118"))
IAgFmDefTimeAverageGap : IAgFmDefinition
{};

struct __declspec(uuid("33cbaf1a-2c7e-43d8-941d-2ad787206577"))
AgFmGfxContours;
    // [ default ] interface _IAgFmGfxContours
    // interface IAgFmGfxContours

struct __declspec(uuid("698ed292-69da-4d29-84c2-520943745f26"))
_IAgFmGfxContours : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetContourType,put=PutContourType))
    enum AgEFmGfxContourType ContourType;
    __declspec(property(get=GetColorMethod,put=PutColorMethod))
    enum AgEFmGfxColorMethod ColorMethod;
    __declspec(property(get=GetRampColor))
    IAgFmGfxRampColorPtr RampColor;
    __declspec(property(get=GetLevelAttributes))
    IAgFmGfxLevelAttributesCollectionPtr LevelAttributes;
    __declspec(property(get=GetLegend))
    IAgFmGfxLegendPtr Legend;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    enum AgEFmGfxContourType GetContourType ( );
    void PutContourType (
        enum AgEFmGfxContourType pVal );
    enum AgEFmGfxColorMethod GetColorMethod ( );
    void PutColorMethod (
        enum AgEFmGfxColorMethod pVal );
    IAgFmGfxRampColorPtr GetRampColor ( );
    IAgFmGfxLevelAttributesCollectionPtr GetLevelAttributes ( );
    IAgFmGfxLegendPtr GetLegend ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ContourType (
        /*[out,retval]*/ enum AgEFmGfxContourType * pVal ) = 0;
      virtual HRESULT __stdcall put_ContourType (
        /*[in]*/ enum AgEFmGfxContourType pVal ) = 0;
      virtual HRESULT __stdcall get_ColorMethod (
        /*[out,retval]*/ enum AgEFmGfxColorMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorMethod (
        /*[in]*/ enum AgEFmGfxColorMethod pVal ) = 0;
      virtual HRESULT __stdcall get_RampColor (
        /*[out,retval]*/ struct IAgFmGfxRampColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LevelAttributes (
        /*[out,retval]*/ struct IAgFmGfxLevelAttributesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ struct IAgFmGfxLegend * * ppVal ) = 0;
};

struct __declspec(uuid("7b5a84c6-bf39-4fd9-a882-52e6738e89c3"))
AgFmGfxAttributes;
    // [ default ] interface _IAgFmGfxAttributes
    // interface IAgFmGfxAttributes

struct __declspec(uuid("07b2e68c-032d-4a80-a798-065ac52f01a4"))
_IAgFmGfxAttributes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetFillPoints,put=PutFillPoints))
    VARIANT_BOOL FillPoints;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetContours))
    IAgFmGfxContoursPtr Contours;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetFillPoints ( );
    void PutFillPoints (
        VARIANT_BOOL pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    IAgFmGfxContoursPtr GetContours ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FillPoints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillPoints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Contours (
        /*[out,retval]*/ struct IAgFmGfxContours * * ppVal ) = 0;
};

struct __declspec(uuid("c57ca0ca-2de6-472e-90ae-3410d2010b0d"))
AgFmGfxContoursAnimation;
    // [ default ] interface _IAgFmGfxContoursAnimation
    // interface IAgFmGfxContours
    // interface IAgFmGfxContoursAnimation

struct __declspec(uuid("110870e3-5387-4502-9a12-e7373f402773"))
_IAgFmGfxContoursAnimation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetContourType,put=PutContourType))
    enum AgEFmGfxContourType ContourType;
    __declspec(property(get=GetColorMethod,put=PutColorMethod))
    enum AgEFmGfxColorMethod ColorMethod;
    __declspec(property(get=GetRampColor))
    IAgFmGfxRampColorPtr RampColor;
    __declspec(property(get=GetLevelAttributes))
    IAgFmGfxLevelAttributesCollectionPtr LevelAttributes;
    __declspec(property(get=GetLegend))
    IAgFmGfxLegendPtr Legend;
    __declspec(property(get=GetUseStaticContours,put=PutUseStaticContours))
    VARIANT_BOOL UseStaticContours;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    enum AgEFmGfxContourType GetContourType ( );
    void PutContourType (
        enum AgEFmGfxContourType pVal );
    enum AgEFmGfxColorMethod GetColorMethod ( );
    void PutColorMethod (
        enum AgEFmGfxColorMethod pVal );
    IAgFmGfxRampColorPtr GetRampColor ( );
    IAgFmGfxLevelAttributesCollectionPtr GetLevelAttributes ( );
    IAgFmGfxLegendPtr GetLegend ( );
    VARIANT_BOOL GetUseStaticContours ( );
    void PutUseStaticContours (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ContourType (
        /*[out,retval]*/ enum AgEFmGfxContourType * pVal ) = 0;
      virtual HRESULT __stdcall put_ContourType (
        /*[in]*/ enum AgEFmGfxContourType pVal ) = 0;
      virtual HRESULT __stdcall get_ColorMethod (
        /*[out,retval]*/ enum AgEFmGfxColorMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorMethod (
        /*[in]*/ enum AgEFmGfxColorMethod pVal ) = 0;
      virtual HRESULT __stdcall get_RampColor (
        /*[out,retval]*/ struct IAgFmGfxRampColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LevelAttributes (
        /*[out,retval]*/ struct IAgFmGfxLevelAttributesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[out,retval]*/ struct IAgFmGfxLegend * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseStaticContours (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseStaticContours (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("60be82e9-624a-4ac9-a6e4-a8955cc141bb"))
IAgFmGfxContoursAnimation : IAgFmGfxContours
{
    //
    // Property data
    //

    __declspec(property(get=GetUseStaticContours,put=PutUseStaticContours))
    VARIANT_BOOL UseStaticContours;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseStaticContours ( );
    void PutUseStaticContours (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseStaticContours (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseStaticContours (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("c8803b8f-aaa5-49ba-92b1-fd708233ca85"))
AgFmGfxAttributesAnimation;
    // [ default ] interface _IAgFmGfxAttributesAnimation
    // interface IAgFmGfxAttributes
    // interface IAgFmGfxAttributesAnimation

struct __declspec(uuid("5c02221e-2bbf-4b9c-8c83-574f57316111"))
_IAgFmGfxAttributesAnimation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetFillPoints,put=PutFillPoints))
    VARIANT_BOOL FillPoints;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    _bstr_t MarkerStyle;
    __declspec(property(get=GetContours))
    IAgFmGfxContoursPtr Contours;
    __declspec(property(get=GetAccumulation,put=PutAccumulation))
    enum AgEFmGfxAccumulation Accumulation;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    VARIANT_BOOL GetFillPoints ( );
    void PutFillPoints (
        VARIANT_BOOL pVal );
    _bstr_t GetMarkerStyle ( );
    void PutMarkerStyle (
        _bstr_t pVal );
    IAgFmGfxContoursPtr GetContours ( );
    enum AgEFmGfxAccumulation GetAccumulation ( );
    void PutAccumulation (
        enum AgEFmGfxAccumulation ppVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_FillPoints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillPoints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Contours (
        /*[out,retval]*/ struct IAgFmGfxContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Accumulation (
        /*[out,retval]*/ enum AgEFmGfxAccumulation * ppVal ) = 0;
      virtual HRESULT __stdcall put_Accumulation (
        /*[in]*/ enum AgEFmGfxAccumulation ppVal ) = 0;
};

struct __declspec(uuid("d531f055-2864-4a5a-b39e-127a6aeb88ab"))
AgFmGraphics;
    // [ default ] interface _IAgFmGraphics
    // interface IAgFmGraphics

struct __declspec(uuid("09fe2ba7-2f0a-4084-bdaa-d978fd5dfd10"))
_IAgFmGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgFmGfxAttributesPtr Static;
    __declspec(property(get=GetAnimation))
    IAgFmGfxAttributesAnimationPtr Animation;

    //
    // Wrapper methods for error-handling
    //

    IAgFmGfxAttributesPtr GetStatic ( );
    IAgFmGfxAttributesAnimationPtr GetAnimation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgFmGfxAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgFmGfxAttributesAnimation * * ppVal ) = 0;
};

struct __declspec(uuid("5745a457-ad02-46d9-a60c-a698e6c86690"))
AgFmGfxRampColor;
    // [ default ] interface _IAgFmGfxRampColor
    // interface IAgFmGfxRampColor

struct __declspec(uuid("ceb64f65-96b6-4851-97ce-2d8da0a013f9"))
_IAgFmGfxRampColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartColor,put=PutStartColor))
    OLE_COLOR StartColor;
    __declspec(property(get=GetEndColor,put=PutEndColor))
    OLE_COLOR EndColor;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetStartColor ( );
    void PutStartColor (
        OLE_COLOR pVal );
    OLE_COLOR GetEndColor ( );
    void PutEndColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_EndColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_EndColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("a97433ea-16ec-4479-9ea1-3d23a78d950d"))
AgFmGfxLevelAttributesElement;
    // [ default ] interface _IAgFmGfxLevelAttributesElement
    // interface IAgFmGfxLevelAttributesElement

struct __declspec(uuid("549b83ea-2434-4a32-87d9-d347a3fcb01d"))
_IAgFmGfxLevelAttributesElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLevel,put=PutLevel))
    _variant_t Level;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLevel ( );
    void PutLevel (
        const _variant_t & pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Level (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Level (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("85f0ce0c-22be-4e32-b800-2b0e68f8d44a"))
AgFmGfxLevelAttributesCollection;
    // [ default ] interface IUnknown
    // interface IAgFmGfxLevelAttributesCollection

struct __declspec(uuid("2ab55936-5274-47c2-9244-769615c38039"))
AgFmGfxPositionOnMap;
    // [ default ] interface _IAgFmGfxPositionOnMap
    // interface IAgFmGfxPositionOnMap

struct __declspec(uuid("5a3cf168-c210-4fd3-a8b2-188500a81d7b"))
_IAgFmGfxPositionOnMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    long X;
    __declspec(property(get=GetY,put=PutY))
    long Y;

    //
    // Wrapper methods for error-handling
    //

    long GetX ( );
    void PutX (
        long pRetVal );
    long GetY ( );
    void PutY (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("08a992bb-2f13-4247-8792-bf224e67f1b1"))
AgFmGfxColorOptions;
    // [ default ] interface _IAgFmGfxColorOptions
    // interface IAgFmGfxColorOptions

struct __declspec(uuid("53250992-4308-46e4-960f-dc926aeb15e8"))
_IAgFmGfxColorOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBackground,put=PutBackground))
    OLE_COLOR Background;
    __declspec(property(get=GetText,put=PutText))
    OLE_COLOR Text;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetBackground ( );
    void PutBackground (
        OLE_COLOR pVal );
    OLE_COLOR GetText ( );
    void PutText (
        OLE_COLOR pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Background (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ OLE_COLOR pVal ) = 0;
};

struct __declspec(uuid("b018593d-07d7-4df7-b484-927a95824149"))
AgFmGfxLegendWindow;
    // [ default ] interface _IAgFmGfxLegendWindow
    // interface IAgFmGfxLegendWindow

struct __declspec(uuid("025eb5a3-e794-4968-a7d8-00c1de588ac6"))
_IAgFmGfxLegendWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisibleOnMap,put=PutIsVisibleOnMap))
    VARIANT_BOOL IsVisibleOnMap;
    __declspec(property(get=GetPositionOnMap))
    IAgFmGfxPositionOnMapPtr PositionOnMap;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisibleOnMap ( );
    void PutIsVisibleOnMap (
        VARIANT_BOOL pVal );
    IAgFmGfxPositionOnMapPtr GetPositionOnMap ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisibleOnMap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisibleOnMap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PositionOnMap (
        /*[out,retval]*/ struct IAgFmGfxPositionOnMap * * ppVal ) = 0;
};

struct __declspec(uuid("9bd62f88-aff9-4ac0-b92a-9a5e89a3160a"))
AgFmVOLegendWindow;
    // [ default ] interface _IAgFmVOLegendWindow
    // interface IAgFmVOLegendWindow

struct __declspec(uuid("60bb0477-fd77-4e84-bd65-679490cd5182"))
_IAgFmVOLegendWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisibleOnMap,put=PutIsVisibleOnMap))
    VARIANT_BOOL IsVisibleOnMap;
    __declspec(property(get=GetPositionOnMap))
    IAgFmGfxPositionOnMapPtr PositionOnMap;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisibleOnMap ( );
    void PutIsVisibleOnMap (
        VARIANT_BOOL pVal );
    IAgFmGfxPositionOnMapPtr GetPositionOnMap ( );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisibleOnMap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisibleOnMap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PositionOnMap (
        /*[out,retval]*/ struct IAgFmGfxPositionOnMap * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("def45179-e7c2-4fd4-afb3-24411de5297b"))
AgFmGfxTextOptions;
    // [ default ] interface _IAgFmGfxTextOptions
    // interface IAgFmGfxTextOptions

struct __declspec(uuid("5f50fecb-3e0c-424c-b9bd-e788358be611"))
_IAgFmGfxTextOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetNumDecimalDigits,put=PutNumDecimalDigits))
    long NumDecimalDigits;
    __declspec(property(get=GetFloatingPointFormat,put=PutFloatingPointFormat))
    enum AgEFmGfxFloatingPointFormat FloatingPointFormat;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pVal );
    long GetNumDecimalDigits ( );
    void PutNumDecimalDigits (
        long pVal );
    enum AgEFmGfxFloatingPointFormat GetFloatingPointFormat ( );
    void PutFloatingPointFormat (
        enum AgEFmGfxFloatingPointFormat pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NumDecimalDigits (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumDecimalDigits (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FloatingPointFormat (
        /*[out,retval]*/ enum AgEFmGfxFloatingPointFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_FloatingPointFormat (
        /*[in]*/ enum AgEFmGfxFloatingPointFormat pVal ) = 0;
};

struct __declspec(uuid("1373bba9-fbc1-4b2c-8fed-6168cc650098"))
AgFmGfxRangeColorOptions;
    // [ default ] interface _IAgFmGfxRangeColorOptions
    // interface IAgFmGfxRangeColorOptions

struct __declspec(uuid("53fff61d-c8b8-4e07-8242-b9afd6ba60f2"))
_IAgFmGfxRangeColorOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgEFmGfxDirection Direction;
    __declspec(property(get=GetMaxSquaresPerRow,put=PutMaxSquaresPerRow))
    long MaxSquaresPerRow;
    __declspec(property(get=GetMaxSquaresPerColumn,put=PutMaxSquaresPerColumn))
    long MaxSquaresPerColumn;
    __declspec(property(get=GetColorSquareWidth,put=PutColorSquareWidth))
    long ColorSquareWidth;
    __declspec(property(get=GetColorSquareHeight,put=PutColorSquareHeight))
    long ColorSquareHeight;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmGfxDirection GetDirection ( );
    void PutDirection (
        enum AgEFmGfxDirection pVal );
    long GetMaxSquaresPerRow ( );
    void PutMaxSquaresPerRow (
        long pVal );
    long GetMaxSquaresPerColumn ( );
    void PutMaxSquaresPerColumn (
        long pVal );
    long GetColorSquareWidth ( );
    void PutColorSquareWidth (
        long pVal );
    long GetColorSquareHeight ( );
    void PutColorSquareHeight (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgEFmGfxDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgEFmGfxDirection pVal ) = 0;
      virtual HRESULT __stdcall get_MaxSquaresPerRow (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxSquaresPerRow (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxSquaresPerColumn (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxSquaresPerColumn (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColorSquareWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorSquareWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColorSquareHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorSquareHeight (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("b5d2f2ae-5854-4b0c-ac1c-233fa46f25c7"))
AgFmGfxLegend;
    // [ default ] interface _IAgFmGfxLegend
    // interface IAgFmGfxLegend

struct __declspec(uuid("ff6733a2-d54b-4382-9a6e-79926560824a"))
_IAgFmGfxLegend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorOptions))
    IAgFmGfxColorOptionsPtr ColorOptions;
    __declspec(property(get=GetTextOptions))
    IAgFmGfxTextOptionsPtr TextOptions;
    __declspec(property(get=GetRangeColorOptions))
    IAgFmGfxRangeColorOptionsPtr RangeColorOptions;
    __declspec(property(get=GetGfxWindow))
    IAgFmGfxLegendWindowPtr GfxWindow;
    __declspec(property(get=GetVOWindow))
    IAgFmVOLegendWindowPtr VOWindow;

    //
    // Wrapper methods for error-handling
    //

    IAgFmGfxColorOptionsPtr GetColorOptions ( );
    IAgFmGfxTextOptionsPtr GetTextOptions ( );
    IAgFmGfxRangeColorOptionsPtr GetRangeColorOptions ( );
    IAgFmGfxLegendWindowPtr GetGfxWindow ( );
    IAgFmVOLegendWindowPtr GetVOWindow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColorOptions (
        /*[out,retval]*/ struct IAgFmGfxColorOptions * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TextOptions (
        /*[out,retval]*/ struct IAgFmGfxTextOptions * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RangeColorOptions (
        /*[out,retval]*/ struct IAgFmGfxRangeColorOptions * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GfxWindow (
        /*[out,retval]*/ struct IAgFmGfxLegendWindow * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VOWindow (
        /*[out,retval]*/ struct IAgFmVOLegendWindow * * ppRetVal ) = 0;
};

struct __declspec(uuid("5a34edd0-cfca-4492-a2d0-d58f8551e657"))
AgFmNAMethodElevationAngle;
    // [ default ] interface _IAgFmNAMethodElevationAngle
    // interface IAgFmNAMethod
    // interface IAgFmNAMethodElevationAngle

struct __declspec(uuid("037743ed-1403-4871-9edf-a3338b99e202"))
_IAgFmNAMethodElevationAngle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("2d83403e-29f7-44ff-ad2e-c0bc18f2e792"))
IAgFmNAMethodElevationAngle : IAgFmNAMethod
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("9a9b72ae-7af8-44fb-ad79-e8e56d444865"))
AgFmNAMethodConstant;
    // [ default ] interface _IAgFmNAMethodConstant
    // interface IAgFmNAMethod
    // interface IAgFmNAMethodConstant

struct __declspec(uuid("9854d629-9c8c-47d9-abd9-68fac1871fb9"))
_IAgFmNAMethodConstant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("cbe9a566-2dbd-4ff4-bcc2-c3447aa4fda6"))
IAgFmNAMethodConstant : IAgFmNAMethod
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("6b5abd7d-7cee-4771-8f06-0eb244a1e1a8"))
AgFmVOAttributes;
    // [ default ] interface _IAgFmVOAttributes
    // interface IAgFmVOAttributes

struct __declspec(uuid("caa93b70-e207-4bed-acc5-e797bb3232e5"))
_IAgFmVOAttributes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsVisible,put=PutIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetTranslucency,put=PutTranslucency))
    double Translucency;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    double PointSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsVisible ( );
    void PutIsVisible (
        VARIANT_BOOL pVal );
    double GetTranslucency ( );
    void PutTranslucency (
        double pVal );
    double GetPointSize ( );
    void PutPointSize (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Translucency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Translucency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("44aeb8d8-bd75-412a-a4a7-51a27d4a6955"))
AgFmVO;
    // [ default ] interface _IAgFmVO
    // interface IAgFmVO

struct __declspec(uuid("f113508b-8916-438c-919d-3e22381f178c"))
_IAgFmVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatic))
    IAgFmVOAttributesPtr Static;
    __declspec(property(get=GetAnimation))
    IAgFmVOAttributesPtr Animation;
    __declspec(property(get=GetGranularity,put=PutGranularity))
    double Granularity;
    __declspec(property(get=GetPixelsPerDeg,put=PutPixelsPerDeg))
    double PixelsPerDeg;
    __declspec(property(get=GetTempInlayDir,put=PutTempInlayDir))
    _bstr_t TempInlayDir;

    //
    // Wrapper methods for error-handling
    //

    IAgFmVOAttributesPtr GetStatic ( );
    IAgFmVOAttributesPtr GetAnimation ( );
    double GetGranularity ( );
    void PutGranularity (
        double pVal );
    double GetPixelsPerDeg ( );
    void PutPixelsPerDeg (
        double pVal );
    _bstr_t GetTempInlayDir ( );
    void PutTempInlayDir (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Static (
        /*[out,retval]*/ struct IAgFmVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgFmVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Granularity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Granularity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PixelsPerDeg (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PixelsPerDeg (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TempInlayDir (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TempInlayDir (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("df29575b-3adf-428e-8b34-b2b11a703a59"))
AgVeProfileGPS;
    // [ default ] interface _IAgVeProfileGPS
    // interface IAgVeAttProfile
    // interface IAgVeProfileGPS

enum AgEGPSAttModelType
{
    eGPSModelTypeUnknown = -1,
    eGSPModelGYM95 = 0,
    eGSPModelBlockIIANominal = 1,
    eGSPModelBlockIIRNominal = 2
};

struct __declspec(uuid("56376c53-bf03-4a42-a059-a29920e5e151"))
_IAgVeProfileGPS : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetModelType,put=PutModelType))
    enum AgEGPSAttModelType ModelType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetType ( );
    enum AgEGPSAttModelType GetModelType ( );
    void PutModelType (
        enum AgEGPSAttModelType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ enum AgEGPSAttModelType * pVal ) = 0;
      virtual HRESULT __stdcall put_ModelType (
        /*[in]*/ enum AgEGPSAttModelType pVal ) = 0;
};

struct __declspec(uuid("0a8f2591-e19a-4188-9372-9f51f1f12387"))
IAgVeProfileGPS : IAgVeAttProfile
{
    //
    // Property data
    //

    __declspec(property(get=GetModelType,put=PutModelType))
    enum AgEGPSAttModelType ModelType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEGPSAttModelType GetModelType ( );
    void PutModelType (
        enum AgEGPSAttModelType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ enum AgEGPSAttModelType * pVal ) = 0;
      virtual HRESULT __stdcall put_ModelType (
        /*[in]*/ enum AgEGPSAttModelType pVal ) = 0;
};

struct __declspec(uuid("04faa12c-b536-4303-881b-9e9aa03abb46"))
AgStkObjectModelContext;
    // [ default ] interface _IAgStkObjectModelContext
    // interface IAgStkObjectModelContext

struct __declspec(uuid("e3298226-c184-44d9-9a20-ee068ef24175"))
AgStdMil2525bSymbols;
    // [ default ] interface _IAgStdMil2525bSymbols
    // interface IAgStdMil2525bSymbols

struct __declspec(uuid("babe0878-c4e4-48ff-9c49-6dcdcaad7c75"))
_IAgStdMil2525bSymbols : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFillEnabled,put=PutFillEnabled))
    VARIANT_BOOL FillEnabled;
    __declspec(property(get=GetSymbolImageSize,put=PutSymbolImageSize))
    unsigned int SymbolImageSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetFillEnabled ( );
    void PutFillEnabled (
        VARIANT_BOOL pRetVal );
    unsigned int GetSymbolImageSize ( );
    void PutSymbolImageSize (
        unsigned int pRetVal );
    HRESULT CreateSymbol (
        _bstr_t SymbolID,
        _bstr_t SaveImageFilePath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FillEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FillEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_SymbolImageSize (
        /*[out,retval]*/ unsigned int * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SymbolImageSize (
        /*[in]*/ unsigned int pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSymbol (
        /*[in]*/ BSTR SymbolID,
        /*[in]*/ BSTR SaveImageFilePath ) = 0;
};

struct __declspec(uuid("df15ba3d-6f30-4c70-8f72-9e2e73145968"))
AgCvGridInspector;
    // [ default ] interface _IAgCvGridInspector
    // interface IAgCvGridInspector

struct __declspec(uuid("85311d85-9c8f-4d05-bab5-11208ab94970"))
_IAgCvGridInspector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPointCoverage))
    IAgDataProviderInfoPtr PointCoverage;
    __declspec(property(get=GetPointDailyCoverage))
    IAgDataProviderInfoPtr PointDailyCoverage;
    __declspec(property(get=GetPointProbOfCoverage))
    IAgDataProviderInfoPtr PointProbOfCoverage;
    __declspec(property(get=GetRegionCoverage))
    IAgDataProviderInfoPtr RegionCoverage;
    __declspec(property(get=GetRegionFullCoverage))
    IAgDataProviderInfoPtr RegionFullCoverage;
    __declspec(property(get=GetRegionPassCoverage))
    IAgDataProviderInfoPtr RegionPassCoverage;
    __declspec(property(get=GetMessage))
    _bstr_t Message;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectPoint (
        const _variant_t & Lat,
        const _variant_t & Lon );
    HRESULT SelectRegion (
        _bstr_t RegionName );
    IAgDataProviderInfoPtr GetPointCoverage ( );
    IAgDataProviderInfoPtr GetPointDailyCoverage ( );
    IAgDataProviderInfoPtr GetPointProbOfCoverage ( );
    IAgDataProviderInfoPtr GetRegionCoverage ( );
    IAgDataProviderInfoPtr GetRegionFullCoverage ( );
    IAgDataProviderInfoPtr GetRegionPassCoverage ( );
    HRESULT ClearSelection ( );
    _bstr_t GetMessage ( );
    IAgCvGridPointSelectionPtr GetGridPointSelection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SelectPoint (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_SelectRegion (
        /*[in]*/ BSTR RegionName ) = 0;
      virtual HRESULT __stdcall get_PointCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointDailyCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointProbOfCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RegionCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RegionFullCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RegionPassCoverage (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ClearSelection ( ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetGridPointSelection (
        /*[out,retval]*/ struct IAgCvGridPointSelection * * ppRetVal ) = 0;
};

struct __declspec(uuid("f987599c-aab3-44d9-b54f-65fa88354939"))
AgFmGridInspector;
    // [ default ] interface _IAgFmGridInspector
    // interface IAgFmGridInspector

struct __declspec(uuid("30d4354e-43c2-45d2-903c-f160bfed07bd"))
_IAgFmGridInspector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRegionFOM))
    IAgDataProviderInfoPtr RegionFOM;
    __declspec(property(get=GetRegionSatisfaction))
    IAgDataProviderInfoPtr RegionSatisfaction;
    __declspec(property(get=GetPointFOM))
    IAgDataProviderInfoPtr PointFOM;
    __declspec(property(get=GetPointSatisfaction))
    IAgDataProviderInfoPtr PointSatisfaction;
    __declspec(property(get=GetMessage))
    _bstr_t Message;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectPoint (
        const _variant_t & Lat,
        const _variant_t & Lon );
    HRESULT ClearSelection ( );
    HRESULT SelectRegion (
        _bstr_t RegionName );
    IAgDataProviderInfoPtr GetRegionFOM ( );
    IAgDataProviderInfoPtr GetRegionSatisfaction ( );
    IAgDataProviderInfoPtr GetPointFOM ( );
    IAgDataProviderInfoPtr GetPointSatisfaction ( );
    _bstr_t GetMessage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SelectPoint (
        /*[in]*/ VARIANT Lat,
        /*[in]*/ VARIANT Lon ) = 0;
      virtual HRESULT __stdcall raw_ClearSelection ( ) = 0;
      virtual HRESULT __stdcall raw_SelectRegion (
        /*[in]*/ BSTR RegionName ) = 0;
      virtual HRESULT __stdcall get_RegionFOM (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RegionSatisfaction (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointFOM (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointSatisfaction (
        /*[out,retval]*/ struct IAgDataProviderInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("4ecd9674-0f67-45f8-a389-86a839d2e297"))
AgVOVaporTrail;
    // [ default ] interface _IAgVOVaporTrail
    // interface IAgVOVaporTrail

struct __declspec(uuid("5f73214a-4d66-4e13-a5bc-181793ac9b1b"))
_IAgVOVaporTrail : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetMaxNumOfPuffs,put=PutMaxNumOfPuffs))
    long MaxNumOfPuffs;
    __declspec(property(get=GetDensity,put=PutDensity))
    double Density;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetEndTime,put=PutEndTime))
    _variant_t EndTime;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetUseAttachPoint,put=PutUseAttachPoint))
    VARIANT_BOOL UseAttachPoint;
    __declspec(property(get=GetAttachPointName,put=PutAttachPointName))
    _bstr_t AttachPointName;
    __declspec(property(get=GetImageFile,put=PutImageFile))
    _bstr_t ImageFile;
    __declspec(property(get=GetAvailableAttachPoints))
    SAFEARRAY * AvailableAttachPoints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pShow );
    long GetMaxNumOfPuffs ( );
    void PutMaxNumOfPuffs (
        long pMaxNum );
    double GetDensity ( );
    void PutDensity (
        double pDensity );
    double GetRadius ( );
    void PutRadius (
        double pRadius );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pStartTime );
    _variant_t GetEndTime ( );
    void PutEndTime (
        const _variant_t & pEndTime );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pColor );
    VARIANT_BOOL GetUseAttachPoint ( );
    void PutUseAttachPoint (
        VARIANT_BOOL pUseAttach );
    _bstr_t GetAttachPointName ( );
    void PutAttachPointName (
        _bstr_t pAttachName );
    _bstr_t GetImageFile ( );
    void PutImageFile (
        _bstr_t pImageFile );
    SAFEARRAY * GetAvailableAttachPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pShow ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pShow ) = 0;
      virtual HRESULT __stdcall get_MaxNumOfPuffs (
        /*[out,retval]*/ long * pMaxNum ) = 0;
      virtual HRESULT __stdcall put_MaxNumOfPuffs (
        /*[in]*/ long pMaxNum ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ double * pDensity ) = 0;
      virtual HRESULT __stdcall put_Density (
        /*[in]*/ double pDensity ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRadius ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pRadius ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pStartTime ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pStartTime ) = 0;
      virtual HRESULT __stdcall get_EndTime (
        /*[out,retval]*/ VARIANT * pEndTime ) = 0;
      virtual HRESULT __stdcall put_EndTime (
        /*[in]*/ VARIANT pEndTime ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pColor ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pColor ) = 0;
      virtual HRESULT __stdcall get_UseAttachPoint (
        /*[out,retval]*/ VARIANT_BOOL * pUseAttach ) = 0;
      virtual HRESULT __stdcall put_UseAttachPoint (
        /*[in]*/ VARIANT_BOOL pUseAttach ) = 0;
      virtual HRESULT __stdcall get_AttachPointName (
        /*[out,retval]*/ BSTR * pAttachName ) = 0;
      virtual HRESULT __stdcall put_AttachPointName (
        /*[in]*/ BSTR pAttachName ) = 0;
      virtual HRESULT __stdcall get_ImageFile (
        /*[out,retval]*/ BSTR * pImageFile ) = 0;
      virtual HRESULT __stdcall put_ImageFile (
        /*[in]*/ BSTR pImageFile ) = 0;
      virtual HRESULT __stdcall get_AvailableAttachPoints (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("e48d7479-b396-43ce-9ae2-6f8491aa42c3"))
AgVeTargetPointingIntervalCollection;
    // [ default ] interface IUnknown
    // interface IAgVeTargetPointingIntervalCollection

struct __declspec(uuid("54950e9e-e901-43cd-8444-f161f49fa3b2"))
AgAccessCnstrPluginMinMax;
    // [ default ] interface _IAgAccessCnstrPluginMinMax
    // interface IAgAccessCnstrPluginMinMax
    // interface IAgAccessCnstrMinMax
    // interface IAgAccessConstraint
    // interface IAgAccessConstraint2

struct __declspec(uuid("df1372fe-f13c-46c9-b35a-6831ef05e91f"))
_IAgAccessCnstrPluginMinMax : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableMin,put=PutEnableMin))
    VARIANT_BOOL EnableMin;
    __declspec(property(get=GetEnableMax,put=PutEnableMax))
    VARIANT_BOOL EnableMax;
    __declspec(property(get=GetMin,put=PutMin))
    _variant_t Min;
    __declspec(property(get=GetMax,put=PutMax))
    _variant_t Max;
    __declspec(property(get=GetConstraintName))
    _bstr_t ConstraintName;
    __declspec(property(get=GetIsPlugin,put=PutIsPlugin))
    VARIANT_BOOL IsPlugin;
    __declspec(property(get=GetExclIntvl,put=PutExclIntvl))
    VARIANT_BOOL ExclIntvl;
    __declspec(property(get=GetConstraintType))
    enum AgEAccessConstraints ConstraintType;
    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMaxRelMotion,put=PutMaxRelMotion))
    double MaxRelMotion;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnableMin ( );
    void PutEnableMin (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnableMax ( );
    void PutEnableMax (
        VARIANT_BOOL pVal );
    _variant_t GetMin ( );
    void PutMin (
        const _variant_t & pVal );
    _variant_t GetMax ( );
    void PutMax (
        const _variant_t & pVal );
    _bstr_t GetConstraintName ( );
    VARIANT_BOOL GetIsPlugin ( );
    void PutIsPlugin (
        VARIANT_BOOL pPlugin );
    VARIANT_BOOL GetExclIntvl ( );
    void PutExclIntvl (
        VARIANT_BOOL pExcl );
    enum AgEAccessConstraints GetConstraintType ( );
    IUnknownPtr GetRawPluginObject ( );
    _variant_t GetProperty (
        _bstr_t Path );
    HRESULT SetProperty (
        _bstr_t Path,
        const _variant_t & Val );
    SAFEARRAY * GetAvailableProperties ( );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMaxRelMotion ( );
    void PutMaxRelMotion (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EnableMin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMin (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnableMax (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableMax (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_ConstraintName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsPlugin (
        /*[out,retval]*/ VARIANT_BOOL * pPlugin ) = 0;
      virtual HRESULT __stdcall put_IsPlugin (
        /*[in]*/ VARIANT_BOOL pPlugin ) = 0;
      virtual HRESULT __stdcall get_ExclIntvl (
        /*[out,retval]*/ VARIANT_BOOL * pExcl ) = 0;
      virtual HRESULT __stdcall put_ExclIntvl (
        /*[in]*/ VARIANT_BOOL pExcl ) = 0;
      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum AgEAccessConstraints * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRawPluginObject (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Path,
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRelMotion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxRelMotion (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("a05d4294-2a89-4fc7-ace3-ef4ddc32d064"))
IAgAccessCnstrPluginMinMax : IAgAccessCnstrMinMax
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableProperties))
    SAFEARRAY * AvailableProperties;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr GetRawPluginObject ( );
    _variant_t GetProperty (
        _bstr_t Path );
    HRESULT SetProperty (
        _bstr_t Path,
        const _variant_t & Val );
    SAFEARRAY * GetAvailableProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetRawPluginObject (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Path,
        /*[in]*/ VARIANT Val ) = 0;
      virtual HRESULT __stdcall get_AvailableProperties (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("2fc22e40-e005-40e5-b25c-1bed15e104a2"))
AgCnConstraints;
    // [ default ] interface _IAgCnConstraints
    // interface IAgCnConstraints

enum AgECnCnstrRestriction
{
    eCnCnstrRestrictionUnknown = -1,
    eCnCnstrRestrictionAllOf = 0,
    eCnCnstrRestrictionAnyOf = 1,
    eCnCnstrRestrictionAtLeastN = 2,
    eCnCnstrRestrictionExactlyN = 3,
    eCnCnstrRestrictionNoneOf = 4
};

struct __declspec(uuid("54a60bbc-1c06-4b8f-a42a-2f1acb3ed83a"))
IAgCnCnstrRestriction : IUnknown
{};

struct __declspec(uuid("c704d39e-edde-4d76-a56c-4e971df7e4d9"))
_IAgCnConstraints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRestrictionType))
    enum AgECnCnstrRestriction RestrictionType;
    __declspec(property(get=GetRestriction))
    IAgCnCnstrRestrictionPtr Restriction;
    __declspec(property(get=GetIsRelay,put=PutIsRelay))
    VARIANT_BOOL IsRelay;

    //
    // Wrapper methods for error-handling
    //

    enum AgECnCnstrRestriction GetRestrictionType ( );
    HRESULT SetRestrictionType (
        enum AgECnCnstrRestriction Restriction );
    IAgCnCnstrRestrictionPtr GetRestriction ( );
    VARIANT_BOOL GetIsRelay ( );
    void PutIsRelay (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RestrictionType (
        /*[out,retval]*/ enum AgECnCnstrRestriction * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRestrictionType (
        /*[in]*/ enum AgECnCnstrRestriction Restriction ) = 0;
      virtual HRESULT __stdcall get_Restriction (
        /*[out,retval]*/ struct IAgCnCnstrRestriction * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsRelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("c5ca5fd7-1a27-4b69-9582-40d32b3efb3e"))
IAgCnConstraints : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRestrictionType))
    enum AgECnCnstrRestriction RestrictionType;
    __declspec(property(get=GetRestriction))
    IAgCnCnstrRestrictionPtr Restriction;
    __declspec(property(get=GetIsRelay,put=PutIsRelay))
    VARIANT_BOOL IsRelay;

    //
    // Wrapper methods for error-handling
    //

    enum AgECnCnstrRestriction GetRestrictionType ( );
    HRESULT SetRestrictionType (
        enum AgECnCnstrRestriction Restriction );
    IAgCnCnstrRestrictionPtr GetRestriction ( );
    VARIANT_BOOL GetIsRelay ( );
    void PutIsRelay (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RestrictionType (
        /*[out,retval]*/ enum AgECnCnstrRestriction * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRestrictionType (
        /*[in]*/ enum AgECnCnstrRestriction Restriction ) = 0;
      virtual HRESULT __stdcall get_Restriction (
        /*[out,retval]*/ struct IAgCnCnstrRestriction * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsRelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("cf2129ea-87f1-4c3f-a399-689d354897d3"))
AgCnCnstrObjectRestriction;
    // [ default ] interface _IAgCnCnstrObjectRestriction
    // interface IAgCnCnstrObjectRestriction
    // interface IAgCnCnstrRestriction

struct __declspec(uuid("71a4cf0f-4d55-49ac-a65d-a8b82daff4be"))
_IAgCnCnstrObjectRestriction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfObjects,put=PutNumberOfObjects))
    long NumberOfObjects;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfObjects ( );
    void PutNumberOfObjects (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfObjects (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfObjects (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("8cfd9a95-a08e-45e1-b1c2-472d117176a9"))
IAgCnCnstrObjectRestriction : IAgCnCnstrRestriction
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberOfObjects,put=PutNumberOfObjects))
    long NumberOfObjects;

    //
    // Wrapper methods for error-handling
    //

    long GetNumberOfObjects ( );
    void PutNumberOfObjects (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberOfObjects (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfObjects (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("e56fa28f-e4c3-4fcb-ad0f-45509f0f97b4"))
AgCnCnstrRestriction;
    // [ default ] interface _IAgCnCnstrRestriction
    // interface IAgCnCnstrRestriction

struct __declspec(uuid("3532c303-117e-4acb-a441-9b956073dbde"))
_IAgCnCnstrRestriction : IDispatch
{};

struct __declspec(uuid("2bc8d2f5-b752-4339-a3fb-bae3bc55354c"))
AgConstellation;
    // [ default ] interface _IAgConstellation
    // interface IAgConstellation
    // interface IAgStkObject
    // interface IAgLifetimeInformation

struct __declspec(uuid("dbe4dec2-1609-4944-8f98-f132ce5282cc"))
IAgCnGraphics : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT HideGraphics ( );
    HRESULT RestoreGraphics ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_HideGraphics ( ) = 0;
      virtual HRESULT __stdcall raw_RestoreGraphics ( ) = 0;
};

struct __declspec(uuid("55d2aabb-1929-4452-889b-54b0f0bb3377"))
AgCnGraphics;
    // [ default ] interface _IAgCnGraphics
    // interface IAgCnGraphics

struct __declspec(uuid("692bae20-1e32-4e6c-9703-27e679f28da3"))
_IAgCnGraphics : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT HideGraphics ( );
    HRESULT RestoreGraphics ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_HideGraphics ( ) = 0;
      virtual HRESULT __stdcall raw_RestoreGraphics ( ) = 0;
};

struct __declspec(uuid("f35a38e5-62f6-4363-970a-613e722a3fd1"))
AgEventDetectionNoSubSampling;
    // [ default ] interface _IAgEventDetectionNoSubSampling
    // interface IAgEventDetectionStrategy
    // interface IAgEventDetectionNoSubSampling

struct __declspec(uuid("3c736f86-4d50-41ee-8774-53a7874e5290"))
_IAgEventDetectionNoSubSampling : IDispatch
{};

struct __declspec(uuid("5f6acdf8-c37b-4318-8d95-8c684665c857"))
IAgEventDetectionNoSubSampling : IAgEventDetectionStrategy
{};

struct __declspec(uuid("94a898d3-e9c1-4d53-944c-4ee27a797fd1"))
AgEventDetectionSubSampling;
    // [ default ] interface _IAgEventDetectionSubSampling
    // interface IAgEventDetectionStrategy
    // interface IAgEventDetectionSubSampling

struct __declspec(uuid("063f0876-9f4e-4480-b7e7-19679b3f95ea"))
_IAgEventDetectionSubSampling : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeConvergence,put=PutTimeConvergence))
    double TimeConvergence;
    __declspec(property(get=GetAbsValueConvergence,put=PutAbsValueConvergence))
    double AbsValueConvergence;
    __declspec(property(get=GetRelValueConvergence,put=PutRelValueConvergence))
    double RelValueConvergence;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeConvergence ( );
    void PutTimeConvergence (
        double pVal );
    double GetAbsValueConvergence ( );
    void PutAbsValueConvergence (
        double pVal );
    double GetRelValueConvergence ( );
    void PutRelValueConvergence (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AbsValueConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AbsValueConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RelValueConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RelValueConvergence (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b9e2addb-d8b4-4ab4-a359-6a76ded7d0b3"))
IAgEventDetectionSubSampling : IAgEventDetectionStrategy
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeConvergence,put=PutTimeConvergence))
    double TimeConvergence;
    __declspec(property(get=GetAbsValueConvergence,put=PutAbsValueConvergence))
    double AbsValueConvergence;
    __declspec(property(get=GetRelValueConvergence,put=PutRelValueConvergence))
    double RelValueConvergence;

    //
    // Wrapper methods for error-handling
    //

    double GetTimeConvergence ( );
    void PutTimeConvergence (
        double pVal );
    double GetAbsValueConvergence ( );
    void PutAbsValueConvergence (
        double pVal );
    double GetRelValueConvergence ( );
    void PutRelValueConvergence (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TimeConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AbsValueConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AbsValueConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RelValueConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RelValueConvergence (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("12388432-24f3-4a78-914e-88a123a1a084"))
AgSamplingMethodAdaptive;
    // [ default ] interface _IAgSamplingMethodAdaptive
    // interface IAgSamplingMethodStrategy
    // interface IAgSamplingMethodAdaptive

struct __declspec(uuid("61e4bb9b-8d25-4cd0-9046-f678aeb90273"))
_IAgSamplingMethodAdaptive : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMinTimeStep,put=PutMinTimeStep))
    double MinTimeStep;

    //
    // Wrapper methods for error-handling
    //

    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMinTimeStep ( );
    void PutMinTimeStep (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinTimeStep (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("4d59435e-d926-42c7-9d76-6f8261ff99be"))
IAgSamplingMethodAdaptive : IAgSamplingMethodStrategy
{
    //
    // Property data
    //

    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetMinTimeStep,put=PutMinTimeStep))
    double MinTimeStep;

    //
    // Wrapper methods for error-handling
    //

    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetMinTimeStep ( );
    void PutMinTimeStep (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinTimeStep (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("9089a7eb-9771-4c71-83dc-131e808236f7"))
AgSamplingMethodFixedStep;
    // [ default ] interface _IAgSamplingMethodFixedStep
    // interface IAgSamplingMethodStrategy
    // interface IAgSamplingMethodFixedStep

struct __declspec(uuid("aec04325-154e-414f-99f5-3120d54d1d28"))
_IAgSamplingMethodFixedStep : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixedTimeStep,put=PutFixedTimeStep))
    double FixedTimeStep;
    __declspec(property(get=GetTimeBound,put=PutTimeBound))
    double TimeBound;

    //
    // Wrapper methods for error-handling
    //

    double GetFixedTimeStep ( );
    void PutFixedTimeStep (
        double pVal );
    double GetTimeBound ( );
    void PutTimeBound (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FixedTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FixedTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeBound (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeBound (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("4783a350-ff4e-4d95-9d0a-75ba2453e7c4"))
IAgSamplingMethodFixedStep : IAgSamplingMethodStrategy
{
    //
    // Property data
    //

    __declspec(property(get=GetFixedTimeStep,put=PutFixedTimeStep))
    double FixedTimeStep;
    __declspec(property(get=GetTimeBound,put=PutTimeBound))
    double TimeBound;

    //
    // Wrapper methods for error-handling
    //

    double GetFixedTimeStep ( );
    void PutFixedTimeStep (
        double pVal );
    double GetTimeBound ( );
    void PutTimeBound (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FixedTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FixedTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeBound (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeBound (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("9c60e6c1-1a75-44b1-b537-fbf6afe77de0"))
AgSnAccessAdvanced;
    // [ default ] interface _IAgSnAccessAdvanced
    // interface IAgAccessAdvanced
    // interface IAgSnAccessAdvanced

struct __declspec(uuid("829c836e-a58d-4737-8973-53c4b8d1223f"))
_IAgSnAccessAdvanced : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAberrationType,put=PutAberrationType))
    enum AgEAberrationType AberrationType;
    __declspec(property(get=GetTimeDelayConvergence,put=PutTimeDelayConvergence))
    double TimeDelayConvergence;
    __declspec(property(get=GetEventDetection))
    IAgAccessEventDetectionPtr EventDetection;
    __declspec(property(get=GetSampling))
    IAgAccessSamplingPtr Sampling;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAberrationType GetAberrationType ( );
    void PutAberrationType (
        enum AgEAberrationType pVal );
    double GetTimeDelayConvergence ( );
    void PutTimeDelayConvergence (
        double pVal );
    IAgAccessEventDetectionPtr GetEventDetection ( );
    IAgAccessSamplingPtr GetSampling ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AberrationType (
        /*[out,retval]*/ enum AgEAberrationType * pVal ) = 0;
      virtual HRESULT __stdcall put_AberrationType (
        /*[in]*/ enum AgEAberrationType pVal ) = 0;
      virtual HRESULT __stdcall get_TimeDelayConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeDelayConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EventDetection (
        /*[out,retval]*/ struct IAgAccessEventDetection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgAccessSampling * * ppVal ) = 0;
};

struct __declspec(uuid("5bb547d9-21f4-47c3-ba0e-e7ed688777e1"))
AgVeAccessAdvanced;
    // [ default ] interface _IAgVeAccessAdvanced
    // interface IAgAccessAdvanced
    // interface IAgVeAccessAdvanced

struct __declspec(uuid("46db3a5b-c329-4e59-8b51-1d2e2242e47a"))
_IAgVeAccessAdvanced : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAberrationType,put=PutAberrationType))
    enum AgEAberrationType AberrationType;
    __declspec(property(get=GetTimeDelayConvergence,put=PutTimeDelayConvergence))
    double TimeDelayConvergence;
    __declspec(property(get=GetEventDetection))
    IAgAccessEventDetectionPtr EventDetection;
    __declspec(property(get=GetSampling))
    IAgAccessSamplingPtr Sampling;
    __declspec(property(get=GetUseLightTimeDelay,put=PutUseLightTimeDelay))
    VARIANT_BOOL UseLightTimeDelay;
    __declspec(property(get=GetTimeSense,put=PutTimeSense))
    enum AgEIvTimeSense TimeSense;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAberrationType GetAberrationType ( );
    void PutAberrationType (
        enum AgEAberrationType pVal );
    double GetTimeDelayConvergence ( );
    void PutTimeDelayConvergence (
        double pVal );
    IAgAccessEventDetectionPtr GetEventDetection ( );
    IAgAccessSamplingPtr GetSampling ( );
    VARIANT_BOOL GetUseLightTimeDelay ( );
    void PutUseLightTimeDelay (
        VARIANT_BOOL pVal );
    enum AgEIvTimeSense GetTimeSense ( );
    void PutTimeSense (
        enum AgEIvTimeSense pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AberrationType (
        /*[out,retval]*/ enum AgEAberrationType * pVal ) = 0;
      virtual HRESULT __stdcall put_AberrationType (
        /*[in]*/ enum AgEAberrationType pVal ) = 0;
      virtual HRESULT __stdcall get_TimeDelayConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeDelayConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EventDetection (
        /*[out,retval]*/ struct IAgAccessEventDetection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgAccessSampling * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimeSense (
        /*[out,retval]*/ enum AgEIvTimeSense * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeSense (
        /*[in]*/ enum AgEIvTimeSense pVal ) = 0;
};

struct __declspec(uuid("f5a31831-7303-4a74-84d7-aed5266050ca"))
AgAccessSampling;
    // [ default ] interface _IAgAccessSampling
    // interface IAgAccessSampling

struct __declspec(uuid("5830581f-d211-42b5-ac45-fe8b50552056"))
_IAgAccessSampling : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgESamplingMethod Type;
    __declspec(property(get=GetSupportedTypes))
    SAFEARRAY * SupportedTypes;
    __declspec(property(get=GetStrategy))
    IAgSamplingMethodStrategyPtr Strategy;

    //
    // Wrapper methods for error-handling
    //

    enum AgESamplingMethod GetType ( );
    HRESULT SetType (
        enum AgESamplingMethod SamplingMethod );
    VARIANT_BOOL IsTypeSupported (
        enum AgESamplingMethod SamplingMethod );
    SAFEARRAY * GetSupportedTypes ( );
    IAgSamplingMethodStrategyPtr GetStrategy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgESamplingMethod * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum AgESamplingMethod SamplingMethod ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgESamplingMethod SamplingMethod,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Strategy (
        /*[out,retval]*/ struct IAgSamplingMethodStrategy * * ppVal ) = 0;
};

struct __declspec(uuid("e094b68e-9d37-4e65-9c8a-49c39010a615"))
AgAccessEventDetection;
    // [ default ] interface _IAgAccessEventDetection
    // interface IAgAccessEventDetection

struct __declspec(uuid("32d46889-36ad-4cc8-bfc8-d3539cb99813"))
_IAgAccessEventDetection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEEventDetection Type;
    __declspec(property(get=GetSupportedTypes))
    SAFEARRAY * SupportedTypes;
    __declspec(property(get=GetStrategy))
    IAgEventDetectionStrategyPtr Strategy;

    //
    // Wrapper methods for error-handling
    //

    enum AgEEventDetection GetType ( );
    HRESULT SetType (
        enum AgEEventDetection EventDetection );
    VARIANT_BOOL IsTypeSupported (
        enum AgEEventDetection EventDetection );
    SAFEARRAY * GetSupportedTypes ( );
    IAgEventDetectionStrategyPtr GetStrategy ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEEventDetection * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum AgEEventDetection EventDetection ) = 0;
      virtual HRESULT __stdcall raw_IsTypeSupported (
        /*[in]*/ enum AgEEventDetection EventDetection,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Strategy (
        /*[out,retval]*/ struct IAgEventDetectionStrategy * * ppVal ) = 0;
};

struct __declspec(uuid("5c283b3f-d4ab-41c1-ac8f-5fe9a5d46d31"))
AgSnVOProjectionElement;
    // [ default ] interface _IAgSnVOProjectionElement
    // interface IAgSnVOProjectionElement

struct __declspec(uuid("31a5db47-79bc-46e3-a30c-d5e3f1041ffc"))
_IAgSnVOProjectionElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTime,put=PutTime))
    _variant_t Time;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetTime ( );
    void PutTime (
        const _variant_t & pVal );
    double GetDistance ( );
    void PutDistance (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("63081578-8f1e-4a47-8e7e-55e624a4ce95"))
AgSnVOSpaceProjectionCollection;
    // [ default ] interface IUnknown
    // interface IAgSnVOSpaceProjectionCollection

struct __declspec(uuid("67be9965-1518-464b-80e3-98e7e0a70dec"))
AgSnVOTargetProjectionCollection;
    // [ default ] interface IUnknown
    // interface IAgSnVOTargetProjectionCollection

struct __declspec(uuid("b800e292-b471-45a3-bf6b-d82e639145f0"))
AgCentralBodyTerrainCollectionElement;
    // [ default ] interface _IAgCentralBodyTerrainCollectionElement
    // interface IAgCentralBodyTerrainCollectionElement

struct __declspec(uuid("8443274f-0d59-49f8-a998-c81d99b5f26b"))
_IAgCentralBodyTerrainCollectionElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetTerrainCollection))
    IAgTerrainCollectionPtr TerrainCollection;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBody ( );
    IAgTerrainCollectionPtr GetTerrainCollection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TerrainCollection (
        /*[out,retval]*/ struct IAgTerrainCollection * * ppVal ) = 0;
};

struct __declspec(uuid("e71c62e9-5fd6-4ac7-ba78-1df21c5b6c2c"))
AgCentralBodyTerrainCollection;
    // [ default ] interface IUnknown
    // interface IAgCentralBodyTerrainCollection

struct __declspec(uuid("c742239d-035b-40af-ba07-d2f8b45cacec"))
AgSaExportTools;
    // [ default ] interface _IAgSaExportTools
    // interface IAgSaExportTools

struct __declspec(uuid("1111ab08-3423-492d-ba5a-5d1da3e17a47"))
_IAgSaExportTools : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisCCSDSExportToolPtr GetEphemerisCCSDSExportTool ( );
    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVeEphemerisSpiceExportToolPtr GetEphemerisSpiceExportTool ( );
    IAgVeEphemerisCode500ExportToolPtr GetEphemerisCode500ExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisCCSDSExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisCCSDSExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetEphemerisSpiceExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisSpiceExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetEphemerisCode500ExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisCode500ExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("ea9ed0ba-78df-4360-9963-3b612be5e9a4"))
AgLvExportTools;
    // [ default ] interface _IAgLvExportTools
    // interface IAgLvExportTools

struct __declspec(uuid("f2beb8ce-25ad-40f5-b02a-73e2e8a75057"))
_IAgLvExportTools : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("5d93dffd-cd57-43da-8192-40e874ec188d"))
AgGvExportTools;
    // [ default ] interface _IAgGvExportTools
    // interface IAgGvExportTools

struct __declspec(uuid("6a53d198-1e9b-47cc-8fc2-94c81e407682"))
_IAgGvExportTools : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("4b8ec830-c90f-4dd5-a8e5-60bef30d3307"))
AgMsExportTools;
    // [ default ] interface _IAgMsExportTools
    // interface IAgMsExportTools

struct __declspec(uuid("ccfcb05a-1aa9-48dc-ad56-ea2ddeeb953b"))
_IAgMsExportTools : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("0e21f1cc-9c20-425d-912c-3f52d36d1829"))
AgAcExportTools;
    // [ default ] interface _IAgAcExportTools
    // interface IAgAcExportTools

struct __declspec(uuid("5c3e5c9b-71c2-478e-a5aa-8d9d843d8385"))
_IAgAcExportTools : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("1826bd9c-ed7b-451f-a16a-3479fc10808f"))
AgShExportTools;
    // [ default ] interface _IAgShExportTools
    // interface IAgShExportTools

struct __declspec(uuid("a0cabf5b-ff92-4106-a50c-8f61ffca8cd2"))
_IAgShExportTools : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeEphemerisStkExportToolPtr GetEphemerisStkExportTool ( );
    IAgVePropDefExportToolPtr GetPropDefExportTool ( );
    IAgVeAttitudeExportToolPtr GetAttitudeExportTool ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEphemerisStkExportTool (
        /*[out,retval]*/ struct IAgVeEphemerisStkExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropDefExportTool (
        /*[out,retval]*/ struct IAgVePropDefExportTool * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAttitudeExportTool (
        /*[out,retval]*/ struct IAgVeAttitudeExportTool * * ppRetVal ) = 0;
};

struct __declspec(uuid("53aaac7a-0366-4687-aeea-350e6b07f1bd"))
AgVeEphemerisCode500ExportTool;
    // [ default ] interface _IAgVeEphemerisCode500ExportTool
    // interface IAgVeEphemerisCode500ExportTool

struct __declspec(uuid("9535c25e-faad-4a7a-b53d-ced25f74fddd"))
_IAgVeEphemerisCode500ExportTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSatID,put=PutSatID))
    long SatID;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;

    //
    // Wrapper methods for error-handling
    //

    long GetSatID ( );
    void PutSatID (
        long pVal );
    IAgExportToolStepSizePtr GetStepSize ( );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SatID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SatID (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("78781e18-d632-4357-afc4-64ea6bed939b"))
AgVeEphemerisCCSDSExportTool;
    // [ default ] interface _IAgVeEphemerisCCSDSExportTool
    // interface IAgVeEphemerisCCSDSExportTool

struct __declspec(uuid("49d6ff95-a2ad-4dad-825a-a2d9906cddb8"))
_IAgVeEphemerisCCSDSExportTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginator,put=PutOriginator))
    _bstr_t Originator;
    __declspec(property(get=GetObjectID,put=PutObjectID))
    _bstr_t ObjectID;
    __declspec(property(get=GetObjectName,put=PutObjectName))
    _bstr_t ObjectName;
    __declspec(property(get=GetCentralBodyName,put=PutCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetReferenceFrame,put=PutReferenceFrame))
    enum AgECCSDSReferenceFrame ReferenceFrame;
    __declspec(property(get=GetDateFormat,put=PutDateFormat))
    enum AgECCSDSDateFormat DateFormat;
    __declspec(property(get=GetEphemerisFormat,put=PutEphemerisFormat))
    enum AgECCSDSEphemFormat EphemerisFormat;
    __declspec(property(get=GetTimePrecision,put=PutTimePrecision))
    long TimePrecision;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;
    __declspec(property(get=GetReferenceFramesSupported))
    SAFEARRAY * ReferenceFramesSupported;
    __declspec(property(get=GetUseSatelliteCenterAndFrame,put=PutUseSatelliteCenterAndFrame))
    VARIANT_BOOL UseSatelliteCenterAndFrame;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetOriginator ( );
    void PutOriginator (
        _bstr_t pVal );
    _bstr_t GetObjectID ( );
    void PutObjectID (
        _bstr_t pVal );
    _bstr_t GetObjectName ( );
    void PutObjectName (
        _bstr_t pVal );
    _bstr_t GetCentralBodyName ( );
    void PutCentralBodyName (
        _bstr_t pVal );
    enum AgECCSDSReferenceFrame GetReferenceFrame ( );
    void PutReferenceFrame (
        enum AgECCSDSReferenceFrame pVal );
    enum AgECCSDSDateFormat GetDateFormat ( );
    void PutDateFormat (
        enum AgECCSDSDateFormat pVal );
    enum AgECCSDSEphemFormat GetEphemerisFormat ( );
    void PutEphemerisFormat (
        enum AgECCSDSEphemFormat pVal );
    long GetTimePrecision ( );
    void PutTimePrecision (
        long pVal );
    IAgExportToolStepSizePtr GetStepSize ( );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    SAFEARRAY * GetReferenceFramesSupported ( );
    VARIANT_BOOL GetUseSatelliteCenterAndFrame ( );
    void PutUseSatelliteCenterAndFrame (
        VARIANT_BOOL pRetVal );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Originator (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Originator (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ enum AgECCSDSReferenceFrame * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceFrame (
        /*[in]*/ enum AgECCSDSReferenceFrame pVal ) = 0;
      virtual HRESULT __stdcall get_DateFormat (
        /*[out,retval]*/ enum AgECCSDSDateFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_DateFormat (
        /*[in]*/ enum AgECCSDSDateFormat pVal ) = 0;
      virtual HRESULT __stdcall get_EphemerisFormat (
        /*[out,retval]*/ enum AgECCSDSEphemFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_EphemerisFormat (
        /*[in]*/ enum AgECCSDSEphemFormat pVal ) = 0;
      virtual HRESULT __stdcall get_TimePrecision (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TimePrecision (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceFramesSupported (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSatelliteCenterAndFrame (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSatelliteCenterAndFrame (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("73450c22-2d90-4908-85ea-6eb24b61ae62"))
AgVeEphemerisStkExportTool;
    // [ default ] interface _IAgVeEphemerisStkExportTool
    // interface IAgVeEphemerisStkExportTool

struct __declspec(uuid("00d51bea-7896-4961-be90-f2aa94137bb6"))
_IAgVeEphemerisStkExportTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateSystem,put=PutCoordinateSystem))
    enum AgEStkEphemCoordinateSystem CoordinateSystem;
    __declspec(property(get=GetCentralBodyName,put=PutCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetVersionFormat,put=PutVersionFormat))
    enum AgEExportToolVersionFormat VersionFormat;
    __declspec(property(get=GetIncludeInterp,put=PutIncludeInterp))
    VARIANT_BOOL IncludeInterp;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetCovarianceType,put=PutCovarianceType))
    enum AgEStkEphemCovarianceType CovarianceType;

    //
    // Wrapper methods for error-handling
    //

    enum AgEStkEphemCoordinateSystem GetCoordinateSystem ( );
    void PutCoordinateSystem (
        enum AgEStkEphemCoordinateSystem pVal );
    _bstr_t GetCentralBodyName ( );
    void PutCentralBodyName (
        _bstr_t pVal );
    enum AgEExportToolVersionFormat GetVersionFormat ( );
    void PutVersionFormat (
        enum AgEExportToolVersionFormat pVal );
    VARIANT_BOOL GetIncludeInterp ( );
    void PutIncludeInterp (
        VARIANT_BOOL pVal );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    IAgExportToolStepSizePtr GetStepSize ( );
    enum AgEStkEphemCovarianceType GetCovarianceType ( );
    void PutCovarianceType (
        enum AgEStkEphemCovarianceType pVal );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateSystem (
        /*[out,retval]*/ enum AgEStkEphemCoordinateSystem * pVal ) = 0;
      virtual HRESULT __stdcall put_CoordinateSystem (
        /*[in]*/ enum AgEStkEphemCoordinateSystem pVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VersionFormat (
        /*[out,retval]*/ enum AgEExportToolVersionFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_VersionFormat (
        /*[in]*/ enum AgEExportToolVersionFormat pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeInterp (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeInterp (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovarianceType (
        /*[out,retval]*/ enum AgEStkEphemCovarianceType * pVal ) = 0;
      virtual HRESULT __stdcall put_CovarianceType (
        /*[in]*/ enum AgEStkEphemCovarianceType pVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("74f486d5-f7d7-441c-b278-54190b4c7691"))
AgVeEphemerisSpiceExportTool;
    // [ default ] interface _IAgVeEphemerisSpiceExportTool
    // interface IAgVeEphemerisSpiceExportTool

struct __declspec(uuid("d84cbe45-e299-4bc0-8e30-56aca67b49fc"))
_IAgVeEphemerisSpiceExportTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCentralBodyName,put=PutCentralBodyName))
    _bstr_t CentralBodyName;
    __declspec(property(get=GetSatID,put=PutSatID))
    long SatID;
    __declspec(property(get=GetInterpolationType,put=PutInterpolationType))
    enum AgESpiceInterpolation InterpolationType;
    __declspec(property(get=GetInterpolation,put=PutInterpolation))
    long Interpolation;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCentralBodyName ( );
    void PutCentralBodyName (
        _bstr_t pVal );
    long GetSatID ( );
    void PutSatID (
        long pVal );
    enum AgESpiceInterpolation GetInterpolationType ( );
    void PutInterpolationType (
        enum AgESpiceInterpolation pVal );
    long GetInterpolation ( );
    void PutInterpolation (
        long pVal );
    IAgExportToolStepSizePtr GetStepSize ( );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CentralBodyName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SatID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SatID (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_InterpolationType (
        /*[out,retval]*/ enum AgESpiceInterpolation * pVal ) = 0;
      virtual HRESULT __stdcall put_InterpolationType (
        /*[in]*/ enum AgESpiceInterpolation pVal ) = 0;
      virtual HRESULT __stdcall get_Interpolation (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Interpolation (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("ddee6f71-2282-4594-81cd-30b509f5df7d"))
AgExportToolTimePeriod;
    // [ default ] interface _IAgExportToolTimePeriod
    // interface IAgExportToolTimePeriod

struct __declspec(uuid("aa8d6635-8317-4a19-b96c-e084b7938033"))
_IAgExportToolTimePeriod : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart,put=PutStart))
    _variant_t Start;
    __declspec(property(get=GetStop,put=PutStop))
    _variant_t Stop;
    __declspec(property(get=GetTimePeriodType,put=PutTimePeriodType))
    enum AgEExportToolTimePeriod TimePeriodType;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStart ( );
    void PutStart (
        const _variant_t & pVal );
    _variant_t GetStop ( );
    void PutStop (
        const _variant_t & pVal );
    enum AgEExportToolTimePeriod GetTimePeriodType ( );
    void PutTimePeriodType (
        enum AgEExportToolTimePeriod pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Stop (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriodType (
        /*[out,retval]*/ enum AgEExportToolTimePeriod * pVal ) = 0;
      virtual HRESULT __stdcall put_TimePeriodType (
        /*[in]*/ enum AgEExportToolTimePeriod pVal ) = 0;
};

struct __declspec(uuid("42cb3536-c4e5-4366-92c4-123ca042e97b"))
AgVeAttitudeExportTool;
    // [ default ] interface _IAgVeAttitudeExportTool
    // interface IAgVeAttitudeExportTool

struct __declspec(uuid("f699210c-61d7-46a7-b9a5-70e475ae6397"))
_IAgVeAttitudeExportTool : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordinateAxesType))
    enum AgEAttCoordinateAxes CoordinateAxesType;
    __declspec(property(get=GetCoordinateAxes))
    IAgVeCoordinateAxesPtr CoordinateAxes;
    __declspec(property(get=GetTimePeriod))
    IAgExportToolTimePeriodPtr TimePeriod;
    __declspec(property(get=GetInclude,put=PutInclude))
    enum AgEAttInclude Include;
    __declspec(property(get=GetVersionFormat,put=PutVersionFormat))
    enum AgEExportToolVersionFormat VersionFormat;
    __declspec(property(get=GetStepSize))
    IAgExportToolStepSizePtr StepSize;
    __declspec(property(get=GetSupportedCoordinateAxes))
    SAFEARRAY * SupportedCoordinateAxes;
    __declspec(property(get=GetCentralBodyName))
    _bstr_t CentralBodyName;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAttCoordinateAxes GetCoordinateAxesType ( );
    HRESULT SetCoordinateAxesType (
        enum AgEAttCoordinateAxes CoordinateAxes );
    IAgVeCoordinateAxesPtr GetCoordinateAxes ( );
    IAgExportToolTimePeriodPtr GetTimePeriod ( );
    enum AgEAttInclude GetInclude ( );
    void PutInclude (
        enum AgEAttInclude pVal );
    enum AgEExportToolVersionFormat GetVersionFormat ( );
    void PutVersionFormat (
        enum AgEExportToolVersionFormat pVal );
    IAgExportToolStepSizePtr GetStepSize ( );
    SAFEARRAY * GetSupportedCoordinateAxes ( );
    _bstr_t GetCentralBodyName ( );
    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CoordinateAxesType (
        /*[out,retval]*/ enum AgEAttCoordinateAxes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoordinateAxesType (
        /*[in]*/ enum AgEAttCoordinateAxes CoordinateAxes ) = 0;
      virtual HRESULT __stdcall get_CoordinateAxes (
        /*[out,retval]*/ struct IAgVeCoordinateAxes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgExportToolTimePeriod * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Include (
        /*[out,retval]*/ enum AgEAttInclude * pVal ) = 0;
      virtual HRESULT __stdcall put_Include (
        /*[in]*/ enum AgEAttInclude pVal ) = 0;
      virtual HRESULT __stdcall get_VersionFormat (
        /*[out,retval]*/ enum AgEExportToolVersionFormat * pVal ) = 0;
      virtual HRESULT __stdcall put_VersionFormat (
        /*[in]*/ enum AgEExportToolVersionFormat pVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ struct IAgExportToolStepSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SupportedCoordinateAxes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodyName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("9b572b79-921b-47ba-b3f7-e3c0dd500a53"))
AgVePropDefExportTool;
    // [ default ] interface _IAgVePropDefExportTool
    // interface IAgVePropDefExportTool

struct __declspec(uuid("069c9cb5-276b-4bc2-ac5a-90124f90fa24"))
_IAgVePropDefExportTool : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Export (
        _bstr_t Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
};

struct __declspec(uuid("d2d2292c-f5c6-4cb2-8554-1f3e962c9073"))
AgVeCoordinateAxesCustom;
    // [ default ] interface _IAgVeCoordinateAxesCustom
    // interface IAgVeCoordinateAxesCustom
    // interface IAgVeCoordinateAxes

struct __declspec(uuid("1643e57e-349b-4298-b009-dd56f04206c6"))
_IAgVeCoordinateAxesCustom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxesName,put=PutReferenceAxesName))
    _bstr_t ReferenceAxesName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReferenceAxesName ( );
    void PutReferenceAxesName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxesName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxesName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("b6538a5b-9aa2-443c-a2d8-7e8b7c3b5478"))
IAgVeCoordinateAxesCustom : IAgVeCoordinateAxes
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceAxesName,put=PutReferenceAxesName))
    _bstr_t ReferenceAxesName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetReferenceAxesName ( );
    void PutReferenceAxesName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceAxesName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceAxesName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("cfb49789-8a80-4963-835e-82d40325c33e"))
AgExportToolStepSize;
    // [ default ] interface _IAgExportToolStepSize
    // interface IAgExportToolStepSize

struct __declspec(uuid("3391b201-2295-4572-a5f3-0fbb027b141c"))
_IAgExportToolStepSize : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetStepSizeType,put=PutStepSizeType))
    enum AgEExportToolStepSize StepSizeType;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutValue (
        double pVal );
    enum AgEExportToolStepSize GetStepSizeType ( );
    void PutStepSizeType (
        enum AgEExportToolStepSize pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StepSizeType (
        /*[out,retval]*/ enum AgEExportToolStepSize * pVal ) = 0;
      virtual HRESULT __stdcall put_StepSizeType (
        /*[in]*/ enum AgEExportToolStepSize pVal ) = 0;
};

struct __declspec(uuid("27f25351-0506-426f-bffd-78e5d670f457"))
AgPctCmpltEventArgs;
    // [ default ] interface IUnknown
    // interface IAgPctCmpltEventArgs

struct __declspec(uuid("7e9978d1-32d1-4e44-9c8c-7dd91969a45c"))
AgStkObjectChangedEventArgs;
    // [ default ] interface IUnknown
    // interface IAgStkObjectChangedEventArgs

struct __declspec(uuid("aad09f22-f855-4b25-b6f2-e8512509d397"))
AgVeEclipsingBodies;
    // [ default ] interface _IAgVeEclipsingBodies
    // interface IAgVeEclipsingBodies

struct __declspec(uuid("1032e9a5-037b-4c3e-a803-dc254239bacc"))
_IAgVeEclipsingBodies : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableEclipsingBodies))
    SAFEARRAY * AvailableEclipsingBodies;
    __declspec(property(get=GetAssignedEclipsingBodies))
    SAFEARRAY * AssignedEclipsingBodies;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetAvailableEclipsingBodies ( );
    SAFEARRAY * GetAssignedEclipsingBodies ( );
    VARIANT_BOOL IsEclipsingBodyAssigned (
        _bstr_t EclipsingBody );
    HRESULT AssignEclipsingBody (
        _bstr_t EclipsingBody );
    HRESULT RemoveEclipsingBody (
        _bstr_t EclipsingBody );
    HRESULT RemoveAllEclipsingBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AvailableEclipsingBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AssignedEclipsingBodies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsEclipsingBodyAssigned (
        /*[in]*/ BSTR EclipsingBody,
        /*[out,retval]*/ VARIANT_BOOL * pIsAssigned ) = 0;
      virtual HRESULT __stdcall raw_AssignEclipsingBody (
        /*[in]*/ BSTR EclipsingBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveEclipsingBody (
        /*[in]*/ BSTR EclipsingBody ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllEclipsingBodies ( ) = 0;
};

struct __declspec(uuid("ef2ee51d-de1a-4600-998c-3bee3d8bed49"))
AgLocationCrdnPoint;
    // [ default ] interface _IAgLocationCrdnPoint
    // interface IAgLocationCrdnPoint

struct __declspec(uuid("07d1dc94-f4de-4777-9d66-433058fff209"))
_IAgLocationCrdnPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPointPath,put=PutPointPath))
    _bstr_t PointPath;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointPath ( );
    void PutPointPath (
        _bstr_t pPoint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointPath (
        /*[out,retval]*/ BSTR * pPoint ) = 0;
      virtual HRESULT __stdcall put_PointPath (
        /*[in]*/ BSTR pPoint ) = 0;
};

struct __declspec(uuid("74751379-c7cb-4597-addf-d570371000be"))
IAgLocationCrdnPoint : STKUtil::IAgLocationData
{
    //
    // Property data
    //

    __declspec(property(get=GetPointPath,put=PutPointPath))
    _bstr_t PointPath;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointPath ( );
    void PutPointPath (
        _bstr_t pPoint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointPath (
        /*[out,retval]*/ BSTR * pPoint ) = 0;
      virtual HRESULT __stdcall put_PointPath (
        /*[in]*/ BSTR pPoint ) = 0;
};

struct __declspec(uuid("04eefdf2-ddb5-429e-aff9-4e4504618cb1"))
AgTimePeriod;
    // [ default ] interface _IAgTimePeriod
    // interface IAgAccessInterval
    // interface IAgTimePeriod

struct __declspec(uuid("97a874ca-7ae1-499c-9591-6757ec250e2f"))
_IAgTimePeriod : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    IAgTimePeriodValuePtr StartTime;
    __declspec(property(get=GetStopTime))
    IAgTimePeriodValuePtr StopTime;
    __declspec(property(get=GetDuration,put=PutDuration))
    _variant_t Duration;

    //
    // Wrapper methods for error-handling
    //

    IAgTimePeriodValuePtr GetStartTime ( );
    IAgTimePeriodValuePtr GetStopTime ( );
    _variant_t GetDuration ( );
    void PutDuration (
        const _variant_t & pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ struct IAgTimePeriodValue * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ struct IAgTimePeriodValue * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ VARIANT pRetVal ) = 0;
};

struct __declspec(uuid("e26c805a-c72b-473e-992c-7f2147e0e65e"))
AgTimePeriodValue;
    // [ default ] interface _IAgTimePeriodValue
    // interface IAgTimePeriodValue

struct __declspec(uuid("dc2837b3-c46e-4616-8d91-580f1662d6e8"))
_IAgTimePeriodValue : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetType,put=PutType))
    enum AgETimePeriodValueType Type;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pRetVal );
    enum AgETimePeriodValueType GetType ( );
    void PutType (
        enum AgETimePeriodValueType pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgETimePeriodValueType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum AgETimePeriodValueType pRetVal ) = 0;
};

struct __declspec(uuid("9b14c3fd-0f8a-415a-997f-b0aa1823910d"))
AgSpatialState;
    // [ default ] interface _IAgSpatialState
    // interface IAgSpatialState

struct __declspec(uuid("7c760637-679d-4705-abe1-9b91abfcf77b"))
_IAgSpatialState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFixedPosition))
    STKUtil::IAgPositionPtr FixedPosition;
    __declspec(property(get=GetInertialPosition))
    STKUtil::IAgPositionPtr InertialPosition;
    __declspec(property(get=GetInertialOrientation))
    STKUtil::IAgOrientationPtr InertialOrientation;
    __declspec(property(get=GetFixedOrientation))
    STKUtil::IAgOrientationPtr FixedOrientation;
    __declspec(property(get=GetCurrentTime))
    _variant_t CurrentTime;
    __declspec(property(get=GetCentralBody))
    _bstr_t CentralBody;
    __declspec(property(get=GetStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetIsAvailable))
    VARIANT_BOOL IsAvailable;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgPositionPtr GetFixedPosition ( );
    STKUtil::IAgPositionPtr GetInertialPosition ( );
    STKUtil::IAgOrientationPtr GetInertialOrientation ( );
    STKUtil::IAgOrientationPtr GetFixedOrientation ( );
    _variant_t GetCurrentTime ( );
    _bstr_t GetCentralBody ( );
    _variant_t GetStartTime ( );
    _variant_t GetStopTime ( );
    VARIANT_BOOL GetIsAvailable ( );
    HRESULT QueryVelocityFixed (
        double * pVx,
        double * pVy,
        double * pVz );
    HRESULT QueryVelocityInertial (
        double * pVx,
        double * pVy,
        double * pVz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FixedPosition (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InertialPosition (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InertialOrientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FixedOrientation (
        /*[out,retval]*/ struct STKUtil::IAgOrientation * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBody (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_QueryVelocityFixed (
        /*[out]*/ double * pVx,
        /*[out]*/ double * pVy,
        /*[out]*/ double * pVz ) = 0;
      virtual HRESULT __stdcall raw_QueryVelocityInertial (
        /*[out]*/ double * pVx,
        /*[out]*/ double * pVy,
        /*[out]*/ double * pVz ) = 0;
};

struct __declspec(uuid("2f2cee6f-332d-4465-934d-a7aaf499323a"))
AgVeSpatialInfo;
    // [ default ] interface _IAgVeSpatialInfo
    // interface IAgVeSpatialInfo

struct __declspec(uuid("f67955c9-7b8e-4fc5-b76e-9939712a5ad3"))
_IAgVeSpatialInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRecycle))
    VARIANT_BOOL Recycle;

    //
    // Wrapper methods for error-handling
    //

    IAgSpatialStatePtr GetState (
        const _variant_t & Time );
    VARIANT_BOOL GetRecycle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetState (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgSpatialState * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Recycle (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("c96aaba7-ff2d-454e-aa1b-2e8c4c96efdb"))
AgOnePtAccess;
    // [ default ] interface _IAgOnePtAccess
    // interface IAgOnePtAccess

struct __declspec(uuid("5c105373-706b-4b34-981f-5f96a3f1a23c"))
_IAgOnePtAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryOption,put=PutSummaryOption))
    enum AgEOnePtAccessSummary SummaryOption;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStepSize,put=PutStepSize))
    double StepSize;
    __declspec(property(get=GetOutputToFile,put=PutOutputToFile))
    VARIANT_BOOL OutputToFile;
    __declspec(property(get=GetOutputFile,put=PutOutputFile))
    _bstr_t OutputFile;

    //
    // Wrapper methods for error-handling
    //

    IAgOnePtAccessResultCollectionPtr Compute ( );
    HRESULT Remove ( );
    enum AgEOnePtAccessSummary GetSummaryOption ( );
    void PutSummaryOption (
        enum AgEOnePtAccessSummary pVal );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pStartTime );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pStopTime );
    double GetStepSize ( );
    void PutStepSize (
        double pStepSize );
    VARIANT_BOOL GetOutputToFile ( );
    void PutOutputToFile (
        VARIANT_BOOL pRetVal );
    _bstr_t GetOutputFile ( );
    void PutOutputFile (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Compute (
        /*[out,retval]*/ struct IAgOnePtAccessResultCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove ( ) = 0;
      virtual HRESULT __stdcall get_SummaryOption (
        /*[out,retval]*/ enum AgEOnePtAccessSummary * pVal ) = 0;
      virtual HRESULT __stdcall put_SummaryOption (
        /*[in]*/ enum AgEOnePtAccessSummary pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pStartTime ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pStartTime ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pStopTime ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pStopTime ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ double * pStepSize ) = 0;
      virtual HRESULT __stdcall put_StepSize (
        /*[in]*/ double pStepSize ) = 0;
      virtual HRESULT __stdcall get_OutputToFile (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputToFile (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_OutputFile (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_OutputFile (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("333cf480-2eb9-4c92-a6c3-09dbdc3f1e7d"))
AgOnePtAccessResultCollection;
    // [ default ] interface IUnknown
    // interface IAgOnePtAccessResultCollection

struct __declspec(uuid("631f5ff6-8e7f-4685-82d7-3e65ea4bd154"))
AgOnePtAccessResult;
    // [ default ] interface _IAgOnePtAccessResult
    // interface IAgOnePtAccessResult

struct __declspec(uuid("3bfe3f96-2059-494f-a062-2474570d1317"))
_IAgOnePtAccessResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAccessSatisfied))
    VARIANT_BOOL AccessSatisfied;
    __declspec(property(get=GetTime))
    _variant_t Time;
    __declspec(property(get=GetConstraints))
    IAgOnePtAccessConstraintCollectionPtr Constraints;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAccessSatisfied ( );
    _variant_t GetTime ( );
    IAgOnePtAccessConstraintCollectionPtr GetConstraints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AccessSatisfied (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Constraints (
        /*[out,retval]*/ struct IAgOnePtAccessConstraintCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("b5ccae9d-5a86-4f63-957f-bd79cebb7ef2"))
AgOnePtAccessConstraintCollection;
    // [ default ] interface IUnknown
    // interface IAgOnePtAccessConstraintCollection

struct __declspec(uuid("3d897632-217f-4346-9687-4c24492f7f29"))
AgOnePtAccessConstraint;
    // [ default ] interface _IAgOnePtAccessConstraint
    // interface IAgOnePtAccessConstraint

struct __declspec(uuid("2b3232fc-ea75-42d1-9ca0-ce449f07096d"))
_IAgOnePtAccessConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatus))
    enum AgEOnePtAccessStatus Status;
    __declspec(property(get=GetConstraint))
    enum AgEAccessConstraints Constraint;
    __declspec(property(get=GetValue))
    double Value;
    __declspec(property(get=GetObjectPath))
    _bstr_t ObjectPath;

    //
    // Wrapper methods for error-handling
    //

    enum AgEOnePtAccessStatus GetStatus ( );
    enum AgEAccessConstraints GetConstraint ( );
    double GetValue ( );
    _bstr_t GetObjectPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum AgEOnePtAccessStatus * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[out,retval]*/ enum AgEAccessConstraints * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRange ) = 0;
      virtual HRESULT __stdcall get_ObjectPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("7932425a-5b3b-4305-ba2f-76aabb405bda"))
AgVePropagatorRealtime;
    // [ default ] interface _IAgVePropagatorRealtime
    // interface IAgVePropagatorRealtime

enum AgELookAheadPropagator
{
    eLookAheadUnknown = -1,
    eLookAheadHoldCBIPosition = 0,
    eLookAheadHoldCBFPosition = 1,
    eLookAheadTwoBody = 2,
    eLookAheadJ2Perturbation = 3,
    eLookAheadJ4Perturbation = 4,
    eLookAheadDeadReckon = 5,
    eLookAheadBallistic = 6
};

struct __declspec(uuid("4696526e-a5e1-407c-b522-9a163d7da2ff"))
IAgVeRealtimeCartesianPoints : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddPosition (
        const _variant_t & Time,
        double X,
        double Y,
        double Z );
    HRESULT Add (
        const _variant_t & Time,
        double X,
        double Y,
        double Z,
        double Vx,
        double Vy,
        double Vz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPosition (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double Vx,
        /*[in]*/ double Vy,
        /*[in]*/ double Vz ) = 0;
};

struct __declspec(uuid("e82ff7d0-4ee6-470b-9d3d-7b5ead5f3f67"))
IAgVeRealtimeLLAHPSPoints : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Add (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt,
        double Heading,
        double Pitch,
        double Speed );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[in]*/ double Heading,
        /*[in]*/ double Pitch,
        /*[in]*/ double Speed ) = 0;
};

struct __declspec(uuid("61b6d1c1-0e77-4a3b-a921-13b1934aafb8"))
IAgVeRealtimeLLAPoints : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddPosition (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    HRESULT Add (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt,
        double LatRate,
        double LonRate,
        double AltRate );
    HRESULT AddPositionBatch (
        SAFEARRAY * * Times,
        SAFEARRAY * * Lats,
        SAFEARRAY * * Lons,
        SAFEARRAY * * Alts );
    HRESULT AddBatch (
        SAFEARRAY * * Times,
        SAFEARRAY * * Lats,
        SAFEARRAY * * Lons,
        SAFEARRAY * * Alts,
        SAFEARRAY * * LatRates,
        SAFEARRAY * * LonRates,
        SAFEARRAY * * AltRates );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPosition (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[in]*/ double LatRate,
        /*[in]*/ double LonRate,
        /*[in]*/ double AltRate ) = 0;
      virtual HRESULT __stdcall raw_AddPositionBatch (
        /*[in]*/ SAFEARRAY * * Times,
        /*[in]*/ SAFEARRAY * * Lats,
        /*[in]*/ SAFEARRAY * * Lons,
        /*[in]*/ SAFEARRAY * * Alts ) = 0;
      virtual HRESULT __stdcall raw_AddBatch (
        /*[in]*/ SAFEARRAY * * Times,
        /*[in]*/ SAFEARRAY * * Lats,
        /*[in]*/ SAFEARRAY * * Lons,
        /*[in]*/ SAFEARRAY * * Alts,
        /*[in]*/ SAFEARRAY * * LatRates,
        /*[in]*/ SAFEARRAY * * LonRates,
        /*[in]*/ SAFEARRAY * * AltRates ) = 0;
};

struct __declspec(uuid("4594a54f-e23e-48f9-8a82-58d9b19f77c4"))
IAgVeRealtimeUTMPoints : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddPosition (
        const _variant_t & Time,
        _bstr_t ZoneStr,
        double Easting,
        double Northing,
        double Alt );
    HRESULT Add (
        const _variant_t & Time,
        _bstr_t ZoneStr,
        double Easting,
        double Northing,
        double Alt,
        double LonRate,
        double LatRate,
        double AltRate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPosition (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR ZoneStr,
        /*[in]*/ double Easting,
        /*[in]*/ double Northing,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR ZoneStr,
        /*[in]*/ double Easting,
        /*[in]*/ double Northing,
        /*[in]*/ double Alt,
        /*[in]*/ double LonRate,
        /*[in]*/ double LatRate,
        /*[in]*/ double AltRate ) = 0;
};

struct __declspec(uuid("b225af15-24e1-41df-9c56-a1b724a88844"))
IAgVeRealtimePointBuilder : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetB1950))
    IAgVeRealtimeCartesianPointsPtr B1950;
    __declspec(property(get=GetECF))
    IAgVeRealtimeCartesianPointsPtr ECF;
    __declspec(property(get=GetECI))
    IAgVeRealtimeCartesianPointsPtr ECI;
    __declspec(property(get=GetLLAHPS))
    IAgVeRealtimeLLAHPSPointsPtr LLAHPS;
    __declspec(property(get=GetLLA))
    IAgVeRealtimeLLAPointsPtr LLA;
    __declspec(property(get=GetAGL_LLA))
    IAgVeRealtimeLLAPointsPtr AGL_LLA;
    __declspec(property(get=GetMSL_LLA))
    IAgVeRealtimeLLAPointsPtr MSL_LLA;
    __declspec(property(get=GetUTM))
    IAgVeRealtimeUTMPointsPtr UTM;

    //
    // Wrapper methods for error-handling
    //

    IAgVeRealtimeCartesianPointsPtr GetB1950 ( );
    IAgVeRealtimeCartesianPointsPtr GetECF ( );
    IAgVeRealtimeCartesianPointsPtr GetECI ( );
    IAgVeRealtimeLLAHPSPointsPtr GetLLAHPS ( );
    IAgVeRealtimeLLAPointsPtr GetLLA ( );
    IAgVeRealtimeLLAPointsPtr GetAGL_LLA ( );
    IAgVeRealtimeLLAPointsPtr GetMSL_LLA ( );
    IAgVeRealtimeUTMPointsPtr GetUTM ( );
    IAgVeRealtimeCartesianPointsPtr GetPointsInFrame (
        _bstr_t ReferenceFrame );
    HRESULT RemoveAllPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_B1950 (
        /*[out,retval]*/ struct IAgVeRealtimeCartesianPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ECF (
        /*[out,retval]*/ struct IAgVeRealtimeCartesianPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ECI (
        /*[out,retval]*/ struct IAgVeRealtimeCartesianPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LLAHPS (
        /*[out,retval]*/ struct IAgVeRealtimeLLAHPSPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LLA (
        /*[out,retval]*/ struct IAgVeRealtimeLLAPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGL_LLA (
        /*[out,retval]*/ struct IAgVeRealtimeLLAPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MSL_LLA (
        /*[out,retval]*/ struct IAgVeRealtimeLLAPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UTM (
        /*[out,retval]*/ struct IAgVeRealtimeUTMPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPointsInFrame (
        /*[in]*/ BSTR ReferenceFrame,
        /*[out,retval]*/ struct IAgVeRealtimeCartesianPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllPoints ( ) = 0;
};

struct __declspec(uuid("00ec60b1-e36d-4a51-9480-887825d3abc4"))
_IAgVePropagatorRealtime : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDuration))
    IAgVeDurationPtr Duration;
    __declspec(property(get=GetInterpolationOrder,put=PutInterpolationOrder))
    long InterpolationOrder;
    __declspec(property(get=GetLookAheadPropagator,put=PutLookAheadPropagator))
    enum AgELookAheadPropagator LookAheadPropagator;
    __declspec(property(get=GetSupportedLookAheadPropagators))
    SAFEARRAY * SupportedLookAheadPropagators;
    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;
    __declspec(property(get=GetTimeoutGap,put=PutTimeoutGap))
    double TimeoutGap;
    __declspec(property(get=GetPointBuilder))
    IAgVeRealtimePointBuilderPtr PointBuilder;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    IAgVeDurationPtr GetDuration ( );
    long GetInterpolationOrder ( );
    void PutInterpolationOrder (
        long pVal );
    enum AgELookAheadPropagator GetLookAheadPropagator ( );
    void PutLookAheadPropagator (
        enum AgELookAheadPropagator pVal );
    SAFEARRAY * GetSupportedLookAheadPropagators ( );
    VARIANT_BOOL IsLookAheadPropagatorSupported (
        enum AgELookAheadPropagator Propagator );
    double GetTimeStep ( );
    void PutTimeStep (
        double pVal );
    double GetTimeoutGap ( );
    void PutTimeoutGap (
        double pVal );
    IAgVeRealtimePointBuilderPtr GetPointBuilder ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ struct IAgVeDuration * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InterpolationOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_InterpolationOrder (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LookAheadPropagator (
        /*[out,retval]*/ enum AgELookAheadPropagator * pVal ) = 0;
      virtual HRESULT __stdcall put_LookAheadPropagator (
        /*[in]*/ enum AgELookAheadPropagator pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedLookAheadPropagators (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsLookAheadPropagatorSupported (
        /*[in]*/ enum AgELookAheadPropagator Propagator,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeoutGap (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeoutGap (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointBuilder (
        /*[out,retval]*/ struct IAgVeRealtimePointBuilder * * ppRetVal ) = 0;
};

struct __declspec(uuid("88e9b13d-21df-4153-86dc-9936bed49ed7"))
IAgVePropagatorRealtime : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetDuration))
    IAgVeDurationPtr Duration;
    __declspec(property(get=GetInterpolationOrder,put=PutInterpolationOrder))
    long InterpolationOrder;
    __declspec(property(get=GetLookAheadPropagator,put=PutLookAheadPropagator))
    enum AgELookAheadPropagator LookAheadPropagator;
    __declspec(property(get=GetSupportedLookAheadPropagators))
    SAFEARRAY * SupportedLookAheadPropagators;
    __declspec(property(get=GetTimeStep,put=PutTimeStep))
    double TimeStep;
    __declspec(property(get=GetTimeoutGap,put=PutTimeoutGap))
    double TimeoutGap;
    __declspec(property(get=GetPointBuilder))
    IAgVeRealtimePointBuilderPtr PointBuilder;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    IAgVeDurationPtr GetDuration ( );
    long GetInterpolationOrder ( );
    void PutInterpolationOrder (
        long pVal );
    enum AgELookAheadPropagator GetLookAheadPropagator ( );
    void PutLookAheadPropagator (
        enum AgELookAheadPropagator pVal );
    SAFEARRAY * GetSupportedLookAheadPropagators ( );
    VARIANT_BOOL IsLookAheadPropagatorSupported (
        enum AgELookAheadPropagator Propagator );
    double GetTimeStep ( );
    void PutTimeStep (
        double pVal );
    double GetTimeoutGap ( );
    void PutTimeoutGap (
        double pVal );
    IAgVeRealtimePointBuilderPtr GetPointBuilder ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ struct IAgVeDuration * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_InterpolationOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_InterpolationOrder (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LookAheadPropagator (
        /*[out,retval]*/ enum AgELookAheadPropagator * pVal ) = 0;
      virtual HRESULT __stdcall put_LookAheadPropagator (
        /*[in]*/ enum AgELookAheadPropagator pVal ) = 0;
      virtual HRESULT __stdcall get_SupportedLookAheadPropagators (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsLookAheadPropagatorSupported (
        /*[in]*/ enum AgELookAheadPropagator Propagator,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeoutGap (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeoutGap (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointBuilder (
        /*[out,retval]*/ struct IAgVeRealtimePointBuilder * * ppRetVal ) = 0;
};

struct __declspec(uuid("6c3f0108-8aa4-4dd5-931c-41f7752591e8"))
AgVeRealtimePointBuilder;
    // [ default ] interface _IAgVeRealtimePointBuilder
    // interface IAgVeRealtimePointBuilder

struct __declspec(uuid("1eae264b-fdaa-4fd1-9b4e-8f5953ee46d8"))
_IAgVeRealtimePointBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetB1950))
    IAgVeRealtimeCartesianPointsPtr B1950;
    __declspec(property(get=GetECF))
    IAgVeRealtimeCartesianPointsPtr ECF;
    __declspec(property(get=GetECI))
    IAgVeRealtimeCartesianPointsPtr ECI;
    __declspec(property(get=GetLLAHPS))
    IAgVeRealtimeLLAHPSPointsPtr LLAHPS;
    __declspec(property(get=GetLLA))
    IAgVeRealtimeLLAPointsPtr LLA;
    __declspec(property(get=GetAGL_LLA))
    IAgVeRealtimeLLAPointsPtr AGL_LLA;
    __declspec(property(get=GetMSL_LLA))
    IAgVeRealtimeLLAPointsPtr MSL_LLA;
    __declspec(property(get=GetUTM))
    IAgVeRealtimeUTMPointsPtr UTM;

    //
    // Wrapper methods for error-handling
    //

    IAgVeRealtimeCartesianPointsPtr GetB1950 ( );
    IAgVeRealtimeCartesianPointsPtr GetECF ( );
    IAgVeRealtimeCartesianPointsPtr GetECI ( );
    IAgVeRealtimeLLAHPSPointsPtr GetLLAHPS ( );
    IAgVeRealtimeLLAPointsPtr GetLLA ( );
    IAgVeRealtimeLLAPointsPtr GetAGL_LLA ( );
    IAgVeRealtimeLLAPointsPtr GetMSL_LLA ( );
    IAgVeRealtimeUTMPointsPtr GetUTM ( );
    IAgVeRealtimeCartesianPointsPtr GetPointsInFrame (
        _bstr_t ReferenceFrame );
    HRESULT RemoveAllPoints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_B1950 (
        /*[out,retval]*/ struct IAgVeRealtimeCartesianPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ECF (
        /*[out,retval]*/ struct IAgVeRealtimeCartesianPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ECI (
        /*[out,retval]*/ struct IAgVeRealtimeCartesianPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LLAHPS (
        /*[out,retval]*/ struct IAgVeRealtimeLLAHPSPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_LLA (
        /*[out,retval]*/ struct IAgVeRealtimeLLAPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AGL_LLA (
        /*[out,retval]*/ struct IAgVeRealtimeLLAPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_MSL_LLA (
        /*[out,retval]*/ struct IAgVeRealtimeLLAPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UTM (
        /*[out,retval]*/ struct IAgVeRealtimeUTMPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetPointsInFrame (
        /*[in]*/ BSTR ReferenceFrame,
        /*[out,retval]*/ struct IAgVeRealtimeCartesianPoints * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllPoints ( ) = 0;
};

struct __declspec(uuid("eac6df17-77fb-4e9d-a08a-74f9991fb8ae"))
AgVeRealtimeCartesianPoints;
    // [ default ] interface _IAgVeRealtimeCartesianPoints
    // interface IAgVeRealtimeCartesianPoints

struct __declspec(uuid("44b0991d-dd37-49a6-a764-59ee4c4ce205"))
_IAgVeRealtimeCartesianPoints : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddPosition (
        const _variant_t & Time,
        double X,
        double Y,
        double Z );
    HRESULT Add (
        const _variant_t & Time,
        double X,
        double Y,
        double Z,
        double Vx,
        double Vy,
        double Vz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPosition (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[in]*/ double Vx,
        /*[in]*/ double Vy,
        /*[in]*/ double Vz ) = 0;
};

struct __declspec(uuid("c8779842-5290-44b6-9a48-aa86666dc43a"))
AgVeRealtimeLLAHPSPoints;
    // [ default ] interface _IAgVeRealtimeLLAHPSPoints
    // interface IAgVeRealtimeLLAHPSPoints

struct __declspec(uuid("18640077-5d73-4e23-b52b-272b9d728033"))
_IAgVeRealtimeLLAHPSPoints : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Add (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt,
        double Heading,
        double Pitch,
        double Speed );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[in]*/ double Heading,
        /*[in]*/ double Pitch,
        /*[in]*/ double Speed ) = 0;
};

struct __declspec(uuid("e77ca8aa-1b4c-4ea5-a2e8-2dba54920956"))
AgVeRealtimeLLAPoints;
    // [ default ] interface _IAgVeRealtimeLLAPoints
    // interface IAgVeRealtimeLLAPoints

struct __declspec(uuid("3b2cefff-13f8-4470-8cf8-ab6420641931"))
_IAgVeRealtimeLLAPoints : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddPosition (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    HRESULT Add (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt,
        double LatRate,
        double LonRate,
        double AltRate );
    HRESULT AddPositionBatch (
        SAFEARRAY * * Times,
        SAFEARRAY * * Lats,
        SAFEARRAY * * Lons,
        SAFEARRAY * * Alts );
    HRESULT AddBatch (
        SAFEARRAY * * Times,
        SAFEARRAY * * Lats,
        SAFEARRAY * * Lons,
        SAFEARRAY * * Alts,
        SAFEARRAY * * LatRates,
        SAFEARRAY * * LonRates,
        SAFEARRAY * * AltRates );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPosition (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[in]*/ double LatRate,
        /*[in]*/ double LonRate,
        /*[in]*/ double AltRate ) = 0;
      virtual HRESULT __stdcall raw_AddPositionBatch (
        /*[in]*/ SAFEARRAY * * Times,
        /*[in]*/ SAFEARRAY * * Lats,
        /*[in]*/ SAFEARRAY * * Lons,
        /*[in]*/ SAFEARRAY * * Alts ) = 0;
      virtual HRESULT __stdcall raw_AddBatch (
        /*[in]*/ SAFEARRAY * * Times,
        /*[in]*/ SAFEARRAY * * Lats,
        /*[in]*/ SAFEARRAY * * Lons,
        /*[in]*/ SAFEARRAY * * Alts,
        /*[in]*/ SAFEARRAY * * LatRates,
        /*[in]*/ SAFEARRAY * * LonRates,
        /*[in]*/ SAFEARRAY * * AltRates ) = 0;
};

struct __declspec(uuid("8492b3b6-7fb7-46ef-ad11-6a9052ced595"))
AgVeRealtimeUTMPoints;
    // [ default ] interface _IAgVeRealtimeUTMPoints
    // interface IAgVeRealtimeUTMPoints

struct __declspec(uuid("853f0c62-e016-4500-8457-ac0f147c2f39"))
_IAgVeRealtimeUTMPoints : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddPosition (
        const _variant_t & Time,
        _bstr_t ZoneStr,
        double Easting,
        double Northing,
        double Alt );
    HRESULT Add (
        const _variant_t & Time,
        _bstr_t ZoneStr,
        double Easting,
        double Northing,
        double Alt,
        double LonRate,
        double LatRate,
        double AltRate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPosition (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR ZoneStr,
        /*[in]*/ double Easting,
        /*[in]*/ double Northing,
        /*[in]*/ double Alt ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Time,
        /*[in]*/ BSTR ZoneStr,
        /*[in]*/ double Easting,
        /*[in]*/ double Northing,
        /*[in]*/ double Alt,
        /*[in]*/ double LonRate,
        /*[in]*/ double LatRate,
        /*[in]*/ double AltRate ) = 0;
};

struct __declspec(uuid("ec458851-6951-4171-9ef4-dc67b044743f"))
AgSRPModelGPS;
    // [ default ] interface _IAgSRPModelGPS
    // interface IAgSRPModelGPS
    // interface IAgSRPModelBase

struct __declspec(uuid("a2e0fd34-69fe-4734-ac9d-a561cc0df4b4"))
_IAgSRPModelGPS : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgESRPModel Type;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetYBias,put=PutYBias))
    double YBias;

    //
    // Wrapper methods for error-handling
    //

    enum AgESRPModel GetType ( );
    double GetScale ( );
    void PutScale (
        double pVal );
    double GetYBias ( );
    void PutYBias (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgESRPModel * pVal ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_YBias (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YBias (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b9f84681-abdf-40f3-bcd4-f8b456eab6c5"))
IAgSRPModelGPS : IAgSRPModelBase
{
    //
    // Property data
    //

    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetYBias,put=PutYBias))
    double YBias;

    //
    // Wrapper methods for error-handling
    //

    double GetScale ( );
    void PutScale (
        double pVal );
    double GetYBias ( );
    void PutYBias (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_YBias (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YBias (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("efd2e043-2222-4f0e-8e20-6dbc0bcd2476"))
AgSRPModelSpherical;
    // [ default ] interface _IAgSRPModelSpherical
    // interface IAgSRPModelSpherical
    // interface IAgSRPModelBase

struct __declspec(uuid("7404b2e9-157f-460c-bc15-a001318267fc"))
_IAgSRPModelSpherical : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgESRPModel Type;
    __declspec(property(get=GetCr,put=PutCr))
    double Cr;
    __declspec(property(get=GetAreaMassRatio,put=PutAreaMassRatio))
    double AreaMassRatio;

    //
    // Wrapper methods for error-handling
    //

    enum AgESRPModel GetType ( );
    double GetCr ( );
    void PutCr (
        double pVal );
    double GetAreaMassRatio ( );
    void PutAreaMassRatio (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgESRPModel * pVal ) = 0;
      virtual HRESULT __stdcall get_Cr (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cr (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AreaMassRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaMassRatio (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("f6f17b90-ba94-4066-b7f4-775f4697b431"))
IAgSRPModelSpherical : IAgSRPModelBase
{
    //
    // Property data
    //

    __declspec(property(get=GetCr,put=PutCr))
    double Cr;
    __declspec(property(get=GetAreaMassRatio,put=PutAreaMassRatio))
    double AreaMassRatio;

    //
    // Wrapper methods for error-handling
    //

    double GetCr ( );
    void PutCr (
        double pVal );
    double GetAreaMassRatio ( );
    void PutAreaMassRatio (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Cr (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Cr (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AreaMassRatio (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AreaMassRatio (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("0003fef1-5664-4c24-bf3e-33d2845bb14f"))
AgVeHPOPSRPModel;
    // [ default ] interface _IAgVeHPOPSRPModel
    // interface IAgVeHPOPSRPModel

struct __declspec(uuid("4a13c42d-091e-456e-a401-fcd17ac927ac"))
_IAgVeHPOPSRPModel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelType))
    enum AgESRPModel ModelType;
    __declspec(property(get=GetModelSupportedTypes))
    SAFEARRAY * ModelSupportedTypes;
    __declspec(property(get=GetModel))
    IAgSRPModelBasePtr Model;

    //
    // Wrapper methods for error-handling
    //

    enum AgESRPModel GetModelType ( );
    HRESULT SetModelType (
        enum AgESRPModel SRPModel );
    VARIANT_BOOL IsModelTypeSupported (
        enum AgESRPModel SRPModel );
    SAFEARRAY * GetModelSupportedTypes ( );
    IAgSRPModelBasePtr GetModel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelType (
        /*[out,retval]*/ enum AgESRPModel * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetModelType (
        /*[in]*/ enum AgESRPModel SRPModel ) = 0;
      virtual HRESULT __stdcall raw_IsModelTypeSupported (
        /*[in]*/ enum AgESRPModel SRPModel,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModelSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgSRPModelBase * * ppVal ) = 0;
};

struct __declspec(uuid("98ae93f0-52c9-4401-860b-ca5f0bc43889"))
AgScAnimationTimePeriod;
    // [ default ] interface _IAgScAnimationTimePeriod
    // interface IAgScAnimationTimePeriod

struct __declspec(uuid("5b098de6-8c89-4326-ab12-8f9949e6c5aa"))
_IAgScAnimationTimePeriod : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime))
    IAgTimePeriodValuePtr StartTime;
    __declspec(property(get=GetStopTime))
    IAgTimePeriodValuePtr StopTime;
    __declspec(property(get=GetDuration,put=PutDuration))
    _variant_t Duration;
    __declspec(property(get=GetUseAnalysisStartTime,put=PutUseAnalysisStartTime))
    VARIANT_BOOL UseAnalysisStartTime;
    __declspec(property(get=GetUseAnalysisStopTime,put=PutUseAnalysisStopTime))
    VARIANT_BOOL UseAnalysisStopTime;

    //
    // Wrapper methods for error-handling
    //

    IAgTimePeriodValuePtr GetStartTime ( );
    IAgTimePeriodValuePtr GetStopTime ( );
    _variant_t GetDuration ( );
    void PutDuration (
        const _variant_t & pRetVal );
    VARIANT_BOOL GetUseAnalysisStartTime ( );
    void PutUseAnalysisStartTime (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseAnalysisStopTime ( );
    void PutUseAnalysisStopTime (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ struct IAgTimePeriodValue * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ struct IAgTimePeriodValue * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ VARIANT pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAnalysisStartTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseAnalysisStartTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseAnalysisStopTime (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseAnalysisStopTime (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b2ddfa44-cc48-4e8c-b70a-f2d20703b1cd"))
AgSnProjConstantAlt;
    // [ default ] interface _IAgSnProjConstantAlt
    // interface IAgDisplayDistance
    // interface IAgSnProjConstantAlt
    // interface IAgSnProjDisplayDistance

struct __declspec(uuid("6907881d-010d-4c9b-aa6a-e313ac80bda0"))
_IAgSnProjConstantAlt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    long NumberOfSteps;
    __declspec(property(get=GetProjectsThruCrossing,put=PutProjectsThruCrossing))
    VARIANT_BOOL ProjectsThruCrossing;
    __declspec(property(get=GetAltCrossingSides,put=PutAltCrossingSides))
    enum AgESnAltCrossingSides AltCrossingSides;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgESnAltCrossingDirection Direction;
    __declspec(property(get=GetExcludeHorizonArcs,put=PutExcludeHorizonArcs))
    VARIANT_BOOL ExcludeHorizonArcs;

    //
    // Wrapper methods for error-handling
    //

    double GetMin ( );
    void PutMin (
        double pVal );
    double GetMax ( );
    void PutMax (
        double pVal );
    long GetNumberOfSteps ( );
    void PutNumberOfSteps (
        long pVal );
    VARIANT_BOOL GetProjectsThruCrossing ( );
    void PutProjectsThruCrossing (
        VARIANT_BOOL pVal );
    enum AgESnAltCrossingSides GetAltCrossingSides ( );
    void PutAltCrossingSides (
        enum AgESnAltCrossingSides pVal );
    enum AgESnAltCrossingDirection GetDirection ( );
    void PutDirection (
        enum AgESnAltCrossingDirection pVal );
    VARIANT_BOOL GetExcludeHorizonArcs ( );
    void PutExcludeHorizonArcs (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectsThruCrossing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProjectsThruCrossing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltCrossingSides (
        /*[out,retval]*/ enum AgESnAltCrossingSides * pVal ) = 0;
      virtual HRESULT __stdcall put_AltCrossingSides (
        /*[in]*/ enum AgESnAltCrossingSides pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgESnAltCrossingDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgESnAltCrossingDirection pVal ) = 0;
      virtual HRESULT __stdcall get_ExcludeHorizonArcs (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExcludeHorizonArcs (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("783a2e5c-b8cf-446c-b672-ca64855b7e2a"))
IAgSnProjConstantAlt : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMin,put=PutMin))
    double Min;
    __declspec(property(get=GetMax,put=PutMax))
    double Max;
    __declspec(property(get=GetNumberOfSteps,put=PutNumberOfSteps))
    long NumberOfSteps;
    __declspec(property(get=GetProjectsThruCrossing,put=PutProjectsThruCrossing))
    VARIANT_BOOL ProjectsThruCrossing;
    __declspec(property(get=GetAltCrossingSides,put=PutAltCrossingSides))
    enum AgESnAltCrossingSides AltCrossingSides;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum AgESnAltCrossingDirection Direction;
    __declspec(property(get=GetExcludeHorizonArcs,put=PutExcludeHorizonArcs))
    VARIANT_BOOL ExcludeHorizonArcs;

    //
    // Wrapper methods for error-handling
    //

    double GetMin ( );
    void PutMin (
        double pVal );
    double GetMax ( );
    void PutMax (
        double pVal );
    long GetNumberOfSteps ( );
    void PutNumberOfSteps (
        long pVal );
    VARIANT_BOOL GetProjectsThruCrossing ( );
    void PutProjectsThruCrossing (
        VARIANT_BOOL pVal );
    enum AgESnAltCrossingSides GetAltCrossingSides ( );
    void PutAltCrossingSides (
        enum AgESnAltCrossingSides pVal );
    enum AgESnAltCrossingDirection GetDirection ( );
    void PutDirection (
        enum AgESnAltCrossingDirection pVal );
    VARIANT_BOOL GetExcludeHorizonArcs ( );
    void PutExcludeHorizonArcs (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfSteps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberOfSteps (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectsThruCrossing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ProjectsThruCrossing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AltCrossingSides (
        /*[out,retval]*/ enum AgESnAltCrossingSides * pVal ) = 0;
      virtual HRESULT __stdcall put_AltCrossingSides (
        /*[in]*/ enum AgESnAltCrossingSides pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum AgESnAltCrossingDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum AgESnAltCrossingDirection pVal ) = 0;
      virtual HRESULT __stdcall get_ExcludeHorizonArcs (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExcludeHorizonArcs (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("a7d15e77-95e6-471c-b9f9-636f93a32db3"))
AgSnProjObjectAlt;
    // [ default ] interface _IAgSnProjObjectAlt
    // interface IAgDisplayDistance
    // interface IAgSnProjObjectAlt

struct __declspec(uuid("b695b606-717a-4b3a-8015-c648895e488c"))
_IAgSnProjObjectAlt : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExcludeHorizonArcs,put=PutExcludeHorizonArcs))
    VARIANT_BOOL ExcludeHorizonArcs;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetExcludeHorizonArcs ( );
    void PutExcludeHorizonArcs (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExcludeHorizonArcs (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExcludeHorizonArcs (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("4f999505-180c-49a8-ae37-65ee84a6058b"))
IAgSnProjObjectAlt : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetExcludeHorizonArcs,put=PutExcludeHorizonArcs))
    VARIANT_BOOL ExcludeHorizonArcs;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetExcludeHorizonArcs ( );
    void PutExcludeHorizonArcs (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ExcludeHorizonArcs (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExcludeHorizonArcs (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("baeacb64-181f-461b-9533-df99dcc3f514"))
AgVeAttitudeRealTimeDataReference;
    // [ default ] interface _IAgVeAttitudeRealTimeDataReference
    // interface IAgVeAttitudeRealTimeDataReference

struct __declspec(uuid("fc7d5d21-08d8-4fcb-a97a-ede25e704b55"))
_IAgVeAttitudeRealTimeDataReference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileType))
    enum AgEVeProfile ProfileType;
    __declspec(property(get=GetProfileSupportedTypes))
    SAFEARRAY * ProfileSupportedTypes;
    __declspec(property(get=GetProfile))
    IAgVeAttProfilePtr Profile;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeProfile GetProfileType ( );
    HRESULT SetProfileType (
        enum AgEVeProfile Profile );
    VARIANT_BOOL IsProfileTypeSupported (
        enum AgEVeProfile Profile );
    SAFEARRAY * GetProfileSupportedTypes ( );
    IAgVeAttProfilePtr GetProfile ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileType (
        /*[out,retval]*/ enum AgEVeProfile * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProfileType (
        /*[in]*/ enum AgEVeProfile Profile ) = 0;
      virtual HRESULT __stdcall raw_IsProfileTypeSupported (
        /*[in]*/ enum AgEVeProfile Profile,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ProfileSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Profile (
        /*[out,retval]*/ struct IAgVeAttProfile * * ppVal ) = 0;
};

struct __declspec(uuid("15fc898d-b399-4c4f-b136-01b190761646"))
AgMtoAnalysis;
    // [ default ] interface _IAgMtoAnalysis
    // interface IAgMtoAnalysis

struct __declspec(uuid("af708873-e0b1-489c-ad15-aa1ca07cbe80"))
_IAgMtoAnalysis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    IAgMtoAnalysisPositionPtr Position;
    __declspec(property(get=GetRange))
    IAgMtoAnalysisRangePtr Range;
    __declspec(property(get=GetFieldOfView))
    IAgMtoAnalysisFieldOfViewPtr FieldOfView;
    __declspec(property(get=GetVisibility))
    IAgMtoAnalysisVisibilityPtr Visibility;

    //
    // Wrapper methods for error-handling
    //

    IAgMtoAnalysisPositionPtr GetPosition ( );
    IAgMtoAnalysisRangePtr GetRange ( );
    IAgMtoAnalysisFieldOfViewPtr GetFieldOfView ( );
    IAgMtoAnalysisVisibilityPtr GetVisibility ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct IAgMtoAnalysisPosition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct IAgMtoAnalysisRange * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ struct IAgMtoAnalysisFieldOfView * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Visibility (
        /*[out,retval]*/ struct IAgMtoAnalysisVisibility * * ppRetVal ) = 0;
};

struct __declspec(uuid("f83e9ce2-5f63-4d86-8b0b-42f79c12b874"))
AgMtoAnalysisPosition;
    // [ default ] interface _IAgMtoAnalysisPosition
    // interface IAgMtoAnalysisPosition

struct __declspec(uuid("04587c7e-f1d6-4f23-87a6-84127b2ccb28"))
_IAgMtoAnalysisPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltRef,put=PutAltRef))
    enum AgEAltRefType AltRef;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAltRefType GetAltRef ( );
    void PutAltRef (
        enum AgEAltRefType pVal );
    IAgMtoTrackPointCollectionPtr ComputeAllTracks (
        const _variant_t & Time );
    IAgMtoTrackPointCollectionPtr ComputeTracks (
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );
    IAgMtoTrackPointPtr ComputeTrack (
        int TrackId,
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AltRef (
        /*[out,retval]*/ enum AgEAltRefType * pVal ) = 0;
      virtual HRESULT __stdcall put_AltRef (
        /*[in]*/ enum AgEAltRefType pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAllTracks (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgMtoTrackPointCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTracks (
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgMtoTrackPointCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTrack (
        /*[in]*/ int TrackId,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgMtoTrackPoint * * ppRetVal ) = 0;
};

struct __declspec(uuid("4fe41592-cbc2-43d4-bc36-25aafada9cf2"))
AgMtoAnalysisRange;
    // [ default ] interface _IAgMtoAnalysisRange
    // interface IAgMtoAnalysisRange

struct __declspec(uuid("ec2ceffb-9c4f-47f5-b2ea-b1657b333570"))
_IAgMtoAnalysisRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLowerLimit,put=PutLowerLimit))
    double LowerLimit;
    __declspec(property(get=GetUpperLimit,put=PutUpperLimit))
    double UpperLimit;
    __declspec(property(get=GetObjectInterval,put=PutObjectInterval))
    enum AgEMtoObjectInterval ObjectInterval;
    __declspec(property(get=GetObjectData,put=PutObjectData))
    int ObjectData;
    __declspec(property(get=GetStkObjectPath,put=PutStkObjectPath))
    _bstr_t StkObjectPath;
    __declspec(property(get=GetEntirety,put=PutEntirety))
    enum AgEMtoEntirety Entirety;

    //
    // Wrapper methods for error-handling
    //

    double GetLowerLimit ( );
    void PutLowerLimit (
        double pVal );
    double GetUpperLimit ( );
    void PutUpperLimit (
        double pVal );
    enum AgEMtoObjectInterval GetObjectInterval ( );
    void PutObjectInterval (
        enum AgEMtoObjectInterval pVal );
    int GetObjectData ( );
    void PutObjectData (
        int pVal );
    _bstr_t GetStkObjectPath ( );
    void PutStkObjectPath (
        _bstr_t pRetVal );
    VARIANT_BOOL IsAnyTrackInRange (
        const _variant_t & Time );
    VARIANT_BOOL AreAllTracksInRange (
        const _variant_t & Time );
    VARIANT_BOOL IsTrackInRange (
        int TrackId,
        const _variant_t & Time );
    SAFEARRAY * ComputeRanges (
        enum AgEMtoRangeMode Mode,
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );
    SAFEARRAY * ComputeAllRanges (
        enum AgEMtoRangeMode Mode,
        const _variant_t & Time );
    enum AgEMtoEntirety GetEntirety ( );
    void PutEntirety (
        enum AgEMtoEntirety pEntirety );
    VARIANT_BOOL AreTracksInRange (
        enum AgEMtoTrackEval AllOrAny,
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LowerLimit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LowerLimit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UpperLimit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UpperLimit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectInterval (
        /*[out,retval]*/ enum AgEMtoObjectInterval * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectInterval (
        /*[in]*/ enum AgEMtoObjectInterval pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectData (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectData (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_StkObjectPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StkObjectPath (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAnyTrackInRange (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AreAllTracksInRange (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTrackInRange (
        /*[in]*/ int TrackId,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeRanges (
        /*[in]*/ enum AgEMtoRangeMode Mode,
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAllRanges (
        /*[in]*/ enum AgEMtoRangeMode Mode,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Entirety (
        /*[out,retval]*/ enum AgEMtoEntirety * pEntirety ) = 0;
      virtual HRESULT __stdcall put_Entirety (
        /*[in]*/ enum AgEMtoEntirety pEntirety ) = 0;
      virtual HRESULT __stdcall raw_AreTracksInRange (
        /*[in]*/ enum AgEMtoTrackEval AllOrAny,
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("b0932124-f69a-4e87-a26f-f17684515f2e"))
AgMtoAnalysisFieldOfView;
    // [ default ] interface _IAgMtoAnalysisFieldOfView
    // interface IAgMtoAnalysisFieldOfView

struct __declspec(uuid("47dda338-147b-4853-941a-f499ec42e05d"))
_IAgMtoAnalysisFieldOfView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSensor,put=PutSensor))
    _bstr_t Sensor;
    __declspec(property(get=GetEntirety,put=PutEntirety))
    enum AgEMtoEntirety Entirety;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsAnyTrackInFOV (
        const _variant_t & Time );
    VARIANT_BOOL AreAllTracksInFOV (
        const _variant_t & Time );
    VARIANT_BOOL IsTrackInFOV (
        int TrackId,
        const _variant_t & Time );
    SAFEARRAY * ComputeTracks (
        enum AgEMtoVisibilityMode Mode,
        SAFEARRAY * * Tracks,
        const _variant_t & Time );
    SAFEARRAY * ComputeAllTracks (
        enum AgEMtoVisibilityMode Mode,
        const _variant_t & Time );
    _bstr_t GetSensor ( );
    void PutSensor (
        _bstr_t pRetVal );
    enum AgEMtoEntirety GetEntirety ( );
    void PutEntirety (
        enum AgEMtoEntirety pEntirety );
    VARIANT_BOOL AreTracksInFOV (
        enum AgEMtoTrackEval AnyOrAll,
        SAFEARRAY * * Tracks,
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsAnyTrackInFOV (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AreAllTracksInFOV (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTrackInFOV (
        /*[in]*/ int TrackId,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTracks (
        /*[in]*/ enum AgEMtoVisibilityMode Mode,
        /*[in]*/ SAFEARRAY * * Tracks,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAllTracks (
        /*[in]*/ enum AgEMtoVisibilityMode Mode,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Sensor (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sensor (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Entirety (
        /*[out,retval]*/ enum AgEMtoEntirety * pEntirety ) = 0;
      virtual HRESULT __stdcall put_Entirety (
        /*[in]*/ enum AgEMtoEntirety pEntirety ) = 0;
      virtual HRESULT __stdcall raw_AreTracksInFOV (
        /*[in]*/ enum AgEMtoTrackEval AnyOrAll,
        /*[in]*/ SAFEARRAY * * Tracks,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("91b31f62-58b7-4de1-890a-b27933c77de6"))
AgMtoAnalysisVisibility;
    // [ default ] interface _IAgMtoAnalysisVisibility
    // interface IAgMtoAnalysisVisibility

struct __declspec(uuid("ff3c43de-a09a-4c4b-8711-0c08d6d5d814"))
_IAgMtoAnalysisVisibility : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseTerrain,put=PutUseTerrain))
    VARIANT_BOOL UseTerrain;
    __declspec(property(get=GetEntirety,put=PutEntirety))
    enum AgEMtoEntirety Entirety;
    __declspec(property(get=GetObjectInterval,put=PutObjectInterval))
    enum AgEMtoObjectInterval ObjectInterval;
    __declspec(property(get=GetObjectData,put=PutObjectData))
    int ObjectData;
    __declspec(property(get=GetStkObjectPath,put=PutStkObjectPath))
    _bstr_t StkObjectPath;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsAnyTrackVisible (
        const _variant_t & Time );
    VARIANT_BOOL AreAllTracksVisible (
        const _variant_t & Time );
    VARIANT_BOOL GetUseTerrain ( );
    void PutUseTerrain (
        VARIANT_BOOL pVal );
    enum AgEMtoEntirety GetEntirety ( );
    void PutEntirety (
        enum AgEMtoEntirety pEntirety );
    enum AgEMtoObjectInterval GetObjectInterval ( );
    void PutObjectInterval (
        enum AgEMtoObjectInterval pVal );
    int GetObjectData ( );
    void PutObjectData (
        int pVal );
    VARIANT_BOOL IsTrackVisible (
        int TrackId,
        const _variant_t & Time );
    _bstr_t GetStkObjectPath ( );
    void PutStkObjectPath (
        _bstr_t pRetVal );
    VARIANT_BOOL AreTracksVisible (
        enum AgEMtoTrackEval Eval,
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );
    SAFEARRAY * ComputeTracks (
        enum AgEMtoVisibilityMode Mode,
        SAFEARRAY * * TrackIds,
        const _variant_t & Time );
    SAFEARRAY * ComputeAllTracks (
        enum AgEMtoVisibilityMode Mode,
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsAnyTrackVisible (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AreAllTracksVisible (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTerrain (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Entirety (
        /*[out,retval]*/ enum AgEMtoEntirety * pEntirety ) = 0;
      virtual HRESULT __stdcall put_Entirety (
        /*[in]*/ enum AgEMtoEntirety pEntirety ) = 0;
      virtual HRESULT __stdcall get_ObjectInterval (
        /*[out,retval]*/ enum AgEMtoObjectInterval * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectInterval (
        /*[in]*/ enum AgEMtoObjectInterval pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectData (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectData (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall raw_IsTrackVisible (
        /*[in]*/ int TrackId,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StkObjectPath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_StkObjectPath (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AreTracksVisible (
        /*[in]*/ enum AgEMtoTrackEval Eval,
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTracks (
        /*[in]*/ enum AgEMtoVisibilityMode Mode,
        /*[in]*/ SAFEARRAY * * TrackIds,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAllTracks (
        /*[in]*/ enum AgEMtoVisibilityMode Mode,
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("c96df1f0-bea2-4b85-8bba-8858d0ebc78b"))
AgVePropagatorGPS;
    // [ default ] interface _IAgVePropagatorGPS
    // interface IAgVePropagatorGPS

enum AgEVeGPSAutoUpdateSource
{
    eGPSAutoUpdateSourceUnknown = -1,
    eGPSAutoUpdateSourceOnline = 0,
    eGPSAutoUpdateSourceFile = 2,
    eGPSAutoUpdateSourceNone = 3
};

enum AgEVeGPSElemSelection
{
    eGPSElemSelectionUseAll = 0,
    eGPSElemSelectionUseFirst = 1
};

enum AgEVeGPSSwitchMethod
{
    eGPSSwitchMethodEpoch = 0,
    eGPSSwitchMethodMidpoint = 1,
    eGPSSwitchMethodTCA = 2
};

struct __declspec(uuid("cecd30c7-3ae7-4041-9a5b-a3d8c175e78e"))
IAgVeGPSAutoUpdateProperties : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSelection,put=PutSelection))
    enum AgEVeGPSElemSelection Selection;
    __declspec(property(get=GetSwitchMethod,put=PutSwitchMethod))
    enum AgEVeGPSSwitchMethod SwitchMethod;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGPSElemSelection GetSelection ( );
    void PutSelection (
        enum AgEVeGPSElemSelection pRetVal );
    enum AgEVeGPSSwitchMethod GetSwitchMethod ( );
    void PutSwitchMethod (
        enum AgEVeGPSSwitchMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ enum AgEVeGPSElemSelection * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Selection (
        /*[in]*/ enum AgEVeGPSElemSelection pRetVal ) = 0;
      virtual HRESULT __stdcall get_SwitchMethod (
        /*[out,retval]*/ enum AgEVeGPSSwitchMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SwitchMethod (
        /*[in]*/ enum AgEVeGPSSwitchMethod pRetVal ) = 0;
};

struct __declspec(uuid("ecfe9a05-f1fb-49c3-bcea-7b6f39821923"))
IAgVeGPSElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetWeek))
    long Week;
    __declspec(property(get=GetTimeOfAlmanac))
    double TimeOfAlmanac;
    __declspec(property(get=GetAge))
    double Age;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    long GetWeek ( );
    double GetTimeOfAlmanac ( );
    double GetAge ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Week (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeOfAlmanac (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Age (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("85dc5f0c-cbd4-401a-8928-0285a361ef99"))
IAgVeGPSElementCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeGPSElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeGPSElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeGPSElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
};

struct __declspec(uuid("a239f97c-74bb-44f2-a54e-9419ad4ec356"))
IAgVeGPSAutoUpdateFileSource : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    IAgVeGPSElementCollectionPtr Preview ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Preview (
        /*[out,retval]*/ struct IAgVeGPSElementCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("06972649-9d15-4860-a235-31abbc94ada0"))
IAgVeGPSAutoUpdateOnlineSource : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeGPSElementCollectionPtr Preview ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Preview (
        /*[out,retval]*/ struct IAgVeGPSElementCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("7dc57460-9e35-4207-899c-456195d9ecfa"))
IAgVeGPSAutoUpdate : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSource,put=PutSelectedSource))
    enum AgEVeGPSAutoUpdateSource SelectedSource;
    __declspec(property(get=GetProperties))
    IAgVeGPSAutoUpdatePropertiesPtr Properties;
    __declspec(property(get=GetFileSource))
    IAgVeGPSAutoUpdateFileSourcePtr FileSource;
    __declspec(property(get=GetOnlineSource))
    IAgVeGPSAutoUpdateOnlineSourcePtr OnlineSource;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGPSAutoUpdateSource GetSelectedSource ( );
    void PutSelectedSource (
        enum AgEVeGPSAutoUpdateSource pRetVal );
    IAgVeGPSAutoUpdatePropertiesPtr GetProperties ( );
    IAgVeGPSAutoUpdateFileSourcePtr GetFileSource ( );
    IAgVeGPSAutoUpdateOnlineSourcePtr GetOnlineSource ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SelectedSource (
        /*[out,retval]*/ enum AgEVeGPSAutoUpdateSource * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedSource (
        /*[in]*/ enum AgEVeGPSAutoUpdateSource pRetVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgVeGPSAutoUpdateProperties * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FileSource (
        /*[out,retval]*/ struct IAgVeGPSAutoUpdateFileSource * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OnlineSource (
        /*[out,retval]*/ struct IAgVeGPSAutoUpdateOnlineSource * * ppRetVal ) = 0;
};

enum AgEVeGPSAlmanacType
{
    eGPSAlmanacTypeNone = -1,
    eGPSAlmanacTypeYUMA = 0,
    eGPSAlmanacTypeSEM = 1,
    eGPSAlmanacTypeSP3 = 2
};

struct __declspec(uuid("a3daf704-902b-44ff-8fa7-ffa445abd33a"))
IAgVeGPSAlmanacProperties : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeGPSAlmanacType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGPSAlmanacType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeGPSAlmanacType * pRetVal ) = 0;
};

struct __declspec(uuid("3614fef7-9c0a-4a49-b664-fa6d9e4cd90e"))
IAgVeGPSSpecifyAlmanac : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetProperties))
    IAgVeGPSAlmanacPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    IAgVeGPSAlmanacPropertiesPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgVeGPSAlmanacProperties * * ppRetVal ) = 0;
};

struct __declspec(uuid("c19af26f-cfc7-4ed6-873c-d29d23dfe8bd"))
_IAgVePropagatorGPS : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetPRN,put=PutPRN))
    long PRN;
    __declspec(property(get=GetAvailablePRNs))
    SAFEARRAY * AvailablePRNs;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;
    __declspec(property(get=GetAutoUpdateEnabled,put=PutAutoUpdateEnabled))
    VARIANT_BOOL AutoUpdateEnabled;
    __declspec(property(get=GetAutoUpdate))
    IAgVeGPSAutoUpdatePtr AutoUpdate;
    __declspec(property(get=GetSpecifyCatalog))
    IAgVeGPSSpecifyAlmanacPtr SpecifyCatalog;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );
    long GetPRN ( );
    void PutPRN (
        long pVal );
    SAFEARRAY * GetAvailablePRNs ( );
    VARIANT_BOOL GetAutoUpdateEnabled ( );
    void PutAutoUpdateEnabled (
        VARIANT_BOOL pRetVal );
    IAgVeGPSAutoUpdatePtr GetAutoUpdate ( );
    IAgVeGPSSpecifyAlmanacPtr GetSpecifyCatalog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PRN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PRN (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AvailablePRNs (
        /*[out,retval]*/ SAFEARRAY * * ppArray ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ struct IAgVeGPSAutoUpdate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpecifyCatalog (
        /*[out,retval]*/ struct IAgVeGPSSpecifyAlmanac * * ppRetVal ) = 0;
};

struct __declspec(uuid("c85b8367-0a1b-43c1-8b63-0336fac66bb6"))
IAgVePropagatorGPS : IAgVePropagator
{
    //
    // Property data
    //

    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetStep,put=PutStep))
    double Step;
    __declspec(property(get=GetUseScenarioAnalysisTime,put=PutUseScenarioAnalysisTime))
    VARIANT_BOOL UseScenarioAnalysisTime;
    __declspec(property(get=GetPRN,put=PutPRN))
    long PRN;
    __declspec(property(get=GetAvailablePRNs))
    SAFEARRAY * AvailablePRNs;
    __declspec(property(get=GetAutoUpdateEnabled,put=PutAutoUpdateEnabled))
    VARIANT_BOOL AutoUpdateEnabled;
    __declspec(property(get=GetAutoUpdate))
    IAgVeGPSAutoUpdatePtr AutoUpdate;
    __declspec(property(get=GetSpecifyCatalog))
    IAgVeGPSSpecifyAlmanacPtr SpecifyCatalog;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Propagate ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    double GetStep ( );
    void PutStep (
        double pVal );
    VARIANT_BOOL GetUseScenarioAnalysisTime ( );
    void PutUseScenarioAnalysisTime (
        VARIANT_BOOL pRetVal );
    long GetPRN ( );
    void PutPRN (
        long pVal );
    SAFEARRAY * GetAvailablePRNs ( );
    VARIANT_BOOL GetAutoUpdateEnabled ( );
    void PutAutoUpdateEnabled (
        VARIANT_BOOL pRetVal );
    IAgVeGPSAutoUpdatePtr GetAutoUpdate ( );
    IAgVeGPSSpecifyAlmanacPtr GetSpecifyCatalog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Propagate ( ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Step (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseScenarioAnalysisTime (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseScenarioAnalysisTime (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_PRN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PRN (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AvailablePRNs (
        /*[out,retval]*/ SAFEARRAY * * ppArray ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateEnabled (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ struct IAgVeGPSAutoUpdate * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpecifyCatalog (
        /*[out,retval]*/ struct IAgVeGPSSpecifyAlmanac * * ppRetVal ) = 0;
};

struct __declspec(uuid("5dd2b1e9-baef-4156-82c8-98cdd0468012"))
AgAvailableFeatures;
    // [ default ] interface _IAgAvailableFeatures
    // interface IAgAvailableFeatures

struct __declspec(uuid("027112d3-b6f8-434d-a3f0-e6e96b9d465a"))
_IAgAvailableFeatures : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsPropagatorTypeAvailable (
        enum AgEVePropagatorType PropagatorType );
    VARIANT_BOOL IsObjectTypeAvailable (
        enum AgESTKObjectType ObjectType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsPropagatorTypeAvailable (
        /*[in]*/ enum AgEVePropagatorType PropagatorType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsObjectTypeAvailable (
        /*[in]*/ enum AgESTKObjectType ObjectType,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("288e391d-82a3-42af-8578-2568eab928b1"))
AgScenarioBeforeSaveEventArgs;
    // [ default ] interface IUnknown
    // interface IAgScenarioBeforeSaveEventArgs

struct __declspec(uuid("d31ea830-28c2-4ca2-9b74-8c3dd6c5aa76"))
AgVePropagatorSGP4CommonTasks;
    // [ default ] interface _IAgVePropagatorSGP4CommonTasks
    // interface IAgVePropagatorSGP4CommonTasks

struct __declspec(uuid("9bd8775c-1d65-4298-aa6b-471004331659"))
_IAgVePropagatorSGP4CommonTasks : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddSegsFromFile (
        _bstr_t SSCNumber,
        _bstr_t Filename );
    HRESULT AddSegsFromOnlineSource (
        _bstr_t SSCNum );
    HRESULT AddSegsFromSpaceTrack (
        _bstr_t SSCNum,
        _bstr_t Username,
        _bstr_t Password );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddSegsFromFile (
        /*[in]*/ BSTR SSCNumber,
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromOnlineSource (
        /*[in]*/ BSTR SSCNum ) = 0;
      virtual HRESULT __stdcall raw_AddSegsFromSpaceTrack (
        /*[in]*/ BSTR SSCNum,
        /*[in]*/ BSTR Username,
        /*[in]*/ BSTR Password ) = 0;
};

struct __declspec(uuid("84480cd4-09e4-4179-9712-c4e8a98a4cda"))
AgVeSGP4AutoUpdateProperties;
    // [ default ] interface _IAgVeSGP4AutoUpdateProperties
    // interface IAgVeSGP4AutoUpdateProperties

struct __declspec(uuid("fe8d8423-70d1-46b0-baf5-162ef349f37a"))
_IAgVeSGP4AutoUpdateProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelection,put=PutSelection))
    enum AgEVeSGP4TLESelection Selection;
    __declspec(property(get=GetSwitchMethod,put=PutSwitchMethod))
    enum AgEVeSGP4SwitchMethod SwitchMethod;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeSGP4TLESelection GetSelection ( );
    void PutSelection (
        enum AgEVeSGP4TLESelection pRetVal );
    enum AgEVeSGP4SwitchMethod GetSwitchMethod ( );
    void PutSwitchMethod (
        enum AgEVeSGP4SwitchMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ enum AgEVeSGP4TLESelection * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Selection (
        /*[in]*/ enum AgEVeSGP4TLESelection pRetVal ) = 0;
      virtual HRESULT __stdcall get_SwitchMethod (
        /*[out,retval]*/ enum AgEVeSGP4SwitchMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SwitchMethod (
        /*[in]*/ enum AgEVeSGP4SwitchMethod pRetVal ) = 0;
};

struct __declspec(uuid("b9db525a-bf24-4cd4-a3a7-68c1f9e15326"))
AgVeSGP4AutoUpdateFileSource;
    // [ default ] interface _IAgVeSGP4AutoUpdateFileSource
    // interface IAgVeSGP4AutoUpdateFileSource

struct __declspec(uuid("9a908183-693f-4404-8b51-a0f28dade14b"))
_IAgVeSGP4AutoUpdateFileSource : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    SAFEARRAY * Preview ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Preview (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("069c4f40-ebb8-4361-acc8-15f5069ce368"))
AgVeSGP4AutoUpdateOnlineSource;
    // [ default ] interface _IAgVeSGP4AutoUpdateOnlineSource
    // interface IAgVeSGP4AutoUpdateOnlineSource

struct __declspec(uuid("e71efc91-75a5-4d1e-a783-1a5e39889f4a"))
_IAgVeSGP4AutoUpdateOnlineSource : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * Preview ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Preview (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("e1b21353-ef02-4d47-8b63-a4d0210111c2"))
AgVeSGP4AutoUpdate;
    // [ default ] interface _IAgVeSGP4AutoUpdate
    // interface IAgVeSGP4AutoUpdate

struct __declspec(uuid("49ffd624-fb03-40e4-8ee8-ecfc27fb6929"))
_IAgVeSGP4AutoUpdate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSource,put=PutSelectedSource))
    enum AgEVeSGP4AutoUpdateSource SelectedSource;
    __declspec(property(get=GetProperties))
    IAgVeSGP4AutoUpdatePropertiesPtr Properties;
    __declspec(property(get=GetFileSource))
    IAgVeSGP4AutoUpdateFileSourcePtr FileSource;
    __declspec(property(get=GetOnlineSource))
    IAgVeSGP4AutoUpdateOnlineSourcePtr OnlineSource;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeSGP4AutoUpdateSource GetSelectedSource ( );
    void PutSelectedSource (
        enum AgEVeSGP4AutoUpdateSource pRetVal );
    IAgVeSGP4AutoUpdatePropertiesPtr GetProperties ( );
    IAgVeSGP4AutoUpdateFileSourcePtr GetFileSource ( );
    IAgVeSGP4AutoUpdateOnlineSourcePtr GetOnlineSource ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SelectedSource (
        /*[out,retval]*/ enum AgEVeSGP4AutoUpdateSource * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedSource (
        /*[in]*/ enum AgEVeSGP4AutoUpdateSource pRetVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgVeSGP4AutoUpdateProperties * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FileSource (
        /*[out,retval]*/ struct IAgVeSGP4AutoUpdateFileSource * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OnlineSource (
        /*[out,retval]*/ struct IAgVeSGP4AutoUpdateOnlineSource * * ppRetVal ) = 0;
};

struct __declspec(uuid("4c334e2a-a9b4-408d-96d9-6870856bc779"))
AgVeSGP4PropagatorSettings;
    // [ default ] interface _IAgVeSGP4PropagatorSettings
    // interface IAgVeSGP4PropagatorSettings

struct __declspec(uuid("a68c3be6-4fc0-4df1-8b42-ce179e6c41d2"))
_IAgVeSGP4PropagatorSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseSGP4OnePtInterpolation,put=PutUseSGP4OnePtInterpolation))
    VARIANT_BOOL UseSGP4OnePtInterpolation;
    __declspec(property(get=GetUseSGP4OnePtValidation,put=PutUseSGP4OnePtValidation))
    VARIANT_BOOL UseSGP4OnePtValidation;
    __declspec(property(get=GetUseSGP4OnePtWarning,put=PutUseSGP4OnePtWarning))
    VARIANT_BOOL UseSGP4OnePtWarning;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseSGP4OnePtInterpolation ( );
    void PutUseSGP4OnePtInterpolation (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseSGP4OnePtValidation ( );
    void PutUseSGP4OnePtValidation (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetUseSGP4OnePtWarning ( );
    void PutUseSGP4OnePtWarning (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseSGP4OnePtInterpolation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSGP4OnePtInterpolation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSGP4OnePtValidation (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSGP4OnePtValidation (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_UseSGP4OnePtWarning (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseSGP4OnePtWarning (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("d2bb3a6e-687e-44fa-831f-5b626d95f3d3"))
AgVeGPSAutoUpdateProperties;
    // [ default ] interface _IAgVeGPSAutoUpdateProperties
    // interface IAgVeGPSAutoUpdateProperties

struct __declspec(uuid("e6449e6a-85b9-4366-b8e4-e0ccfe615f44"))
_IAgVeGPSAutoUpdateProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelection,put=PutSelection))
    enum AgEVeGPSElemSelection Selection;
    __declspec(property(get=GetSwitchMethod,put=PutSwitchMethod))
    enum AgEVeGPSSwitchMethod SwitchMethod;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGPSElemSelection GetSelection ( );
    void PutSelection (
        enum AgEVeGPSElemSelection pRetVal );
    enum AgEVeGPSSwitchMethod GetSwitchMethod ( );
    void PutSwitchMethod (
        enum AgEVeGPSSwitchMethod pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ enum AgEVeGPSElemSelection * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Selection (
        /*[in]*/ enum AgEVeGPSElemSelection pRetVal ) = 0;
      virtual HRESULT __stdcall get_SwitchMethod (
        /*[out,retval]*/ enum AgEVeGPSSwitchMethod * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SwitchMethod (
        /*[in]*/ enum AgEVeGPSSwitchMethod pRetVal ) = 0;
};

struct __declspec(uuid("e9f9fce4-cdd0-4603-b08b-48fec1158d23"))
AgVeGPSAutoUpdateFileSource;
    // [ default ] interface _IAgVeGPSAutoUpdateFileSource
    // interface IAgVeGPSAutoUpdateFileSource

struct __declspec(uuid("626a7d17-2403-4551-982f-ddcfdb7ffd22"))
_IAgVeGPSAutoUpdateFileSource : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pRetVal );
    IAgVeGPSElementCollectionPtr Preview ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Preview (
        /*[out,retval]*/ struct IAgVeGPSElementCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("838bd1d0-3dd7-4787-a28f-7c51f3aadcf6"))
AgVeGPSAutoUpdateOnlineSource;
    // [ default ] interface _IAgVeGPSAutoUpdateOnlineSource
    // interface IAgVeGPSAutoUpdateOnlineSource

struct __declspec(uuid("c8527496-f519-41f7-8474-9ea13e451732"))
_IAgVeGPSAutoUpdateOnlineSource : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgVeGPSElementCollectionPtr Preview ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Preview (
        /*[out,retval]*/ struct IAgVeGPSElementCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("5d8a1de2-5d25-47bf-8238-40d3a93d2625"))
AgVeGPSAutoUpdate;
    // [ default ] interface _IAgVeGPSAutoUpdate
    // interface IAgVeGPSAutoUpdate

struct __declspec(uuid("5bfd7814-b98a-4af6-8835-025cc95c4585"))
_IAgVeGPSAutoUpdate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSource,put=PutSelectedSource))
    enum AgEVeGPSAutoUpdateSource SelectedSource;
    __declspec(property(get=GetProperties))
    IAgVeGPSAutoUpdatePropertiesPtr Properties;
    __declspec(property(get=GetFileSource))
    IAgVeGPSAutoUpdateFileSourcePtr FileSource;
    __declspec(property(get=GetOnlineSource))
    IAgVeGPSAutoUpdateOnlineSourcePtr OnlineSource;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGPSAutoUpdateSource GetSelectedSource ( );
    void PutSelectedSource (
        enum AgEVeGPSAutoUpdateSource pRetVal );
    IAgVeGPSAutoUpdatePropertiesPtr GetProperties ( );
    IAgVeGPSAutoUpdateFileSourcePtr GetFileSource ( );
    IAgVeGPSAutoUpdateOnlineSourcePtr GetOnlineSource ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SelectedSource (
        /*[out,retval]*/ enum AgEVeGPSAutoUpdateSource * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SelectedSource (
        /*[in]*/ enum AgEVeGPSAutoUpdateSource pRetVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgVeGPSAutoUpdateProperties * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FileSource (
        /*[out,retval]*/ struct IAgVeGPSAutoUpdateFileSource * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_OnlineSource (
        /*[out,retval]*/ struct IAgVeGPSAutoUpdateOnlineSource * * ppRetVal ) = 0;
};

struct __declspec(uuid("bd8310d5-4949-4edc-b516-df883748eb71"))
AgVeGPSSpecifyAlmanac;
    // [ default ] interface _IAgVeGPSSpecifyAlmanac
    // interface IAgVeGPSSpecifyAlmanac

struct __declspec(uuid("7371698f-eb65-4f0b-bcfd-54dcde4d44fb"))
_IAgVeGPSSpecifyAlmanac : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetProperties))
    IAgVeGPSAlmanacPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t pVal );
    IAgVeGPSAlmanacPropertiesPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IAgVeGPSAlmanacProperties * * ppRetVal ) = 0;
};

struct __declspec(uuid("15570af7-254f-457a-827c-346f71ec6746"))
AgVeGPSAlmanacProperties;
    // [ default ] interface _IAgVeGPSAlmanacProperties
    // interface IAgVeGPSAlmanacProperties

struct __declspec(uuid("982074c9-242d-48ad-ad27-11b7a9044d43"))
_IAgVeGPSAlmanacProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeGPSAlmanacType Type;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGPSAlmanacType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeGPSAlmanacType * pRetVal ) = 0;
};

struct __declspec(uuid("2a268876-5cf9-421c-a514-acf4ca8010c4"))
AgVeGPSAlmanacPropertiesSEM;
    // [ default ] interface _IAgVeGPSAlmanacPropertiesSEM
    // interface IAgVeGPSAlmanacPropertiesSEM
    // interface IAgVeGPSAlmanacProperties

enum AgEGPSReferenceWeek
{
    eGPSReferenceWeekUnknown = -1,
    eGPSReferenceWeek22Aug1999 = 0,
    eGPSReferenceWeek06Jan1980 = 1
};

struct __declspec(uuid("3d43acb7-cc7e-4a98-a45a-e8d22a02b213"))
_IAgVeGPSAlmanacPropertiesSEM : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeGPSAlmanacType Type;
    __declspec(property(get=GetAvgURA))
    long AvgURA;
    __declspec(property(get=GetAlmanacWeek))
    long AlmanacWeek;
    __declspec(property(get=GetReferenceWeek,put=PutReferenceWeek))
    enum AgEGPSReferenceWeek ReferenceWeek;
    __declspec(property(get=GetTimeOfAlmanac))
    double TimeOfAlmanac;
    __declspec(property(get=GetDateOfAlmanac))
    _bstr_t DateOfAlmanac;
    __declspec(property(get=GetHealth))
    long Health;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGPSAlmanacType GetType ( );
    long GetAvgURA ( );
    long GetAlmanacWeek ( );
    enum AgEGPSReferenceWeek GetReferenceWeek ( );
    void PutReferenceWeek (
        enum AgEGPSReferenceWeek pVal );
    double GetTimeOfAlmanac ( );
    _bstr_t GetDateOfAlmanac ( );
    long GetHealth ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeGPSAlmanacType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AvgURA (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AlmanacWeek (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceWeek (
        /*[out,retval]*/ enum AgEGPSReferenceWeek * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceWeek (
        /*[in]*/ enum AgEGPSReferenceWeek pVal ) = 0;
      virtual HRESULT __stdcall get_TimeOfAlmanac (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_DateOfAlmanac (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Health (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("55f5ac58-273f-4598-8c27-2bdc3e6d5f05"))
IAgVeGPSAlmanacPropertiesSEM : IAgVeGPSAlmanacProperties
{
    //
    // Property data
    //

    __declspec(property(get=GetAvgURA))
    long AvgURA;
    __declspec(property(get=GetAlmanacWeek))
    long AlmanacWeek;
    __declspec(property(get=GetReferenceWeek,put=PutReferenceWeek))
    enum AgEGPSReferenceWeek ReferenceWeek;
    __declspec(property(get=GetTimeOfAlmanac))
    double TimeOfAlmanac;
    __declspec(property(get=GetDateOfAlmanac))
    _bstr_t DateOfAlmanac;
    __declspec(property(get=GetHealth))
    long Health;

    //
    // Wrapper methods for error-handling
    //

    long GetAvgURA ( );
    long GetAlmanacWeek ( );
    enum AgEGPSReferenceWeek GetReferenceWeek ( );
    void PutReferenceWeek (
        enum AgEGPSReferenceWeek pVal );
    double GetTimeOfAlmanac ( );
    _bstr_t GetDateOfAlmanac ( );
    long GetHealth ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AvgURA (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AlmanacWeek (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceWeek (
        /*[out,retval]*/ enum AgEGPSReferenceWeek * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceWeek (
        /*[in]*/ enum AgEGPSReferenceWeek pVal ) = 0;
      virtual HRESULT __stdcall get_TimeOfAlmanac (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_DateOfAlmanac (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Health (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("8df4c0c4-abea-4c8a-b25a-967f812e833f"))
AgVeGPSAlmanacPropertiesYUMA;
    // [ default ] interface _IAgVeGPSAlmanacPropertiesYUMA
    // interface IAgVeGPSAlmanacPropertiesYUMA
    // interface IAgVeGPSAlmanacProperties

struct __declspec(uuid("c4dd5ab1-f681-421f-9d99-de71bd1103a5"))
_IAgVeGPSAlmanacPropertiesYUMA : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeGPSAlmanacType Type;
    __declspec(property(get=GetWeekNumber))
    long WeekNumber;
    __declspec(property(get=GetAlmanacWeek))
    long AlmanacWeek;
    __declspec(property(get=GetReferenceWeek,put=PutReferenceWeek))
    enum AgEGPSReferenceWeek ReferenceWeek;
    __declspec(property(get=GetTimeOfAlmanac))
    double TimeOfAlmanac;
    __declspec(property(get=GetDateOfAlmanac))
    _bstr_t DateOfAlmanac;
    __declspec(property(get=GetHealth))
    long Health;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGPSAlmanacType GetType ( );
    long GetWeekNumber ( );
    long GetAlmanacWeek ( );
    enum AgEGPSReferenceWeek GetReferenceWeek ( );
    void PutReferenceWeek (
        enum AgEGPSReferenceWeek pVal );
    double GetTimeOfAlmanac ( );
    _bstr_t GetDateOfAlmanac ( );
    long GetHealth ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeGPSAlmanacType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WeekNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AlmanacWeek (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceWeek (
        /*[out,retval]*/ enum AgEGPSReferenceWeek * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceWeek (
        /*[in]*/ enum AgEGPSReferenceWeek pVal ) = 0;
      virtual HRESULT __stdcall get_TimeOfAlmanac (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_DateOfAlmanac (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Health (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b1a6205f-d7cc-421a-a609-4e16ac3c43d5"))
IAgVeGPSAlmanacPropertiesYUMA : IAgVeGPSAlmanacProperties
{
    //
    // Property data
    //

    __declspec(property(get=GetWeekNumber))
    long WeekNumber;
    __declspec(property(get=GetAlmanacWeek))
    long AlmanacWeek;
    __declspec(property(get=GetReferenceWeek,put=PutReferenceWeek))
    enum AgEGPSReferenceWeek ReferenceWeek;
    __declspec(property(get=GetTimeOfAlmanac))
    double TimeOfAlmanac;
    __declspec(property(get=GetDateOfAlmanac))
    _bstr_t DateOfAlmanac;
    __declspec(property(get=GetHealth))
    long Health;

    //
    // Wrapper methods for error-handling
    //

    long GetWeekNumber ( );
    long GetAlmanacWeek ( );
    enum AgEGPSReferenceWeek GetReferenceWeek ( );
    void PutReferenceWeek (
        enum AgEGPSReferenceWeek pVal );
    double GetTimeOfAlmanac ( );
    _bstr_t GetDateOfAlmanac ( );
    long GetHealth ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WeekNumber (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AlmanacWeek (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceWeek (
        /*[out,retval]*/ enum AgEGPSReferenceWeek * pVal ) = 0;
      virtual HRESULT __stdcall put_ReferenceWeek (
        /*[in]*/ enum AgEGPSReferenceWeek pVal ) = 0;
      virtual HRESULT __stdcall get_TimeOfAlmanac (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_DateOfAlmanac (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Health (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("9ebe4bbd-99a0-4cf2-b5d0-52a6e9ae23b6"))
AgVeGPSAlmanacPropertiesSP3;
    // [ default ] interface _IAgVeGPSAlmanacPropertiesSP3
    // interface IAgVeGPSAlmanacPropertiesSP3
    // interface IAgVeGPSAlmanacProperties

struct __declspec(uuid("7526d268-fc5e-46ef-bb34-7bd24641088d"))
_IAgVeGPSAlmanacPropertiesSP3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEVeGPSAlmanacType Type;
    __declspec(property(get=GetAlmanacWeek))
    long AlmanacWeek;
    __declspec(property(get=GetTimeOfAlmanac))
    double TimeOfAlmanac;
    __declspec(property(get=GetDateOfAlmanac))
    _bstr_t DateOfAlmanac;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeGPSAlmanacType GetType ( );
    long GetAlmanacWeek ( );
    double GetTimeOfAlmanac ( );
    _bstr_t GetDateOfAlmanac ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEVeGPSAlmanacType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AlmanacWeek (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_TimeOfAlmanac (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_DateOfAlmanac (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("f417479b-a8ea-49b4-aeb7-8acfea74a70c"))
IAgVeGPSAlmanacPropertiesSP3 : IAgVeGPSAlmanacProperties
{
    //
    // Property data
    //

    __declspec(property(get=GetAlmanacWeek))
    long AlmanacWeek;
    __declspec(property(get=GetTimeOfAlmanac))
    double TimeOfAlmanac;
    __declspec(property(get=GetDateOfAlmanac))
    _bstr_t DateOfAlmanac;

    //
    // Wrapper methods for error-handling
    //

    long GetAlmanacWeek ( );
    double GetTimeOfAlmanac ( );
    _bstr_t GetDateOfAlmanac ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AlmanacWeek (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_TimeOfAlmanac (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_DateOfAlmanac (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("dc9ee254-d616-4a86-8827-f9fb3062e7ee"))
AgVeGPSElementCollection;
    // [ default ] interface IUnknown
    // interface IAgVeGPSElementCollection

struct __declspec(uuid("6eb71af6-944c-4e15-b3ad-afb884805876"))
AgVeGPSElement;
    // [ default ] interface _IAgVeGPSElement
    // interface IAgVeGPSElement

struct __declspec(uuid("5d50e790-55f8-417e-b4d2-1416a5985f54"))
_IAgVeGPSElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetWeek))
    long Week;
    __declspec(property(get=GetTimeOfAlmanac))
    double TimeOfAlmanac;
    __declspec(property(get=GetAge))
    double Age;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetEpoch ( );
    long GetWeek ( );
    double GetTimeOfAlmanac ( );
    double GetAge ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Week (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeOfAlmanac (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Age (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("0b6865e4-0749-498d-bc89-4be52685a55d"))
AgSpEnvRadEnergyMethodSpecify;
    // [ default ] interface _IAgSpEnvRadEnergyMethodSpecify
    // interface IAgSpEnvRadEnergyMethodSpecify

struct __declspec(uuid("796ae958-add1-4798-b3ed-e8c2d066e6b3"))
_IAgSpEnvRadEnergyMethodSpecify : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetElectronEnergies))
    STKUtil::IAgDoublesCollectionPtr ElectronEnergies;
    __declspec(property(get=GetProtonEnergies))
    STKUtil::IAgDoublesCollectionPtr ProtonEnergies;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgDoublesCollectionPtr GetElectronEnergies ( );
    STKUtil::IAgDoublesCollectionPtr GetProtonEnergies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ElectronEnergies (
        /*[out,retval]*/ struct STKUtil::IAgDoublesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ProtonEnergies (
        /*[out,retval]*/ struct STKUtil::IAgDoublesCollection * * ppVal ) = 0;
};

struct __declspec(uuid("d3084947-d82a-4e05-b03a-d1f049b0ebd6"))
AgSpEnvRadEnergyValues;
    // [ default ] interface _IAgSpEnvRadEnergyValues
    // interface IAgSpEnvRadEnergyValues

struct __declspec(uuid("289aaa6b-95bf-48b5-9804-93f7c7f9b2e6"))
_IAgSpEnvRadEnergyValues : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseDefault,put=PutUseDefault))
    VARIANT_BOOL UseDefault;
    __declspec(property(get=GetCustom))
    IAgSpEnvRadEnergyMethodSpecifyPtr Custom;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseDefault ( );
    void PutUseDefault (
        VARIANT_BOOL pVal );
    IAgSpEnvRadEnergyMethodSpecifyPtr GetCustom ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseDefault (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseDefault (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[out,retval]*/ struct IAgSpEnvRadEnergyMethodSpecify * * ppRetVal ) = 0;
};

struct __declspec(uuid("b4a71203-0ad9-4853-9e93-1ebe50020522"))
AgSpEnvRadiationEnvironment;
    // [ default ] interface _IAgSpEnvRadiationEnvironment
    // interface IAgSpEnvRadiationEnvironment

struct __declspec(uuid("6f9452f3-2b85-40ec-bd3f-3bf0db802192"))
_IAgSpEnvRadiationEnvironment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCrresProtonActivity,put=PutCrresProtonActivity))
    enum AgESpEnvCrresProtonActivity CrresProtonActivity;
    __declspec(property(get=GetCrresRadiationActivity,put=PutCrresRadiationActivity))
    enum AgESpEnvCrresRadiationActivity CrresRadiationActivity;
    __declspec(property(get=GetNasaEnergyValues))
    IAgSpEnvRadEnergyValuesPtr NasaEnergyValues;
    __declspec(property(get=GetNasaModelsActivity,put=PutNasaModelsActivity))
    enum AgESpEnvNasaModelsActivity NasaModelsActivity;

    //
    // Wrapper methods for error-handling
    //

    enum AgESpEnvCrresProtonActivity GetCrresProtonActivity ( );
    void PutCrresProtonActivity (
        enum AgESpEnvCrresProtonActivity pVal );
    enum AgESpEnvCrresRadiationActivity GetCrresRadiationActivity ( );
    void PutCrresRadiationActivity (
        enum AgESpEnvCrresRadiationActivity pVal );
    IAgSpEnvRadEnergyValuesPtr GetNasaEnergyValues ( );
    SAFEARRAY * GetCrresElectronEnergies ( );
    SAFEARRAY * GetCrresProtonEnergies ( );
    SAFEARRAY * GetNasaElectronEnergies ( );
    SAFEARRAY * GetNasaProtonEnergies ( );
    enum AgESpEnvNasaModelsActivity GetNasaModelsActivity ( );
    void PutNasaModelsActivity (
        enum AgESpEnvNasaModelsActivity pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CrresProtonActivity (
        /*[out,retval]*/ enum AgESpEnvCrresProtonActivity * pVal ) = 0;
      virtual HRESULT __stdcall put_CrresProtonActivity (
        /*[in]*/ enum AgESpEnvCrresProtonActivity pVal ) = 0;
      virtual HRESULT __stdcall get_CrresRadiationActivity (
        /*[out,retval]*/ enum AgESpEnvCrresRadiationActivity * pVal ) = 0;
      virtual HRESULT __stdcall put_CrresRadiationActivity (
        /*[in]*/ enum AgESpEnvCrresRadiationActivity pVal ) = 0;
      virtual HRESULT __stdcall get_NasaEnergyValues (
        /*[out,retval]*/ struct IAgSpEnvRadEnergyValues * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCrresElectronEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCrresProtonEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNasaElectronEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetNasaProtonEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_NasaModelsActivity (
        /*[out,retval]*/ enum AgESpEnvNasaModelsActivity * pVal ) = 0;
      virtual HRESULT __stdcall put_NasaModelsActivity (
        /*[in]*/ enum AgESpEnvNasaModelsActivity pVal ) = 0;
};

struct __declspec(uuid("48837a8e-b26e-43f4-9d28-9ba87e156ea4"))
AgSpEnvMagFieldGfx;
    // [ default ] interface _IAgSpEnvMagFieldGfx
    // interface IAgSpEnvMagFieldGfx

struct __declspec(uuid("a28d943f-c68b-4a16-9e5a-cc2f25ca5d77"))
_IAgSpEnvMagFieldGfx : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsMagFieldVisible,put=PutIsMagFieldVisible))
    VARIANT_BOOL IsMagFieldVisible;
    __declspec(property(get=GetColorMode,put=PutColorMode))
    enum AgESpEnvMagFieldColorMode ColorMode;
    __declspec(property(get=GetColorScale,put=PutColorScale))
    enum AgESpEnvMagFieldColorScale ColorScale;
    __declspec(property(get=GetFieldLineRefresh,put=PutFieldLineRefresh))
    double FieldLineRefresh;
    __declspec(property(get=GetColorRampStart,put=PutColorRampStart))
    OLE_COLOR ColorRampStart;
    __declspec(property(get=GetColorRampStop,put=PutColorRampStop))
    OLE_COLOR ColorRampStop;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetRefLongitude,put=PutRefLongitude))
    double RefLongitude;
    __declspec(property(get=GetFieldLineMode,put=PutFieldLineMode))
    enum AgESpEnvMagFieldLineMode FieldLineMode;
    __declspec(property(get=GetStartLatitude,put=PutStartLatitude))
    double StartLatitude;
    __declspec(property(get=GetStopLatitude,put=PutStopLatitude))
    double StopLatitude;
    __declspec(property(get=GetNumFieldLines,put=PutNumFieldLines))
    long NumFieldLines;
    __declspec(property(get=GetNumLongitudes,put=PutNumLongitudes))
    long NumLongitudes;
    __declspec(property(get=GetMainField,put=PutMainField))
    enum AgESpEnvMagneticMainField MainField;
    __declspec(property(get=GetExternalField,put=PutExternalField))
    enum AgESpEnvMagneticExternalField ExternalField;
    __declspec(property(get=GetIGRF_UpdateRate,put=PutIGRF_UpdateRate))
    double IGRF_UpdateRate;
    __declspec(property(get=GetMaxTranslucency,put=PutMaxTranslucency))
    double MaxTranslucency;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsMagFieldVisible ( );
    void PutIsMagFieldVisible (
        VARIANT_BOOL pVal );
    enum AgESpEnvMagFieldColorMode GetColorMode ( );
    void PutColorMode (
        enum AgESpEnvMagFieldColorMode pVal );
    enum AgESpEnvMagFieldColorScale GetColorScale ( );
    void PutColorScale (
        enum AgESpEnvMagFieldColorScale pVal );
    double GetFieldLineRefresh ( );
    void PutFieldLineRefresh (
        double pVal );
    OLE_COLOR GetColorRampStart ( );
    void PutColorRampStart (
        OLE_COLOR pVal );
    OLE_COLOR GetColorRampStop ( );
    void PutColorRampStop (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    double GetRefLongitude ( );
    void PutRefLongitude (
        double pVal );
    enum AgESpEnvMagFieldLineMode GetFieldLineMode ( );
    void PutFieldLineMode (
        enum AgESpEnvMagFieldLineMode pVal );
    double GetStartLatitude ( );
    void PutStartLatitude (
        double pVal );
    double GetStopLatitude ( );
    void PutStopLatitude (
        double pVal );
    long GetNumFieldLines ( );
    void PutNumFieldLines (
        long pVal );
    long GetNumLongitudes ( );
    void PutNumLongitudes (
        long pVal );
    enum AgESpEnvMagneticMainField GetMainField ( );
    void PutMainField (
        enum AgESpEnvMagneticMainField pVal );
    enum AgESpEnvMagneticExternalField GetExternalField ( );
    void PutExternalField (
        enum AgESpEnvMagneticExternalField pVal );
    double GetIGRF_UpdateRate ( );
    void PutIGRF_UpdateRate (
        double pVal );
    HRESULT ComputeBField (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt,
        double * pBx,
        double * pBy,
        double * pBz );
    SAFEARRAY * ComputeBFieldAsArray (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    double ComputeDipoleL (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    double ComputeMcIlwainL (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    double ComputeBBeq (
        const _variant_t & Time,
        double Lat,
        double Lon,
        double Alt );
    double GetMaxTranslucency ( );
    void PutMaxTranslucency (
        double pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsMagFieldVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsMagFieldVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColorMode (
        /*[out,retval]*/ enum AgESpEnvMagFieldColorMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorMode (
        /*[in]*/ enum AgESpEnvMagFieldColorMode pVal ) = 0;
      virtual HRESULT __stdcall get_ColorScale (
        /*[out,retval]*/ enum AgESpEnvMagFieldColorScale * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorScale (
        /*[in]*/ enum AgESpEnvMagFieldColorScale pVal ) = 0;
      virtual HRESULT __stdcall get_FieldLineRefresh (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldLineRefresh (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColorRampStart (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorRampStart (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_ColorRampStop (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorRampStop (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_RefLongitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RefLongitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FieldLineMode (
        /*[out,retval]*/ enum AgESpEnvMagFieldLineMode * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldLineMode (
        /*[in]*/ enum AgESpEnvMagFieldLineMode pVal ) = 0;
      virtual HRESULT __stdcall get_StartLatitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartLatitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StopLatitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StopLatitude (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NumFieldLines (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumFieldLines (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NumLongitudes (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumLongitudes (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MainField (
        /*[out,retval]*/ enum AgESpEnvMagneticMainField * pVal ) = 0;
      virtual HRESULT __stdcall put_MainField (
        /*[in]*/ enum AgESpEnvMagneticMainField pVal ) = 0;
      virtual HRESULT __stdcall get_ExternalField (
        /*[out,retval]*/ enum AgESpEnvMagneticExternalField * pVal ) = 0;
      virtual HRESULT __stdcall put_ExternalField (
        /*[in]*/ enum AgESpEnvMagneticExternalField pVal ) = 0;
      virtual HRESULT __stdcall get_IGRF_UpdateRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_IGRF_UpdateRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeBField (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[in,out]*/ double * pBx,
        /*[in,out]*/ double * pBy,
        /*[in,out]*/ double * pBz ) = 0;
      virtual HRESULT __stdcall raw_ComputeBFieldAsArray (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDipoleL (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ double * pL ) = 0;
      virtual HRESULT __stdcall raw_ComputeMcIlwainL (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ double * pL ) = 0;
      virtual HRESULT __stdcall raw_ComputeBBeq (
        /*[in]*/ VARIANT Time,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ double * pBBeq ) = 0;
      virtual HRESULT __stdcall get_MaxTranslucency (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_MaxTranslucency (
        /*[in]*/ double pRetVal ) = 0;
};

struct __declspec(uuid("1a527ed7-1c4e-40b3-a155-d34e4a2b41d9"))
AgSpEnvScenExtVO;
    // [ default ] interface _IAgSpEnvScenExtVO
    // interface IAgSpEnvScenExtVO

struct __declspec(uuid("79cbe81c-d8d4-49c9-8d0f-e906ac88c8de"))
_IAgSpEnvScenExtVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMagneticField))
    IAgSpEnvMagFieldGfxPtr MagneticField;

    //
    // Wrapper methods for error-handling
    //

    IAgSpEnvMagFieldGfxPtr GetMagneticField ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MagneticField (
        /*[out,retval]*/ struct IAgSpEnvMagFieldGfx * * ppVal ) = 0;
};

struct __declspec(uuid("e2400f24-4252-4a9a-8eaa-0fbb65423d50"))
AgSpEnvScenSpaceEnvironment;
    // [ default ] interface _IAgSpEnvScenSpaceEnvironment
    // interface IAgSpEnvScenSpaceEnvironment

struct __declspec(uuid("146df1ea-915c-41ae-9c51-0096e430d336"))
_IAgSpEnvScenSpaceEnvironment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadiationEnvironment))
    IAgSpEnvRadiationEnvironmentPtr RadiationEnvironment;
    __declspec(property(get=GetVO))
    IAgSpEnvScenExtVOPtr VO;

    //
    // Wrapper methods for error-handling
    //

    IAgSpEnvRadiationEnvironmentPtr GetRadiationEnvironment ( );
    IAgSpEnvScenExtVOPtr GetVO ( );
    double ComputeSAAFluxIntensity (
        enum AgESpEnvSAAChannel Channel,
        double Lat,
        double Lon,
        double Alt );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RadiationEnvironment (
        /*[out,retval]*/ struct IAgSpEnvRadiationEnvironment * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgSpEnvScenExtVO * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSAAFluxIntensity (
        /*[in]*/ enum AgESpEnvSAAChannel Channel,
        /*[in]*/ double Lat,
        /*[in]*/ double Lon,
        /*[in]*/ double Alt,
        /*[out,retval]*/ double * pSAAFluxIntensity ) = 0;
};

struct __declspec(uuid("50f4be75-25d4-4a6f-b84f-94e95da5ec88"))
AgVeSpEnvRadDoseRateElement;
    // [ default ] interface _IAgVeSpEnvRadDoseRateElement
    // interface IAgVeSpEnvRadDoseRateElement

struct __declspec(uuid("aa1fcb59-a56c-414f-83ee-af6f4f3731b2"))
_IAgVeSpEnvRadDoseRateElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShieldingThickness))
    double ShieldingThickness;
    __declspec(property(get=GetIsElectronDoseRateValid))
    VARIANT_BOOL IsElectronDoseRateValid;
    __declspec(property(get=GetIsElectronBremsstrahlungDoseRateValid))
    VARIANT_BOOL IsElectronBremsstrahlungDoseRateValid;
    __declspec(property(get=GetIsProtonDoseRateValid))
    VARIANT_BOOL IsProtonDoseRateValid;
    __declspec(property(get=GetIsTotalDoseRateValid))
    VARIANT_BOOL IsTotalDoseRateValid;

    //
    // Wrapper methods for error-handling
    //

    double GetShieldingThickness ( );
    VARIANT_BOOL GetIsElectronDoseRateValid ( );
    double ElectronDoseRate ( );
    VARIANT_BOOL GetIsElectronBremsstrahlungDoseRateValid ( );
    double ElectronBremsstrahlungDoseRate ( );
    VARIANT_BOOL GetIsProtonDoseRateValid ( );
    double ProtonDoseRate ( );
    VARIANT_BOOL GetIsTotalDoseRateValid ( );
    double TotalDoseRate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShieldingThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsElectronDoseRateValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ElectronDoseRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsElectronBremsstrahlungDoseRateValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ElectronBremsstrahlungDoseRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsProtonDoseRateValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ProtonDoseRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_IsTotalDoseRateValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_TotalDoseRate (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("79d748ca-0a40-4d40-8d9d-a273a7cb22a4"))
AgVeSpEnvRadDoseRateCollection;
    // [ default ] interface IUnknown
    // interface IAgVeSpEnvRadDoseRateCollection

struct __declspec(uuid("846af7a9-9667-44ab-9694-8f233ea85d6c"))
AgSpEnvSAAContour;
    // [ default ] interface _IAgSpEnvSAAContour
    // interface IAgSpEnvSAAContour

struct __declspec(uuid("0c706d48-4ce5-4ac8-b72a-739f0b4cbe3e"))
_IAgSpEnvSAAContour : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChannel,put=PutChannel))
    enum AgESpEnvSAAChannel Channel;
    __declspec(property(get=GetFluxLevel,put=PutFluxLevel))
    enum AgESpEnvSAAFluxLevel FluxLevel;

    //
    // Wrapper methods for error-handling
    //

    enum AgESpEnvSAAChannel GetChannel ( );
    void PutChannel (
        enum AgESpEnvSAAChannel pVal );
    enum AgESpEnvSAAFluxLevel GetFluxLevel ( );
    void PutFluxLevel (
        enum AgESpEnvSAAFluxLevel pVal );
    double ComputeSAAFluxIntensity (
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Channel (
        /*[out,retval]*/ enum AgESpEnvSAAChannel * pVal ) = 0;
      virtual HRESULT __stdcall put_Channel (
        /*[in]*/ enum AgESpEnvSAAChannel pVal ) = 0;
      virtual HRESULT __stdcall get_FluxLevel (
        /*[out,retval]*/ enum AgESpEnvSAAFluxLevel * pVal ) = 0;
      virtual HRESULT __stdcall put_FluxLevel (
        /*[in]*/ enum AgESpEnvSAAFluxLevel pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeSAAFluxIntensity (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pSAAFluxIntensity ) = 0;
};

struct __declspec(uuid("7ed6ee3f-4488-4d26-96ad-5023c1c78647"))
AgVeSpEnvVehTemperature;
    // [ default ] interface _IAgVeSpEnvVehTemperature
    // interface IAgVeSpEnvVehTemperature

struct __declspec(uuid("ab40efae-2a1f-4a0e-a9e0-cbb70a146863"))
_IAgVeSpEnvVehTemperature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEarthAlbedo,put=PutEarthAlbedo))
    double EarthAlbedo;
    __declspec(property(get=GetMaterialEmissivity,put=PutMaterialEmissivity))
    double MaterialEmissivity;
    __declspec(property(get=GetMaterialAbsorptivity,put=PutMaterialAbsorptivity))
    double MaterialAbsorptivity;
    __declspec(property(get=GetDissipation,put=PutDissipation))
    double Dissipation;
    __declspec(property(get=GetCrossSectionalArea,put=PutCrossSectionalArea))
    double CrossSectionalArea;
    __declspec(property(get=GetShapeModel,put=PutShapeModel))
    enum AgEVeSpEnvShapeModel ShapeModel;
    __declspec(property(get=GetNormalVector,put=PutNormalVector))
    _bstr_t NormalVector;

    //
    // Wrapper methods for error-handling
    //

    double GetEarthAlbedo ( );
    void PutEarthAlbedo (
        double pVal );
    double GetMaterialEmissivity ( );
    void PutMaterialEmissivity (
        double pVal );
    double GetMaterialAbsorptivity ( );
    void PutMaterialAbsorptivity (
        double pVal );
    double GetDissipation ( );
    void PutDissipation (
        double pVal );
    double GetCrossSectionalArea ( );
    void PutCrossSectionalArea (
        double pVal );
    enum AgEVeSpEnvShapeModel GetShapeModel ( );
    void PutShapeModel (
        enum AgEVeSpEnvShapeModel pVal );
    _bstr_t GetNormalVector ( );
    void PutNormalVector (
        _bstr_t pVal );
    double ComputeTemperature (
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EarthAlbedo (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EarthAlbedo (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaterialEmissivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaterialEmissivity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MaterialAbsorptivity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaterialAbsorptivity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Dissipation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Dissipation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CrossSectionalArea (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CrossSectionalArea (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeModel (
        /*[out,retval]*/ enum AgEVeSpEnvShapeModel * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeModel (
        /*[in]*/ enum AgEVeSpEnvShapeModel pVal ) = 0;
      virtual HRESULT __stdcall get_NormalVector (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NormalVector (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeTemperature (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pTemperature ) = 0;
};

struct __declspec(uuid("87e974bd-fd98-48b6-a59d-1c8042943464"))
AgVeSpEnvParticleFlux;
    // [ default ] interface _IAgVeSpEnvParticleFlux
    // interface IAgVeSpEnvParticleFlux

struct __declspec(uuid("7fcb6826-2ab8-4b86-b102-85f7ebcc2f3d"))
_IAgVeSpEnvParticleFlux : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetF10p7Source,put=PutF10p7Source))
    enum AgEVeSpEnvF10p7Source F10p7Source;
    __declspec(property(get=GetF10p7,put=PutF10p7))
    double F10p7;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    enum AgEVeSpEnvMaterial Material;
    __declspec(property(get=GetArea,put=PutArea))
    double Area;
    __declspec(property(get=GetPitDepth,put=PutPitDepth))
    double PitDepth;
    __declspec(property(get=GetUseSporadicMeteors,put=PutUseSporadicMeteors))
    VARIANT_BOOL UseSporadicMeteors;
    __declspec(property(get=GetMaterialDensity,put=PutMaterialDensity))
    double MaterialDensity;
    __declspec(property(get=GetTensileStrength,put=PutTensileStrength))
    double TensileStrength;
    __declspec(property(get=GetFluxFile,put=PutFluxFile))
    _bstr_t FluxFile;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeSpEnvF10p7Source GetF10p7Source ( );
    void PutF10p7Source (
        enum AgEVeSpEnvF10p7Source pVal );
    double GetF10p7 ( );
    void PutF10p7 (
        double pVal );
    enum AgEVeSpEnvMaterial GetMaterial ( );
    void PutMaterial (
        enum AgEVeSpEnvMaterial pVal );
    double GetArea ( );
    void PutArea (
        double pVal );
    double GetPitDepth ( );
    void PutPitDepth (
        double pVal );
    VARIANT_BOOL GetUseSporadicMeteors ( );
    void PutUseSporadicMeteors (
        VARIANT_BOOL pVal );
    double GetMaterialDensity ( );
    void PutMaterialDensity (
        double pVal );
    double GetTensileStrength ( );
    void PutTensileStrength (
        double pVal );
    _bstr_t GetFluxFile ( );
    void PutFluxFile (
        _bstr_t pVal );
    SAFEARRAY * GetParticleMassArray ( );
    double ComputeMeteorImpactFlux (
        const _variant_t & Time );
    double ComputeMeteorDamageImpactFlux (
        const _variant_t & Time );
    SAFEARRAY * ComputeMeteorImpactFluxDistribution (
        const _variant_t & Time );
    SAFEARRAY * ComputeMeteorDamageImpactFluxDistribution (
        const _variant_t & Time );
    double ComputeDebrisImpactFlux (
        const _variant_t & Time );
    double ComputeDebrisDamageImpactFlux (
        const _variant_t & Time );
    SAFEARRAY * ComputeDebrisImpactFluxDistribution (
        const _variant_t & Time );
    SAFEARRAY * ComputeDebrisDamageImpactFluxDistribution (
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_F10p7Source (
        /*[out,retval]*/ enum AgEVeSpEnvF10p7Source * pVal ) = 0;
      virtual HRESULT __stdcall put_F10p7Source (
        /*[in]*/ enum AgEVeSpEnvF10p7Source pVal ) = 0;
      virtual HRESULT __stdcall get_F10p7 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_F10p7 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ enum AgEVeSpEnvMaterial * pVal ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ enum AgEVeSpEnvMaterial pVal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Area (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PitDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PitDepth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseSporadicMeteors (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSporadicMeteors (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaterialDensity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaterialDensity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TensileStrength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TensileStrength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FluxFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FluxFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetParticleMassArray (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeMeteorImpactFlux (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pFlux ) = 0;
      virtual HRESULT __stdcall raw_ComputeMeteorDamageImpactFlux (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pFlux ) = 0;
      virtual HRESULT __stdcall raw_ComputeMeteorImpactFluxDistribution (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeMeteorDamageImpactFluxDistribution (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDebrisImpactFlux (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pFlux ) = 0;
      virtual HRESULT __stdcall raw_ComputeDebrisDamageImpactFlux (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pFlux ) = 0;
      virtual HRESULT __stdcall raw_ComputeDebrisImpactFluxDistribution (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDebrisDamageImpactFluxDistribution (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("dcda64f6-5ac9-4270-a9c8-40696600a950"))
AgVeSpEnvMagneticField;
    // [ default ] interface _IAgVeSpEnvMagneticField
    // interface IAgVeSpEnvMagneticField

struct __declspec(uuid("d50eed58-47a7-4dfc-9d91-f095f431f8db"))
_IAgVeSpEnvMagneticField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMainField,put=PutMainField))
    enum AgESpEnvMagneticMainField MainField;
    __declspec(property(get=GetExternalField,put=PutExternalField))
    enum AgESpEnvMagneticExternalField ExternalField;
    __declspec(property(get=GetIGRF_UpdateRate,put=PutIGRF_UpdateRate))
    double IGRF_UpdateRate;

    //
    // Wrapper methods for error-handling
    //

    enum AgESpEnvMagneticMainField GetMainField ( );
    void PutMainField (
        enum AgESpEnvMagneticMainField pVal );
    enum AgESpEnvMagneticExternalField GetExternalField ( );
    void PutExternalField (
        enum AgESpEnvMagneticExternalField pVal );
    double GetIGRF_UpdateRate ( );
    void PutIGRF_UpdateRate (
        double pVal );
    HRESULT ComputeBField (
        const _variant_t & Time,
        double * pBx,
        double * pBy,
        double * pBz );
    SAFEARRAY * ComputeBFieldAsArray (
        const _variant_t & Time );
    double ComputeDipoleL (
        const _variant_t & Time );
    double ComputeMcIlwainL (
        const _variant_t & Time );
    double ComputeBBeq (
        const _variant_t & Time );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MainField (
        /*[out,retval]*/ enum AgESpEnvMagneticMainField * pVal ) = 0;
      virtual HRESULT __stdcall put_MainField (
        /*[in]*/ enum AgESpEnvMagneticMainField pVal ) = 0;
      virtual HRESULT __stdcall get_ExternalField (
        /*[out,retval]*/ enum AgESpEnvMagneticExternalField * pVal ) = 0;
      virtual HRESULT __stdcall put_ExternalField (
        /*[in]*/ enum AgESpEnvMagneticExternalField pVal ) = 0;
      virtual HRESULT __stdcall get_IGRF_UpdateRate (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_IGRF_UpdateRate (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeBField (
        /*[in]*/ VARIANT Time,
        /*[in,out]*/ double * pBx,
        /*[in,out]*/ double * pBy,
        /*[in,out]*/ double * pBz ) = 0;
      virtual HRESULT __stdcall raw_ComputeBFieldAsArray (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDipoleL (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pL ) = 0;
      virtual HRESULT __stdcall raw_ComputeMcIlwainL (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pL ) = 0;
      virtual HRESULT __stdcall raw_ComputeBBeq (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ double * pBBeq ) = 0;
};

struct __declspec(uuid("2ba62ed2-198c-4b33-8cc7-333513c36474"))
AgVeSpEnvRadiation;
    // [ default ] interface _IAgVeSpEnvRadiation
    // interface IAgVeSpEnvRadiation

struct __declspec(uuid("0399471a-f233-4ae9-9179-94ddb3989844"))
_IAgVeSpEnvRadiation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComputationMode,put=PutComputationMode))
    enum AgEVeSpEnvComputationMode ComputationMode;
    __declspec(property(get=GetFluxStatus))
    _bstr_t FluxStatus;
    __declspec(property(get=GetDoseChannel,put=PutDoseChannel))
    enum AgEVeSpEnvDoseChannel DoseChannel;
    __declspec(property(get=GetUseNuclearAttenuation,put=PutUseNuclearAttenuation))
    VARIANT_BOOL UseNuclearAttenuation;
    __declspec(property(get=GetDetectorType,put=PutDetectorType))
    enum AgEVeSpEnvDetectorType DetectorType;
    __declspec(property(get=GetShieldingThicknesses))
    STKUtil::IAgDoublesCollectionPtr ShieldingThicknesses;
    __declspec(property(get=GetApSource,put=PutApSource))
    enum AgEVeSpEnvApSource ApSource;
    __declspec(property(get=GetAp,put=PutAp))
    double Ap;
    __declspec(property(get=GetFluxFile,put=PutFluxFile))
    _bstr_t FluxFile;
    __declspec(property(get=GetIncludeNuclearAttenNeutrons,put=PutIncludeNuclearAttenNeutrons))
    VARIANT_BOOL IncludeNuclearAttenNeutrons;
    __declspec(property(get=GetDetectorGeometry,put=PutDetectorGeometry))
    enum AgEVeSpEnvDetectorGeometry DetectorGeometry;
    __declspec(property(get=GetUseModelEpoch,put=PutUseModelEpoch))
    VARIANT_BOOL UseModelEpoch;
    __declspec(property(get=GetShiftSAA,put=PutShiftSAA))
    VARIANT_BOOL ShiftSAA;
    __declspec(property(get=GetDoseIntegrationStep,put=PutDoseIntegrationStep))
    double DoseIntegrationStep;
    __declspec(property(get=GetDoseReportStep,put=PutDoseReportStep))
    double DoseReportStep;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeSpEnvComputationMode GetComputationMode ( );
    void PutComputationMode (
        enum AgEVeSpEnvComputationMode pVal );
    _bstr_t GetFluxStatus ( );
    enum AgEVeSpEnvDoseChannel GetDoseChannel ( );
    void PutDoseChannel (
        enum AgEVeSpEnvDoseChannel pVal );
    VARIANT_BOOL GetUseNuclearAttenuation ( );
    void PutUseNuclearAttenuation (
        VARIANT_BOOL pVal );
    enum AgEVeSpEnvDetectorType GetDetectorType ( );
    void PutDetectorType (
        enum AgEVeSpEnvDetectorType pVal );
    STKUtil::IAgDoublesCollectionPtr GetShieldingThicknesses ( );
    enum AgEVeSpEnvApSource GetApSource ( );
    void PutApSource (
        enum AgEVeSpEnvApSource pVal );
    double GetAp ( );
    void PutAp (
        double pVal );
    _bstr_t GetFluxFile ( );
    void PutFluxFile (
        _bstr_t pVal );
    VARIANT_BOOL GetIncludeNuclearAttenNeutrons ( );
    void PutIncludeNuclearAttenNeutrons (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetElectronEnergies ( );
    SAFEARRAY * GetProtonEnergies ( );
    SAFEARRAY * ComputeElectronFluxes (
        const _variant_t & Time );
    SAFEARRAY * ComputeProtonFluxes (
        const _variant_t & Time );
    IAgVeSpEnvRadDoseRateCollectionPtr ComputeDoseRates (
        const _variant_t & Time );
    enum AgEVeSpEnvDetectorGeometry GetDetectorGeometry ( );
    void PutDetectorGeometry (
        enum AgEVeSpEnvDetectorGeometry pVal );
    SAFEARRAY * ComputeElectronIntegralFluxes (
        const _variant_t & Time );
    SAFEARRAY * ComputeProtonIntegralFluxes (
        const _variant_t & Time );
    VARIANT_BOOL GetUseModelEpoch ( );
    void PutUseModelEpoch (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShiftSAA ( );
    void PutShiftSAA (
        VARIANT_BOOL pVal );
    double GetDoseIntegrationStep ( );
    void PutDoseIntegrationStep (
        double pVal );
    double GetDoseReportStep ( );
    void PutDoseReportStep (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComputationMode (
        /*[out,retval]*/ enum AgEVeSpEnvComputationMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ComputationMode (
        /*[in]*/ enum AgEVeSpEnvComputationMode pVal ) = 0;
      virtual HRESULT __stdcall get_FluxStatus (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DoseChannel (
        /*[out,retval]*/ enum AgEVeSpEnvDoseChannel * pVal ) = 0;
      virtual HRESULT __stdcall put_DoseChannel (
        /*[in]*/ enum AgEVeSpEnvDoseChannel pVal ) = 0;
      virtual HRESULT __stdcall get_UseNuclearAttenuation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseNuclearAttenuation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DetectorType (
        /*[out,retval]*/ enum AgEVeSpEnvDetectorType * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectorType (
        /*[in]*/ enum AgEVeSpEnvDetectorType pVal ) = 0;
      virtual HRESULT __stdcall get_ShieldingThicknesses (
        /*[out,retval]*/ struct STKUtil::IAgDoublesCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ApSource (
        /*[out,retval]*/ enum AgEVeSpEnvApSource * pVal ) = 0;
      virtual HRESULT __stdcall put_ApSource (
        /*[in]*/ enum AgEVeSpEnvApSource pVal ) = 0;
      virtual HRESULT __stdcall get_Ap (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Ap (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FluxFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FluxFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeNuclearAttenNeutrons (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeNuclearAttenNeutrons (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetElectronEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetProtonEnergies (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeElectronFluxes (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeProtonFluxes (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeDoseRates (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ struct IAgVeSpEnvRadDoseRateCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DetectorGeometry (
        /*[out,retval]*/ enum AgEVeSpEnvDetectorGeometry * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectorGeometry (
        /*[in]*/ enum AgEVeSpEnvDetectorGeometry pVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeElectronIntegralFluxes (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeProtonIntegralFluxes (
        /*[in]*/ VARIANT Time,
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseModelEpoch (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseModelEpoch (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShiftSAA (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShiftSAA (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DoseIntegrationStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DoseIntegrationStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DoseReportStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DoseReportStep (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1df0b58d-57f5-48b7-a2e4-3d918ab6b3d0"))
AgVeSpEnvMagFieldLine;
    // [ default ] interface _IAgVeSpEnvMagFieldLine
    // interface IAgVeSpEnvMagFieldLine

struct __declspec(uuid("eee2754f-4857-43d6-b2dd-0615b531b3e8"))
_IAgVeSpEnvMagFieldLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIs2DVisible,put=PutIs2DVisible))
    VARIANT_BOOL Is2DVisible;
    __declspec(property(get=GetIs3DVisible,put=PutIs3DVisible))
    VARIANT_BOOL Is3DVisible;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    enum AgELineWidth LineWidth;
    __declspec(property(get=GetLabelVisible,put=PutLabelVisible))
    VARIANT_BOOL LabelVisible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIs2DVisible ( );
    void PutIs2DVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIs3DVisible ( );
    void PutIs3DVisible (
        VARIANT_BOOL pVal );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pVal );
    enum STKUtil::AgELineStyle GetLineStyle ( );
    void PutLineStyle (
        enum STKUtil::AgELineStyle pVal );
    enum AgELineWidth GetLineWidth ( );
    void PutLineWidth (
        enum AgELineWidth pVal );
    VARIANT_BOOL GetLabelVisible ( );
    void PutLabelVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Is2DVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Is2DVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Is3DVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Is3DVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum STKUtil::AgELineStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum STKUtil::AgELineStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ enum AgELineWidth * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum AgELineWidth pVal ) = 0;
      virtual HRESULT __stdcall get_LabelVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("3500f1f0-7f55-46d4-80e9-d7c924f0e7a1"))
AgVeSpEnvGraphics;
    // [ default ] interface _IAgVeSpEnvGraphics
    // interface IAgVeSpEnvGraphics

struct __declspec(uuid("3a1d8a69-c98b-438c-8b17-e7eae9cc1ae0"))
_IAgVeSpEnvGraphics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMagFieldLine))
    IAgVeSpEnvMagFieldLinePtr MagFieldLine;

    //
    // Wrapper methods for error-handling
    //

    IAgVeSpEnvMagFieldLinePtr GetMagFieldLine ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MagFieldLine (
        /*[out,retval]*/ struct IAgVeSpEnvMagFieldLine * * ppVal ) = 0;
};

struct __declspec(uuid("3b47d50c-b808-4270-b31a-da6c1890885f"))
AgVeSpEnvSpaceEnvironment;
    // [ default ] interface _IAgVeSpEnvSpaceEnvironment
    // interface IAgVeSpEnvSpaceEnvironment

struct __declspec(uuid("1d2022d8-bc6d-4d6d-855b-b361715e17b1"))
_IAgVeSpEnvSpaceEnvironment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSAAContour))
    IAgSpEnvSAAContourPtr SAAContour;
    __declspec(property(get=GetMagneticField))
    IAgVeSpEnvMagneticFieldPtr MagneticField;
    __declspec(property(get=GetVehTemperature))
    IAgVeSpEnvVehTemperaturePtr VehTemperature;
    __declspec(property(get=GetParticleFlux))
    IAgVeSpEnvParticleFluxPtr ParticleFlux;
    __declspec(property(get=GetRadiation))
    IAgVeSpEnvRadiationPtr Radiation;
    __declspec(property(get=GetGraphics))
    IAgVeSpEnvGraphicsPtr Graphics;

    //
    // Wrapper methods for error-handling
    //

    IAgSpEnvSAAContourPtr GetSAAContour ( );
    IAgVeSpEnvMagneticFieldPtr GetMagneticField ( );
    IAgVeSpEnvVehTemperaturePtr GetVehTemperature ( );
    IAgVeSpEnvParticleFluxPtr GetParticleFlux ( );
    IAgVeSpEnvRadiationPtr GetRadiation ( );
    IAgVeSpEnvGraphicsPtr GetGraphics ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SAAContour (
        /*[out,retval]*/ struct IAgSpEnvSAAContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MagneticField (
        /*[out,retval]*/ struct IAgVeSpEnvMagneticField * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VehTemperature (
        /*[out,retval]*/ struct IAgVeSpEnvVehTemperature * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ParticleFlux (
        /*[out,retval]*/ struct IAgVeSpEnvParticleFlux * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Radiation (
        /*[out,retval]*/ struct IAgVeSpEnvRadiation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgVeSpEnvGraphics * * ppVal ) = 0;
};

struct __declspec(uuid("91722c39-ca56-47b8-a1d2-17a3a963b358"))
AgCvSelectedGridPoint;
    // [ default ] interface _IAgCvSelectedGridPoint
    // interface IAgCvSelectedGridPoint

struct __declspec(uuid("f87afcbe-c1bd-44d7-8046-890d5a6b1c6a"))
_IAgCvSelectedGridPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude))
    _variant_t Latitude;
    __declspec(property(get=GetLongitude))
    _variant_t Longitude;
    __declspec(property(get=GetIntervals))
    SAFEARRAY * Intervals;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLatitude ( );
    _variant_t GetLongitude ( );
    SAFEARRAY * GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("ccdc3769-15ac-4077-b96f-1c352cb53256"))
IAgCvSelectedGridPoint : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLatitude))
    _variant_t Latitude;
    __declspec(property(get=GetLongitude))
    _variant_t Longitude;
    __declspec(property(get=GetIntervals))
    SAFEARRAY * Intervals;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLatitude ( );
    _variant_t GetLongitude ( );
    SAFEARRAY * GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("ab56c4de-5502-48e2-b281-c71f976f7d0e"))
AgCvGridPointSelection;
    // [ default ] interface IUnknown
    // interface IAgCvGridPointSelection

struct __declspec(uuid("f0c2bcf7-c109-44ca-85f8-bb2080c5b023"))
AgCelestialBodyCollection;
    // [ default ] interface IUnknown
    // interface IAgCelestialBodyCollection

struct __declspec(uuid("9f01ba96-8670-499d-bb59-003c470a1866"))
AgCelestialBodyInfo;
    // [ default ] interface _IAgCelestialBodyInfo
    // interface IAgCelestialBodyInfo

struct __declspec(uuid("33614137-1a4c-4a7c-9dcc-1a2773fa9c00"))
_IAgCelestialBodyInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIdentifier))
    _bstr_t Identifier;
    __declspec(property(get=GetCatalogName))
    _bstr_t CatalogName;
    __declspec(property(get=GetRA))
    double RA;
    __declspec(property(get=GetDec))
    double Dec;
    __declspec(property(get=GetParallax))
    double Parallax;
    __declspec(property(get=GetVelocity))
    double Velocity;
    __declspec(property(get=GetVisualMagnitude))
    double VisualMagnitude;
    __declspec(property(get=GetBminusV))
    double BminusV;
    __declspec(property(get=GetEffectiveTemperature))
    double EffectiveTemperature;
    __declspec(property(get=GetMagnitudeToIrradianceConversionFactor))
    double MagnitudeToIrradianceConversionFactor;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetIdentifier ( );
    _bstr_t GetCatalogName ( );
    double GetRA ( );
    double GetDec ( );
    double GetParallax ( );
    double GetVelocity ( );
    double GetVisualMagnitude ( );
    double GetBminusV ( );
    double GetEffectiveTemperature ( );
    double GetMagnitudeToIrradianceConversionFactor ( );
    STKUtil::IAgCartesian3VectorPtr GetLastComputedDirectionInICRF ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Identifier (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CatalogName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RA (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dec (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parallax (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Velocity (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VisualMagnitude (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BminusV (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EffectiveTemperature (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MagnitudeToIrradianceConversionFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetLastComputedDirectionInICRF (
        /*[out,retval]*/ struct STKUtil::IAgCartesian3Vector * * ppRetVal ) = 0;
};

struct __declspec(uuid("4f5b52d8-dd46-4311-bad2-d75adf9e912a"))
AgStkCentralBodyEllipsoid;
    // [ default ] interface _IAgStkCentralBodyEllipsoid
    // interface IAgStkCentralBodyEllipsoid

struct __declspec(uuid("5bf7ff56-2708-429e-be14-c2b3e46ae07e"))
_IAgStkCentralBodyEllipsoid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetA))
    double A;
    __declspec(property(get=GetB))
    double B;
    __declspec(property(get=GetC))
    double C;
    __declspec(property(get=GetMeanRadius))
    double MeanRadius;
    __declspec(property(get=GetVolumetricRadius))
    double VolumetricRadius;

    //
    // Wrapper methods for error-handling
    //

    double GetA ( );
    double GetB ( );
    double GetC ( );
    double GetMeanRadius ( );
    double GetVolumetricRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_A (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_B (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_C (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MeanRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VolumetricRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("3a4f92c5-17bc-4961-abbd-25fecd1900b5"))
AgStkCentralBody;
    // [ default ] interface _IAgStkCentralBody
    // interface IAgStkCentralBody

struct __declspec(uuid("fca3e943-ab8f-467d-802d-8bc5171257ce"))
_IAgStkCentralBody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEllipsoid))
    IAgStkCentralBodyEllipsoidPtr Ellipsoid;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IAgStkCentralBodyEllipsoidPtr GetEllipsoid ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ellipsoid (
        /*[out,retval]*/ struct IAgStkCentralBodyEllipsoid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("e8cc5433-e3c1-4290-9e9c-e6ad5dc0faed"))
AgStkCentralBodyCollection;
    // [ default ] interface IUnknown
    // interface IAgStkCentralBodyCollection

struct __declspec(uuid("14a88dff-bc33-4b0d-a420-1d112f6878e5"))
_IAgStkObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;

    //
    // Wrapper methods for error-handling
    //

    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("c57de75f-c558-4373-b225-246f754ac84a"))
IAgStkObject : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;

    //
    // Wrapper methods for error-handling
    //

    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("7486e7ef-03c4-449a-bdd2-160bc1b1af74"))
IAgStkObjectElementCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkObjectPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkObjectPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Contains (
        _bstr_t InstName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR InstName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("d6fb04c2-b5c0-4f6e-924d-a7a50e6f16f2"))
IAgStkObjectCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgStkObjectPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSupportedChildTypes))
    SAFEARRAY * SupportedChildTypes;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgStkObjectPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    IAgStkObjectPtr New (
        enum AgESTKObjectType EClassType,
        _bstr_t InstName );
    HRESULT Unload (
        enum AgESTKObjectType EClassType,
        _bstr_t InstName );
    IAgStkObjectElementCollectionPtr GetElements (
        enum AgESTKObjectType EClassType );
    HRESULT Import (
        _bstr_t FilePath );
    IAgStkObjectPtr NewOnCentralBody (
        enum AgESTKObjectType EClassType,
        _bstr_t InstName,
        _bstr_t CentralBodyName );
    SAFEARRAY * GetSupportedChildTypes ( );
    VARIANT_BOOL Contains (
        enum AgESTKObjectType EClassType,
        _bstr_t InstName );
    IAgStkObjectPtr ImportObject (
        _bstr_t FilePath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_New (
        /*[in]*/ enum AgESTKObjectType EClassType,
        /*[in]*/ BSTR InstName,
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload (
        /*[in]*/ enum AgESTKObjectType EClassType,
        /*[in]*/ BSTR InstName ) = 0;
      virtual HRESULT __stdcall raw_GetElements (
        /*[in]*/ enum AgESTKObjectType EClassType,
        /*[out,retval]*/ struct IAgStkObjectElementCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_NewOnCentralBody (
        /*[in]*/ enum AgESTKObjectType EClassType,
        /*[in]*/ BSTR InstName,
        /*[in]*/ BSTR CentralBodyName,
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SupportedChildTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ enum AgESTKObjectType EClassType,
        /*[in]*/ BSTR InstName,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportObject (
        /*[in]*/ BSTR FilePath,
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
};

struct __declspec(uuid("270e54ec-d27f-4cae-85e8-77f423ff55b2"))
IAgStkObjectRoot : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUnitPreferences))
    STKUtil::IAgUnitPrefsDimCollectionPtr UnitPreferences;
    __declspec(property(get=GetCurrentScenario))
    IAgStkObjectPtr CurrentScenario;
    __declspec(property(get=GetIsolated))
    VARIANT_BOOL Isolated;
    __declspec(property(get=GetConversionUtility))
    STKUtil::IAgConversionUtilityPtr ConversionUtility;
    __declspec(property(get=GetStdMil2525bSymbols))
    IAgStdMil2525bSymbolsPtr StdMil2525bSymbols;
    __declspec(property(get=GetAvailableFeatures))
    IAgAvailableFeaturesPtr AvailableFeatures;
    __declspec(property(get=GetVgtRoot))
    AgSTKVgtLib::IAgCrdnRootPtr VgtRoot;
    __declspec(property(get=GetCentralBodies))
    IAgStkCentralBodyCollectionPtr CentralBodies;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgExecCmdResultPtr ExecuteCommand (
        _bstr_t ConnectCommand );
    HRESULT LoadScenario (
        _bstr_t Path );
    HRESULT CloseScenario ( );
    HRESULT NewScenario (
        _bstr_t ScenarioName );
    HRESULT SaveScenario ( );
    HRESULT SaveScenarioAs (
        _bstr_t ScFileName );
    STKUtil::IAgUnitPrefsDimCollectionPtr GetUnitPreferences ( );
    IAgStkObjectPtr GetCurrentScenario ( );
    HRESULT LoadCustomMarker (
        _bstr_t Filename );
    SAFEARRAY * AvailableMarkerTypes ( );
    IAgStkObjectPtr GetObjectFromPath (
        _bstr_t ObjectPath );
    _bstr_t AllInstanceNamesToXML ( );
    HRESULT BeginUpdate ( );
    HRESULT EndUpdate ( );
    STKUtil::IAgExecMultiCmdResultPtr ExecuteMultipleCommands (
        SAFEARRAY * * ConnectCommands,
        enum STKUtil::AgEExecMultiCmdResultAction Action );
    HRESULT Isolate ( );
    VARIANT_BOOL GetIsolated ( );
    STKUtil::IAgConversionUtilityPtr GetConversionUtility ( );
    IAgStdMil2525bSymbolsPtr GetStdMil2525bSymbols ( );
    HRESULT LoadVDF (
        _bstr_t Path,
        _bstr_t Password );
    IAgAvailableFeaturesPtr GetAvailableFeatures ( );
    VARIANT_BOOL ObjectExists (
        _bstr_t ObjectPath );
    AgSTKVgtLib::IAgCrdnRootPtr GetVgtRoot ( );
    IAgStkCentralBodyCollectionPtr GetCentralBodies ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ExecuteCommand (
        /*[in]*/ BSTR ConnectCommand,
        /*[out,retval]*/ struct STKUtil::IAgExecCmdResult * * ppIAgExecCmdResult ) = 0;
      virtual HRESULT __stdcall raw_LoadScenario (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_CloseScenario ( ) = 0;
      virtual HRESULT __stdcall raw_NewScenario (
        /*[in]*/ BSTR ScenarioName ) = 0;
      virtual HRESULT __stdcall raw_SaveScenario ( ) = 0;
      virtual HRESULT __stdcall raw_SaveScenarioAs (
        /*[in]*/ BSTR ScFileName ) = 0;
      virtual HRESULT __stdcall get_UnitPreferences (
        /*[out,retval]*/ struct STKUtil::IAgUnitPrefsDimCollection * * ppVarResult ) = 0;
      virtual HRESULT __stdcall get_CurrentScenario (
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadCustomMarker (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_AvailableMarkerTypes (
        /*[out,retval]*/ SAFEARRAY * * ppMarkers ) = 0;
      virtual HRESULT __stdcall raw_GetObjectFromPath (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkObject * * ppIAgStkObject ) = 0;
      virtual HRESULT __stdcall raw_AllInstanceNamesToXML (
        /*[out,retval]*/ BSTR * pXML ) = 0;
      virtual HRESULT __stdcall raw_BeginUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_EndUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_ExecuteMultipleCommands (
        /*[in]*/ SAFEARRAY * * ConnectCommands,
        /*[in]*/ enum STKUtil::AgEExecMultiCmdResultAction Action,
        /*[out,retval]*/ struct STKUtil::IAgExecMultiCmdResult * * ppIAgExecMultiCmdResult ) = 0;
      virtual HRESULT __stdcall raw_Isolate ( ) = 0;
      virtual HRESULT __stdcall get_Isolated (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConversionUtility (
        /*[out,retval]*/ struct STKUtil::IAgConversionUtility * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StdMil2525bSymbols (
        /*[out,retval]*/ struct IAgStdMil2525bSymbols * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadVDF (
        /*[in]*/ BSTR Path,
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall get_AvailableFeatures (
        /*[out,retval]*/ struct IAgAvailableFeatures * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ObjectExists (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VgtRoot (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodies (
        /*[out,retval]*/ struct IAgStkCentralBodyCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("5f10ae33-c3c3-4eb9-8c7a-c343b8747517"))
IAgLinkToObject : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetLinkedObject))
    IAgStkObjectPtr LinkedObject;
    __declspec(property(get=GetAvailableObjects))
    SAFEARRAY * AvailableObjects;
    __declspec(property(get=GetIsIntrinsic))
    VARIANT_BOOL IsIntrinsic;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IAgStkObjectPtr GetLinkedObject ( );
    IAgStkObjectPtr BindTo (
        _bstr_t Path );
    SAFEARRAY * GetAvailableObjects ( );
    VARIANT_BOOL GetIsIntrinsic ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_BindTo (
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ struct IAgStkObject * * ppIAgStkObject ) = 0;
      virtual HRESULT __stdcall get_AvailableObjects (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsIntrinsic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("75d38c0c-3792-4995-aabf-5b1959df44af"))
IAgVOPointableElementsElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointingName,put=PutPointingName))
    _bstr_t PointingName;
    __declspec(property(get=GetAssignedTargetObject))
    IAgLinkToObjectPtr AssignedTargetObject;
    __declspec(property(get=GetIntervals))
    IAgIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointingName ( );
    void PutPointingName (
        _bstr_t pVal );
    IAgLinkToObjectPtr GetAssignedTargetObject ( );
    IAgIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointingName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PointingName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AssignedTargetObject (
        /*[out,retval]*/ struct IAgLinkToObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppVal ) = 0;
};

struct __declspec(uuid("2ceb50d1-3f18-4762-8e62-58ec3fbeffbc"))
IAgVOPointableElementsCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVOPointableElementsElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVOPointableElementsElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVOPointableElementsElementPtr Add ( );
    HRESULT Sort ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVOPointableElementsElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IAgVOPointableElementsElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Sort ( ) = 0;
};

struct __declspec(uuid("add7d1a3-3d29-48a9-8731-c28da6dfe5a1"))
IAgVOModelPointing : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPointableElements))
    IAgVOPointableElementsCollectionPtr PointableElements;

    //
    // Wrapper methods for error-handling
    //

    IAgVOPointableElementsCollectionPtr GetPointableElements ( );
    HRESULT AddInterval (
        _bstr_t AttachPointName,
        _bstr_t TargetName,
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT RemoveInterval (
        _bstr_t AttachPointName,
        _bstr_t TargetName );
    HRESULT LoadIntervals (
        _bstr_t Filename,
        _bstr_t AttachPoint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointableElements (
        /*[out,retval]*/ struct IAgVOPointableElementsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddInterval (
        /*[in]*/ BSTR AttachPointName,
        /*[in]*/ BSTR TargetName,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_RemoveInterval (
        /*[in]*/ BSTR AttachPointName,
        /*[in]*/ BSTR TargetName ) = 0;
      virtual HRESULT __stdcall raw_LoadIntervals (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR AttachPoint ) = 0;
};

struct __declspec(uuid("08add911-808c-4575-b725-3b52d6de70bb"))
_IAgFaVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgPtTargetVOModelPtr Model;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetDataDisplays))
    IAgVODataDisplayCollectionPtr DataDisplays;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetAzElMask))
    IAgVOAzElMaskPtr AzElMask;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgPtTargetVOModelPtr GetModel ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVODataDisplayCollectionPtr GetDataDisplays ( );
    IAgVOVectorPtr GetVector ( );
    IAgVOAzElMaskPtr GetAzElMask ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgPtTargetVOModel * * ppAgModel ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppAgOffsets ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppAgRangeContours ) = 0;
      virtual HRESULT __stdcall get_DataDisplays (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppAgDataDisplays ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ struct IAgVOAzElMask * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("8d8e61ed-5478-4d12-9f19-5239a98440ef"))
IAgFaVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgPtTargetVOModelPtr Model;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetDataDisplays))
    IAgVODataDisplayCollectionPtr DataDisplays;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetAzElMask))
    IAgVOAzElMaskPtr AzElMask;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgPtTargetVOModelPtr GetModel ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVODataDisplayCollectionPtr GetDataDisplays ( );
    IAgVOVectorPtr GetVector ( );
    IAgVOAzElMaskPtr GetAzElMask ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgPtTargetVOModel * * ppAgModel ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppAgOffsets ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppAgRangeContours ) = 0;
      virtual HRESULT __stdcall get_DataDisplays (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppAgDataDisplays ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ struct IAgVOAzElMask * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("0c72764d-d15a-4d7d-82d9-7da92d57af5d"))
IAgObjectLink : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetType))
    enum AgESTKObjectType Type;
    __declspec(property(get=GetLinkedObject))
    IAgStkObjectPtr LinkedObject;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    enum AgESTKObjectType GetType ( );
    IAgStkObjectPtr GetLinkedObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
};

struct __declspec(uuid("efd90dad-f665-4d96-9982-18d770f5064c"))
IAgObjectLinkCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgObjectLinkPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAvailableObjects))
    SAFEARRAY * AvailableObjects;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAgObjectLinkPtr GetItem (
        long Index );
    HRESULT Add (
        _bstr_t Name );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    HRESULT RemoveName (
        _bstr_t Name );
    SAFEARRAY * GetAvailableObjects ( );
    HRESULT AddObject (
        struct IAgStkObject * pObject );
    HRESULT RemoveObject (
        struct IAgStkObject * pObject );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgObjectLink * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_AvailableObjects (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddObject (
        /*[in]*/ struct IAgStkObject * pObject ) = 0;
      virtual HRESULT __stdcall raw_RemoveObject (
        /*[in]*/ struct IAgStkObject * pObject ) = 0;
};

struct __declspec(uuid("384208a6-48fd-405e-85ab-cb3f2c39e298"))
_IAgDuringAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayIntervals))
    IAgIntervalCollectionPtr DisplayIntervals;
    __declspec(property(get=GetAccessObjects))
    IAgObjectLinkCollectionPtr AccessObjects;

    //
    // Wrapper methods for error-handling
    //

    IAgIntervalCollectionPtr GetDisplayIntervals ( );
    IAgObjectLinkCollectionPtr GetAccessObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayIntervals (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessObjects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppVal ) = 0;
};

struct __declspec(uuid("42e2aa07-06ab-4cb7-a066-5334af20f38e"))
IAgDuringAccess : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayIntervals))
    IAgIntervalCollectionPtr DisplayIntervals;
    __declspec(property(get=GetAccessObjects))
    IAgObjectLinkCollectionPtr AccessObjects;

    //
    // Wrapper methods for error-handling
    //

    IAgIntervalCollectionPtr GetDisplayIntervals ( );
    IAgObjectLinkCollectionPtr GetAccessObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayIntervals (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessObjects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppVal ) = 0;
};

struct __declspec(uuid("aad7f1b4-f51d-49d8-99aa-99e559bfe630"))
IAgSnTargetCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgSnTargetPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IAgSnTargetPtr GetItem (
        long Index );
    HRESULT Add (
        _bstr_t Name );
    HRESULT Remove (
        long Index );
    HRESULT RemoveTarget (
        _bstr_t Name );
    HRESULT RemoveAll ( );
    HRESULT AddObject (
        struct IAgStkObject * pObject );
    HRESULT RemoveObject (
        struct IAgStkObject * pObject );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgSnTarget * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveTarget (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_AddObject (
        /*[in]*/ struct IAgStkObject * pObject ) = 0;
      virtual HRESULT __stdcall raw_RemoveObject (
        /*[in]*/ struct IAgStkObject * pObject ) = 0;
};

struct __declspec(uuid("338fb9bc-82eb-4432-aa38-258725801900"))
_IAgSnPtTargeted : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBoresight,put=PutBoresight))
    enum AgESnPtTrgtBsightType Boresight;
    __declspec(property(get=GetBoresightData))
    IAgSnPtTrgtBsightPtr BoresightData;
    __declspec(property(get=GetEnableAccessTimes,put=PutEnableAccessTimes))
    VARIANT_BOOL EnableAccessTimes;
    __declspec(property(get=GetAccessTimes))
    IAgAccessTimeCollectionPtr AccessTimes;
    __declspec(property(get=GetScheduleTimes))
    IAgScheduleTimeCollectionPtr ScheduleTimes;
    __declspec(property(get=GetTargets))
    IAgSnTargetCollectionPtr Targets;
    __declspec(property(get=GetAvailableTargets))
    SAFEARRAY * AvailableTargets;
    __declspec(property(get=GetAdvanced))
    IAgSnAccessAdvancedPtr Advanced;
    __declspec(property(get=GetSaveTargetAccess,put=PutSaveTargetAccess))
    VARIANT_BOOL SaveTargetAccess;

    //
    // Wrapper methods for error-handling
    //

    enum AgESnPtTrgtBsightType GetBoresight ( );
    void PutBoresight (
        enum AgESnPtTrgtBsightType pVal );
    IAgSnPtTrgtBsightPtr GetBoresightData ( );
    VARIANT_BOOL GetEnableAccessTimes ( );
    void PutEnableAccessTimes (
        VARIANT_BOOL pVal );
    IAgAccessTimeCollectionPtr GetAccessTimes ( );
    IAgScheduleTimeCollectionPtr GetScheduleTimes ( );
    IAgSnTargetCollectionPtr GetTargets ( );
    SAFEARRAY * GetAvailableTargets ( );
    IAgSnAccessAdvancedPtr GetAdvanced ( );
    VARIANT_BOOL GetSaveTargetAccess ( );
    void PutSaveTargetAccess (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Boresight (
        /*[out,retval]*/ enum AgESnPtTrgtBsightType * pVal ) = 0;
      virtual HRESULT __stdcall put_Boresight (
        /*[in]*/ enum AgESnPtTrgtBsightType pVal ) = 0;
      virtual HRESULT __stdcall get_BoresightData (
        /*[out,retval]*/ struct IAgSnPtTrgtBsight * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EnableAccessTimes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAccessTimes (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessTimes (
        /*[out,retval]*/ struct IAgAccessTimeCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ScheduleTimes (
        /*[out,retval]*/ struct IAgScheduleTimeCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Targets (
        /*[out,retval]*/ struct IAgSnTargetCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AvailableTargets (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgSnAccessAdvanced * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveTargetAccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SaveTargetAccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("2350ad66-7b61-45b4-9df7-e8206aaaa5e1"))
IAgSnPtTargeted : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetBoresight,put=PutBoresight))
    enum AgESnPtTrgtBsightType Boresight;
    __declspec(property(get=GetBoresightData))
    IAgSnPtTrgtBsightPtr BoresightData;
    __declspec(property(get=GetEnableAccessTimes,put=PutEnableAccessTimes))
    VARIANT_BOOL EnableAccessTimes;
    __declspec(property(get=GetAccessTimes))
    IAgAccessTimeCollectionPtr AccessTimes;
    __declspec(property(get=GetScheduleTimes))
    IAgScheduleTimeCollectionPtr ScheduleTimes;
    __declspec(property(get=GetTargets))
    IAgSnTargetCollectionPtr Targets;
    __declspec(property(get=GetAvailableTargets))
    SAFEARRAY * AvailableTargets;
    __declspec(property(get=GetAdvanced))
    IAgSnAccessAdvancedPtr Advanced;
    __declspec(property(get=GetSaveTargetAccess,put=PutSaveTargetAccess))
    VARIANT_BOOL SaveTargetAccess;

    //
    // Wrapper methods for error-handling
    //

    enum AgESnPtTrgtBsightType GetBoresight ( );
    void PutBoresight (
        enum AgESnPtTrgtBsightType pVal );
    IAgSnPtTrgtBsightPtr GetBoresightData ( );
    VARIANT_BOOL GetEnableAccessTimes ( );
    void PutEnableAccessTimes (
        VARIANT_BOOL pVal );
    IAgAccessTimeCollectionPtr GetAccessTimes ( );
    IAgScheduleTimeCollectionPtr GetScheduleTimes ( );
    IAgSnTargetCollectionPtr GetTargets ( );
    SAFEARRAY * GetAvailableTargets ( );
    IAgSnAccessAdvancedPtr GetAdvanced ( );
    VARIANT_BOOL GetSaveTargetAccess ( );
    void PutSaveTargetAccess (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Boresight (
        /*[out,retval]*/ enum AgESnPtTrgtBsightType * pVal ) = 0;
      virtual HRESULT __stdcall put_Boresight (
        /*[in]*/ enum AgESnPtTrgtBsightType pVal ) = 0;
      virtual HRESULT __stdcall get_BoresightData (
        /*[out,retval]*/ struct IAgSnPtTrgtBsight * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EnableAccessTimes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableAccessTimes (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessTimes (
        /*[out,retval]*/ struct IAgAccessTimeCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ScheduleTimes (
        /*[out,retval]*/ struct IAgScheduleTimeCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Targets (
        /*[out,retval]*/ struct IAgSnTargetCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AvailableTargets (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgSnAccessAdvanced * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SaveTargetAccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SaveTargetAccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("105aec86-e282-4c74-9a3e-a1ccc8c6b4f0"))
IAgFacility : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseLocalTimeOffset,put=PutUseLocalTimeOffset))
    VARIANT_BOOL UseLocalTimeOffset;
    __declspec(property(get=GetLocalTimeOffset,put=PutLocalTimeOffset))
    double LocalTimeOffset;
    __declspec(property(get=GetUseTerrain,put=PutUseTerrain))
    VARIANT_BOOL UseTerrain;
    __declspec(property(get=GetGraphics))
    IAgFaGraphicsPtr Graphics;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetTerrainNorm,put=PutTerrainNorm))
    enum AgETerrainNormType TerrainNorm;
    __declspec(property(get=GetTerrainNormData))
    IAgTerrainNormDataPtr TerrainNormData;
    __declspec(property(get=GetVO))
    IAgFaVOPtr VO;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetHeightAboveGround,put=PutHeightAboveGround))
    double HeightAboveGround;
    __declspec(property(get=GetAltRef,put=PutAltRef))
    enum AgEAltRefType AltRef;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLocalTimeOffset ( );
    void PutUseLocalTimeOffset (
        VARIANT_BOOL pUseLocalTimeOffset );
    double GetLocalTimeOffset ( );
    void PutLocalTimeOffset (
        double pLocalTimeOffset );
    VARIANT_BOOL GetUseTerrain ( );
    void PutUseTerrain (
        VARIANT_BOOL pEnableTerrain );
    HRESULT SetAzElMask (
        enum AgEAzElMaskType Type,
        const _variant_t & Data );
    IAgFaGraphicsPtr GetGraphics ( );
    STKUtil::IAgPositionPtr GetPosition ( );
    void PutTerrainNorm (
        enum AgETerrainNormType pType );
    IAgTerrainNormDataPtr GetTerrainNormData ( );
    IAgFaVOPtr GetVO ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    HRESULT ResetAzElMask ( );
    enum AgEAzElMaskType GetAzElMask ( );
    _variant_t GetAzElMaskData ( );
    enum AgETerrainNormType GetTerrainNorm ( );
    void PutHeightAboveGround (
        double pVal );
    double GetHeightAboveGround ( );
    void PutAltRef (
        enum AgEAltRefType pVal );
    enum AgEAltRefType GetAltRef ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLocalTimeOffset (
        /*[out,retval]*/ VARIANT_BOOL * pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_UseLocalTimeOffset (
        /*[in]*/ VARIANT_BOOL pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_LocalTimeOffset (
        /*[out,retval]*/ double * pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_LocalTimeOffset (
        /*[in]*/ double pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_UseTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pEnableTerrain ) = 0;
      virtual HRESULT __stdcall put_UseTerrain (
        /*[in]*/ VARIANT_BOOL pEnableTerrain ) = 0;
      virtual HRESULT __stdcall raw_SetAzElMask (
        /*[in]*/ enum AgEAzElMaskType Type,
        /*[in]*/ VARIANT Data ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgFaGraphics * * ppAgGraphics ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppPosition ) = 0;
      virtual HRESULT __stdcall put_TerrainNorm (
        /*[in]*/ enum AgETerrainNormType pType ) = 0;
      virtual HRESULT __stdcall get_TerrainNormData (
        /*[out,retval]*/ struct IAgTerrainNormData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgFaVO * * ppAgVO ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAgAccessConstraints ) = 0;
      virtual HRESULT __stdcall raw_ResetAzElMask ( ) = 0;
      virtual HRESULT __stdcall raw_GetAzElMask (
        /*[out,retval]*/ enum AgEAzElMaskType * pType ) = 0;
      virtual HRESULT __stdcall raw_GetAzElMaskData (
        /*[out,retval]*/ VARIANT * pData ) = 0;
      virtual HRESULT __stdcall get_TerrainNorm (
        /*[out,retval]*/ enum AgETerrainNormType * pType ) = 0;
      virtual HRESULT __stdcall put_HeightAboveGround (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HeightAboveGround (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AltRef (
        /*[in]*/ enum AgEAltRefType pVal ) = 0;
      virtual HRESULT __stdcall get_AltRef (
        /*[out,retval]*/ enum AgEAltRefType * pVal ) = 0;
};

struct __declspec(uuid("dc7c1977-01e0-4678-8212-5b71a97e16f9"))
IAgTargetVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgPtTargetVOModelPtr Model;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetDataDisplays))
    IAgVODataDisplayCollectionPtr DataDisplays;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetAzElMask))
    IAgVOAzElMaskPtr AzElMask;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgPtTargetVOModelPtr GetModel ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVODataDisplayCollectionPtr GetDataDisplays ( );
    IAgVOVectorPtr GetVector ( );
    IAgVOAzElMaskPtr GetAzElMask ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgPtTargetVOModel * * ppAgModel ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppAgOffsets ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppAgRangeContours ) = 0;
      virtual HRESULT __stdcall get_DataDisplays (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppAgDataDisplays ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ struct IAgVOAzElMask * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("72776a8a-abf2-46a1-96c9-a5b4449136d0"))
IAgTarget : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseLocalTimeOffset,put=PutUseLocalTimeOffset))
    VARIANT_BOOL UseLocalTimeOffset;
    __declspec(property(get=GetLocalTimeOffset,put=PutLocalTimeOffset))
    double LocalTimeOffset;
    __declspec(property(get=GetUseTerrain,put=PutUseTerrain))
    VARIANT_BOOL UseTerrain;
    __declspec(property(get=GetGraphics))
    IAgTargetGraphicsPtr Graphics;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetTerrainNorm,put=PutTerrainNorm))
    enum AgETerrainNormType TerrainNorm;
    __declspec(property(get=GetTerrainNormData))
    IAgTerrainNormDataPtr TerrainNormData;
    __declspec(property(get=GetVO))
    IAgTargetVOPtr VO;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetHeightAboveGround,put=PutHeightAboveGround))
    double HeightAboveGround;
    __declspec(property(get=GetAltRef,put=PutAltRef))
    enum AgEAltRefType AltRef;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLocalTimeOffset ( );
    void PutUseLocalTimeOffset (
        VARIANT_BOOL pUseLocalTimeOffset );
    double GetLocalTimeOffset ( );
    void PutLocalTimeOffset (
        double pLocalTimeOffset );
    VARIANT_BOOL GetUseTerrain ( );
    void PutUseTerrain (
        VARIANT_BOOL pEnableTerrain );
    HRESULT SetAzElMask (
        enum AgEAzElMaskType Type,
        const _variant_t & Data );
    IAgTargetGraphicsPtr GetGraphics ( );
    STKUtil::IAgPositionPtr GetPosition ( );
    void PutTerrainNorm (
        enum AgETerrainNormType pType );
    IAgTerrainNormDataPtr GetTerrainNormData ( );
    IAgTargetVOPtr GetVO ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    HRESULT ResetAzElMask ( );
    enum AgEAzElMaskType GetAzElMask ( );
    _variant_t GetAzElMaskData ( );
    enum AgETerrainNormType GetTerrainNorm ( );
    void PutHeightAboveGround (
        double pVal );
    double GetHeightAboveGround ( );
    void PutAltRef (
        enum AgEAltRefType pVal );
    enum AgEAltRefType GetAltRef ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLocalTimeOffset (
        /*[out,retval]*/ VARIANT_BOOL * pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_UseLocalTimeOffset (
        /*[in]*/ VARIANT_BOOL pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_LocalTimeOffset (
        /*[out,retval]*/ double * pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_LocalTimeOffset (
        /*[in]*/ double pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_UseTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pEnableTerrain ) = 0;
      virtual HRESULT __stdcall put_UseTerrain (
        /*[in]*/ VARIANT_BOOL pEnableTerrain ) = 0;
      virtual HRESULT __stdcall raw_SetAzElMask (
        /*[in]*/ enum AgEAzElMaskType Type,
        /*[in]*/ VARIANT Data ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgTargetGraphics * * ppAgGraphics ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppPosition ) = 0;
      virtual HRESULT __stdcall put_TerrainNorm (
        /*[in]*/ enum AgETerrainNormType pType ) = 0;
      virtual HRESULT __stdcall get_TerrainNormData (
        /*[out,retval]*/ struct IAgTerrainNormData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgTargetVO * * ppAgVO ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAgAccessConstraints ) = 0;
      virtual HRESULT __stdcall raw_ResetAzElMask ( ) = 0;
      virtual HRESULT __stdcall raw_GetAzElMask (
        /*[out,retval]*/ enum AgEAzElMaskType * pAzElMaskType ) = 0;
      virtual HRESULT __stdcall raw_GetAzElMaskData (
        /*[out,retval]*/ VARIANT * pData ) = 0;
      virtual HRESULT __stdcall get_TerrainNorm (
        /*[out,retval]*/ enum AgETerrainNormType * pType ) = 0;
      virtual HRESULT __stdcall put_HeightAboveGround (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HeightAboveGround (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AltRef (
        /*[in]*/ enum AgEAltRefType pVal ) = 0;
      virtual HRESULT __stdcall get_AltRef (
        /*[out,retval]*/ enum AgEAltRefType * pVal ) = 0;
};

struct __declspec(uuid("df075a8e-cd6d-48ce-983e-29dc93f47395"))
IAgSnCommonTasks : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgSnSimpleConicPatternPtr SetPatternSimpleConic (
        const _variant_t & ConeAngle,
        const _variant_t & AngularResolution );
    IAgSnComplexConicPatternPtr SetPatternComplexConic (
        const _variant_t & InnerConeHalfAngle,
        const _variant_t & OuterConeHalfAngle,
        const _variant_t & MinimumClockAngle,
        const _variant_t & MaximumClockAngle );
    IAgSnHalfPowerPatternPtr SetPatternHalfPower (
        double Frequency,
        double AntennaDiameter,
        const _variant_t & AngularResolution );
    IAgSnRectangularPatternPtr SetPatternRectangular (
        const _variant_t & VerticalHalfAngle,
        const _variant_t & HorizontalHalfAngle );
    IAgSnCustomPatternPtr SetPatternCustom (
        _bstr_t Filename );
    IAgSnSARPatternPtr SetPatternSAR (
        const _variant_t & MinElevationAngle,
        const _variant_t & MaxElevationAngle,
        const _variant_t & ForeExclusionAngle,
        const _variant_t & AftExclusionAngle,
        double ParentAltitude );
    IAgSnPtFixedPtr SetPointingFixedAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum STKUtil::AgEAzElAboutBoresight AboutBoresight );
    IAgSnPtFixedPtr SetPointingFixedEuler (
        enum STKUtil::AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    IAgSnPtFixedPtr SetPointingFixedQuat (
        double QX,
        double QY,
        double QZ,
        double QS );
    IAgSnPtFixedPtr SetPointingFixedYPR (
        enum STKUtil::AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    IAgSnPtFixedAxesPtr SetPointingFixedAxesAzEl (
        _bstr_t ReferenceAxes,
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum STKUtil::AgEAzElAboutBoresight AboutBoresight );
    IAgSnPtFixedAxesPtr SetPointingFixedAxesEuler (
        _bstr_t ReferenceAxes,
        enum STKUtil::AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    IAgSnPtFixedAxesPtr SetPointingFixedAxesQuat (
        _bstr_t ReferenceAxes,
        double QX,
        double QY,
        double QZ,
        double QS );
    IAgSnPtFixedAxesPtr SetPointingFixedAxesYPR (
        _bstr_t ReferenceAxes,
        enum STKUtil::AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    IAgSnPt3DModelPtr SetPointing3DModel (
        _bstr_t AttachName );
    IAgSnPtGrazingAltPtr SetPointingGrazingAlt (
        const _variant_t & AzimuthOffset,
        double GrazingAlt );
    IAgSnPtSpinningPtr SetPointingSpinning (
        const _variant_t & SpinAxisAzimuth,
        const _variant_t & SpinAxisElevation,
        const _variant_t & SpinAxisConeAngle,
        enum AgESnScanMode ScanMode,
        double SpinRate,
        const _variant_t & OffsetAngle,
        const _variant_t & ClockAngleStart,
        const _variant_t & ClockAngleStop );
    IAgSnPtTargetedPtr SetPointingTargetedTracking (
        enum AgETrackModeType TrackModeType,
        enum AgEBoresightType AboutBoresightType,
        _bstr_t TargetPath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPatternSimpleConic (
        /*[in]*/ VARIANT ConeAngle,
        /*[in]*/ VARIANT AngularResolution,
        /*[out,retval]*/ struct IAgSnSimpleConicPattern * * ppIAgSnSimpleConicPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternComplexConic (
        /*[in]*/ VARIANT InnerConeHalfAngle,
        /*[in]*/ VARIANT OuterConeHalfAngle,
        /*[in]*/ VARIANT MinimumClockAngle,
        /*[in]*/ VARIANT MaximumClockAngle,
        /*[out,retval]*/ struct IAgSnComplexConicPattern * * ppIAgSnComplexConicPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternHalfPower (
        /*[in]*/ double Frequency,
        /*[in]*/ double AntennaDiameter,
        /*[in]*/ VARIANT AngularResolution,
        /*[out,retval]*/ struct IAgSnHalfPowerPattern * * ppIAgSnHalfPowerPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternRectangular (
        /*[in]*/ VARIANT VerticalHalfAngle,
        /*[in]*/ VARIANT HorizontalHalfAngle,
        /*[out,retval]*/ struct IAgSnRectangularPattern * * ppIAgSnRectangularPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternCustom (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ struct IAgSnCustomPattern * * ppIAgSnCustomPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternSAR (
        /*[in]*/ VARIANT MinElevationAngle,
        /*[in]*/ VARIANT MaxElevationAngle,
        /*[in]*/ VARIANT ForeExclusionAngle,
        /*[in]*/ VARIANT AftExclusionAngle,
        /*[in]*/ double ParentAltitude,
        /*[out,retval]*/ struct IAgSnSARPattern * * ppIAgSnSARPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum STKUtil::AgEAzElAboutBoresight AboutBoresight,
        /*[out,retval]*/ struct IAgSnPtFixed * * ppIAgSnPtFixed ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedEuler (
        /*[in]*/ enum STKUtil::AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[out,retval]*/ struct IAgSnPtFixed * * ppIAgSnPtFixed ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedQuat (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS,
        /*[out,retval]*/ struct IAgSnPtFixed * * ppIAgSnPtFixed ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedYPR (
        /*[in]*/ enum STKUtil::AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll,
        /*[out,retval]*/ struct IAgSnPtFixed * * ppIAgSnPtFixed ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAxesAzEl (
        /*[in]*/ BSTR ReferenceAxes,
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum STKUtil::AgEAzElAboutBoresight AboutBoresight,
        /*[out,retval]*/ struct IAgSnPtFixedAxes * * ppIAgSnPtFixedAxes ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAxesEuler (
        /*[in]*/ BSTR ReferenceAxes,
        /*[in]*/ enum STKUtil::AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[out,retval]*/ struct IAgSnPtFixedAxes * * ppIAgSnPtFixedAxes ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAxesQuat (
        /*[in]*/ BSTR ReferenceAxes,
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS,
        /*[out,retval]*/ struct IAgSnPtFixedAxes * * ppIAgSnPtFixedAxes ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAxesYPR (
        /*[in]*/ BSTR ReferenceAxes,
        /*[in]*/ enum STKUtil::AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll,
        /*[out,retval]*/ struct IAgSnPtFixedAxes * * ppIAgSnPtFixedAxes ) = 0;
      virtual HRESULT __stdcall raw_SetPointing3DModel (
        /*[in]*/ BSTR AttachName,
        /*[out,retval]*/ struct IAgSnPt3DModel * * ppIAgSnPt3DModel ) = 0;
      virtual HRESULT __stdcall raw_SetPointingGrazingAlt (
        /*[in]*/ VARIANT AzimuthOffset,
        /*[in]*/ double GrazingAlt,
        /*[out,retval]*/ struct IAgSnPtGrazingAlt * * ppIAgSnPtGrazingAlt ) = 0;
      virtual HRESULT __stdcall raw_SetPointingSpinning (
        /*[in]*/ VARIANT SpinAxisAzimuth,
        /*[in]*/ VARIANT SpinAxisElevation,
        /*[in]*/ VARIANT SpinAxisConeAngle,
        /*[in]*/ enum AgESnScanMode ScanMode,
        /*[in]*/ double SpinRate,
        /*[in]*/ VARIANT OffsetAngle,
        /*[in]*/ VARIANT ClockAngleStart,
        /*[in]*/ VARIANT ClockAngleStop,
        /*[out,retval]*/ struct IAgSnPtSpinning * * ppIAgSnPtSpinning ) = 0;
      virtual HRESULT __stdcall raw_SetPointingTargetedTracking (
        /*[in]*/ enum AgETrackModeType TrackModeType,
        /*[in]*/ enum AgEBoresightType AboutBoresightType,
        /*[in]*/ BSTR TargetPath,
        /*[out,retval]*/ struct IAgSnPtTargeted * * ppIAgSnPtTargeted ) = 0;
};

struct __declspec(uuid("7db89546-cec7-48d3-bacc-747a2e30870d"))
IAgSensor : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPatternType))
    enum AgESnPattern PatternType;
    __declspec(property(get=GetPattern))
    IAgSnPatternPtr Pattern;
    __declspec(property(get=GetPointingType))
    enum AgESnPointing PointingType;
    __declspec(property(get=GetPointing))
    IAgSnPointingPtr Pointing;
    __declspec(property(get=GetAzElMask))
    enum AgEAzElMaskType AzElMask;
    __declspec(property(get=GetAzElMaskData))
    IAgAzElMaskDataPtr AzElMaskData;
    __declspec(property(get=GetFocalLength,put=PutFocalLength))
    double FocalLength;
    __declspec(property(get=GetDetectorPitch,put=PutDetectorPitch))
    double DetectorPitch;
    __declspec(property(get=GetRefraction,put=PutRefraction))
    enum AgESnRefractionType Refraction;
    __declspec(property(get=GetGraphics))
    IAgSnGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgSnVOPtr VO;
    __declspec(property(get=GetLocationType))
    enum AgESnLocation LocationType;
    __declspec(property(get=GetLocationData))
    STKUtil::IAgLocationDataPtr LocationData;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetSwath))
    IAgSwathPtr Swath;
    __declspec(property(get=GetRefractionSupportedTypes))
    SAFEARRAY * RefractionSupportedTypes;
    __declspec(property(get=GetRefractionModel))
    IAgRfModelBasePtr RefractionModel;
    __declspec(property(get=GetUseRefractionInAccess,put=PutUseRefractionInAccess))
    VARIANT_BOOL UseRefractionInAccess;
    __declspec(property(get=GetCommonTasks))
    IAgSnCommonTasksPtr CommonTasks;

    //
    // Wrapper methods for error-handling
    //

    enum AgESnPattern GetPatternType ( );
    HRESULT SetPatternType (
        enum AgESnPattern PatternType );
    IAgSnPatternPtr GetPattern ( );
    enum AgESnPointing GetPointingType ( );
    HRESULT SetPointingType (
        enum AgESnPointing PointingType );
    HRESULT SetPointingExternalFile (
        _bstr_t MaskFile );
    IAgSnPointingPtr GetPointing ( );
    HRESULT ResetAzElMask ( );
    enum AgEAzElMaskType GetAzElMask ( );
    HRESULT SetAzElMask (
        enum AgEAzElMaskType AzElMaskType );
    HRESULT SetAzElMaskFile (
        _bstr_t Filename );
    IAgAzElMaskDataPtr GetAzElMaskData ( );
    double GetFocalLength ( );
    void PutFocalLength (
        double pVal );
    double GetDetectorPitch ( );
    void PutDetectorPitch (
        double pVal );
    enum AgESnRefractionType GetRefraction ( );
    void PutRefraction (
        enum AgESnRefractionType pVal );
    IAgSnGraphicsPtr GetGraphics ( );
    IAgSnVOPtr GetVO ( );
    enum AgESnLocation GetLocationType ( );
    HRESULT SetLocationType (
        enum AgESnLocation LocationType );
    STKUtil::IAgLocationDataPtr GetLocationData ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgSwathPtr GetSwath ( );
    VARIANT_BOOL IsRefractionTypeSupported (
        enum AgESnRefractionType Model );
    SAFEARRAY * GetRefractionSupportedTypes ( );
    IAgRfModelBasePtr GetRefractionModel ( );
    VARIANT_BOOL GetUseRefractionInAccess ( );
    void PutUseRefractionInAccess (
        VARIANT_BOOL pVal );
    IAgSnCommonTasksPtr GetCommonTasks ( );
    IAgCelestialBodyCollectionPtr GetStarsInFOV (
        const _variant_t & Epoch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PatternType (
        /*[out,retval]*/ enum AgESnPattern * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPatternType (
        /*[in]*/ enum AgESnPattern PatternType ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ struct IAgSnPattern * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PointingType (
        /*[out,retval]*/ enum AgESnPointing * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPointingType (
        /*[in]*/ enum AgESnPointing PointingType ) = 0;
      virtual HRESULT __stdcall raw_SetPointingExternalFile (
        /*[in]*/ BSTR MaskFile ) = 0;
      virtual HRESULT __stdcall get_Pointing (
        /*[out,retval]*/ struct IAgSnPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ResetAzElMask ( ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ enum AgEAzElMaskType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAzElMask (
        /*[in]*/ enum AgEAzElMaskType AzElMaskType ) = 0;
      virtual HRESULT __stdcall raw_SetAzElMaskFile (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_AzElMaskData (
        /*[out,retval]*/ struct IAgAzElMaskData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FocalLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FocalLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DetectorPitch (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectorPitch (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Refraction (
        /*[out,retval]*/ enum AgESnRefractionType * pVal ) = 0;
      virtual HRESULT __stdcall put_Refraction (
        /*[in]*/ enum AgESnRefractionType pVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgSnGraphics * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgSnVO * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LocationType (
        /*[out,retval]*/ enum AgESnLocation * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLocationType (
        /*[in]*/ enum AgESnLocation LocationType ) = 0;
      virtual HRESULT __stdcall get_LocationData (
        /*[out,retval]*/ struct STKUtil::IAgLocationData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAccessConstraints ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgSwath * * ppSwath ) = 0;
      virtual HRESULT __stdcall raw_IsRefractionTypeSupported (
        /*[in]*/ enum AgESnRefractionType Model,
        /*[out,retval]*/ VARIANT_BOOL * pSupported ) = 0;
      virtual HRESULT __stdcall get_RefractionSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RefractionModel (
        /*[out,retval]*/ struct IAgRfModelBase * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseRefractionInAccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseRefractionInAccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgSnCommonTasks * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetStarsInFOV (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCelestialBodyCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("9e8b076c-4f30-45c3-82b5-8ae20fab55c5"))
_IAgSnCommonTasks : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgSnSimpleConicPatternPtr SetPatternSimpleConic (
        const _variant_t & ConeAngle,
        const _variant_t & AngularResolution );
    IAgSnComplexConicPatternPtr SetPatternComplexConic (
        const _variant_t & InnerConeHalfAngle,
        const _variant_t & OuterConeHalfAngle,
        const _variant_t & MinimumClockAngle,
        const _variant_t & MaximumClockAngle );
    IAgSnHalfPowerPatternPtr SetPatternHalfPower (
        double Frequency,
        double AntennaDiameter,
        const _variant_t & AngularResolution );
    IAgSnRectangularPatternPtr SetPatternRectangular (
        const _variant_t & VerticalHalfAngle,
        const _variant_t & HorizontalHalfAngle );
    IAgSnCustomPatternPtr SetPatternCustom (
        _bstr_t Filename );
    IAgSnSARPatternPtr SetPatternSAR (
        const _variant_t & MinElevationAngle,
        const _variant_t & MaxElevationAngle,
        const _variant_t & ForeExclusionAngle,
        const _variant_t & AftExclusionAngle,
        double ParentAltitude );
    IAgSnPtFixedPtr SetPointingFixedAzEl (
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum STKUtil::AgEAzElAboutBoresight AboutBoresight );
    IAgSnPtFixedPtr SetPointingFixedEuler (
        enum STKUtil::AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    IAgSnPtFixedPtr SetPointingFixedQuat (
        double QX,
        double QY,
        double QZ,
        double QS );
    IAgSnPtFixedPtr SetPointingFixedYPR (
        enum STKUtil::AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    IAgSnPtFixedAxesPtr SetPointingFixedAxesAzEl (
        _bstr_t ReferenceAxes,
        const _variant_t & Azimuth,
        const _variant_t & Elevation,
        enum STKUtil::AgEAzElAboutBoresight AboutBoresight );
    IAgSnPtFixedAxesPtr SetPointingFixedAxesEuler (
        _bstr_t ReferenceAxes,
        enum STKUtil::AgEEulerOrientationSequence Sequence,
        const _variant_t & A,
        const _variant_t & B,
        const _variant_t & C );
    IAgSnPtFixedAxesPtr SetPointingFixedAxesQuat (
        _bstr_t ReferenceAxes,
        double QX,
        double QY,
        double QZ,
        double QS );
    IAgSnPtFixedAxesPtr SetPointingFixedAxesYPR (
        _bstr_t ReferenceAxes,
        enum STKUtil::AgEYPRAnglesSequence Sequence,
        const _variant_t & Yaw,
        const _variant_t & Pitch,
        const _variant_t & Roll );
    IAgSnPt3DModelPtr SetPointing3DModel (
        _bstr_t AttachName );
    IAgSnPtGrazingAltPtr SetPointingGrazingAlt (
        const _variant_t & AzimuthOffset,
        double GrazingAlt );
    IAgSnPtSpinningPtr SetPointingSpinning (
        const _variant_t & SpinAxisAzimuth,
        const _variant_t & SpinAxisElevation,
        const _variant_t & SpinAxisConeAngle,
        enum AgESnScanMode ScanMode,
        double SpinRate,
        const _variant_t & OffsetAngle,
        const _variant_t & ClockAngleStart,
        const _variant_t & ClockAngleStop );
    IAgSnPtTargetedPtr SetPointingTargetedTracking (
        enum AgETrackModeType TrackModeType,
        enum AgEBoresightType BoresightType,
        _bstr_t TargetPath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetPatternSimpleConic (
        /*[in]*/ VARIANT ConeAngle,
        /*[in]*/ VARIANT AngularResolution,
        /*[out,retval]*/ struct IAgSnSimpleConicPattern * * ppIAgSnSimpleConicPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternComplexConic (
        /*[in]*/ VARIANT InnerConeHalfAngle,
        /*[in]*/ VARIANT OuterConeHalfAngle,
        /*[in]*/ VARIANT MinimumClockAngle,
        /*[in]*/ VARIANT MaximumClockAngle,
        /*[out,retval]*/ struct IAgSnComplexConicPattern * * ppIAgSnComplexConicPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternHalfPower (
        /*[in]*/ double Frequency,
        /*[in]*/ double AntennaDiameter,
        /*[in]*/ VARIANT AngularResolution,
        /*[out,retval]*/ struct IAgSnHalfPowerPattern * * ppIAgSnHalfPowerPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternRectangular (
        /*[in]*/ VARIANT VerticalHalfAngle,
        /*[in]*/ VARIANT HorizontalHalfAngle,
        /*[out,retval]*/ struct IAgSnRectangularPattern * * ppIAgSnRectangularPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternCustom (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ struct IAgSnCustomPattern * * ppIAgSnCustomPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPatternSAR (
        /*[in]*/ VARIANT MinElevationAngle,
        /*[in]*/ VARIANT MaxElevationAngle,
        /*[in]*/ VARIANT ForeExclusionAngle,
        /*[in]*/ VARIANT AftExclusionAngle,
        /*[in]*/ double ParentAltitude,
        /*[out,retval]*/ struct IAgSnSARPattern * * ppIAgSnSARPattern ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAzEl (
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum STKUtil::AgEAzElAboutBoresight AboutBoresight,
        /*[out,retval]*/ struct IAgSnPtFixed * * ppIAgSnPtFixed ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedEuler (
        /*[in]*/ enum STKUtil::AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[out,retval]*/ struct IAgSnPtFixed * * ppIAgSnPtFixed ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedQuat (
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS,
        /*[out,retval]*/ struct IAgSnPtFixed * * ppIAgSnPtFixed ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedYPR (
        /*[in]*/ enum STKUtil::AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll,
        /*[out,retval]*/ struct IAgSnPtFixed * * ppIAgSnPtFixed ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAxesAzEl (
        /*[in]*/ BSTR ReferenceAxes,
        /*[in]*/ VARIANT Azimuth,
        /*[in]*/ VARIANT Elevation,
        /*[in]*/ enum STKUtil::AgEAzElAboutBoresight AboutBoresight,
        /*[out,retval]*/ struct IAgSnPtFixedAxes * * ppIAgSnPtFixedAxes ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAxesEuler (
        /*[in]*/ BSTR ReferenceAxes,
        /*[in]*/ enum STKUtil::AgEEulerOrientationSequence Sequence,
        /*[in]*/ VARIANT A,
        /*[in]*/ VARIANT B,
        /*[in]*/ VARIANT C,
        /*[out,retval]*/ struct IAgSnPtFixedAxes * * ppIAgSnPtFixedAxes ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAxesQuat (
        /*[in]*/ BSTR ReferenceAxes,
        /*[in]*/ double QX,
        /*[in]*/ double QY,
        /*[in]*/ double QZ,
        /*[in]*/ double QS,
        /*[out,retval]*/ struct IAgSnPtFixedAxes * * ppIAgSnPtFixedAxes ) = 0;
      virtual HRESULT __stdcall raw_SetPointingFixedAxesYPR (
        /*[in]*/ BSTR ReferenceAxes,
        /*[in]*/ enum STKUtil::AgEYPRAnglesSequence Sequence,
        /*[in]*/ VARIANT Yaw,
        /*[in]*/ VARIANT Pitch,
        /*[in]*/ VARIANT Roll,
        /*[out,retval]*/ struct IAgSnPtFixedAxes * * ppIAgSnPtFixedAxes ) = 0;
      virtual HRESULT __stdcall raw_SetPointing3DModel (
        /*[in]*/ BSTR AttachName,
        /*[out,retval]*/ struct IAgSnPt3DModel * * ppIAgSnPt3DModel ) = 0;
      virtual HRESULT __stdcall raw_SetPointingGrazingAlt (
        /*[in]*/ VARIANT AzimuthOffset,
        /*[in]*/ double GrazingAlt,
        /*[out,retval]*/ struct IAgSnPtGrazingAlt * * ppIAgSnPtGrazingAlt ) = 0;
      virtual HRESULT __stdcall raw_SetPointingSpinning (
        /*[in]*/ VARIANT SpinAxisAzimuth,
        /*[in]*/ VARIANT SpinAxisElevation,
        /*[in]*/ VARIANT SpinAxisConeAngle,
        /*[in]*/ enum AgESnScanMode ScanMode,
        /*[in]*/ double SpinRate,
        /*[in]*/ VARIANT OffsetAngle,
        /*[in]*/ VARIANT ClockAngleStart,
        /*[in]*/ VARIANT ClockAngleStop,
        /*[out,retval]*/ struct IAgSnPtSpinning * * ppIAgSnPtFixedSpinning ) = 0;
      virtual HRESULT __stdcall raw_SetPointingTargetedTracking (
        /*[in]*/ enum AgETrackModeType TrackModeType,
        /*[in]*/ enum AgEBoresightType BoresightType,
        /*[in]*/ BSTR TargetPath,
        /*[out,retval]*/ struct IAgSnPtTargeted * * ppIAgSnPtTargeted ) = 0;
};

struct __declspec(uuid("111f5dbf-4431-431d-b0b6-888c28ebcc92"))
_IAgTargetVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgPtTargetVOModelPtr Model;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetDataDisplays))
    IAgVODataDisplayCollectionPtr DataDisplays;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetAzElMask))
    IAgVOAzElMaskPtr AzElMask;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetAOULabelSwapDistance))
    IAgVOLabelSwapDistancePtr AOULabelSwapDistance;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgPtTargetVOModelPtr GetModel ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVODataDisplayCollectionPtr GetDataDisplays ( );
    IAgVOVectorPtr GetVector ( );
    IAgVOAzElMaskPtr GetAzElMask ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVOLabelSwapDistancePtr GetAOULabelSwapDistance ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgPtTargetVOModel * * ppAgModel ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppAgOffsets ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppAgRangeContours ) = 0;
      virtual HRESULT __stdcall get_DataDisplays (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppAgDataDisplays ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ struct IAgVOAzElMask * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AOULabelSwapDistance (
        /*[out,retval]*/ struct IAgVOLabelSwapDistance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("6c54ee38-3c5f-42a7-b7d2-05f05c386ae8"))
_IAgObjectLink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetType))
    enum AgESTKObjectType Type;
    __declspec(property(get=GetLinkedObject))
    IAgStkObjectPtr LinkedObject;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    enum AgESTKObjectType GetType ( );
    IAgStkObjectPtr GetLinkedObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
};

struct __declspec(uuid("8cf1afed-ce17-447b-ac07-2db542dc18d6"))
_IAgLinkToObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetLinkedObject))
    IAgStkObjectPtr LinkedObject;
    __declspec(property(get=GetAvailableObjects))
    SAFEARRAY * AvailableObjects;
    __declspec(property(get=GetIsIntrinsic))
    VARIANT_BOOL IsIntrinsic;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IAgStkObjectPtr GetLinkedObject ( );
    IAgStkObjectPtr BindTo (
        _bstr_t Path );
    SAFEARRAY * GetAvailableObjects ( );
    VARIANT_BOOL GetIsIntrinsic ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_BindTo (
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableObjects (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsIntrinsic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("5e1cf8c4-24da-4569-b920-e89b744fd5fe"))
IAgVeVOCovariancePointingContour : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSigmaScaleType))
    enum AgEVeVOSigmaScale SigmaScaleType;
    __declspec(property(get=GetSigmaScaleSupportedTypes))
    SAFEARRAY * SigmaScaleSupportedTypes;
    __declspec(property(get=GetSigmaScale))
    IAgVeVOSigmaScalePtr SigmaScale;
    __declspec(property(get=GetAttributesType))
    enum AgEVeVOAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeVOAttributesPtr Attributes;
    __declspec(property(get=GetIsConeVisible,put=PutIsConeVisible))
    VARIANT_BOOL IsConeVisible;
    __declspec(property(get=GetSize))
    IAgVeVOSizePtr Size;
    __declspec(property(get=GetToObject))
    IAgLinkToObjectPtr ToObject;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeVOSigmaScale GetSigmaScaleType ( );
    HRESULT SetSigmaScaleType (
        enum AgEVeVOSigmaScale SigmaScale );
    VARIANT_BOOL IsSigmaScaleTypeSupported (
        enum AgEVeVOSigmaScale SigmaScale );
    SAFEARRAY * GetSigmaScaleSupportedTypes ( );
    IAgVeVOSigmaScalePtr GetSigmaScale ( );
    enum AgEVeVOAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeVOAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeVOAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeVOAttributesPtr GetAttributes ( );
    VARIANT_BOOL GetIsConeVisible ( );
    void PutIsConeVisible (
        VARIANT_BOOL pVal );
    IAgVeVOSizePtr GetSize ( );
    IAgLinkToObjectPtr GetToObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SigmaScaleType (
        /*[out,retval]*/ enum AgEVeVOSigmaScale * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSigmaScaleType (
        /*[in]*/ enum AgEVeVOSigmaScale SigmaScale ) = 0;
      virtual HRESULT __stdcall raw_IsSigmaScaleTypeSupported (
        /*[in]*/ enum AgEVeVOSigmaScale SigmaScale,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SigmaScaleSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SigmaScale (
        /*[out,retval]*/ struct IAgVeVOSigmaScale * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeVOAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeVOAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeVOAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsConeVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsConeVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ struct IAgVeVOSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ToObject (
        /*[out,retval]*/ struct IAgLinkToObject * * ppVal ) = 0;
};

struct __declspec(uuid("1c34d19a-1205-475f-a769-4b4c04ca55ed"))
IAgSaVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgSaVOModelPtr Model;
    __declspec(property(get=GetOrbitSystems))
    IAgVeVOSystemsCollectionPtr OrbitSystems;
    __declspec(property(get=GetProximity))
    IAgVeVOOrbitProximityPtr Proximity;
    __declspec(property(get=GetElevContours))
    IAgVeVOElevContoursPtr ElevContours;
    __declspec(property(get=GetSAA))
    IAgVeVOSAAPtr SAA;
    __declspec(property(get=GetCovariancePointingContour))
    IAgVeVOCovariancePointingContourPtr CovariancePointingContour;
    __declspec(property(get=GetPass))
    IAgVeVOPassPtr Pass;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetDropLines))
    IAgVeVOOrbitDropLinesPtr DropLines;
    __declspec(property(get=GetBPlanes))
    IAgVeVOBPlanesPtr BPlanes;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgSaVOModelPtr GetModel ( );
    IAgVeVOSystemsCollectionPtr GetOrbitSystems ( );
    IAgVeVOOrbitProximityPtr GetProximity ( );
    IAgVeVOElevContoursPtr GetElevContours ( );
    IAgVeVOSAAPtr GetSAA ( );
    IAgVeVOCovariancePointingContourPtr GetCovariancePointingContour ( );
    IAgVeVOPassPtr GetPass ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVeVOOrbitDropLinesPtr GetDropLines ( );
    IAgVeVOBPlanesPtr GetBPlanes ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgSaVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OrbitSystems (
        /*[out,retval]*/ struct IAgVeVOSystemsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVOOrbitProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeVOElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeVOSAA * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovariancePointingContour (
        /*[out,retval]*/ struct IAgVeVOCovariancePointingContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Pass (
        /*[out,retval]*/ struct IAgVeVOPass * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVOOrbitDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BPlanes (
        /*[out,retval]*/ struct IAgVeVOBPlanes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("fb080709-1112-411c-bc55-733b2656c589"))
IAgSatellite : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetPropagatorType))
    enum AgEVePropagatorType PropagatorType;
    __declspec(property(get=GetPropagator))
    IAgVePropagatorPtr Propagator;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetMassProperties))
    IAgVeMassPropertiesPtr MassProperties;
    __declspec(property(get=GetPassBreak))
    IAgVePassBreakPtr PassBreak;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetGraphics))
    IAgSaGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgSaVOPtr VO;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetEclipseBodies))
    IAgVeEclipseBodiesPtr EclipseBodies;
    __declspec(property(get=GetPropagatorSupportedTypes))
    SAFEARRAY * PropagatorSupportedTypes;
    __declspec(property(get=GetExportTools))
    IAgSaExportToolsPtr ExportTools;
    __declspec(property(get=GetSpaceEnvironment))
    IAgVeSpEnvSpaceEnvironmentPtr SpaceEnvironment;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetPropagatorType ( );
    HRESULT SetPropagatorType (
        enum AgEVePropagatorType EPropagator );
    IAgVePropagatorPtr GetPropagator ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgVeMassPropertiesPtr GetMassProperties ( );
    IAgVePassBreakPtr GetPassBreak ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgSaGraphicsPtr GetGraphics ( );
    IAgSaVOPtr GetVO ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgVeEclipseBodiesPtr GetEclipseBodies ( );
    VARIANT_BOOL IsPropagatorTypeSupported (
        enum AgEVePropagatorType Propagator );
    SAFEARRAY * GetPropagatorSupportedTypes ( );
    IAgSaExportToolsPtr GetExportTools ( );
    IAgVeSpEnvSpaceEnvironmentPtr GetSpaceEnvironment ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PropagatorType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPropagatorType (
        /*[in]*/ enum AgEVePropagatorType EPropagator ) = 0;
      virtual HRESULT __stdcall get_Propagator (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MassProperties (
        /*[out,retval]*/ struct IAgVeMassProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassBreak (
        /*[out,retval]*/ struct IAgVePassBreak * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgSaGraphics * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgSaVO * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EclipseBodies (
        /*[out,retval]*/ struct IAgVeEclipseBodies * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsPropagatorTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Propagator,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PropagatorSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgSaExportTools * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpaceEnvironment (
        /*[out,retval]*/ struct IAgVeSpEnvSpaceEnvironment * * ppRetVal ) = 0;
};

struct __declspec(uuid("02b6f3b4-d972-4781-a93b-5f4c534d954f"))
_IAgSaVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgSaVOModelPtr Model;
    __declspec(property(get=GetOrbitSystems))
    IAgVeVOSystemsCollectionPtr OrbitSystems;
    __declspec(property(get=GetProximity))
    IAgVeVOOrbitProximityPtr Proximity;
    __declspec(property(get=GetElevContours))
    IAgVeVOElevContoursPtr ElevContours;
    __declspec(property(get=GetSAA))
    IAgVeVOSAAPtr SAA;
    __declspec(property(get=GetCovariancePointingContour))
    IAgVeVOCovariancePointingContourPtr CovariancePointingContour;
    __declspec(property(get=GetPass))
    IAgVeVOPassPtr Pass;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetDropLines))
    IAgVeVOOrbitDropLinesPtr DropLines;
    __declspec(property(get=GetBPlanes))
    IAgVeVOBPlanesPtr BPlanes;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgSaVOModelPtr GetModel ( );
    IAgVeVOSystemsCollectionPtr GetOrbitSystems ( );
    IAgVeVOOrbitProximityPtr GetProximity ( );
    IAgVeVOElevContoursPtr GetElevContours ( );
    IAgVeVOSAAPtr GetSAA ( );
    IAgVeVOCovariancePointingContourPtr GetCovariancePointingContour ( );
    IAgVeVOPassPtr GetPass ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVeVOOrbitDropLinesPtr GetDropLines ( );
    IAgVeVOBPlanesPtr GetBPlanes ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgSaVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OrbitSystems (
        /*[out,retval]*/ struct IAgVeVOSystemsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVOOrbitProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeVOElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeVOSAA * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovariancePointingContour (
        /*[out,retval]*/ struct IAgVeVOCovariancePointingContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Pass (
        /*[out,retval]*/ struct IAgVeVOPass * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVOOrbitDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BPlanes (
        /*[out,retval]*/ struct IAgVeVOBPlanes * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("35276915-f4d6-4d31-86fd-e86a3a5bf1c4"))
IAgVeScheduleTimesElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStart,put=PutStart))
    _variant_t Start;
    __declspec(property(get=GetStop,put=PutStop))
    _variant_t Stop;
    __declspec(property(get=GetTarget))
    IAgLinkToObjectPtr Target;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStart ( );
    void PutStart (
        const _variant_t & pVal );
    _variant_t GetStop ( );
    void PutStop (
        const _variant_t & pVal );
    IAgLinkToObjectPtr GetTarget ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Stop (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ struct IAgLinkToObject * * ppVal ) = 0;
};

struct __declspec(uuid("aa36e1b7-0c11-4730-863a-cf895c1d9dc4"))
IAgVeScheduleTimesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeScheduleTimesElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAvailableTargets))
    SAFEARRAY * AvailableTargets;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeScheduleTimesElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeScheduleTimesElementPtr Add (
        _bstr_t TargetPath );
    SAFEARRAY * GetAvailableTargets ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeScheduleTimesElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR TargetPath,
        /*[out,retval]*/ struct IAgVeScheduleTimesElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableTargets (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
};

struct __declspec(uuid("f6269a71-bc7d-4b4f-93ea-ba3e9262b7fb"))
_IAgVeTargetTimes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseAccessTimes,put=PutUseAccessTimes))
    VARIANT_BOOL UseAccessTimes;
    __declspec(property(get=GetAccessTimes))
    IAgAccessTimeCollectionPtr AccessTimes;
    __declspec(property(get=GetScheduleTimes))
    IAgVeScheduleTimesCollectionPtr ScheduleTimes;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseAccessTimes ( );
    void PutUseAccessTimes (
        VARIANT_BOOL pVal );
    IAgAccessTimeCollectionPtr GetAccessTimes ( );
    IAgVeScheduleTimesCollectionPtr GetScheduleTimes ( );
    HRESULT Deconflict ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseAccessTimes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseAccessTimes (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessTimes (
        /*[out,retval]*/ struct IAgAccessTimeCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ScheduleTimes (
        /*[out,retval]*/ struct IAgVeScheduleTimesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Deconflict ( ) = 0;
};

struct __declspec(uuid("30e37d46-15ca-482e-bb92-aa8071e185f4"))
IAgVeTargetTimes : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseAccessTimes,put=PutUseAccessTimes))
    VARIANT_BOOL UseAccessTimes;
    __declspec(property(get=GetAccessTimes))
    IAgAccessTimeCollectionPtr AccessTimes;
    __declspec(property(get=GetScheduleTimes))
    IAgVeScheduleTimesCollectionPtr ScheduleTimes;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseAccessTimes ( );
    void PutUseAccessTimes (
        VARIANT_BOOL pVal );
    IAgAccessTimeCollectionPtr GetAccessTimes ( );
    IAgVeScheduleTimesCollectionPtr GetScheduleTimes ( );
    HRESULT Deconflict ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseAccessTimes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseAccessTimes (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessTimes (
        /*[out,retval]*/ struct IAgAccessTimeCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ScheduleTimes (
        /*[out,retval]*/ struct IAgVeScheduleTimesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Deconflict ( ) = 0;
};

struct __declspec(uuid("79020c7d-0c28-4746-a972-7dbb78a2f9e8"))
IAgVeTargetPointingIntervalCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeScheduleTimesElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeScheduleTimesElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeScheduleTimesElementPtr Add (
        const _variant_t & StartTime,
        const _variant_t & StopTime );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeScheduleTimesElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime,
        /*[out,retval]*/ struct IAgVeScheduleTimesElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("70019dd9-3355-4044-80b9-2edeb8d8b018"))
IAgVeTargetPointingElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTarget))
    IAgLinkToObjectPtr Target;
    __declspec(property(get=GetAlignedVector))
    STKUtil::IAgDirectionPtr AlignedVector;
    __declspec(property(get=GetConstrainedVector))
    STKUtil::IAgDirectionPtr ConstrainedVector;
    __declspec(property(get=GetConstrainedVectorReference,put=PutConstrainedVectorReference))
    _bstr_t ConstrainedVectorReference;
    __declspec(property(get=GetAvailableConstrainedVectors))
    SAFEARRAY * AvailableConstrainedVectors;
    __declspec(property(get=GetLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude))
    double Altitude;
    __declspec(property(get=GetIntervals))
    IAgVeTargetPointingIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    IAgLinkToObjectPtr GetTarget ( );
    STKUtil::IAgDirectionPtr GetAlignedVector ( );
    STKUtil::IAgDirectionPtr GetConstrainedVector ( );
    _bstr_t GetConstrainedVectorReference ( );
    void PutConstrainedVectorReference (
        _bstr_t pVal );
    VARIANT_BOOL ResetConstrainedVectorReference ( );
    SAFEARRAY * GetAvailableConstrainedVectors ( );
    double GetLatitude ( );
    double GetLongitude ( );
    double GetAltitude ( );
    IAgVeTargetPointingIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ struct IAgLinkToObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AlignedVector (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedVector (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedVectorReference (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConstrainedVectorReference (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetConstrainedVectorReference (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableConstrainedVectors (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgVeTargetPointingIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("4fa5b15a-0b31-4503-b4e6-fc92fced3bf7"))
IAgVeTargetPointingCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgVeTargetPointingElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAvailableTargets))
    SAFEARRAY * AvailableTargets;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgVeTargetPointingElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgVeTargetPointingElementPtr Add (
        _bstr_t ShortPath );
    SAFEARRAY * GetAvailableTargets ( );
    VARIANT_BOOL Contains (
        _bstr_t Path );
    HRESULT Remove (
        _bstr_t Path );
    IAgVeTargetPointingElementPtr AddPositionAsTarget (
        double Latitude,
        double Longitude,
        double Altitude );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgVeTargetPointingElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR ShortPath,
        /*[out,retval]*/ struct IAgVeTargetPointingElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableTargets (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Contains (
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_AddPositionAsTarget (
        /*[in]*/ double Latitude,
        /*[in]*/ double Longitude,
        /*[in]*/ double Altitude,
        /*[out,retval]*/ struct IAgVeTargetPointingElement * * ppRetVal ) = 0;
};

struct __declspec(uuid("63da06e2-07c4-42b7-b7cf-66fd1edf8917"))
_IAgVeAttPointing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseTargetPointing,put=PutUseTargetPointing))
    VARIANT_BOOL UseTargetPointing;
    __declspec(property(get=GetTargets))
    IAgVeTargetPointingCollectionPtr Targets;
    __declspec(property(get=GetTargetTimes))
    IAgVeTargetTimesPtr TargetTimes;
    __declspec(property(get=GetMatchAngularVelocity,put=PutMatchAngularVelocity))
    VARIANT_BOOL MatchAngularVelocity;
    __declspec(property(get=GetSlewTime,put=PutSlewTime))
    double SlewTime;
    __declspec(property(get=GetAdvanced))
    IAgVeAccessAdvancedPtr Advanced;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseTargetPointing ( );
    void PutUseTargetPointing (
        VARIANT_BOOL pVal );
    IAgVeTargetPointingCollectionPtr GetTargets ( );
    IAgVeTargetTimesPtr GetTargetTimes ( );
    VARIANT_BOOL GetMatchAngularVelocity ( );
    void PutMatchAngularVelocity (
        VARIANT_BOOL pVal );
    double GetSlewTime ( );
    void PutSlewTime (
        double pVal );
    IAgVeAccessAdvancedPtr GetAdvanced ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseTargetPointing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTargetPointing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Targets (
        /*[out,retval]*/ struct IAgVeTargetPointingCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TargetTimes (
        /*[out,retval]*/ struct IAgVeTargetTimes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MatchAngularVelocity (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MatchAngularVelocity (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SlewTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlewTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgVeAccessAdvanced * * ppRetVal ) = 0;
};

struct __declspec(uuid("f6ae8e74-4ff0-4d18-aefb-15590988b7a0"))
IAgVePointing : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUseTargetPointing,put=PutUseTargetPointing))
    VARIANT_BOOL UseTargetPointing;
    __declspec(property(get=GetTargets))
    IAgVeTargetPointingCollectionPtr Targets;
    __declspec(property(get=GetTargetTimes))
    IAgVeTargetTimesPtr TargetTimes;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseTargetPointing ( );
    void PutUseTargetPointing (
        VARIANT_BOOL pVal );
    IAgVeTargetPointingCollectionPtr GetTargets ( );
    IAgVeTargetTimesPtr GetTargetTimes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseTargetPointing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTargetPointing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Targets (
        /*[out,retval]*/ struct IAgVeTargetPointingCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TargetTimes (
        /*[out,retval]*/ struct IAgVeTargetTimes * * ppVal ) = 0;
};

struct __declspec(uuid("25881a4f-fde3-4fe3-832b-a35951c44dce"))
IAgVeAttPointing : IAgVePointing
{
    //
    // Property data
    //

    __declspec(property(get=GetMatchAngularVelocity,put=PutMatchAngularVelocity))
    VARIANT_BOOL MatchAngularVelocity;
    __declspec(property(get=GetSlewTime,put=PutSlewTime))
    double SlewTime;
    __declspec(property(get=GetAdvanced))
    IAgVeAccessAdvancedPtr Advanced;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMatchAngularVelocity ( );
    void PutMatchAngularVelocity (
        VARIANT_BOOL pVal );
    double GetSlewTime ( );
    void PutSlewTime (
        double pVal );
    IAgVeAccessAdvancedPtr GetAdvanced ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MatchAngularVelocity (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MatchAngularVelocity (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SlewTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SlewTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgVeAccessAdvanced * * ppRetVal ) = 0;
};

struct __declspec(uuid("b0418850-6516-4335-8aeb-ed5ad72149c2"))
_IAgVeTargetPointingElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTarget))
    IAgLinkToObjectPtr Target;
    __declspec(property(get=GetAlignedVector))
    STKUtil::IAgDirectionPtr AlignedVector;
    __declspec(property(get=GetConstrainedVector))
    STKUtil::IAgDirectionPtr ConstrainedVector;
    __declspec(property(get=GetConstrainedVectorReference,put=PutConstrainedVectorReference))
    _bstr_t ConstrainedVectorReference;
    __declspec(property(get=GetAvailableConstrainedVectors))
    SAFEARRAY * AvailableConstrainedVectors;
    __declspec(property(get=GetLatitude))
    double Latitude;
    __declspec(property(get=GetLongitude))
    double Longitude;
    __declspec(property(get=GetAltitude))
    double Altitude;
    __declspec(property(get=GetIntervals))
    IAgVeTargetPointingIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    IAgLinkToObjectPtr GetTarget ( );
    STKUtil::IAgDirectionPtr GetAlignedVector ( );
    STKUtil::IAgDirectionPtr GetConstrainedVector ( );
    _bstr_t GetConstrainedVectorReference ( );
    void PutConstrainedVectorReference (
        _bstr_t pVal );
    VARIANT_BOOL ResetConstrainedVectorReference ( );
    SAFEARRAY * GetAvailableConstrainedVectors ( );
    double GetLatitude ( );
    double GetLongitude ( );
    double GetAltitude ( );
    IAgVeTargetPointingIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ struct IAgLinkToObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AlignedVector (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedVector (
        /*[out,retval]*/ struct STKUtil::IAgDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedVectorReference (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConstrainedVectorReference (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetConstrainedVectorReference (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_AvailableConstrainedVectors (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Latitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Longitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgVeTargetPointingIntervalCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("c72875d9-ddaa-464e-86b0-9664119f5ab7"))
_IAgVeScheduleTimesElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart,put=PutStart))
    _variant_t Start;
    __declspec(property(get=GetStop,put=PutStop))
    _variant_t Stop;
    __declspec(property(get=GetTarget))
    IAgLinkToObjectPtr Target;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStart ( );
    void PutStart (
        const _variant_t & pVal );
    _variant_t GetStop ( );
    void PutStop (
        const _variant_t & pVal );
    IAgLinkToObjectPtr GetTarget ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Stop (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Stop (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ struct IAgLinkToObject * * ppVal ) = 0;
};

struct __declspec(uuid("1fd910c8-2d92-4897-9d78-2764ea5aecd2"))
_IAgVeTrajectoryAttitudeStandard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEAttitudeStandardType Type;
    __declspec(property(get=GetBasic))
    IAgVeStandardBasicPtr Basic;
    __declspec(property(get=GetPointing))
    IAgVeAttPointingPtr Pointing;
    __declspec(property(get=GetExternal))
    IAgVeAttExternalPtr External;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAttitudeStandardType GetType ( );
    IAgVeStandardBasicPtr GetBasic ( );
    IAgVeAttPointingPtr GetPointing ( );
    IAgVeAttExternalPtr GetExternal ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEAttitudeStandardType * pVal ) = 0;
      virtual HRESULT __stdcall get_Basic (
        /*[out,retval]*/ struct IAgVeStandardBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Pointing (
        /*[out,retval]*/ struct IAgVeAttPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_External (
        /*[out,retval]*/ struct IAgVeAttExternal * * ppVal ) = 0;
};

struct __declspec(uuid("d49e2f30-7b7f-489d-b17e-949e79ac9d97"))
IAgVeTrajectoryAttitudeStandard : IAgVeAttitudeStandard
{
    //
    // Property data
    //

    __declspec(property(get=GetBasic))
    IAgVeStandardBasicPtr Basic;
    __declspec(property(get=GetPointing))
    IAgVeAttPointingPtr Pointing;
    __declspec(property(get=GetExternal))
    IAgVeAttExternalPtr External;

    //
    // Wrapper methods for error-handling
    //

    IAgVeStandardBasicPtr GetBasic ( );
    IAgVeAttPointingPtr GetPointing ( );
    IAgVeAttExternalPtr GetExternal ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Basic (
        /*[out,retval]*/ struct IAgVeStandardBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Pointing (
        /*[out,retval]*/ struct IAgVeAttPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_External (
        /*[out,retval]*/ struct IAgVeAttExternal * * ppVal ) = 0;
};

struct __declspec(uuid("b6865dff-51ea-4a88-ab99-a2c85d90b413"))
_IAgVeOrbitAttitudeStandard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum AgEAttitudeStandardType Type;
    __declspec(property(get=GetBasic))
    IAgVeStandardBasicPtr Basic;
    __declspec(property(get=GetPointing))
    IAgVeAttPointingPtr Pointing;
    __declspec(property(get=GetExternal))
    IAgVeAttExternalPtr External;
    __declspec(property(get=GetIntegratedAttitude))
    IAgVeIntegratedAttitudePtr IntegratedAttitude;

    //
    // Wrapper methods for error-handling
    //

    enum AgEAttitudeStandardType GetType ( );
    IAgVeStandardBasicPtr GetBasic ( );
    IAgVeAttPointingPtr GetPointing ( );
    IAgVeAttExternalPtr GetExternal ( );
    IAgVeIntegratedAttitudePtr GetIntegratedAttitude ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AgEAttitudeStandardType * pVal ) = 0;
      virtual HRESULT __stdcall get_Basic (
        /*[out,retval]*/ struct IAgVeStandardBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Pointing (
        /*[out,retval]*/ struct IAgVeAttPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_External (
        /*[out,retval]*/ struct IAgVeAttExternal * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IntegratedAttitude (
        /*[out,retval]*/ struct IAgVeIntegratedAttitude * * ppRetVal ) = 0;
};

struct __declspec(uuid("fc83c6b7-0b9a-4fd6-98ef-8582f4ae0f52"))
IAgVeOrbitAttitudeStandard : IAgVeAttitudeStandard
{
    //
    // Property data
    //

    __declspec(property(get=GetBasic))
    IAgVeStandardBasicPtr Basic;
    __declspec(property(get=GetPointing))
    IAgVeAttPointingPtr Pointing;
    __declspec(property(get=GetExternal))
    IAgVeAttExternalPtr External;
    __declspec(property(get=GetIntegratedAttitude))
    IAgVeIntegratedAttitudePtr IntegratedAttitude;

    //
    // Wrapper methods for error-handling
    //

    IAgVeStandardBasicPtr GetBasic ( );
    IAgVeAttPointingPtr GetPointing ( );
    IAgVeAttExternalPtr GetExternal ( );
    IAgVeIntegratedAttitudePtr GetIntegratedAttitude ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Basic (
        /*[out,retval]*/ struct IAgVeStandardBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Pointing (
        /*[out,retval]*/ struct IAgVeAttPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall get_External (
        /*[out,retval]*/ struct IAgVeAttExternal * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IntegratedAttitude (
        /*[out,retval]*/ struct IAgVeIntegratedAttitude * * ppRetVal ) = 0;
};

struct __declspec(uuid("09ba87f6-ed6b-4fe2-afb9-5a3ec5115e43"))
_IAgVeGfxAttributesAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAccessObjects))
    IAgObjectLinkCollectionPtr AccessObjects;
    __declspec(property(get=GetDuringAccess))
    IAgVeGfxAttributesBasicPtr DuringAccess;
    __declspec(property(get=GetNoAccess))
    IAgVeGfxAttributesBasicPtr NoAccess;

    //
    // Wrapper methods for error-handling
    //

    IAgObjectLinkCollectionPtr GetAccessObjects ( );
    IAgVeGfxAttributesBasicPtr GetDuringAccess ( );
    IAgVeGfxAttributesBasicPtr GetNoAccess ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AccessObjects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DuringAccess (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_NoAccess (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
};

struct __declspec(uuid("1174f603-620c-45ae-bfb8-783eb533a1ed"))
IAgVeGfxAttributesAccess : IAgVeGfxAttributes
{
    //
    // Property data
    //

    __declspec(property(get=GetAccessObjects))
    IAgObjectLinkCollectionPtr AccessObjects;
    __declspec(property(get=GetDuringAccess))
    IAgVeGfxAttributesBasicPtr DuringAccess;
    __declspec(property(get=GetNoAccess))
    IAgVeGfxAttributesBasicPtr NoAccess;

    //
    // Wrapper methods for error-handling
    //

    IAgObjectLinkCollectionPtr GetAccessObjects ( );
    IAgVeGfxAttributesBasicPtr GetDuringAccess ( );
    IAgVeGfxAttributesBasicPtr GetNoAccess ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AccessObjects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DuringAccess (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
      virtual HRESULT __stdcall get_NoAccess (
        /*[out,retval]*/ struct IAgVeGfxAttributesBasic * * ppVal ) = 0;
};

struct __declspec(uuid("67d75dc6-7730-447d-a7e2-cd6384b1d91e"))
_IAgVOPointableElementsElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPointingName,put=PutPointingName))
    _bstr_t PointingName;
    __declspec(property(get=GetAssignedTargetObject))
    IAgLinkToObjectPtr AssignedTargetObject;
    __declspec(property(get=GetIntervals))
    IAgIntervalCollectionPtr Intervals;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPointingName ( );
    void PutPointingName (
        _bstr_t pVal );
    IAgLinkToObjectPtr GetAssignedTargetObject ( );
    IAgIntervalCollectionPtr GetIntervals ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointingName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PointingName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AssignedTargetObject (
        /*[out,retval]*/ struct IAgLinkToObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Intervals (
        /*[out,retval]*/ struct IAgIntervalCollection * * ppVal ) = 0;
};

struct __declspec(uuid("6f0f9512-a315-4d51-bf52-ac536055f8cb"))
_IAgVeVOCovariancePointingContour : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSigmaScaleType))
    enum AgEVeVOSigmaScale SigmaScaleType;
    __declspec(property(get=GetSigmaScaleSupportedTypes))
    SAFEARRAY * SigmaScaleSupportedTypes;
    __declspec(property(get=GetSigmaScale))
    IAgVeVOSigmaScalePtr SigmaScale;
    __declspec(property(get=GetAttributesType))
    enum AgEVeVOAttributes AttributesType;
    __declspec(property(get=GetAttributesSupportedTypes))
    SAFEARRAY * AttributesSupportedTypes;
    __declspec(property(get=GetAttributes))
    IAgVeVOAttributesPtr Attributes;
    __declspec(property(get=GetIsConeVisible,put=PutIsConeVisible))
    VARIANT_BOOL IsConeVisible;
    __declspec(property(get=GetSize))
    IAgVeVOSizePtr Size;
    __declspec(property(get=GetToObject))
    IAgLinkToObjectPtr ToObject;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVeVOSigmaScale GetSigmaScaleType ( );
    HRESULT SetSigmaScaleType (
        enum AgEVeVOSigmaScale SigmaScale );
    VARIANT_BOOL IsSigmaScaleTypeSupported (
        enum AgEVeVOSigmaScale SigmaScale );
    SAFEARRAY * GetSigmaScaleSupportedTypes ( );
    IAgVeVOSigmaScalePtr GetSigmaScale ( );
    enum AgEVeVOAttributes GetAttributesType ( );
    HRESULT SetAttributesType (
        enum AgEVeVOAttributes Attributes );
    VARIANT_BOOL IsAttributesTypeSupported (
        enum AgEVeVOAttributes Attributes );
    SAFEARRAY * GetAttributesSupportedTypes ( );
    IAgVeVOAttributesPtr GetAttributes ( );
    VARIANT_BOOL GetIsConeVisible ( );
    void PutIsConeVisible (
        VARIANT_BOOL pVal );
    IAgVeVOSizePtr GetSize ( );
    IAgLinkToObjectPtr GetToObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SigmaScaleType (
        /*[out,retval]*/ enum AgEVeVOSigmaScale * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetSigmaScaleType (
        /*[in]*/ enum AgEVeVOSigmaScale SigmaScale ) = 0;
      virtual HRESULT __stdcall raw_IsSigmaScaleTypeSupported (
        /*[in]*/ enum AgEVeVOSigmaScale SigmaScale,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SigmaScaleSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SigmaScale (
        /*[out,retval]*/ struct IAgVeVOSigmaScale * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttributesType (
        /*[out,retval]*/ enum AgEVeVOAttributes * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttributesType (
        /*[in]*/ enum AgEVeVOAttributes Attributes ) = 0;
      virtual HRESULT __stdcall raw_IsAttributesTypeSupported (
        /*[in]*/ enum AgEVeVOAttributes Attributes,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttributesSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct IAgVeVOAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsConeVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsConeVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ struct IAgVeVOSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ToObject (
        /*[out,retval]*/ struct IAgLinkToObject * * ppVal ) = 0;
};

struct __declspec(uuid("ad4a6356-7af7-4deb-9831-030d8659a3fc"))
_IAgVOModelPointing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPointableElements))
    IAgVOPointableElementsCollectionPtr PointableElements;

    //
    // Wrapper methods for error-handling
    //

    IAgVOPointableElementsCollectionPtr GetPointableElements ( );
    HRESULT AddInterval (
        _bstr_t AttachPointName,
        _bstr_t TargetName,
        const _variant_t & Start,
        const _variant_t & Stop );
    HRESULT RemoveInterval (
        _bstr_t AttachPointName,
        _bstr_t TargetName );
    HRESULT LoadIntervals (
        _bstr_t Filename,
        _bstr_t AttachPoint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PointableElements (
        /*[out,retval]*/ struct IAgVOPointableElementsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddInterval (
        /*[in]*/ BSTR AttachPointName,
        /*[in]*/ BSTR TargetName,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Stop ) = 0;
      virtual HRESULT __stdcall raw_RemoveInterval (
        /*[in]*/ BSTR AttachPointName,
        /*[in]*/ BSTR TargetName ) = 0;
      virtual HRESULT __stdcall raw_LoadIntervals (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR AttachPoint ) = 0;
};

struct __declspec(uuid("fd219bdc-2f2d-49e6-a51b-da8c7db67fce"))
IAgLvVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgVeTrajectoryVOModelPtr Model;
    __declspec(property(get=GetTrajectorySystems))
    IAgVeVOSystemsCollectionPtr TrajectorySystems;
    __declspec(property(get=GetProximity))
    IAgVeVOTrajectoryProximityPtr Proximity;
    __declspec(property(get=GetElevContours))
    IAgVeVOElevContoursPtr ElevContours;
    __declspec(property(get=GetCovariancePointingContour))
    IAgVeVOCovariancePointingContourPtr CovariancePointingContour;
    __declspec(property(get=GetTrajectory))
    IAgVeVOTrajectoryPtr Trajectory;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetDropLines))
    IAgVeVOTrajectoryDropLinesPtr DropLines;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;
    __declspec(property(get=GetSAA))
    IAgVeVOSAAPtr SAA;

    //
    // Wrapper methods for error-handling
    //

    IAgVeTrajectoryVOModelPtr GetModel ( );
    IAgVeVOSystemsCollectionPtr GetTrajectorySystems ( );
    IAgVeVOTrajectoryProximityPtr GetProximity ( );
    IAgVeVOElevContoursPtr GetElevContours ( );
    IAgVeVOCovariancePointingContourPtr GetCovariancePointingContour ( );
    IAgVeVOTrajectoryPtr GetTrajectory ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVeVOTrajectoryDropLinesPtr GetDropLines ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );
    IAgVeVOSAAPtr GetSAA ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgVeTrajectoryVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TrajectorySystems (
        /*[out,retval]*/ struct IAgVeVOSystemsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVOTrajectoryProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeVOElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovariancePointingContour (
        /*[out,retval]*/ struct IAgVeVOCovariancePointingContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVOTrajectory * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVOTrajectoryDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeVOSAA * * ppVal ) = 0;
};

struct __declspec(uuid("00b78a1a-506f-4915-8364-96935dada2ad"))
IAgLaunchVehicle : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTrajectoryType))
    enum AgEVePropagatorType TrajectoryType;
    __declspec(property(get=GetTrajectorySupportedTypes))
    SAFEARRAY * TrajectorySupportedTypes;
    __declspec(property(get=GetTrajectory))
    IAgVePropagatorPtr Trajectory;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetGraphics))
    IAgLvGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgLvVOPtr VO;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetExportTools))
    IAgLvExportToolsPtr ExportTools;
    __declspec(property(get=GetSpaceEnvironment))
    IAgVeSpEnvSpaceEnvironmentPtr SpaceEnvironment;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetTrajectoryType ( );
    HRESULT SetTrajectoryType (
        enum AgEVePropagatorType Trajectory );
    VARIANT_BOOL IsTrajectoryTypeSupported (
        enum AgEVePropagatorType Trajectory );
    SAFEARRAY * GetTrajectorySupportedTypes ( );
    IAgVePropagatorPtr GetTrajectory ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgLvGraphicsPtr GetGraphics ( );
    IAgLvVOPtr GetVO ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgLvExportToolsPtr GetExportTools ( );
    IAgVeSpEnvSpaceEnvironmentPtr GetSpaceEnvironment ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrajectoryType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrajectoryType (
        /*[in]*/ enum AgEVePropagatorType Trajectory ) = 0;
      virtual HRESULT __stdcall raw_IsTrajectoryTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Trajectory,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectorySupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgLvGraphics * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgLvVO * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgLvExportTools * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpaceEnvironment (
        /*[out,retval]*/ struct IAgVeSpEnvSpaceEnvironment * * ppRetVal ) = 0;
};

struct __declspec(uuid("7096aedb-dd74-462e-ae15-cd79d19b8886"))
_IAgLvVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgVeTrajectoryVOModelPtr Model;
    __declspec(property(get=GetTrajectorySystems))
    IAgVeVOSystemsCollectionPtr TrajectorySystems;
    __declspec(property(get=GetProximity))
    IAgVeVOTrajectoryProximityPtr Proximity;
    __declspec(property(get=GetElevContours))
    IAgVeVOElevContoursPtr ElevContours;
    __declspec(property(get=GetCovariancePointingContour))
    IAgVeVOCovariancePointingContourPtr CovariancePointingContour;
    __declspec(property(get=GetTrajectory))
    IAgVeVOTrajectoryPtr Trajectory;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetDropLines))
    IAgVeVOTrajectoryDropLinesPtr DropLines;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;
    __declspec(property(get=GetSAA))
    IAgVeVOSAAPtr SAA;

    //
    // Wrapper methods for error-handling
    //

    IAgVeTrajectoryVOModelPtr GetModel ( );
    IAgVeVOSystemsCollectionPtr GetTrajectorySystems ( );
    IAgVeVOTrajectoryProximityPtr GetProximity ( );
    IAgVeVOElevContoursPtr GetElevContours ( );
    IAgVeVOCovariancePointingContourPtr GetCovariancePointingContour ( );
    IAgVeVOTrajectoryPtr GetTrajectory ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVeVOTrajectoryDropLinesPtr GetDropLines ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );
    IAgVeVOSAAPtr GetSAA ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgVeTrajectoryVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TrajectorySystems (
        /*[out,retval]*/ struct IAgVeVOSystemsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVOTrajectoryProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeVOElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovariancePointingContour (
        /*[out,retval]*/ struct IAgVeVOCovariancePointingContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVOTrajectory * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVOTrajectoryDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeVOSAA * * ppVal ) = 0;
};

struct __declspec(uuid("191eabc9-5a4a-43df-8a72-f9b76ec8b423"))
IAgGreatArcVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgVeRouteVOModelPtr Model;
    __declspec(property(get=GetRoute))
    IAgVeVORoutePtr Route;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;

    //
    // Wrapper methods for error-handling
    //

    IAgVeRouteVOModelPtr GetModel ( );
    IAgVeVORoutePtr GetRoute ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgVeRouteVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVeVORoute * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
};

struct __declspec(uuid("41081ca6-e4f4-49eb-a435-0b3311fb6e73"))
IAgGvVO : IAgGreatArcVO
{
    //
    // Property data
    //

    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("0b5ab294-682a-438a-8229-981c8518d5bd"))
IAgGroundVehicle : IAgGreatArcVehicle
{
    //
    // Property data
    //

    __declspec(property(get=GetGraphics))
    IAgGvGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgGvVOPtr VO;
    __declspec(property(get=GetExportTools))
    IAgGvExportToolsPtr ExportTools;

    //
    // Wrapper methods for error-handling
    //

    IAgGvGraphicsPtr GetGraphics ( );
    IAgGvVOPtr GetVO ( );
    IAgGvExportToolsPtr GetExportTools ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgGvGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgGvVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgGvExportTools * * ppRetVal ) = 0;
};

struct __declspec(uuid("68d7e90c-38ca-4367-8fa6-db8318af5717"))
_IAgGvVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgVeRouteVOModelPtr Model;
    __declspec(property(get=GetRoute))
    IAgVeVORoutePtr Route;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgVeRouteVOModelPtr GetModel ( );
    IAgVeVORoutePtr GetRoute ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgVeRouteVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVeVORoute * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("1c64c4b8-1e49-4b85-8d48-7434b4d3678d"))
IAgMsVO : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgVeTrajectoryVOModelPtr Model;
    __declspec(property(get=GetProximity))
    IAgVeVOTrajectoryProximityPtr Proximity;
    __declspec(property(get=GetElevContours))
    IAgVeVOElevContoursPtr ElevContours;
    __declspec(property(get=GetCovariancePointingContour))
    IAgVeVOCovariancePointingContourPtr CovariancePointingContour;
    __declspec(property(get=GetTrajectorySystems))
    IAgVeVOSystemsCollectionPtr TrajectorySystems;
    __declspec(property(get=GetTrajectory))
    IAgVeVOTrajectoryPtr Trajectory;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetDropLines))
    IAgVeVOTrajectoryDropLinesPtr DropLines;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;
    __declspec(property(get=GetSAA))
    IAgVeVOSAAPtr SAA;

    //
    // Wrapper methods for error-handling
    //

    IAgVeTrajectoryVOModelPtr GetModel ( );
    IAgVeVOTrajectoryProximityPtr GetProximity ( );
    IAgVeVOElevContoursPtr GetElevContours ( );
    IAgVeVOCovariancePointingContourPtr GetCovariancePointingContour ( );
    IAgVeVOSystemsCollectionPtr GetTrajectorySystems ( );
    IAgVeVOTrajectoryPtr GetTrajectory ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVeVOTrajectoryDropLinesPtr GetDropLines ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );
    IAgVeVOSAAPtr GetSAA ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgVeTrajectoryVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVOTrajectoryProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeVOElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovariancePointingContour (
        /*[out,retval]*/ struct IAgVeVOCovariancePointingContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TrajectorySystems (
        /*[out,retval]*/ struct IAgVeVOSystemsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVOTrajectory * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVOTrajectoryDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeVOSAA * * ppVal ) = 0;
};

struct __declspec(uuid("ab1497c4-1b6f-4934-bb50-ffb9150af8c2"))
IAgMissile : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTrajectoryType))
    enum AgEVePropagatorType TrajectoryType;
    __declspec(property(get=GetTrajectorySupportedTypes))
    SAFEARRAY * TrajectorySupportedTypes;
    __declspec(property(get=GetTrajectory))
    IAgVePropagatorPtr Trajectory;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetGraphics))
    IAgMsGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgMsVOPtr VO;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetExportTools))
    IAgMsExportToolsPtr ExportTools;
    __declspec(property(get=GetSpaceEnvironment))
    IAgVeSpEnvSpaceEnvironmentPtr SpaceEnvironment;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetTrajectoryType ( );
    HRESULT SetTrajectoryType (
        enum AgEVePropagatorType Propagator );
    VARIANT_BOOL IsTrajectoryTypeSupported (
        enum AgEVePropagatorType Propagator );
    SAFEARRAY * GetTrajectorySupportedTypes ( );
    IAgVePropagatorPtr GetTrajectory ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgMsGraphicsPtr GetGraphics ( );
    IAgMsVOPtr GetVO ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgMsExportToolsPtr GetExportTools ( );
    IAgVeSpEnvSpaceEnvironmentPtr GetSpaceEnvironment ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrajectoryType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrajectoryType (
        /*[in]*/ enum AgEVePropagatorType Propagator ) = 0;
      virtual HRESULT __stdcall raw_IsTrajectoryTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Propagator,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectorySupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgMsGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgMsVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgMsExportTools * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SpaceEnvironment (
        /*[out,retval]*/ struct IAgVeSpEnvSpaceEnvironment * * ppRetVal ) = 0;
};

struct __declspec(uuid("9fb5c04a-b0a0-4028-a372-3bac2a1a98e1"))
_IAgMsVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgVeTrajectoryVOModelPtr Model;
    __declspec(property(get=GetProximity))
    IAgVeVOTrajectoryProximityPtr Proximity;
    __declspec(property(get=GetElevContours))
    IAgVeVOElevContoursPtr ElevContours;
    __declspec(property(get=GetCovariancePointingContour))
    IAgVeVOCovariancePointingContourPtr CovariancePointingContour;
    __declspec(property(get=GetTrajectorySystems))
    IAgVeVOSystemsCollectionPtr TrajectorySystems;
    __declspec(property(get=GetTrajectory))
    IAgVeVOTrajectoryPtr Trajectory;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetDropLines))
    IAgVeVOTrajectoryDropLinesPtr DropLines;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;
    __declspec(property(get=GetSAA))
    IAgVeVOSAAPtr SAA;

    //
    // Wrapper methods for error-handling
    //

    IAgVeTrajectoryVOModelPtr GetModel ( );
    IAgVeVOTrajectoryProximityPtr GetProximity ( );
    IAgVeVOElevContoursPtr GetElevContours ( );
    IAgVeVOCovariancePointingContourPtr GetCovariancePointingContour ( );
    IAgVeVOSystemsCollectionPtr GetTrajectorySystems ( );
    IAgVeVOTrajectoryPtr GetTrajectory ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVeVOTrajectoryDropLinesPtr GetDropLines ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );
    IAgVeVOSAAPtr GetSAA ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgVeTrajectoryVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVOTrajectoryProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeVOElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovariancePointingContour (
        /*[out,retval]*/ struct IAgVeVOCovariancePointingContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TrajectorySystems (
        /*[out,retval]*/ struct IAgVeVOSystemsCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVeVOTrajectory * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVOTrajectoryDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_SAA (
        /*[out,retval]*/ struct IAgVeVOSAA * * ppVal ) = 0;
};

struct __declspec(uuid("da267f2e-b425-4c62-ac0a-223f6d67901f"))
IAgAcVO : IAgGreatArcVO
{
    //
    // Property data
    //

    __declspec(property(get=GetProximity))
    IAgVeVORouteProximityPtr Proximity;
    __declspec(property(get=GetElevContours))
    IAgVeVOElevContoursPtr ElevContours;
    __declspec(property(get=GetCovariancePointingContour))
    IAgVeVOCovariancePointingContourPtr CovariancePointingContour;
    __declspec(property(get=GetDropLines))
    IAgVeVORouteDropLinesPtr DropLines;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVORouteProximityPtr GetProximity ( );
    IAgVeVOElevContoursPtr GetElevContours ( );
    IAgVeVOCovariancePointingContourPtr GetCovariancePointingContour ( );
    IAgVeVORouteDropLinesPtr GetDropLines ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVORouteProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeVOElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovariancePointingContour (
        /*[out,retval]*/ struct IAgVeVOCovariancePointingContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVORouteDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("caaad203-3678-4bac-a299-c295427c9a98"))
IAgAircraft : IAgGreatArcVehicle
{
    //
    // Property data
    //

    __declspec(property(get=GetGraphics))
    IAgAcGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgAcVOPtr VO;
    __declspec(property(get=GetExportTools))
    IAgAcExportToolsPtr ExportTools;

    //
    // Wrapper methods for error-handling
    //

    IAgAcGraphicsPtr GetGraphics ( );
    IAgAcVOPtr GetVO ( );
    IAgAcExportToolsPtr GetExportTools ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgAcGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgAcVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgAcExportTools * * ppRetVal ) = 0;
};

struct __declspec(uuid("6c81d650-dc68-48bc-b956-febc1a54adf3"))
_IAgAcVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgVeRouteVOModelPtr Model;
    __declspec(property(get=GetProximity))
    IAgVeVORouteProximityPtr Proximity;
    __declspec(property(get=GetElevContours))
    IAgVeVOElevContoursPtr ElevContours;
    __declspec(property(get=GetCovariancePointingContour))
    IAgVeVOCovariancePointingContourPtr CovariancePointingContour;
    __declspec(property(get=GetRoute))
    IAgVeVORoutePtr Route;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetDropLines))
    IAgVeVORouteDropLinesPtr DropLines;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgVeRouteVOModelPtr GetModel ( );
    IAgVeVORouteProximityPtr GetProximity ( );
    IAgVeVOElevContoursPtr GetElevContours ( );
    IAgVeVOCovariancePointingContourPtr GetCovariancePointingContour ( );
    IAgVeVORoutePtr GetRoute ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVeVORouteDropLinesPtr GetDropLines ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgVeRouteVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVORouteProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ElevContours (
        /*[out,retval]*/ struct IAgVeVOElevContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CovariancePointingContour (
        /*[out,retval]*/ struct IAgVeVOCovariancePointingContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVeVORoute * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVORouteDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("8cd27399-6fb9-421d-af50-623d726d1bd4"))
IAgShVO : IAgGreatArcVO
{
    //
    // Property data
    //

    __declspec(property(get=GetProximity))
    IAgVeVORouteProximityPtr Proximity;
    __declspec(property(get=GetDropLines))
    IAgVeVORouteDropLinesPtr DropLines;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgVeVORouteProximityPtr GetProximity ( );
    IAgVeVORouteDropLinesPtr GetDropLines ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVORouteProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVORouteDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("a855ba99-3e04-4310-b7a1-4018d407b870"))
IAgShip : IAgGreatArcVehicle
{
    //
    // Property data
    //

    __declspec(property(get=GetGraphics))
    IAgShGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgShVOPtr VO;
    __declspec(property(get=GetExportTools))
    IAgShExportToolsPtr ExportTools;

    //
    // Wrapper methods for error-handling
    //

    IAgShGraphicsPtr GetGraphics ( );
    IAgShVOPtr GetVO ( );
    IAgShExportToolsPtr GetExportTools ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgShGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgShVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgShExportTools * * ppRetVal ) = 0;
};

struct __declspec(uuid("aa7ed31a-a2c0-4b1c-8ddc-124e1c74db9c"))
_IAgShVO : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModel))
    IAgVeRouteVOModelPtr Model;
    __declspec(property(get=GetProximity))
    IAgVeVORouteProximityPtr Proximity;
    __declspec(property(get=GetRoute))
    IAgVeVORoutePtr Route;
    __declspec(property(get=GetOffsets))
    IAgVOOffsetPtr Offsets;
    __declspec(property(get=GetRangeContours))
    IAgVORangeContoursPtr RangeContours;
    __declspec(property(get=GetCovariance))
    IAgVeVOCovariancePtr Covariance;
    __declspec(property(get=GetVector))
    IAgVOVectorPtr Vector;
    __declspec(property(get=GetDataDisplay))
    IAgVODataDisplayCollectionPtr DataDisplay;
    __declspec(property(get=GetModelPointing))
    IAgVOModelPointingPtr ModelPointing;
    __declspec(property(get=GetDropLines))
    IAgVeVORouteDropLinesPtr DropLines;
    __declspec(property(get=GetVaporTrail))
    IAgVOVaporTrailPtr VaporTrail;

    //
    // Wrapper methods for error-handling
    //

    IAgVeRouteVOModelPtr GetModel ( );
    IAgVeVORouteProximityPtr GetProximity ( );
    IAgVeVORoutePtr GetRoute ( );
    IAgVOOffsetPtr GetOffsets ( );
    IAgVORangeContoursPtr GetRangeContours ( );
    IAgVeVOCovariancePtr GetCovariance ( );
    IAgVOVectorPtr GetVector ( );
    IAgVODataDisplayCollectionPtr GetDataDisplay ( );
    IAgVOModelPointingPtr GetModelPointing ( );
    IAgVeVORouteDropLinesPtr GetDropLines ( );
    IAgVOVaporTrailPtr GetVaporTrail ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ struct IAgVeRouteVOModel * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Proximity (
        /*[out,retval]*/ struct IAgVeVORouteProximity * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVeVORoute * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Offsets (
        /*[out,retval]*/ struct IAgVOOffset * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeContours (
        /*[out,retval]*/ struct IAgVORangeContours * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Covariance (
        /*[out,retval]*/ struct IAgVeVOCovariance * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vector (
        /*[out,retval]*/ struct IAgVOVector * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataDisplay (
        /*[out,retval]*/ struct IAgVODataDisplayCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ModelPointing (
        /*[out,retval]*/ struct IAgVOModelPointing * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct IAgVeVORouteDropLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VaporTrail (
        /*[out,retval]*/ struct IAgVOVaporTrail * * ppRetVal ) = 0;
};

struct __declspec(uuid("2a0db561-91da-4139-b881-593be96071ea"))
_IAgCvBoundsCustomBoundary : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRegionFiles))
    IAgCvRegionFilesCollectionPtr RegionFiles;
    __declspec(property(get=GetBoundaryObjects))
    IAgObjectLinkCollectionPtr BoundaryObjects;

    //
    // Wrapper methods for error-handling
    //

    IAgCvRegionFilesCollectionPtr GetRegionFiles ( );
    IAgObjectLinkCollectionPtr GetBoundaryObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RegionFiles (
        /*[out,retval]*/ struct IAgCvRegionFilesCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryObjects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("ca20bcc8-6f5e-436d-96cb-c9193c89c746"))
IAgCvBoundsCustomBoundary : IAgCvBounds
{
    //
    // Property data
    //

    __declspec(property(get=GetRegionFiles))
    IAgCvRegionFilesCollectionPtr RegionFiles;
    __declspec(property(get=GetBoundaryObjects))
    IAgObjectLinkCollectionPtr BoundaryObjects;

    //
    // Wrapper methods for error-handling
    //

    IAgCvRegionFilesCollectionPtr GetRegionFiles ( );
    IAgObjectLinkCollectionPtr GetBoundaryObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RegionFiles (
        /*[out,retval]*/ struct IAgCvRegionFilesCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundaryObjects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppRetVal ) = 0;
};

struct __declspec(uuid("04477568-802e-4ffc-9dd4-1c588f1811ea"))
IAgChain : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetObjects))
    IAgObjectLinkCollectionPtr Objects;
    __declspec(property(get=GetAutoRecompute,put=PutAutoRecompute))
    VARIANT_BOOL AutoRecompute;
    __declspec(property(get=GetTimePeriodType))
    enum AgEChTimePeriodType TimePeriodType;
    __declspec(property(get=GetTimePeriod))
    IAgChTimePeriodBasePtr TimePeriod;
    __declspec(property(get=GetDataSaveMode,put=PutDataSaveMode))
    enum AgEDataSaveMode DataSaveMode;
    __declspec(property(get=GetAccessIntervalsFile))
    _bstr_t AccessIntervalsFile;
    __declspec(property(get=GetEnableLightTimeDelay,put=PutEnableLightTimeDelay))
    VARIANT_BOOL EnableLightTimeDelay;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetTimeConvergence,put=PutTimeConvergence))
    double TimeConvergence;
    __declspec(property(get=GetConstraints))
    IAgChConstraintsPtr Constraints;
    __declspec(property(get=GetGraphics))
    IAgChGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgChVOPtr VO;
    __declspec(property(get=GetEventDetection))
    IAgAccessEventDetectionPtr EventDetection;
    __declspec(property(get=GetSampling))
    IAgAccessSamplingPtr Sampling;
    __declspec(property(get=GetDetectEventsBasedOnSamplesOnly,put=PutDetectEventsBasedOnSamplesOnly))
    VARIANT_BOOL DetectEventsBasedOnSamplesOnly;

    //
    // Wrapper methods for error-handling
    //

    IAgObjectLinkCollectionPtr GetObjects ( );
    VARIANT_BOOL GetAutoRecompute ( );
    void PutAutoRecompute (
        VARIANT_BOOL pVal );
    enum AgEChTimePeriodType GetTimePeriodType ( );
    HRESULT SetTimePeriodType (
        enum AgEChTimePeriodType TimePeriodType );
    IAgChTimePeriodBasePtr GetTimePeriod ( );
    enum AgEDataSaveMode GetDataSaveMode ( );
    void PutDataSaveMode (
        enum AgEDataSaveMode pVal );
    HRESULT SetAccessIntervalsFile (
        _bstr_t Filename );
    HRESULT ResetAccessIntervalsFile ( );
    _bstr_t GetAccessIntervalsFile ( );
    VARIANT_BOOL GetEnableLightTimeDelay ( );
    void PutEnableLightTimeDelay (
        VARIANT_BOOL pVal );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetTimeConvergence ( );
    void PutTimeConvergence (
        double pVal );
    IAgChConstraintsPtr GetConstraints ( );
    IAgChGraphicsPtr GetGraphics ( );
    IAgChVOPtr GetVO ( );
    HRESULT ComputeAccess ( );
    HRESULT ClearAccess ( );
    IAgAccessEventDetectionPtr GetEventDetection ( );
    IAgAccessSamplingPtr GetSampling ( );
    VARIANT_BOOL GetDetectEventsBasedOnSamplesOnly ( );
    void PutDetectEventsBasedOnSamplesOnly (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AutoRecompute (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRecompute (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriodType (
        /*[out,retval]*/ enum AgEChTimePeriodType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTimePeriodType (
        /*[in]*/ enum AgEChTimePeriodType TimePeriodType ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgChTimePeriodBase * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataSaveMode (
        /*[out,retval]*/ enum AgEDataSaveMode * pVal ) = 0;
      virtual HRESULT __stdcall put_DataSaveMode (
        /*[in]*/ enum AgEDataSaveMode pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessIntervalsFile (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_ResetAccessIntervalsFile ( ) = 0;
      virtual HRESULT __stdcall get_AccessIntervalsFile (
        /*[out,retval]*/ BSTR * pFileName ) = 0;
      virtual HRESULT __stdcall get_EnableLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Constraints (
        /*[out,retval]*/ struct IAgChConstraints * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgChGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgChVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAccess ( ) = 0;
      virtual HRESULT __stdcall raw_ClearAccess ( ) = 0;
      virtual HRESULT __stdcall get_EventDetection (
        /*[out,retval]*/ struct IAgAccessEventDetection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgAccessSampling * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DetectEventsBasedOnSamplesOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectEventsBasedOnSamplesOnly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("f3082bec-42a9-44c6-ae6f-842131fb3b80"))
_IAgStkObjectModelContext : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkObjectRootPtr Create ( );
    IAgStkObjectRootPtr CreateRestrictive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRestrictive (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
};

struct __declspec(uuid("8f8583f2-b047-4078-8147-bf86bc457ae3"))
IAgStkObjectModelContext : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IAgStkObjectRootPtr Create ( );
    IAgStkObjectRootPtr CreateRestrictive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Create (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRestrictive (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
};

struct __declspec(uuid("e4e31c27-2a4e-43e7-b545-c49740f5a80b"))
IAgConstellation : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetObjects))
    IAgObjectLinkCollectionPtr Objects;
    __declspec(property(get=GetConstraints))
    IAgCnConstraintsPtr Constraints;
    __declspec(property(get=GetGraphics))
    IAgCnGraphicsPtr Graphics;

    //
    // Wrapper methods for error-handling
    //

    IAgObjectLinkCollectionPtr GetObjects ( );
    IAgCnConstraintsPtr GetConstraints ( );
    IAgCnGraphicsPtr GetGraphics ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Constraints (
        /*[out,retval]*/ struct IAgCnConstraints * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgCnGraphics * * ppRetVal ) = 0;
};

struct __declspec(uuid("8cee8a12-3880-4fc6-a53b-29b647004bb6"))
IAgStkObjectCoverage : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetAssets))
    IAgCvAssetListCollectionPtr Assets;
    __declspec(property(get=GetFOM))
    IAgObjectCoverageFOMPtr FOM;

    //
    // Wrapper methods for error-handling
    //

    IAgDataProviderCollectionPtr GetDataProviders ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pStartTime );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pStopTime );
    IAgCvAssetListCollectionPtr GetAssets ( );
    IAgObjectCoverageFOMPtr GetFOM ( );
    HRESULT Compute ( );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pStartTime ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pStartTime ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pStopTime ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pStopTime ) = 0;
      virtual HRESULT __stdcall get_Assets (
        /*[out,retval]*/ struct IAgCvAssetListCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FOM (
        /*[out,retval]*/ struct IAgObjectCoverageFOM * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Compute ( ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("ea1a32f6-ff8e-4edd-9872-3d6d64c52146"))
_IAgStkObjectRoot : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAvailableFeatures))
    IAgAvailableFeaturesPtr AvailableFeatures;
    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetMode,put=PutMode))
    enum AgEAnimationModes Mode;
    __declspec(property(get=GetCurrentTime,put=PutCurrentTime))
    double CurrentTime;
    __declspec(property(get=GetStep))
    _bstr_t Step;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetAnimationOptions,put=PutAnimationOptions))
    enum AgEAnimationOptions AnimationOptions;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetHighSpeed,put=PutHighSpeed))
    VARIANT_BOOL HighSpeed;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetVgtRoot))
    AgSTKVgtLib::IAgCrdnRootPtr VgtRoot;
    __declspec(property(get=GetCentralBodies))
    IAgStkCentralBodyCollectionPtr CentralBodies;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetUnitPreferences))
    STKUtil::IAgUnitPrefsDimCollectionPtr UnitPreferences;
    __declspec(property(get=GetCurrentScenario))
    IAgStkObjectPtr CurrentScenario;
    __declspec(property(get=GetIsolated))
    VARIANT_BOOL Isolated;
    __declspec(property(get=GetConversionUtility))
    STKUtil::IAgConversionUtilityPtr ConversionUtility;
    __declspec(property(get=GetStdMil2525bSymbols))
    IAgStdMil2525bSymbolsPtr StdMil2525bSymbols;

    //
    // Wrapper methods for error-handling
    //

    STKUtil::IAgExecCmdResultPtr ExecuteCommand (
        _bstr_t ConnectCommand );
    HRESULT LoadScenario (
        _bstr_t Path );
    HRESULT CloseScenario ( );
    HRESULT NewScenario (
        _bstr_t ScenarioName );
    HRESULT SaveScenario ( );
    HRESULT SaveScenarioAs (
        _bstr_t ScFileName );
    STKUtil::IAgUnitPrefsDimCollectionPtr GetUnitPreferences ( );
    IAgStkObjectPtr GetCurrentScenario ( );
    HRESULT LoadCustomMarker (
        _bstr_t Filename );
    SAFEARRAY * AvailableMarkerTypes ( );
    IAgStkObjectPtr GetObjectFromPath (
        _bstr_t ObjectPath );
    _bstr_t AllInstanceNamesToXML ( );
    HRESULT BeginUpdate ( );
    HRESULT EndUpdate ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    HRESULT PlayForward ( );
    HRESULT PlayBackward ( );
    HRESULT Pause ( );
    HRESULT Rewind ( );
    HRESULT StepForward ( );
    HRESULT StepBackward ( );
    HRESULT Faster ( );
    HRESULT Slower ( );
    enum AgEAnimationModes GetMode ( );
    void PutMode (
        enum AgEAnimationModes pRetVal );
    double GetCurrentTime ( );
    void PutCurrentTime (
        double pVal );
    _bstr_t GetStep ( );
    STKUtil::IAgExecMultiCmdResultPtr ExecuteMultipleCommands (
        SAFEARRAY * * ConnectCommands,
        enum STKUtil::AgEExecMultiCmdResultAction Action );
    HRESULT Isolate ( );
    VARIANT_BOOL GetIsolated ( );
    STKUtil::IAgConversionUtilityPtr GetConversionUtility ( );
    IAgStdMil2525bSymbolsPtr GetStdMil2525bSymbols ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    enum AgEAnimationOptions GetAnimationOptions ( );
    void PutAnimationOptions (
        enum AgEAnimationOptions pRetVal );
    VARIANT_BOOL GetHighSpeed ( );
    void PutHighSpeed (
        VARIANT_BOOL pRetVal );
    HRESULT LoadVDF (
        _bstr_t Path,
        _bstr_t Password );
    IAgAvailableFeaturesPtr GetAvailableFeatures ( );
    VARIANT_BOOL ObjectExists (
        _bstr_t ObjectPath );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    AgSTKVgtLib::IAgCrdnRootPtr GetVgtRoot ( );
    IAgStkCentralBodyCollectionPtr GetCentralBodies ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ExecuteCommand (
        /*[in]*/ BSTR ConnectCommand,
        /*[out,retval]*/ struct STKUtil::IAgExecCmdResult * * ppResult ) = 0;
      virtual HRESULT __stdcall raw_LoadScenario (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_CloseScenario ( ) = 0;
      virtual HRESULT __stdcall raw_NewScenario (
        /*[in]*/ BSTR ScenarioName ) = 0;
      virtual HRESULT __stdcall raw_SaveScenario ( ) = 0;
      virtual HRESULT __stdcall raw_SaveScenarioAs (
        /*[in]*/ BSTR ScFileName ) = 0;
      virtual HRESULT __stdcall get_UnitPreferences (
        /*[out,retval]*/ struct STKUtil::IAgUnitPrefsDimCollection * * ppVarResult ) = 0;
      virtual HRESULT __stdcall get_CurrentScenario (
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadCustomMarker (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_AvailableMarkerTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetObjectFromPath (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkObject * * ppObject ) = 0;
      virtual HRESULT __stdcall raw_AllInstanceNamesToXML (
        /*[out,retval]*/ BSTR * pXML ) = 0;
      virtual HRESULT __stdcall raw_BeginUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_EndUpdate ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PlayForward ( ) = 0;
      virtual HRESULT __stdcall raw_PlayBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Pause ( ) = 0;
      virtual HRESULT __stdcall raw_Rewind ( ) = 0;
      virtual HRESULT __stdcall raw_StepForward ( ) = 0;
      virtual HRESULT __stdcall raw_StepBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Faster ( ) = 0;
      virtual HRESULT __stdcall raw_Slower ( ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum AgEAnimationModes * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum AgEAnimationModes pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentTime (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CurrentTime (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExecuteMultipleCommands (
        /*[in]*/ SAFEARRAY * * ConnectCommands,
        /*[in]*/ enum STKUtil::AgEExecMultiCmdResultAction Action,
        /*[out,retval]*/ struct STKUtil::IAgExecMultiCmdResult * * ppIAgExecMultiCmdResult ) = 0;
      virtual HRESULT __stdcall raw_Isolate ( ) = 0;
      virtual HRESULT __stdcall get_Isolated (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConversionUtility (
        /*[out,retval]*/ struct STKUtil::IAgConversionUtility * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StdMil2525bSymbols (
        /*[out,retval]*/ struct IAgStdMil2525bSymbols * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AnimationOptions (
        /*[out,retval]*/ enum AgEAnimationOptions * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AnimationOptions (
        /*[in]*/ enum AgEAnimationOptions pRetVal ) = 0;
      virtual HRESULT __stdcall get_HighSpeed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HighSpeed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_LoadVDF (
        /*[in]*/ BSTR Path,
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall get_AvailableFeatures (
        /*[out,retval]*/ struct IAgAvailableFeatures * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ObjectExists (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall get_VgtRoot (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CentralBodies (
        /*[out,retval]*/ struct IAgStkCentralBodyCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("3caf34e8-6d57-47c7-8180-72f387364116"))
_IAgScenario : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _variant_t Epoch;
    __declspec(property(get=GetAnimation))
    IAgScAnimationPtr Animation;
    __declspec(property(get=GetEarthData))
    IAgScEarthDataPtr EarthData;
    __declspec(property(get=GetGraphics))
    IAgScGraphicsPtr Graphics;
    __declspec(property(get=GetTerrainCollection))
    IAgTerrainCollectionPtr TerrainCollection;
    __declspec(property(get=GetGenDbs))
    IAgScGenDbCollectionPtr GenDbs;
    __declspec(property(get=GetSatNoOrbitWarning,put=PutSatNoOrbitWarning))
    VARIANT_BOOL SatNoOrbitWarning;
    __declspec(property(get=GetMslNoOrbitWarning,put=PutMslNoOrbitWarning))
    VARIANT_BOOL MslNoOrbitWarning;
    __declspec(property(get=GetVO))
    IAgScVOPtr VO;
    __declspec(property(get=GetAcWGS84Warning,put=PutAcWGS84Warning))
    enum AgEAcWGS84WarningType AcWGS84Warning;
    __declspec(property(get=GetMslStopTimeWarning,put=PutMslStopTimeWarning))
    VARIANT_BOOL MslStopTimeWarning;
    __declspec(property(get=GetTerrain))
    IAgCentralBodyTerrainCollectionPtr Terrain;
    __declspec(property(get=GetComponentDirectory))
    STKUtil::IAgComponentDirectoryPtr ComponentDirectory;
    __declspec(property(get=GetScenarioFiles))
    SAFEARRAY * ScenarioFiles;
    __declspec(property(get=GetIsDirty))
    VARIANT_BOOL IsDirty;
    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetTimePeriod))
    IAgTimePeriodPtr TimePeriod;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetUseAnalysisStartTimeForEpoch,put=PutUseAnalysisStartTimeForEpoch))
    VARIANT_BOOL UseAnalysisStartTimeForEpoch;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetSpaceEnvironment))
    IAgSpEnvScenSpaceEnvironmentPtr SpaceEnvironment;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pVal );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pVal );
    _variant_t GetEpoch ( );
    void PutEpoch (
        const _variant_t & pVal );
    IAgScAnimationPtr GetAnimation ( );
    IAgScEarthDataPtr GetEarthData ( );
    IAgScGraphicsPtr GetGraphics ( );
    IAgTerrainCollectionPtr GetTerrainCollection ( );
    IAgScGenDbCollectionPtr GetGenDbs ( );
    VARIANT_BOOL GetSatNoOrbitWarning ( );
    void PutSatNoOrbitWarning (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMslNoOrbitWarning ( );
    void PutMslNoOrbitWarning (
        VARIANT_BOOL pVal );
    IAgScVOPtr GetVO ( );
    HRESULT SetTimePeriod (
        const _variant_t & StartTime,
        const _variant_t & StopTime );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    enum AgEAcWGS84WarningType GetAcWGS84Warning ( );
    void PutAcWGS84Warning (
        enum AgEAcWGS84WarningType pVal );
    VARIANT_BOOL GetMslStopTimeWarning ( );
    void PutMslStopTimeWarning (
        VARIANT_BOOL pVal );
    IAgCentralBodyTerrainCollectionPtr GetTerrain ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    STKUtil::IAgComponentDirectoryPtr GetComponentDirectory ( );
    SAFEARRAY * GetScenarioFiles ( );
    VARIANT_BOOL GetIsDirty ( );
    IAgTimePeriodPtr GetTimePeriod ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    VARIANT_BOOL GetUseAnalysisStartTimeForEpoch ( );
    void PutUseAnalysisStartTimeForEpoch (
        VARIANT_BOOL pRetVal );
    HRESULT SetDirty ( );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    IAgSpEnvScenSpaceEnvironmentPtr GetSpaceEnvironment ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ struct IAgScAnimation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EarthData (
        /*[out,retval]*/ struct IAgScEarthData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgScGraphics * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TerrainCollection (
        /*[out,retval]*/ struct IAgTerrainCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GenDbs (
        /*[out,retval]*/ struct IAgScGenDbCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SatNoOrbitWarning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SatNoOrbitWarning (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MslNoOrbitWarning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MslNoOrbitWarning (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgScVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetTimePeriod (
        /*[in]*/ VARIANT StartTime,
        /*[in]*/ VARIANT StopTime ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AcWGS84Warning (
        /*[out,retval]*/ enum AgEAcWGS84WarningType * pVal ) = 0;
      virtual HRESULT __stdcall put_AcWGS84Warning (
        /*[in]*/ enum AgEAcWGS84WarningType pVal ) = 0;
      virtual HRESULT __stdcall get_MslStopTimeWarning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MslStopTimeWarning (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Terrain (
        /*[out,retval]*/ struct IAgCentralBodyTerrainCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ComponentDirectory (
        /*[out,retval]*/ struct STKUtil::IAgComponentDirectory * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ScenarioFiles (
        /*[out,retval]*/ SAFEARRAY * * ppScenarioFiles ) = 0;
      virtual HRESULT __stdcall get_IsDirty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgTimePeriod * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseAnalysisStartTimeForEpoch (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UseAnalysisStartTimeForEpoch (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetDirty ( ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall get_SpaceEnvironment (
        /*[out,retval]*/ struct IAgSpEnvScenSpaceEnvironment * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("a8c96ccf-afe9-4491-b72c-f619d842fab3"))
_IAgAreaTarget : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetUseLocalTimeOffset,put=PutUseLocalTimeOffset))
    VARIANT_BOOL UseLocalTimeOffset;
    __declspec(property(get=GetLocalTimeOffset,put=PutLocalTimeOffset))
    double LocalTimeOffset;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;
    __declspec(property(get=GetAutoCentroid,put=PutAutoCentroid))
    VARIANT_BOOL AutoCentroid;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetGraphics))
    IAgATGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgATVOPtr VO;
    __declspec(property(get=GetAreaType,put=PutAreaType))
    enum AgEAreaType AreaType;
    __declspec(property(get=GetAreaTypeData))
    IAgAreaTypeDataPtr AreaTypeData;
    __declspec(property(get=GetUseTerrainData,put=PutUseTerrainData))
    VARIANT_BOOL UseTerrainData;
    __declspec(property(get=GetAllowObjectAccess,put=PutAllowObjectAccess))
    VARIANT_BOOL AllowObjectAccess;
    __declspec(property(get=GetCommonTasks))
    IAgATCommonTasksPtr CommonTasks;
    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLocalTimeOffset ( );
    void PutUseLocalTimeOffset (
        VARIANT_BOOL pUseLocalTimeOffset );
    double GetLocalTimeOffset ( );
    void PutLocalTimeOffset (
        double pLocalTimeOffset );
    VARIANT_BOOL GetAutoCentroid ( );
    void PutAutoCentroid (
        VARIANT_BOOL pAutoCentroid );
    STKUtil::IAgPositionPtr GetPosition ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgATGraphicsPtr GetGraphics ( );
    IAgATVOPtr GetVO ( );
    enum AgEAreaType GetAreaType ( );
    void PutAreaType (
        enum AgEAreaType pType );
    IAgAreaTypeDataPtr GetAreaTypeData ( );
    VARIANT_BOOL GetUseTerrainData ( );
    void PutUseTerrainData (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllowObjectAccess ( );
    void PutAllowObjectAccess (
        VARIANT_BOOL pVal );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    IAgATCommonTasksPtr GetCommonTasks ( );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLocalTimeOffset (
        /*[out,retval]*/ VARIANT_BOOL * pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_UseLocalTimeOffset (
        /*[in]*/ VARIANT_BOOL pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_LocalTimeOffset (
        /*[out,retval]*/ double * pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_LocalTimeOffset (
        /*[in]*/ double pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_AutoCentroid (
        /*[out,retval]*/ VARIANT_BOOL * pAutoCentroid ) = 0;
      virtual HRESULT __stdcall put_AutoCentroid (
        /*[in]*/ VARIANT_BOOL pAutoCentroid ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppPosition ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAccessConstraints ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgATGraphics * * ppGraphics ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgATVO * * ppATVO ) = 0;
      virtual HRESULT __stdcall get_AreaType (
        /*[out,retval]*/ enum AgEAreaType * pType ) = 0;
      virtual HRESULT __stdcall put_AreaType (
        /*[in]*/ enum AgEAreaType pType ) = 0;
      virtual HRESULT __stdcall get_AreaTypeData (
        /*[out,retval]*/ struct IAgAreaTypeData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseTerrainData (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTerrainData (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllowObjectAccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowObjectAccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgATCommonTasks * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("a810704c-b46f-4214-997b-b9eeba0a2ba9"))
_IAgFacility : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetUseLocalTimeOffset,put=PutUseLocalTimeOffset))
    VARIANT_BOOL UseLocalTimeOffset;
    __declspec(property(get=GetLocalTimeOffset,put=PutLocalTimeOffset))
    double LocalTimeOffset;
    __declspec(property(get=GetUseTerrain,put=PutUseTerrain))
    VARIANT_BOOL UseTerrain;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetGraphics))
    IAgFaGraphicsPtr Graphics;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetTerrainNorm,put=PutTerrainNorm))
    enum AgETerrainNormType TerrainNorm;
    __declspec(property(get=GetTerrainNormData))
    IAgTerrainNormDataPtr TerrainNormData;
    __declspec(property(get=GetVO))
    IAgFaVOPtr VO;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetHeightAboveGround,put=PutHeightAboveGround))
    double HeightAboveGround;
    __declspec(property(get=GetAltRef,put=PutAltRef))
    enum AgEAltRefType AltRef;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLocalTimeOffset ( );
    void PutUseLocalTimeOffset (
        VARIANT_BOOL pUseLocalTimeOffset );
    double GetLocalTimeOffset ( );
    void PutLocalTimeOffset (
        double pLocalTimeOffset );
    VARIANT_BOOL GetUseTerrain ( );
    void PutUseTerrain (
        VARIANT_BOOL pEnableTerrain );
    HRESULT SetAzElMask (
        enum AgEAzElMaskType Type,
        const _variant_t & Data );
    IAgFaGraphicsPtr GetGraphics ( );
    STKUtil::IAgPositionPtr GetPosition ( );
    void PutTerrainNorm (
        enum AgETerrainNormType pType );
    IAgTerrainNormDataPtr GetTerrainNormData ( );
    IAgFaVOPtr GetVO ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    HRESULT ResetAzElMask ( );
    enum AgEAzElMaskType GetAzElMask ( );
    _variant_t GetAzElMaskData ( );
    enum AgETerrainNormType GetTerrainNorm ( );
    double GetHeightAboveGround ( );
    void PutHeightAboveGround (
        double pVal );
    enum AgEAltRefType GetAltRef ( );
    void PutAltRef (
        enum AgEAltRefType pVal );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLocalTimeOffset (
        /*[out,retval]*/ VARIANT_BOOL * pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_UseLocalTimeOffset (
        /*[in]*/ VARIANT_BOOL pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_LocalTimeOffset (
        /*[out,retval]*/ double * pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_LocalTimeOffset (
        /*[in]*/ double pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_UseTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pEnableTerrain ) = 0;
      virtual HRESULT __stdcall put_UseTerrain (
        /*[in]*/ VARIANT_BOOL pEnableTerrain ) = 0;
      virtual HRESULT __stdcall raw_SetAzElMask (
        /*[in]*/ enum AgEAzElMaskType Type,
        /*[in]*/ VARIANT Data ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgFaGraphics * * ppAgGraphics ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppPosition ) = 0;
      virtual HRESULT __stdcall put_TerrainNorm (
        /*[in]*/ enum AgETerrainNormType pType ) = 0;
      virtual HRESULT __stdcall get_TerrainNormData (
        /*[out,retval]*/ struct IAgTerrainNormData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgFaVO * * ppAgVO ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAgAccessConstraints ) = 0;
      virtual HRESULT __stdcall raw_ResetAzElMask ( ) = 0;
      virtual HRESULT __stdcall raw_GetAzElMask (
        /*[out,retval]*/ enum AgEAzElMaskType * pType ) = 0;
      virtual HRESULT __stdcall raw_GetAzElMaskData (
        /*[out,retval]*/ VARIANT * pData ) = 0;
      virtual HRESULT __stdcall get_TerrainNorm (
        /*[out,retval]*/ enum AgETerrainNormType * pType ) = 0;
      virtual HRESULT __stdcall get_HeightAboveGround (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightAboveGround (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AltRef (
        /*[out,retval]*/ enum AgEAltRefType * pVal ) = 0;
      virtual HRESULT __stdcall put_AltRef (
        /*[in]*/ enum AgEAltRefType pVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("0e3b3b8f-77dd-4373-8d63-94a606298a11"))
_IAgTarget : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetUseLocalTimeOffset,put=PutUseLocalTimeOffset))
    VARIANT_BOOL UseLocalTimeOffset;
    __declspec(property(get=GetLocalTimeOffset,put=PutLocalTimeOffset))
    double LocalTimeOffset;
    __declspec(property(get=GetUseTerrain,put=PutUseTerrain))
    VARIANT_BOOL UseTerrain;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetGraphics))
    IAgTargetGraphicsPtr Graphics;
    __declspec(property(get=GetPosition))
    STKUtil::IAgPositionPtr Position;
    __declspec(property(get=GetTerrainNorm,put=PutTerrainNorm))
    enum AgETerrainNormType TerrainNorm;
    __declspec(property(get=GetTerrainNormData))
    IAgTerrainNormDataPtr TerrainNormData;
    __declspec(property(get=GetVO))
    IAgTargetVOPtr VO;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetHeightAboveGround,put=PutHeightAboveGround))
    double HeightAboveGround;
    __declspec(property(get=GetAltRef,put=PutAltRef))
    enum AgEAltRefType AltRef;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseLocalTimeOffset ( );
    void PutUseLocalTimeOffset (
        VARIANT_BOOL pUseLocalTimeOffset );
    double GetLocalTimeOffset ( );
    void PutLocalTimeOffset (
        double pLocalTimeOffset );
    VARIANT_BOOL GetUseTerrain ( );
    void PutUseTerrain (
        VARIANT_BOOL pEnableTerrain );
    HRESULT SetAzElMask (
        enum AgEAzElMaskType Type,
        const _variant_t & Data );
    IAgTargetGraphicsPtr GetGraphics ( );
    STKUtil::IAgPositionPtr GetPosition ( );
    void PutTerrainNorm (
        enum AgETerrainNormType pType );
    IAgTerrainNormDataPtr GetTerrainNormData ( );
    IAgTargetVOPtr GetVO ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    HRESULT ResetAzElMask ( );
    enum AgEAzElMaskType GetAzElMask ( );
    _variant_t GetAzElMaskData ( );
    enum AgETerrainNormType GetTerrainNorm ( );
    double GetHeightAboveGround ( );
    void PutHeightAboveGround (
        double pVal );
    enum AgEAltRefType GetAltRef ( );
    void PutAltRef (
        enum AgEAltRefType pVal );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseLocalTimeOffset (
        /*[out,retval]*/ VARIANT_BOOL * pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_UseLocalTimeOffset (
        /*[in]*/ VARIANT_BOOL pUseLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_LocalTimeOffset (
        /*[out,retval]*/ double * pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall put_LocalTimeOffset (
        /*[in]*/ double pLocalTimeOffset ) = 0;
      virtual HRESULT __stdcall get_UseTerrain (
        /*[out,retval]*/ VARIANT_BOOL * pEnableTerrain ) = 0;
      virtual HRESULT __stdcall put_UseTerrain (
        /*[in]*/ VARIANT_BOOL pEnableTerrain ) = 0;
      virtual HRESULT __stdcall raw_SetAzElMask (
        /*[in]*/ enum AgEAzElMaskType Type,
        /*[in]*/ VARIANT Data ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgTargetGraphics * * ppAgGraphics ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct STKUtil::IAgPosition * * ppPosition ) = 0;
      virtual HRESULT __stdcall put_TerrainNorm (
        /*[in]*/ enum AgETerrainNormType pType ) = 0;
      virtual HRESULT __stdcall get_TerrainNormData (
        /*[out,retval]*/ struct IAgTerrainNormData * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgTargetVO * * ppAgVO ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAgAccessConstraints ) = 0;
      virtual HRESULT __stdcall raw_ResetAzElMask ( ) = 0;
      virtual HRESULT __stdcall raw_GetAzElMask (
        /*[out,retval]*/ enum AgEAzElMaskType * Type ) = 0;
      virtual HRESULT __stdcall raw_GetAzElMaskData (
        /*[out,retval]*/ VARIANT * Data ) = 0;
      virtual HRESULT __stdcall get_TerrainNorm (
        /*[out,retval]*/ enum AgETerrainNormType * pType ) = 0;
      virtual HRESULT __stdcall get_HeightAboveGround (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HeightAboveGround (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AltRef (
        /*[out,retval]*/ enum AgEAltRefType * pVal ) = 0;
      virtual HRESULT __stdcall put_AltRef (
        /*[in]*/ enum AgEAltRefType pVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("50152239-d8a7-4f68-b8cc-f41d6439d351"))
_IAgPlanet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetGraphics))
    IAgPlGraphicsPtr Graphics;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetVO))
    IAgPlVOPtr VO;
    __declspec(property(get=GetPositionSource,put=PutPositionSource))
    enum AgEPlPositionSourceType PositionSource;
    __declspec(property(get=GetPositionSourceData))
    IAgPositionSourceDataPtr PositionSourceData;
    __declspec(property(get=GetCommonTasks))
    IAgPlCommonTasksPtr CommonTasks;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;

    //
    // Wrapper methods for error-handling
    //

    IAgPlGraphicsPtr GetGraphics ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgPlVOPtr GetVO ( );
    enum AgEPlPositionSourceType GetPositionSource ( );
    void PutPositionSource (
        enum AgEPlPositionSourceType pVal );
    IAgPositionSourceDataPtr GetPositionSourceData ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    IAgPlCommonTasksPtr GetCommonTasks ( );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgPlGraphics * * ppPlGraphics ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAccessConstraints ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgPlVO * * ppVO ) = 0;
      virtual HRESULT __stdcall get_PositionSource (
        /*[out,retval]*/ enum AgEPlPositionSourceType * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionSource (
        /*[in]*/ enum AgEPlPositionSourceType pVal ) = 0;
      virtual HRESULT __stdcall get_PositionSourceData (
        /*[out,retval]*/ struct IAgPositionSourceData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgPlCommonTasks * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("9074fe9c-cbff-478a-a589-dbc74a02be30"))
_IAgSensor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetPatternType))
    enum AgESnPattern PatternType;
    __declspec(property(get=GetPattern))
    IAgSnPatternPtr Pattern;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetPointingType))
    enum AgESnPointing PointingType;
    __declspec(property(get=GetPointing))
    IAgSnPointingPtr Pointing;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;
    __declspec(property(get=GetAzElMask))
    enum AgEAzElMaskType AzElMask;
    __declspec(property(get=GetAzElMaskData))
    IAgAzElMaskDataPtr AzElMaskData;
    __declspec(property(get=GetFocalLength,put=PutFocalLength))
    double FocalLength;
    __declspec(property(get=GetDetectorPitch,put=PutDetectorPitch))
    double DetectorPitch;
    __declspec(property(get=GetRefraction,put=PutRefraction))
    enum AgESnRefractionType Refraction;
    __declspec(property(get=GetGraphics))
    IAgSnGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgSnVOPtr VO;
    __declspec(property(get=GetLocationType))
    enum AgESnLocation LocationType;
    __declspec(property(get=GetLocationData))
    STKUtil::IAgLocationDataPtr LocationData;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetSwath))
    IAgSwathPtr Swath;
    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRefractionSupportedTypes))
    SAFEARRAY * RefractionSupportedTypes;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetRefractionModel))
    IAgRfModelBasePtr RefractionModel;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetUseRefractionInAccess,put=PutUseRefractionInAccess))
    VARIANT_BOOL UseRefractionInAccess;
    __declspec(property(get=GetCommonTasks))
    IAgSnCommonTasksPtr CommonTasks;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;

    //
    // Wrapper methods for error-handling
    //

    enum AgESnPattern GetPatternType ( );
    HRESULT SetPatternType (
        enum AgESnPattern PatternType );
    IAgSnPatternPtr GetPattern ( );
    enum AgESnPointing GetPointingType ( );
    HRESULT SetPointingType (
        enum AgESnPointing PointingType );
    HRESULT SetPointingExternalFile (
        _bstr_t MaskFile );
    IAgSnPointingPtr GetPointing ( );
    HRESULT ResetAzElMask ( );
    enum AgEAzElMaskType GetAzElMask ( );
    HRESULT SetAzElMask (
        enum AgEAzElMaskType AzElMaskType );
    HRESULT SetAzElMaskFile (
        _bstr_t Filename );
    IAgAzElMaskDataPtr GetAzElMaskData ( );
    double GetFocalLength ( );
    void PutFocalLength (
        double pVal );
    double GetDetectorPitch ( );
    void PutDetectorPitch (
        double pVal );
    enum AgESnRefractionType GetRefraction ( );
    void PutRefraction (
        enum AgESnRefractionType pVal );
    IAgSnGraphicsPtr GetGraphics ( );
    IAgSnVOPtr GetVO ( );
    enum AgESnLocation GetLocationType ( );
    HRESULT SetLocationType (
        enum AgESnLocation LocationType );
    STKUtil::IAgLocationDataPtr GetLocationData ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgSwathPtr GetSwath ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );
    VARIANT_BOOL IsRefractionTypeSupported (
        enum AgESnRefractionType Model );
    SAFEARRAY * GetRefractionSupportedTypes ( );
    IAgRfModelBasePtr GetRefractionModel ( );
    VARIANT_BOOL GetUseRefractionInAccess ( );
    void PutUseRefractionInAccess (
        VARIANT_BOOL pVal );
    IAgSnCommonTasksPtr GetCommonTasks ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    IAgCelestialBodyCollectionPtr GetStarsInFOV (
        const _variant_t & Epoch );
    IAgVeSpatialInfoPtr GetSpatialInfo (
        VARIANT_BOOL Recycle );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PatternType (
        /*[out,retval]*/ enum AgESnPattern * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPatternType (
        /*[in]*/ enum AgESnPattern PatternType ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ struct IAgSnPattern * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PointingType (
        /*[out,retval]*/ enum AgESnPointing * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPointingType (
        /*[in]*/ enum AgESnPointing PointingType ) = 0;
      virtual HRESULT __stdcall raw_SetPointingExternalFile (
        /*[in]*/ BSTR MaskFile ) = 0;
      virtual HRESULT __stdcall get_Pointing (
        /*[out,retval]*/ struct IAgSnPointing * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ResetAzElMask ( ) = 0;
      virtual HRESULT __stdcall get_AzElMask (
        /*[out,retval]*/ enum AgEAzElMaskType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAzElMask (
        /*[in]*/ enum AgEAzElMaskType AzElMaskType ) = 0;
      virtual HRESULT __stdcall raw_SetAzElMaskFile (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_AzElMaskData (
        /*[out,retval]*/ struct IAgAzElMaskData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FocalLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FocalLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DetectorPitch (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectorPitch (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Refraction (
        /*[out,retval]*/ enum AgESnRefractionType * pVal ) = 0;
      virtual HRESULT __stdcall put_Refraction (
        /*[in]*/ enum AgESnRefractionType pVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgSnGraphics * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgSnVO * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LocationType (
        /*[out,retval]*/ enum AgESnLocation * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLocationType (
        /*[in]*/ enum AgESnLocation LocationType ) = 0;
      virtual HRESULT __stdcall get_LocationData (
        /*[out,retval]*/ struct STKUtil::IAgLocationData * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAccessConstraints ) = 0;
      virtual HRESULT __stdcall get_Swath (
        /*[out,retval]*/ struct IAgSwath * * ppSwath ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IsRefractionTypeSupported (
        /*[in]*/ enum AgESnRefractionType Model,
        /*[out,retval]*/ VARIANT_BOOL * pSupported ) = 0;
      virtual HRESULT __stdcall get_RefractionSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_RefractionModel (
        /*[out,retval]*/ struct IAgRfModelBase * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_UseRefractionInAccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseRefractionInAccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CommonTasks (
        /*[out,retval]*/ struct IAgSnCommonTasks * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_GetStarsInFOV (
        /*[in]*/ VARIANT Epoch,
        /*[out,retval]*/ struct IAgCelestialBodyCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpatialInfo (
        /*[in]*/ VARIANT_BOOL Recycle,
        /*[out,retval]*/ struct IAgVeSpatialInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("772c0c26-fd37-4abb-a43f-f1c1ec4a644e"))
_IAgStar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetLocationRightAscension,put=PutLocationRightAscension))
    _variant_t LocationRightAscension;
    __declspec(property(get=GetLocationDeclination,put=PutLocationDeclination))
    _variant_t LocationDeclination;
    __declspec(property(get=GetProperMotionRightAscension,put=PutProperMotionRightAscension))
    double ProperMotionRightAscension;
    __declspec(property(get=GetProperMotionDeclination,put=PutProperMotionDeclination))
    double ProperMotionDeclination;
    __declspec(property(get=GetParallax,put=PutParallax))
    _variant_t Parallax;
    __declspec(property(get=GetEpoch,put=PutEpoch))
    _bstr_t Epoch;
    __declspec(property(get=GetMagnitude,put=PutMagnitude))
    double Magnitude;
    __declspec(property(get=GetGraphics))
    IAgStGraphicsPtr Graphics;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetVO))
    IAgStVOPtr VO;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetReferenceFrame))
    enum AgEStarReferenceFrame ReferenceFrame;
    __declspec(property(get=GetProperMotionRadialVelocity,put=PutProperMotionRadialVelocity))
    double ProperMotionRadialVelocity;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetLocationRightAscension ( );
    void PutLocationRightAscension (
        const _variant_t & pRightAscension );
    _variant_t GetLocationDeclination ( );
    void PutLocationDeclination (
        const _variant_t & pDeclination );
    double GetProperMotionRightAscension ( );
    void PutProperMotionRightAscension (
        double pProperMotionRightAscension );
    double GetProperMotionDeclination ( );
    void PutProperMotionDeclination (
        double pProperMotionDeclination );
    _variant_t GetParallax ( );
    void PutParallax (
        const _variant_t & pProperMotionParallax );
    _bstr_t GetEpoch ( );
    void PutEpoch (
        _bstr_t pEpoch );
    double GetMagnitude ( );
    void PutMagnitude (
        double pMagnitude );
    IAgStGraphicsPtr GetGraphics ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgStVOPtr GetVO ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    enum AgEStarReferenceFrame GetReferenceFrame ( );
    double GetProperMotionRadialVelocity ( );
    void PutProperMotionRadialVelocity (
        double pVal );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocationRightAscension (
        /*[out,retval]*/ VARIANT * pRightAscension ) = 0;
      virtual HRESULT __stdcall put_LocationRightAscension (
        /*[in]*/ VARIANT pRightAscension ) = 0;
      virtual HRESULT __stdcall get_LocationDeclination (
        /*[out,retval]*/ VARIANT * pDeclination ) = 0;
      virtual HRESULT __stdcall put_LocationDeclination (
        /*[in]*/ VARIANT pDeclination ) = 0;
      virtual HRESULT __stdcall get_ProperMotionRightAscension (
        /*[out,retval]*/ double * pProperMotionRightAscension ) = 0;
      virtual HRESULT __stdcall put_ProperMotionRightAscension (
        /*[in]*/ double pProperMotionRightAscension ) = 0;
      virtual HRESULT __stdcall get_ProperMotionDeclination (
        /*[out,retval]*/ double * pProperMotionDeclination ) = 0;
      virtual HRESULT __stdcall put_ProperMotionDeclination (
        /*[in]*/ double pProperMotionDeclination ) = 0;
      virtual HRESULT __stdcall get_Parallax (
        /*[out,retval]*/ VARIANT * pProperMotionParallax ) = 0;
      virtual HRESULT __stdcall put_Parallax (
        /*[in]*/ VARIANT pProperMotionParallax ) = 0;
      virtual HRESULT __stdcall get_Epoch (
        /*[out,retval]*/ BSTR * pEpoch ) = 0;
      virtual HRESULT __stdcall put_Epoch (
        /*[in]*/ BSTR pEpoch ) = 0;
      virtual HRESULT __stdcall get_Magnitude (
        /*[out,retval]*/ double * pMagnitude ) = 0;
      virtual HRESULT __stdcall put_Magnitude (
        /*[in]*/ double pMagnitude ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgStGraphics * * ppGraphics ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppAccessConstraints ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgStVO * * ppVO ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceFrame (
        /*[out,retval]*/ enum AgEStarReferenceFrame * pVal ) = 0;
      virtual HRESULT __stdcall get_ProperMotionRadialVelocity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ProperMotionRadialVelocity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("419bfd84-2c2b-47e7-b74c-f9dcb7430299"))
_IAgSatellite : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetPropagatorType))
    enum AgEVePropagatorType PropagatorType;
    __declspec(property(get=GetPropagator))
    IAgVePropagatorPtr Propagator;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetMassProperties))
    IAgVeMassPropertiesPtr MassProperties;
    __declspec(property(get=GetPassBreak))
    IAgVePassBreakPtr PassBreak;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetGraphics))
    IAgSaGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgSaVOPtr VO;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetEclipseBodies))
    IAgVeEclipseBodiesPtr EclipseBodies;
    __declspec(property(get=GetPropagatorSupportedTypes))
    SAFEARRAY * PropagatorSupportedTypes;
    __declspec(property(get=GetExportTools))
    IAgSaExportToolsPtr ExportTools;
    __declspec(property(get=GetSpaceEnvironment))
    IAgVeSpEnvSpaceEnvironmentPtr SpaceEnvironment;
    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetPropagatorType ( );
    HRESULT SetPropagatorType (
        enum AgEVePropagatorType EPropagator );
    IAgVePropagatorPtr GetPropagator ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgVeMassPropertiesPtr GetMassProperties ( );
    IAgVePassBreakPtr GetPassBreak ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgSaGraphicsPtr GetGraphics ( );
    IAgSaVOPtr GetVO ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgVeEclipseBodiesPtr GetEclipseBodies ( );
    VARIANT_BOOL IsPropagatorTypeSupported (
        enum AgEVePropagatorType Propagator );
    SAFEARRAY * GetPropagatorSupportedTypes ( );
    IAgSaExportToolsPtr GetExportTools ( );
    IAgVeSpatialInfoPtr GetSpatialInfo (
        VARIANT_BOOL Recycle );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    IAgVeSpEnvSpaceEnvironmentPtr GetSpaceEnvironment ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PropagatorType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPropagatorType (
        /*[in]*/ enum AgEVePropagatorType EPropagator ) = 0;
      virtual HRESULT __stdcall get_Propagator (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MassProperties (
        /*[out,retval]*/ struct IAgVeMassProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PassBreak (
        /*[out,retval]*/ struct IAgVePassBreak * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgSaGraphics * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgSaVO * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EclipseBodies (
        /*[out,retval]*/ struct IAgVeEclipseBodies * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsPropagatorTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Propagator,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PropagatorSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgSaExportTools * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpatialInfo (
        /*[in]*/ VARIANT_BOOL Recycle,
        /*[out,retval]*/ struct IAgVeSpatialInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall get_SpaceEnvironment (
        /*[out,retval]*/ struct IAgVeSpEnvSpaceEnvironment * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("5e4b6390-ad77-4e9d-ab30-c7646b43314f"))
_IAgLaunchVehicle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetTrajectoryType))
    enum AgEVePropagatorType TrajectoryType;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetTrajectorySupportedTypes))
    SAFEARRAY * TrajectorySupportedTypes;
    __declspec(property(get=GetTrajectory))
    IAgVePropagatorPtr Trajectory;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetGraphics))
    IAgLvGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgLvVOPtr VO;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetExportTools))
    IAgLvExportToolsPtr ExportTools;
    __declspec(property(get=GetSpaceEnvironment))
    IAgVeSpEnvSpaceEnvironmentPtr SpaceEnvironment;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetTrajectoryType ( );
    HRESULT SetTrajectoryType (
        enum AgEVePropagatorType Trajectory );
    VARIANT_BOOL IsTrajectoryTypeSupported (
        enum AgEVePropagatorType Trajectory );
    SAFEARRAY * GetTrajectorySupportedTypes ( );
    IAgVePropagatorPtr GetTrajectory ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgLvGraphicsPtr GetGraphics ( );
    IAgLvVOPtr GetVO ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgLvExportToolsPtr GetExportTools ( );
    IAgVeSpatialInfoPtr GetSpatialInfo (
        VARIANT_BOOL Recycle );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    IAgVeSpEnvSpaceEnvironmentPtr GetSpaceEnvironment ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrajectoryType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrajectoryType (
        /*[in]*/ enum AgEVePropagatorType Trajectory ) = 0;
      virtual HRESULT __stdcall raw_IsTrajectoryTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Trajectory,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectorySupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgLvGraphics * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgLvVO * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgLvExportTools * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpatialInfo (
        /*[in]*/ VARIANT_BOOL Recycle,
        /*[out,retval]*/ struct IAgVeSpatialInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall get_SpaceEnvironment (
        /*[out,retval]*/ struct IAgVeSpEnvSpaceEnvironment * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("36638b1a-97d3-4fff-acae-eb577e23547e"))
_IAgGroundVehicle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetRouteType))
    enum AgEVePropagatorType RouteType;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetRouteSupportedTypes))
    SAFEARRAY * RouteSupportedTypes;
    __declspec(property(get=GetRoute))
    IAgVePropagatorPtr Route;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetGraphics))
    IAgGvGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgGvVOPtr VO;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetExportTools))
    IAgGvExportToolsPtr ExportTools;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetRouteType ( );
    HRESULT SetRouteType (
        enum AgEVePropagatorType Route );
    VARIANT_BOOL IsRouteTypeSupported (
        enum AgEVePropagatorType Route );
    SAFEARRAY * GetRouteSupportedTypes ( );
    IAgVePropagatorPtr GetRoute ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgGvGraphicsPtr GetGraphics ( );
    IAgGvVOPtr GetVO ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgGvExportToolsPtr GetExportTools ( );
    IAgVeSpatialInfoPtr GetSpatialInfo (
        VARIANT_BOOL Recycle );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RouteType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRouteType (
        /*[in]*/ enum AgEVePropagatorType Route ) = 0;
      virtual HRESULT __stdcall raw_IsRouteTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Route,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RouteSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgGvGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgGvVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgGvExportTools * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpatialInfo (
        /*[in]*/ VARIANT_BOOL Recycle,
        /*[out,retval]*/ struct IAgVeSpatialInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("37c7375e-f63c-4fb1-839f-3b3169508692"))
_IAgMissile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetTrajectoryType))
    enum AgEVePropagatorType TrajectoryType;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetTrajectorySupportedTypes))
    SAFEARRAY * TrajectorySupportedTypes;
    __declspec(property(get=GetTrajectory))
    IAgVePropagatorPtr Trajectory;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetGraphics))
    IAgMsGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgMsVOPtr VO;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetExportTools))
    IAgMsExportToolsPtr ExportTools;
    __declspec(property(get=GetSpaceEnvironment))
    IAgVeSpEnvSpaceEnvironmentPtr SpaceEnvironment;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetTrajectoryType ( );
    HRESULT SetTrajectoryType (
        enum AgEVePropagatorType Propagator );
    VARIANT_BOOL IsTrajectoryTypeSupported (
        enum AgEVePropagatorType Propagator );
    SAFEARRAY * GetTrajectorySupportedTypes ( );
    IAgVePropagatorPtr GetTrajectory ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgMsGraphicsPtr GetGraphics ( );
    IAgMsVOPtr GetVO ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgMsExportToolsPtr GetExportTools ( );
    IAgVeSpatialInfoPtr GetSpatialInfo (
        VARIANT_BOOL Recycle );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    IAgVeSpEnvSpaceEnvironmentPtr GetSpaceEnvironment ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TrajectoryType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTrajectoryType (
        /*[in]*/ enum AgEVePropagatorType Propagator ) = 0;
      virtual HRESULT __stdcall raw_IsTrajectoryTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Propagator,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TrajectorySupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Trajectory (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgMsGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgMsVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgMsExportTools * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpatialInfo (
        /*[in]*/ VARIANT_BOOL Recycle,
        /*[out,retval]*/ struct IAgVeSpatialInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall get_SpaceEnvironment (
        /*[out,retval]*/ struct IAgVeSpEnvSpaceEnvironment * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("ddb83ff3-533b-4fa4-a4f0-47bd39542627"))
_IAgAircraft : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetRouteType))
    enum AgEVePropagatorType RouteType;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetRouteSupportedTypes))
    SAFEARRAY * RouteSupportedTypes;
    __declspec(property(get=GetRoute))
    IAgVePropagatorPtr Route;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetGraphics))
    IAgAcGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgAcVOPtr VO;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetExportTools))
    IAgAcExportToolsPtr ExportTools;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetRouteType ( );
    HRESULT SetRouteType (
        enum AgEVePropagatorType Route );
    VARIANT_BOOL IsRouteTypeSupported (
        enum AgEVePropagatorType Route );
    SAFEARRAY * GetRouteSupportedTypes ( );
    IAgVePropagatorPtr GetRoute ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgAcGraphicsPtr GetGraphics ( );
    IAgAcVOPtr GetVO ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgAcExportToolsPtr GetExportTools ( );
    IAgVeSpatialInfoPtr GetSpatialInfo (
        VARIANT_BOOL Recycle );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RouteType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRouteType (
        /*[in]*/ enum AgEVePropagatorType Route ) = 0;
      virtual HRESULT __stdcall raw_IsRouteTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Route,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RouteSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgAcGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgAcVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgAcExportTools * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpatialInfo (
        /*[in]*/ VARIANT_BOOL Recycle,
        /*[out,retval]*/ struct IAgVeSpatialInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("191e16e1-ba7c-49c4-973e-d073aa0e5014"))
_IAgShip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetRouteType))
    enum AgEVePropagatorType RouteType;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetRouteSupportedTypes))
    SAFEARRAY * RouteSupportedTypes;
    __declspec(property(get=GetRoute))
    IAgVePropagatorPtr Route;
    __declspec(property(get=GetAttitudeType))
    enum AgEVeAttitude AttitudeType;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetAttitudeSupportedTypes))
    SAFEARRAY * AttitudeSupportedTypes;
    __declspec(property(get=GetAttitude))
    IAgVeAttitudePtr Attitude;
    __declspec(property(get=GetGraphics))
    IAgShGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgShVOPtr VO;
    __declspec(property(get=GetGroundEllipses))
    IAgVeGroundEllipsesCollectionPtr GroundEllipses;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetExportTools))
    IAgShExportToolsPtr ExportTools;

    //
    // Wrapper methods for error-handling
    //

    enum AgEVePropagatorType GetRouteType ( );
    HRESULT SetRouteType (
        enum AgEVePropagatorType Route );
    VARIANT_BOOL IsRouteTypeSupported (
        enum AgEVePropagatorType Route );
    SAFEARRAY * GetRouteSupportedTypes ( );
    IAgVePropagatorPtr GetRoute ( );
    enum AgEVeAttitude GetAttitudeType ( );
    HRESULT SetAttitudeType (
        enum AgEVeAttitude Attitude );
    VARIANT_BOOL IsAttitudeTypeSupported (
        enum AgEVeAttitude Attitude );
    SAFEARRAY * GetAttitudeSupportedTypes ( );
    IAgVeAttitudePtr GetAttitude ( );
    IAgShGraphicsPtr GetGraphics ( );
    IAgShVOPtr GetVO ( );
    IAgVeGroundEllipsesCollectionPtr GetGroundEllipses ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgShExportToolsPtr GetExportTools ( );
    IAgVeSpatialInfoPtr GetSpatialInfo (
        VARIANT_BOOL Recycle );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RouteType (
        /*[out,retval]*/ enum AgEVePropagatorType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRouteType (
        /*[in]*/ enum AgEVePropagatorType Route ) = 0;
      virtual HRESULT __stdcall raw_IsRouteTypeSupported (
        /*[in]*/ enum AgEVePropagatorType Route,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RouteSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Route (
        /*[out,retval]*/ struct IAgVePropagator * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeType (
        /*[out,retval]*/ enum AgEVeAttitude * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAttitudeType (
        /*[in]*/ enum AgEVeAttitude Attitude ) = 0;
      virtual HRESULT __stdcall raw_IsAttitudeTypeSupported (
        /*[in]*/ enum AgEVeAttitude Attitude,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AttitudeSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Attitude (
        /*[out,retval]*/ struct IAgVeAttitude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgShGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgShVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_GroundEllipses (
        /*[out,retval]*/ struct IAgVeGroundEllipsesCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExportTools (
        /*[out,retval]*/ struct IAgShExportTools * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetSpatialInfo (
        /*[in]*/ VARIANT_BOOL Recycle,
        /*[out,retval]*/ struct IAgVeSpatialInfo * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("b37af49f-fa76-4bb3-afcf-c7bac7fba628"))
_IAgMto : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetTracks))
    IAgMtoTrackCollectionPtr Tracks;
    __declspec(property(get=GetDefaultTrack))
    IAgMtoDefaultTrackPtr DefaultTrack;
    __declspec(property(get=GetGlobalTrackOptions))
    IAgMtoGlobalTrackOptionsPtr GlobalTrackOptions;
    __declspec(property(get=GetGraphics))
    IAgMtoGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgMtoVOPtr VO;
    __declspec(property(get=GetAnalysis))
    IAgMtoAnalysisPtr Analysis;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;

    //
    // Wrapper methods for error-handling
    //

    IAgMtoTrackCollectionPtr GetTracks ( );
    IAgMtoDefaultTrackPtr GetDefaultTrack ( );
    IAgMtoGlobalTrackOptionsPtr GetGlobalTrackOptions ( );
    IAgMtoGraphicsPtr GetGraphics ( );
    IAgMtoVOPtr GetVO ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    IAgMtoAnalysisPtr GetAnalysis ( );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tracks (
        /*[out,retval]*/ struct IAgMtoTrackCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultTrack (
        /*[out,retval]*/ struct IAgMtoDefaultTrack * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GlobalTrackOptions (
        /*[out,retval]*/ struct IAgMtoGlobalTrackOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgMtoGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgMtoVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * pVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Analysis (
        /*[out,retval]*/ struct IAgMtoAnalysis * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("329bdbac-0f0a-48a5-ba25-92c2d9dd660a"))
_IAgLineTarget : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetDisplayStatusType))
    enum AgEDisplayTimesType DisplayStatusType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetDisplayStatusSupportedTypes))
    SAFEARRAY * DisplayStatusSupportedTypes;
    __declspec(property(get=GetDisplayTimesData))
    IAgDisplayTimesDataPtr DisplayTimesData;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetPoints))
    IAgLtPointCollectionPtr Points;
    __declspec(property(get=GetGraphics))
    IAgLtGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgLtVOPtr VO;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetAllowObjectAccess,put=PutAllowObjectAccess))
    VARIANT_BOOL AllowObjectAccess;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;

    //
    // Wrapper methods for error-handling
    //

    IAgLtPointCollectionPtr GetPoints ( );
    IAgLtGraphicsPtr GetGraphics ( );
    IAgLtVOPtr GetVO ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    VARIANT_BOOL GetAllowObjectAccess ( );
    void PutAllowObjectAccess (
        VARIANT_BOOL pAllowAccess );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    enum AgEDisplayTimesType GetDisplayStatusType ( );
    HRESULT SetDisplayStatusType (
        enum AgEDisplayTimesType DisplayStatus );
    VARIANT_BOOL IsDisplayStatusTypeSupported (
        enum AgEDisplayTimesType DisplayStatus );
    SAFEARRAY * GetDisplayStatusSupportedTypes ( );
    IAgDisplayTimesDataPtr GetDisplayTimesData ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct IAgLtPointCollection * * ppIAgLtPointCollection ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgLtGraphics * * ppIAgLtGraphics ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgLtVO * * ppIAgVO ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppIAgAccessConstraintCollection ) = 0;
      virtual HRESULT __stdcall get_AllowObjectAccess (
        /*[out,retval]*/ VARIANT_BOOL * pAllowAccess ) = 0;
      virtual HRESULT __stdcall put_AllowObjectAccess (
        /*[in]*/ VARIANT_BOOL pAllowAccess ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusType (
        /*[out,retval]*/ enum AgEDisplayTimesType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayStatusType (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus ) = 0;
      virtual HRESULT __stdcall raw_IsDisplayStatusTypeSupported (
        /*[in]*/ enum AgEDisplayTimesType DisplayStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayTimesData (
        /*[out,retval]*/ struct IAgDisplayTimesData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("30d1d89a-e37b-4fda-a336-4aae57f995c0"))
_IAgChain : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetObjects))
    IAgObjectLinkCollectionPtr Objects;
    __declspec(property(get=GetAutoRecompute,put=PutAutoRecompute))
    VARIANT_BOOL AutoRecompute;
    __declspec(property(get=GetTimePeriodType))
    enum AgEChTimePeriodType TimePeriodType;
    __declspec(property(get=GetTimePeriod))
    IAgChTimePeriodBasePtr TimePeriod;
    __declspec(property(get=GetDataSaveMode,put=PutDataSaveMode))
    enum AgEDataSaveMode DataSaveMode;
    __declspec(property(get=GetAccessIntervalsFile))
    _bstr_t AccessIntervalsFile;
    __declspec(property(get=GetConstraints))
    IAgChConstraintsPtr Constraints;
    __declspec(property(get=GetGraphics))
    IAgChGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgChVOPtr VO;
    __declspec(property(get=GetEnableLightTimeDelay,put=PutEnableLightTimeDelay))
    VARIANT_BOOL EnableLightTimeDelay;
    __declspec(property(get=GetMaxTimeStep,put=PutMaxTimeStep))
    double MaxTimeStep;
    __declspec(property(get=GetTimeConvergence,put=PutTimeConvergence))
    double TimeConvergence;
    __declspec(property(get=GetEventDetection))
    IAgAccessEventDetectionPtr EventDetection;
    __declspec(property(get=GetSampling))
    IAgAccessSamplingPtr Sampling;
    __declspec(property(get=GetDetectEventsBasedOnSamplesOnly,put=PutDetectEventsBasedOnSamplesOnly))
    VARIANT_BOOL DetectEventsBasedOnSamplesOnly;
    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;

    //
    // Wrapper methods for error-handling
    //

    IAgObjectLinkCollectionPtr GetObjects ( );
    VARIANT_BOOL GetAutoRecompute ( );
    void PutAutoRecompute (
        VARIANT_BOOL pVal );
    enum AgEChTimePeriodType GetTimePeriodType ( );
    HRESULT SetTimePeriodType (
        enum AgEChTimePeriodType TimePeriodType );
    IAgChTimePeriodBasePtr GetTimePeriod ( );
    enum AgEDataSaveMode GetDataSaveMode ( );
    void PutDataSaveMode (
        enum AgEDataSaveMode pVal );
    HRESULT SetAccessIntervalsFile (
        _bstr_t Filename );
    HRESULT ResetAccessIntervalsFile ( );
    _bstr_t GetAccessIntervalsFile ( );
    IAgChConstraintsPtr GetConstraints ( );
    IAgChGraphicsPtr GetGraphics ( );
    IAgChVOPtr GetVO ( );
    VARIANT_BOOL GetEnableLightTimeDelay ( );
    void PutEnableLightTimeDelay (
        VARIANT_BOOL pVal );
    double GetMaxTimeStep ( );
    void PutMaxTimeStep (
        double pVal );
    double GetTimeConvergence ( );
    void PutTimeConvergence (
        double pVal );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    HRESULT ComputeAccess ( );
    HRESULT ClearAccess ( );
    IAgAccessEventDetectionPtr GetEventDetection ( );
    IAgAccessSamplingPtr GetSampling ( );
    VARIANT_BOOL GetDetectEventsBasedOnSamplesOnly ( );
    void PutDetectEventsBasedOnSamplesOnly (
        VARIANT_BOOL pVal );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AutoRecompute (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoRecompute (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TimePeriodType (
        /*[out,retval]*/ enum AgEChTimePeriodType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTimePeriodType (
        /*[in]*/ enum AgEChTimePeriodType TimePeriodType ) = 0;
      virtual HRESULT __stdcall get_TimePeriod (
        /*[out,retval]*/ struct IAgChTimePeriodBase * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DataSaveMode (
        /*[out,retval]*/ enum AgEDataSaveMode * pVal ) = 0;
      virtual HRESULT __stdcall put_DataSaveMode (
        /*[in]*/ enum AgEDataSaveMode pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessIntervalsFile (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_ResetAccessIntervalsFile ( ) = 0;
      virtual HRESULT __stdcall get_AccessIntervalsFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Constraints (
        /*[out,retval]*/ struct IAgChConstraints * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgChGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgChVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_EnableLightTimeDelay (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLightTimeDelay (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxTimeStep (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxTimeStep (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TimeConvergence (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TimeConvergence (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAccess ( ) = 0;
      virtual HRESULT __stdcall raw_ClearAccess ( ) = 0;
      virtual HRESULT __stdcall get_EventDetection (
        /*[out,retval]*/ struct IAgAccessEventDetection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sampling (
        /*[out,retval]*/ struct IAgAccessSampling * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DetectEventsBasedOnSamplesOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectEventsBasedOnSamplesOnly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("9412b217-797b-4acd-9ab3-1e7d1ed42796"))
_IAgFigureOfMerit : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetDefinitionType))
    enum AgEFmDefinitionType DefinitionType;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetDefinitionSupportedTypes))
    SAFEARRAY * DefinitionSupportedTypes;
    __declspec(property(get=GetDefinition))
    IAgFmDefinitionPtr Definition;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetGraphics))
    IAgFmGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgFmVOPtr VO;
    __declspec(property(get=GetGridInspector))
    IAgFmGridInspectorPtr GridInspector;

    //
    // Wrapper methods for error-handling
    //

    enum AgEFmDefinitionType GetDefinitionType ( );
    HRESULT SetDefinitionType (
        enum AgEFmDefinitionType Def );
    VARIANT_BOOL IsDefinitionTypeSupported (
        enum AgEFmDefinitionType Def );
    SAFEARRAY * GetDefinitionSupportedTypes ( );
    IAgFmDefinitionPtr GetDefinition ( );
    IAgFmDefAccessConstraintPtr SetAccessConstraintDefinition (
        enum AgEFmConstraintName ConstraintName );
    IAgFmGraphicsPtr GetGraphics ( );
    IAgFmVOPtr GetVO ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgFmGridInspectorPtr GetGridInspector ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    IAgFmDefAccessConstraintPtr SetAccessConstraintDefinitionName (
        _bstr_t ConstraintName );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefinitionType (
        /*[out,retval]*/ enum AgEFmDefinitionType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDefinitionType (
        /*[in]*/ enum AgEFmDefinitionType Def ) = 0;
      virtual HRESULT __stdcall raw_IsDefinitionTypeSupported (
        /*[in]*/ enum AgEFmDefinitionType Def,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DefinitionSupportedTypes (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Definition (
        /*[out,retval]*/ struct IAgFmDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessConstraintDefinition (
        /*[in]*/ enum AgEFmConstraintName ConstraintName,
        /*[out,retval]*/ struct IAgFmDefAccessConstraint * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgFmGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgFmVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GridInspector (
        /*[out,retval]*/ struct IAgFmGridInspector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAccessConstraintDefinitionName (
        /*[in]*/ BSTR ConstraintName,
        /*[out,retval]*/ struct IAgFmDefAccessConstraint * * ppIAgFmDefAccessConstraint ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("78a97816-87d0-469b-8a3a-afd321d64b5f"))
_IAgConstellation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetObjects))
    IAgObjectLinkCollectionPtr Objects;
    __declspec(property(get=GetConstraints))
    IAgCnConstraintsPtr Constraints;
    __declspec(property(get=GetGraphics))
    IAgCnGraphicsPtr Graphics;
    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;

    //
    // Wrapper methods for error-handling
    //

    IAgObjectLinkCollectionPtr GetObjects ( );
    IAgCnConstraintsPtr GetConstraints ( );
    IAgCnGraphicsPtr GetGraphics ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pShortDesc );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pLongDesc );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Objects (
        /*[out,retval]*/ struct IAgObjectLinkCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Constraints (
        /*[out,retval]*/ struct IAgCnConstraints * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgCnGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pShortDesc ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pShortDesc ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pLongDesc ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pLongDesc ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pHasChildren ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppIAgStkAccess ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("06fc011e-64e7-4d63-85d4-3be6f7d448b2"))
IAgCvAssetListCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAgCvAssetListElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAvailableAssets))
    SAFEARRAY * AvailableAssets;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IAgCvAssetListElementPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT RemoveAt (
        long Index );
    HRESULT RemoveAll ( );
    IAgCvAssetListElementPtr Add (
        _bstr_t ObjectPath );
    SAFEARRAY * GetAvailableAssets ( );
    HRESULT Remove (
        _bstr_t ObjectPath );
    IAgCvAssetListElementPtr GetAssetFromPath (
        _bstr_t ObjectPath );
    VARIANT_BOOL IsAssetAssigned (
        _bstr_t ObjectPath );
    VARIANT_BOOL CanAssignAsset (
        _bstr_t ObjectPath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IAgCvAssetListElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAt (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgCvAssetListElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AvailableAssets (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR ObjectPath ) = 0;
      virtual HRESULT __stdcall raw_GetAssetFromPath (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgCvAssetListElement * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAssetAssigned (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CanAssignAsset (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("5e64b103-0d87-41c6-8dd8-a3cbf39f8b5e"))
IAgCvAssetListElement : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAssetStatus,put=PutAssetStatus))
    enum AgECvAssetStatus AssetStatus;
    __declspec(property(get=GetGrouping,put=PutGrouping))
    enum AgECvAssetGrouping Grouping;
    __declspec(property(get=GetObjectName))
    _bstr_t ObjectName;
    __declspec(property(get=GetSubAssetList))
    IAgCvAssetListCollectionPtr SubAssetList;
    __declspec(property(get=GetRequired,put=PutRequired))
    VARIANT_BOOL Required;
    __declspec(property(get=GetUseConstConstraints,put=PutUseConstConstraints))
    VARIANT_BOOL UseConstConstraints;

    //
    // Wrapper methods for error-handling
    //

    enum AgECvAssetStatus GetAssetStatus ( );
    void PutAssetStatus (
        enum AgECvAssetStatus pRetVal );
    enum AgECvAssetGrouping GetGrouping ( );
    void PutGrouping (
        enum AgECvAssetGrouping pRetVal );
    _bstr_t GetObjectName ( );
    VARIANT_BOOL ContainsSubAssets ( );
    IAgCvAssetListCollectionPtr GetSubAssetList ( );
    VARIANT_BOOL GetRequired ( );
    void PutRequired (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseConstConstraints ( );
    void PutUseConstConstraints (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AssetStatus (
        /*[out,retval]*/ enum AgECvAssetStatus * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AssetStatus (
        /*[in]*/ enum AgECvAssetStatus pRetVal ) = 0;
      virtual HRESULT __stdcall get_Grouping (
        /*[out,retval]*/ enum AgECvAssetGrouping * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Grouping (
        /*[in]*/ enum AgECvAssetGrouping pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectName (
        /*[out,retval]*/ BSTR * pObjectName ) = 0;
      virtual HRESULT __stdcall raw_ContainsSubAssets (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SubAssetList (
        /*[out,retval]*/ struct IAgCvAssetListCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Required (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Required (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseConstConstraints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseConstConstraints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("3d089208-3ea8-4dd6-83a2-90361c376133"))
_IAgStkObjectCoverage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetStartTime,put=PutStartTime))
    _variant_t StartTime;
    __declspec(property(get=GetStopTime,put=PutStopTime))
    _variant_t StopTime;
    __declspec(property(get=GetAssets))
    IAgCvAssetListCollectionPtr Assets;
    __declspec(property(get=GetFOM))
    IAgObjectCoverageFOMPtr FOM;

    //
    // Wrapper methods for error-handling
    //

    IAgDataProviderCollectionPtr GetDataProviders ( );
    _variant_t GetStartTime ( );
    void PutStartTime (
        const _variant_t & pStartTime );
    _variant_t GetStopTime ( );
    void PutStopTime (
        const _variant_t & pStopTime );
    IAgCvAssetListCollectionPtr GetAssets ( );
    IAgObjectCoverageFOMPtr GetFOM ( );
    HRESULT Compute ( );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ VARIANT * pStartTime ) = 0;
      virtual HRESULT __stdcall put_StartTime (
        /*[in]*/ VARIANT pStartTime ) = 0;
      virtual HRESULT __stdcall get_StopTime (
        /*[out,retval]*/ VARIANT * pStopTime ) = 0;
      virtual HRESULT __stdcall put_StopTime (
        /*[in]*/ VARIANT pStopTime ) = 0;
      virtual HRESULT __stdcall get_Assets (
        /*[out,retval]*/ struct IAgCvAssetListCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_FOM (
        /*[out,retval]*/ struct IAgObjectCoverageFOM * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Compute ( ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("ef43e921-5cb4-4070-a0ee-b130d2f65710"))
_IAgCoverageDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IAgStkObjectPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstanceName,put=PutInstanceName))
    _bstr_t InstanceName;
    __declspec(property(get=GetClassType))
    enum AgESTKObjectType ClassType;
    __declspec(property(get=GetClassName))
    _bstr_t ClassName;
    __declspec(property(get=GetChildren))
    IAgStkObjectCollectionPtr Children;
    __declspec(property(get=GetRoot))
    IAgStkObjectRootPtr Root;
    __declspec(property(get=GetDataProviders))
    IAgDataProviderCollectionPtr DataProviders;
    __declspec(property(get=GetShortDescription,put=PutShortDescription))
    _bstr_t ShortDescription;
    __declspec(property(get=GetLongDescription,put=PutLongDescription))
    _bstr_t LongDescription;
    __declspec(property(get=GetHasChildren))
    VARIANT_BOOL HasChildren;
    __declspec(property(get=GetObjectCoverage))
    IAgStkObjectCoveragePtr ObjectCoverage;
    __declspec(property(get=GetAccessConstraints))
    IAgAccessConstraintCollectionPtr AccessConstraints;
    __declspec(property(get=GetObjectFiles))
    SAFEARRAY * ObjectFiles;
    __declspec(property(get=GetGrid))
    IAgCvGridPtr Grid;
    __declspec(property(get=GetPointDefinition))
    IAgCvPointDefinitionPtr PointDefinition;
    __declspec(property(get=GetAssetList))
    IAgCvAssetListCollectionPtr AssetList;
    __declspec(property(get=GetAdvanced))
    IAgCvAdvancedPtr Advanced;
    __declspec(property(get=GetInterval))
    IAgCvIntervalPtr Interval;
    __declspec(property(get=GetGraphics))
    IAgCvGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgCvVOPtr VO;
    __declspec(property(get=GetHasBeenDeleted))
    VARIANT_BOOL HasBeenDeleted;
    __declspec(property(get=GetVgt))
    AgSTKVgtLib::IAgCrdnProviderPtr Vgt;
    __declspec(property(get=GetGridInspector))
    IAgCvGridInspectorPtr GridInspector;

    //
    // Wrapper methods for error-handling
    //

    IAgCvGridPtr GetGrid ( );
    IAgCvPointDefinitionPtr GetPointDefinition ( );
    IAgCvAssetListCollectionPtr GetAssetList ( );
    IAgCvAdvancedPtr GetAdvanced ( );
    IAgCvIntervalPtr GetInterval ( );
    IAgCvGraphicsPtr GetGraphics ( );
    IAgCvVOPtr GetVO ( );
    IAgStkObjectPtr GetParent ( );
    _bstr_t GetPath ( );
    _bstr_t GetInstanceName ( );
    void PutInstanceName (
        _bstr_t pRetVal );
    enum AgESTKObjectType GetClassType ( );
    _bstr_t GetClassName ( );
    IAgStkObjectCollectionPtr GetChildren ( );
    HRESULT Export (
        _bstr_t Filename );
    IAgStkObjectRootPtr GetRoot ( );
    IAgDataProviderCollectionPtr GetDataProviders ( );
    _bstr_t GetShortDescription ( );
    void PutShortDescription (
        _bstr_t pRetVal );
    _bstr_t GetLongDescription ( );
    void PutLongDescription (
        _bstr_t pRetVal );
    VARIANT_BOOL GetHasChildren ( );
    VARIANT_BOOL IsObjectCoverageSupported ( );
    IAgStkObjectCoveragePtr GetObjectCoverage ( );
    VARIANT_BOOL IsAccessSupported ( );
    IAgStkAccessPtr GetAccess (
        _bstr_t ObjectPath );
    IAgStkAccessPtr GetAccessToObject (
        struct IAgStkObject * pObject );
    VARIANT_BOOL GetHasBeenDeleted ( );
    HRESULT ComputeAccesses ( );
    HRESULT ClearAccesses ( );
    HRESULT ReloadAccesses ( );
    HRESULT ExportAccessesAsText (
        _bstr_t Filename );
    IAgCvGridInspectorPtr GetGridInspector ( );
    IAgAccessConstraintCollectionPtr GetAccessConstraints ( );
    IAgOnePtAccessPtr CreateOnePointAccess (
        _bstr_t PathToObject );
    SAFEARRAY * GetObjectFiles ( );
    HRESULT Unload ( );
    VARIANT_BOOL IsVgtSupported ( );
    AgSTKVgtLib::IAgCrdnProviderPtr GetVgt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Grid (
        /*[out,retval]*/ struct IAgCvGrid * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_PointDefinition (
        /*[out,retval]*/ struct IAgCvPointDefinition * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AssetList (
        /*[out,retval]*/ struct IAgCvAssetListCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgCvAdvanced * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Interval (
        /*[out,retval]*/ struct IAgCvInterval * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgCvGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgCvVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IAgStkObject * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InstanceName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_InstanceName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClassType (
        /*[out,retval]*/ enum AgESTKObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ClassName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IAgStkObjectCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IAgStkObjectRoot * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_DataProviders (
        /*[out,retval]*/ struct IAgDataProviderCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ShortDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ShortDescription (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LongDescription (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_LongDescription (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasChildren (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsObjectCoverageSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectCoverage (
        /*[out,retval]*/ struct IAgStkObjectCoverage * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccess (
        /*[in]*/ BSTR ObjectPath,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAccessToObject (
        /*[in]*/ struct IAgStkObject * pObject,
        /*[out,retval]*/ struct IAgStkAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_HasBeenDeleted (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAccesses ( ) = 0;
      virtual HRESULT __stdcall raw_ClearAccesses ( ) = 0;
      virtual HRESULT __stdcall raw_ReloadAccesses ( ) = 0;
      virtual HRESULT __stdcall raw_ExportAccessesAsText (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_GridInspector (
        /*[out,retval]*/ struct IAgCvGridInspector * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_AccessConstraints (
        /*[out,retval]*/ struct IAgAccessConstraintCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnePointAccess (
        /*[in]*/ BSTR PathToObject,
        /*[out,retval]*/ struct IAgOnePtAccess * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectFiles (
        /*[out,retval]*/ SAFEARRAY * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall raw_IsVgtSupported (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vgt (
        /*[out,retval]*/ struct AgSTKVgtLib::IAgCrdnProvider * * ppRetVal ) = 0;
};

struct __declspec(uuid("437415d2-b850-4df1-bb30-0314f82085ce"))
IAgCoverageDefinition : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGrid))
    IAgCvGridPtr Grid;
    __declspec(property(get=GetPointDefinition))
    IAgCvPointDefinitionPtr PointDefinition;
    __declspec(property(get=GetAssetList))
    IAgCvAssetListCollectionPtr AssetList;
    __declspec(property(get=GetAdvanced))
    IAgCvAdvancedPtr Advanced;
    __declspec(property(get=GetInterval))
    IAgCvIntervalPtr Interval;
    __declspec(property(get=GetGraphics))
    IAgCvGraphicsPtr Graphics;
    __declspec(property(get=GetVO))
    IAgCvVOPtr VO;
    __declspec(property(get=GetGridInspector))
    IAgCvGridInspectorPtr GridInspector;

    //
    // Wrapper methods for error-handling
    //

    IAgCvGridPtr GetGrid ( );
    IAgCvPointDefinitionPtr GetPointDefinition ( );
    IAgCvAssetListCollectionPtr GetAssetList ( );
    IAgCvAdvancedPtr GetAdvanced ( );
    IAgCvIntervalPtr GetInterval ( );
    IAgCvGraphicsPtr GetGraphics ( );
    IAgCvVOPtr GetVO ( );
    HRESULT ComputeAccesses ( );
    HRESULT ClearAccesses ( );
    HRESULT ReloadAccesses ( );
    HRESULT ExportAccessesAsText (
        _bstr_t Filename );
    IAgCvGridInspectorPtr GetGridInspector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Grid (
        /*[out,retval]*/ struct IAgCvGrid * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PointDefinition (
        /*[out,retval]*/ struct IAgCvPointDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AssetList (
        /*[out,retval]*/ struct IAgCvAssetListCollection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Advanced (
        /*[out,retval]*/ struct IAgCvAdvanced * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Interval (
        /*[out,retval]*/ struct IAgCvInterval * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Graphics (
        /*[out,retval]*/ struct IAgCvGraphics * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_VO (
        /*[out,retval]*/ struct IAgCvVO * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_ComputeAccesses ( ) = 0;
      virtual HRESULT __stdcall raw_ClearAccesses ( ) = 0;
      virtual HRESULT __stdcall raw_ReloadAccesses ( ) = 0;
      virtual HRESULT __stdcall raw_ExportAccessesAsText (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_GridInspector (
        /*[out,retval]*/ struct IAgCvGridInspector * * ppRetVal ) = 0;
};

struct __declspec(uuid("9f9e20f7-e8ff-4782-86de-d312bd75e128"))
_IAgCvAssetListElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAssetStatus,put=PutAssetStatus))
    enum AgECvAssetStatus AssetStatus;
    __declspec(property(get=GetGrouping,put=PutGrouping))
    enum AgECvAssetGrouping Grouping;
    __declspec(property(get=GetObjectName))
    _bstr_t ObjectName;
    __declspec(property(get=GetSubAssetList))
    IAgCvAssetListCollectionPtr SubAssetList;
    __declspec(property(get=GetRequired,put=PutRequired))
    VARIANT_BOOL Required;
    __declspec(property(get=GetUseConstConstraints,put=PutUseConstConstraints))
    VARIANT_BOOL UseConstConstraints;

    //
    // Wrapper methods for error-handling
    //

    enum AgECvAssetStatus GetAssetStatus ( );
    void PutAssetStatus (
        enum AgECvAssetStatus pRetVal );
    enum AgECvAssetGrouping GetGrouping ( );
    void PutGrouping (
        enum AgECvAssetGrouping pRetVal );
    _bstr_t GetObjectName ( );
    VARIANT_BOOL ContainsSubAssets ( );
    IAgCvAssetListCollectionPtr GetSubAssetList ( );
    VARIANT_BOOL GetRequired ( );
    void PutRequired (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseConstConstraints ( );
    void PutUseConstConstraints (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AssetStatus (
        /*[out,retval]*/ enum AgECvAssetStatus * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AssetStatus (
        /*[in]*/ enum AgECvAssetStatus pRetVal ) = 0;
      virtual HRESULT __stdcall get_Grouping (
        /*[out,retval]*/ enum AgECvAssetGrouping * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Grouping (
        /*[in]*/ enum AgECvAssetGrouping pRetVal ) = 0;
      virtual HRESULT __stdcall get_ObjectName (
        /*[out,retval]*/ BSTR * pObjectName ) = 0;
      virtual HRESULT __stdcall raw_ContainsSubAssets (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SubAssetList (
        /*[out,retval]*/ struct IAgCvAssetListCollection * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Required (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Required (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseConstConstraints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseConstConstraints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

} // namespace STKObjects

#pragma pack(pop)
